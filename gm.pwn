#define compat=1
#pragma dynamic 100001

/* --------------------------------[ Kapatýlan Uyarýlar ]---------------------------- */

#pragma 	warning 	disable 	213
#pragma 	warning 	disable 	219
#pragma 	warning 	disable 	214
#pragma 	warning 	disable 	239
#pragma 	warning 	disable 	202
#pragma 	warning 	disable 	217
#pragma 	warning 	disable 	203
#pragma 	warning 	disable 	204

/* --------------------------------[ Gamemode Ayarlarý ]------------------------------ */

#define 	REGISTRATION 		(1) // 1: Oyun içi kayýt | 0: Oyun dýþý kayýt
#define 	GameModeVersion 	"LWORLD v1 Beta"
#define 	GameModeUpdate 		"19.07.2025"
#define 	SERVER_BONUS 		2450   // Belli bir seviyeye ulaþýnca verilecek bonus

#define IsPlayerAndroid(%0)                 GetPVarInt(%0, "NotAndroid") == 0

/* --------------------------------[ Sunucu Bilgileri ]------------------------------ */

#define 	GameModeText 		""GameModeVersion""
#define 	WeburlName 			"LOSWORLD-rp.com"
#define 	ProjectName 		"LOSWORLD Roleplay"
#define 	ServerName 			""ProjectName" ["WeburlName"]"
#define 	MAP_NAME 			"Los Santos"

/* --------------------------------[ Include Dosyalarý ]------------------------------ */

#include 	<a_samp>            	// 	0.3DL R1 -   Kalcor
#include 	<crashdetect>       	// 	4.22.0   -   Zeex
#include    <Pawn.RakNet>       	//  1.6.0  	 -   katursis
#include    <streamer>          	//  N/A      -   Incognito
#include 	<Pawn.CMD>          	//  3.4.0    -   katursis
#include 	<a_mysql>           	//  R41-4    -   pBlueG
#include 	<sscanf2>           	//  2.13.8   -   Y_Less
#include 	<foreach>           	//  0.4.2    -   Y_Less
#include 	<dc_foreach_veh>    	//  1.0.0    -   Daniel_Cortez
#include    <weapon-config> 		//  1.0.0    -   oscar_broman
#include 	<memory>            	//  1.0.0    -   Jabern
#include 	<PreviewModelDialog>	//  4.7.2    -   Gammix
#include 	<eSelection>            //  1.1.0    -   TommyB123
#include 	<easyDialog>            //  N/A      -   Emmet_
#include 	<NexAC>                 //  v1.9.62  -   Nexius
#include 	<messagebox>            //  1.0      -   LeBoyce
#include 	<3dmenu>                //  N/A      -   SDraw
#include 	<afk>                   //  v2.0     -   #McAllen
#include 	<PlayerToPlayer>        //  N/A      -   N/A
#include	<strlib>                //  N/A      -   oscar_broman
#include 	<acuf>                  //  1.2      -   AirKite
#include 	<mapandreas>            //  1.2      -   Mauzen, Kalcor
#include 	<mxdate>                //  N/A      -   N/A
#include 	<timestamp>             //  N/A      -   Jochmend
#include    <mxINI>                 //  0.5.3    -   N/A
#include    <timerfix>              //  1.5      -   Dan
#include    <evf>                   //  N/A      -   Emmet_
#include 	<evi>                   //  N/A      -   Vince0789
#include    <md5>                   //  0.1      -   Y_Less
#include    <anti_airbreak>         //  N/A      -   Emmet_, Kar
#include    <AntiVehicleSpawn>      //  N/A      -   povargek
#include	<discord-connector>     //  afb7e3b  -   maddinat0r
#include 	<discord-cmd>           //  1.0.2    -   AkshayMohan
#include 	<compat>           		//  Leader

new MySQL:dbHandle;

enum MYSQL_SETTINGS
{
	SQL_HOST,
	SQL_USER,
	SQL_PASS,
	SQL_DB
}
new sqlData[MYSQL_SETTINGS][30];

#define GetDynamicObjectModel(%0) Streamer_GetIntData(STREAMER_TYPE_OBJECT, %0, E_STREAMER_MODEL_ID)

#define this::%0(%1) \
	forward %0(%1);\
	public %0(%1)

#define DIALOG_CONFIRM_SYS 7020

//////////////////////////////// MISC ////////////////////////////////
#define SetInterior(%0,%1) \
	SetPlayerInterior(%0,%1)

#define GetInterior(%0) \
	GetPlayerInterior(%0)

#define SetWorld(%0,%1) \
	SetPlayerVirtualWorld(%0,%1)

#define GetWorld(%0) \
	GetPlayerVirtualWorld(%0)

#define PlayerToPoint(%0,%1,%2,%3,%4) \
	IsPlayerInRangeOfPoint(%1,%0,%2,%3,%4)

#define GetName(%0) \
	PlayerInfo[%0][pUsername]

#define GetNameEx(%0) \
	PlayerInfo[%0][pUsername_]

#define GetNameWithMask(%0) \
	PlayerInfo[%0][pMaskname]

#define GetAccName(%0) \
	PlayerInfo[%0][pAccname]

stock GetPlayerNameEx(playerid, underscore = 0)
{
	new name[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, name, sizeof(name));
	if(!underscore)
    {
        for (new i = 0, len = strlen(name); i < len; i ++) {
            if(name[i] == '_') name[i] = ' ';
        }
    }
    return name;
}
//////////////////////////////////////////////////////////////////////
//////////////////////////////// TEXT DEFINES ////////////////////////

#define SCM \
	SendClientMessage

#define SCMALL \
	SendClientMessageToAll

#define SendServerMessage(%0,%1) \
	SendClientMessageEx(%0, COLOUR_TOMATO, "SUNUCU:{FFFFFF} "%1)

#define SendSyntaxMessage(%0,%1) \
	SendClientMessageEx(%0, COLOUR_TOMATO, "Bilgi:{FFFFFF} "%1)

#define SendMedicMessage(%0,%1) \
	SendClientMessageEx(%0, COLOUR_TOMATO, "SUNUCU:{FFFFFF} "%1)

#define SendHelpMessage(%0,%1) \
	SendClientMessageEx(%0, COLOUR_TURQUOISE, "Kullaným:{FFFFFF} "%1)

#define SendSpecialMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_YELLOWMY, "--> "%1)

#define SendErrorMessage(%0,%1) \
	SendClientMessageEx(%0, COLOUR_TOMATO, "Hata:{FFFFFF} "%1)

#define SendWarningMessage(%0,%1) \
	SendClientMessageEx(%0, COLOUR_TOMATO, "Uyarý:{FFFFFF} "%1)

#define SM1(%0,%1) \
	SendClientMessageEx(%0, COLOUR_TOMATO, "SUNUCU:{FFFFFF} "%1)

#define SM2(%0,%1) \
	SendClientMessageEx(%0, COLOUR_TOMATO, "SUNUCU:{FFFFFF} "%1)

#define SM3(%0,%1) \
	SendClientMessageEx(%0, COLOUR_TOMATO, "SUNUCU: "%1)

#define SM4(%0,%1) \
	SendClientMessageEx(%0, COLOR_WHITE, "LOSWORLD: "%1)

#define SendBlackMarketMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_SERVER2, "KARA BORSA >> "%1)
///PHONE && PAYPHONE && RADIO///
#define SendCellMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_GRAD2, "[ ! ] "%1)

#define SendPhoneMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_YELLOWG, "Operatör (telefon): "%1)

#define SendRadioMsg(%0,%1) \
	SendClientMessageEx(%0, COLOR_YELLOWMY, "Telsiz: "%1)

//////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// ADM CMD //////////////////

#define SendAdmMessage(%0) \
	AMSG(COLOUR_TOMATO, "AdmCmd: "%0)

#define SAM \
	SendAdmMessage

#define SendAdmMessageToAll(%0) \
	SendClientMessageToAllEx(COLOUR_TOMATO, "[Yönetim] "%0)
	// Âñåì èãðîêàì

#define SAMALL \
	SendAdmMessageToAll

#define SendAdmMessageToPlayer(%0,%1) \
	SendClientMessageEx(%0, COLOUR_TOMATO, "[Yönetim] "%1)
	// Èãðîêó

#define SAMPL\
	SendAdmMessageToPlayer

//////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// ERRORS ///////////////////
#define SendCuffedMessage(%0)	SendClientMessageEx(%0, COLOUR_TOMATO, "Bilgi:{FFFFFF} Kelepçelisiniz.")
#define SendNotConnected(%0)	SendClientMessageEx(%0, COLOUR_TOMATO, "Bilgi:{FFFFFF} Kiþi oyunda deðil.")
#define SendNotNearPlayer(%0)	SendClientMessageEx(%0, COLOUR_TOMATO, "Bilgi:{FFFFFF} Kiþi sizden çok uzak.")
#define SendNotInVehicle(%0)	SendClientMessageEx(%0, COLOUR_TOMATO, "Bilgi:{FFFFFF} Araçta olmalýsýnýz.")
#define SendNotCash(%0)			SendClientMessageEx(%0, COLOUR_TOMATO, "Bilgi:{FFFFFF} Yeterli paranýz yok.")
#define SendNotAdmin(%0)		SendClientMessageEx(%0, COLOUR_TOMATO, "Bilgi:{FFFFFF} Yetkisiz komut kullandýnýz.")
///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// OTHER ///////////////////

#define SendNoteMessage(%0,%1) \
	SendClientMessageEx(%0, -1, "Not: "%1)

#define SendErrorRadioMessage(%0,%1) \
	SendClientMessageEx(%0, 0xAFAFAFFF, "[Telsiz]:{DADADA} "%1)

#define SendFishMessage(%0,%1) \
	SendClientMessageEx(%0, -1, "Balýkçýlýk: "%1)

#define PRESSING(%0,%1) \
	(%0 & (%1))

#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

/* Tanýmlar */

#define FACTION_CITY    (1)
#define FACTION_POLICE  (2)
#define FACTION_MEDICS  (3)
#define FACTION_FIRE    (4)
#define FACTION_DOCS    (5)
#define FACTION_SAN     (6)
#define FACTION_GANG    (7)
#define FACTION_MAFIA   (8)
#define FACTION_CIVIL   (9)
#define FACTION_SANOFF  (10)
#define FACTION_STATEBAR (11)
#define FACTION_MOTOCYCLE  (12)
#define FACTION_RACE 	   (13)

new OlusumTipleri[14][123] =
{
	"Yok",
	"LS Government",
	"LS Police Departmaný",
	"LS Medikal Departmaný",
	"LS Fire Departmaný",
	"Department of Corrections",
	"Haber/Yayýn Birliði",
	"Çete",
	"Mafya",
	"Sivil",
	"Haberci",
	"State Bar",
	"Motor Kulübü (MC)",
	"Yarýþçý Birliði"
};

new OyuncuOlusumlar[] = // Oyuncularýn yaratabileceði oluþum tipleri
{
	6,
	7,
	8,
	9,
	12,
	13,
};

#define IsFactionLegal(%0)          (Factions[%0][fType] > 0 && Factions[%0][fType] < 6 || Factions[%0][fType] == 11)
#define PlayerFactionType(%0)       Factions[PlayerInfo[%0][pFaction]][fType]

#define IsPlayerFactionPolice(%0)   (Factions[PlayerInfo[%0][pFaction]][fType] == FACTION_POLICE)
#define IsPlayerFactionMedic(%0)    (Factions[PlayerInfo[%0][pFaction]][fType] == FACTION_MEDICS)
#define IsPlayerFactionFire(%0)     (Factions[PlayerInfo[%0][pFaction]][fType] == FACTION_FIRE)
#define IsPlayerFactionNews(%0)     (Factions[PlayerInfo[%0][pFaction]][fType] == FACTION_SAN)
#define IsPlayerFactionNewsOff(%0)     (Factions[PlayerInfo[%0][pFaction]][fType] == FACTION_SANOFF)
#define IsPlayerFactionCity(%0)     (Factions[PlayerInfo[%0][pFaction]][fType] == FACTION_CITY)
#define IsPlayerFactionDocs(%0)     (Factions[PlayerInfo[%0][pFaction]][fType] == FACTION_DOCS)
#define IsPlayerFactionStateBar(%0)     (Factions[PlayerInfo[%0][pFaction]][fType] == FACTION_StateBar)
#define IsPlayerFactionMafia(%0)     (Factions[PlayerInfo[%0][pFaction]][fType] == FACTION_GANG)
#define IsPlayerFactionGang(%0)     (Factions[PlayerInfo[%0][pFaction]][fType] == FACTION_MAFIA)
#define IsPlayerFactionMC(%0)     (Factions[PlayerInfo[%0][pFaction]][fType] == FACTION_MOTOCYCLE)
#define IsPlayerFactionRace(%0)     (Factions[PlayerInfo[%0][pFaction]][fType] == FACTION_RACE)

#define IsFactionPolice(%0)     (Factions[%0][fType] == FACTION_POLICE)
#define IsFactionMedic(%0)      (Factions[%0][fType] == FACTION_MEDICS)
#define IsFactionFire(%0)       (Factions[%0][fType] == FACTION_FIRE)
#define IsFactionNews(%0)       (Factions[%0][fType] == FACTION_SAN)
#define IsFactionNewsOff(%0)       (Factions[%0][fType] == FACTION_SANOFF)
#define IsFactionCity(%0)       (Factions[%0][fType] == FACTION_CITY)
#define IsFactionDocs(%0)       (Factions[%0][fType] == FACTION_DOCS)
#define IsFactionStateBar(%0)       (Factions[%0][fType] == FACTION_STATEBAR)

#define GetRankName(%0)         FactionRanks[PlayerInfo[%0][pFaction]][PlayerInfo[%0][pRank]-1]

#define GetInviteRight(%0)      FRank[PlayerInfo[%0][pFaction]][PlayerInfo[%0][pRank]-1][rInvite]
#define GetUninviteRight(%0)    FRank[PlayerInfo[%0][pFaction]][PlayerInfo[%0][pRank]-1][rUninvite]
#define GetRankRight(%0)        FRank[PlayerInfo[%0][pFaction]][PlayerInfo[%0][pRank]-1][rRank]
#define GetRankNameRight(%0)    FRank[PlayerInfo[%0][pFaction]][PlayerInfo[%0][pRank]-1][r_eRank]
#define GetSpawnRight(%0)       FRank[PlayerInfo[%0][pFaction]][PlayerInfo[%0][pRank]-1][rSpawn]
#define GetChatRight(%0)        FRank[PlayerInfo[%0][pFaction]][PlayerInfo[%0][pRank]-1][rChat]
#define GetTowRight(%0)         FRank[PlayerInfo[%0][pFaction]][PlayerInfo[%0][pRank]-1][rTow]
#define GetBodyCamRight(%0)     FRank[PlayerInfo[%0][pFaction]][PlayerInfo[%0][pRank]-1][rBodyCam]
#define GetRightsRight(%0)      FRank[PlayerInfo[%0][pFaction]][PlayerInfo[%0][pRank]-1][r_eRights]

#define RIGHT_YES       "{00B200}Var"
#define RIGHT_NO        "{CC0000}Yok"

#define MAX_FACTION_LENGHT					(90)

#define OLUSUM_BIRLIK_KUR_SEVIYE 	1
#define OLUSUM_BIRLIK_KUR_PARA 		2500
#define MAX_OLUSUM_ADI 				40 // string uzunluðu
#define MAX_OLUSUM_KISADI 			5 // string uzunluðu

new OlusumDialog[MAX_PLAYERS][5];


#define BODY_PART_TORSO         (3)
#define BODY_PART_GROIN         (4)
#define BODY_PART_RIGHT_ARM     (5)
#define BODY_PART_LEFT_ARM      (6)
#define BODY_PART_RIGHT_LEG     (7)
#define BODY_PART_LEFT_LEG      (8)
#define BODY_PART_HEAD          (9)

#define MAX_DAMAGES             (200)
#define MAX_DIALOG_LIST        20


#define COL_WHITE "FFFFFF"
#define COL_RED "F81414"
#define COL_LIGHTBLUE "00CED1"
#define COL_TITLE "25AFFE"
#define COL_GREY "C3C3C3"
#define COL_WHITE "FFFFFF"
#define COL_RED "F81414"
#define COL_GREEN "00FF22"
#define COL_ORANGE "FF9900"
#define COL_BLACK "000000"

#define COLOR_DOC "0x9966FF"
#define COLOR_LIGHTRED 0xFF6347FF
//#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_SERVER2 0xFAFAD2FF
#define EMBED_SERVER2 "{A9C4E4}"

#define EMBED_RED "{FF0000}"
#define EMBED_WHITE "{FFFFFF}"
#define EMBED_YELLOW "{00FF00}"
#define EMBED_GREEN "{808040}"
#define EMBED_BLUE "{0000FF}"
#define EMBED_LIGHTBLUE "{8080FF}"
#define EMBED_GRAY "{949494}"
#define EMBED_CYAN "{00FFFF}"

#define TAXI_DUTY 0xFF7F5000
#define LSFD_COLOR 0xFF7D7DFF
#define COLOR_STATS1 0xE2FFFFFF
#define COLOR_STATS2 0xCCE6E6FF
#define FACTION_OOC 0x7BDDA5AA
#define COLOR_HELPS 0xFFEC8B00
#define LSPD_DUTY 0x8c8cfeff
#define LSFD_DUTY 0xfe8281ff
#define DOCS_DUTY 0x9900ff
#define COLOR_POLICECHAT 0x9999FFFF
#define COLOR_LSPD 0x63AFF00A
#define COLOR_DPURPLE 0x000080FF
#define COLOR_PMOUT 0xF6EA51AA
#define COLOR_PMIN 0xF6D600AA
#define COLOR_ADGREEN 0x00E100FF
#define COLOR_RADIO 0xFDE39DAA
#define COLOR_GRAD1 0xFFFFFFFF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GRAD7 0xB4B5B7FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x33AA3300
#define COLOR_GREENFORADVERT (0x33CC33FF)
#define COLOR_GREEN2 0x36A71700
#define COLOR_HOUSE 0xCCFFDDFF
#define HOUSE_GREEN 0xFFFFFFAA
#define COLOR_SYSTEM 0xEFEFF7AA
#define COLOR_GROVE 0x00FF00FF
#define COLOR_RED 0xAA3333AA
#define TEAM_CYAN 1
#define COLOR_NICEBLUE 0x25affeAA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_WT 0x10ce96AA
#define COLOR_GOLD 	0xF6C861AA
#define COLOR_YELLOW 0xDABB3EAA
#define COLOR_YELLOWMY 0xFFC46AAA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_YELLOW3 0xFFFF00FF
#define COLOR_BLUE 0x2641FEAA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_DRUG 0xC41E3AAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_ALLDEPTOOC 0xe08efeAA
#define COLOR_NEWS 0x458E1DAA
#define COLOR_BLACK 0x000000AA
#define COLOR_YELLOWG 0xFFFF00AA
#define COLOR_ORANGE 0xFF9900AA
#define TEAM_HIT_COLOR 0xFFFFFF00
#define COLOR_OOC 0xB1C8FBAA
#define COLOR_REPORT 0xFFFF91FF

    //0x408080FF
#define TEAM_ADMIN_COLOR 0xa40000FF

#define ADVERT_COLOR 0x00D900C8
#define COLOR_CONNECT 0xC0C0C0FF
#define HELPER_DUTY 0x8b5d2e00
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_MAGENTA 0xFF00FFFF
#define COLOR_FLBLUE 0x6495EDAA
#define COLOR_BROWN 0XA52A2AAA
#define COLOR_CORAL 0xFF7F50AA
#define COLOR_MEDIUMAQUA 0x83BFBFAA
#define COLOR_MEDIUMMAGENTA 0x8B008BAA
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_ACTIVEBORDER 0xB4B4B4FF
#define COLOR_ACTIVECAPTION 0x99B4D1FF
#define COLOR_ACTIVECAPTIONTEXT 0x000000FF
#define COLOR_ALICEBLUE 0xF0F8FFFF
#define COLOR_ANTIQUEWHITE 0xFAEBD7FF
#define COLOR_APPWORKSPACE 0xABABABFF
#define COLOR_AQUA 0x00FFFFFF
#define COLOR_AQUAMARINE 0x7FFFD4FF
#define COLOR_AZURE 0xF0FFFFFF
#define COLOR_BISQUE 0xFFE4C4FF
#define COLOR_BLANCHEDALMOND 0xFFEBCDFF
#define COLOR_BURLYWOOD 0xDEB887FF
#define COLOR_BUTTONFACE 0xF0F0F0FF
#define COLOR_BUTTONSHADOW 0xA0A0A0FF
#define COLOR_CADETBLUE 0x5F9EA0FF
#define COLOR_CHARTREUSE 0x7FFF00FF
#define COLOR_CONTROL 0xF0F0F0FF
#define COLOR_CONTROLDARK 0xA0A0A0FF
#define COLOR_CONTROLDARKDARK 0x696969FF
#define COLOR_CONTROLLIGHT 0xE3E3E3FF
#define COLOR_CONTROLLIGHTLIGHT 0xFFFFFFFF
#define COLOR_CONTROLTEXT 0x000000FF
#define COLOR_CORNFLOWERBLUE 0x6495EDFF
#define COLOR_CORNSILK 0xFFF8DCFF
#define COLOR_CRIMSON 0xDC143CFF
#define COLOR_CYAN 0x00FFFFFF
#define COLOR_DARKBLUE 0x00008BFF
#define COLOR_DARKGREEN 0x33AA33FF
#define COLOR_DARKCYAN 0x008B8BFF
#define COLOR_DARKGOLDENROD 0xB8860BFF
#define COLOR_DARKGRAY 0xA9A9A9FF
#define COLOR_DARKKHAKI 0xBDB76BFF
#define COLOR_DARKMAGENTA 0x8B008BFF
#define COLOR_DARKOLIVEGREEN 0x556B2FFF
#define COLOR_DARKORCHID 0x9932CCFF
#define COLOR_DARKRED 0x8B0000FF
#define COLOR_DARKSALMON 0xE9967AFF
#define COLOR_DARKSEAGREEN 0x8FBC8BFF
#define COLOR_DARKSLATEBLUE 0x483D8BFF
#define COLOR_DARKSLATEGRAY 0x2F4F4FFF
#define COLOR_DARKTURQUOISE 0x00CED1FF
#define COLOR_DARKVIOLET 0x9400D3FF
#define COLOR_DEEPPINK 0xFF1493FF
#define COLOR_DEEPSKYBLUE 0x00BFFFFF
#define COLOR_DESKTOP 0x000000FF
#define COLOR_DIMGRAY 0x696969FF
#define COLOR_DODGERBLUE 0x1E90FFFF
#define COLOR_FIREBRICK 0xB22222FF
#define COLOR_FLORALWHITE 0xFFFAF0FF
#define COLOR_FORESTGREEN 0x228B22FF
#define COLOR_FUCHSIA 0xFF00FFFF
#define COLOR_GAINSBORO 0xDCDCDCFF
#define COLOR_GHOSTWHITE 0xF8F8FFFF
#define COLOR_GOLDENROD 0xDAA520FF
#define COLOR_GRADIENTACTIVECAPTION 0xB9D1EAFF
#define COLOR_GRADIENTINACTIVECAPTION 0xD7E4F2FF
#define COLOR_GRAY 0x808080FF
#define COLOR_GRAYTEXT 0x808080FF
#define COLOR_GREENYELLOW 0xADFF2FFF
#define COLOR_HIGHLIGHT 0x3399FFFF
#define COLOR_HIGHLIGHTTEXT 0xFFFFFFFF
#define COLOR_HONEYDEW 0xF0FFF0FF
#define COLOR_HOTTRACK 0x0066CCFF
#define COLOR_INACTIVEBORDER 0xF4F7FCFF
#define COLOR_INACTIVECAPTION 0xBFCDDBFF
#define COLOR_INACTIVECAPTIONTEXT 0x434E54FF
#define COLOR_INDIANRED 0xCD5C5CFF
#define COLOR_INDIGO 0x4B0082FF
#define COLOR_INFO 0xFFFFE1FF
#define COLOR_INFOTEXT 0x000000FF
#define COLOR_IVORY 0xFFFFF0FF
#define COLOR_KHAKI 0xF0E68CFF
#define COLOR_LAVENDER 0xE6E6FAFF
#define COLOR_LAVENDERBLUSH 0xFFF0F5FF
#define COLOR_LAWNGREEN 0x7CFC00FF
#define COLOR_LEMONCHIFFON 0xFFFACDFF
#define COLOR_LIGHTCORAL 0xF08080FF
#define COLOR_LIGHTCYAN 0xE0FFFFFF
#define COLOR_LIGHTGOLDENRODYELLOW 0xFAFAD2FF
#define COLOR_LIGHTGRAY 0xD3D3D3FF
#define COLOR_LIGHTPINK 0xFFB6C1FF
#define COLOR_LIGHTSALMON 0xFFA07AFF
#define COLOR_LIGHTSEAGREEN 0x20B2AAFF
#define COLOR_LIGHTSKYBLUE 0x87CEFAFF
#define COLOR_LIGHTSLATEGRAY 0x778899FF
#define COLOR_LIGHTSTEELBLUE 0xB0C4DEFF
#define COLOR_LIGHTYELLOW 0xFFFFE0FF
#define COLOR_LIME 0x00FF00FF
#define COLOR_LIMEGREEN 0x32CD32FF
#define COLOR_LINEN 0xFAF0E6FF
#define COLOR_MAGENTA 0xFF00FFFF
#define COLOR_MAROON 0x800000FF
#define COLOR_MEDIUMAQUAMARINE 0x66CDAAFF
#define COLOR_MEDIUMBLUE 0x0000CDFF
#define COLOR_MEDIUMORCHID 0xBA55D3FF
#define COLOR_MEDIUMPURPLE 0x9370DBFF
#define COLOR_MEDIUMSEAGREEN 0x3CB371FF
#define COLOR_MEDIUMSLATEBLUE 0x7B68EEFF
#define COLOR_MEDIUMSPRINGGREEN 0x00FA9AFF
#define COLOR_MEDIUMTURQUOISE 0x48D1CCFF
#define COLOR_MEDIUMVIOLETRED 0xC71585FF
#define COLOR_MENU 0xF0F0F0FF
#define COLOR_MENUBAR 0xF0F0F0FF
#define COLOR_MENUHIGHLIGHT 0x3399FFFF
#define COLOR_MENUTEXT 0x000000FF
#define COLOR_MIDNIGHTBLUE 0x191970FF
#define COLOR_MINTCREAM 0xF5FFFAFF
#define COLOR_MISTYROSE 0xFFE4E1FF
#define COLOR_MOCCASIN 0xFFE4B5FF
#define COLOR_NAVAJOWHITE 0xFFDEADFF
#define COLOR_NAVY 0x000080FF
#define COLOR_OLDLACE 0xFDF5E6FF
#define COLOR_OLIVE 0x808000FF
#define COLOR_OLIVEDRAB 0x6B8E23FF
#define COLOR_ORANGERED 0xFF4500FF
#define COLOR_ORCHID 0xDA70D6FF
#define COLOR_PALEGOLDENROD 0xEEE8AAFF
#define COLOR_PALEGREEN 0x98FB98FF
#define COLOR_PALETURQUOISE 0xAFEEEEFF
#define COLOR_PALEVIOLETRED 0xDB7093FF
#define COLOR_PAPAYAWHIP 0xFFEFD5FF
#define COLOR_PEACHPUFF 0xFFDAB9FF
#define COLOR_PERU 0xCD853FFF
#define COLOR_PINK 0xFFC0CBFF
#define COLOR_PLUM 0xDDA0DDFF
#define COLOR_POWDERBLUE 0xB0E0E6FF
#define COLOR_ROSYBROWN 0xBC8F8FFF
#define COLOR_ROYALBLUE 0x4169E1FF
#define COLOR_SADDLEBROWN 0x8B4513FF
#define COLOR_SALMON 0xFA8072FF
#define COLOR_SANDYBROWN 0xF4A460FF
#define COLOR_SCROLLBAR 0xC8C8C8FF
#define COLOR_SEAGREEN 0x2E8B57FF
#define COLOR_SEASHELL 0xFFF5EEFF
#define COLOR_SIENNA 0xA0522DFF
#define COLOR_SILVER 0xC0C0C0FF
#define COLOR_SKYBLUE 0x87CEEBFF
#define COLOR_SLATEBLUE 0x6A5ACDFF
#define COLOR_SLATEGRAY 0x708090FF
#define COLOR_SNOW 0xFFFAFAFF
#define COLOR_SPRINGGREEN 0x00FF7FFF
#define COLOR_STEELBLUE 0x4682B4FF
#define COLOR_TAN 0xD2B48CFF
#define COLOR_TEAL 0x008080FF
#define COLOR_THISTLE 0xD8BFD8FF
#define COLOR_TOMATO 0xFF6347FF
#define COLOR_TRANSPARENT 0xFFFFFF00
#define COLOR_TURQUOISE 0x40E0D0FF
#define COLOR_VIOLET 0xEE82EEFF
#define COLOR_WHEAT 0xF5DEB3FF
#define COLOR_WHITESMOKE 0xF5F5F5FF
#define COLOR_WINDOW 0xFFFFFFFF
#define COLOR_WINDOWFRAME 0x646464FF
#define COLOR_WINDOWTEXT 0x000000FF
#define COLOR_YELLOWGREEN 0x9ACD32FF
#define STEALTH_ORANGE 0xFF880000
#define STEALTH_OLIVE 0x66660000
#define STEALTH_GREEN 0x33DD1100
#define STEALTH_PINK 0xFF22EE00
#define STEALTH_BLUE 0x0077BB00

#define COLOR_RADIO2					(0xAEA490FF)

#define COLOUR_WHITE						0xFFFFFFFF
#define EMBED_WHITE							"{FFFFFF}"
#define COLOUR_BLACK 						0x000000FF
#define EMBED_BLACK 						"{000000}"
#define COLOUR_TOMATO						0xFF6347FF
#define COLOR_BREEZEADMIN               (0x62869dFF)
#define EMBED_TOMATO						"{FF6347}"
#define COLOUR_GOLD							0xFFD700FF
#define EMBED_GOLD							"{FFD700}"
#define COLOUR_EASTSIDE		   	 			0xBEA1D3FF
#define EMBED_EASTSIDE						"{BEA1D3}"
#define COLOUR_LAVENDERPURPLE    	 		0x9374ABFF
#define EMBED_LAVENDERPURPLE    		    "{9374AB}"
#define COLOUR_PASTELGREEN					0x90EE90FF
#define EMBED_PASTELGREEN					"{90EE90}"
#define COLOUR_PEPPERMINT					0xD1EED1FF
#define EMBED_PEPPERMINT					"{D1EED1}"
#define COLOUR_ALTO							0xD6D6D6FF // aka: COLOUR_GRAY
#define EMBED_ALTO 							"{D6D6D6}" // aka: COLOUR_GRAY
#define COLOUR_TURBO            			0xF0F000FF
#define EMBED_TURBO	            			"{F0F000}"
#define COLOUR_TULIPTREE	        		0xE5C43EFF
#define EMBED_TULIPTREE	        			"{E5C43E}"
#define COLOUR_BRIGHTRED 					0xAA0000FF
#define EMBED_BRIGHTRED 					"{AA0000}"
#define COLOUR_MERCURY 						0xE5E5E5FF // aka: COLOUR_FADE_1
#define EMBED_MERCURY 						"{E5E5E5}" // aka: EMBED_FADE_1
#define COLOUR_SILVER 						0xCCCCCCFF // aka: COLOUR_FADE_2
#define EMBED_SILVER 						"{CCCCCC}" // aka: EMBED_FADE_2
#define COLOUR_NOBEL 						0xB3B3B3FF // aka: COLOUR_FADE_3
#define EMBED_NOBEL 						"{B3B3B3}" // aka: COLOUR_FADE_3
#define COLOUR_DUSTYGRAY 					0x999999FF // aka: COLOUR_FADE_4
#define COLOUR_CITRINEWHITE 				0xF9F4CDFF
#define COLOUR_DANDELION 					0xFED85DFF
#define EMBED_DANDELION 					"{FED85D}"
#define COLOUR_ORCHID 						0xDD66DDFF
#define EMBED_ORCHID	 					"{DD66DD}"
#define COLOUR_MALIBU 						0x8D8DFFFF
#define COLOUR_APPLE 						0x33AA33FF
#define COLOUR_BROOM 						0xFFFF15FF
#define EMBED_BROOM 						"{FFFF15}"
#define COLOUR_POLOBLUE 					0x8993CBFF
#define EMBED_POLOBLUE  					"{8993CB}"
#define COLOUR_COPBLUE 						0x3333FFFF
#define COLOUR_PRIMROSE 					0xF0F2A5FF
#define EMBED_ORANGE						"{fea75d}"
#define COLOUR_ORANGE						0xfea75dFF
#define COLOUR_TURQUOISE					0x9FA8C7FF
#define EMBED_TURQUOISE						"{9FA8C7}"
#define COLOUR_CURIOUSBLUE	                0x3697DAFF
#define EMBED_CURIOUSBLUE	                "{3697DA}"
#define COLOUR_SPINDLE		                0xB9D6EAFF
#define EMBED_SPINDLE		                "{B9D6EA}"
#define COLOUR_BLIZZARDBLUE                 0xA7D1EEFF
#define EMBED_BLIZZARDBLUE                  "{A7D1EE}"
#define COLOUR_SEAPINK                      0xEE9090FF
#define EMBED_SEAPINK                       "{EE9090}"
#define COLOUR_SOFTPEACH                    0xEEE3E3FF
#define EMBED_SOFTPEACH                     "{EEE3E3}"
#define COLOUR_CHALKY                       0xEEC490FF
#define EMBED_CHALKY                        "{EEC490}"
#define COLOUR_WHITEROCK                    0xEEE6DBFF
#define EMBED_WHITEROCK                     "{EEE6DB}"
#define COLOUR_SUNGLOW                      0xFCC728FF
#define EMBED_SUNGLOW                       "{FCC728}"
#define COLOUR_VISTABLUE                    0x81CBADFF
#define EMBED_VISTABLUE                     "{81CBAD}"
#define COLOUR_SILVERTREE                   0x4FB089FF
#define EMBED_SILVERTREE                    "{4FB089}"
#define COLOUR_LAPALMA                      0x3A841BFF
#define EMBED_LAPALMA                       "{3A841B}"
#define COLOUR_AMARANTH                     0xEC4652FF
#define EMBED_AMARANTH                      "{EC4652}"
#define COLOUR_ATLANTIS                     0x97CD2DFF
#define COLOUR_RHABDOMYOLISIS               0x32A832FF
#define COLOUR_YELLOW	                    0xFFFF00FF

#define DIALOG_JOB_CHECKPOINT "job_checkpoint"
new pCurrentCheckpoint[MAX_PLAYERS];
new jobCreateStage[MAX_PLAYERS];
new currentJobID[MAX_PLAYERS];
new Float:JobRoute[MAX_PLAYERS][10][3];
new PlayerJobCheckpointIndex[MAX_PLAYERS];


// Color data
enum ColourData
{
    coID,
    coName[32],
    coHexValue,
    coEmbedValue[9],
    coTextureModelID,
    coTxdName[32],
    coTextureName[32],
    coVehicleColorID,
    coARGB
}

new Colours[][ColourData] =
{
    {0, "Yok", 0x000000FF, "{000000}", -1, "none", "none", 0, 0},
    {1, "Wild Sand", 0xF5F5F5FF, "{F5F5F5}", -1, "none", "none", 1, 0xFFF5F5F5},
    {2, "Jelly Bean", 0x2A77A1FF, "{2A77A1}", -1, "none", "none", 2, 0xFF2A77A1},
    {3, "Red Devil", 0x840410FF, "{840410}", -1, "none", "none", 3, 0xFF840410},
    {4, "Outer Space", 0x263739FF, "{263739}", -1, "none", "none", 4, 0xFF263739},
    {5, "Cannon Pink", 0x86446EFF, "{86446E}", -1, "none", "none", 5, 0xFF86446E},
    {6, "Golden Bell", 0xD78E10FF, "{D78E10}", -1, "none", "none", 6, 0xFFD78E10},
    {7, "Steel Blue", 0x4C75B7FF, "{4C75B7}", -1, "none", "none", 7, 0xFF4C75B7},
    {8, "French Gray", 0xBDBEC6FF, "{BDBEC6}", -1, "none", "none", 8, 0xFFBDBEC6},
    {9, "Nevada", 0x5E7072FF, "{5E7072}", -1, "none", "none", 9, 0xFF5E7072},
    {10, "Blue Bayoux", 0x46597AFF, "{46597A}", -1, "none", "none", 10, 0xFF46597A},
    {11, "Shuttle Gray", 0x656A79FF, "{656A79}", -1, "none", "none", 11, 0xFF656A79},
    {12, "Lynch", 0x5D7E8DFF, "{5D7E8D}", -1, "none", "none", 12, 0xFF5D7E8D},
    {13, "Abbey", 0x58595AFF, "{58595A}", -1, "none", "none", 13, 0xFF58595A},
    {14, "Tasman", 0xD6DAD6FF, "{D6DAD6}", -1, "none", "none", 14, 0xFFD6DAD6},
    {15, "Gray Chateau", 0x9CA1A3FF, "{9CA1A3}", -1, "none", "none", 15, 0xFF9CA1A3},
    {16, "Killarney", 0x335F3FFF, "{335F3F}", -1, "none", "none", 16, 0xFF335F3F},
    {17, "Dark Tan", 0x730E1AFF, "{730E1A}", -1, "none", "none", 17, 0xFF730E1A},
    {18, "Monarch", 0x7B0A2AFF, "{7B0A2A}", -1, "none", "none", 18, 0xFF7B0A2A},
    {19, "Dawn", 0x9F9D94FF, "{9F9D94}", -1, "none", "none", 19, 0xFF9F9D94},
    {20, "East Bay", 0x3B4E78FF, "{3B4E78}", -1, "none", "none", 20, 0xFF3B4E78},
    {21, "Tawny Port", 0x732E3EFF, "{732E3E}", -1, "none", "none", 21, 0xFF732E3E},
    {22, "Wine Berry", 0x691E3BFF, "{691E3B}", -1, "none", "none", 22, 0xFF691E3B},
    {23, "Natural Gray", 0x96918CFF, "{96918C}", -1, "none", "none", 23, 0xFF96918C},
    {24, "Abbey 2", 0x515459FF, "{515459}", -1, "none", "none", 24, 0xFF515459},
    {25, "Ship Gray", 0x3F3E45FF, "{3F3E45}", -1, "none", "none", 25, 0xFF3F3E45},
    {26, "Edward", 0xA5A9A7FF, "{A5A9A7}", -1, "none", "none", 26, 0xFFA5A9A7},
    {27, "Dorado", 0x635C5AFF, "{635C5A}", -1, "none", "none", 27, 0xFF635C5A},
    {28, "Fiord", 0x3D4A68FF, "{3D4A68}", -1, "none", "none", 28, 0xFF3D4A68},
    {29, "Dawn 2", 0x979592FF, "{979592}", -1, "none", "none", 29, 0xFF979592},
    {30, "Crater Brown", 0x421F21FF, "{421F21}", -1, "none", "none", 30, 0xFF421F21},
    {31, "Buccaneer", 0x5F272BFF, "{5F272B}", -1, "none", "none", 31, 0xFF5F272B},
    {32, "Bali Hai", 0x8494ABFF, "{8494AB}", -1, "none", "none", 32, 0xFF8494AB},
    {33, "Sirocco", 0x767B7CFF, "{767B7C}", -1, "none", "none", 33, 0xFF767B7C},
    {34, "Dove Gray", 0x646464FF, "{646464}", -1, "none", "none", 34, 0xFF646464},
    {35, "Chicago", 0x5A5752FF, "{5A5752}", -1, "none", "none", 35, 0xFF5A5752},
    {36, "Shark", 0x252527FF, "{252527}", -1, "none", "none", 36, 0xFF252527},
    {37, "Outer Space 2", 0x2D3A35FF, "{2D3A35}", -1, "none", "none", 37, 0xFF2D3A35},
    {38, "Mantle", 0x93A396FF, "{93A396}", -1, "none", "none", 38, 0xFF93A396},
    {39, "Pale Sky", 0x6D7A88FF, "{6D7A88}", -1, "none", "none", 39, 0xFF6D7A88},
    {40, "Cocoa Brown", 0x221918FF, "{221918}", -1, "none", "none", 40, 0xFF221918},
    {41, "Flint", 0x6F675FFF, "{6F675F}", -1, "none", "none", 41, 0xFF6F675F},
    {42, "Merlot", 0x7C1C2AFF, "{7C1C2A}", -1, "none", "none", 42, 0xFF7C1C2A},
    {43, "Cab Sav", 0x5F0A15FF, "{5F0A15}", -1, "none", "none", 43, 0xFF5F0A15},
    {44, "Celtic", 0x193826FF, "{193826}", -1, "none", "none", 44, 0xFF193826},
    {45, "Espresso", 0x5D1B20FF, "{5D1B20}", -1, "none", "none", 45, 0xFF5D1B20},
    {46, "Gurkha", 0x9D9872FF, "{9D9872}", -1, "none", "none", 46, 0xFF9D9872},
    {47, "Pablo", 0x7A7560FF, "{7A7560}", -1, "none", "none", 47, 0xFF7A7560},
    {48, "Lemon Grass", 0x989586FF, "{989586}", -1, "none", "none", 48, 0xFF989586},
    {49, "Edward 2", 0xADB0B0FF, "{ADB0B0}", -1, "none", "none", 49, 0xFFADB0B0},
    {50, "Gunsmoke", 0x848988FF, "{848988}", -1, "none", "none", 50, 0xFF848988},
    {51, "Stromboli", 0x304F45FF, "{304F45}", -1, "none", "none", 51, 0xFF304F45},
    {52, "Cutty Sark", 0x4D6268FF, "{4D6268}", -1, "none", "none", 52, 0xFF4D6268},
    {53, "Bunting", 0x162248FF, "{162248}", -1, "none", "none", 53, 0xFF162248},
    {54, "Pickled Bluewood", 0x272F4BFF, "{272F4B}", -1, "none", "none", 54, 0xFF272F4B},
    {55, "Roman Coffee", 0x7D6256FF, "{7D6256}", -1, "none", "none", 55, 0xFF7D6256},
    {56, "Gray Chateau 2", 0x9EA4ABFF, "{9EA4AB}", -1, "none", "none", 56, 0xFF9EA4AB},
    {57, "Pale Oyster", 0x9C8D71FF, "{9C8D71}", -1, "none", "none", 57, 0xFF9C8D71},
    {58, "Persian Plum", 0x6D1822FF, "{6D1822}", -1, "none", "none", 58, 0xFF6D1822},
    {59, "Blue Bayoux 2", 0x4E6881FF, "{4E6881}", -1, "none", "none", 59, 0xFF4E6881},
    {60, "Star Dust", 0x9C9C98FF, "{9C9C98}", -1, "none", "none", 60, 0xFF9C9C98},
    {61, "Cape Palliser", 0x917347FF, "{917347}", -1, "none", "none", 61, 0xFF917347},
    {62, "Persian Plum 2", 0x661C26FF, "{661C26}", -1, "none", "none", 62, 0xFF661C26},
    {63, "Oslo Gray", 0x949D9FFF, "{949D9F}", -1, "none", "none", 63, 0xFF949D9F},
    {64, "Edward 3", 0xA4A7A5FF, "{A4A7A5}", -1, "none", "none", 64, 0xFFA4A7A5},
    {65, "Sycamore", 0x8E8C46FF, "{8E8C46}", -1, "none", "none", 65, 0xFF8E8C46},
    {66, "Jon", 0x341A1EFF, "{341A1E}", -1, "none", "none", 66, 0xFF341A1E},
    {67, "Slate Gray", 0x6A7A8CFF, "{6A7A8C}", -1, "none", "none", 67, 0xFF6A7A8C},
    {68, "Locust", 0xAAAD8EFF, "{AAAD8E}", -1, "none", "none", 68, 0xFFAAAD8E},
    {69, "Del Rio", 0xAB988FFF, "{AB988F}", -1, "none", "none", 69, 0xFFAB988F},
    {70, "Old Brick", 0x851F2EFF, "{851F2E}", -1, "none", "none", 70, 0xFF851F2E},
    {71, "Lynch 2", 0x6F8297FF, "{6F8297}", -1, "none", "none", 71, 0xFF6F8297},
    {72, "Fuscous Gray", 0x585853FF, "{585853}", -1, "none", "none", 72, 0xFF585853},
    {73, "Sage", 0x9AA790FF, "{9AA790}", -1, "none", "none", 73, 0xFF9AA790},
    {74, "Persian Plum 3", 0x601A23FF, "{601A23}", -1, "none", "none", 74, 0xFF601A23},
    {75, "Charade", 0x20202CFF, "{20202C}", -1, "none", "none", 75, 0xFF20202C},
    {76, "Dawn 3", 0xA4A096FF, "{A4A096}", -1, "none", "none", 76, 0xFFA4A096},
    {77, "Hillary", 0xAA9D84FF, "{AA9D84}", -1, "none", "none", 77, 0xFFAA9D84},
    {78, "Crown of Thorns", 0x78222BFF, "{78222B}", -1, "none", "none", 78, 0xFF78222B},
    {79, "Madison", 0x0E316DFF, "{0E316D}", -1, "none", "none", 79, 0xFF0E316D},
    {80, "Pablo 2", 0x722A3FFF, "{722A3F}", -1, "none", "none", 80, 0xFF722A3F},
    {81, "Pablo 3", 0x7B715EFF, "{7B715E}", -1, "none", "none", 81, 0xFF7B715E},
    {82, "Crown of Thorns 2", 0x741D28FF, "{741D28}", -1, "none", "none", 82, 0xFF741D28},
    {83, "Ebony Clay", 0x1E2E32FF, "{1E2E32}", -1, "none", "none", 83, 0xFF1E2E32},
    {84, "Rock", 0x4D322FFF, "{4D322F}", -1, "none", "none", 84, 0xFF4D322F},
    {85, "Claret", 0x7C1B44FF, "{7C1B44}", -1, "none", "none", 85, 0xFF7C1B44},
    {86, "Parsley", 0x2E5B20FF, "{2E5B20}", -1, "none", "none", 86, 0xFF2E5B20},
    {87, "Chambray", 0x395A83FF, "{395A83}", -1, "none", "none", 87, 0xFF395A83},
    {88, "Tawny Port 2", 0x6D2837FF, "{6D2837}", -1, "none", "none", 88, 0xFF6D2837},
    {89, "Gray Olive", 0xA7A28FFF, "{A7A28F}", -1, "none", "none", 89, 0xFFA7A28F},
    {90, "Edward 4", 0xAFB1B1FF, "{AFB1B1}", -1, "none", "none", 90, 0xFFAFB1B1},
    {91, "Oxford Blue", 0x364155FF, "{364155}", -1, "none", "none", 91, 0xFF364155},
    {92, "Salt Box", 0x6D6C6EFF, "{6D6C6E}", -1, "none", "none", 92, 0xFF6D6C6E},
    {93, "Surfie Green", 0x0F6A89FF, "{0F6A89}", -1, "none", "none", 93, 0xFF0F6A89},
    {94, "Cello", 0x204B6BFF, "{204B6B}", -1, "none", "none", 94, 0xFF204B6B},
    {95, "Rhino", 0x2B3E57FF, "{2B3E57}", -1, "none", "none", 95, 0xFF2B3E57},
    {96, "Pewter", 0x9B9F9DFF, "{9B9F9D}", -1, "none", "none", 96, 0xFF9B9F9D},
    {97, "Slate Gray 2", 0x6C8495FF, "{6C8495}", -1, "none", "none", 97, 0xFF6C8495},
    {98, "Wedgewood", 0x4D8495FF, "{4D8495}", -1, "none", "none", 98, 0xFF4D8495},
    {99, "Sandrift", 0xAE9B7FFF, "{AE9B7F}", -1, "none", "none", 99, 0xFFAE9B7F},
    {100, "Ming", 0x406C8FFF, "{406C8F}", -1, "none", "none", 100, 0xFF406C8F},
    {101, "Mirage", 0x1F253BFF, "{1F253B}", -1, "none", "none", 101, 0xFF1F253B},
    {102, "Sandrift 2", 0xAB9276FF, "{AB9276}", -1, "none", "none", 102, 0xFFAB9276},
    {103, "Chathams Blue", 0x134573FF, "{134573}", -1, "none", "none", 103, 0xFF134573},
    {104, "Arrowtown", 0x96816CFF, "{96816C}", -1, "none", "none", 104, 0xFF96816C},
    {105, "Nevada 2", 0x64686AFF, "{64686A}", -1, "none", "none", 105, 0xFF64686A},
    {106, "Chathams Blue 2", 0x105082FF, "{105082}", -1, "none", "none", 106, 0xFF105082},
    {107, "Tallow", 0xA19983FF, "{A19983}", -1, "none", "none", 107, 0xFFA19983},
    {108, "Chambray 2", 0x385694FF, "{385694}", -1, "none", "none", 108, 0xFF385694},
    {109, "Trout", 0x525661FF, "{525661}", -1, "none", "none", 109, 0xFF525661},
    {110, "Shadow", 0x7F6956FF, "{7F6956}", -1, "none", "none", 110, 0xFF7F6956},
    {111, "Oslo Gray 2", 0x8C929AFF, "{8C929A}", -1, "none", "none", 111, 0xFF8C929A},
    {112, "Blue Bayoux 3", 0x596E87FF, "{596E87}", -1, "none", "none", 112, 0xFF596E87},
    {113, "Woody Brown", 0x473532FF, "{473532}", -1, "none", "none", 113, 0xFF473532},
    {114, "Mineral Green", 0x44624FFF, "{44624F}", -1, "none", "none", 114, 0xFF44624F},
    {115, "Monarch", 0x730A27FF, "{730A27}", -1, "none", "none", 115, 0xFF730A27},
    {116, "Cloud Burst", 0x223457FF, "{223457}", -1, "none", "none", 116, 0xFF223457},
    {117, "Dark Tan", 0x640D1BFF, "{640D1B}", -1, "none", "none", 117, 0xFF640D1B},
    {118, "Cadet Blue", 0xA3ADC6FF, "{A3ADC6}", -1, "none", "none", 118, 0xFFA3ADC6},
    {119, "Dorado 2", 0x695853FF, "{695853}", -1, "none", "none", 119, 0xFF695853},
    {120, "Pale Oyster 2", 0x9B8B80FF, "{9B8B80}", -1, "none", "none", 120, 0xFF9B8B80},
    {121, "Maroon Oak", 0x620B1CFF, "{620B1C}", -1, "none", "none", 121, 0xFF620B1C},
    {122, "Abbey 3", 0x5B5D5EFF, "{5B5D5E}", -1, "none", "none", 122, 0xFF5B5D5E},
    {123, "Irish Coffee", 0x624428FF, "{624428}", -1, "none", "none", 123, 0xFF624428},
    {124, "Merlot 2", 0x731827FF, "{731827}", -1, "none", "none", 124, 0xFF731827},
    {125, "Biscay", 0x1B376DFF, "{1B376D}", -1, "none", "none", 125, 0xFF1B376D},
    {126, "Deep Blush", 0xEC6AAEFF, "{EC6AAE}", -1, "none", "none", 126, 0xFFEC6AAE},
    {127, "Black", 0x000000FF, "{000000}", -1, "none", "none", 127, 0xFF000000},
    {128, "Bilbao", 0x177517FF, "{177517}", -1, "none", "none", 128, 0xFF177517},
    {129, "Graphite", 0x210606FF, "{210606}", -1, "none", "none", 129, 0xFF210606},
    {130, "Chathams Blue", 0x125478FF, "{125478}", -1, "none", "none", 130, 0xFF125478},
    {131, "Clinker", 0x452A0DFF, "{452A0D}", -1, "none", "none", 131, 0xFF452A0D},
    {132, "Cocoa Bean", 0x571E1EFF, "{571E1E}", -1, "none", "none", 132, 0xFF571E1E},
    {133, "Black Forest", 0x010701FF, "{010701}", -1, "none", "none", 133, 0xFF010701},
    {134, "Port Gore", 0x25225AFF, "{25225A}", -1, "none", "none", 134, 0xFF25225A},
    {135, "Jelly Bean 2", 0x2C89AAFF, "{2C89AA}", -1, "none", "none", 135, 0xFF2C89AA},
    {136, "Fuchsia Blue", 0x8A4DBDFF, "{8A4DBD}", -1, "none", "none", 136, 0xFF8A4DBD},
    {137, "Apple", 0x35963AFF, "{35963A}", -1, "none", "none", 137, 0xFF35963A},
    {138, "Nobel", 0xB7B7B7FF, "{B7B7B7}", -1, "none", "none", 138, 0xFFB7B7B7},
    {139, "East Bay 2", 0x464C8DFF, "{464C8D}", -1, "none", "none", 139, 0xFF464C8D},
    {140, "Oslo Gray 3", 0x84888CFF, "{84888C}", -1, "none", "none", 140, 0xFF84888C},
    {141, "Makara", 0x817867FF, "{817867}", -1, "none", "none", 141, 0xFF817867},
    {142, "Crete", 0x817A26FF, "{817A26}", -1, "none", "none", 142, 0xFF817A26},
    {143, "Salt Box 2", 0x6A506FFF, "{6A506F}", -1, "none", "none", 143, 0xFF6A506F},
    {144, "Mulled Wine", 0x583E6FFF, "{583E6F}", -1, "none", "none", 144, 0xFF583E6F},
    {145, "Olivine", 0x8CB972FF, "{8CB972}", -1, "none", "none", 145, 0xFF8CB972},
    {146, "Strikemaster", 0x824F78FF, "{824F78}", -1, "none", "none", 146, 0xFF824F78},
    {147, "Plum", 0x6D276AFF, "{6D276A}", -1, "none", "none", 147, 0xFF6D276A},
    {148, "Rangoon Green", 0x1E1D13FF, "{1E1D13}", -1, "none", "none", 148, 0xFF1E1D13},
    {149, "Graphite 2", 0x1E1306FF, "{1E1306}", -1, "none", "none", 149, 0xFF1E1306},
    {150, "Log Cabin", 0x1F2518FF, "{1F2518}", -1, "none", "none", 150, 0xFF1F2518},
    {151, "Tom Thumb", 0x2C4531FF, "{2C4531}", -1, "none", "none", 151, 0xFF2C4531},
    {152, "Matisse", 0x1E4C99FF, "{1E4C99}", -1, "none", "none", 152, 0xFF1E4C99},
    {153, "Stromboli 2", 0x2E5F43FF, "{2E5F43}", -1, "none", "none", 153, 0xFF2E5F43},
    {154, "Eucalyptus", 0x1E9948FF, "{1E9948}", -1, "none", "none", 154, 0xFF1E9948},
    {155, "Eastern Blue", 0x1E9999FF, "{1E9999}", -1, "none", "none", 155, 0xFF1E9999},
    {156, "Gurkha", 0x999976FF, "{999976}", -1, "none", "none", 156, 0xFF999976},
    {157, "Waterloo", 0x7C8499FF, "{7C8499}", -1, "none", "none", 157, 0xFF7C8499},
    {158, "Prairie Sand", 0x992E1EFF, "{992E1E}", -1, "none", "none", 158, 0xFF992E1E},
    {159, "Graphite 3", 0x2C1E08FF, "{2C1E08}", -1, "none", "none", 159, 0xFF2C1E08},
    {160, "Deep Forest Green", 0x142407FF, "{142407}", -1, "none", "none", 160, 0xFF142407},
    {161, "Vin Rouge", 0x993E4DFF, "{993E4D}", -1, "none", "none", 161, 0xFF993E4D},
    {162, "Matisse 2", 0x1E4C99FF, "{1E4C99}", -1, "none", "none", 162, 0xFF1E4C99},
    {163, "Elm", 0x198181FF, "{198181}", -1, "none", "none", 163, 0xFF198181},
    {164, "Mirage 2", 0x1A292AFF, "{1A292A}", -1, "none", "none", 164, 0xFF1A292A},
    {165, "Blumine", 0x16616FFF, "{16616F}", -1, "none", "none", 165, 0xFF16616F},
    {166, "Blumine 2", 0x1B6687FF, "{1B6687}", -1, "none", "none", 166, 0xFF1B6687},
    {167, "Royal Purple", 0x6C3F99FF, "{6C3F99}", -1, "none", "none", 167, 0xFF6C3F99},
    {168, "Van Cleef", 0x481A0EFF, "{481A0E}", -1, "none", "none", 168, 0xFF481A0E},
    {169, "Kimberly", 0x7A7399FF, "{7A7399}", -1, "none", "none", 169, 0xFF7A7399},
    {170, "Kimberly 2", 0x746D99FF, "{746D99}", -1, "none", "none", 170, 0xFF746D99},
    {171, "Gigas", 0x53387EFF, "{53387E}", -1, "none", "none", 171, 0xFF53387E},
    {172, "Turtle Green", 0x222407FF, "{222407}", -1, "none", "none", 172, 0xFF222407},
    {173, "Clinker 2", 0x3E190CFF, "{3E190C}", -1, "none", "none", 173, 0xFF3E190C},
    {174, "Van Cleef 2", 0x46210EFF, "{46210E}", -1, "none", "none", 174, 0xFF46210E},
    {175, "Old Brick 2", 0x991E1EFF, "{991E1E}", -1, "none", "none", 175, 0xFF991E1E},
    {176, "Strikemaster 2", 0x8D4C8DFF, "{8D4C8D}", -1, "none", "none", 176, 0xFF8D4C8D},
    {177, "Strikemaster 3", 0x805B80FF, "{805B80}", -1, "none", "none", 177, 0xFF805B80},
    {178, "Affair", 0x7B3E7EFF, "{7B3E7E}", -1, "none", "none", 178, 0xFF7B3E7E},
    {179, "Wine Berry 2", 0x3C1737FF, "{3C1737}", -1, "none", "none", 179, 0xFF3C1737},
    {180, "Peanut", 0x733517FF, "{733517}", -1, "none", "none", 180, 0xFF733517},
    {181, "Falu Red", 0x781818FF, "{781818}", -1, "none", "none", 181, 0xFF781818},
    {182, "Mocha", 0x83341AFF, "{83341A}", -1, "none", "none", 182, 0xFF83341A},
    {183, "Prairie Sand 2", 0x8E2F1CFF, "{8E2F1C}", -1, "none", "none", 183, 0xFF8E2F1C},
    {184, "Cosmic", 0x7E3E53FF, "{7E3E53}", -1, "none", "none", 184, 0xFF7E3E53},
    {185, "Fedora", 0x7C6D7CFF, "{7C6D7C}", -1, "none", "none", 185, 0xFF7C6D7C},
    {186, "Black Forest 2", 0x020C02FF, "{020C02}", -1, "none", "none", 186, 0xFF020C02},
    {187, "Deep Forest Green 2", 0x072407FF, "{072407}", -1, "none", "none", 187, 0xFF072407},
    {188, "Seaweed", 0x163012FF, "{163012}", -1, "none", "none", 188, 0xFF163012},
    {189, "Celtic 2", 0x16301BFF, "{16301B}", -1, "none", "none", 189, 0xFF16301B},
    {190, "Finn", 0x642B4FFF, "{642B4F}", -1, "none", "none", 190, 0xFF642B4F},
    {191, "Goblin", 0x368452FF, "{368452}", -1, "none", "none", 191, 0xFF368452},
    {192, "Zorba", 0x999590FF, "{999590}", -1, "none", "none", 192, 0xFF999590},
    {193, "Regent Gray", 0x818D96FF, "{818D96}", -1, "none", "none", 193, 0xFF818D96},
    {194, "Citron", 0x99991EFF, "{99991E}", -1, "none", "none", 194, 0xFF99991E},
    {195, "Asparagus", 0x7F994CFF, "{7F994C}", -1, "none", "none", 195, 0xFF7F994C},
    {196, "Oslo Gray 4", 0x839292FF, "{839292}", -1, "none", "none", 196, 0xFF839292},
    {197, "Pacifika", 0x788222FF, "{788222}", -1, "none", "none", 197, 0xFF788222},
    {198, "Sapphire", 0x2B3C99FF, "{2B3C99}", -1, "none", "none", 198, 0xFF2B3C99},
    {199, "Waiouru", 0x3A3A0BFF, "{3A3A0B}", -1, "none", "none", 199, 0xFF3A3A0B},
    {200, "Shadow 2", 0x8A794EFF, "{8A794E}", -1, "none", "none", 200, 0xFF8A794E},
    {201, "Blue Zodiac", 0x0E1F49FF, "{0E1F49}", -1, "none", "none", 201, 0xFF0E1F49},
    {202, "Celtic 3", 0x15371CFF, "{15371C}", -1, "none", "none", 202, 0xFF15371C},
    {203, "Big Stone", 0x15273AFF, "{15273A}", -1, "none", "none", 203, 0xFF15273A},
    {204, "San Juan", 0x375775FF, "{375775}", -1, "none", "none", 204, 0xFF375775},
    {205, "Black Pearl", 0x060820FF, "{060820}", -1, "none", "none", 205, 0xFF060820},
    {206, "Black Pearl 2", 0x071326FF, "{071326}", -1, "none", "none", 206, 0xFF071326},
    {207, "Blue Dianne", 0x20394BFF, "{20394B}", -1, "none", "none", 207, 0xFF20394B},
    {208, "St. Tropaz", 0x2C5089FF, "{2C5089}", -1, "none", "none", 208, 0xFF2C5089},
    {209, "Chathams Blue", 0x15426CFF, "{15426C}", -1, "none", "none", 209, 0xFF15426C},
    {210, "Blue Zodiac 2", 0x103250FF, "{103250}", -1, "none", "none", 210, 0xFF103250},
    {211, "Lucky Point", 0x241663FF, "{241663}", -1, "none", "none", 211, 0xFF241663},
    {212, "Cherrywood", 0x692015FF, "{692015}", -1, "none", "none", 212, 0xFF692015},
    {213, "Manatee", 0x8C8D94FF, "{8C8D94}", -1, "none", "none", 213, 0xFF8C8D94},
    {214, "Saratoga", 0x516013FF, "{516013}", -1, "none", "none", 214, 0xFF516013},
    {215, "Pine Tree", 0x090F02FF, "{090F02}", -1, "none", "none", 215, 0xFF090F02},
    {216, "Potters Clay", 0x8C573AFF, "{8C573A}", -1, "none", "none", 216, 0xFF8C573A},
    {217, "Smalt Blue", 0x52888EFF, "{52888E}", -1, "none", "none", 217, 0xFF52888E},
    {218, "Au Chico", 0x995C52FF, "{995C52}", -1, "none", "none", 218, 0xFF995C52},
    {219, "Rope", 0x99581EFF, "{99581E}", -1, "none", "none", 219, 0xFF99581E},
    {220, "Vin Rouge 2", 0x993A63FF, "{993A63}", -1, "none", "none", 220, 0xFF993A63},
    {221, "Barley Corn", 0x998F4EFF, "{998F4E}", -1, "none", "none", 221, 0xFF998F4E},
    {222, "Prairie Sand 3", 0x99311EFF, "{99311E}", -1, "none", "none", 222, 0xFF99311E},
    {223, "Blue Zodiac 3", 0x0D1842FF, "{0D1842}", -1, "none", "none", 223, 0xFF0D1842},
    {224, "Cocoa Bean 2", 0x521E1EFF, "{521E1E}", -1, "none", "none", 224, 0xFF521E1E},
    {225, "Waiouru 2", 0x42420DFF, "{42420D}", -1, "none", "none", 225, 0xFF42420D},
    {226, "Vida Loca", 0x4C991EFF, "{4C991E}", -1, "none", "none", 226, 0xFF4C991E},
    {227, "Bottle Green", 0x082A1DFF, "{082A1D}", -1, "none", "none", 227, 0xFF082A1D},
    {228, "Hacienda", 0x96821DFF, "{96821D}", -1, "none", "none", 228, 0xFF96821D},
    {229, "Forest Green", 0x197F19FF, "{197F19}", -1, "none", "none", 229, 0xFF197F19},
    {230, "Cedar", 0x3B141FFF, "{3B141F}", -1, "none", "none", 230, 0xFF3B141F},
    {231, "Sepia", 0x745217FF, "{745217}", -1, "none", "none", 231, 0xFF745217},
    {232, "Vivid Violet", 0x893F8DFF, "{893F8D}", -1, "none", "none", 232, 0xFF893F8D},
    {233, "Disco", 0x7E1A6CFF, "{7E1A6C}", -1, "none", "none", 233, 0xFF7E1A6C},
    {234, "Deep Forest Green 3", 0x0B370BFF, "{0B370B}", -1, "none", "none", 234, 0xFF0B370B},
    {235, "Green House", 0x27450DFF, "{27450D}", -1, "none", "none", 235, 0xFF27450D},
    {236, "Bottle Green 2", 0x071F24FF, "{071F24}", -1, "none", "none", 236, 0xFF071F24},
    {237, "Cannon Pink", 0x784573FF, "{784573}", -1, "none", "none", 237, 0xFF784573},
    {238, "Potters Clay 2", 0x8A653AFF, "{8A653A}", -1, "none", "none", 238, 0xFF8A653A},
    {239, "Mocha 2", 0x732617FF, "{732617}", -1, "none", "none", 239, 0xFF732617},
    {240, "Lochinvar", 0x319490FF, "{319490}", -1, "none", "none", 240, 0xFF319490},
    {241, "Vida Loca 2", 0x56941DFF, "{56941D}", -1, "none", "none", 241, 0xFF56941D},
    {242, "Wine Berry 3", 0x59163DFF, "{59163D}", -1, "none", "none", 242, 0xFF59163D},
    {243, "Forest Green 2", 0x1B8A2FFF, "{1B8A2F}", -1, "none", "none", 243, 0xFF1B8A2F},
    {244, "Clinker 3", 0x38160BFF, "{38160B}", -1, "none", "none", 244, 0xFF38160B},
    {245, "Black Forest 3", 0x041804FF, "{041804}", -1, "none", "none", 245, 0xFF041804},
    {246, "Chambray 3", 0x355D8EFF, "{355D8E}", -1, "none", "none", 246, 0xFF355D8E},
    {247, "Rhino 2", 0x2E3F5BFF, "{2E3F5B}", -1, "none", "none", 247, 0xFF2E3F5B},
    {248, "Wine Berry 4", 0x561A28FF, "{561A28}", -1, "none", "none", 248, 0xFF561A28},
    {249, "Maroon Oak 2", 0x4E0E27FF, "{4E0E27}", -1, "none", "none", 249, 0xFF4E0E27},
    {250, "Flint 2", 0x706C67FF, "{706C67}", -1, "none", "none", 250, 0xFF706C67},
    {251, "Tuna", 0x3B3E42FF, "{3B3E42}", -1, "none", "none", 251, 0xFF3B3E42},
    {252, "Baltic Sea", 0x2E2D33FF, "{2E2D33}", -1, "none", "none", 252, 0xFF2E2D33},
    {253, "Gunsmoke 2", 0x7B7E7DFF, "{7B7E7D}", -1, "none", "none", 253, 0xFF7B7E7D},
    {254, "Masala", 0x4A4442FF, "{4A4442}", -1, "none", "none", 254, 0xFF4A4442},
    {255, "Pickled Bluewood 2", 0x28344EFF, "{28344E}", -1, "none", "none", 255, 0xFF28344E},
    {256, "Snow", 0x00000000, "{000000}", 3942, "bistro", "mp_snow"},
    {257, "Flagstone", 0x00000000, "{000000}", 3942, "bistro", "ahoodfence2", 0, 0x00000000},
    {258, "Grass", 0x00000000, "{000000}", 3908, "libertyfar", "Grass_128HV", 0, 0x00000000},
    {259, "Grass 2", 0x00000000, "{000000}", 3903, "libertyhi", "Grass", 0, 0x00000000},
    {260, "Clear water", 0x00000000, "{000000}", 3953, "rczero_track", "waterclear256", 0, 0x00000000},
    {261, "Grey rocks", 0x00000000, "{000000}", 3933, "weemap", "rocktb128", 0, 0x00000000},
    {262, "Dirty sand", 0x00000000, "{000000}", 4242, "seabed", "des_dirt1", 0, 0x00000000},
    {263, "Dirty sand 2", 0x00000000, "{000000}", 4242, "seabed", "sw_sand", 0, 0x00000000},
    {264, "Dunes on the desert (Sahara)", 0x00000000, "{000000}", 16008, "des_n", "des_ripplsand", 0, 0x00000000},
    {265, "Flagstone 2 (LS lighthouse)", 0x00000000, "{000000}", 13734, "hillcliff_lahills", "cobbles_kb_256", 0, 0x00000000},
    {266, "Red rocks (from desert)", 0x00000000, "{000000}", 16503, "desert", "des_redrock1", 0, 0x00000000},
    {267, "Wood floor 2 (brighter)", 0x00000000, "{000000}", 16407, "des_airfieldhus", "btdeck256", 0, 0x00000000},
    {268, "Yellow stripes (on the floor)", 0x00000000, "{000000}", 16102, "des_cen", "sm_conc_hatch", 0, 0x00000000},
    {269, "Roof with dark grey colour", 0x00000000, "{000000}", 16021, "des_geyser", "shingles1", 0, 0x00000000},
    {270, "Wall with rocks (looks nice)", 0x00000000, "{000000}", 16016, "des_n", "ranchwall1", 0, 0x00000000},
    {271, "Cracked ground", 0x00000000, "{000000}", 16571, "des_se1", "des_crackeddirt1", 0, 0x00000000},
    {272, "Grey rocks", 0x00000000, "{000000}", 18752, "Volcano", "rocktb128", 0, 0x00000000},
    {273, "Lava", 0x00000000, "{000000}", 18752, "Volcano", "lavalake", 0, 0x00000000},
    {274, "Ground under the lava", 0x00000000, "{000000}", 18752, "Volcano", "redgravel", 0, 0x00000000},
    {275, "Red rocks (from desert)", 0x00000000, "{000000}", 16503, "desert", "des_redrock1", 0, 0x00000000},
    {276, "Wood floor 2 (brighter)", 0x00000000, "{000000}", 16407, "des_airfieldhus", "btdeck256", 0, 0x00000000},
    {277, "Yellow stripes (on the floor)", 0x00000000, "{000000}", 16102, "des_cen", "sm_conc_hatch", 0, 0x00000000},
    {278, "Roof with dark grey colour", 0x00000000, "{000000}", 16021, "des_geyser", "shingles1", 0, 0x00000000},
    {279, "Wall with rocks (looks nice)", 0x00000000, "{000000}", 16016, "des_n", "ranchwall1", 0, 0x00000000},
    {280, "Cracked ground", 0x00000000, "{000000}", 16571, "des_se1", "des_crackeddirt1", 0, 0x00000000},
    {281, "Dance Floor", 0x00000000, "{000000}", 19128, "dancefloors", "dancefloor1", 0, 0x00000000},
    {282, "Camo Net", 0x00000000, "{000000}", 2068, "cj_ammo_net", "CJ_cammonet", 0, 0x00000000},
    {283, "White", 0x00000000, "{000000}", 18646, "matcolours", "white", 0, 0x00000000},
    {284, "Red", 0x00000000, "{000000}", 18646, "matcolours", "red", 0, 0x00000000},
    {285, "Blue", 0x00000000, "{000000}", 18646, "matcolours", "blue", 0, 0x00000000},
    {286, "Orange", 0x00000000, "{000000}", 18646, "matcolours", "orange", 0, 0x00000000},
    {287, "Green", 0x00000000, "{000000}", 18646, "matcolours", "green", 0, 0x00000000},
    {288, "Metal Plate", 0x00000000, "{000000}", 964, "cj_crate_will", "CJ_FLIGHT_CASE", 0, 0x00000000},
    {289, "Stop Sign", 0x00000000, "{000000}", 967, "cj_barr_set_1", "Stop2_64", 0, 0x00000000},
    {290, "Black and Yellow stripes", 0x00000000, "{000000}", 7981, "vgsairport02", "chevronYB_64", 0, 0x00000000},
    {291, "Red and White stripes", 0x00000000, "{000000}", 7981, "vgsairport02", "redwhite_stripe", 0, 0x00000000},
    {292, "Black and Yellow mesh", 0x00000000, "{000000}", 7980, "vegasairprtland", "gridchev_64HV", 0, 0x00000000},
    {293, "Yellow and White stripes", 0x00000000, "{000000}", 7980, "vegasairprtland", "chevron64HVa", 0, 0x00000000},
    {294, "Red Rectangles", 0x00000000, "{000000}", 6866, "vgncnstrct1", "Circus_gls_05", 0, 0x00000000},
    {295, "Red and White stripes", 0x00000000, "{000000}", 1281, "benches", "trafficcone", 0, 0x00000000},
    {296, "Large Mesh Glass", 0x00000000, "{000000}", 6295, "lawland2", "lightglass", 0, 0x00000000},
    {297, "Wood Planks", 0x00000000, "{000000}", 6295, "lawland2", "boardwalk2_la", 0, 0x00000000},
    {298, "Police Line", 0x00000000, "{000000}", 12938, "sw_apartments", "sw_policeline", 0, 0x00000000},
    {299, "Wigwam Motel - Wall", 0x00000000, "{000000}", 16004, "des_teepee", "des_wigwam", 0, 0x00000000},
    {300, "Wigwam Motel - Door", 0x00000000, "{000000}", 16004, "des_teepee", "des_wigwamdoor", 0, 0x00000000},
    {301, "Concrete with Dust", 0x00000000, "{000000}", 16004, "des_teepee", "des_dustconc", 0, 0x00000000},
    {302, "Grey Roof", 0x00000000, "{000000}", 16005, "des_stownmain2", "sanruf", 0, 0x00000000},
    {303, "Red Wooden Planks", 0x00000000, "{000000}", 16005, "des_stownmain2", "des_redslats", 0, 0x00000000},
    {304, "Light Purple Color", 0x00000000, "{000000}", 16005, "des_stownmain2", "duskyred_64", 0, 0x00000000},
    {305, "Old Wooden Planks", 0x00000000, "{000000}", 16005, "des_stownmain2", "des_ghotwood1", 0, 0x00000000},
    {306, "Wall 1 (Green)", 0x00000000, "{000000}", 16005, "des_stownmain2", "ws_green_wall1", 0, 0x00000000},
    {307, "Door 1 (Blue)", 0x00000000, "{000000}", 16005, "des_stownmain2", "alleydoor3", 0, 0x00000000},
    {308, "Wall 2 (Normal)", 0x00000000, "{000000}", 16005, "des_stownmain2", "newall4", 0, 0x00000000},
    {309, "Wall 3 (Normal)", 0x00000000, "{000000}", 16005, "des_stownmain2", "crencouwall1", 0, 0x00000000},
    {310, "Black Color", 0x00000000, "{000000}", 16005, "des_stownmain2", "black32", 0, 0x00000000},
    {311, "Cynder Blocks", 0x00000000, "{000000}", 5016, "ground3_las", "ws_bigstones", 0, 0x00000000},
    {312, "Jesus Saves", 0x00000000, "{000000}", 5016, "ground3_las", "mural01_LA", 0, 0x00000000},
    {313, "White Wall w/ windows", 0x00000000, "{000000}", 5033, "union_las", "lasunion98", 0, 0x00000000},
    {314, "Yello+Grey Diagonal Stripes", 0x00000000, "{000000}", 5033, "union_las", "ws_carparkwall2", 0, 0x00000000}
};

enum e_InteriorData {
    e_InteriorName[32],
    e_InteriorID,
    Float:e_InteriorX,
    Float:e_InteriorY,
    Float:e_InteriorZ
};
	new const g_arrInteriorData[][e_InteriorData] = {
    {"24/7 1", 17, -25.884498, -185.868988, 1003.546875},
    {"24/7 2", 10, 6.091179, -29.271898, 1003.549438},
    {"24/7 3", 18, -30.946699, -89.609596, 1003.546875},
    {"24/7 4", 16, -25.132598, -139.066986, 1003.546875},
    {"24/7 5", 4, -27.312299, -29.277599, 1003.557250},
    {"24/7 6", 6, -26.691598, -55.714897, 1003.546875},
    {"Airport Ticket", 14, -1827.147338, 7.207417, 1061.143554},
    {"Airport Baggage", 14, -1861.936889, 54.908092, 1061.143554},
    {"Shamal", 1, 1.808619, 32.384357, 1199.593750},
    {"Andromada", 9, 315.745086, 984.969299, 1958.919067},
    {"Ammunation 1", 1, 286.148986, -40.644397, 1001.515625},
    {"Ammunation 2", 4, 286.800994, -82.547599, 1001.515625},
    {"Ammunation 3", 6, 296.919982, -108.071998, 1001.515625},
    {"Ammunation 4", 7, 314.820983, -141.431991, 999.601562},
    {"Ammunation 5", 6, 316.524993, -167.706985, 999.593750},
    {"Ammunation Booths", 7, 302.292877, -143.139099, 1004.062500},
    {"Ammunation Range", 7, 298.507934, -141.647048, 1004.054748},
    {"Blastin Fools Hallway", 3, 1038.531372, 0.111030, 1001.284484},
    {"Budget Inn Motel Room", 12, 444.646911, 508.239044, 1001.419494},
    {"Jefferson Motel", 15, 2215.454833, -1147.475585, 1025.796875},
    {"Off Track Betting Shop", 3, 833.269775, 10.588416, 1004.179687},
    {"Sex Shop", 3, -103.559165, -24.225606, 1000.718750},
    {"Meat Factory", 1, 963.418762, 2108.292480, 1011.030273},
    {"Zero's RC shop", 6, -2240.468505, 137.060440, 1035.414062},
    {"Dillimore Gas", 0, 663.836242, -575.605407, 16.343263},
    {"Catigula's Basement", 1, 2169.461181, 1618.798339, 999.976562},
    {"FC Janitor Room", 10, 1889.953369, 1017.438293, 31.882812},
    {"Woozie's Office", 1, -2159.122802, 641.517517, 1052.381713},
    {"Binco", 15, 207.737991, -109.019996, 1005.132812},
    {"Didier Sachs", 14, 204.332992, -166.694992, 1000.523437},
    {"Prolaps", 3, 207.054992, -138.804992, 1003.507812},
    {"Suburban", 1, 203.777999, -48.492397, 1001.804687},
    {"Rain", 5, 226.293991, -7.431529, 1002.210937},
    {"Zip", 18, 161.391006, -93.159156, 1001.804687},
    {"Club", 17, 493.390991, -22.722799, 1000.679687},
    {"Bar", 11, 501.980987, -69.150199, 998.757812},
    {"Lil' Probe Inn", 18, -227.027999, 1401.229980, 27.765625},
    {"Jay's Diner", 4, 457.304748, -88.428497, 999.554687},
    {"Gant Bridge Diner", 5, 454.973937, -110.104995, 1000.077209},
    {"Secret Valley Diner", 6, 435.271331, -80.958938, 999.554687},
    {"World of Coq", 1, 452.489990, -18.179698, 1001.132812},
    {"Welcome Pump", 1, 681.557861, -455.680053, -25.609874},
    {"Burger Shot", 10, 375.962463, -65.816848, 1001.507812},
    {"Cluckin' Bell", 9, 369.579528, -4.487294, 1001.858886},
    {"Well Stacked Pizza", 5, 373.825653, -117.270904, 1001.499511},
    {"Rusty Browns Donuts", 17, 381.169189, -188.803024, 1000.632812},
    {"Denise's Room", 1, 244.411987, 305.032989, 999.148437},
    {"Katie's Room", 2, 271.884979, 306.631988, 999.148437},
    {"Helena's Room", 3, 291.282989, 310.031982, 999.148437},
    {"Michelle's Room", 4, 302.180999, 300.722991, 999.148437},
    {"Barbara's Room", 5, 322.197998, 302.497985, 999.148437},
    {"Millie's Room", 6, 346.870025, 309.259033, 999.155700},
    {"Sherman Dam", 17, -959.564392, 1848.576782, 9.000000},
    {"Planning Dept", 3, 384.808624, 173.804992, 1008.382812},
    {"Area 51", 0, 223.431976, 1872.400268, 13.734375},
    {"LS Gym", 5, 772.111999, -3.898649, 1000.728820},
    {"SF Gym", 6, 774.213989, -48.924297, 1000.585937},
    {"LV Gym", 7, 773.579956, -77.096694, 1000.655029},
    {"B-Dup's House", 3, 1527.229980, -11.574499, 1002.097106},
    {"B-Dup's Crack Pad", 2, 1523.509887, -47.821197, 1002.130981},
    {"CJ's House", 3, 2496.049804, -1695.238159, 1014.742187},
    {"Madd Doggs Mansion", 5, 1267.663208, -781.323242, 1091.906250},
    {"OG Loc's House", 3, 513.882507, -11.269994, 1001.565307},
    {"Ryders House", 2, 2454.717041, -1700.871582, 1013.515197},
    {"Sweet's House", 1, 2527.654052, -1679.388305, 1015.498596},
    {"Crack Factory", 2, 2543.462646, -1308.379882, 1026.728393},
    {"Big Spread Ranch", 3, 1212.019897, -28.663099, 1000.953125},
    {"Fanny batters", 6, 761.412963, 1440.191650, 1102.703125},
    {"Strip Club", 2, 1204.809936, -11.586799, 1000.921875},
    {"Strip Club (Private Room)", 2, 1204.809936, 13.897239, 1000.921875},
    {"Unnamed Brothel", 3, 942.171997, -16.542755, 1000.929687},
    {"Tiger Skin Brothel", 3, 964.106994, -53.205497, 1001.124572},
    {"Pleasure Domes", 3, -2640.762939, 1406.682006, 906.460937},
    {"Liberty City Outside", 1, -729.276000, 503.086944, 1371.971801},
    {"Liberty City Inside", 1, -794.806396, 497.738037, 1376.195312},
    {"Gang House", 5, 2350.339843, -1181.649902, 1027.976562},
    {"Colonel Furhberger's", 8, 2807.619873, -1171.899902, 1025.570312},
    {"Crack Den", 5, 318.564971, 1118.209960, 1083.882812},
    {"Warehouse 1", 1, 1412.639892, -1.787510, 1000.924377},
    {"Warehouse 2", 18, 1302.519897, -1.787510, 1001.028259},
    {"Sweet's Garage", 0, 2522.000000, -1673.383911, 14.866223},
    {"Lil' Probe Inn Toilet", 18, -221.059051, 1408.984008, 27.773437},
    {"Unused Safe House", 12, 2324.419921, -1145.568359, 1050.710083},
    {"RC Battlefield", 10, -975.975708, 1060.983032, 1345.671875},
    {"Barber 1", 2, 411.625976, -21.433298, 1001.804687},
    {"Barber 2", 3, 418.652984, -82.639793, 1001.804687},
    {"Barber 3", 12, 412.021972, -52.649898, 1001.898437},
    {"Tatoo Parlor 1", 16, -204.439987, -26.453998, 1002.273437},
    {"Tatoo Parlor 2", 17, -204.439987, -8.469599, 1002.273437},
    {"Tatoo Parlor 3", 3, -204.439987, -43.652496, 1002.273437},
    {"LS Police HQ", 6, 246.783996, 63.900199, 1003.640625},
    {"SF Police HQ", 10, 246.375991, 109.245994, 1003.218750},
    {"LV Police HQ", 3, 288.745971, 169.350997, 1007.171875},
    {"3 School", 3, -2029.798339, -106.675910, 1035.171875},
    {"8-Track", 7, -1398.065307, -217.028900, 1051.115844},
    {"Bloodbowl", 15, -1398.103515, 937.631164, 1036.479125},
    {"Dirt Track", 4, -1444.645507, -664.526000, 1053.572998},
    {"Kickstart", 14, -1465.268676, 1557.868286, 1052.531250},
    {"Vice Stadium", 1, -1401.829956, 107.051300, 1032.273437},
    {"SF Garage", 0, -1790.378295, 1436.949829, 7.187500},
    {"LS Garage", 0, 1643.839843, -1514.819580, 13.566620},
    {"SF Bomb Shop", 0, -1685.636474, 1035.476196, 45.210937},
    {"Blueberry Warehouse", 0, 76.632553, -301.156829, 1.578125},
    {"LV Warehouse 1", 0, 1059.895996, 2081.685791, 10.820312},
    {"LV Warehouse 2 (hidden part)", 0, 1059.180175, 2148.938720, 10.820312},
    {"Caligula's Hidden Room", 1, 2131.507812, 1600.818481, 1008.359375},
    {"Bank", 0, 2315.952880, -1.618174, 26.742187},
    {"Bank (Behind Desk)", 0, 2319.714843, -14.838361, 26.749565},
    {"LS Atrium", 18, 1710.433715, -1669.379272, 20.225049}
};


/*
 *
 *      End Of Include
 *
 */

#define DMV_VEHICLE             (1)
#define DMV_HELICOPTER          (2)
#define WITHSIGNAL_CAR          (3)
#define DMV_TAXI                (4)
#define RENT_CAR                (5)
#define PIZZA_CAR               (6)
#define TAXI_CAR                (7)
#define TRUCK_CAR               (8)
#define MECHANIC_CAR            (9)
#define LAMBERJACK_CAR          (10)
#define TRASHMASTER_CAR         (11)
#define MINER_CAR               (12)
#define TASIMACILIK_CAR         (13)

#define MAX_CAR_WEAPONS                 (6)

#define MAX_HEALTH_VEHICLE      (750.0)

#define IMPOUND_FEE             (1500)

#define JACKING_TIME             (600)

#define BLOCK_NONE 0
#define LESS_DAMAGE_FIST 1
#define BLOCK_FIST 2
#define LESS_DAMAGE_MELEE 3
#define BLOCK_PHYSICAL 4
#define MEVDUAT_FAIZ_ORAN (1)

#define MAX_CHOPSHOP 			(15)
#define CHOPSHOP_PRICE 			(25000)
#define MAX_CADIR 				(50)
#define ATTACH_HANDS        	(9)
#define MAX_JOBS                (15)
#define MAX_RADIOS 		        (500)
#define MAX_INV_SLOTS 	        (15)
#define MAX_LABELS 				(100)
#define MAX_ENTRANCE 			(200)
#define MAX_INTERIORS 			(300)
#define MAX_ATMS 				(80)
#define MAX_BORSA               (10)
#define MAX_HOUSES 				(500)
#define MAX_REKLAM              (200)
#define MAX_REPORTS             (20)
#define MAX_GARAGES 			(150)
#define MAX_APART 				(200)
#define MAX_BIZ 				(500)

#define MAX_CADIR               (50)

#define MAX_ADMIN_TELES 		(10)

#define PAME_MAX_LEN (80)

#define MAX_HOUSE_INVENTORY 	(10)

#define MAX_TRUNK_INVENTORY 	(10)
#define MAX_CAR_INVENTORY 		(5)

#define MAX_FOOD_STAND 			(50)
#define MAX_ITEM_DROPS 			(100)
#define MAX_FOOD_DROPS 			(100)
#define MAX_TRUCK_CARGO 		(80)
#define MAX_TRUCK_PACK 			(25)
#define MAX_CARGO_OBJ 			(100)
#define MAX_TRUCK_PRODUCT 		(25)
#define MAX_APBS 				(100)
#define MAX_FACTIONS 			(100)
#define MAX_CCTV    			(50)
#define MAX_TOWERS  			(50)
#define MAX_GATES 				(100)
#define MAX_PLANTS 				(75)
#define MAX_BORTES   			(25)
#define MAX_PAYPHONES   		(50)
#define MAX_FIRES               (100)
#define CROSSFIRE_TIMER			(1)
#define MAX_SPIKE               (20)
#define MAX_PLAYER_CONTACTS     (40)
#define MAX_PLAYER_NOTES        (10)
#define MAX_PLAYER_ATTACH       (5)
#define MAX_PLAYER_MUSIC        (10)
#define MAX_PLAYER_MARKS		(3)
#define MAX_LOCKER 				(50)
#define MAX_RENTAL 				(50)

#define MAX_SPEEDCAMS			(100)
#define MAX_MARKS				(650)

#define MAX_SPRAYS (75)

#define DIALOG_SPRAY_MAIN 55516
#define	DIALOG_SPRAY_IMAGE 55515
#define	DIALOG_SPRAY_INPUT 55514
#define	DIALOG_SPRAY_FONT 55513
#define	DIALOG_SPRAY_CREATE 55512

#define MAX_WEAP                (4)

#define MIN_EMOTE_SECONDS		(0)
#define MAX_EMOTE_SECONDS		(300)
#define Range_VShort            (3.5)
#define Range_Short             (10.0)
#define Range_Normal            (20.0)
#define Range_Long              (30.0)
#define Range_VLong             (100.0)

#define LEVEL_EXP               (4)

#define MONEY_LOG   	        (1)
#define PROPERTY_LOG            (2)
#define ADMIN_LOG               (3)
// [/ban] - 1
// [/offban] - 1
// [/banip] - 1
// [/unban] - 12
// [/unbanip] - 12
// [/kick] - 2
// [/skick] - 2
// [/warn] - 4
// [/ajail] - 5
// [/offjail] - 51
// [/asetplate] - 6
// [/givegunex] - 7
// [/getgun] - 7
// [/givemoney] - 8
#define RAM_LOG                 (4)
#define VEHICLE_LOG             (5)
#define WEAPON_LOG              (6)
#define ITEM_LOG                (7)
#define DONATE_LOG              (8)

Dialog:None(playerid, response, listitem, inputtext[])
{
	return 1;
}

#define SIGNADSPRICE 3000
#define MOBILEMODELPRICE 1000

#define INVALID_WEAPON_SLOT_ID -1
#define MAX_ZONE_NAME 28
#define MAXLEN 80

#define UpdateIntVar(%0,%1,%2) SetPVarInt(%0, %1, (GetPVarInt(%0, %1) + %2))
#define UpdateFloatVar(%0,%1,%2) SetPVarFloat(%0, %1, (GetPVarFloat(%0, %1) + %2))

#define MODEL_SELECTION_COLOR       (8)
#define MODEL_BUING_COLOR      		(9)
#define MODEL_SELECTION_BB     		(10)

#define MAX_HASH_LENGTH				(65)
#define ADMIN_HASH					"cACOC9CMz"

#define CHARACTER_UNACTIVE                     (0)
#define CHARACTER_ACTIVE                     (1)

#define PVAR_LISTCHARS_CDETAILS_CID     "p_ls_dc_characterid"
#define PVAR_LASTENTEREDVEH_ID          "p_lastEnteredVehicle_ID"
#define PVAR_LASTENTEREDVEH_SEAT          "p_lastEnteredVehicle_SEAT"
#define PVAR_LASTPM_ISACTIVE            "p_LastPM_IsActive"
#define PVAR_LASTPM_ID                  "p_LastPM_ID"
#define PVAR_DARKSCREEN_ISACTIVE        "p_DarkScreen_IsActive"

// Server data
enum E_Server {
    sHostName[120],
    sWebUrl[32],
    sLanguage[64],
    sMap[32],
    sVersion[32],
    sMaintenance,
    sPassword[64],
    sWeather,
    sPricePayday,
    sPricePark,
    sPriceFuel,
    Float:sLocaleSalePercent,
    Float:sDealershipPercent,
    sSpawnInterior,
    sSpawnWorld,
    Float:sSpawnX,
    Float:sSpawnY,
    Float:sSpawnZ,
    Float:sSpawnA,
    lMinSalary,
    lMaxSalary,
    sPriceTaxiLicense,
    sPriceTaxiAd,
    sPriceDriverLicense,
    sPriceColour,
    sPriceInsurance,
    Float:sPriceVehRegisterPercent,
    Float:sPriceVehWeeklyTaxPercent,
    sDoublePayday
}

new ServerInfo[E_Server];

#define NT_DISTANCE 25.0
#define ITEM_PER_PAGE                         (25)
new Text3D:cNametag[MAX_PLAYERS];
new YuruyusTimer[MAX_PLAYERS];
new gorevdenonceskin;

new ErkekKiyafetleri[177] =
{
    1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 46, 47, 48, 49, 50,
	57, 58, 59, 60, 61, 62, 66, 67, 68, 72, 73, 78, 79, 82, 83, 84, 86, 94, 95, 96,
	98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135,
	136, 137, 142, 143, 144, 146, 147, 153, 154, 155, 156, 158, 159, 160, 161, 162,
 	168, 170, 161, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 200, 202, 206, 208, 210, 212, 213, 217, 220, 221, 222, 223, 227, 228,
	229, 230, 234, 235, 236, 239, 240, 241, 242, 247, 248, 249, 250, 254, 255, 258, 259,
	260, 261, 262, 268, 269, 270, 271, 272, 273, 289, 290, 291, 292, 293, 294, 295,
	296, 297, 299
};
new KadinKiyafetleri[64] =
{
    55, 56, 63, 64, 65, 69, 75, 76, 77, 85,
	87, 88, 89, 90, 91, 93, 129, 130, 131, 141, 148, 150, 151, 152, 157, 169, 172, 178,
	190, 191, 192, 193, 194, 195, 198, 201, 207, 211, 214, 215, 216, 219, 224, 225, 226,
 	233, 237, 238, 243, 244, 245, 256, 263, 9, 10, 11, 12, 13, 31, 39, 40, 41, 53, 54
};

new LSPD_Kiyafetleri[] =
{
    300,301,
	302,303,304,305,306,307,309,310,311,285,284,
};

new DOC_Kiyafetleri[] =
{
    300,301,
	302,303,304,305,306,307,309,310,311,285,284,
};

new LSFMD_Kiyafetleri[] =
{
    260, 217, 211, 191, 193, 187, 186, 228, 227, 295, 299, 124
};

new HABER_Kiyafetleri[] =
{
    260, 217, 211, 191, 193, 187, 186, 228, 227, 295, 299, 124
};

new GOV_Kiyafetleri[] =
{
    260, 217, 211, 191, 193, 187, 186, 228, 227, 295, 299, 124
};

// anti cbug
new bool:pCBugging[MAX_PLAYERS];
new ptmCBugFreezeOver[MAX_PLAYERS];
new ptsLastFiredWeapon[MAX_PLAYERS];

new cameraSession[MAX_PLAYERS];

#define YURUYUS_NORMAL     				(1)
#define YURUYUS_PED       				(2)
#define YURUYUS_GANGSTER   				(3)
#define YURUYUS_GANGSTER2  				(4)
#define YURUYUS_YASLI       			(5)
#define YURUYUS_SISKO_YASLI   			(6)
#define YURUYUS_SISKO      				(7)
#define YURUYUS_KADIN     				(8)
#define YURUYUS_KADIN2    				(9)
#define YURUYUS_FAHISE    				(10)
#define YURUYUS_FAHISE2   				(11)
#define YURUYUS_SARHOS     				(12)
#define YURUYUS_KOR     				(13)
#define YURUYUS_ARMED     				(14)

enum OR_TELEPORTS_DATA
{
	tele_id,
	tele_name[32],
	Float:tele_x,
	Float:tele_y,
	Float:tele_z,
	tele_int,
}
new OrTeleports[110][OR_TELEPORTS_DATA] =
{
	{0, "24/7 1", -25.884498, -185.868988, 1003.546875, 17},
	{1, "24/7 2", 6.091179, -29.271898, 1003.549438, 10},
	{2, "24/7 3", -30.946699, -89.609596, 1003.546875, 18},
	{3, "24/7 4", -25.132598, -139.066986, 1003.546875, 16},
	{4, "24/7 5", -27.312299, -29.277599, 1003.557250, 4},
	{5, "24/7 6", -26.691598, -55.714897, 1003.546875, 6},
	{6, "Airport Ticket Desk", -1827.147338, 7.207417, 1061.143554, 14},
	{7, "Airport Baggage Reclaim", -1861.936889, 54.908092, 1061.143554, 14},
	{8, "Shamal", 1.808619, 32.384357, 1199.593750, 1},
	{9, "Andromada", 315.745086, 984.969299, 1958.919067, 9},
	{10, "Ammunation 1", 286.148986, -40.644397, 1001.515625, 1},
	{11, "Ammunation 2", 286.800994, -82.547599, 1001.515625, 4},
	{12, "Ammunation 3", 296.919982, -108.071998, 1001.515625, 6},
	{13, "Ammunation 4", 314.820983, -141.431991, 999.601562, 7},
	{14, "Ammunation 5", 316.524993, -167.706985, 999.593750, 6},
	{15, "Ammunation Booths", 302.292877, -143.139099, 1004.062500, 7},
	{16, "Ammunation Range", 298.507934, -141.647048, 1004.054748, 7},
	{17, "Blastin Fools Hallway", 1038.531372, 0.111030, 1001.284484, 3},
	{18, "Budget Inn Motel Room", 444.646911, 508.239044, 1001.419494, 12},
	{19, "Jefferson Motel", 2215.454833, -1147.475585, 1025.796875, 15},
	{20, "Off Track Betting Shop", 833.269775, 10.588416, 1004.179687, 3},
	{21, "Sex Shop", -103.559165, -24.225606, 1000.718750, 3},
	{22, "Meat Factory", 963.418762, 2108.292480, 1011.030273, 1},
	{23, "Zero's RC Shop", -2240.468505, 137.060440, 1035.414062, 6},
	{24, "Dillimore Gas Station", 663.836242, -575.605407, 16.343263, 0},
	{25, "Caligula's Basement", 2169.461181, 1618.798339, 999.976562, 1},
	{26, "FDC Janitors Room", 1889.953369, 1017.438293, 31.882812, 10},
	{27, "Woozie's Office", -2159.122802, 641.517517, 1052.381713, 1},
	{28, "Binco", 207.737991, -109.019996, 1005.132812, 15},
	{29, "Didier Sachs", 204.332992, -166.694992, 1000.523437, 14},
	{30, "Prolaps", 207.054992, -138.804992, 1003.507812, 3},
	{31, "Suburban", 203.777999, -48.492397, 1001.804687, 1},
	{32, "Victim", 226.293991, -7.431529, 1002.210937, 5},
	{33, "ZIP", 161.391006, -93.159156, 1001.804687, 18},
	{34, "Alhambra", 493.390991, -22.722799, 1000.679687, 17},
	{35, "Ten Green Bottles", 501.980987, -69.150199, 998.757812, 11},
	{36, "Lil' Probe Inn", -227.027999, 1401.229980, 27.765625, 18},
	{37, "Jay's Dinner", 457.304748, -88.428497, 999.554687, 4},
	{38, "Gant Bridge Dinner", 454.973937, -110.104995, 1000.077209, 5},
	{39, "Secret Valley Dinner", 435.271331, -80.958938, 999.554687, 4},
	{40, "World of Coq", 452.489990, -18.179698, 1001.132812, 1},
	{41, "Welcome Pump", 681.557861, -455.680053, -25.609874, 1},
	{42, "Burger Shot", 375.962463, -65.816848, 1001.507812, 10},
	{43, "Cluckin' Bell", 369.579528, -4.487294, 1001.858886, 9},
	{44, "Well Stacked Pizza", 373.825653, -117.270904, 1001.499511, 5},
	{45, "Jimmy's Sticky Ring", 381.169189, -188.803024, 1000.632812, 17},
	{46, "Denise Room", 244.411987, 305.032989, 999.148437, 1},
	{47, "Katie Room", 271.884979, 306.631988, 999.148437, 2},
	{48, "Helena Room", 291.282989, 310.031982, 999.148437, 3},
	{49, "Michelle Room", 302.180999, 300.722991, 999.148437, 4},
	{50, "Barbara Room", 322.197998, 302.497985, 999.148437, 5},
	{51, "Millie Room", 346.870025, 309.259033, 999.155700, 6},
	{52, "Sherman Dam", -959.564392, 1848.576782, 9.000000, 17},
	{53, "Planning Dept.", 384.808624, 173.804992, 1008.382812, 3},
	{54, "Area 51", 223.431976, 1872.400268, 13.734375, 0},
	{55, "LS Gym", 772.111999, -3.898649, 1000.728820, 5},
	{56, "SF Gym", 774.213989, -48.924297, 1000.585937, 6},
	{57, "LV Gym", 773.579956, -77.096694, 1000.655029, 7},
	{58, "B Dup's House", 1527.229980, -11.574499, 1002.097106, 3},
	{59, "B Dup's Crack Pad", 1523.509887, -47.821197, 1002.130981, 2},
	{60, "CJ's House", 2496.049804, -1695.238159, 1014.742187, 3},
	{61, "Madd Dogg's Mansion", 1267.663208, -781.323242, 1091.906250, 5},
	{62, "OG Loc's House", 513.882507, -11.269994, 1001.565307, 3},
	{63, "Ryder's House", 2454.717041, -1700.871582, 1013.515197, 2},
	{64, "Sweet's House", 2527.654052, -1679.388305, 1015.498596, 1},
	{65, "Crack Factory", 2543.462646, -1308.379882, 1026.728393, 2},
	{66, "Big Spread Ranch", 1212.019897, -28.663099, 1000.953125, 3},
	{67, "Fanny Batters", 761.412963, 1440.191650, 1102.703125, 6},
	{68, "Strip Club", 1204.809936, -11.586799, 1000.921875, 2},
	{69, "Strip Club Private Room", 1204.809936, 13.897239, 1000.921875, 2},
	{70, "Unnamed Brothel", 942.171997, -16.542755, 1000.929687, 3},
	{71, "Tiger Skin Brothel", 964.106994, -53.205497, 1001.124572, 3},
	{72, "Pleasure Domes", -2640.762939, 1406.682006, 906.460937, 3},
	{73, "Liberty City Outside", -729.276000, 503.086944, 1371.971801, 1},
	{74, "Liberty City Inside", -794.806396, 497.738037, 1376.195312, 1},
	{75, "Gang House", 2350.339843, -1181.649902, 1027.976562, 5},
	{76, "Colonel Furhberger's House", 2807.619873, -1171.899902, 1025.570312, 8},
	{77, "Crack Den", 318.564971, 1118.209960, 1083.882812, 5},
	{78, "Warehouse 1", 1412.639892, -1.787510, 1000.924377, 1},
	{79, "Warehouse 2", 1302.519897, -1.787510, 1001.028259, 18},
	{80, "Sweet's Garage", 2522.000000, -1673.383911, 14.866223, 0},
	{81, "Lil' Probe Inn Toilet", -221.059051, 1408.984008, 27.773437, 18},
	{82, "Unused Safe House", 2324.419921, -1145.568359, 1050.710083, 12},
	{83, "RC Battlefield", -975.975708, 1060.983032, 1345.671875, 10},
	{84, "Barber 1", 411.625976, -21.433298, 1001.804687, 2},
	{85, "Barber 2", 418.652984, -82.639793, 1001.804687, 3},
	{86, "Barber 3", 412.021972, -52.649898, 1001.898437, 12},
	{87, "Tatoo Parlour 1", -204.439987, -26.453998, 1002.273437, 16},
	{88, "Tatoo Parlour 2", -204.439987, -8.469599, 1002.273437, 17},
	{89, "Tatoo Parlour 3", -204.439987, -43.652496, 1002.273437, 3},
	{90, "LS Police HQ", 246.783996, 63.900199, 1003.640625, 6},
	{91, "SF Police HQ", 246.375991, 109.245994, 1003.218750, 10},
	{92, "LV Police HQ", 288.745971, 169.350997, 1007.171875, 3},
	{93, "Car School", -2029.798339, -106.675910, 1035.171875, 3},
	{94, "8-Track", -1398.065307, -217.028900, 1051.115844, 7},
	{95, "Bloodbowl", -1398.103515, 937.631164, 1036.479125, 15},
	{96, "Dirt Track", -1444.645507, -664.526000, 1053.572998,  4},
	{97, "Kickstart", -1465.268676, 1557.868286, 1052.531250, 14},
	{98, "Vice Stadium", -1401.829956, 107.051300, 1032.273437, 1},
	{99, "SF Garage", -1790.378295, 1436.949829, 7.187500, 0},
	{100, "LS Garage", 1643.839843, -1514.819580, 13.566620, 0},
	{101, "SF Bomb Shop", -1685.636474, 1035.476196, 45.210937, 0},
	{102, "Blueberry Warehouse", 76.632553, -301.156829, 1.578125, 0},
	{103, "LV Warehouse 1", 1059.895996, 2081.685791, 10.820312, 0},
	{104, "LV Warehouse 2", 1059.180175, 2148.938720, 10.820312, 0},
	{105, "Caligula's Hidden Room", 2131.507812, 1600.818481, 1008.359375, 1},
	{106, "Bank", 2315.952880, -1.618174, 26.742187, 0},
	{107, "Bank - Behind Desk", 2319.714843, -14.838361, 26.749565, 0},
	{108, "LS Atrium", 1710.433715, -1669.379272, 20.225049, 18},
	{109, "Bike School", 1494.325195, 1304.942871, 1093.289062, 3}
};

forward OnTeleportInsert(playerid, teleid);


enum PLAYER_DATA_ENUM
{
	pUsername[MAX_PLAYER_NAME+1],
	pUsername_[MAX_PLAYER_NAME+1],
    pMaskname[32],
	pID,
	pAccID,
	pAccname[MAX_PLAYER_NAME+1],
	pCash,
	pBank,
	pSkin,
	pSex,
	pOrigin,
	pAge,
	pRace,
	pBirthdate[24],
	pLevel,
	pExp,
	pHours,
	pMinutes,
	pAdmin,
	pMapper,
	pEbc,
	pSkinYetki,
	pRdscripter,
	pAdminHide,
	pHelper,
	pHelperLead,
	pFMAdmin,
	pInt,
	pWorld,

	pDrugLabAccess,

	pAJailed,
	pAJailTime,

	pJailed,
	pIsolateTime,
	pJailTime,
	pWarns,

	pDonate,
	pNameChanges,
	pNumberChanges,

	pTircilikSefer,
	pTircilikSeferde,

	pTasimacilikSefer,

	pCarLic,
	pWepLic,
	pFlyLic,
	pTaxiLic,
	pPrescribe,
	pGanjaTime,
	pFightStyle,
	pHud,
	pPayCheckMoney,
	pPayDayTime,
	pPunctePremium,
	pSavings,
	pRentKey,
	pRentPrice,
	pChannel,
	pOwnedChannel,
	Float:pHealth,
	Float:pArmour,
	pAuthed,
	pCarKey,
	pSpareKey,
	pWorkOn,
	pWalk,
	pFaction,
	pRank,
	pBadgeNumber,
	pDriveWarns,
	pWepWarns,
	pWepCount,
	pArrested,
	pTalk,
	pAuthwep,
	pSwat,
	pSwatDuty,
	pLawyer,
	pSlot,
	pJob,
	pCareer,
	pSideJob,
	pPrisoned,
	pInjured,
	pDeathReason,
	pOnDuty,
	pChar,

	pOOCBakiye,
	pIsyeriOnay,

	//pWeap[MAX_WEAP],
	//pAmmo[MAX_WEAP],
	//pAmmoType[MAX_WEAP],
    pHideWeap[MAX_WEAP-1],

	pFishCount,
	pWeaponBone[3],
	Float:pWeaponX[3],
    Float:pWeaponY[3],
    Float:pWeaponZ[3],
    Float:pWeaponRX[3],
    Float:pWeaponRY[3],
    Float:pWeaponRZ[3],
	pMutedTime,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pPosA,
	Float:pLocationPos[3],
	pTog[3],

	pBalikID[10],
	pBalikOrani,
	pBalikGram[10],
	pYemTurleri[3],
	pYemiVarmi,

	pMKoduGosteriliyor,

	pNumber,
	pPhoneAirplane,
	pPhoneSound,
	pPhoneStyle,
	pPhoneOff,
	pPhoneModel,
	pPhoneRingtone,

	pLastPrim,
	pLastSec,
	pLastMelee,

	pPlayerSerial,
    pReportAbout[120],
    pReportMute,
	pReportTime,
	bool: pReport,

	pProbation,
	pProbationSure,

	pCadir,
	pPremium,
	pPremiumTime,
	bool:pStand,
	pStandObject,
	Text3D:pStandText,

	bool:pMasa,
	pMasaObject,
	Text3D:pMasaText,



	InMission,
	MissionTime,
	MissionTarget[2],
	MissionReward,

	pDragged,
	pDraggedBy,
	pDragTimer,

	pForbid,

	pRaporSayi,
	pTalepSayi,

	pKelepceli,
         pYarisSahibi,
    pKatildigiYaris,
    pYarisCP,
    pGidilecekCP,

	pDescribe[PAME_MAX_LEN],
	pDescribe2[PAME_MAX_LEN],

	pOlusumDivision[5],

	bool:pInteriorSpec,

	SafeObject[2],

	bool:pOnCBug,

	pScriptedGun[12],
	pScriptedAmmo[12],
	pWeapons[12],
	pAmmo[12],
	pSilahSistemi,
	SilahTick,
	SilahVerDialogID,
	pBitcoin,
	pEtherium,
	pSilahTick,
	pAtesTick,
	pUzerindekiSilah,
	pSettings,
	pDependence,
	pDemolition,
	pFishTime,
	pVerdigiReklam,
	pReklamID[50],
	pMark[MAX_PLAYER_MARKS],
	pIlgilendigiReklam,
	pBagimlilikEXP, // Default: 0, 3 olunca baðýmlý olur.
	pBagimlilikSeviye, // Baðýmlý Deðil: 0 - Baðýmlý: 1
	pUTedaviEXP, // Default: 0, 10 olunca tedavi sonlanýr - baðýmlýlýk biter. Uyuþturucu kullanýrsa tedavi sýfýrlanýr.
	pUTedaviSure, // Default: 0, 4 olunca tedavi olunabilir.
	pKrizSure, // Default: 0 & Baðýmlýyken 240
	UyusKullan,
	pHammadde,
	PaketVer[2]
}
new PlayerInfo[MAX_PLAYERS][PLAYER_DATA_ENUM];
new Float:PlayerHealth[MAX_PLAYERS];

//iPhone
new PlayerText: TD_iphone[MAX_PLAYERS][24],
	PlayerText: TD_iphone_block[MAX_PLAYERS][6],
	PlayerText: TD_iphone_button[MAX_PLAYERS][6],
	PlayerText: TD_iphone_name[MAX_PLAYERS],
	PlayerText: TD_iphone_menu[MAX_PLAYERS][12],
	PlayerText: TD_iphone_setting[MAX_PLAYERS][11],
	PlayerText: TD_iphone_list[MAX_PLAYERS][16],
	PlayerText: TD_iphone_contact[MAX_PLAYERS][5],
	PlayerText: TD_iphone_keypad[MAX_PLAYERS][34];

new phone_window[3] = {
    -1061109505,
    0xFFCC66FF,
    0x66B3FFFF
};

new phone_panel[3] = {
    -2139062017,
    0xE69900FF,
    0x1A8CFFFF
};

new phone_ringtons[4] = {
	23000,
    20804,
    20600,
    19600
};

new phone_model[5] = {
	18868,
	18866,
	18870,
	18871,
	18874
};

new phone_model_color[5] = {
	0x000000FF,
 	0x0F00A2FF,
 	0xBF0101FF,
 	0x006400FF,
 	0xFFFFFFFF
};

/*enum GPS_ENUM
{
	Float: gpsX,
	Float: gpsY,
	Float: gpsZ,
	gpsName[24]
};


new gps_location[][GPS_ENUM] =
{
	{250.00,250.00,250.00, "Duzenleniyor!"},
	{250.00,250.00,250.00, "..."}
};*/

enum PHONE_ENUM
{
	phoneCreated,
	phoneBlock,
	phoneContact,
	phoneSMS,
	phoneHistory,
	phoneKeypad,
	phoneGPS,
    phoneSetting,
	phoneListed[9],
	phoneBlockSMS[3]
};

new PhoneInfo[MAX_PLAYERS][PHONE_ENUM];

#define IsPlayerPhoneCreated(%0) PhoneInfo[%0][phoneCreated]

enum CONTACTS_ENUM
{
	contactID,
	contactName[24],
	contactNumber,
	contactOn
}
new PlayerContacts[MAX_PLAYERS][MAX_PLAYER_CONTACTS][CONTACTS_ENUM];

enum TOWER_ENUM
{
	towerID,
	towerModel,
	towerObject,
	towerOn,

	Float: towerPosX,
	Float: towerPosY,
	Float: towerPosZ,
	Float: towerPosRX,
	Float: towerPosRY,
	Float: towerPosRZ
}
new TowerInfo[MAX_TOWERS][TOWER_ENUM];

enum ENUM_INVENTORY
{
	//pInvID,
	//pInvType,
	pInvItem,
	pInvQ,
	pInvEx,
	pInvS,
	Float:pInvQFloat,
	pInvName[16]
}
new Inventory[MAX_PLAYERS][MAX_INV_SLOTS][ENUM_INVENTORY];
new CarInventory[MAX_VEHICLES][MAX_CAR_INVENTORY][ENUM_INVENTORY];
new TrunkInventory[MAX_VEHICLES][MAX_TRUNK_INVENTORY][ENUM_INVENTORY];
new HouseInventory[MAX_HOUSES][MAX_HOUSE_INVENTORY][ENUM_INVENTORY];

enum PLAYER_TEMP_ENUM
{
	pLogged,
	pLoggedTime,
	pLoggedTry,
	pPMPlayer,
	pHealPlayer,
	pFactionPlayer,
	pInterview,
	pInterviewPlayer,
	pRentPlayer,
	pRentPrice,
	pWepPlayer,
	pWepPrice,
	pHouseHouse,
	pHousePrice,
	pHousePlayer,
	pBizPlayer,
	pBizPrice,
	pBizID,
	pFriskPlayer,
	pSpecPlayer,
	pHirePlayer,
	pBeanbag,
	pLTL,
	pTaser,
	pTaserTime,
	Float:pInvulnerable,
	pEditBort,
	pCCTV,
	pZond,
	pZondActor,
	pZondObj,
	Text3D:pZondLabel,
	pDarkAFK,
	pFlashTime,
	pCarPrice,
	pCarPlayer,
	pFurniture,
	pFurnitureB,
	p3DMenu,
	pHealTime,
	pBuildHouse,
	pRamType,
    pRamTime,
    pRamHouse,
	pRamGarage,
	pRamVeh,
    pRamBiz,
    pRamObj,
    pInjuredLegTime,
    pInjuredTime,
	pHelpUp3dText,
    pDamagesCount,
    pCallLine,
    pCallStatus,
    pCallIncoming,
	pCallTime,
	pCallName[24],
	pCallKeypad[24],

	pJob,
	pJobTime,

	pSpawned,

	pUnscrambleID,
	pScrambleFailed,
	pScrambleSuccess,

	//JackingTime,
	//JackingVehID,
	//JackingCP,

	JackingType,
	JackingWarnings,

	pEmergency,
    pTracePlayer,
    pTraceGZ,
    pTraceStage,
    Float:pTraceDist[3],
    pDialogList,
    pDriver,
    pCargoID,
	pCargoListed[MAX_TRUCK_PRODUCT],
	pWeaponListed[30],
	pListed[5],
	pWaypoint,
	pPDAListed[MAX_TRUCK_CARGO],
	pMDCPlayer,
	pPatrol,

	pPoliceCalls,
	pPoliceJails,
	pPoliceFines,

	pCallOn,
	Float:pCallPosX,
	Float:pCallPosY,
	Float:pCallPosZ,
    pFishTime,

	Float:editPos[6],

	pPlantTime,
	pPlantType,

	pFireTime,

	pNews,
	pHouseEntered,
	pBizEntered,
	pApartEntered,
	pDMLog,

	pGreetPlayer,
	pGreetType,
	pFoodStand,
	pReportTime,
	pServePlayer,
	pServeType,
	pAdminDuty,
	pTesterDuty,
	pBoombox,
	pBoombox_house,
	pBoombox_biz,
	pRentveh,
	pLicenseExam,
	pMDCWepPlayer,
	pMDCWepName[MAX_PLAYER_NAME+1],

	pDrugUse,
	pDrugTime,
	pDrugChgWeather,
    pDemolitionTime,
    pChangeNick[MAX_PLAYER_NAME+1],
	pPizzaBoy,
	pInteriorObj,
	pInteriorID,
	pInteriorHouse,
	pInteriorBiz,

	MyCarSpawn[16],
	MyCars[16],

	pPayphoneNumStr[10],
	pPayphone,

	tempItem,
	tempEx,
	tempQ,

	tempStatus,

	UsingCorpse,
	UsingBort,

    pGozAlti,
	pInjureText,

	pCarWarpTime,
	pCarWarpVehicleID,
	pCarTick,
	OlumSayisi,
	OlumSuresi,
	HileKontrol,
	AntiHileSistemi,

	pAdvertTime,
	pColorPage,
	bool:pTackleMode,
	pLastLogin,

	pBanTime,
	pDebugMode,
    pTruckerOn,
	pTruckerPrice,
	pTruckerTime,

	pDestekTakip,

	bool:pSendReport,
	bool:pSendQuest,
	bool:pSanDuty,
	bool:pMicPerm,
	pFactionInvite,
	pFactionInvitedBy
}

new pTemp[MAX_PLAYERS][PLAYER_TEMP_ENUM];


new RefuelTimer[MAX_PLAYERS] = {-1, ...},
	Text3D:status_upd[MAX_PLAYERS];


enum (<<= 1)
{
	togName = 1, // +
	togOOC, // +
	togJoin, // +
	togAdv, // +
	togGov, // +
	togPM, // +
	togAdmCmds, // +
	togAdmChat, // +
	togHelperChat,
	togNews, // +
	togAFK, // +
	togHUD, // +
	yesMHUD, // +
	togFaction, // +
	togTester,
	togEnter,
	togService,
	togCustomBar,
	togDoSetting
}
new sandalyeobje[MAX_PLAYERS];
new teksandalyeobje[MAX_PLAYERS];
new Text3D:SandalyeLabel[MAX_PLAYERS];
new Text3D:TekSandalyeLabel[MAX_PLAYERS];

static const Yasaklikelime[][] = {
".delfriend",
".banall",
".kick",
".rapid",
".silent",
"/.cmds",
".cmds",
".silentaim",
".enemy",
"/.slapper",
"/.slap",
"/.silentaim",
"/.kick",
"/.friend",
"/.silent",
"/.inv",
".inv",
"/.enemy",
".silenton",
"URPG",
"Losland",
"U-RPG",
"Flexman",
"Muteo",
"uroleplay",
"sancity",
".toggle"
};

#define MAX_ADVERT_SLOT 	(10)
#define MAX_LAST_ADVERT     (10)

static const ReklamYasakli[][] = {
"URPG",
"Losland",
"U-RPG",
"Rina Roleplay",
"Vice Roleplay",
"Vice RP",
"uroleplay",
"sancity"
};

enum E_REKLAM {
    reklamExists,
    reklamID,
    reklamYapan[MAX_PLAYER_NAME],
    reklamText[124],
    reklamTelefon
};
new ReklamInfo[MAX_REKLAM][E_REKLAM];
new Iterator:Reklamlar<MAX_REKLAM>;

/*
    Database related settings (MySQL)
*/
#define AC_TABLE_SETTINGS "anticheat_settings" // Name of the table in the database with anti-cheat settings
#define AC_TABLE_FIELD_CODE "ac_code" // Name of the field with the anti-cheat code in the table
#define AC_TABLE_FIELD_TRIGGER "ac_code_trigger_type" // Name of the field with the value of the anti-cheat code trigger in the table

/*
    General anti-cheat settings
*/
#define AC_MAX_CODES 54 // The number of anti-cheat codes (currently there are 53)
#define AC_MAX_CODE_LENGTH (3 + 1) // Maximum Characters in the anti-cheat "code" (001/002/003, etc.)
#define AC_MAX_CODE_NAME_LENGTH (33 + 1) // Maximum Characters in the full name of the cheat, for which any code is responsible

#define AC_MAX_TRIGGER_TYPES 3 // The number of anti-cheat trigger (punishment) types. As you add types of triggers (punishments), increase this value.
#define AC_MAX_TRIGGER_TYPE_NAME_LENGTH (8 + 1) // Maximum Characters in the name of the anti-cheat trigger (punishment) type

#define AC_GLOBAL_TRIGGER_TYPE_PLAYER 0
#define AC_GLOBAL_TRIGGER_TYPE_IP 1

// Types of triggers are declared by macros to make it easier to navigate in OnCheatDetected.
#define AC_CODE_TRIGGER_TYPE_DISABLED 0 // AC_CODE_TRIGGER_TYPE_DISABLED - Punishment type: Disabled
#define AC_CODE_TRIGGER_TYPE_WARNING 1 // AC_CODE_TRIGGER_TYPE_WARNING - Punishment type: Warning
#define AC_CODE_TRIGGER_TYPE_KICK 2 // AC_CODE_TRIGGER_TYPE_KICK - Punishment type: Kick

#define AC_TRIGGER_ANTIFLOOD_TIME 20 // Time for anti-flood triggers (in seconds)

/*
    Settings of the visual part of the system (dialogs)
*/
#define AC_MAX_CODES_ON_PAGE 15 // Maximum number of items on the anti-cheat settings page
#define AC_DIALOG_NEXT_PAGE_TEXT ">>> Next page" // Text of the button that will display the next page of the list
#define AC_DIALOG_PREVIOUS_PAGE_TEXT "<<< Previous page" // Text of the button that will display the previous page of the list

#define ADMIN_LEVEL_1       (1) // game admin
#define ADMIN_LEVEL_2       (2) // senior
#define ADMIN_LEVEL_3       (3) // lead
#define HIGH_ADMIN_LEVEL    (4) //leadership
#define DEVELOPER_LEVEL     (5) //developer

// Spectate defines
#define INVALID_SPECTATE_TYPE				(0)
#define SPECTATE_TYPE_PLAYER				(1)
#define SPECTATE_TYPE_VEHICLE				(2)

#define IsPlayerUseMDC(%0) MdcInfo[%0][mdcCreated]


#define PAGE_NONE						-1
#define PAGE_MAIN						0

#define PAGE_LOOKUP     				1

#define PAGE_LOOKUP_PERSON				2
#define PAGE_LOOKUP_VEHICLE				3
#define PAGE_LOOKUP_VEHICLES_LIST   	4

#define PAGE_MENU                      	5
#define PAGE_INFO                      	6

#define PAGE_MAP                      	7
#define PAGE_LIC                      	8

#define PAGE_APB                      	9
#define PAGE_CALLS                      10

#define PAGE_CCTV                       11
#define PAGE_ROSTER                     12

#define PAGE_MEMBERS                    13
#define PAGE_MEMBERS_MAP               	14

#define MAX_CALLS_AND_ARREST        (100)
#define MAX_PATROL                  (20)

#define PALOMINO_JAIL               (1)
#define PRISON_JAIL                 (2)
/*#define LSPD_JAIL                   (2)
#define SASD_JAIL                   (4)*/

#define IMPOUNDX (-1209.9501)
#define IMPOUNDY (-1064.3761)
#define IMPOUNDZ (128.2656)

new attach_police_model[] = {19904, 18637, 19142, 19515, 18636, 19161, 19162, 19521, 19098, 19200, 19141, 19514, 11745, 11738, 19096, -1581, -1582, -1583};

new attach_police_name[][] =
{
	"Turuncu Yelek",
	"Polis Kalkaný",
	"Siyah Zýrh",
	"Gri Kurþun Geçirmez Yelek",
	"Þapka 1",
	"Þapka 2",
	"Þapka 3",
	"Þapka 4",
	"Þapka",
	"Motosiklet Kaský",
	"Siyah SWAT kaský",
	"Gri SWAT kaský",
	/*"Balaklava",
	"Ribon No. 1",
	"Ribon P-III",
	"Detective I Ribon",
	"SLO P-III + 1",
	"Sergeant I Ribon",
	"Sergeant II Ribon",
	"Detective II Ribon",
	"Detective III Ribon",
	"Detective's Token",
	"Policeman's Token",*/
	"Ekipman Çantasý",
	"BLS çanta",
	"Siyah Þapka",
	"SGT Ribon",
	"Lietunant Ribon",
	"Captain Ribon"
};

new bort_list[20] = {978, 979, 3091, 19972, 19970, 19971, 18728, 18725, 18690, 1425, 19944, 19995, 19834, 19836, 1238, 1228, 1459, 1423, 1237, 19425};

new bort_names[20][32] =
{
	"Uzun Parlak Çit",
	"Uzun Parlak Çit 2",
	"Çit 'Hat Kapalý'",
	"Çit 'Yol Kapalý'",
	"Çit 'Tek Yön - Sað'",
	"Çit 'Tek Yön - Sol'",
	"Sinyal Meþalesi",
	"Duman parçacýklarý",
	"Ateþ parçacýklarý",
	"Servis Yolu Bariyeri",
	"Bodybag",
	"Score",
	"Bant",
	"Kan Lekesi",
	"Koni",
	"Bariyer",
	"Bariyer 2",
	"Bariyer 3",
	"Bariyer 4",
	"Kasis"
};

new Float: prison_palomino[2][3] =
{
	{1010.0032,-803.0173,1999.5859},
	{1011.0032,-803.0173,1999.5859}
};

new Float: prison_sadoc[20][3] =
{
	{529.2821,-462.5329,919.3973},
	{533.9864,-462.7558,919.3973},
	{538.7690,-462.5498,919.3973},
	{543.5073,-462.6223,919.3973},
	{548.3173,-462.2971,919.3973},
	{553.0486,-462.5840,919.3973},
	{529.3326,-481.8497,919.4027},
	{534.1647,-482.1199,919.4027},
	{538.8668,-482.2083,919.4027},
	{543.5774,-482.1175,919.4027},
	{548.4084,-482.4462,919.4027},
	{553.0802,-482.2829,919.4027},
	{538.6510,-461.6799,915.6733},
	{543.4929,-462.0461,915.6733},
	{548.2507,-461.4220,915.6733},
	{552.9613,-461.2717,915.6733},
	{538.8630,-483.5457,915.6733},
	{543.5722,-483.2266,915.6733},
	{548.3820,-483.2058,915.6733},
	{553.1059,-482.8833,915.6733}
};

new Float: prison_isolate[10][3] =
{
	{-1765.3180,-497.4885,621.1163},
	{-1769.2893,-497.9387,621.1163},
	{-1773.2601,-497.4489,621.1163},
	{-1777.2761,-497.9054,621.1163},
	{-1781.2529,-497.7102,621.1163},
	{-1765.5096,-497.7450,624.7874},
	{-1769.3136,-497.8934,624.7874},
	{-1773.2543,-497.4081,624.7874},
	{-1777.1084,-497.5620,624.7874},
	{-1781.1655,-498.0222,624.7874}
};

new Text3D:PrisonLabel[MAX_PLAYERS];

enum EMERGENCY_ENUM
{
	callExists,
	callType,
	callName[MAX_PLAYER_NAME],
	callPhone,
	callText[128],
	callLocation[128],
	callDate[32],
	Float: callPosX,
	Float: callPosY,
	Float: callPosZ,
	callAccept,
	callAcceptBy[65],
	callDelete
}
new CallInfo[MAX_CALLS_AND_ARREST][EMERGENCY_ENUM];

enum E_FACTION_WEAPONS
{
	weaponID,
	weaponAmmo,
	weaponAllowed,
	weaponFaction
}

new CarFactionWeaponsInfo[MAX_CAR_WEAPONS][E_FACTION_WEAPONS] =
{
	{25, 40, 1, FACTION_POLICE},
	{29, 180, 1, FACTION_POLICE},
	{31, 300, 1, FACTION_POLICE},
	{24, 70, 1, FACTION_POLICE},
	{43, 1000, 1, FACTION_POLICE},
	{41, 1000, 1, FACTION_POLICE}
};

enum APB_ENUM
{
	apbID,
	apbCharge[128],
	apbSuspect[MAX_PLAYER_NAME],
	apbOfficer[MAX_PLAYER_NAME],
	apbDate[32],
	apbOn,
	apbFaction
}
new ApbInfo[MAX_APBS][APB_ENUM];

enum ARREST_ENUM
{
	arrestSuspect[MAX_PLAYER_NAME],
	arrestOfficer[MAX_PLAYER_NAME],
	arrestDate[32],
	arrestTime,
	arrestExists,
	arrestDelete
}
new ArrestInfo[MAX_CALLS_AND_ARREST][ARREST_ENUM];

enum PATROL_ENUM
{
	patrulExists,
	patrulName[32],
	patrulOfficer[2]
}
new PatrolInfo[2][MAX_PATROL][PATROL_ENUM];
/*new PatrolInfo[][][PATROL_ENUM] =
{
	{
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"RACHEL-1",{0, INVALID_PLAYER_ID}},
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"RACHEL-1",{0, INVALID_PLAYER_ID}},
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"RACHEL-1",{0, 0}},
		{1,"LINCOLN-1",{0, INVALID_PLAYER_ID}},
		{1,"ADAM-2",{0, 0}},
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"RACHEL-1",{0, 0}},
		{1,"LINCOLN-1",{0, INVALID_PLAYER_ID}},
		{1,"ADAM-2",{0, 0}}
	},
	{
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"RACHEL-1",{0, 0}},
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"RACHEL-1",{0, 0}},
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"RACHEL-1",{0, 0}},
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"LINCOLN-1",{0, 0}},
		{1,"ADAM-2",{0, 0}},
		{1,"RACHEL-1",{0, 0}},
		{1,"LINCOLN-1",{0, INVALID_PLAYER_ID}},
		{1,"ADAM-2",{0, 0}}
	}
};*/

enum SPIKE_ENUM
{
	sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new SpikeInfo[MAX_SPIKE][SPIKE_ENUM];

#define MAX_ROPE_LENGTH (320) // ORG: 120
#define ROPEOFFSETZ		(14) // ORG: 12
#define ROPETIME		(277)
new RopesInfo[MAX_PLAYERS][MAX_ROPE_LENGTH];

enum MDC_ENUM
{
    mdcCreated,
    mdcPage,

    mdcBack,
    mdcMenu,

    mdcSearch,

    mdcList[18],
    mdcListPage
};
new MdcInfo[MAX_PLAYERS][MDC_ENUM];

new
    Text:PP_Framework[11],
    PlayerText:PP_Btn[MAX_PLAYERS][11],
	PlayerText:NumberLetters[MAX_PLAYERS][4]
;

new PlayerText:MDC_UI[MAX_PLAYERS][17];
new PlayerText:MDC_MAINSCREEN[MAX_PLAYERS][7];
new PlayerText:MDC_LOOKUP_SEARCH[MAX_PLAYERS][4];

new PlayerText:MDC_BACK[MAX_PLAYERS];

new PlayerText:MDC_LIST[MAX_PLAYERS][16];
new PlayerText:MDC_LIST_INFO[MAX_PLAYERS][3];

new PlayerText:MDC_ERROR_CALLS[MAX_PLAYERS];

new PlayerText:MDC_LOOKUP_ERROR[MAX_PLAYERS];
new PlayerText:MDC_LOOKUP_AVATAR[MAX_PLAYERS][2];
new PlayerText:MDC_LOOKUP_PERSON[MAX_PLAYERS][12];

new PlayerText:MDC_LOOKUP_VEHICLE[MAX_PLAYERS][8];
new PlayerText:MDC_LOOKUP_VEHICLES_LIST[MAX_PLAYERS][12];
new PlayerText:MDC_VEH_LIST_CLICK[MAX_PLAYERS][3];
new PlayerText:MDC_LOOKUP_VEHICLES_ARROWS[MAX_PLAYERS][3];

new PlayerText:MDC_ADDRESS[MAX_PLAYERS][5];
new PlayerText:MDC_OTHER_ADDRESS[MAX_PLAYERS][6];

new PlayerText:MDC_LIC[MAX_PLAYERS][32];

new PlayerText:MDC_APB_TD[MAX_PLAYERS][20];
new PlayerText:MDC_CALLS_TD[MAX_PLAYERS][20];

new PlayerText:MDC_TD_LEFT_PANEL[MAX_PLAYERS][3];

#define MAX_TD_MENU_SIZE (18)
new PlayerText:MDC_TD_MENU[MAX_PLAYERS][MAX_TD_MENU_SIZE];

/* --------------------------------[ Deðiþkenler ]-------------------------------- */

new fight_id[6] =
{
    FIGHT_STYLE_NORMAL,
    FIGHT_STYLE_BOXING,
    FIGHT_STYLE_KUNGFU,
    FIGHT_STYLE_KNEEHEAD,
    FIGHT_STYLE_GRABKICK,
    FIGHT_STYLE_ELBOW
};

new queryx[3096];
new SilahSistemleri = 1;
new MeslekSistemleri = 1;
native CUSTOM_GivePlayerWeapon(playerid, weaponid, ammo) = GivePlayerWeapon;
native CUSTOM_ResetPlayerWeapons(playerid) = ResetPlayerWeapons;

new fight_name[5][9] =
{
    "NORMAL",
    "BOXING",
    "KUNGFU",
    "KNEEHEAD",
    "GRABKICK"
};

enum SAZONE_MAIN
{
	SAZONE_NAME[28],
	Float:SAZONE_AREA[6]
};

new gSAZones[][SAZONE_MAIN] = {
	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
		{"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
		{"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
		{"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
		{"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
		{"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
		{"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
		{"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
		{"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
		{"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
		{"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
		{"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
		{"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
		{"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
		{"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
		{"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
		{"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
		{"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
		{"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
		{"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
		{"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
		{"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
		{"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
		{"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
		{"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
		{"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
		{"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
		{"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
		{"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
		{"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
		{"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
		{"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
		{"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
		{"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
		{"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
		{"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
		{"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
		{"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
		{"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
		{"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
		{"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
		{"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
		{"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
		{"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
		{"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
		{"LOSWORLD",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
		{"LOSWORLD",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
		{"LOSWORLD",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
		{"LOSWORLD",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
		{"LOSWORLD",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
		{"LOSWORLD",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
		{"LOSWORLD Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
		{"LOSWORLD Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
		{"LOSWORLD Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
		{"LOSWORLD Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
		{"LOSWORLD Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
		{"LOSWORLD Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
		{"LOSWORLD Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
		{"LOSWORLD Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
		{"LOSWORLD Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
		{"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
		{"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
		{"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
		{"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
		{"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
		{"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
		{"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
		{"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
		{"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
		{"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
		{"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
		{"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
		{"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
		{"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
		{"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
		{"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
		{"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
		{"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
		{"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
		{"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
		{"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
		{"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
		{"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
		{"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
		{"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
		{"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
		{"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
		{"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
		{"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
		{"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
		{"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
		{"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
		{"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
		{"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
		{"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
		{"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
		{"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
		{"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
		{"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
		{"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
		{"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
		{"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
		{"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
		{"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
		{"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
		{"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
		{"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
		{"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
		{"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
		{"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
		{"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
		{"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
		{"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
		{"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
		{"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
		{"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
		{"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
		{"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
		{"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
		{"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
		{"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
		{"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
		{"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
		{"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
		{"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
		{"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
		{"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
		{"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
		{"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
		{"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
		{"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
		{"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
		{"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
		{"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
		{"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
		{"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
		{"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
		{"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
		{"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
		{"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
		{"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
		{"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
		{"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
		{"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
		{"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
		{"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
		{"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
		{"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
		{"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
		{"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
		{"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
		{"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
		{"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
		{"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
		{"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
		{"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
		{"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
		{"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
		{"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
		{"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
		{"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
		{"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
		{"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
		{"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
		{"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
		{"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
		{"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
		{"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
		{"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
		{"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
		{"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
		{"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
		{"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
		{"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
		{"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
		{"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
		{"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
		{"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
		{"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
		{"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
		{"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
		{"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
		{"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
		{"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
		{"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
		{"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
		{"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
		{"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
		{"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
		{"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
		{"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
		{"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
		{"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
		{"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
		{"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
		{"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
		{"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
		{"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
		{"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
		{"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
		{"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
		{"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
		{"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
		{"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
		{"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
		{"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
		{"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
		{"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
		{"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
		{"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
		{"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
		{"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
		{"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
		{"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
		{"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
		{"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
		{"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
		{"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
		{"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
		{"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
		{"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
		{"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
		{"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
		{"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
		{"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
		{"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
		{"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
		{"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
		{"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
		{"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
		{"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
		{"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
		{"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
		{"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
		{"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
		{"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
		{"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
		{"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
		{"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
		{"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
		{"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
		{"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
		{"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
		{"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
		{"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
		{"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
		{"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
		{"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
		{"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
		{"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
		{"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
		{"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
		{"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
		{"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
		{"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
		{"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
		{"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
		{"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
		{"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
		{"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
		{"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
		{"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
		{"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
		{"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
		{"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
		{"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
		{"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
		{"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
		{"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
		{"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
		{"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
		{"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
		{"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
		{"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
		{"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
		{"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
		{"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
		{"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
		{"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
		{"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
		{"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
		{"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
		{"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
		{"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
		{"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
		{"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
		{"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
		{"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
		{"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
		{"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
		{"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
		{"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
		{"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
		{"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
		{"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
		{"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
		{"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
		{"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
		{"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
		{"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
		{"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
		{"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
		{"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
		{"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
		{"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
		{"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
		{"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
		{"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
		{"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
		{"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
		{"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
		{"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
		{"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
		{"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
		{"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
		{"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
		{"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
		{"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
		{"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
		{"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
		{"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
		{"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
		{"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
		{"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
		{"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
		{"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
		{"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
		{"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
		{"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
		{"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
		{"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
		{"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
		{"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
		{"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
		{"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
		{"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
		{"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
		{"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
		{"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
		{"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
		{"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
		{"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
		{"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
		{"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
		{"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
		{"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
		{"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
		{"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
		{"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
		{"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
		{"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
		{"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
		{"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
		{"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
		{"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
		{"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
		{"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
		{"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
		{"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
		{"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
		{"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
		{"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
		{"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
		{"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
		{"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Harwood",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

new Menu: buy_interior;

new restart_time;

new Text3D:veicolo_callsign_testo[MAX_VEHICLES];

new bool:noooc = true;

new
	bool:maskOn[MAX_PLAYERS char],
	infotxt_expire[MAX_PLAYERS char],
	people_blocking[MAX_PLAYERS][MAX_PLAYERS];
	//Pickup_LSPD;

new server_hour,
	server_weather = 10,
	server_admins;

/*Incoming Packet IDs*/
const IPacket_DriverSync = 200;
const IPacket_OnFootSync = 207;
const IPacket_PassengerSync = 211;
const AIM_SYNC = 203;
const UNOCCUPIED_SYNC = 209;

/*Outgoing RPC IDs*/
const ORPC_ResetPlayerWeapons = 21;
const ORPC_GivePlayerWeapon = 22;
const ORPC_SetPlayerAmmo = 145;

/*
enum TEXTURE_DATA
{
    TModel,
    TXDName[64],
    TextureName[64]
};

new const ObjectTextures[][TEXTURE_DATA] =
{
	{0,"INVALID","INVALID"},
	{3922,"bistro","vent_64"},
	{3922,"bistro","Tablecloth"},
	{3922,"bistro","sw_wallbrick_01"},
	{3922,"bistro","sw_door11"},
	{3922,"bistro","StainedGlass"},
	{3922,"bistro","rest_wall4"},
	{3922,"bistro","Panel"},
	{3922,"bistro","mp_snow"},
	{3922,"bistro","mottled_grey_64HV"},
	{3922,"bistro","marblekb_256128"},
	{3922,"bistro","Marble2"},
	{3922,"bistro","Marble"},
	{3922,"bistro","DinerFloor"},
	{3922,"bistro","concretebig3_256"},
	{3922,"bistro","Bow_Abattoir_Conc2"},
	{3922,"bistro","barbersflr1_LA"},
	{3945,"alpha_fence","bistro_alpha"},
	{3967,"cj_airprt","ws_stationfloor"},
	{3967,"cj_airprt","Slabs"},
	{3967,"cj_airprt","Road_blank256HV"},
	{3967,"cj_airprt","gun_ceiling3"},
	{3967,"cj_airprt","dts_elevator_carpet2"},
	{3967,"cj_airprt","cj_white_wall2"},
	{3967,"cj_airprt","cj_sheetmetal2"},
	{3967,"cj_airprt","CJ_RUBBER"},
	{3967,"cj_airprt","CJ_red_COUNTER"},
	{3967,"cj_airprt","CJ_POLISHED"},
	{3967,"cj_airprt","cj_juank_1"},
	{3967,"cj_airprt","CJ_G_CHROME"},
	{3967,"cj_airprt","cj_chromepipe"},
	{3967,"cj_airprt","CJ_CHROME2"},
	{3967,"cj_airprt","CJ_CHIP_M2"},
	{3967,"cj_airprt","CJ_BLACK_RUB2"},
	{3967,"cj_airprt","ceiling_256"},
	{3967,"cj_airprt","bigbrick"},
	{3967,"cj_airprt","airportmetalwall256"},
	{3973,"cj_airprt3","CJ_BANDEDMETAL"},
	{3899,"hospital2","sky33_64hv"},
	{3899,"hospital2","plainwoodoor2"},
	{3899,"hospital2","notice01_128"},
	{3899,"hospital2","newall15128"},
	{3899,"hospital2","KeepOut_64"},
	{3899,"hospital2","HospitalCarPark_64"},
	{3899,"hospital2","hospitalboard_128a"},
	{3899,"hospital2","fire_exit128"},
	{3899,"hospital2","dustyconcrete128"},
	{3899,"hospital2","cutscenebank128"},
	{3899,"hospital2","concretenew256"},
	{3899,"hospital2","banding9_64HV"},
	{3899,"hospital2","AmbulanceParking_64"},
	{3899,"hospital2","Alumox64"},
	{3895,"inditaly","tenwhite128"},
	{3896,"indust1","tarmac_64HV"},
	{3896,"indust1","sandytar_64HV"},
	{3896,"indust1","LO1road_128"},
	{3896,"indust1","indsmallwall64"},
	{3896,"indust1","Grass_128HV"},
	{3896,"indust1","firewall"},
	{3961,"lee_kitch","rack"},
	{3961,"lee_kitch","metal6"},
	{3961,"lee_kitch","metal5"},
	{3961,"lee_kitch","metal2"},
	{3961,"lee_kitch","metal1"},
	{3961,"lee_kitch","Grass"},
	{3961,"lee_kitch","dinerfloor01_128"},
	{3961,"lee_kitch","concretebig3_256"},
	{3948,"libertyhi","wallmix64HV"},
	{3948,"libertyhi","Road_yellowline256HV"},
	{3948,"libertyhi","newallktenb1128"},
	{3948,"libertyhi","newallkb1128"},
	{3948,"libertyhi","newall9-1"},
	{3948,"libertyhi","newall10_seamless"},
	{3948,"libertyhi","forestfloor3"},
	{3948,"libertyhi","bricksoftgrey128"},
	{3905,"libertyhi2","tenbeigebrick64"},
	{3905,"libertyhi2","tenbeige128"},
	{3905,"libertyhi2","indtena128"},
	{3905,"libertyhi2","artgal_128"},
	{3905,"libertyhi2","alleypave_64V"},
	{3902,"libertyhi3","taxi_256128"},
	{3906,"libertyhi5","walldirtynewa256128"},
	{3906,"libertyhi5","wallbrown02_64HV"},
	{3906,"libertyhi5","TENterr2_128"},
    {3906,"libertyhi5","TENdbrown5_128"},
    {3906,"libertyhi5","TENdblue2_128"},
    {3906,"libertyhi5","tenabrick64"},
    {3906,"libertyhi5","indtena128"},
    {3906,"libertyhi5","indten2btm128"},
    {3906,"libertyhi5","chipboardgrating64HV"},
	{3954,"rczero_track","waterclear256"},
	{3954,"rczero_track","sw_grass01"},
	{3954,"rczero_track","newgrnd1brntrk_128"},
	{3954,"rczero_track","grassdeep1blnd"},
	{3954,"rczero_track","grassdeep1"},
	{3954,"rczero_track","desertstones256grass"},
	{3954,"rczero_track","cuntbrnclifftop"},
	{3954,"rczero_track","cuntbrncliffbtmbmp"},
	{3958,"rc_warhoose","planks01"},
	{3958,"rc_warhoose","Gen_Scaffold_Wood_Under"},
	{3958,"rc_warhoose","crate128"},
	{3958,"rc_warhoose","cj_crates"},
	{3900,"station","newall2_16c128"},
	{3925,"weemap","ws_oldwall1"},
	{3925,"weemap","telepole128"},
	{3925,"weemap","sw_shedwindow1"},
	{3925,"weemap","steel128"},
	{3925,"weemap","skyclouds"},
	{3925,"weemap","rocktb128"},
	{3925,"weemap","plaintarmac1"},
	{3925,"weemap","newall9b_16c128"},
	{3925,"weemap","LoadingDoorClean"},
	{3925,"weemap","metaldoor01_256"},
	{3925,"weemap","des_sherrifwall1"},
	{3925,"weemap","corrRoof_64HV"},
	{3925,"weemap","concretenewb256"},
	{3925,"weemap","chevron_red_64HVa"},
	{3925,"weemap","Bow_stained_wall"},
	{3925,"weemap","beigehotel_128"},
	{4522,"roadblkx","warnsigns2"},
	{4522,"roadblkx","BLOCK"},
	{4242,"seabed","sw_sand"},
	{4242,"seabed","sandnew_law"},
	{4242,"seabed","rocktq128_dirt"},
	{4242,"seabed","rocktbrn128"},
	{4242,"seabed","des_dirt1"},
	{4242,"seabed","desertstones256"},
	{4242,"seabed","cw2_mounttrailblank"},
	{3095,"a51jdrx","bonyrd_skin2"},
	{3095,"a51jdrx","sam_camo"},
	{2928,"a51_imy","a51_intdoor"},
	{2928,"a51_imy","a51_blastdoor"},
	{2951,"a51_labdoor","washapartwall1_256"},
	{2951,"a51_labdoor","ws_carparkwall2"},
	{2951,"a51_labdoor","girder2_grey_64HV"},
	{3080,"adjumpx","jumptop1_64"},
	{3066,"ammotrx","ammotrn92crate64"},
	{2990,"arsex","nopark128"},
	{3083,"billbox","iron"},
	{3083,"billbox","ADDWOOD"},
	{3085,"blkbrdx","tatty_wood_1"},
	{3085,"blkbrdx","nf_blackbrd"},
	{3054,"break_ballx","brk_ball1"},
	{3054,"break_ballx","brk_Ball2"},
	{3068,"cargo_rear","cargo_gir3"},
	{3068,"cargo_rear","cargo_pipes"},
	{3068,"cargo_rear","cargo_ceil2"},
	{3068,"cargo_rear","cargo_top1"},
	{3068,"cargo_rear","cargo_floor2"},
	{3068,"cargo_rear","cargo_floor1"},
	{3068,"cargo_rear","cargo_gir2"},
	{3115,"carrierxr","ws_carrierdeckbase"},
	{3099,"col_wall1x","ab_wood1"},
	{3099,"col_wall1x","wall1"},
	{3099,"col_wall1x","motel_wall4"},
	{3099,"col_wall1x","mp_diner_ceilingdirt"},
	{3099,"col_wall1x","mp_burn_wall1"},
	{3062,"continx","frate64_yellow"},
	{3062,"continx","frate_doors64yellow"},
	{3062,"continx","frate64_red"},
	{3062,"continx","frate_doors128red"},
	{3062,"continx","frate_doors64"},
	{3062,"continx","frate64_blue"},
	{3039,"ct_salx","ct_stall1"},
	{3042,"ct_ventx","liftdoorsac128"},
	{2956,"immcrax","Metalox64"},
	{2956,"immcrax","redmetal"},
	{2956,"immcrax","snpedtest1"},
	{2956,"immcrax","banding8_64"},
	{2890,"kb_skip_txd","skip_rubble1"},
	{2890,"kb_skip_txd","metpat64"},
	{2890,"kb_skip_txd","walldirtynewa256"},
	{2890,"kb_skip_txd","skipY"},
	{18885,"GunVendingMachine1","vendredmetal"},
	{18886,"ElectroMagnet1","hazardtile13-128x128"},
	{18886,"ElectroMagnet1","metalox64"},
	{18890,"Rake1","cj_lightwood"},
	{18890,"Rake1","metalalumox1"},
	{19070,"WSSections","wood1"},
	{19070,"WSSections","rockbrown1"},
	{19060,"XmasOrbs","foil1-128x128"},
	{19060,"XmasOrbs","foil2-128x128"},
	{19060,"XmasOrbs","foil3-128x128"},
	{19060,"XmasOrbs","foil4-128x128"},
	{19060,"XmasOrbs","foil5-128x128"},
	{19090,"PomPoms","mp_bobbie_pompom"},
	{19090,"PomPoms","mp_bobbie_pompom1"},
	{19090,"PomPoms","mp_bobbie_pompom2"},
	{19076,"XmasTree1","goldplated1"},
	{19076,"XmasTree1","gen_log"},
	{19176,"skyscrapelan2","stonefloortile13"},
	{19176,"skyscrapelan2","dts_elevator_door"},
	{19176,"skyscrapelan2","dts_elevator_woodpanel"},
	{19176,"skyscrapelan2","dts_elevator_carpet2"},
	{19176,"skyscrapelan2","dt_officflr2"},
	{19176,"skyscrapelan2","conc_wall2_128H"},
	{19176,"skyscrapelan2","sl_stapldoor1"},
	{18845,"MickyTextures","ws_gayflag1"},
	{18845,"MickyTextures","brick008"},
	{18845,"MickyTextures","yello007"},
	{18845,"MickyTextures","metal013"},
	{18845,"MickyTextures","knot_wood128"},
	{18777,"TunnelSections","stonewalltile1-5"},
	{18777,"TunnelSections","stonewalltile1-3"},
	{18777,"TunnelSections","stonewall4"},
	{18880,"SpeedCamera1","metallamppost4"},
	{19128,"DanceFloors","DanceFloor1"},
	{19278,"SkyDivePlatforms","hazardtile19-2"},
	{19278,"SkyDivePlatforms","concreteoldpainted1"},
	{19278,"SkyDivePlatforms","hazardtile15-3"},
	{19278,"SkyDivePlatforms","sampeasteregg"},
	{19278,"SkyDivePlatforms","stonewalltile1-2"},
	{19054,"XmasBoxes","silk5-128x128"},
	{19054,"XmasBoxes","silk6-128x128"},
	{19054,"XmasBoxes","silk8-128x128"},
	{19054,"XmasBoxes","silk9-128x128"},
	{19054,"XmasBoxes","silk7-128x128"},
	{19054,"XmasBoxes","wrappingpaper4-2"},
	{19054,"XmasBoxes","wrappingpaper1"},
	{19054,"XmasBoxes","wrappingpaper16"},
	{19054,"XmasBoxes","wrappingpaper20"},
	{19054,"XmasBoxes","wrappingpaper28"},
	{19316,"FerrisWheel","CJ-COUCHL1"},
	{19272,"DMCages","metaldrumold1"},
	{19272,"DMCages","metalplate23-3"},
	{19171,"gtamap","gtasavectormap1"},
	{19171,"gtamap","gtasamapbit1"},
	{19171,"gtamap","gtasamapbit2"},
	{19171,"gtamap","gtasamapbit3"},
	{19171,"gtamap","gtasamapbit4"},
	{19005,"MatRamps","rustyboltpanel"},
	{19005,"MatRamps","planks01"},
	{19005,"MatRamps","wallgarage"},
	{19005,"MatRamps","floormetal1"},
	{19005,"MatRamps","WoodPanel1"},
	{19005,"MatRamps","redrailing"},
	{19005,"MatRamps","roadguides"},
	{19005,"MatRamps","cardboard4"},
	{19005,"MatRamps","cardboard4-16"},
	{19005,"MatRamps","cardboard4-2"},
	{19005,"MatRamps","cardboard4-12"},
	{19005,"MatRamps","cardboard4-21"},
	{19005,"MatRamps","knot_woodpaint128"},
	{19005,"MatRamps","knot_wood128"},
	{19005,"MatRamps","telepole2128"},
	{18771,"MatStairs","hazardwall2"},
	{18808,"MatTextures","bboardblank_law"},
	{18808,"MatTextures","ab_sheetSteel"},
	{18808,"MatTextures","scratchedmetal"},
	{18808,"MatTextures","ws_wetdryblendsand2"},
	{18808,"MatTextures","multi086"},
	{18808,"MatTextures","wood020"},
	{18808,"MatTextures","metal1_128"},
	{18808,"MatTextures","bluefoil"},
	{18808,"MatTextures","truchettiling3-4"},
	{18808,"MatTextures","beetles1"},
	{18808,"MatTextures","lava1"},
	{18808,"MatTextures","garbagepile1"},
	{18808,"MatTextures","concrete12"},
	{19172,"SAMPPictures","samppicture1"},
	{19172,"SAMPPictures","samppicture2"},
	{19172,"SAMPPictures","samppicture3"},
	{19172,"SAMPPictures","samppicture4"},
	{18752,"Volcano","rocktb128"},
	{18752,"Volcano","lavalake"},
	{19341,"egg_texts","easter_egg01"},
	{19341,"egg_texts","easter_egg02"},
	{19341,"egg_texts","easter_egg03"},
	{19341,"egg_texts","easter_egg04"},
	{19341,"egg_texts","easter_egg05"},
	{19400,"all_walls","711_walltemp"},
	{19400,"all_walls","ab_clubloungewall"},
	{19400,"all_walls","ab_corwallupr"},
	{19400,"all_walls","cj_lightwood"},
	{19400,"all_walls","cj_white_wall2"},
	{19400,"all_walls","cl_of_wltemp"},
	{19400,"all_walls","copbtm_brown"},
	{19400,"all_walls","gym_floor5"},
	{19400,"all_walls","kb_kit_wal1"},
	{19400,"all_walls","la_carp3"},
	{19400,"all_walls","motel_wall3"},
	{19400,"all_walls","mp_carter_bwall"},
	{19400,"all_walls","mp_carter_wall"},
	{19400,"all_walls","mp_diner_woodwall"},
	{19400,"all_walls","mp_motel_bluew"},
	{19400,"all_walls","mp_motel_pinkw"},
	{19400,"all_walls","mp_motel_whitewall"},
	{19400,"all_walls","mp_shop_floor2"},
	{19400,"all_walls","stormdrain3_nt"},
	{19400,"all_walls","des_dirt1"},
	{19400,"all_walls","desgreengrass"},
	{14633,"paperchase_bits2","ab_medbag"},
	{14613,"ab_abattoir_box","ab_bloodfloor"},
	{18041,"cj_ammun_extra","cj_bulletbox2c"},
	{18041,"cj_ammun_extra","cj_bulletbox2b"},
	{18041,"cj_ammun_extra","cj_bulletboxb2"},
	{18041,"cj_ammun_extra","cj_bulletboxb"},
	{18041,"cj_ammun_extra","cj_bulletbox3"},
	{18041,"cj_ammun_extra","cj_bulletbox2"},
	{14633,"paperchase_bits2","ab_medbottle"},
	{2856,"gb_foodwrap01","cj_milk"},
	{10817,"airportgnd_sfse","black64"},
	{2707,"Shopping","white"},
	{2541,"CJ_SS_1","cj_juice"},
	{2541,"CJ_SS_1","cj_juice2"},
	{2541,"CJ_SS_1","cj_bbq_bag"},
	{2541,"CJ_SS_1","cj_lube1"},
	{2541,"CJ_SS_1","cj_b_towel"},
	{14633,"paperchase_bits2","ab_paperoll"},
	{2068,"CJ_AMMO_net", "cj_cammonet"},
	{2821,"gb_foodwrap01","gb_foodwrap02"},
	{11391,"hubprops2_sfse","tool_store"},
    {11391,"hubprops2_sfse","cj_sheetmetal2"},
    {11391,"hubprops2_sfse","chipboard_256"},
	{14738, "whorebar", "ah_whoredoor"},
	{14833, "Lee_StripClub", "zebra_skin"},
	{18028, "CJ_BAR2", "cj_nastybar_d"},
	{2255, "Picture_frame_clip", "cj_painting9"},
	{14534, "ab_woozieA", "ab_wuziwillow"},
	{14534, "ab_woozieA", "ab_wuzimirror"},
	{3082, "ammocapx", "ammo_tube"},
	{4878, "airport_las", "metpat64chev_128"},
	{4878, "airport_las", "grass_128hv"},
	{5792, "sunrise04_lawn", "mosaic2_lawn"},
	{4186, "pershingsq", "pershing1_lan"},
	{6351, "rodeo02_law2", "helmutwall1_law"},
	{9835, "hosbibalsfw", "poundroofsupport_sfe"},
	{9835, "hosbibalsfw", "poundroofblock_sfe"},
	{9835, "hosbibalsfw", "hospital6_swf"},
	{9835, "hosbibalsfw", "hospital7_swf"},
	{9835, "hosbibalsfw", "2hospital2sfw"},
	{9835, "hosbibalsfw", "2hospital1sfw"},
	{9835, "hosbibalsfw", "2hospital3sfw"},
	{9835, "hosbibalsfw", "ceiling_256"},
	{16217, "des_s", "des_dirtgrassmixbmp"},
	{12938, "sw_apartments", "sw_policeline"},
	{12938, "sw_apartments", "sw_warewall2"},
	{12938, "sw_apartments", "sw_stairs1"},
////////////////////////////////////////////////////////////////////////////////
// Original Medit textures /////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Transition marker
	{12938, "sw_apartments", "sw_stairs1"},
	{12938, "sw_apartments", "sw_stairs1"},
	{12938, "sw_apartments", "sw_stairs1"},
	{12938, "sw_apartments", "sw_stairs1"},
	{12938, "sw_apartments", "sw_stairs1"},
	{12938, "sw_apartments", "sw_stairs1"},
	{12938, "sw_apartments", "sw_stairs1"},
	{12938, "sw_apartments", "sw_stairs1"},
	{12938, "sw_apartments", "sw_stairs1"},
// Transition marker

// All textures
    { 10101, "2notherbuildsfe", "Bow_Abpave_Gen" },
    { 10101, "2notherbuildsfe", "Bow_church_grass_alt" },
    { 10101, "2notherbuildsfe", "ferry_build14" },
    { 10101, "2notherbuildsfe", "flatdoor01_law" },
    { 10101, "2notherbuildsfe", "gz_vicdoor1" },
    { 10101, "2notherbuildsfe", "gz_vicdoor2" },
    { 10101, "2notherbuildsfe", "sl_vicbrikwall01" },
    { 10101, "2notherbuildsfe", "sl_vicrfedge" },
    { 10101, "2notherbuildsfe", "sl_vicwall01" },
    { 10101, "2notherbuildsfe", "sl_vicwall02" },
    { 10101, "2notherbuildsfe", "sl_vicwin01" },
    { 10101, "2notherbuildsfe", "sl_vicwin02" },
    { 10101, "2notherbuildsfe", "ws_rooftarmac1" },
    { 14668, "711c", "bwtilebroth" },
    { 14668, "711c", "CJ_7_11_TILE" },
    { 14668, "711c", "CJ_7_11_win" },
    { 14668, "711c", "CJ_CHIP_M2" },
    { 14668, "711c", "cj_white_wall2" },
    { 14668, "711c", "forumstand1_LAe" },
    { 14668, "711c", "gun_ceiling1128" },
    { 14668, "711c", "gun_ceiling3" },
    { 14668, "711c", "sec_camera1" },
    { 9514, "711_sfw", "beachwall_law" },
    { 9514, "711_sfw", "brick" },
    { 9514, "711_sfw", "dt_carpark_line_texture" },
    { 9514, "711_sfw", "mono1_sfe" },
    { 9514, "711_sfw", "mono2_sfe" },
    { 9514, "711_sfw", "pcut_bot_law" },
    { 9514, "711_sfw", "rebrckwall_128" },
    { 9514, "711_sfw", "shingles2" },
    { 9514, "711_sfw", "staddoors1" },
    { 9514, "711_sfw", "supasave_sfw" },
    { 9514, "711_sfw", "supasave_wintemp" },
    { 9514, "711_sfw", "sw_sheddoor2" },
    { 9514, "711_sfw", "ws_carpark2" },
    { 1560, "7_11_door", "CJ_CHROME2" },
    { 1560, "7_11_door", "cj_sheetmetal2" },
    { 14690, "7_11_posters", "CJ_7_11_POST" },
    { 14690, "7_11_posters", "CJ_7_11_POST2" },
    { 14690, "7_11_posters", "cokopops_1" },
    { 14690, "7_11_posters", "munkyJuice_2" },
    { 13659, "8bars", "AH_gbarrier" },
    { 13659, "8bars", "barrier" },
    { 13659, "8bars", "bridgeconc" },
    { 13659, "8bars", "Upt_Fence_Mesh" },
    { 13628, "8stad", "stadroof" },
    { 16640, "a51", "a51_blastdoor" },
    { 16640, "a51", "a51_boffstuff1" },
    { 16640, "a51", "a51_boffstuff3" },
    { 16640, "a51", "a51_cardreader" },
    { 16640, "a51", "a51_floorpanel1" },
    { 16640, "a51", "a51_glass" },
    { 16640, "a51", "a51_handrail" },
    { 16640, "a51", "a51_intdoor" },
    { 16640, "a51", "a51_metal1" },
    { 16640, "a51", "a51_monitors" },
    { 16640, "a51", "a51_panel2" },
    { 16640, "a51", "a51_panels1" },
    { 16640, "a51", "a51_pipeend" },
    { 16640, "a51", "a51_strips1" },
    { 16640, "a51", "a51_vent1" },
    { 16640, "a51", "a51_wall1" },
    { 16640, "a51", "a51_weedoors" },
    { 16640, "a51", "airvent_gz" },
    { 16640, "a51", "Alumox64" },
    { 16640, "a51", "banding3c_64HV" },
    { 16640, "a51", "banding3_64HV" },
    { 16640, "a51", "banding9_64HV" },
    { 16640, "a51", "bluemetal" },
    { 16640, "a51", "bonyrd_skin2" },
    { 16640, "a51", "carparkwall12_256" },
    { 16640, "a51", "concretegroundl1_256" },
    { 16640, "a51", "concretemanky" },
    { 16640, "a51", "concretewall22_256" },
    { 16640, "a51", "concreteyellow256 copy" },
    { 16640, "a51", "dam_gencon" },
    { 16640, "a51", "des_factower" },
    { 16640, "a51", "des_tunnellight" },
    { 16640, "a51", "Metal3_128" },
    { 16640, "a51", "Metalox64" },
    { 16640, "a51", "metpat64" },
    { 16640, "a51", "pavegrey128" },
    { 16640, "a51", "plaintarmac1" },
    { 16640, "a51", "redmetal" },
    { 16640, "a51", "scratchedmetal" },
    { 16640, "a51", "sl_metalwalk" },
    { 16640, "a51", "sm_conc_hatch" },
    { 16640, "a51", "stormdrain7" },
    { 16640, "a51", "sw_olddrum1" },
    { 16640, "a51", "vent01_64" },
    { 16640, "a51", "ventb128" },
    { 16640, "a51", "ventb64" },
    { 16640, "a51", "vgs_shopwall01_128" },
    { 16640, "a51", "wallgreyred128" },
    { 16640, "a51", "ws_carparkwall2" },
    { 16640, "a51", "ws_castironwalk" },
    { 16640, "a51", "ws_metalpanel1" },
    { 16640, "a51", "ws_stationfloor" },
    { 3095, "a51jdrx", "sam_camo" },
    { 16646, "a51_alpha", "a51_sign1" },
    { 16646, "a51_alpha", "des_rails1" },
    { 16646, "a51_alpha", "stanwind_nt" },
    { 16646, "a51_alpha", "waterdirty256" },
    { 16646, "a51_alpha", "ws_stationgirder1" },
    { 2917, "a51_crane", "banding5_64HV" },
    { 2917, "a51_crane", "dish_base1" },
    { 2917, "a51_crane", "dish_base2" },
    { 2917, "a51_crane", "girder2_grey_64HV" },
    { 2917, "a51_crane", "quarry_conv_belt_struct" },
    { 16644, "a51_detailstuff", "a51_map" },
    { 16644, "a51_detailstuff", "a51_radardisp" },
    { 16644, "a51_detailstuff", "a51_radarscan_m" },
    { 16644, "a51_detailstuff", "a51_secdesk" },
    { 16644, "a51_detailstuff", "aluminiumbands256" },
    { 16644, "a51_detailstuff", "Gen_Keyboard" },
    { 16644, "a51_detailstuff", "Gen_Monitor" },
    { 16644, "a51_detailstuff", "roucghstonebrtb" },
    { 16644, "a51_detailstuff", "steel256128" },
    { 16093, "a51_ext", "a51_fencsign" },
    { 16093, "a51_ext", "alleydoor2" },
    { 16093, "a51_ext", "alleydoor9b" },
    { 16093, "a51_ext", "BLOCK" },
    { 16093, "a51_ext", "BLOCK2" },
    { 16093, "a51_ext", "block2_high" },
    { 16093, "a51_ext", "cabin5" },
    { 16093, "a51_ext", "corugwall_sandy" },
    { 16093, "a51_ext", "des_backdoor1" },
    { 16093, "a51_ext", "des_dirt1" },
    { 16093, "a51_ext", "des_dirttrack1" },
    { 16093, "a51_ext", "des_dirttrack1r" },
    { 16093, "a51_ext", "des_elepylon" },
    { 16093, "a51_ext", "stormdrain2_nt" },
    { 16093, "a51_ext", "Tar_1line256HV" },
    { 16093, "a51_ext", "wilswin01_la" },
    { 16093, "a51_ext", "ws_controltowerwin1" },
    { 16093, "a51_ext", "ws_corr_2_plain" },
    { 16093, "a51_ext", "ws_trans_concr" },
    { 16093, "a51_ext", "ws_whitewall2_bottom" },
    { 16093, "a51_ext", "ws_whitewall2_top" },
    { 2951, "a51_labdoor", "washapartwall1_256" },
    { 16639, "a51_labs", "a51_labwall1" },
    { 16639, "a51_labs", "dam_terazzo" },
    { 16639, "a51_labs", "studiowall4_law" },
    { 16639, "a51_labs", "ws_trainstationwin1" },
    { 2887, "a51_spotlight", "dts_spotlight" },
    { 2887, "a51_spotlight", "stormdrain5_nt" },
    { 16322, "a51_stores", "dam_gencrane" },
    { 16322, "a51_stores", "des_ghotwood1" },
    { 16322, "a51_stores", "dish_panel_a" },
    { 16322, "a51_stores", "dish_roundbit_a" },
    { 16322, "a51_stores", "fence_64" },
    { 16322, "a51_stores", "Gen_Freight" },
    { 16322, "a51_stores", "hangingwires1" },
    { 16322, "a51_stores", "metalic128" },
    { 16322, "a51_stores", "metpat64chev_128" },
    { 16322, "a51_stores", "steel64" },
    { 16322, "a51_stores", "wtmetal3" },
    { 16293, "a51_undergrnd", "Was_scrpyd_door_in_hngr" },
    { 2567, "ab", "ab_metaledge" },
    { 2567, "ab", "ab_metalholes" },
    { 2567, "ab", "ab_plasicwrapa" },
    { 2567, "ab", "Box_Texturepage" },
    { 2567, "ab", "chipboard_256" },
    { 14615, "abatoir_daylite", "ab_volumelight" },
    { 2589, "ab_ab", "ab_carcass" },
    { 2589, "ab_ab", "ab_sheetSteel" },
    { 14612, "ab_abattoir_box", "ab_airconunit" },
    { 14612, "ab_abattoir_box", "ab_bloodfloor" },
    { 14612, "ab_abattoir_box", "ab_boxStack2" },
    { 14612, "ab_abattoir_box", "ab_walldamage" },
    { 14612, "ab_abattoir_box", "pipes_csite_256" },
    { 14584, "ab_abbatoir01", "ab_ceiling1" },
    { 14584, "ab_abbatoir01", "ab_concFloor" },
    { 14584, "ab_abbatoir01", "ab_drainage" },
    { 14584, "ab_abbatoir01", "ab_tiles" },
    { 14584, "ab_abbatoir01", "ab_tileWall" },
    { 14584, "ab_abbatoir01", "ab_vent1" },
    { 14584, "ab_abbatoir01", "ab_wall1b" },
    { 14584, "ab_abbatoir01", "carpet5kb" },
    { 14584, "ab_abbatoir01", "cj_sheetmetal" },
    { 14584, "ab_abbatoir01", "striplight1" },
    { 11150, "ab_acc_control", "ab_BoltPanel2" },
    { 11150, "ab_acc_control", "ab_dialsSwitches" },
    { 11150, "ab_acc_control", "ws_shipmetal5" },
    { 14628, "ab_caligulasfront", "sign_Caligulas2" },
    { 14548, "ab_cargo_int", "747_cage" },
    { 14548, "ab_cargo_int", "747_freight1" },
    { 14548, "ab_cargo_int", "ab_planeBoby" },
    { 14548, "ab_cargo_int", "ab_planeWing" },
    { 14548, "ab_cargo_int", "Alumplat64" },
    { 14548, "ab_cargo_int", "cargo_ceil2" },
    { 14548, "ab_cargo_int", "cargo_floor1" },
    { 14548, "ab_cargo_int", "cargo_floor2" },
    { 14548, "ab_cargo_int", "cargo_gir1" },
    { 14548, "ab_cargo_int", "cargo_gir2" },
    { 14548, "ab_cargo_int", "cargo_gir3" },
    { 14548, "ab_cargo_int", "cargo_pipes" },
    { 14548, "ab_cargo_int", "cargo_top1" },
    { 14548, "ab_cargo_int", "cargo_wall2" },
    { 14548, "ab_cargo_int", "metal_frame" },
    { 14548, "ab_cargo_int", "yellowmetal" },
    { 14629, "ab_chande", "ab_frostLiteGlass" },
    { 14629, "ab_chande", "ab_gemBead" },
    { 14629, "ab_chande", "ab_goldpipe" },
    { 2755, "ab_dojowall", "ab_trellis" },
    { 2755, "ab_dojowall", "mp_apt1_roomfloor" },
    { 1564, "ab_jetlite", "bathwin01_int" },
    { 1564, "ab_jetlite", "CJ_BULLETBRASS" },
    { 1562, "ab_jetseat", "mp_jet_seat" },
    { 14583, "ab_mafcaslaund", "crate_side" },
    { 14583, "ab_mafcaslaund", "hospital_trolley" },
    { 14581, "ab_mafiasuitea", "ab_blind" },
    { 14581, "ab_mafiasuitea", "ab_books" },
    { 14581, "ab_mafiasuitea", "ab_CeilRose" },
    { 14581, "ab_mafiasuitea", "ab_picFrame" },
    { 14581, "ab_mafiasuitea", "ab_pic_bridge" },
    { 14581, "ab_mafiasuitea", "ab_walnut" },
    { 14581, "ab_mafiasuitea", "ab_walnutLite" },
    { 14581, "ab_mafiasuitea", "ab_wood01" },
    { 14581, "ab_mafiasuitea", "barbersmir1" },
    { 14581, "ab_mafiasuitea", "carp01S" },
    { 14581, "ab_mafiasuitea", "ceilingLite" },
    { 14581, "ab_mafiasuitea", "cof_wood2" },
    { 14581, "ab_mafiasuitea", "goldDecal" },
    { 14581, "ab_mafiasuitea", "goldPillar" },
    { 14581, "ab_mafiasuitea", "kit_door1" },
    { 14581, "ab_mafiasuitea", "mp_burn_ceiling" },
    { 14581, "ab_mafiasuitea", "wallpapkb2" },
    { 14581, "ab_mafiasuitea", "walp45S" },
    { 14581, "ab_mafiasuitea", "wood02S" },
    { 14627, "ab_optilite", "ab_optilite" },
    { 2591, "ab_partition1", "ab_fabricCheck2" },
    { 14616, "ab_pillartemp", "ab_Pillar" },
    { 14616, "ab_pillartemp", "ab_PillarTop" },
    { 18062, "ab_sfammuitems01", "ammo_gunboard" },
    { 18062, "ab_sfammuitems01", "ammu_ammo" },
    { 18062, "ab_sfammuitems01", "ammu_clothes" },
    { 18062, "ab_sfammuitems01", "ammu_gunboard2" },
    { 18062, "ab_sfammuitems01", "ammu_gunboard3" },
    { 18062, "ab_sfammuitems01", "ammu_gunboard4" },
    { 18062, "ab_sfammuitems01", "gun_guns3a" },
    { 18062, "ab_sfammuitems01", "gun_guns4a" },
    { 18063, "ab_sfammuitems02", "1_to_8" },
    { 18063, "ab_sfammuitems02", "gun_sign_txta" },
    { 18063, "ab_sfammuitems02", "gun_xtra1" },
    { 18063, "ab_sfammuitems02", "gun_xtra2" },
    { 18065, "ab_sfammumain", "ab_stripped_floor" },
    { 18065, "ab_sfammumain", "ab_wallpaper02" },
    { 18065, "ab_sfammumain", "breezewall" },
    { 18065, "ab_sfammumain", "breezewall5" },
    { 18065, "ab_sfammumain", "carp20S" },
    { 18065, "ab_sfammumain", "gun_ceiling1" },
    { 18065, "ab_sfammumain", "gun_door1" },
    { 18065, "ab_sfammumain", "gun_floor1" },
    { 18065, "ab_sfammumain", "gun_floor2" },
    { 18065, "ab_sfammumain", "mp_gun_wall" },
    { 18065, "ab_sfammumain", "pavea256" },
    { 18065, "ab_sfammumain", "plate1" },
    { 18065, "ab_sfammumain", "plywood_gym" },
    { 18065, "ab_sfammumain", "shelf_glas" },
    { 18064, "ab_sfammuunits", "gun_blackbox" },
    { 18064, "ab_sfammuunits", "gun_divider2" },
    { 18064, "ab_sfammuunits", "gun_targeta" },
    { 18064, "ab_sfammuunits", "gun_targetb" },
    { 18064, "ab_sfammuunits", "gun_targetc" },
    { 18064, "ab_sfammuunits", "rubber_mat" },
    { 14786, "ab_sfgymbeams", "gym_floor5" },
    { 14786, "ab_sfgymbeams", "knot_wood128" },
    { 14788, "ab_sfgymbits01", "ab_rollmat01" },
    { 14788, "ab_sfgymbits01", "lockers" },
    { 14787, "ab_sfgymbits02", "ab_gymMark01" },
    { 14787, "ab_sfgymbits02", "ab_rollmat02" },
    { 14787, "ab_sfgymbits02", "sign_cobra1" },
    { 14787, "ab_sfgymbits02", "sign_cobra2" },
    { 14789, "ab_sfgymmain", "ab_panelWall1" },
    { 14789, "ab_sfgymmain", "ab_panelWall2" },
    { 14789, "ab_sfgymmain", "ab_wood02" },
    { 14789, "ab_sfgymmain", "CBchallenge_256" },
    { 14789, "ab_sfgymmain", "gun_ceiling2_128" },
    { 14789, "ab_sfgymmain", "gymwinodow3" },
    { 14789, "ab_sfgymmain", "gym_floor6" },
    { 14652, "ab_trukstpa", "barberswindo" },
    { 14652, "ab_trukstpa", "bbar_door1" },
    { 14652, "ab_trukstpa", "bbar_wall1" },
    { 14652, "ab_trukstpa", "bbar_wall4" },
    { 14652, "ab_trukstpa", "CJ_CORD" },
    { 14652, "ab_trukstpa", "CJ_WOOD1(EDGE)" },
    { 14652, "ab_trukstpa", "CJ_WOOD6" },
    { 14652, "ab_trukstpa", "diner_tbl3" },
    { 14652, "ab_trukstpa", "mp_diner_wood" },
    { 14652, "ab_trukstpa", "wood01" },
    { 14653, "ab_trukstpb", "diner_seat3" },
    { 14653, "ab_trukstpb", "ketchup" },
    { 14653, "ab_trukstpb", "met_supp" },
    { 14653, "ab_trukstpb", "mustard" },
    { 14653, "ab_trukstpb", "napkin_disp" },
    { 14650, "ab_trukstpc", "bbar_till1" },
    { 14650, "ab_trukstpc", "bras_base" },
    { 14650, "ab_trukstpc", "Gen_Sacki" },
    { 14650, "ab_trukstpc", "mp_CJ_WOOD5" },
    { 14650, "ab_trukstpc", "sa_wood08_128" },
    { 14651, "ab_trukstpd", "bbar_poollamp1" },
    { 14651, "ab_trukstpd", "Bow_bar_flooring" },
    { 14651, "ab_trukstpd", "Bow_bar_metal_cabinet" },
    { 14651, "ab_trukstpd", "Bow_bar_pool_table" },
    { 14651, "ab_trukstpd", "Bow_bar_pool_tablebase" },
    { 14651, "ab_trukstpd", "Bow_bar_tabletop_wood" },
    { 14654, "ab_trukstpe", "bbar_plates2" },
    { 14654, "ab_trukstpe", "bbar_signs1" },
    { 14654, "ab_trukstpe", "bbar_sports1" },
    { 14654, "ab_trukstpe", "bbar_stuff1" },
    { 14654, "ab_trukstpe", "bbar_stuff3" },
    { 14654, "ab_trukstpe", "bbar_stuff9" },
    { 2592, "ab_veg", "ab_slotBase" },
    { 2592, "ab_veg", "tubelite" },
    { 14486, "ab_vegasgymbits01", "bbar_wall2" },
    { 14794, "ab_vegasgymmain", "barrel_64HV" },
    { 14794, "ab_vegasgymmain", "bbar_wall3" },
    { 14794, "ab_vegasgymmain", "dt_compound_fanvent" },
    { 14794, "ab_vegasgymmain", "gym_pipes" },
    { 14794, "ab_vegasgymmain", "Gym_rope" },
    { 14794, "ab_vegasgymmain", "mp_CJ_SHEET2" },
    { 14794, "ab_vegasgymmain", "studiowall2_law" },
    { 14534, "ab_wooziea", "ab_fabricRed" },
    { 14534, "ab_wooziea", "ab_redwall" },
    { 14534, "ab_wooziea", "ab_tileDiamond" },
    { 14534, "ab_wooziea", "ab_wuzibet" },
    { 14534, "ab_wooziea", "ab_wuziMirror" },
    { 14534, "ab_wooziea", "ab_wuziwillow" },
    { 14534, "ab_wooziea", "carp02S" },
    { 14534, "ab_wooziea", "CJ_WOODDOOR5" },
    { 14534, "ab_wooziea", "dt_office_roof" },
    { 14534, "ab_wooziea", "light_full" },
    { 14534, "ab_wooziea", "mcstraps_window" },
    { 14534, "ab_wooziea", "walp72S" },
    { 14544, "ab_woozieb", "ap_screens1" },
    { 14544, "ab_woozieb", "golf_secgates1" },
    { 14544, "ab_woozieb", "otb_mach1" },
    { 14544, "ab_woozieb", "otb_numbers" },
    { 14544, "ab_woozieb", "otb_signs" },
    { 14544, "ab_woozieb", "otb_wind" },
    { 14535, "ab_wooziec", "ab_butfly_sword" },
    { 14535, "ab_wooziec", "ab_wallfan" },
    { 14535, "ab_wooziec", "ab_wallpaper01" },
    { 14535, "ab_wooziec", "ab_woodborder" },
    { 14535, "ab_wooziec", "sink1" },
    { 14535, "ab_wooziec", "wall4" },
    { 14554, "ab_wooziesshad", "shadow_wuzi_blak" },
    { 14538, "ab_xit_box", "sw_door07" },
    { 1569, "adam_v_doort", "ws_guardhousedoor" },
    { 3061, "addoorx", "lasjmdoorgud" },
    { 3080, "adjumpx", "gen_chrome" },
    { 3080, "adjumpx", "jumpit" },
    { 3080, "adjumpx", "jumptop1_64" },
    { 3080, "adjumpx", "planks64" },
    { 3080, "adjumpx", "rustyboltpanel" },
    { 3028, "adswrdx", "gun_katana" },
    { 3076, "ad_rmx", "ammo_tube" },
    { 3076, "ad_rmx", "ws_cargoshipdoor" },
    { 10839, "aircarpkbarier_sfse", "banding8_64HV" },
    { 10839, "aircarpkbarier_sfse", "bareboards_64a" },
    { 10839, "aircarpkbarier_sfse", "chevron_red_64HVa" },
    { 10839, "aircarpkbarier_sfse", "cratetop128" },
    { 10839, "aircarpkbarier_sfse", "glass_64a" },
    { 10839, "aircarpkbarier_sfse", "redband_64Ha" },
    { 915, "airconext", "CJ_plating" },
    { 915, "airconext", "cj_plating2" },
    { 915, "airconext", "cj_plating3" },
    { 915, "airconext", "cj_sheet2" },
    { 10806, "airfence_sfse", "ws_griddyfence" },
    { 10806, "airfence_sfse", "ws_leccyfncesign" },
    { 10806, "airfence_sfse", "ws_leccyfncetop" },
    { 10806, "airfence_sfse", "ws_oldpainted" },
    { 4835, "airoads_las", "aarprt8LAS" },
    { 4835, "airoads_las", "aarprt9LAS" },
    { 4835, "airoads_las", "concretenewb256" },
    { 4835, "airoads_las", "dt_road" },
    { 4835, "airoads_las", "easykerb" },
    { 4835, "airoads_las", "grassdry_128HV" },
    { 4835, "airoads_las", "kbpavement_test" },
    { 4835, "airoads_las", "sjmhoodlawn41" },
    { 4835, "airoads_las", "sjmhoodlawn42" },
    { 4835, "airoads_las", "snpedtest1" },
    { 4835, "airoads_las", "tardor2" },
    { 4835, "airoads_las", "weewall256" },
    { 4835, "airoads_las", "ws_carparkwall1" },
    { 10763, "airport1_sfse", "airportwind03" },
    { 10763, "airport1_sfse", "ws_airportdoors1" },
    { 10763, "airport1_sfse", "ws_lightlens" },
    { 10763, "airport1_sfse", "ws_rollerdoor_fire" },
    { 10763, "airport1_sfse", "ws_yelloscaff" },
    { 10763, "airport1_sfse", "yellowscum64" },
    { 4830, "airport2", "aarprt3LAS" },
    { 4830, "airport2", "aarprt5LAS" },
    { 4830, "airport2", "aarprt6LAS" },
    { 4830, "airport2", "bathtile01_int" },
    { 4830, "airport2", "bevflower2" },
    { 4830, "airport2", "brnstucco1" },
    { 4830, "airport2", "kbplanter_plants1" },
    { 4830, "airport2", "LASLACMA93" },
    { 4830, "airport2", "LASLACMA96" },
    { 4830, "airport2", "sanairtex1" },
    { 4830, "airport2", "sanairtex2" },
    { 4830, "airport2", "sanairtex3" },
    { 4830, "airport2", "sanpedock5" },
    { 4830, "airport2", "scaff2flas" },
    { 4830, "airport2", "sjmpostbar3" },
    { 4830, "airport2", "sm_Agave_2" },
    { 4830, "airport2", "sw_door12" },
    { 4830, "airport2", "sw_shedwall02" },
    { 4830, "airport2", "tardor9" },
    { 4830, "airport2", "ws_officewins_1" },
    { 4828, "airport3_las", "aarprt1LAS" },
    { 4828, "airport3_las", "alax1_las" },
    { 4828, "airport3_las", "alax3_las" },
    { 4828, "airport3_las", "alax5_las" },
    { 4828, "airport3_las", "alax6_las" },
    { 4828, "airport3_las", "brwall_128" },
    { 4828, "airport3_las", "gallery01_law" },
    { 4828, "airport3_las", "gnhotelwall02_128" },
    { 4828, "airport3_las", "mirrwind1_LAn" },
    { 4828, "airport3_las", "sanpedock7" },
    { 4828, "airport3_las", "sanpedock8" },
    { 10811, "airportbits_sfse", "ap_fuel2" },
    { 10811, "airportbits_sfse", "ap_fuel3" },
    { 10811, "airportbits_sfse", "ap_fuel4" },
    { 10811, "airportbits_sfse", "brckwhtwash128" },
    { 10778, "airportcpark_sfse", "elecbox2" },
    { 10778, "airportcpark_sfse", "helipad_bits" },
    { 10778, "airportcpark_sfse", "vgsclubdoor02_128" },
    { 10778, "airportcpark_sfse", "ws_aircarparksign1" },
    { 10778, "airportcpark_sfse", "ws_boothpanel" },
    { 10778, "airportcpark_sfse", "ws_carpark1" },
    { 10778, "airportcpark_sfse", "ws_carpark3" },
    { 10778, "airportcpark_sfse", "ws_crashbarrier" },
    { 10778, "airportcpark_sfse", "ws_crashbarrier2" },
    { 10778, "airportcpark_sfse", "ws_doubledoor1" },
    { 10778, "airportcpark_sfse", "ws_fireexit" },
    { 10778, "airportcpark_sfse", "ws_fluorescent1" },
    { 10778, "airportcpark_sfse", "ws_fluorescent2" },
    { 10778, "airportcpark_sfse", "ws_roadarrow1" },
    { 4992, "airportdetail", "aarprt91LAS" },
    { 4992, "airportdetail", "aarprt92LAS" },
    { 4992, "airportdetail", "aarprt93LAS" },
    { 4992, "airportdetail", "ads003 copy" },
    { 4992, "airportdetail", "bevflower1" },
    { 4992, "airportdetail", "diderSachs01" },
    { 4992, "airportdetail", "hedge2" },
    { 4992, "airportdetail", "kb_ivy_256" },
    { 4992, "airportdetail", "prolaps01" },
    { 4992, "airportdetail", "sm_Agave_1" },
    { 10765, "airportgnd_sfse", "ap_metal1" },
    { 10765, "airportgnd_sfse", "ap_runwaysigns" },
    { 10765, "airportgnd_sfse", "ap_runwaysigns2" },
    { 10765, "airportgnd_sfse", "black64" },
    { 10765, "airportgnd_sfse", "bobo_3" },
    { 10765, "airportgnd_sfse", "coasty_bit3_sfe" },
    { 10765, "airportgnd_sfse", "crackedgroundb" },
    { 10765, "airportgnd_sfse", "desgreengrass" },
    { 10765, "airportgnd_sfse", "gridchev_64HV" },
    { 10765, "airportgnd_sfse", "sea_wall_temp" },
    { 10765, "airportgnd_sfse", "sf_pave2" },
    { 10765, "airportgnd_sfse", "white" },
    { 10765, "airportgnd_sfse", "ws_airpt_concrete" },
    { 10765, "airportgnd_sfse", "ws_bridgepavement2" },
    { 10765, "airportgnd_sfse", "ws_oldpainted2rusty" },
    { 10765, "airportgnd_sfse", "ws_runwaytarmac" },
    { 10765, "airportgnd_sfse", "ws_skidmarks" },
    { 10765, "airportgnd_sfse", "ws_whiteplaster_btm" },
    { 10765, "airportgnd_sfse", "ws_whiteplaster_top" },
    { 10765, "airportgnd_sfse", "ws_whitestripe" },
    { 10765, "airportgnd_sfse", "ws_yellowline" },
    { 3440, "airportpillar", "carfx1" },
    { 3440, "airportpillar", "metalic_64" },
    { 10755, "airportrminl_sfse", "bumptile" },
    { 10755, "airportrminl_sfse", "mirrwind4_LAn" },
    { 10755, "airportrminl_sfse", "ws_airportconc1" },
    { 10755, "airportrminl_sfse", "ws_airportwall1" },
    { 10755, "airportrminl_sfse", "ws_airportwall2" },
    { 10755, "airportrminl_sfse", "ws_airportwin2" },
    { 10755, "airportrminl_sfse", "ws_airportwin3" },
    { 10755, "airportrminl_sfse", "ws_dom_departures" },
    { 10755, "airportrminl_sfse", "ws_rotten_concrete1" },
    { 10756, "airportroads_sfse", "dt_road_stoplinea" },
    { 10756, "airportroads_sfse", "Heliconcrete" },
    { 10756, "airportroads_sfse", "sf_junction5" },
    { 10756, "airportroads_sfse", "sf_pave6" },
    { 10756, "airportroads_sfse", "sf_road5" },
    { 10756, "airportroads_sfse", "stones256128" },
    { 10756, "airportroads_sfse", "ws_airbigsign2" },
    { 10756, "airportroads_sfse", "ws_white_wall1" },
    { 4829, "airport_las", "Bow_Loadingbay_Door" },
    { 4829, "airport_las", "Bow_Warehousewall" },
    { 4829, "airport_las", "fancy_slab128" },
    { 4829, "airport_las", "fencekb_64h" },
    { 4829, "airport_las", "Grass_128HV" },
    { 4829, "airport_las", "LASLACMA6" },
    { 4829, "airport_las", "liftdoorsac256" },
    { 4829, "airport_las", "sjmlahus28" },
    { 4829, "airport_las", "yellow" },
    { 10762, "airport_sfse", "ivy4new" },
    { 4833, "airprtrunway_las", "asandockw" },
    { 4833, "airprtrunway_las", "bobo_2" },
    { 4833, "airprtrunway_las", "cos_hiwaymid_256" },
    { 4833, "airprtrunway_las", "desbarlas" },
    { 4833, "airprtrunway_las", "dockwall1" },
    { 4833, "airprtrunway_las", "Gen_Meshfencing" },
    { 4833, "airprtrunway_las", "greyground256" },
    { 4833, "airprtrunway_las", "homies_1" },
    { 4833, "airprtrunway_las", "lasjmfence1" },
    { 4833, "airprtrunway_las", "Mannblok2_LAn" },
    { 4833, "airprtrunway_las", "policeha02black_128" },
    { 4833, "airprtrunway_las", "tuntest1las" },
    { 4833, "airprtrunway_las", "ws_bluelino" },
    { 2772, "airp_prop", "cj_AIRP_DIRECT" },
    { 2772, "airp_prop", "CJ_AIRP_S_1" },
    { 2772, "airp_prop", "CJ_AIRP_S_2" },
    { 2772, "airp_prop", "CJ_AIR_1" },
    { 2772, "airp_prop", "CJ_BANDEDMETAL" },
    { 2772, "airp_prop", "cj_chromepipe" },
    { 2772, "airp_prop", "CJ_GALVANISED" },
    { 2772, "airp_prop", "CJ_red_COUNTER" },
    { 2772, "airp_prop", "cj_TILL2" },
    { 10837, "airroadsigns_sfse", "CJ_LAMPPOST1" },
    { 10837, "airroadsigns_sfse", "ws_airbigsign1" },
    { 10838, "airwelcomesign_sfse", "bbback" },
    { 10838, "airwelcomesign_sfse", "sl_rustyrailing" },
    { 10838, "airwelcomesign_sfse", "ws_airwelcome1" },
    { 1613, "alleyprop", "hoteldetails2" },
    { 1613, "alleyprop", "stuffdirtcol" },
    { 12821, "alleystuff", "cratec" },
    { 12821, "alleystuff", "Crate_B" },
    { 12821, "alleystuff", "Gen_Crate" },
    { 12821, "alleystuff", "planks01" },
    { 12821, "alleystuff", "sjmstair" },
    { 10370, "alleys_sfs", "ws_alley_conc3" },
    { 10370, "alleys_sfs", "ws_asphalt" },
    { 10370, "alleys_sfs", "ws_sandstone1" },
    { 3066, "ammotrx", "ammotrn92crate64" },
    { 3066, "ammotrx", "ammotrn92tarp128" },
    { 2619, "ammounique", "mp_gun_man1" },
    { 18050, "ammu_2flrprops", "ammu_boots3" },
    { 18050, "ammu_2flrprops", "ammu_hats" },
    { 18050, "ammu_2flrprops", "chipboard_256128" },
    { 18050, "ammu_2flrprops", "dt_ammu_flr1" },
    { 18050, "ammu_2flrprops", "gun_target1" },
    { 18050, "ammu_2flrprops", "gun_target2" },
    { 18050, "ammu_2flrprops", "gun_target3" },
    { 18050, "ammu_2flrprops", "gun_xtra4" },
    { 4552, "ammu_lan2", "corporate1" },
    { 4552, "ammu_lan2", "dior" },
    { 4552, "ammu_lan2", "foodmartla1" },
    { 4552, "ammu_lan2", "gun_python" },
    { 4552, "ammu_lan2", "mallextmid01" },
    { 4552, "ammu_lan2", "newall4-4" },
    { 4552, "ammu_lan2", "sf_chinashop2" },
    { 4552, "ammu_lan2", "sl_dtbuild02win1" },
    { 4552, "ammu_lan2", "sl_dtrufrear2wall1" },
    { 4552, "ammu_lan2", "sl_dtrufrear2win1" },
    { 4552, "ammu_lan2", "sl_dtrufrear2win2" },
    { 4552, "ammu_lan2", "sl_dtrufrear2win3" },
    { 4552, "ammu_lan2", "sl_fudstore1" },
    { 4552, "ammu_lan2", "sl_fudstore2" },
    { 4552, "ammu_lan2", "sl_lavicdtwall1" },
    { 4552, "ammu_lan2", "sunsetammu1" },
    { 4552, "ammu_lan2", "sunsetammu2" },
    { 4552, "ammu_lan2", "sunsetammu4" },
    { 18049, "ammu_twofloor", "CJ_BACK_BOARD" },
    { 18049, "ammu_twofloor", "concretebig4256128" },
    { 18049, "ammu_twofloor", "gun_bacboard" },
    { 18049, "ammu_twofloor", "gun_ceiling2" },
    { 18049, "ammu_twofloor", "gun_windo" },
    { 18049, "ammu_twofloor", "mp_gun_stairs" },
    { 9920, "anotherbuildsfe", "grassgrn256" },
    { 9920, "anotherbuildsfe", "gz_vic1a" },
    { 9920, "anotherbuildsfe", "gz_vic1b" },
    { 9920, "anotherbuildsfe", "gz_vic1c" },
    { 9920, "anotherbuildsfe", "gz_vic1d" },
    { 9920, "anotherbuildsfe", "gz_vic1e" },
    { 9920, "anotherbuildsfe", "gz_vic2a" },
    { 9920, "anotherbuildsfe", "gz_vic2b" },
    { 9920, "anotherbuildsfe", "gz_vic2c" },
    { 9920, "anotherbuildsfe", "gz_vic2d" },
    { 5631, "apartmentalpha", "aptsign01_LA" },
    { 5631, "apartmentalpha", "gymshop1_LAe" },
    { 5631, "apartmentalpha", "ws_railing1" },
    { 3881, "apsecurity_sfxrf", "chromepipe2_64HV" },
    { 3881, "apsecurity_sfxrf", "CJ_WOOD1" },
    { 3881, "apsecurity_sfxrf", "leather_seat_256" },
    { 3881, "apsecurity_sfxrf", "lostonclad1" },
    { 3881, "apsecurity_sfxrf", "WIN_DESKTOP" },
    { 3881, "apsecurity_sfxrf", "ws_altz_wall10" },
    { 3881, "apsecurity_sfxrf", "ws_rooftarmac2" },
    { 10810, "ap_build4e", "airportdanger" },
    { 10810, "ap_build4e", "redpylon" },
    { 10810, "ap_build4e", "redwhite_stripe" },
    { 10810, "ap_build4e", "roof09L256" },
    { 1683, "ap_jumbos", "airblock1" },
    { 1683, "ap_jumbos", "airblock2" },
    { 1683, "ap_jumbos", "airblock3" },
    { 1683, "ap_jumbos", "blackshadow4" },
    { 1681, "ap_learjets", "ap_learjet" },
    { 1682, "ap_misc1bit", "ap_radar" },
    { 9575, "archbrij", "conc_wall_stripd2128h" },
    { 3715, "archlax", "arch_sign" },
    { 3715, "archlax", "ws_greymetal" },
    { 10041, "archybuild10", "bank_sfe2" },
    { 10041, "archybuild10", "bank_sfe5" },
    { 10041, "archybuild10", "copshop2" },
    { 10041, "archybuild10", "copshop3" },
    { 10041, "archybuild10", "copshop5" },
    { 10041, "archybuild10", "copshop6" },
    { 10041, "archybuild10", "hotel_bit2" },
    { 10041, "archybuild10", "rooftop_gz3" },
    { 10041, "archybuild10", "sfe_bigbuild2" },
    { 10041, "archybuild10", "sfe_pinkbuild1" },
    { 10041, "archybuild10", "sfe_pinkbuild2" },
    { 10041, "archybuild10", "sf_shop2" },
    { 10041, "archybuild10", "sf_windos_15" },
    { 10041, "archybuild10", "sf_windos_15b" },
    { 10041, "archybuild10", "sf_windos_7" },
    { 10041, "archybuild10", "sf_windos_8" },
    { 10041, "archybuild10", "sf_windos_9" },
    { 10041, "archybuild10", "stonesteps1" },
    { 10041, "archybuild10", "Upt_Conc floorClean" },
    { 10041, "archybuild10", "vgnburgwal4_128" },
    { 10041, "archybuild10", "vgnburgwal5_256" },
    { 10041, "archybuild10", "whitedecosfe1" },
    { 10041, "archybuild10", "whitedecosfe2" },
    { 10041, "archybuild10", "whitedecosfe3" },
    { 10041, "archybuild10", "whitedecosfe4" },
    { 3017, "arch_plx", "arch_plans" },
    { 3629, "arprtxxref_las", "aarprt4LAS" },
    { 3629, "arprtxxref_las", "airsetest1_LAS" },
    { 3629, "arprtxxref_las", "airstoof1_LAS" },
    { 3629, "arprtxxref_las", "chevron64HVa" },
    { 3629, "arprtxxref_las", "corrRoof_64HV" },
    { 3629, "arprtxxref_las", "dirtywhite" },
    { 3629, "arprtxxref_las", "dustytar_64HV" },
    { 3629, "arprtxxref_las", "grn_window2_16" },
    { 3629, "arprtxxref_las", "lastrk6" },
    { 3629, "arprtxxref_las", "metaldoor_128" },
    { 3629, "arprtxxref_las", "planetunnel_64HV" },
    { 3629, "arprtxxref_las", "rustybolts" },
    { 3629, "arprtxxref_las", "shuttersb" },
    { 3629, "arprtxxref_las", "wheel02_64" },
    { 3629, "arprtxxref_las", "ws_corrugated1" },
    { 3629, "arprtxxref_las", "ws_corrugated2" },
    { 3629, "arprtxxref_las", "ws_corrugateddoor1" },
    { 2990, "arsex", "blackdirt" },
    { 2990, "arsex", "nopark128" },
    { 2990, "arsex", "steel128" },
    { 10426, "backroad_sfs", "Bow_church_dirt" },
    { 10426, "backroad_sfs", "retainwall1" },
    { 701, "badlands", "newtreeleaves128" },
    { 701, "badlands", "sm_des_bush1" },
    { 10850, "bakerybit2_sfse", "frate64_blue" },
    { 10850, "bakerybit2_sfse", "frate64_red" },
    { 10850, "bakerybit2_sfse", "frate64_yellow" },
    { 10850, "bakerybit2_sfse", "frate_doors128red" },
    { 10850, "bakerybit2_sfse", "frate_doors64" },
    { 10850, "bakerybit2_sfse", "frate_doors64yellow" },
    { 10850, "bakerybit2_sfse", "GB_truckdepot29" },
    { 10850, "bakerybit2_sfse", "ws_altz_wall5" },
    { 10856, "bakerybit_sfse", "windoresidential256" },
    { 10856, "bakerybit_sfse", "ws_altz_wall7" },
    { 10856, "bakerybit_sfse", "ws_dickgoblinmural" },
    { 10856, "bakerybit_sfse", "ws_doubledoor4" },
    { 10856, "bakerybit_sfse", "ws_oldwarehouse10a" },
    { 10856, "bakerybit_sfse", "ws_oldwarehouse10c" },
    { 10856, "bakerybit_sfse", "ws_oldwarehouse10d" },
    { 10891, "bakery_sfse", "cabin6" },
    { 10891, "bakery_sfse", "ws_altz_wall4" },
    { 10891, "bakery_sfse", "ws_altz_wall5_door" },
    { 10891, "bakery_sfse", "ws_dflourmural" },
    { 10891, "bakery_sfse", "ws_RShaul_dirt" },
    { 3437, "ballypillar01", "ballywall01_64" },
    { 8391, "ballys01", "ballydoor01_128" },
    { 8391, "ballys01", "ballyledge01_128" },
    { 8391, "ballys01", "ballywall02_128" },
    { 8391, "ballys01", "ballywindw01_128" },
    { 8391, "ballys01", "ballywindw02_128" },
    { 8391, "ballys01", "casinolightsblu_128" },
    { 8391, "ballys01", "CJ_blackplastic" },
    { 8391, "ballys01", "greyground256128" },
    { 8391, "ballys01", "vgncorpdoor1_512" },
    { 8391, "ballys01", "ws_floortiles4" },
    { 8486, "ballys02", "Grass_concpath_128HV" },
    { 8486, "ballys02", "walltiles_128" },
    { 8394, "ballysign01", "HighRoller01_256" },
    { 8394, "ballysign01", "hortonsnug2_256" },
    { 8394, "ballysign01", "vgnmetaltopwal1_256" },
    { 8394, "ballysign01", "vgnpawnlng_256" },
    { 8394, "ballysign01", "ws_airpassage" },
    { 8487, "ballyswater", "waterclear256" },
    { 1252, "barrelexpos", "atm" },
    { 1949, "barrier", "barrier_stripe" },
    { 1949, "barrier", "pierlegs" },
    { 1949, "barrier", "plainboards64HV" },
    { 4510, "barrierblk", "warnsigns1" },
    { 4510, "barrierblk", "warnsigns2" },
    { 4510, "barrierblk", "yellow_64" },
    { 1282, "barrierm", "orangebarrier2" },
    { 5397, "barrio1_lae", "cargo7_128" },
    { 5397, "barrio1_lae", "carwash_256" },
    { 5397, "barrio1_lae", "closedblank1_256" },
    { 5397, "barrio1_lae", "concretenewgery256" },
    { 5397, "barrio1_lae", "corporate3green_128" },
    { 5397, "barrio1_lae", "crossing_law" },
    { 5397, "barrio1_lae", "dirtgaz64b" },
    { 5397, "barrio1_lae", "gassign1_256" },
    { 5397, "barrio1_lae", "roof06L256" },
    { 5397, "barrio1_lae", "rufwaldock1" },
    { 5397, "barrio1_lae", "sanpedocka1" },
    { 5397, "barrio1_lae", "snpdwargrn1" },
    { 5397, "barrio1_lae", "sw_wind16" },
    { 5397, "barrio1_lae", "telewires_law" },
    { 5397, "barrio1_lae", "wshbrsh1las" },
    { 17508, "barrio1_lae2", "alleywall2" },
    { 17508, "barrio1_lae2", "brickred" },
    { 17508, "barrio1_lae2", "dockpave_256" },
    { 17508, "barrio1_lae2", "gangshop10_LAe" },
    { 17508, "barrio1_lae2", "gangshop11_LAe" },
    { 17508, "barrio1_lae2", "gangshop12_LAe" },
    { 17508, "barrio1_lae2", "gangsign3_LAe" },
    { 17508, "barrio1_lae2", "gangsign4_LAe" },
    { 982, "bar_chainlink", "awirex2" },
    { 982, "bar_chainlink", "sjmshopBK" },
    { 10385, "baseballground_sfs", "Bow_church_dirt_to_grass_side_t" },
    { 10385, "baseballground_sfs", "ws_baseballdirt" },
    { 10385, "baseballground_sfs", "ws_football_lines2" },
    { 3819, "baseball_sfsx", "helipad_mesh_t" },
    { 3819, "baseball_sfsx", "helipad_strutT" },
    { 3819, "baseball_sfsx", "telepole128" },
    { 1946, "bball1", "basketball2" },
    { 7555, "bballcpark1", "backstageceiling1_128" },
    { 7555, "bballcpark1", "curbyell_64H" },
    { 7555, "bballcpark1", "vgncpark1_256" },
    { 7555, "bballcpark1", "vgspshrailing1" },
    { 7555, "bballcpark1", "ws_carparknew1" },
    { 7555, "bballcpark1", "ws_carparknew2" },
    { 7555, "bballcpark1", "ws_carparknew2a" },
    { 3452, "bballvgnint", "bballconcrete1_256" },
    { 3452, "bballvgnint", "bballconcrete2_256" },
    { 3452, "bballvgnint", "bballconcrete3_256" },
    { 3452, "bballvgnint", "bballconcrete4_256" },
    { 3452, "bballvgnint", "bballconcrete5_256" },
    { 3452, "bballvgnint", "Bow_Abattoir_Conc2" },
    { 3452, "bballvgnint", "carparkwall1_256" },
    { 3065, "bballx", "bball_fake_light" },
    { 3128, "bball_hpx", "wire2" },
    { 3096, "bbpcpx", "bluepink64" },
    { 3096, "bbpcpx", "blugrad32" },
    { 2020, "bdcabinets", "sideboard1" },
    { 14805, "bdupsfurn", "Bdup2_Lamp" },
    { 14805, "bdupsfurn", "Bdup2_Ttop1" },
    { 14805, "bdupsfurn", "Bdup2_Ttop2" },
    { 14805, "bdupsfurn", "Bdup_Ashtray" },
    { 14805, "bdupsfurn", "Bdup_Caps" },
    { 14805, "bdupsfurn", "Bdup_Crack" },
    { 14805, "bdupsfurn", "Bdup_CrackPipe" },
    { 14805, "bdupsfurn", "Bdup_Pills" },
    { 14805, "bdupsfurn", "blacksofa01" },
    { 14806, "bdupshifi", "Bdup2_amp" },
    { 14806, "bdupshifi", "Bdup2_CD" },
    { 14806, "bdupshifi", "Bdup2_speakers" },
    { 14806, "bdupshifi", "Bdup2_TV" },
    { 14806, "bdupshifi", "Bdup2_wood" },
    { 5520, "bdupshouse_lae", "awningsides2" },
    { 5520, "bdupshouse_lae", "compdoor2_LAe" },
    { 5520, "bdupshouse_lae", "compdoor4_LAe" },
    { 5520, "bdupshouse_lae", "comptwall23" },
    { 5520, "bdupshouse_lae", "gangwin4_LAe" },
    { 5520, "bdupshouse_lae", "shingles3" },
    { 5520, "bdupshouse_lae", "sw_woodflloor" },
    { 5520, "bdupshouse_lae", "ws_boxhouse_wins3" },
    { 14807, "bdupslight", "Bdup2_Light" },
    { 14803, "bdupsnew", "Bdup2_Artex" },
    { 14803, "bdupsnew", "Bdup2_carpet" },
    { 14803, "bdupsnew", "Bdup2_mask" },
    { 14803, "bdupsnew", "Bdup2_plant" },
    { 14803, "bdupsnew", "Bdup2_plantPot" },
    { 14803, "bdupsnew", "Bdup2_plantStalk" },
    { 14803, "bdupsnew", "Bdup2_poster" },
    { 14803, "bdupsnew", "Bdup2_Rug" },
    { 14803, "bdupsnew", "Bdup2_wallpaper" },
    { 14803, "bdupsnew", "Bdup2_wallpaperB" },
    { 14803, "bdupsnew", "Bdup2_wallpaperC" },
    { 3032, "bdwinx", "ct_canopy" },
    { 3032, "bdwinx", "gangwin3_LAe" },
    { 3653, "beachapts_lax", "Bow_dryclean_wall_upr" },
    { 3653, "beachapts_lax", "comptcowind1" },
    { 3653, "beachapts_lax", "eastwall3_LAe2" },
    { 3653, "beachapts_lax", "eastwall4_LAe2" },
    { 3653, "beachapts_lax", "eastwin07_LAe2" },
    { 3653, "beachapts_lax", "Grass_dry_64HV" },
    { 3653, "beachapts_lax", "Ind_Roadskank" },
    { 3653, "beachapts_lax", "sjmscorclawn" },
    { 3653, "beachapts_lax", "stormdrain6" },
    { 1598, "beachball", "beachball" },
    { 9549, "beachbx_sfw", "boxybox_sf1" },
    { 9549, "beachbx_sfw", "boxybox_sf1b" },
    { 9549, "beachbx_sfw", "boxybox_sf2" },
    { 9549, "beachbx_sfw", "boxybox_sf2b" },
    { 9549, "beachbx_sfw", "boxybox_sf2c" },
    { 9549, "beachbx_sfw", "boxybox_sf3" },
    { 9549, "beachbx_sfw", "boxybox_sf3b" },
    { 9549, "beachbx_sfw", "boxybox_sf4" },
    { 9549, "beachbx_sfw", "boxybox_sf4b" },
    { 9549, "beachbx_sfw", "boxybox_sf5" },
    { 9549, "beachbx_sfw", "boxybox_sf5b" },
    { 9549, "beachbx_sfw", "boxybox_sf6" },
    { 9549, "beachbx_sfw", "boxybox_sf6b" },
    { 9549, "beachbx_sfw", "cst_rock_coast_sfw" },
    { 9549, "beachbx_sfw", "NEWrockgrass_sfw" },
    { 9549, "beachbx_sfw", "SF_garden3" },
    { 3615, "beachhut", "asanmonbhut1" },
    { 3615, "beachhut", "asanmonbhut2" },
    { 3615, "beachhut", "sw_flatroof01" },
    { 3615, "beachhut", "ws_decking1" },
    { 17953, "beach_lae2", "block2_low" },
    { 4811, "beach_las", "grifnewtex1x_LAS" },
    { 4811, "beach_las", "grifnewtex2x_LAS" },
    { 4811, "beach_las", "lasclifface" },
    { 4811, "beach_las", "sandnew_law" },
    { 4811, "beach_las", "sandstonemixb" },
    { 4811, "beach_las", "sm_Agave_bloom" },
    { 4811, "beach_las", "sm_minipalm1" },
    { 5114, "beach_las2", "boardwalk_la" },
    { 5114, "beach_las2", "Bow_meshfence" },
    { 5114, "beach_las2", "ganggraf04_LA" },
    { 5114, "beach_las2", "luxorwall02_128sandblend" },
    { 5114, "beach_las2", "sw_sand" },
    { 10351, "beach_sfs", "rocktb128" },
    { 10351, "beach_sfs", "ws_drysand" },
    { 10351, "beach_sfs", "ws_drysand2grass" },
    { 10351, "beach_sfs", "ws_wetdryblendsand" },
    { 10351, "beach_sfs", "ws_wetsand" },
    { 6312, "beacliff_law2", "concretebigblu4256128" },
    { 6312, "beacliff_law2", "grasstype3" },
    { 6312, "beacliff_law2", "redcliffroof_LA" },
    { 6312, "beacliff_law2", "redclifftop256" },
    { 6312, "beacliff_law2", "sm_rock2_desert" },
    { 6404, "beafron1_law2", "beachsig01_LAw2" },
    { 6404, "beafron1_law2", "blueshade2_64" },
    { 6404, "beafron1_law2", "cafe01_law" },
    { 6404, "beafron1_law2", "compfence7_LAe" },
    { 6404, "beafron1_law2", "comptwall30" },
    { 6404, "beafron1_law2", "comptwall31" },
    { 6404, "beafron1_law2", "comptwall37" },
    { 6404, "beafron1_law2", "Gen_Scaffold_Wood_Under" },
    { 6404, "beafron1_law2", "icecream_law" },
    { 6404, "beafron1_law2", "melroran3_law" },
    { 6404, "beafron1_law2", "pierbild01_law" },
    { 6404, "beafron1_law2", "pierroof01_law" },
    { 6404, "beafron1_law2", "pierwin03_law" },
    { 6404, "beafron1_law2", "rippost01_LA" },
    { 6404, "beafron1_law2", "shingledblue_la" },
    { 6404, "beafron1_law2", "shutter02LA" },
    { 6404, "beafron1_law2", "shutter04LA" },
    { 6404, "beafron1_law2", "vencounter01_law" },
    { 6404, "beafron1_law2", "venshops02_law" },
    { 6404, "beafron1_law2", "woodroof01_128" },
    { 6282, "beafron2_law2", "asanwall2" },
    { 6282, "beafron2_law2", "bchhouse_law" },
    { 6282, "beafron2_law2", "boardwalk2_la" },
    { 6282, "beafron2_law2", "bobo_LAw" },
    { 6282, "beafron2_law2", "comptwall33" },
    { 6282, "beafron2_law2", "concretebigb256128" },
    { 6282, "beafron2_law2", "concretenewb256128" },
    { 6282, "beafron2_law2", "decoacwallbtmb21_256" },
    { 6282, "beafron2_law2", "des_bunting" },
    { 6282, "beafron2_law2", "downtshop7_LAn" },
    { 6282, "beafron2_law2", "downtsign3_LA" },
    { 6282, "beafron2_law2", "downtwin27" },
    { 6282, "beafron2_law2", "downtwin28" },
    { 6282, "beafron2_law2", "eastwin01_LAe2" },
    { 6282, "beafron2_law2", "eastwin08_LAe2" },
    { 6282, "beafron2_law2", "eris_3" },
    { 6282, "beafron2_law2", "examwall2_LAe" },
    { 6282, "beafron2_law2", "fire_esc_fence" },
    { 6282, "beafron2_law2", "giftsign01_law" },
    { 6282, "beafron2_law2", "heat_03" },
    { 6282, "beafron2_law2", "hollysign02_LAw" },
    { 6282, "beafron2_law2", "homies_2" },
    { 6282, "beafron2_law2", "LoadingDoorClean" },
    { 6282, "beafron2_law2", "melrshop04_LAwN" },
    { 6282, "beafron2_law2", "sanpiz1" },
    { 6282, "beafron2_law2", "scumshop01_LAe" },
    { 6282, "beafron2_law2", "shutter03LA" },
    { 6282, "beafron2_law2", "sjmcargr" },
    { 6282, "beafron2_law2", "smoothie" },
    { 6282, "beafron2_law2", "snpdwingrat1" },
    { 6282, "beafron2_law2", "snpedshptst1a" },
    { 6282, "beafron2_law2", "snpedshptst1c" },
    { 6282, "beafron2_law2", "spraysig1_LAw2" },
    { 6282, "beafron2_law2", "telewireslong" },
    { 6282, "beafron2_law2", "vertsign1_LA" },
    { 6282, "beafron2_law2", "ws_ed_shop11" },
    { 6282, "beafron2_law2", "ws_ed_shop9" },
    { 1281, "benches", "pierdoor02_law" },
    { 1281, "benches", "trafficcone" },
    { 1256, "benchm", "TaxiCo1_64" },
    { 11100, "bendytunnel_sfse", "blackmetal" },
    { 11100, "bendytunnel_sfse", "Bow_sub_wallshine" },
    { 11100, "bendytunnel_sfse", "Bow_sub_walltiles" },
    { 11100, "bendytunnel_sfse", "ws_altz_wall10b" },
    { 13691, "bevcunto2_lahills", "aamanbev96x" },
    { 13691, "bevcunto2_lahills", "adeta" },
    { 13691, "bevcunto2_lahills", "Bow_Abattoir_Floor_Clean" },
    { 13691, "bevcunto2_lahills", "crazypave" },
    { 13691, "bevcunto2_lahills", "newgrnd1brn_128" },
    { 13691, "bevcunto2_lahills", "stonewall3_la" },
    { 13691, "bevcunto2_lahills", "ws_floortiles2" },
    { 13691, "bevcunto2_lahills", "ws_patio1" },
    { 3603, "bevmans01_la", "aamanbev1x" },
    { 3603, "bevmans01_la", "aamanbev2x" },
    { 3603, "bevmans01_la", "aamanbev3x" },
    { 3603, "bevmans01_la", "aamanbev5x" },
    { 3603, "bevmans01_la", "aamanbev6x" },
    { 3603, "bevmans01_la", "aamanbev7x" },
    { 3603, "bevmans01_la", "aamanbev8x" },
    { 3603, "bevmans01_la", "aamanbev92x" },
    { 3603, "bevmans01_la", "aamanbev93x" },
    { 3603, "bevmans01_la", "aamanbev94x" },
    { 3603, "bevmans01_la", "aamanbev95x" },
    { 3603, "bevmans01_la", "cemebuild03_law" },
    { 3603, "bevmans01_la", "garagedoor4_law" },
    { 3603, "bevmans01_la", "genroof01_128" },
    { 3603, "bevmans01_la", "genroof02_128" },
    { 3603, "bevmans01_la", "hottop5d_law" },
    { 3603, "bevmans01_la", "lasbevcit7" },
    { 3603, "bevmans01_la", "lasjmhus21" },
    { 3603, "bevmans01_la", "pavepat2_128" },
    { 3603, "bevmans01_la", "pierwin01_law" },
    { 3603, "bevmans01_la", "rooftiles1" },
    { 3603, "bevmans01_la", "sjmhoodaad" },
    { 3603, "bevmans01_la", "sjmhoodalldr" },
    { 3603, "bevmans01_la", "sjmhoodlawn9s" },
    { 3603, "bevmans01_la", "sjmlahus21" },
    { 3603, "bevmans01_la", "sjmlahus23" },
    { 3603, "bevmans01_la", "sjmlahus25" },
    { 3603, "bevmans01_la", "sjmlahus26" },
    { 3603, "bevmans01_la", "sjmlahus27" },
    { 3603, "bevmans01_la", "sjmlahus29" },
    { 3603, "bevmans01_la", "wilsdoor_01_la" },
    { 6284, "bev_law2", "beachwalkway" },
    { 6284, "bev_law2", "comptdoor2" },
    { 6284, "bev_law2", "comptwindo2" },
    { 6284, "bev_law2", "concretebigb256" },
    { 6284, "bev_law2", "dirtKB_64HV" },
    { 6284, "bev_law2", "glass_fence_64hv" },
    { 6284, "bev_law2", "lasjmposh1" },
    { 6284, "bev_law2", "lasjmposh2" },
    { 6284, "bev_law2", "lasjmposh3" },
    { 6284, "bev_law2", "lasjmposh4" },
    { 6284, "bev_law2", "lasmalhus92" },
    { 6284, "bev_law2", "letterbox_law" },
    { 6284, "bev_law2", "pierbild04_law" },
    { 6284, "bev_law2", "pierdoor03_law" },
    { 6284, "bev_law2", "pierfence01_law" },
    { 6284, "bev_law2", "pierfence02b_law" },
    { 6284, "bev_law2", "pierfence02_law" },
    { 6284, "bev_law2", "pierhouse01_law" },
    { 6284, "bev_law2", "pierhouse02b_law" },
    { 6284, "bev_law2", "pierhouse02_law" },
    { 6284, "bev_law2", "pierhouse3_law" },
    { 6284, "bev_law2", "pierwall02_law" },
    { 6284, "bev_law2", "pierwall03_law" },
    { 6284, "bev_law2", "pierwin04_law" },
    { 6284, "bev_law2", "pierwin05_law" },
    { 6284, "bev_law2", "pierwin06_law" },
    { 6284, "bev_law2", "pierwin07_law" },
    { 6284, "bev_law2", "pierwin08b_law" },
    { 6284, "bev_law2", "pierwin08_law" },
    { 6284, "bev_law2", "shinglegrey_la" },
    { 6284, "bev_law2", "shopdoor01_law" },
    { 6284, "bev_law2", "sjmlawarwall3" },
    { 6284, "bev_law2", "studwalltop_law" },
    { 6284, "bev_law2", "windbox01_law" },
    { 9515, "bigboxtemp1", "acrooftop1256" },
    { 9515, "bigboxtemp1", "board64_law" },
    { 9515, "bigboxtemp1", "browntin1" },
    { 9515, "bigboxtemp1", "carlot1_sfw" },
    { 9515, "bigboxtemp1", "garagedoor5_law" },
    { 9515, "bigboxtemp1", "int02_128" },
    { 9515, "bigboxtemp1", "lombard_build2_2" },
    { 9515, "bigboxtemp1", "lombard_build2_4" },
    { 9515, "bigboxtemp1", "lombard_build2_5" },
    { 9515, "bigboxtemp1", "lombard_build3_1" },
    { 9515, "bigboxtemp1", "mullcar01_law" },
    { 9515, "bigboxtemp1", "patiodr_law" },
    { 9515, "bigboxtemp1", "poshbox2a" },
    { 9515, "bigboxtemp1", "poshbox2b" },
    { 9515, "bigboxtemp1", "poshbox2c" },
    { 9515, "bigboxtemp1", "poshbox3a" },
    { 9515, "bigboxtemp1", "poshbox3b" },
    { 9515, "bigboxtemp1", "poshbox3c" },
    { 9515, "bigboxtemp1", "poshground_sfw" },
    { 9515, "bigboxtemp1", "redbrickground256" },
    { 9515, "bigboxtemp1", "rooftiles2" },
    { 9515, "bigboxtemp1", "sfn_grass1" },
    { 9515, "bigboxtemp1", "sf_concrete1" },
    { 9515, "bigboxtemp1", "shingles1" },
    { 9515, "bigboxtemp1", "tarmacplain_bank" },
    { 9515, "bigboxtemp1", "ws_airportwin1" },
    { 9515, "bigboxtemp1", "ws_alley5_256_blank" },
    { 9515, "bigboxtemp1", "ws_garagedoor3_white" },
    { 5763, "bigbuildlawn", "bevdoor02_law" },
    { 5763, "bigbuildlawn", "ornatebuildlaw2_1" },
    { 5763, "bigbuildlawn", "ornatebuildlaw2_2" },
    { 5763, "bigbuildlawn", "ornatebuildlaw2_3" },
    { 5763, "bigbuildlawn", "ornatebuildlaw2_4" },
    { 5763, "bigbuildlawn", "roof10L256" },
    { 3816, "bighangarsfxr", "railgird32bit" },
    { 3816, "bighangarsfxr", "ws_breezeblocks" },
    { 3816, "bighangarsfxr", "ws_crossbeam1" },
    { 3816, "bighangarsfxr", "ws_hangardoor" },
    { 10056, "bigoldbuild_sfe", "alleys_sfe" },
    { 10056, "bigoldbuild_sfe", "bank_sfe1" },
    { 10056, "bigoldbuild_sfe", "bank_sfe3" },
    { 10056, "bigoldbuild_sfe", "bigbrown1_sfe" },
    { 10056, "bigoldbuild_sfe", "bigbrown2_sfe" },
    { 10056, "bigoldbuild_sfe", "clubdoor1_256" },
    { 10056, "bigoldbuild_sfe", "cluckbell01_law" },
    { 10056, "bigoldbuild_sfe", "cluckbell02_law" },
    { 10056, "bigoldbuild_sfe", "lanky1_sfe" },
    { 10056, "bigoldbuild_sfe", "lanky2_sfe" },
    { 10056, "bigoldbuild_sfe", "lanky3_sfe" },
    { 10056, "bigoldbuild_sfe", "lanky4_sfe" },
    { 10056, "bigoldbuild_sfe", "roofthing2_sfe" },
    { 10056, "bigoldbuild_sfe", "sfe_arch1" },
    { 10056, "bigoldbuild_sfe", "sfe_bigbuild1" },
    { 10056, "bigoldbuild_sfe", "sfe_nicearch4" },
    { 10056, "bigoldbuild_sfe", "sfe_pinkbuild3" },
    { 10056, "bigoldbuild_sfe", "sf_backaley1" },
    { 10056, "bigoldbuild_sfe", "sf_shop4" },
    { 10056, "bigoldbuild_sfe", "sf_windos_1" },
    { 10056, "bigoldbuild_sfe", "sf_windos_13wall" },
    { 10056, "bigoldbuild_sfe", "sf_windos_2" },
    { 10056, "bigoldbuild_sfe", "sf_windos_3" },
    { 10056, "bigoldbuild_sfe", "vgnburgwal3_256" },
    { 15041, "bigsfsave", "ah_ceilpan1" },
    { 15041, "bigsfsave", "AH_flrdiamonds" },
    { 15041, "bigsfsave", "AH_flroortile5" },
    { 15041, "bigsfsave", "AH_flroortile9" },
    { 15041, "bigsfsave", "ah_greencarp" },
    { 15041, "bigsfsave", "AH_grepaper2" },
    { 15041, "bigsfsave", "AH_skt5" },
    { 15041, "bigsfsave", "AH_strntiles" },
    { 15041, "bigsfsave", "ah_utilbor1" },
    { 15041, "bigsfsave", "ah_utilbor2" },
    { 15041, "bigsfsave", "AH_walltile6" },
    { 15041, "bigsfsave", "AH_wdpanscum" },
    { 15041, "bigsfsave", "ah_wpaper7" },
    { 15041, "bigsfsave", "ah_wrnplnks" },
    { 15041, "bigsfsave", "andydark" },
    { 15041, "bigsfsave", "carp11S" },
    { 15041, "bigsfsave", "mp_carter_tilewall" },
    { 15041, "bigsfsave", "wall6" },
    { 15041, "bigsfsave", "walp73S" },
    { 15041, "bigsfsave", "windo_blinds" },
    { 2944, "bigshapx", "freighter1" },
    { 9583, "bigshap_sfw", "alleywin5" },
    { 9583, "bigshap_sfw", "boatfunnel1_128" },
    { 9583, "bigshap_sfw", "boatfunnel2_64" },
    { 9583, "bigshap_sfw", "bridge_walls2_sfw" },
    { 9583, "bigshap_sfw", "bridge_walls3_sfw" },
    { 9583, "bigshap_sfw", "cof_tile1" },
    { 9583, "bigshap_sfw", "freighter1b" },
    { 9583, "bigshap_sfw", "freighter2" },
    { 9583, "bigshap_sfw", "freighter2b" },
    { 9583, "bigshap_sfw", "freighter3" },
    { 9583, "bigshap_sfw", "freighter4" },
    { 9583, "bigshap_sfw", "freighter4b" },
    { 9583, "bigshap_sfw", "freighter5" },
    { 9583, "bigshap_sfw", "freighterhull1" },
    { 9583, "bigshap_sfw", "freighterhull2" },
    { 9583, "bigshap_sfw", "freight_crate1" },
    { 9583, "bigshap_sfw", "freight_crate2" },
    { 9583, "bigshap_sfw", "freight_crate3" },
    { 9583, "bigshap_sfw", "freight_crate4" },
    { 9583, "bigshap_sfw", "freight_crate5" },
    { 9583, "bigshap_sfw", "freight_crate6" },
    { 9583, "bigshap_sfw", "freight_crate7" },
    { 9583, "bigshap_sfw", "generatorside1_128" },
    { 9583, "bigshap_sfw", "man_ceiling" },
    { 9583, "bigshap_sfw", "ropladr_sfw" },
    { 9583, "bigshap_sfw", "sf_ship_glasst" },
    { 9583, "bigshap_sfw", "ship2wall_1" },
    { 9583, "bigshap_sfw", "ship2wall_2" },
    { 9583, "bigshap_sfw", "ship2wall_3" },
    { 9583, "bigshap_sfw", "shipceiling_sfw" },
    { 9583, "bigshap_sfw", "shipfloor_sfw" },
    { 10840, "bigshed_sfse", "sw_warewinx4" },
    { 10840, "bigshed_sfse", "ws_corr_metal2" },
    { 10840, "bigshed_sfse", "ws_corr_metal3" },
    { 10840, "bigshed_sfse", "ws_corr_plastic" },
    { 10840, "bigshed_sfse", "ws_oldwarehouse1" },
    { 10840, "bigshed_sfse", "ws_oldwarehouse9" },
    { 10840, "bigshed_sfse", "ws_reinforcedbutwonky" },
    { 10023, "bigwhitesfe", "archgrnd1_SFE" },
    { 10023, "bigwhitesfe", "archgrnd2_SFE" },
    { 10023, "bigwhitesfe", "archgrnd3_SFE" },
    { 10023, "bigwhitesfe", "bigwhite_2" },
    { 10023, "bigwhitesfe", "bigwhite_3" },
    { 10023, "bigwhitesfe", "bigwhite_4" },
    { 10023, "bigwhitesfe", "bigwhite_5" },
    { 10023, "bigwhitesfe", "bigwhite_6" },
    { 10023, "bigwhitesfe", "clubpole_SFw" },
    { 10023, "bigwhitesfe", "forestfloor3" },
    { 10023, "bigwhitesfe", "helix2_sfe" },
    { 10023, "bigwhitesfe", "liftdoors_kb_256" },
    { 10023, "bigwhitesfe", "lomall_ext2_" },
    { 10023, "bigwhitesfe", "recessed_light_SF" },
    { 10023, "bigwhitesfe", "sfe_arch10" },
    { 10023, "bigwhitesfe", "sfe_arch2" },
    { 10023, "bigwhitesfe", "sfe_arch3" },
    { 10023, "bigwhitesfe", "sfe_arch4" },
    { 10023, "bigwhitesfe", "sfe_arch5" },
    { 10023, "bigwhitesfe", "sfe_arch6" },
    { 10023, "bigwhitesfe", "sfe_arch7" },
    { 10023, "bigwhitesfe", "sfe_arch8" },
    { 10023, "bigwhitesfe", "sfe_arch9" },
    { 10023, "bigwhitesfe", "zombotech1" },
    { 10023, "bigwhitesfe", "zombotech2" },
    { 10023, "bigwhitesfe", "zombotech3" },
    { 14603, "bikeskool", "artish1" },
    { 14603, "bikeskool", "door_pan1_64_128" },
    { 14603, "bikeskool", "dor_slider_16_32b" },
    { 14603, "bikeskool", "lw_pistol_128" },
    { 14603, "bikeskool", "motel_wall3" },
    { 3083, "billbox", "ADDWOOD" },
    { 3083, "billbox", "billdetaily" },
    { 3083, "billbox", "iron" },
    { 3083, "billbox", "Sprunk_postersign1" },
    { 1259, "billbrd", "BBoardBack" },
    { 1259, "billbrd", "bluemetal02" },
    { 1259, "billbrd", "fence1" },
    { 1259, "billbrd", "spotlight_64" },
    { 1259, "billbrd", "ws_oldpainted2" },
    { 4230, "billbrd01_lan", "eris_2" },
    { 4230, "billbrd01_lan", "heat_02" },
    { 4729, "billbrd01_lan2", "eris_1" },
    { 4729, "billbrd01_lan2", "hardon_1" },
    { 5818, "billbrdlawn", "bobobillboard1" },
    { 5818, "billbrdlawn", "semi1Dirty" },
    { 5818, "billbrdlawn", "semi2Dirty" },
    { 5818, "billbrdlawn", "semi3Dirty" },
    { 3922, "bistro", "ahoodfence2" },
    { 3922, "bistro", "barbersflr1_LA" },
    { 3922, "bistro", "BistroMenu" },
    { 3922, "bistro", "Cabinet" },
    { 3922, "bistro", "Cakes" },
    { 3922, "bistro", "Candle_Holder" },
    { 3922, "bistro", "Coffemachine" },
    { 3922, "bistro", "concretebig3_256" },
    { 3922, "bistro", "Cutlery" },
    { 3922, "bistro", "deco_chair_1" },
    { 3922, "bistro", "DinerFloor" },
    { 3922, "bistro", "Marble" },
    { 3922, "bistro", "Marble2" },
    { 3922, "bistro", "marblekb_256128" },
    { 3922, "bistro", "mottled_grey_64HV" },
    { 3922, "bistro", "mp_snow" },
    { 3922, "bistro", "Panel" },
    { 3922, "bistro", "Plate" },
    { 3922, "bistro", "rest_wall4" },
    { 3922, "bistro", "SaltNPeppa" },
    { 3922, "bistro", "StainedGlass" },
    { 3922, "bistro", "sw_door11" },
    { 3922, "bistro", "sw_wallbrick_01" },
    { 3922, "bistro", "Tablecloth" },
    { 3922, "bistro", "vent_64" },
    { 3945, "bistro_alpha", "creme128" },
    { 3946, "bistro_plants", "starflower2" },
    { 3946, "bistro_plants", "starflower4" },
    { 2023, "bitsnbobs", "CJ_LIGHTWOOD" },
    { 3108, "bjmptx", "target_crv" },
    { 3108, "bjmptx", "target_nmbrs" },
    { 10871, "blacksky_sfse", "corporate3" },
    { 10871, "blacksky_sfse", "ws_altz_wall7_top" },
    { 10871, "blacksky_sfse", "ws_blackmarble" },
    { 10871, "blacksky_sfse", "ws_glass_balustrade" },
    { 10871, "blacksky_sfse", "ws_skywinsgreen" },
    { 10871, "blacksky_sfse", "ws_slatetiles" },
    { 17510, "blackwestran1_lae2", "des_indrails" },
    { 14634, "blindinglite", "ws_volumetriclight" },
    { 3077, "blkbrdx", "nf_blackbrd" },
    { 3077, "blkbrdx", "tatty_wood_1" },
    { 3077, "blkbrdx", "WCList1" },
    { 3077, "blkbrdx", "WCList2" },
    { 3077, "blkbrdx", "WCList3" },
    { 3077, "blkbrdx", "WCScore" },
    { 3077, "blkbrdx", "WCTitle" },
    { 5630, "blockalpha", "duskyred_64" },
    { 5630, "blockalpha", "grille2_LA" },
    { 9524, "blokmodb", "alleywin4" },
    { 9524, "blokmodb", "bincosf_1" },
    { 9524, "blokmodb", "bincosign1_128" },
    { 9524, "blokmodb", "binco_sf2" },
    { 9524, "blokmodb", "Bow_Grimebrick" },
    { 9524, "blokmodb", "fireescape1_sfe" },
    { 9524, "blokmodb", "Grass" },
    { 9524, "blokmodb", "lightwallv256" },
    { 9524, "blokmodb", "lombard_build1_1" },
    { 9524, "blokmodb", "lombard_build1_2" },
    { 9524, "blokmodb", "lombard_build1_4" },
    { 9524, "blokmodb", "lombard_build5_1" },
    { 9524, "blokmodb", "lombard_build5_2" },
    { 9524, "blokmodb", "lombard_build5_3" },
    { 9524, "blokmodb", "sf_garagedr1" },
    { 1685, "blokpalet", "ws_blockpall" },
    { 10310, "boigas_sfe", "burgershotmenu256" },
    { 10310, "boigas_sfe", "burgershotsign1_256" },
    { 10310, "boigas_sfe", "vgnburger_256" },
    { 9525, "boigas_sfw", "calfederal4" },
    { 9525, "boigas_sfw", "calfederal5" },
    { 9525, "boigas_sfw", "GEwhite1_64" },
    { 9525, "boigas_sfw", "vgnburgwal1_128" },
    { 9525, "boigas_sfw", "vgnburgwal2_128" },
    { 9525, "boigas_sfw", "vgnburgwal6_256" },
    { 5042, "bombshop_las", "dynobox" },
    { 5042, "bombshop_las", "greymetal" },
    { 5042, "bombshop_las", "kb_spray_light1" },
    { 5042, "bombshop_las", "lightcover1" },
    { 5042, "bombshop_las", "shutterclosed_law" },
    { 10148, "bombshop_sfe", "calendar01" },
    { 3269, "boneyard", "bonyrd_frame1" },
    { 3269, "boneyard", "bonyrd_skin1" },
    { 1248, "bonus", "gta3l" },
    { 2923, "bottle_bank", "recycle" },
    { 1220, "boxes", "cardboxes_128" },
    { 1220, "boxes", "crate128" },
    { 3820, "boxhses_sfsx", "hilcouwall1" },
    { 3820, "boxhses_sfsx", "LAbluewall" },
    { 3820, "boxhses_sfsx", "LAcreamwall1" },
    { 3820, "boxhses_sfsx", "LAgreenwall" },
    { 3820, "boxhses_sfsx", "sl_vic_decor1" },
    { 3820, "boxhses_sfsx", "stonewall_la" },
    { 3820, "boxhses_sfsx", "sw_barnwoodblu" },
    { 3820, "boxhses_sfsx", "tanboard1" },
    { 3820, "boxhses_sfsx", "ws_ irongate" },
    { 3820, "boxhses_sfsx", "ws_ irongate_white" },
    { 3820, "boxhses_sfsx", "ws_ irongate_yello" },
    { 3820, "boxhses_sfsx", "ws_blocks_grey_1" },
    { 3820, "boxhses_sfsx", "ws_blocks_red_1" },
    { 3820, "boxhses_sfsx", "ws_boxhouse_wins5" },
    { 3820, "boxhses_sfsx", "ws_boxhouse_wins7" },
    { 3820, "boxhses_sfsx", "ws_chimneypot" },
    { 3820, "boxhses_sfsx", "ws_doorframe" },
    { 3820, "boxhses_sfsx", "ws_garagedoor2_blue" },
    { 3820, "boxhses_sfsx", "ws_garagedoor2_white" },
    { 3820, "boxhses_sfsx", "ws_garagedoor3_green" },
    { 3820, "boxhses_sfsx", "ws_garagedoor3_pink" },
    { 3820, "boxhses_sfsx", "ws_green_wall1" },
    { 3820, "boxhses_sfsx", "ws_mixedbrick" },
    { 3820, "boxhses_sfsx", "ws_painted_doors1" },
    { 3820, "boxhses_sfsx", "ws_painted_doors2" },
    { 3820, "boxhses_sfsx", "ws_painted_doors3" },
    { 3820, "boxhses_sfsx", "ws_pink_wall1" },
    { 3820, "boxhses_sfsx", "ws_shutters" },
    { 3820, "boxhses_sfsx", "ws_stucco_white_2" },
    { 3820, "boxhses_sfsx", "ws_vic_bits" },
    { 3820, "boxhses_sfsx", "ws_vic_cornice1" },
    { 3820, "boxhses_sfsx", "ws_vic_wood1" },
    { 3820, "boxhses_sfsx", "ws_wood_doors1" },
    { 3820, "boxhses_sfsx", "ws_wood_doors2" },
    { 9507, "boxybld2_sfw", "bevdoor01_law" },
    { 9507, "boxybld2_sfw", "boxybox_sf3z" },
    { 9507, "boxybld2_sfw", "compcouwall1" },
    { 9507, "boxybld2_sfw", "comptdoor3" },
    { 9507, "boxybld2_sfw", "dirty01" },
    { 9507, "boxybld2_sfw", "gz_vic4a" },
    { 9507, "boxybld2_sfw", "gz_vic4b" },
    { 9507, "boxybld2_sfw", "gz_vic4c" },
    { 9507, "boxybld2_sfw", "gz_vic4e" },
    { 9507, "boxybld2_sfw", "hospital3_sfw" },
    { 9507, "boxybld2_sfw", "lombard_build2_1" },
    { 9507, "boxybld2_sfw", "sfn_rock2" },
    { 9507, "boxybld2_sfw", "sfn_rockgrass1" },
    { 9507, "boxybld2_sfw", "sfn_rockgrass10" },
    { 9507, "boxybld2_sfw", "sfw_poshbox1" },
    { 9507, "boxybld2_sfw", "sfw_poshbox1b" },
    { 9507, "boxybld2_sfw", "sfw_poshbox1c" },
    { 9507, "boxybld2_sfw", "sfw_poshbox1d" },
    { 9507, "boxybld2_sfw", "vengardoor01_SFW" },
    { 9496, "boxybld_sfw", "boxybox_sf1z" },
    { 9496, "boxybld_sfw", "boxybox_sf5bz" },
    { 9496, "boxybld_sfw", "fence1_sfw" },
    { 9496, "boxybld_sfw", "hospwall1" },
    { 9496, "boxybld_sfw", "pierbuild_btm1" },
    { 9496, "boxybld_sfw", "taxi_256" },
    { 9496, "boxybld_sfw", "ven_house4" },
    { 9496, "boxybld_sfw", "ws_alley_conc1" },
    { 9496, "boxybld_sfw", "ws_altz_wall8_bot" },
    { 3054, "break_ballx", "brk_ball1" },
    { 3054, "break_ballx", "brk_Ball2" },
    { 1486, "break_bar", "CJ_bottle" },
    { 1486, "break_bar", "CJ_bottle2" },
    { 1453, "break_farm", "CJ_DarkWood" },
    { 1453, "break_farm", "CJ_HAY" },
    { 1453, "break_farm", "cj_hay2" },
    { 1408, "break_fence1", "CJ_W_wood" },
    { 1408, "break_fence1", "compfence2_LAe" },
    { 1419, "break_fence3", "CJ_BIN_LID" },
    { 1419, "break_fence3", "CJ_DUMP" },
    { 1419, "break_fence3", "CJ_DUMP2" },
    { 1419, "break_fence3", "CJ_DUMP3" },
    { 1419, "break_fence3", "CJ_FRAME_Glass" },
    { 1419, "break_fence3", "CJ_Trafficlights" },
    { 1419, "break_fence3", "ornatefence" },
    { 1411, "break_fen_mesh2", "mp_barbedwire" },
    { 1413, "break_f_mesh", "CJ_CORRIGATED" },
    { 1413, "break_f_mesh", "meetwalv2" },
    { 1407, "break_f_w", "CJ_GREENWOOD" },
    { 1407, "break_f_w", "CJ_SLATEDWOOD" },
    { 1448, "break_pallet", "Gen_Bin_Bag" },
    { 1448, "break_pallet", "slated" },
    { 1422, "break_road", "CJ_DETOUR" },
    { 1422, "break_road", "CJ_orangebarrier2" },
    { 1422, "break_road", "CJ_ROAD_SIGN1" },
    { 1422, "break_road", "cj_S_POLE" },
    { 1422, "break_road", "CJ_W_BALL" },
    { 1459, "break_road_ws", "CJ_SHEET2" },
    { 1426, "break_scaffold", "cheerybox03" },
    { 1426, "break_scaffold", "CJ_avery" },
    { 1426, "break_scaffold", "CJ_BLUE_WOOD" },
    { 1426, "break_scaffold", "CJ_NET" },
    { 1414, "break_street1", "cj_crates" },
    { 1414, "break_street1", "CJ_TV_SCREEN" },
    { 1355, "break_s_bins", "CJ_RED_LEATHER" },
    { 1355, "break_s_bins", "CJ_SF_BUCKET" },
    { 1355, "break_s_bins", "CJ_SKIP2" },
    { 1355, "break_s_bins", "CJ_TABLE_TOP" },
    { 1355, "break_s_bins", "CJ_WOOD_DARK" },
    { 1355, "break_s_bins", "dirt64b" },
    { 1355, "break_s_bins", "Gen_Box" },
    { 1355, "break_s_bins", "marble1" },
    { 1443, "break_s_fillers", "cj_burger" },
    { 1443, "break_s_fillers", "CJ_SEX_SIGN1" },
    { 1444, "break_s_sf", "CJ_FERRY_MAP" },
    { 1365, "break_s_ws", "CJ_SKIP" },
    { 1210, "breifcase", "briefcase" },
    { 10864, "bridgeland_sfse", "prolaps02" },
    { 10864, "bridgeland_sfse", "ws_altz_wall1" },
    { 946, "bskball_standext", "bballboard128" },
    { 946, "bskball_standext", "drkbrownmetal" },
    { 4593, "buildblk55", "downtwin1" },
    { 4593, "buildblk55", "drugstore256" },
    { 4593, "buildblk55", "GB_nastybar03" },
    { 4593, "buildblk55", "holpac01_law" },
    { 4593, "buildblk55", "lawshop4" },
    { 4593, "buildblk55", "sl_plazatile01" },
    { 4593, "buildblk55", "snpdsqdoor" },
    { 4593, "buildblk55", "ws_oldershop1" },
    { 4593, "buildblk55", "ws_oldershop2" },
    { 4604, "buildblk555", "gm_labuld5_a" },
    { 4604, "buildblk555", "gm_labuld5_b" },
    { 4604, "buildblk555", "gm_labuld5_c" },
    { 4604, "buildblk555", "sl_sfngrssdrt01" },
    { 8869, "buildingsitevge", "boardgate_law" },
    { 8869, "buildingsitevge", "telepole2128" },
    { 8869, "buildingsitevge", "ws_floodlight" },
    { 8869, "buildingsitevge", "ws_generatorside" },
    { 8869, "buildingsitevge", "ws_oldpaintedyello" },
    { 8869, "buildingsitevge", "ws_woodenscreen1" },
    { 5819, "buildtestlawn", "alleydoor8" },
    { 5819, "buildtestlawn", "lawshopwall4" },
    { 1243, "buoy", "buoyrust_128" },
    { 1243, "buoy", "yellowrust_64" },
    { 11092, "burgalrystore_sfse", "Bow_LoadingBayDoor" },
    { 11092, "burgalrystore_sfse", "ws_altz_wall2bluetop" },
    { 11092, "burgalrystore_sfse", "ws_HARRYPLUMS" },
    { 11092, "burgalrystore_sfse", "ws_peeling_ceiling2" },
    { 11092, "burgalrystore_sfse", "ws_warehswin1" },
    { 11092, "burgalrystore_sfse", "ws_warehswin2" },
    { 11092, "burgalrystore_sfse", "ws_whousedoor1" },
    { 2212, "burger_tray", "bkidside" },
    { 2212, "burger_tray", "btdeck256" },
    { 2212, "burger_tray", "burgerfries" },
    { 2212, "burger_tray", "burgerfront" },
    { 2212, "burger_tray", "burgerfront2" },
    { 2212, "burger_tray", "burgerkids" },
    { 2212, "burger_tray", "burgerside" },
    { 2212, "burger_tray", "burgertop" },
    { 2212, "burger_tray", "chickenskin" },
    { 2212, "burger_tray", "drinktop_cb" },
    { 2212, "burger_tray", "fries_cb" },
    { 2212, "burger_tray", "pplate" },
    { 2212, "burger_tray", "salad" },
    { 2212, "burger_tray", "sprinkler" },
    { 2212, "burger_tray", "sprinkles" },
    { 2212, "burger_tray", "sprunk_cb" },
    { 6257, "burgsh01_law", "burgroof01_LAw" },
    { 6257, "burgsh01_law", "fastfd01_LA" },
    { 6257, "burgsh01_law", "newall2" },
    { 14383, "burg_1", "burglry_wall3" },
    { 14383, "burg_1", "carpet4kb" },
    { 14383, "burg_1", "curtain_sink2" },
    { 14383, "burg_1", "gragedoorkb1" },
    { 14383, "burg_1", "hospital_wall2" },
    { 14383, "burg_1", "kb_kit_wal1" },
    { 14383, "burg_1", "kit_windo_12" },
    { 14383, "burg_1", "la_carp3" },
    { 14383, "burg_1", "mp_diner_woodwall" },
    { 14383, "burg_1", "wallpapkb1" },
    { 17958, "burnsalpha", "plantb256" },
    { 17545, "burnsground", "ahoodgardr" },
    { 17545, "burnsground", "bluapartwall1_256" },
    { 17545, "burnsground", "dirtyredwall512" },
    { 17545, "burnsground", "indund_64" },
    { 17545, "burnsground", "LAroad_offroad1" },
    { 17545, "burnsground", "newall1-1128" },
    { 17545, "burnsground", "newall10_seamless" },
    { 1257, "bustopm", "bus shelter" },
    { 1257, "bustopm", "CJ_BS_MENU5" },
    { 1257, "bustopm", "CJ_GREENMETAL" },
    { 10012, "cables_sfe", "dt_overwire_t" },
    { 10143, "calfed_sfe", "calfederal1" },
    { 10143, "calfed_sfe", "calfederal2" },
    { 10143, "calfed_sfe", "calfederal3" },
    { 10143, "calfed_sfe", "calfederal6" },
    { 10143, "calfed_sfe", "calfederal7" },
    { 10143, "calfed_sfe", "slidingdoor01_128" },
    { 6094, "canalsg_law", "block2bb" },
    { 6094, "canalsg_law", "Bow_church_grass_gen" },
    { 6094, "canalsg_law", "sw_brewbrick01" },
    { 6094, "canalsg_law", "venicearch1" },
    { 6094, "canalsg_law", "ws_sheetwood_clean" },
    { 642, "canopy", "kb_canopybse64" },
    { 642, "canopy", "weathered wood2 64HV" },
    { 642, "canopy", "wood02" },
    { 5766, "capitol_lawn", "alleygroundb256" },
    { 5766, "capitol_lawn", "capitol1_LAwN" },
    { 5766, "capitol_lawn", "capitol2_LAwN" },
    { 5766, "capitol_lawn", "capitol3_LAwN" },
    { 5766, "capitol_lawn", "capitolwin1_LAwN" },
    { 5766, "capitol_lawn", "hilcouwall2" },
    { 5766, "capitol_lawn", "lasjmscruffwall3" },
    { 5766, "capitol_lawn", "vgs_whitewall_128" },
    { 9276, "caravanprk_sfn", "desertgryard256" },
    { 9276, "caravanprk_sfn", "sfn_rocktbrn128" },
    { 9276, "caravanprk_sfn", "sl_sfndirt01" },
    { 9276, "caravanprk_sfn", "sl_sfngrass01" },
    { 10051, "carimpound_sfe", "poundroofblock_sfe" },
    { 10051, "carimpound_sfe", "poundroofsupport_sfe" },
    { 10051, "carimpound_sfe", "poundwall1_sfe" },
    { 14478, "carlsflr", "carlscock" },
    { 14476, "carlslounge", "ah_bantisto" },
    { 14476, "carlslounge", "AH_barpole1" },
    { 14476, "carlslounge", "ah_blu_paper" },
    { 14476, "carlslounge", "ah_blu_paper2" },
    { 14476, "carlslounge", "AH_cheapredcarpet" },
    { 14476, "carlslounge", "AH_plnskirting" },
    { 14476, "carlslounge", "breezewallbse" },
    { 14476, "carlslounge", "burg_curt_1" },
    { 14489, "carlspics", "ah_bdflwd" },
    { 14489, "carlspics", "AH_flroortile7" },
    { 14489, "carlspics", "AH_landscap1" },
    { 14489, "carlspics", "AH_landscap3" },
    { 14489, "carlspics", "AH_picture2" },
    { 14489, "carlspics", "AH_picture3" },
    { 14489, "carlspics", "AH_picture4" },
    { 14489, "carlspics", "AH_wdpanelend" },
    { 14471, "carls_kit1", "barbersflr1" },
    { 14471, "carls_kit1", "kit_table" },
    { 14471, "carls_kit1", "wall1" },
    { 14471, "carls_kit1", "wall3" },
    { 14471, "carls_kit1", "wall7" },
    { 14472, "carls_kit2", "curtain_sinkb" },
    { 14472, "carls_kit2", "fridge_1b" },
    { 14472, "carls_kit2", "micro1" },
    { 14472, "carls_kit2", "stove_1" },
    { 14472, "carls_kit2", "wall2b" },
    { 14472, "carls_kit2", "wall4b" },
    { 14472, "carls_kit2", "wall5b" },
    { 8420, "carpark3_lvs", "Corner1_128" },
    { 8420, "carpark3_lvs", "greyground12802" },
    { 8420, "carpark3_lvs", "greystones01_128" },
    { 8420, "carpark3_lvs", "newgrnd1_128" },
    { 8420, "carpark3_lvs", "Pave02_128" },
    { 9254, "carparkssfn", "decoacwallbtm1_256" },
    { 9254, "carparkssfn", "parking2" },
    { 9254, "carparkssfn", "parking2plain" },
    { 9254, "carparkssfn", "sf_junction1" },
    { 9254, "carparkssfn", "sf_junction2" },
    { 11145, "carrierint_sfs", "ab_ACcarrierDoor" },
    { 11145, "carrierint_sfs", "ab_BoltPanel" },
    { 11145, "carrierint_sfs", "chainlinkac1_128" },
    { 11145, "carrierint_sfs", "noodpot_64" },
    { 11145, "carrierint_sfs", "ws_accables" },
    { 11145, "carrierint_sfs", "ws_cogtrack" },
    { 11145, "carrierint_sfs", "ws_doorfront" },
    { 11145, "carrierint_sfs", "ws_floor2" },
    { 11145, "carrierint_sfs", "ws_shipmetal3" },
    { 11145, "carrierint_sfs", "ws_shipmetal4" },
    { 3113, "carrierxr", "ws_carrierdeckbase" },
    { 3113, "carrierxr", "ws_controlpanel1" },
    { 3113, "carrierxr", "ws_decklines" },
    { 3113, "carrierxr", "ws_shipmetal1" },
    { 10770, "carrier_sfse", "ws_bridgewins" },
    { 10770, "carrier_sfse", "ws_carrierdecals" },
    { 10770, "carrier_sfse", "ws_hulltemp2" },
    { 3850, "carshowglass_sfsx", "ws_carshowwin1" },
    { 3850, "carshowglass_sfsx", "ws_glass_balustrade_better" },
    { 11301, "carshow_sfse", "concpanel_la" },
    { 11301, "carshow_sfse", "concreteslab_small" },
    { 11301, "carshow_sfse", "laspryshpsig1" },
    { 11301, "carshow_sfse", "ws_basheddoor1" },
    { 11301, "carshow_sfse", "ws_carshowdoor1" },
    { 11301, "carshow_sfse", "ws_officy_ceiling" },
    { 11301, "carshow_sfse", "ws_rollerdoor_silver" },
    { 11301, "carshow_sfse", "ws_Transfender_dirty" },
    { 11301, "carshow_sfse", "ws_wangcar1" },
    { 11301, "carshow_sfse", "ws_wangcar2" },
    { 1458, "cart", "CJ_GENER_WHEEL" },
    { 1458, "cart", "CJ_tyre" },
    { 14407, "carter_block", "ab_corFloor" },
    { 14407, "carter_block", "ab_stripped_floor2" },
    { 14407, "carter_block", "black256" },
    { 14407, "carter_block", "dt_ind_door" },
    { 14407, "carter_block", "firestation_rollerdoor2" },
    { 14407, "carter_block", "mp_carter_bars" },
    { 14407, "carter_block", "mp_carter_bwall" },
    { 14407, "carter_block", "mp_carter_ceiling" },
    { 14407, "carter_block", "mp_carter_gangway" },
    { 14407, "carter_block", "mp_carter_girder" },
    { 14407, "carter_block", "mp_carter_light" },
    { 14407, "carter_block", "mp_carter_partyspot" },
    { 14407, "carter_block", "mp_carter_sep" },
    { 14407, "carter_block", "mp_carter_smoothwall" },
    { 14407, "carter_block", "mp_carter_tramp" },
    { 14407, "carter_block", "mp_carter_tramp1" },
    { 14407, "carter_block", "mp_carter_wall" },
    { 14407, "carter_block", "mp_carter_wallbot" },
    { 14407, "carter_block", "mp_carter_whitewall" },
    { 14407, "carter_block", "mp_carter_windows" },
    { 14407, "carter_block", "zebra_skin" },
    { 14415, "carter_block_2", "cd_wall1" },
    { 14415, "carter_block_2", "cl_of_wltemp" },
    { 14415, "carter_block_2", "mp_carter_cage" },
    { 14415, "carter_block_2", "mp_carter_cuffs" },
    { 14415, "carter_block_2", "mp_carter_floor" },
    { 14415, "carter_block_2", "mp_carter_pcarpet" },
    { 14415, "carter_block_2", "mp_carter_statue" },
    { 14415, "carter_block_2", "mp_carter_wallpaper" },
    { 14415, "carter_block_2", "mp_gs_woodpanel" },
    { 14415, "carter_block_2", "mp_gs_woodpanel1" },
    { 14415, "carter_block_2", "mp_motel_carpet1" },
    { 14415, "carter_block_2", "mp_shop_floor2" },
    { 14415, "carter_block_2", "walp29S" },
    { 14415, "carter_block_2", "ws_doormat" },
    { 17933, "carter_mainmap", "mp_apt1_brokedoor" },
    { 17933, "carter_mainmap", "mp_carter_carpet" },
    { 17933, "carter_mainmap", "mp_carter_doorway" },
    { 17933, "carter_mainmap", "mp_carter_greenwall" },
    { 14466, "carter_outside", "comptwall22" },
    { 14466, "carter_outside", "gangwin2_LAe" },
    { 14466, "carter_outside", "mp_carter_corrwall" },
    { 7088, "casinoshops1", "247sign1" },
    { 7088, "casinoshops1", "247sign2" },
    { 7088, "casinoshops1", "crapdoor1_256" },
    { 7088, "casinoshops1", "fakestone1_LA" },
    { 7088, "casinoshops1", "GB_nastybar19" },
    { 7088, "casinoshops1", "hosp02_law" },
    { 7088, "casinoshops1", "inwindow1shdw64" },
    { 7088, "casinoshops1", "LAredwall" },
    { 7088, "casinoshops1", "sexsign1_256" },
    { 7088, "casinoshops1", "venshade01_law" },
    { 7088, "casinoshops1", "vgnbordpnk1_256" },
    { 7088, "casinoshops1", "vgshopwndw01_128" },
    { 7088, "casinoshops1", "vgsn_yelwall" },
    { 7088, "casinoshops1", "vinesign1_LAw" },
    { 14577, "casinovault01", "ab_concrete" },
    { 14577, "casinovault01", "ab_corWallLwr" },
    { 14577, "casinovault01", "ab_corWallUpr" },
    { 14577, "casinovault01", "ab_loadbayMark01" },
    { 14577, "casinovault01", "ab_mottleSteps" },
    { 14577, "casinovault01", "ab_shutter1" },
    { 14577, "casinovault01", "carp04S" },
    { 14577, "casinovault01", "cof_wood1" },
    { 14577, "casinovault01", "compound_roof1" },
    { 14577, "casinovault01", "conc_wall_128H" },
    { 14577, "casinovault01", "copbtm_brown" },
    { 14577, "casinovault01", "dts_elevator_door" },
    { 14577, "casinovault01", "vaultFloor" },
    { 14577, "casinovault01", "vaultWall" },
    { 14577, "casinovault01", "wallTrim2" },
    { 2176, "casino_props", "flameOptic" },
    { 2176, "casino_props", "marblebox" },
    { 14582, "casmafbar", "ab_CasRomCeil" },
    { 14582, "casmafbar", "ab_CasRomTile1" },
    { 14582, "casmafbar", "beerfridge128" },
    { 14582, "casmafbar", "bottlestacked256" },
    { 14582, "casmafbar", "ginoptic128" },
    { 14582, "casmafbar", "martinioptic128" },
    { 14582, "casmafbar", "opticbracket128" },
    { 14582, "casmafbar", "vodkaoptic128" },
    { 14582, "casmafbar", "whiskyoptic128" },
    { 8501, "casroyale", "royale02_128" },
    { 8501, "casroyale", "royaledoor01_128" },
    { 8501, "casroyale", "royaleledge01" },
    { 8501, "casroyale", "royaleroof01_64" },
    { 8501, "casroyale", "royalesign02_256" },
    { 8501, "casroyale", "royalewall01_128" },
    { 8501, "casroyale", "royalewall02_128" },
    { 8501, "casroyale", "royalewall03_128" },
    { 8501, "casroyale", "royalewindow01_128" },
    { 2799, "castable", "chrome_pipe_32" },
    { 2799, "castable", "cl_ashtray" },
    { 2799, "castable", "cl_cig" },
    { 2799, "castable", "cl_cigar_1" },
    { 2799, "castable", "cl_hiball2" },
    { 2799, "castable", "cl_knif_fork" },
    { 2799, "castable", "cl_napkin" },
    { 2799, "castable", "cl_redwine_gls" },
    { 2799, "castable", "cl_seat2temp" },
    { 2799, "castable", "cl_s_and_p" },
    { 2799, "castable", "cl_table_top_256" },
    { 2799, "castable", "cl_tble_lamp" },
    { 2799, "castable", "cl_tbl_shado2a" },
    { 2799, "castable", "cl_winebtl1" },
    { 2799, "castable", "cl_winebtl2" },
    { 10368, "cathedral_sfs", "dirt64b2" },
    { 10368, "cathedral_sfs", "ws_bigwooddoor" },
    { 10368, "cathedral_sfs", "ws_coppersheet" },
    { 10368, "cathedral_sfs", "ws_woodyhedge" },
    { 2343, "cb_bar_bits", "CJ_POLISHED" },
    { 2767, "cb_details", "100%fowl_cb" },
    { 2767, "cb_details", "CJ_cbell_top" },
    { 2767, "cb_details", "CJ_cb_bin1" },
    { 2767, "cb_details", "cluckinbig_cb" },
    { 2767, "cb_details", "fillets_cb" },
    { 2767, "cb_details", "fillet_cb" },
    { 2767, "cb_details", "kidsfront_cb" },
    { 2767, "cb_details", "pattern1_cb" },
    { 2767, "cb_details", "wrapfood_cb" },
    { 2767, "cb_details", "wrapper_cb" },
    { 3462, "ceaserangel", "ceaser_angel01_256" },
    { 8618, "ceasersign", "Caligulasign01_256" },
    { 8618, "ceasersign", "ceaserspillar01_128" },
    { 8618, "ceasersign", "ceaserssign01_128" },
    { 8618, "ceasersign", "ceaserssign02_256" },
    { 8618, "ceasersign", "mexreast1_256" },
    { 13139, "cecuntetunnel", "ab_walllite" },
    { 13139, "cecuntetunnel", "airportwall_2_2" },
    { 13139, "cecuntetunnel", "conc_wall_stripd128H" },
    { 13139, "cecuntetunnel", "dirtywall_256" },
    { 13139, "cecuntetunnel", "hangingwires2" },
    { 13139, "cecuntetunnel", "Pave04_128" },
    { 3741, "cehillhse14", "comptonbrij1" },
    { 3741, "cehillhse14", "comptwindo4" },
    { 3741, "cehillhse14", "glassblocks1" },
    { 3741, "cehillhse14", "ladukfeen1" },
    { 3741, "cehillhse14", "swimpoolbtm1_128" },
    { 3741, "cehillhse14", "swimpoolside1_128" },
    { 3048, "cemenx", "ct_hole" },
    { 5710, "cemetery_law", "brickgrey" },
    { 5710, "cemetery_law", "cemebuild01_law" },
    { 5710, "cemetery_law", "cemebuild02_law" },
    { 5710, "cemetery_law", "cemewall04_law" },
    { 5710, "cemetery_law", "churcharch_law" },
    { 5710, "cemetery_law", "conc_wall2_128H" },
    { 5710, "cemetery_law", "desmud" },
    { 5710, "cemetery_law", "desmudgrass" },
    { 5710, "cemetery_law", "Grass_path_law" },
    { 5710, "cemetery_law", "grave01_law" },
    { 5710, "cemetery_law", "hottop6_law" },
    { 5710, "cemetery_law", "mausdoor01_law" },
    { 5710, "cemetery_law", "mauswall01_law" },
    { 5710, "cemetery_law", "mauswall02_law" },
    { 5710, "cemetery_law", "mauswall03_law" },
    { 5710, "cemetery_law", "ppinkwallb512" },
    { 5712, "cemetint_law", "crypttv_law" },
    { 5712, "cemetint_law", "lw_seat2_law" },
    { 5712, "cemetint_law", "pizzabox" },
    { 1597, "centralresac1", "blueash" },
    { 1597, "centralresac1", "fuzzyplant256" },
    { 1597, "centralresac1", "hedge2_128" },
    { 1597, "centralresac1", "kbbark_test1" },
    { 1597, "centralresac1", "kbtree3_test" },
    { 1597, "centralresac1", "kbtree4_test" },
    { 13363, "cephotoblockcs_t", "alleydoor3" },
    { 13363, "cephotoblockcs_t", "BigS01_law" },
    { 13363, "cephotoblockcs_t", "dustyjade_128" },
    { 13363, "cephotoblockcs_t", "lampost_16clr" },
    { 13363, "cephotoblockcs_t", "sw_door16" },
    { 13363, "cephotoblockcs_t", "sw_wall_05" },
    { 13363, "cephotoblockcs_t", "sw_wind23" },
    { 13363, "cephotoblockcs_t", "wallwashv128" },
    { 3335, "ceroadsigns", "stormdrain3_nt" },
    { 3335, "ceroadsigns", "sw_barberpole" },
    { 3335, "ceroadsigns", "sw_mailbox" },
    { 3335, "ceroadsigns", "sw_roadsign" },
    { 13364, "cetown3cs_t", "des_cafesign" },
    { 13364, "cetown3cs_t", "floor_tileone_256" },
    { 13364, "cetown3cs_t", "pierboards_la" },
    { 13364, "cetown3cs_t", "sw_barnwood2" },
    { 13364, "cetown3cs_t", "sw_door17" },
    { 13364, "cetown3cs_t", "sw_door18" },
    { 13364, "cetown3cs_t", "sw_slate01" },
    { 13364, "cetown3cs_t", "sw_storewin01" },
    { 13364, "cetown3cs_t", "sw_wall03" },
    { 13364, "cetown3cs_t", "sw_wind10" },
    { 13364, "cetown3cs_t", "sw_wind15" },
    { 13364, "cetown3cs_t", "sw_wind18" },
    { 13364, "cetown3cs_t", "taxitop01" },
    { 13364, "cetown3cs_t", "ws_sandstone2" },
    { 13078, "cewrehse", "corr_roof1" },
    { 13078, "cewrehse", "sw_wind13" },
    { 12946, "ce_bankalley1", "alleywall3" },
    { 12946, "ce_bankalley1", "Bow_abbmetaldoor" },
    { 12946, "ce_bankalley1", "hospunder_law" },
    { 12946, "ce_bankalley1", "lalightledge" },
    { 12946, "ce_bankalley1", "newindow13" },
    { 12946, "ce_bankalley1", "pizza_wellstacked" },
    { 12946, "ce_bankalley1", "sjmALLEY" },
    { 12946, "ce_bankalley1", "sw_brick03" },
    { 12946, "ce_bankalley1", "sw_dicksounds" },
    { 12946, "ce_bankalley1", "sw_door09" },
    { 12946, "ce_bankalley1", "sw_furnisign" },
    { 12946, "ce_bankalley1", "sw_stairs1" },
    { 12946, "ce_bankalley1", "sw_stereosign" },
    { 12946, "ce_bankalley1", "sw_storewin02" },
    { 12946, "ce_bankalley1", "sw_warewall" },
    { 12946, "ce_bankalley1", "sw_warewin" },
    { 12946, "ce_bankalley1", "sw_wind05" },
    { 12946, "ce_bankalley1", "ws_ammu-awning" },
    { 12946, "ce_bankalley1", "ws_basheddoor2" },
    { 12946, "ce_bankalley1", "ws_boxhouse_wins1" },
    { 12944, "ce_bankalley2", "newall5-2" },
    { 12944, "ce_bankalley2", "sw_awningsx4" },
    { 12944, "ce_bankalley2", "sw_brick04" },
    { 12944, "ce_bankalley2", "sw_dryclean" },
    { 12944, "ce_bankalley2", "sw_genx4" },
    { 12944, "ce_bankalley2", "sw_jazz" },
    { 12944, "ce_bankalley2", "sw_litlad" },
    { 12944, "ce_bankalley2", "sw_wind08" },
    { 12822, "ce_bankalley3", "bankside_256" },
    { 12822, "ce_bankalley3", "Metal1_128" },
    { 12822, "ce_bankalley3", "sffront5_256" },
    { 12822, "ce_bankalley3", "sw_Fleishberg01" },
    { 3378, "ce_breweryref", "sw_keg01" },
    { 3378, "ce_breweryref", "sw_keg02" },
    { 3314, "ce_burbhouse", "black_128" },
    { 3314, "ce_burbhouse", "notice02" },
    { 3314, "ce_burbhouse", "shingles4" },
    { 3314, "ce_burbhouse", "sw_door13" },
    { 3314, "ce_burbhouse", "sw_lattice" },
    { 3314, "ce_burbhouse", "sw_shedwindow1" },
    { 3314, "ce_burbhouse", "sw_wallbrick_06" },
    { 3314, "ce_burbhouse", "ventc64" },
    { 3314, "ce_burbhouse", "wallbeigenew256" },
    { 13060, "ce_fact01", "airconfrnt1_128" },
    { 13060, "ce_fact01", "airportmetalwall256" },
    { 13060, "ce_fact01", "des_hooswin2" },
    { 13060, "ce_fact01", "des_sherrifwall1" },
    { 13060, "ce_fact01", "glassblock_law" },
    { 13060, "ce_fact01", "puttywall1" },
    { 13059, "ce_fact03", "GB_truckdepot19" },
    { 13059, "ce_fact03", "Ind_PKabin" },
    { 13059, "ce_fact03", "shitydoor1_256" },
    { 13059, "ce_fact03", "sw_corrugtile" },
    { 13059, "ce_fact03", "sw_garwind" },
    { 13059, "ce_fact03", "sw_newcorrug" },
    { 13059, "ce_fact03", "sw_shedwall01" },
    { 3374, "ce_farmxref", "desertstones256" },
    { 3374, "ce_farmxref", "forestfloor256" },
    { 3374, "ce_farmxref", "forestfloorbranch256" },
    { 3374, "ce_farmxref", "sw_barndoor1" },
    { 3374, "ce_farmxref", "sw_barndoor2" },
    { 3374, "ce_farmxref", "sw_barnfloor1" },
    { 3374, "ce_farmxref", "sw_barnwind01" },
    { 3374, "ce_farmxref", "sw_barnwood1" },
    { 3374, "ce_farmxref", "sw_barnwood4" },
    { 3374, "ce_farmxref", "sw_barnwood5" },
    { 3374, "ce_farmxref", "sw_woodflloorsplat" },
    { 12871, "ce_ground01", "cs_rockdetail2" },
    { 12871, "ce_ground01", "cw2_mountrock" },
    { 12871, "ce_ground01", "desertgravelgrassroad" },
    { 12871, "ce_ground01", "desgreengrassmix" },
    { 12871, "ce_ground01", "des_dirt1Grass" },
    { 12871, "ce_ground01", "dirttracksforest" },
    { 12871, "ce_ground01", "dirttracksgrass256" },
    { 12871, "ce_ground01", "forestfloorgrass" },
    { 12871, "ce_ground01", "grassbrn2rockbrnG" },
    { 12871, "ce_ground01", "grassbrn2rockbrnG2" },
    { 12871, "ce_ground01", "rocktbrn128" },
    { 12871, "ce_ground01", "sw_rockgrass1" },
    { 12871, "ce_ground01", "sw_rockgrassB1" },
    { 12871, "ce_ground01", "sw_rockgrassB2" },
    { 12871, "ce_ground01", "sw_stones" },
    { 12871, "ce_ground01", "sw_stonesgrass" },
    { 12823, "ce_ground02", "desertgravelgrass256" },
    { 12823, "ce_ground02", "sw_sandgrass" },
    { 12823, "ce_ground02", "sw_warewall2" },
    { 12870, "ce_ground03", "carpark_256128" },
    { 12870, "ce_ground03", "desclifftypebs" },
    { 12870, "ce_ground03", "desclifftypebsmix" },
    { 12870, "ce_ground03", "desmudtrail" },
    { 12870, "ce_ground03", "sw_grass01" },
    { 12870, "ce_ground03", "sw_grass01a" },
    { 12869, "ce_ground04", "carpark_128" },
    { 12869, "ce_ground04", "desertgryard256grs2" },
    { 12869, "ce_ground04", "grassgrnbrn256" },
    { 12869, "ce_ground04", "rocktbrn128blnd" },
    { 12866, "ce_ground07", "brngrss2stones" },
    { 12866, "ce_ground07", "desgrassbrn" },
    { 12866, "ce_ground07", "sw_crops" },
    { 12866, "ce_ground07", "sw_grassB01" },
    { 12825, "ce_ground08", "brngrss2stonesB" },
    { 12825, "ce_ground08", "cw2_mountdirt" },
    { 12825, "ce_ground08", "cw2_mountdirt2grass" },
    { 12825, "ce_ground08", "desgrassbrn_grn" },
    { 12825, "ce_ground08", "dirtblendlit" },
    { 12825, "ce_ground08", "grassbrn2rockbrn" },
    { 12825, "ce_ground08", "sw_rock1a" },
    { 13235, "ce_ground09", "des_ranchwall1" },
    { 13206, "ce_ground10", "desgreengrasstrckend" },
    { 13206, "ce_ground10", "des_dirt2 trackl" },
    { 13206, "ce_ground10", "des_dirt2" },
    { 13206, "ce_ground10", "des_dirt2grass" },
    { 13206, "ce_ground10", "des_dirt2track" },
    { 13206, "ce_ground10", "des_shingles" },
    { 12908, "ce_ground11", "grassdead1" },
    { 12908, "ce_ground11", "grassdead1blnd" },
    { 12908, "ce_ground11", "sw_dirt01" },
    { 12908, "ce_ground11", "sw_farmroad01" },
    { 13081, "ce_ground13", "concretedust2_line" },
    { 13081, "ce_ground13", "dustyconcrete" },
    { 13035, "ce_ground14", "desertstones256grass" },
    { 13035, "ce_ground14", "desmuddesgrsblend" },
    { 12805, "ce_loadbay", "sw_container" },
    { 12805, "ce_loadbay", "sw_container2" },
    { 12805, "ce_loadbay", "sw_container3" },
    { 12805, "ce_loadbay", "sw_corrug" },
    { 12805, "ce_loadbay", "sw_pal" },
    { 12805, "ce_loadbay", "sw_shutters2" },
    { 12805, "ce_loadbay", "sw_smlite" },
    { 12805, "ce_loadbay", "sw_trailer" },
    { 12805, "ce_loadbay", "sw_trailerred" },
    { 12805, "ce_loadbay", "sw_waredoor" },
    { 12805, "ce_loadbay", "sw_warewall3" },
    { 12805, "ce_loadbay", "sw_warewin2" },
    { 12805, "ce_loadbay", "sw_wheel1" },
    { 12805, "ce_loadbay", "sw_wheelT" },
    { 13461, "ce_nitelite", "ws_boxhouse_wins6nite" },
    { 12992, "ce_oldbridge", "banding8_64" },
    { 12992, "ce_oldbridge", "BLOCK2_high" },
    { 12992, "ce_oldbridge", "Gen_Rusty_Poll" },
    { 12992, "ce_oldbridge", "Gen_Scrap_Wheel_Rim" },
    { 12978, "ce_payspray", "airvent2_128" },
    { 12978, "ce_payspray", "sf_spray2" },
    { 12978, "ce_payspray", "sf_spray3" },
    { 12978, "ce_payspray", "sf_spray_floor1" },
    { 12978, "ce_payspray", "sf_spray_floor2" },
    { 12978, "ce_payspray", "spraypipegz1" },
    { 12978, "ce_payspray", "sw_shedwall03" },
    { 13361, "ce_pizza", "brickred2" },
    { 13361, "ce_pizza", "comptwall36" },
    { 13361, "ce_pizza", "FastFood1_LAe" },
    { 13361, "ce_pizza", "Parking1_LAe2" },
    { 13361, "ce_pizza", "pizzasign2LA" },
    { 13361, "ce_pizza", "pizzasign_LAe" },
    { 13003, "ce_racestart", "CJ_TARTAN" },
    { 13003, "ce_racestart", "lw_seat2" },
    { 13003, "ce_racestart", "sa_wood07_128" },
    { 3411, "ce_railbridge", "rusta256128" },
    { 13295, "ce_terminal", "cabin3" },
    { 13295, "ce_terminal", "des_adobewall2" },
    { 13295, "ce_terminal", "Gen_Metal" },
    { 13295, "ce_terminal", "grass4dirtyb" },
    { 13295, "ce_terminal", "mp_gimp_oilfloor" },
    { 13295, "ce_terminal", "sw_truckterm" },
    { 13295, "ce_terminal", "whitewall256" },
    { 13295, "ce_terminal", "ws_peeling_ceiling1" },
    { 12831, "ce_traintrack1", "sw_traingravelB1" },
    { 12831, "ce_traintrack1", "sw_tunnel01" },
    { 12831, "ce_traintrack1", "sw_tunnel02bmp" },
    { 12831, "ce_traintrack1", "ws_traintrax1" },
    { 12832, "ce_traintrack2", "sw_backdoor02" },
    { 11089, "cf_metals_sfse", "ws_altz_wall8_top" },
    { 1594, "chairsntable", "mallfloor6" },
    { 5986, "chateau_lawn", "backstagefloor1_256" },
    { 5986, "chateau_lawn", "chatarc01_law" },
    { 5986, "chateau_lawn", "chatbalc01_law" },
    { 5986, "chateau_lawn", "chatbalc02_law" },
    { 5986, "chateau_lawn", "chatbalc03_law" },
    { 5986, "chateau_lawn", "chatshade02_law" },
    { 5986, "chateau_lawn", "chatwall01_law" },
    { 5986, "chateau_lawn", "chatwall03_law" },
    { 5986, "chateau_lawn", "chatwin01_law" },
    { 5986, "chateau_lawn", "chatwin02_law" },
    { 5986, "chateau_lawn", "doorkb_1_256" },
    { 5123, "chemgrnd_las2", "newall1-1" },
    { 5123, "chemgrnd_las2", "newall1-3seamless" },
    { 5123, "chemgrnd_las2", "sanpedock997" },
    { 5123, "chemgrnd_las2", "sanpedock999" },
    { 5123, "chemgrnd_las2", "sjmhicut5las" },
    { 5123, "chemgrnd_las2", "Was_side" },
    { 10252, "chgatedes", "corrugated2" },
    { 2930, "chgatex", "NOPARK" },
    { 5444, "chicano10_lae", "compfence1_LAe" },
    { 5444, "chicano10_lae", "comptsign4_LAe" },
    { 5444, "chicano10_lae", "comptsign5_LAe" },
    { 5444, "chicano10_lae", "comptsign8_LAe" },
    { 5444, "chicano10_lae", "comptwall10" },
    { 5444, "chicano10_lae", "comptwall15" },
    { 5444, "chicano10_lae", "comptwall32" },
    { 5444, "chicano10_lae", "comptwall5" },
    { 5444, "chicano10_lae", "crakwall1_LAe2" },
    { 5444, "chicano10_lae", "desmuddesgrsblend_sw" },
    { 5444, "chicano10_lae", "downtwin16" },
    { 5444, "chicano10_lae", "downtwin4" },
    { 5444, "chicano10_lae", "eris_5" },
    { 5444, "chicano10_lae", "frame_LA" },
    { 5444, "chicano10_lae", "gangshop2_LAe" },
    { 5444, "chicano10_lae", "gangshop8_LAe" },
    { 5444, "chicano10_lae", "gangsign5_LAe" },
    { 5444, "chicano10_lae", "GB_nastybar22" },
    { 5444, "chicano10_lae", "gm_labuld2_d" },
    { 5444, "chicano10_lae", "grassdeadbrn256" },
    { 5444, "chicano10_lae", "g_256" },
    { 5444, "chicano10_lae", "heat_04" },
    { 5444, "chicano10_lae", "newall7" },
    { 5444, "chicano10_lae", "santall4" },
    { 5444, "chicano10_lae", "ws_garagedoor2_green" },
    { 5449, "chicanotr1_lae", "eb_firesc1_LAe2" },
    { 5449, "chicanotr1_lae", "eb_firesc2_LAe2" },
    { 5449, "chicanotr1_lae", "fireesc1_LAe" },
    { 5449, "chicanotr1_lae", "lasjmfnce1" },
    { 5449, "chicanotr1_lae", "sunsfire1b_LAw" },
    { 5449, "chicanotr1_lae", "sunsfire1_LAw" },
    { 2215, "chick_tray", "bucket_cb" },
    { 2215, "chick_tray", "dip32" },
    { 2215, "chick_tray", "friesbox_cb" },
    { 2215, "chick_tray", "plaincup_cb" },
    { 2215, "chick_tray", "strawroof_cb" },
    { 10031, "chinatown2", "patio1" },
    { 10031, "chinatown2", "rooftiles4" },
    { 10031, "chinatown2", "rooftiles4b" },
    { 10031, "chinatown2", "ws_plasterwall2" },
    { 10031, "chinatown2", "ws_red_wood2" },
    { 10031, "chinatown2", "ws_trans_window1" },
    { 8639, "chinatownmall", "ctmall01_128" },
    { 8639, "chinatownmall", "ctmall02_64" },
    { 8639, "chinatownmall", "ctmall03_64" },
    { 8639, "chinatownmall", "ctmall04_64" },
    { 8639, "chinatownmall", "ctmall05" },
    { 8639, "chinatownmall", "ctmall06" },
    { 8639, "chinatownmall", "ctmall07" },
    { 8639, "chinatownmall", "ctmall08" },
    { 8639, "chinatownmall", "ctmall10_64" },
    { 8639, "chinatownmall", "ctmall11_64" },
    { 8639, "chinatownmall", "ctmall12_128" },
    { 8639, "chinatownmall", "ctmall13" },
    { 8639, "chinatownmall", "ctmall15_128" },
    { 8639, "chinatownmall", "ctmall16_128" },
    { 8639, "chinatownmall", "ctmall17_128" },
    { 8639, "chinatownmall", "ctmall18_64" },
    { 8639, "chinatownmall", "ctmall19_128" },
    { 8639, "chinatownmall", "ctmallsign01_128" },
    { 8639, "chinatownmall", "ziplogo1_128" },
    { 9494, "chinatownsfe", "awning1_SFe" },
    { 9494, "chinatownsfe", "awning2T_SFe" },
    { 9494, "chinatownsfe", "awning3_SFe" },
    { 9494, "chinatownsfe", "chtown4_sf" },
    { 9494, "chinatownsfe", "chtown5_sf" },
    { 9494, "chinatownsfe", "chtown6_sf" },
    { 9494, "chinatownsfe", "chtown7_sf" },
    { 9494, "chinatownsfe", "chtown8_sf" },
    { 9494, "chinatownsfe", "chtown9_sf" },
    { 9494, "chinatownsfe", "chtown_brightcarcafe" },
    { 9494, "chinatownsfe", "chtown_todaydayrestaurant" },
    { 9494, "chinatownsfe", "partition_gz" },
    { 9494, "chinatownsfe", "rooftop_gz1" },
    { 9494, "chinatownsfe", "sf_chinashop1" },
    { 9494, "chinatownsfe", "sf_chinashopground" },
    { 9494, "chinatownsfe", "sf_windos_11a" },
    { 9494, "chinatownsfe", "sf_windos_11b" },
    { 9494, "chinatownsfe", "sf_windos_11wall" },
    { 9494, "chinatownsfe", "sf_windos_12a" },
    { 9494, "chinatownsfe", "sf_windos_12b" },
    { 9494, "chinatownsfe", "sf_windos_12_wall" },
    { 9494, "chinatownsfe", "sf_windos_13a" },
    { 9494, "chinatownsfe", "sf_windos_13b" },
    { 9494, "chinatownsfe", "sf_windos_14b" },
    { 9494, "chinatownsfe", "wallwash128" },
    { 9494, "chinatownsfe", "Was_scrpyd_baler_floor" },
    { 9494, "chinatownsfe", "woozie_hall" },
    { 1568, "china_light", "chinlite_sfe" },
    { 14571, "chinese_furn", "ab_tv_noise" },
    { 14571, "chinese_furn", "ab_tv_tricas1" },
    { 14571, "chinese_furn", "ab_tv_tricas2" },
    { 14571, "chinese_furn", "chinese9" },
    { 14571, "chinese_furn", "chinese9b" },
    { 1859, "chips2", "chip_stck1" },
    { 1859, "chips2", "chip_stck2" },
    { 1859, "chips2", "chip_stck3" },
    { 1859, "chips2", "chip_stck4" },
    { 1859, "chips2", "chip_stck5" },
    { 1859, "chips2", "chip_stck6" },
    { 1859, "chips2", "indx_chip132" },
    { 1859, "chips2", "indx_chip164" },
    { 1859, "chips2", "indx_chip232" },
    { 1859, "chips2", "indx_chip264" },
    { 1859, "chips2", "indx_chip332" },
    { 1859, "chips2", "indx_chip364" },
    { 1859, "chips2", "indx_chip432" },
    { 1859, "chips2", "indx_chip464" },
    { 1859, "chips2", "indx_chip532" },
    { 1859, "chips2", "indx_chip564" },
    { 1859, "chips2", "indx_chip632" },
    { 1859, "chips2", "indx_chip664" },
    { 8680, "chnatwnfnce", "ctmallfence" },
    { 3007, "chopcopx", "LAPDM2" },
    { 9931, "churchsfe", "church_sfe1" },
    { 9931, "churchsfe", "church_sfe2" },
    { 9931, "churchsfe", "church_sfe3" },
    { 9931, "churchsfe", "church_sfe4" },
    { 9931, "churchsfe", "church_sfe5" },
    { 9931, "churchsfe", "gravelkb_128" },
    { 9931, "churchsfe", "pier69_roof1" },
    { 9931, "churchsfe", "posh_eagle3_sfe" },
    { 3044, "ciggarx", "ciggy_burn" },
    { 3044, "ciggarx", "CJ_bark" },
    { 3044, "ciggarx", "CJ_KITCHDOOR" },
    { 3027, "ciggyx", "ciggy" },
    { 17851, "cinemart_alpha", "autoarrow_lae2" },
    { 17851, "cinemart_alpha", "carwash_sign" },
    { 17851, "cinemart_alpha", "kb_ivy2_256" },
    { 17851, "cinemart_alpha", "lasjmslumwud2" },
    { 17851, "cinemart_alpha", "shadow_law" },
    { 3980, "cityhall_lan", "bevdoor03_law" },
    { 3980, "cityhall_lan", "cityhalldoor1" },
    { 3980, "cityhall_lan", "cityhallroof" },
    { 3980, "cityhall_lan", "cityhalltow1" },
    { 3980, "cityhall_lan", "cityhalltow2" },
    { 3980, "cityhall_lan", "citywall1" },
    { 3980, "cityhall_lan", "citywall2" },
    { 3980, "cityhall_lan", "citywall3" },
    { 3980, "cityhall_lan", "citywall4" },
    { 3980, "cityhall_lan", "citywall5" },
    { 3980, "cityhall_lan", "citywin1" },
    { 3980, "cityhall_lan", "LAcityhwal1" },
    { 3980, "cityhall_lan", "LAcityhwin1" },
    { 3980, "cityhall_lan", "LAcityhwin2" },
    { 3980, "cityhall_lan", "man_cellarfloor128" },
    { 3980, "cityhall_lan", "sl_LAbedingsoil" },
    { 10377, "cityhall_sfs", "banding4_64HV" },
    { 10377, "cityhall_sfs", "ws_artgallery" },
    { 10377, "cityhall_sfs", "ws_artgallery3" },
    { 10377, "cityhall_sfs", "ws_bigblackdoor" },
    { 10377, "cityhall_sfs", "ws_cityhall1" },
    { 10377, "cityhall_sfs", "ws_cityhall2" },
    { 10377, "cityhall_sfs", "ws_cityhall3" },
    { 10377, "cityhall_sfs", "ws_cityhall4" },
    { 10377, "cityhall_sfs", "ws_cityhall5" },
    { 10377, "cityhall_sfs", "ws_cityhall6" },
    { 10377, "cityhall_sfs", "ws_cityhall7" },
    { 10377, "cityhall_sfs", "ws_cityhall8" },
    { 10377, "cityhall_sfs", "ws_cityhall9" },
    { 10377, "cityhall_sfs", "ws_concretenew_step" },
    { 10377, "cityhall_sfs", "ws_copart1" },
    { 10377, "cityhall_sfs", "ws_copart2" },
    { 10377, "cityhall_sfs", "ws_copart3" },
    { 10377, "cityhall_sfs", "ws_oldoffice2" },
    { 10377, "cityhall_sfs", "ws_oldoffice4" },
    { 10947, "cityhall_sfse", "ws_oldoffice5" },
    { 10947, "cityhall_sfse", "ws_oldoffice6" },
    { 10947, "cityhall_sfse", "ws_oldoffice7" },
    { 4003, "cityhall_tr_lan", "foliage256" },
    { 4003, "cityhall_tr_lan", "mc_flags1" },
    { 4003, "cityhall_tr_lan", "planta256" },
    { 4003, "cityhall_tr_lan", "sl_griddyfence_sml" },
    { 3979, "civic01_lan", "airportwall_256128" },
    { 3979, "civic01_lan", "bonavenlif_LAn" },
    { 3979, "civic01_lan", "crazy paving" },
    { 3979, "civic01_lan", "nt_bonav1" },
    { 3979, "civic01_lan", "nt_bonav1_refl" },
    { 3979, "civic01_lan", "parking1plain" },
    { 3979, "civic01_lan", "sl_concretewall1" },
    { 3979, "civic01_lan", "sl_dwntwndr1" },
    { 3979, "civic01_lan", "sl_dwntwnshpfrnt1" },
    { 3979, "civic01_lan", "sl_flagstone1" },
    { 3979, "civic01_lan", "sl_laexporail" },
    { 3979, "civic01_lan", "sl_laglasswall1" },
    { 3979, "civic01_lan", "sl_laglasswall2" },
    { 3979, "civic01_lan", "sl_laoffblok2wall1" },
    { 14674, "civic02cj", "ab_hosWallUpr" },
    { 14674, "civic02cj", "hotcarp01_LA" },
    { 14674, "civic02cj", "hotelarch1_LAn" },
    { 14674, "civic02cj", "kb_balcony_ferns" },
    { 14674, "civic02cj", "sl_hoteldr1" },
    { 14674, "civic02cj", "sl_hotelwall1" },
    { 14674, "civic02cj", "sl_hotelwallplain1" },
    { 4001, "civic03_lan", "bailbonds1_LAn" },
    { 4001, "civic03_lan", "bailbonds2_LAn" },
    { 4001, "civic03_lan", "downtshop2_LAn" },
    { 4001, "civic03_lan", "downtshop5_LAn" },
    { 4001, "civic03_lan", "downtshop6_LAn" },
    { 4001, "civic03_lan", "downtsign2_LA" },
    { 4001, "civic03_lan", "downtsign8_LA" },
    { 4001, "civic03_lan", "downtwin10" },
    { 4001, "civic03_lan", "downtwin11" },
    { 4001, "civic03_lan", "downtwin2" },
    { 4001, "civic03_lan", "downtwin2b" },
    { 4001, "civic03_lan", "downtwin6" },
    { 4001, "civic03_lan", "gymshop2_LAe" },
    { 4001, "civic03_lan", "pediments1" },
    { 4001, "civic03_lan", "sidelatino1_LAe" },
    { 4001, "civic03_lan", "sl_shopshttr1" },
    { 4001, "civic03_lan", "twintWall2_LAn" },
    { 4001, "civic03_lan", "ws_rottenwall" },
    { 3998, "civic04_lan", "alleydoor6" },
    { 3998, "civic04_lan", "hosdoor01_law" },
    { 3998, "civic04_lan", "officblokA2_LAn" },
    { 3998, "civic04_lan", "sl_crthoosedg1" },
    { 3998, "civic04_lan", "sl_crthooswall1" },
    { 3998, "civic04_lan", "sl_crthooswall2" },
    { 3998, "civic04_lan", "sl_dtwn1win1" },
    { 3998, "civic04_lan", "sl_dtwn1win2" },
    { 3998, "civic04_lan", "sl_prisongate1" },
    { 3998, "civic04_lan", "twintconc_LAn" },
    { 3998, "civic04_lan", "twintWall1_LAn" },
    { 3998, "civic04_lan", "twintWin1_LAn" },
    { 3998, "civic04_lan", "twintWin2_LAn" },
    { 3988, "civic06_lan", "awningsides1" },
    { 3988, "civic06_lan", "Bow_stained_wall" },
    { 3988, "civic06_lan", "casinobulb2_128" },
    { 3988, "civic06_lan", "discware1_LAe2" },
    { 3988, "civic06_lan", "downtshop4_LAn" },
    { 3988, "civic06_lan", "downtsign1_LA" },
    { 3988, "civic06_lan", "downtsign4_LA" },
    { 3988, "civic06_lan", "downtsign5_LA" },
    { 3988, "civic06_lan", "downtsign6_LA" },
    { 3988, "civic06_lan", "downtsign7_LA" },
    { 3988, "civic06_lan", "downtwin3" },
    { 3988, "civic06_lan", "downtwin5" },
    { 3988, "civic06_lan", "downtwin6det" },
    { 3988, "civic06_lan", "downtwin7" },
    { 3988, "civic06_lan", "downtwin8" },
    { 3988, "civic06_lan", "downtwin9" },
    { 3988, "civic06_lan", "LAcityhwal2" },
    { 3988, "civic06_lan", "pediments2" },
    { 3988, "civic06_lan", "shopawning1_LAn" },
    { 3988, "civic06_lan", "tradecentre1" },
    { 4004, "civic07_lan", "badmarb1_LAn" },
    { 4004, "civic07_lan", "column1_LAn" },
    { 4004, "civic07_lan", "downtshop10_LAn" },
    { 4004, "civic07_lan", "downtshop8_LAn" },
    { 4004, "civic07_lan", "downtshop9_LAn" },
    { 4004, "civic07_lan", "downtsign10_LA" },
    { 4004, "civic07_lan", "downtsign11_LA" },
    { 4004, "civic07_lan", "downtsign9_LA" },
    { 4004, "civic07_lan", "downtwin12" },
    { 4004, "civic07_lan", "downtwin14" },
    { 4004, "civic07_lan", "downtwin14det" },
    { 4004, "civic07_lan", "downtwin15" },
    { 4004, "civic07_lan", "downtwin9det" },
    { 4004, "civic07_lan", "hollywin02_LAw" },
    { 4004, "civic07_lan", "odddoor1_LAn" },
    { 4004, "civic07_lan", "oldbrwall1_LA" },
    { 4004, "civic07_lan", "oldbrwall2_LA" },
    { 4004, "civic07_lan", "restrauntfront1_256" },
    { 4004, "civic07_lan", "sf_windos_10" },
    { 4004, "civic07_lan", "sl_dwntwncanpy1" },
    { 4004, "civic07_lan", "sl_rotnbrik" },
    { 4569, "civic1_lan2", "posh_eagle10_sfe" },
    { 4569, "civic1_lan2", "posh_eagle11_sfe" },
    { 4569, "civic1_lan2", "posh_eagle12_sfe" },
    { 4569, "civic1_lan2", "posh_eagle13_sfe" },
    { 4569, "civic1_lan2", "posh_eagle14_sfe" },
    { 4569, "civic1_lan2", "posh_eagle1_sfe" },
    { 4569, "civic1_lan2", "posh_eagle2_sfe" },
    { 4569, "civic1_lan2", "posh_eagle4_sfe" },
    { 3776, "ci_studio", "aircon" },
    { 3776, "ci_studio", "bdoor" },
    { 3776, "ci_studio", "cdoor" },
    { 3776, "ci_studio", "stageside1" },
    { 3776, "ci_studio", "studioroof" },
    { 5706, "ci_studio5", "astagesign" },
    { 5706, "ci_studio5", "Bow_sidewalk" },
    { 5706, "ci_studio5", "ci_entrwind1" },
    { 5706, "ci_studio5", "corugwall1" },
    { 5706, "ci_studio5", "rustytank" },
    { 5706, "ci_studio5", "studcov01_law" },
    { 5706, "ci_studio5", "studiowall1" },
    { 5706, "ci_studio5", "studiowall3_law" },
    { 5706, "ci_studio5", "studoor01_law" },
    { 5706, "ci_studio5", "tw@t_wall1" },
    { 1738, "cjtemp", "CJ_bed1" },
    { 1738, "cjtemp", "CJ_BED_BASE" },
    { 1738, "cjtemp", "CJ_MAT1" },
    { 1738, "cjtemp", "cj_Mattress2" },
    { 1738, "cjtemp", "cj_Mattress5" },
    { 1738, "cjtemp", "cj_radiatorOLD" },
    { 1738, "cjtemp", "CJ_SWEETS" },
    { 3967, "cj_airprt", "bigbrick" },
    { 3967, "cj_airprt", "ceiling_256" },
    { 3967, "cj_airprt", "CJ_BLACK_RUB2" },
    { 3967, "cj_airprt", "CJ_G_CHROME" },
    { 3967, "cj_airprt", "cj_juank_1" },
    { 3967, "cj_airprt", "CJ_RUBBER" },
    { 3967, "cj_airprt", "CJ_SHELF_WHITE" },
    { 3967, "cj_airprt", "CJ_tubeside" },
    { 3967, "cj_airprt", "dts_elevator_carpet2" },
    { 3967, "cj_airprt", "new road" },
    { 3967, "cj_airprt", "Road_blank256HV" },
    { 3967, "cj_airprt", "Slabs" },
    { 1736, "cj_ammo", "CJ_Black_metal" },
    { 1736, "cj_ammo", "CJ_BULLETBOX1" },
    { 1736, "cj_ammo", "CJ_CANVAS2" },
    { 1736, "cj_ammo", "CJ_Deer1" },
    { 1736, "cj_ammo", "CJ_GENERATOR3" },
    { 1736, "cj_ammo", "CJ_LIGHTWOOD(E)" },
    { 1736, "cj_ammo", "CJ_mantarget" },
    { 1736, "cj_ammo", "CJ_OIL_DRUM_L0" },
    { 1736, "cj_ammo", "cj_pail" },
    { 1736, "cj_ammo", "CJ_SHEET2HOLES" },
    { 1736, "cj_ammo", "CJ_SLATEDWOOD2" },
    { 1736, "cj_ammo", "CJ_SPEAKER_c" },
    { 1736, "cj_ammo", "CJ_WHEEL1" },
    { 1736, "cj_ammo", "flametin" },
    { 1736, "cj_ammo", "flametin2" },
    { 1736, "cj_ammo", "Star aluminuim" },
    { 2059, "cj_ammo2", "cj_don_post_1" },
    { 2059, "cj_ammo2", "CJ_gunbook1" },
    { 2059, "cj_ammo2", "CJ_gunbook2" },
    { 2059, "cj_ammo2", "cj_rubbish2" },
    { 2068, "cj_ammo_net", "CJ_cammonet" },
    { 2047, "cj_ammo_posters", "CJ_Coltposter" },
    { 2047, "cj_ammo_posters", "cj_flag1" },
    { 2047, "cj_ammo_posters", "cj_flag2" },
    { 2047, "cj_ammo_posters", "CJ_TARGET1" },
    { 2047, "cj_ammo_posters", "CJ_TARGET2" },
    { 2047, "cj_ammo_posters", "CJ_TARGET3" },
    { 18034, "cj_ammun_extra", "CJ_BULLETBOX2" },
    { 18034, "cj_ammun_extra", "CJ_BULLETBOX2b" },
    { 18034, "cj_ammun_extra", "CJ_BULLETBOX2c" },
    { 18034, "cj_ammun_extra", "CJ_BULLETBOX3" },
    { 18034, "cj_ammun_extra", "CJ_BULLETBOXB" },
    { 18034, "cj_ammun_extra", "CJ_BULLETBOXB2" },
    { 18034, "cj_ammun_extra", "CJ_GRIZ" },
    { 18034, "cj_ammun_extra", "CJ_NAIL_AMMO" },
    { 18034, "cj_ammun_extra", "CJ_TAR1" },
    { 18034, "cj_ammun_extra", "mp_gun_box" },
    { 18034, "cj_ammun_extra", "mp_gun_neon" },
    { 2783, "cj_bandit", "slot6" },
    { 2783, "cj_bandit", "slot_bit3" },
    { 2655, "cj_banner", "CJ_ERIS1" },
    { 2655, "cj_banner", "CJ_HEAT1" },
    { 2655, "cj_banner", "CJ_HEAT2" },
    { 2655, "cj_banner", "CJ_MERC_LOGO" },
    { 2655, "cj_banner", "CJ_PRO_2" },
    { 2655, "cj_banner", "CJ_SUBURBAN_1" },
    { 2692, "cj_banner2", "BASE5_1" },
    { 2692, "cj_banner2", "CJ_CARDBOARD" },
    { 2692, "cj_banner2", "CJ_WHEEL_CHAIR1" },
    { 2719, "cj_banner3", "CJ_BINC_1" },
    { 2719, "cj_banner3", "CJ_BINC_2" },
    { 2719, "cj_banner3", "CJ_BINC_3" },
    { 1455, "cj_bar", "CJ_BAR_BOTTLE1" },
    { 1455, "cj_bar", "CJ_BAR_TAP1" },
    { 1455, "cj_bar", "CJ_BAR_TAP2" },
    { 1455, "cj_bar", "CJ_B_TOWEL" },
    { 1455, "cj_bar", "cj_b_tray" },
    { 1455, "cj_bar", "CJ_old_pish" },
    { 1455, "cj_bar", "CJ_SK_Bar" },
    { 1455, "cj_bar", "CJ_SK_DIET_Bar" },
    { 18028, "cj_bar2", "bbar_stuff2" },
    { 18028, "cj_bar2", "CJ_nastybar_D" },
    { 18028, "cj_bar2", "CJ_nastybar_D2" },
    { 18028, "cj_bar2", "CJ_nastybar_D3" },
    { 18028, "cj_bar2", "CJ_nastybar_D4" },
    { 18028, "cj_bar2", "CJ_nastybar_D5" },
    { 18028, "cj_bar2", "CJ_nastybar_D6" },
    { 18028, "cj_bar2", "GB_nastybar01" },
    { 18028, "cj_bar2", "GB_nastybar02" },
    { 18028, "cj_bar2", "GB_nastybar04" },
    { 18028, "cj_bar2", "GB_nastybar05" },
    { 18028, "cj_bar2", "GB_nastybar06" },
    { 18028, "cj_bar2", "GB_nastybar07" },
    { 18028, "cj_bar2", "GB_nastybar08" },
    { 18028, "cj_bar2", "GB_nastybar09" },
    { 18028, "cj_bar2", "GB_nastybar10" },
    { 18028, "cj_bar2", "GB_nastybar13" },
    { 18028, "cj_bar2", "GB_nastybar15" },
    { 18028, "cj_bar2", "GB_nastybar17" },
    { 18081, "cj_barb", "ab_drawer_unit2" },
    { 18081, "cj_barb", "ab_leather_strips" },
    { 18081, "cj_barb", "ab_marble_checks" },
    { 18081, "cj_barb", "ab_panel_woodgrime" },
    { 18081, "cj_barb", "ab_sink_barber" },
    { 18081, "cj_barb", "ab_window_plastic" },
    { 18081, "cj_barb", "barberschr1" },
    { 18081, "cj_barb", "barberschr2" },
    { 18081, "cj_barb", "barberschr3" },
    { 18081, "cj_barb", "barberschr4" },
    { 18081, "cj_barb", "barberschr5" },
    { 18081, "cj_barb", "barberschr6" },
    { 18081, "cj_barb", "barberschr7b" },
    { 18081, "cj_barb", "barberspic1" },
    { 18081, "cj_barb", "barberspic2" },
    { 18081, "cj_barb", "barberspic3" },
    { 18081, "cj_barb", "CJ_TILES_5" },
    { 18081, "cj_barb", "cj_white_wall" },
    { 18081, "cj_barb", "whiteceil_int" },
    { 18027, "cj_barb2", "BLOCK2low" },
    { 18027, "cj_barb2", "CJ_BARB_WIN_1" },
    { 18027, "cj_barb2", "cj_socket" },
    { 18027, "cj_barb2", "interiordoor1_256" },
    { 18027, "cj_barb2", "tile_test3" },
    { 66, "cj_barr_set_1", "banding_blue_64HV" },
    { 66, "cj_barr_set_1", "Stop2_64" },
    { 2691, "cj_base5", "base5_2" },
    { 2691, "cj_base5", "base5_6" },
    { 2691, "cj_base5", "base5_8" },
    { 2514, "cj_bathroom", "CJ_CANVAS" },
    { 2514, "cj_bathroom", "CJ_PILLOWCASE" },
    { 2514, "cj_bathroom", "cj_toilet" },
    { 1700, "cj_beds", "bed_test" },
    { 1700, "cj_beds", "CJ_MATRESS2" },
    { 1700, "cj_beds", "kbedhead" },
    { 1700, "cj_beds", "kbedside" },
    { 1700, "cj_beds", "kb_sheet_pilay2" },
    { 2729, "cj_binc_sign", "BINC_hooded" },
    { 2729, "cj_binc_sign", "BINC_pshirts" },
    { 2729, "cj_binc_sign", "BINC_tshirt" },
    { 1343, "cj_bins", "Miamibin" },
    { 1344, "cj_bins2", "CJ_RUBBISH1" },
    { 2659, "cj_bobo", "cj_bobo" },
    { 2659, "cj_bobo", "CJ_BOBO_BAN" },
    { 2430, "cj_burg_sign", "CJ_BS_BAG" },
    { 2430, "cj_burg_sign", "cj_bs_cup" },
    { 2430, "cj_burg_sign", "CJ_BS_MENU1" },
    { 2430, "cj_burg_sign", "CJ_BS_MENU2" },
    { 2430, "cj_burg_sign", "CJ_BS_MENU3" },
    { 2430, "cj_burg_sign", "CJ_BS_MENU4" },
    { 2765, "cj_cb_sign", "CJ_CB_POST1" },
    { 2765, "cj_cb_sign", "CJ_PIZZA_MENU2" },
    { 958, "cj_chip_maker", "CJ_CHIP_M" },
    { 958, "cj_chip_maker", "CJ_Y_GENERATORDETAIL" },
    { 2669, "cj_chris", "Bow_Fence_Metal" },
    { 2669, "cj_chris", "CJ_Floral" },
    { 2669, "cj_chris", "CJ_Grate" },
    { 2669, "cj_chris", "cj_metalplate2" },
    { 2669, "cj_chris", "CJ_plating3" },
    { 2669, "cj_chris", "Gen_Chain" },
    { 2681, "cj_coin_op", "CJ_COINOP1" },
    { 2681, "cj_coin_op", "CJ_COINOP2" },
    { 2681, "cj_coin_op", "CJ_COINOP3" },
    { 2640, "cj_coin_op_2", "CJ_POKERSCREEN" },
    { 2640, "cj_coin_op_2", "CJ_POKERSCREEN2" },
    { 2640, "cj_coin_op_2", "CJ_TV1" },
    { 1733, "cj_commercial", "CJ_DRINKS_CHOICE" },
    { 1733, "cj_commercial", "CJ_SPRUNK_FRONT" },
    { 1733, "cj_commercial", "CJ_S_VENDOR" },
    { 2941, "cj_commerciax", "Gen_Till" },
    { 960, "cj_crate_will", "CJ_FLIGHT_CASE" },
    { 960, "cj_crate_will", "CJ_FLIGHT_CASE2" },
    { 936, "cj_dfext", "ws_cf_lamp" },
    { 18102, "cj_dl2", "CJ_DISCO(L1)64" },
    { 18102, "cj_dl2", "CJ_DISCO(L2)64" },
    { 18102, "cj_dl2", "CJ_DISCO(L3)64" },
    { 18102, "cj_dl2", "CJ_DISCO(L4)64" },
    { 2432, "cj_don_sign", "cj_don_post_2" },
    { 2432, "cj_don_sign", "cj_don_post_3" },
    { 2879, "cj_ds_door", "CJ_DS_DOOR_256_" },
    { 1349, "cj_dyn_prop", "CJ_AIRPLOGO" },
    { 1349, "cj_dyn_prop", "CJ_STROLLY" },
    { 1718, "cj_electrical", "CJ_MONITER1" },
    { 1718, "cj_electrical", "cj_video3(TOP)" },
    { 1718, "cj_electrical", "CJ_VIDEOFRONTS" },
    { 1718, "cj_electrical", "spbx_big" },
    { 1718, "cj_electrical", "spbx_big2" },
    { 18031, "cj_exp", "chinosbiege" },
    { 18031, "cj_exp", "chinosblue" },
    { 18031, "cj_exp", "CJ_DS_WINDOW" },
    { 18031, "cj_exp", "mp_cloth_ds3" },
    { 18031, "cj_exp", "mp_cloth_ds4" },
    { 18031, "cj_exp", "mp_cloth_wall" },
    { 18031, "cj_exp", "mp_furn_floor" },
    { 1370, "cj_exp_props", "CJ_GAS_CAN" },
    { 955, "cj_ext_vend", "CJ_SPRUNK_DIRTY" },
    { 2415, "cj_ff", "CJ_cooker4" },
    { 2415, "cj_ff", "CJ_KITCHEN_DETAIL" },
    { 2420, "cj_ff_acc1", "CJ_Bbq" },
    { 2420, "cj_ff_acc1", "CJ_BS_MENU4s" },
    { 2420, "cj_ff_acc1", "CJ_MICROPANEL" },
    { 2420, "cj_ff_acc1", "CJ_OPEN" },
    { 2420, "cj_ff_acc1", "CJ_TILL1" },
    { 2420, "cj_ff_acc1", "pepperonip" },
    { 2718, "cj_ff_acc2", "CJ_FLY_TUBE" },
    { 2718, "cj_ff_acc2", "GRATE" },
    { 2423, "cj_ff_counters", "CJ_COUNTER2" },
    { 2423, "cj_ff_counters", "CJ_COUNTER_TILES" },
    { 2423, "cj_ff_counters", "CJ_Laminate1" },
    { 2423, "cj_ff_counters", "CJ_TILES_3" },
    { 2423, "cj_ff_counters", "CJ_worktop" },
    { 2423, "cj_ff_counters", "shop_floor1" },
    { 1730, "cj_furniture", "CJ-COUCHL2" },
    { 1730, "cj_furniture", "CJ_books" },
    { 1730, "cj_furniture", "CJ_WOOD5" },
    { 2028, "cj_games", "CJ_CONSOLETOP" },
    { 2028, "cj_games", "cj_console_cont1" },
    { 2028, "cj_games", "cj_console_cont2" },
    { 2028, "cj_games", "CJ_speaker4" },
    { 2875, "cj_gash", "CJ_ZIP_3" },
    { 2749, "cj_hair", "cj_spec" },
    { 2749, "cj_hair", "HAIR_STUFF" },
    { 1809, "cj_hi_fi", "CJ_HI_FI" },
    { 1809, "cj_hi_fi", "CJ_HI_FI_1" },
    { 1809, "cj_hi_fi", "CJ_SPEAKER1" },
    { 1809, "cj_hi_fi", "CJ_speaker_6" },
    { 1809, "cj_hi_fi", "cj_speaker_s" },
    { 2225, "cj_hi_fi2", "CJ_SPEAKER2" },
    { 2225, "cj_hi_fi2", "CJ_SPEAKER3" },
    { 2570, "cj_hotel", "nt_phone1" },
    { 2570, "cj_hotel", "nt_phone2" },
    { 2575, "cj_hotel_poor", "CJ_mattress" },
    { 2562, "cj_hotel_sw", "CJ-COUCHL1" },
    { 2098, "cj_int", "CJ_CHINA_SCRIPT" },
    { 2098, "cj_int", "CJ_GREEN_WOOD" },
    { 2098, "cj_int", "CJ_RED_WOOD" },
    { 2425, "cj_jucie", "CJ_SPRUNK_F" },
    { 2425, "cj_jucie", "CJ_SPRUNK_FRONT2" },
    { 2127, "cj_kitchen", "CJ_RED" },
    { 2127, "cj_kitchen", "FORMICA2" },
    { 2127, "cj_kitchen", "marble2" },
    { 1731, "cj_lighting", "CJ_BASKET" },
    { 1731, "cj_lighting", "CJ_FILLIMENT" },
    { 1731, "cj_lighting", "CJ_lightshade" },
    { 1731, "cj_lighting", "cj_plantpot" },
    { 1731, "cj_lighting", "CJ_PLANT_POT" },
    { 1731, "cj_lighting", "CJ_WICKER1" },
    { 2803, "cj_meaty", "CJ_Canvas3" },
    { 2803, "cj_meaty", "CJ_FLESH_1" },
    { 2803, "cj_meaty", "CJ_FLESH_2" },
    { 1701, "cj_med_beds", "CJ_BROWN_WOOL" },
    { 1701, "cj_med_beds", "CJ_DUVET1" },
    { 1701, "cj_med_beds", "CJ_LINEN1" },
    { 1701, "cj_med_beds", "kb_bed_final2" },
    { 1550, "cj_money_bags", "CJ_KIT_BAG" },
    { 1550, "cj_money_bags", "money_128" },
    { 1570, "cj_noodle_1", "CJ_Canvas2" },
    { 1371, "cj_novelty_bins", "CJ_HIPPO" },
    { 1714, "cj_office", "beige_64" },
    { 1714, "cj_office", "BLUE_FABRIC" },
    { 1714, "cj_office", "chromepipe2_32hv" },
    { 1714, "cj_office", "cj_binders" },
    { 1714, "cj_office", "CJ_chiller" },
    { 1714, "cj_office", "CJ_CUSHION2" },
    { 1714, "cj_office", "CJ_DESK" },
    { 1714, "cj_office", "CJ_FILE" },
    { 1714, "cj_office", "CJ_photocopier" },
    { 1714, "cj_office", "CJ_PLASTIC" },
    { 1714, "cj_office", "cl_highbak" },
    { 1714, "cj_office", "est_chair" },
    { 1714, "cj_office", "filing_cab_mtl" },
    { 1714, "cj_office", "la_kitch1" },
    { 1714, "cj_office", "la_kitch2" },
    { 1714, "cj_office", "la_kitch3" },
    { 1714, "cj_office", "of_key_256" },
    { 1714, "cj_office", "of_monitor_256" },
    { 1714, "cj_office", "redFabric" },
    { 1714, "cj_office", "white32" },
    { 2065, "cj_off_new", "CJ_FILLING2" },
    { 2065, "cj_off_new", "filling" },
    { 2065, "cj_off_new", "filling3" },
    { 2645, "cj_piz_sign", "CJ_PIZZA_MEN1" },
    { 2645, "cj_piz_sign", "CJ_PIZZA_MEN2" },
    { 2645, "cj_piz_sign", "CJ_PIZZA_MEN3" },
    { 2645, "cj_piz_sign", "CJ_PIZZA_MENU1" },
    { 1360, "cj_plant_props", "Bucket_bump" },
    { 1360, "cj_plant_props", "CJ_PLANT" },
    { 2876, "cj_pro", "CJ_PRO_DOOR_256_" },
    { 2347, "cj_reels", "cj_wheel_69256" },
    { 2347, "cj_reels", "cj_wheel_B1256" },
    { 2347, "cj_reels", "cj_wheel_B2256" },
    { 2347, "cj_reels", "cj_wheel_Bell256" },
    { 2347, "cj_reels", "cj_wheel_Cherry256" },
    { 2347, "cj_reels", "cj_wheel_Grape256" },
    { 1716, "cj_seating", "bras2_base" },
    { 1716, "cj_seating", "cj_cushion1" },
    { 1716, "cj_seating", "CJ_RED_FABRIC" },
    { 1716, "cj_seating", "CJ_SHINYWOOD" },
    { 2577, "cj_sex", "CJ_PAINTING9" },
    { 2577, "cj_sex", "CJ_PORNO_VIDS" },
    { 2577, "cj_sex", "CJ_PORNO_VIDS2" },
    { 2577, "cj_sex", "CJ_PORNO_VIDS3" },
    { 2577, "cj_sex", "CJ_PORNO_VIDS4" },
    { 2577, "cj_sex", "CJ_PORN_SIGNS" },
    { 2577, "cj_sex", "CJ_PORN_SIGNS2" },
    { 2577, "cj_sex", "CJ_videos" },
    { 2577, "cj_sex", "gun_dildo1" },
    { 2577, "cj_sex", "gun_dildo2" },
    { 2577, "cj_sex", "gun_dildo3" },
    { 2577, "cj_sex", "gun_dildo4" },
    { 1746, "cj_sofa", "CJ_FAB1" },
    { 1746, "cj_sofa", "CJ_FAB2" },
    { 1746, "cj_sofa", "cj_fab3" },
    { 1746, "cj_sofa", "CJ_FAB4" },
    { 1746, "cj_sofa", "CJ_WOOD_RUN" },
    { 2541, "cj_ss_1", "CJ_7_11_edge" },
    { 2541, "cj_ss_1", "CJ_BBQ_BAG" },
    { 2541, "cj_ss_1", "CJ_CEREAL" },
    { 2541, "cj_ss_1", "cj_juice" },
    { 2541, "cj_ss_1", "cj_juice2" },
    { 2541, "cj_ss_1", "cj_juice_can" },
    { 2541, "cj_ss_1", "CJ_LUBE_1" },
    { 2541, "cj_ss_1", "GB_foodwrap01" },
    { 2538, "cj_ss_2", "CJ_ICECREAM" },
    { 2538, "cj_ss_2", "CJ_milk" },
    { 2538, "cj_ss_2", "CJ_milk2" },
    { 2538, "cj_ss_2", "CJ_MILK_BOTTLE" },
    { 2538, "cj_ss_2", "pizzalid" },
    { 2543, "cj_ss_3", "CJ_DOG_FOOD2" },
    { 2543, "cj_ss_3", "CJ_DOOG_FOOD" },
    { 2535, "cj_ss_4", "CJ_FISHY" },
    { 1348, "cj_street_props", "CJ_o2Tank" },
    { 1795, "cj_s_beds", "CJ_MATRESS3" },
    { 1737, "cj_tables", "FORMICA1" },
    { 1350, "cj_traffic", "CJ_sign6" },
    { 1717, "cj_tv", "CJ_STEEL" },
    { 1717, "cj_tv", "CJ_TV2" },
    { 1717, "cj_tv", "green_glass_64" },
    { 1717, "cj_tv", "tv_1" },
    { 2624, "cj_urb", "cj_bricks" },
    { 2624, "cj_urb", "CJ_PRO_1" },
    { 2624, "cj_urb", "cj_sport_counter1" },
    { 2624, "cj_urb", "counter2" },
    { 2878, "cj_vic", "CJ_VICT_DOOR" },
    { 1782, "cj_video", "CJ_VIDEO5" },
    { 2732, "cj_zip_sign", "CJ_ZIP_1" },
    { 2732, "cj_zip_sign", "CJ_ZIP_2" },
    { 2732, "cj_zip_sign", "CJ_ZIP_4" },
    { 2381, "cloth_trackies", "trackTr" },
    { 2381, "cloth_trackies", "trackTrblue" },
    { 2381, "cloth_trackies", "tracktrgang" },
    { 2381, "cloth_trackies", "trackTrpro" },
    { 2374, "cloth_track_t", "shirtshortblu" },
    { 2374, "cloth_track_t", "sweatrstar" },
    { 2374, "cloth_track_t", "trackytop1pro" },
    { 2374, "cloth_track_t", "trackytop2eris" },
    { 2374, "cloth_track_t", "tshirterisyell" },
    { 10606, "cluckbell_sfs", "roof04L256" },
    { 10606, "cluckbell_sfs", "tgogg4_256" },
    { 10606, "cluckbell_sfs", "vgncarwash3_256" },
    { 10606, "cluckbell_sfs", "vgndwntwnrf1_256" },
    { 10606, "cluckbell_sfs", "ws_nicepave" },
    { 10606, "cluckbell_sfs", "ws_reinforcedbutwonky_small" },
    { 3093, "cntdrrkx", "sjmbigold4" },
    { 3093, "cntdrrkx", "sjmbigold5" },
    { 11550, "cn_nwbrigstuff", "blendrock2grgrass" },
    { 11550, "cn_nwbrigstuff", "dam_genbeam" },
    { 11550, "cn_nwbrigstuff", "desbar" },
    { 11550, "cn_nwbrigstuff", "des_facmetal" },
    { 11550, "cn_nwbrigstuff", "rocktbrn128blndlit" },
    { 11550, "cn_nwbrigstuff", "Tar_1linefreewy" },
    { 11558, "cn_substation", "des_pylon2" },
    { 9902, "coastground", "coasty_bit4_sfe" },
    { 9902, "coastground", "coasty_bit_sfe" },
    { 9902, "coastground", "coasty_fencet_sfe" },
    { 9902, "coastground", "pierbuild_btm2" },
    { 9902, "coastground", "pierbuild_btm3" },
    { 9902, "coastground", "pierbuild_roof1" },
    { 9902, "coastground", "pierbuild_top1" },
    { 9902, "coastground", "pierbuild_top2" },
    { 17562, "coast_apts", "apartmentwin5_256" },
    { 17562, "coast_apts", "Concrete_rough_256" },
    { 17562, "coast_apts", "forlease_law" },
    { 17562, "coast_apts", "highshopwall1256" },
    { 17562, "coast_apts", "otb_floor1" },
    { 17562, "coast_apts", "pave_dirty" },
    { 17562, "coast_apts", "scumtiles1_LAe" },
    { 17562, "coast_apts", "sjmhoodoor1" },
    { 17562, "coast_apts", "sjmhoodwin" },
    { 17562, "coast_apts", "skategrnd2" },
    { 17562, "coast_apts", "sl_concslabgrey_64" },
    { 17562, "coast_apts", "snpdhus4" },
    { 17562, "coast_apts", "stonewalls1" },
    { 17562, "coast_apts", "sunpillar01_law" },
    { 17562, "coast_apts", "sunsetmall03b_law" },
    { 17562, "coast_apts", "vendoor01_law" },
    { 17562, "coast_apts", "ws_garagedoor2_yello" },
    { 17562, "coast_apts", "ws_garagedoor4_peach" },
    { 17562, "coast_apts", "yardgrass1" },
    { 5133, "coast_las2", "cos_hiwayout_256" },
    { 5133, "coast_las2", "greyground256sand" },
    { 12846, "coe_offtrackshop", "des_pylon1" },
    { 12846, "coe_offtrackshop", "des_signframe" },
    { 12846, "coe_offtrackshop", "otb_bigsignf" },
    { 3063, "col_wall1x", "ab_wood1" },
    { 3063, "col_wall1x", "motel_wall4" },
    { 3063, "col_wall1x", "mp_burn_wall1" },
    { 3063, "col_wall1x", "mp_burn_wall4" },
    { 3063, "col_wall1x", "mp_diner_ceilingdirt" },
    { 3098, "col_wall2x", "mp_burn_wall2" },
    { 3097, "col_wall3x", "kitchen-wall1" },
    { 2950, "col_wallx", "gangwall2" },
    { 3698, "comedbarrio1_la", "compdoor1_LAe" },
    { 3698, "comedbarrio1_la", "compdoor5_LAe" },
    { 3698, "comedbarrio1_la", "comptwall18" },
    { 3698, "comedbarrio1_la", "comptwall9" },
    { 3698, "comedbarrio1_la", "greenwall2" },
    { 3555, "comedhos1_la", "Bow_dlct_plstrb_gen" },
    { 3555, "comedhos1_la", "Bow_dlct_plstr_cnrb" },
    { 3555, "comedhos1_la", "Bow_dryclean_bricks" },
    { 3555, "comedhos1_la", "Bow_dryclean_wall_upr_crk" },
    { 3555, "comedhos1_la", "Bow_dryclean_wall_upr_crnr" },
    { 3555, "comedhos1_la", "comptdoor1" },
    { 3555, "comedhos1_la", "comptroof1" },
    { 3555, "comedhos1_la", "comptroof2" },
    { 3555, "comedhos1_la", "comptroof3" },
    { 3555, "comedhos1_la", "comptwall2" },
    { 3555, "comedhos1_la", "comptwall4" },
    { 3555, "comedhos1_la", "comptwall6" },
    { 3555, "comedhos1_la", "comptwindo1" },
    { 3555, "comedhos1_la", "comptwindo3" },
    { 3555, "comedhos1_la", "dock1" },
    { 3584, "comedprj1_la", "waljundirt1" },
    { 3584, "comedprj1_la", "walljunkdet1" },
    { 3584, "comedprj1_la", "whiwind1" },
    { 3583, "compapartb_la", "compcouwall3" },
    { 3583, "compapartb_la", "comphosdet1" },
    { 3580, "compapart_la", "awniningsides1" },
    { 3580, "compapart_la", "comptwall11" },
    { 3580, "compapart_la", "crencoudet1" },
    { 3580, "compapart_la", "gableends1" },
    { 3580, "compapart_la", "tancolum1" },
    { 17862, "compomark_lae2", "beachwall3_256" },
    { 17862, "compomark_lae2", "beachwall4_256" },
    { 17862, "compomark_lae2", "grassdirtblend" },
    { 17862, "compomark_lae2", "grasstype7" },
    { 17862, "compomark_lae2", "lasbadwaz3" },
    { 17862, "compomark_lae2", "lasbadwaz4" },
    { 17862, "compomark_lae2", "lasbadwaz6" },
    { 17862, "compomark_lae2", "lasbadwaz9" },
    { 17862, "compomark_lae2", "lasbadwaz9a" },
    { 17862, "compomark_lae2", "sanpshop2" },
    { 17862, "compomark_lae2", "sanpshop6" },
    { 17862, "compomark_lae2", "sanpshop6z" },
    { 17862, "compomark_lae2", "snpedmat92" },
    { 3630, "compthotrans_la", "nbarlid" },
    { 3630, "compthotrans_la", "sanpedock993" },
    { 3630, "compthotrans_la", "sanpedock994" },
    { 3630, "compthotrans_la", "sjmlawarplt" },
    { 3630, "compthotrans_la", "sjmlawarplt3" },
    { 3241, "conhooses", "des_adobedoor1" },
    { 3241, "conhooses", "des_door1" },
    { 3241, "conhooses", "des_dustconc" },
    { 3241, "conhooses", "des_greyboards" },
    { 3241, "conhooses", "des_greyslats" },
    { 3241, "conhooses", "des_hooswin1" },
    { 3241, "conhooses", "des_hooswinwee1" },
    { 3241, "conhooses", "des_whitewin1" },
    { 3241, "conhooses", "des_woodfence1" },
    { 3241, "conhooses", "sanruf" },
    { 3241, "conhooses", "trail_door" },
    { 3241, "conhooses", "trail_wall1" },
    { 3241, "conhooses", "trail_wall2" },
    { 3241, "conhooses", "trail_wheel" },
    { 3241, "conhooses", "trail_win2" },
    { 3241, "conhooses", "ws_corr_metal1" },
    { 17566, "contachou1_lae2", "4winscurt_law" },
    { 17566, "contachou1_lae2", "compdet1" },
    { 17566, "contachou1_lae2", "comptwall26" },
    { 17566, "contachou1_lae2", "comptwall27" },
    { 17566, "contachou1_lae2", "gangwin1_LAe" },
    { 17566, "contachou1_lae2", "gangwin5_LAe" },
    { 17566, "contachou1_lae2", "mp_apt1_woodpanel" },
    { 17566, "contachou1_lae2", "pierplanks02_128" },
    { 17566, "contachou1_lae2", "shingles5" },
    { 17566, "contachou1_lae2", "shingles6" },
    { 17566, "contachou1_lae2", "weelecbox" },
    { 17566, "contachou1_lae2", "woodwarewall1" },
    { 17566, "contachou1_lae2", "ws_peeling2" },
    { 6000, "con_drivein", "Desrtmetal" },
    { 6000, "con_drivein", "drvin_back" },
    { 6000, "con_drivein", "drvin_door1" },
    { 6000, "con_drivein", "drvin_door2" },
    { 6000, "con_drivein", "drvin_front" },
    { 6000, "con_drivein", "drvin_panel" },
    { 6000, "con_drivein", "drvin_screen" },
    { 6000, "con_drivein", "drvin_sign1" },
    { 6000, "con_drivein", "drvin_sign2" },
    { 6000, "con_drivein", "drvin_stuct" },
    { 6000, "con_drivein", "drvin_stuct2" },
    { 6000, "con_drivein", "drvin_wind1" },
    { 6000, "con_drivein", "drvin_wind2" },
    { 11420, "con_stuff", "quarry_ground1" },
    { 17934, "coochieghous", "comptwall16" },
    { 17934, "coochieghous", "sanpednhus1r" },
    { 1977, "cooler1", "kb_cooler2" },
    { 1977, "cooler1", "kb_vend1" },
    { 1977, "cooler1", "kb_vend2" },
    { 1977, "cooler1", "koen_win" },
    { 1977, "cooler1", "shelf_stuff1" },
    { 10028, "copshop_sfe", "dt_cops_US_flag" },
    { 10028, "copshop_sfe", "dt_fire_escape_shit_texture" },
    { 10028, "copshop_sfe", "dt_scyscrap_door2" },
    { 11395, "corvinsign_sfse", "rustb256128" },
    { 11395, "corvinsign_sfse", "shutters" },
    { 12844, "cos_liquorstore", "b_wtilesreflect" },
    { 12844, "cos_liquorstore", "cos_beercab" },
    { 12844, "cos_liquorstore", "cos_berboxes" },
    { 12844, "cos_liquorstore", "cos_liqbots" },
    { 12844, "cos_liquorstore", "cos_liqcounter" },
    { 12844, "cos_liquorstore", "ham_radio" },
    { 12844, "cos_liquorstore", "ws_cleanblock" },
    { 12841, "cos_pizzaplace", "roughmotwall1" },
    { 12841, "cos_pizzaplace", "shutter_64" },
    { 6487, "councl_law2", "711shop1" },
    { 6487, "councl_law2", "asanpdshpsh1a" },
    { 6487, "councl_law2", "grassdeep256" },
    { 6487, "councl_law2", "Grass_lawn_128HV" },
    { 6487, "councl_law2", "lanlabra1_M" },
    { 6487, "councl_law2", "rodeo3sjm" },
    { 6487, "councl_law2", "rodeo4sjm" },
    { 6487, "councl_law2", "rodeo5sjm" },
    { 6487, "councl_law2", "rodwall11_LAw2" },
    { 6487, "councl_law2", "rodwall12_LAw2" },
    { 6487, "councl_law2", "stonewall2_la" },
    { 6487, "councl_law2", "tarmacplain2_bank" },
    { 6487, "councl_law2", "tenniscourt1_256" },
    { 6487, "councl_law2", "tennisnet_64" },
    { 12909, "counte_b2", "sw_barnwood3" },
    { 12909, "counte_b2", "sw_fence03" },
    { 12909, "counte_b2", "sw_watower01" },
    { 3178, "counthousmisc", "corrugated5_64HV" },
    { 3178, "counthousmisc", "shackdoor01" },
    { 3178, "counthousmisc", "shackwall01" },
    { 3178, "counthousmisc", "shackwall02" },
    { 3178, "counthousmisc", "shackwall03" },
    { 3178, "counthousmisc", "shackwood01" },
    { 10399, "countryclbgnd_sfs", "road2_256" },
    { 10399, "countryclbgnd_sfs", "ws_tantiles1btm" },
    { 10396, "countryclbtnis_sfs", "golf_lamp1" },
    { 10396, "countryclbtnis_sfs", "golf_pylon" },
    { 10396, "countryclbtnis_sfs", "Grass_path_128HV" },
    { 10396, "countryclbtnis_sfs", "monobloc_16" },
    { 10396, "countryclbtnis_sfs", "pinkpave" },
    { 10398, "countryclub_sfs", "ferry_build4" },
    { 10398, "countryclub_sfs", "hc_brickwall1" },
    { 10398, "countryclub_sfs", "hc_brickwall2" },
    { 10398, "countryclub_sfs", "hc_roofslates" },
    { 10398, "countryclub_sfs", "hc_wall1" },
    { 10398, "countryclub_sfs", "hc_wall2" },
    { 10398, "countryclub_sfs", "hc_whitewall1" },
    { 10398, "countryclub_sfs", "hc_windos1" },
    { 10398, "countryclub_sfs", "hc_windos2" },
    { 17003, "countrys", "rustc256128" },
    { 17003, "countrys", "topbitwall256" },
    { 17004, "countrys_pch", "des_dam_conc" },
    { 3221, "country_breakable", "banding7_64HV" },
    { 3221, "country_breakable", "BroWFence" },
    { 3221, "country_breakable", "drvin_cable" },
    { 3221, "country_breakable", "drvin_spkr" },
    { 10987, "coveredpath_sfs", "ws_sheetwood" },
    { 11013, "crackdrive_sfse", "ws_asphalt2" },
    { 11013, "crackdrive_sfse", "ws_carskidmarks" },
    { 11088, "crackfactdem_sfs", "ws_altz_wall7burn" },
    { 11088, "crackfactdem_sfs", "ws_altz_wall7_top_burn" },
    { 11088, "crackfactdem_sfs", "ws_dampdoubledoor" },
    { 11010, "crackfact_sfse", "ws_emptywarehouse" },
    { 11010, "crackfact_sfse", "ws_fuckedwin2" },
    { 11085, "crack_intkb", "dt_ammu_flr5" },
    { 11085, "crack_intkb", "ws_metalrafter1" },
    { 1279, "craigpackage", "drugs" },
    { 1381, "cranes_dyn2", "ws_dudelogo" },
    { 1381, "cranes_dyn2", "ws_finalbuild" },
    { 1381, "cranes_dyn2", "ws_oldpaintedyello_b" },
    { 1381, "cranes_dyn2", "ws_sheetsteel" },
    { 1376, "cranes_dyn2_cj", "freighttexpage" },
    { 1376, "cranes_dyn2_cj", "ws_cablehang" },
    { 1376, "cranes_dyn2_cj", "ws_oldpaintedblue" },
    { 2924, "crash3doorx", "villagreen128256" },
    { 916, "crates_n_stuffext", "CJ_CABLEWRAP" },
    { 14477, "crlsbits", "CJ_PLANTPOT" },
    { 14477, "crlsbits", "kb_lightshade" },
    { 14477, "crlsbits", "lightbulb" },
    { 14477, "crlsbits", "newtreeleavesb128" },
    { 13625, "crowds", "ahsjmlabeam" },
    { 13625, "crowds", "ahsjmpostbarx" },
    { 13625, "crowds", "ahstandside" },
    { 13625, "crowds", "crowd" },
    { 4595, "crparkgm_lan2", "gm_LAcarpark1" },
    { 4595, "crparkgm_lan2", "gm_LAcarpark2" },
    { 4595, "crparkgm_lan2", "gm_LAcarparkmuckt" },
    { 4595, "crparkgm_lan2", "parking01_law" },
    { 4595, "crparkgm_lan2", "pavetilealley256128" },
    { 4595, "crparkgm_lan2", "paystation" },
    { 4595, "crparkgm_lan2", "sl_cparkbarrier1" },
    { 4595, "crparkgm_lan2", "sl_dtcparklines1" },
    { 3013, "cr_boxes", "ammo_bx" },
    { 3013, "cr_boxes", "guns_wood" },
    { 2979, "cr_slotsx", "slot5_ind" },
    { 2979, "cr_slotsx", "slot_fr_1" },
    { 2979, "cr_slotsx", "slot_fr_2" },
    { 2979, "cr_slotsx", "slot_fr_3" },
    { 2979, "cr_slotsx", "slot_fr_4" },
    { 2979, "cr_slotsx", "slot_fr_5" },
    { 2979, "cr_slotsx", "slot_fr_6" },
    { 2979, "cr_slotsx", "slot_fr_7" },
    { 2979, "cr_slotsx", "slot_fr_8" },
    { 2979, "cr_slotsx", "slot_fr_9" },
    { 8481, "csrsfence01", "ceasergate01_256" },
    { 8481, "csrsfence01", "ceaserwall03_256" },
    { 8481, "csrsfence01", "ceaserwall06_128" },
    { 8481, "csrsfence01", "ceaserwall08_256" },
    { 8481, "csrsfence01", "sign_Caligulas" },
    { 8480, "csrspalace01", "black32" },
    { 8480, "csrspalace01", "ceasersledge01_128" },
    { 8480, "csrspalace01", "ceasersledge03_128" },
    { 8480, "csrspalace01", "ceasersledge04_128" },
    { 8480, "csrspalace01", "ceaserwall04night_256" },
    { 8480, "csrspalace01", "ceaserwall04_256" },
    { 8480, "csrspalace01", "ceaserwall05_256" },
    { 8480, "csrspalace01", "ceaserwall07_256" },
    { 8480, "csrspalace01", "ceaserwall09_128" },
    { 8480, "csrspalace01", "ceaserwindow01_128" },
    { 8480, "csrspalace01", "vgspawnroof02_128" },
    { 8482, "csrspalace02", "casinolightsyel_128" },
    { 8482, "csrspalace02", "ceasertile01_128" },
    { 8482, "csrspalace02", "ceaserwall10_128" },
    { 8482, "csrspalace02", "ceaserwall11_128" },
    { 8482, "csrspalace02", "marble01_128" },
    { 18231, "cs_coast", "cunt_botrock" },
    { 18231, "cs_coast", "cunt_toprock" },
    { 18231, "cs_coast", "des_dirt2blend" },
    { 18231, "cs_coast", "des_dirt2grgrass" },
    { 18231, "cs_coast", "des_dirt2trackr" },
    { 18231, "cs_coast", "grasstype4" },
    { 18231, "cs_coast", "grasstype4_mudblend" },
    { 18231, "cs_coast", "rocktq128" },
    { 18231, "cs_coast", "rocktq128_grass4blend" },
    { 18449, "cs_ebridge", "stormdrain4_nt" },
    { 18314, "cs_forest", "cuntbrncliffbtmbmp" },
    { 18314, "cs_forest", "cuntbrnclifftop" },
    { 18314, "cs_forest", "cw2_mountdirtscree" },
    { 18314, "cs_forest", "cw2_mountroad" },
    { 18314, "cs_forest", "forestfloor256mudblend" },
    { 18314, "cs_forest", "forestfloor256_blenddirt" },
    { 18314, "cs_forest", "forestfloorblendb" },
    { 18314, "cs_forest", "forestfloorblendded" },
    { 18314, "cs_forest", "grasstype4_forestblend" },
    { 18314, "cs_forest", "rocktq128_forestblend" },
    { 18451, "cs_misc", "car1_128" },
    { 18451, "cs_misc", "car2_128" },
    { 18293, "cs_mountain", "ffbranch_mountdirt" },
    { 18447, "cs_mountaindetail", "cs_rockdetail" },
    { 18368, "cs_mountaintop", "dam_statbase" },
    { 18368, "cs_mountaintop", "des_flatlogs" },
    { 18368, "cs_mountaintop", "des_woodrails" },
    { 18368, "cs_mountaintop", "sw_flag01" },
    { 18369, "cs_roads", "pavebsand256grassblended" },
    { 18369, "cs_roads", "Tar_freewyright" },
    { 3119, "cs_ry_props", "GB_magazine01" },
    { 3119, "cs_ry_props", "GB_magazine04" },
    { 3119, "cs_ry_props", "GB_magazine07" },
    { 3119, "cs_ry_props", "lightgrey" },
    { 3119, "cs_ry_props", "WhiskyBottle" },
    { 18364, "cs_scrapyard", "Was_scrpyd_bale_exh" },
    { 18561, "cs_wbridge", "des_byframe1" },
    { 5069, "ctscene_las", "cleargraf02_LA" },
    { 5069, "ctscene_las", "ruffroadlas" },
    { 3038, "ct_kanx", "ct_lantern" },
    { 3038, "ct_kanx", "ct_rope" },
    { 3038, "ct_kanx", "ct_tastle" },
    { 3039, "ct_salx", "ct_stall1" },
    { 3039, "ct_salx", "ct_stall_stuff1" },
    { 3039, "ct_salx", "ct_umbrela" },
    { 3040, "ct_stabx", "ct_boxes" },
    { 3040, "ct_stabx", "ct_fruit" },
    { 3042, "ct_ventx", "liftdoorsac128" },
    { 6522, "cuntclub_law2", "countclu01_LAw2" },
    { 6522, "cuntclub_law2", "countclu02_LAw2" },
    { 6522, "cuntclub_law2", "helipad_grey1" },
    { 6522, "cuntclub_law2", "marinadoor1_256" },
    { 6522, "cuntclub_law2", "marinawindow1_256" },
    { 6522, "cuntclub_law2", "vgschapelwall01_128" },
    { 15040, "cuntcuts", "AH_pinkcurtain" },
    { 15040, "cuntcuts", "chrome_tube4" },
    { 15040, "cuntcuts", "CsCrackpipe01" },
    { 15040, "cuntcuts", "csnewspaper" },
    { 15040, "cuntcuts", "csnewspaper02" },
    { 15040, "cuntcuts", "cszerocupboard" },
    { 15040, "cuntcuts", "GB_canvas06" },
    { 15040, "cuntcuts", "GB_canvas15" },
    { 15040, "cuntcuts", "GB_canvas17" },
    { 15040, "cuntcuts", "GB_canvas18" },
    { 15040, "cuntcuts", "GB_mike01" },
    { 15040, "cuntcuts", "GB_novels06" },
    { 15040, "cuntcuts", "GB_pendantlmp01" },
    { 15040, "cuntcuts", "GB_phone01" },
    { 15040, "cuntcuts", "GB_phone02" },
    { 15040, "cuntcuts", "GB_swingbin01" },
    { 15040, "cuntcuts", "GB_tile01" },
    { 15040, "cuntcuts", "GB_towel02" },
    { 15040, "cuntcuts", "newspaper1" },
    { 15040, "cuntcuts", "piratesign01_128" },
    { 15040, "cuntcuts", "ws_chipboard" },
    { 13686, "cunte1_lahills", "desmudtrail2" },
    { 13699, "cunte2_lahills", "bevgate01_law" },
    { 13699, "cunte2_lahills", "laposhfence3" },
    { 12809, "cunteroads1", "des_1line256" },
    { 12809, "cunteroads1", "des_1linetar" },
    { 12802, "cunteroads2", "roadnew4_512" },
    { 12802, "cunteroads2", "sw_gasground" },
    { 12802, "cunteroads2", "sw_gasground2" },
    { 12877, "cunteroads3", "cos_hiwayins_256" },
    { 12800, "cunteroads5", "concreteblock_256" },
    { 12800, "cunteroads5", "hiwayinside5_256" },
    { 12800, "cunteroads5", "hiwayoutside_256" },
    { 13077, "cunte_bar1", "alleydoor4" },
    { 13077, "cunte_bar1", "alleydoorb256" },
    { 13077, "cunte_bar1", "amity_law" },
    { 13077, "cunte_bar1", "black16" },
    { 13077, "cunte_bar1", "newall4-2" },
    { 12850, "cunte_block1", "ablusrip" },
    { 12850, "cunte_block1", "awhitest2" },
    { 12850, "cunte_block1", "des_indsign1" },
    { 12850, "cunte_block1", "lightwall256" },
    { 12850, "cunte_block1", "shoptopa128" },
    { 12850, "cunte_block1", "shph3r1hi" },
    { 12850, "cunte_block1", "sjmbrwn3" },
    { 12850, "cunte_block1", "sjmbwall2" },
    { 12850, "cunte_block1", "sjmhot4" },
    { 12850, "cunte_block1", "sw_door10" },
    { 12850, "cunte_block1", "sw_hardware01" },
    { 12850, "cunte_block1", "sw_hardware02" },
    { 12850, "cunte_block1", "sw_miller" },
    { 12850, "cunte_block1", "sw_signs01" },
    { 12850, "cunte_block1", "sw_window02" },
    { 12850, "cunte_block1", "ws_ornatewall1" },
    { 12850, "cunte_block1", "ws_redbrickold" },
    { 13131, "cunte_blockammo", "decoacwallbtm21_256" },
    { 13131, "cunte_blockammo", "dt_ammu_sign1" },
    { 13131, "cunte_blockammo", "dt_ammu_sign2" },
    { 13131, "cunte_blockammo", "dt_ammu_wall2" },
    { 13131, "cunte_blockammo", "mp_bluemetaldoor_256" },
    { 13131, "cunte_blockammo", "mp_gun_targets" },
    { 13131, "cunte_blockammo", "newall10" },
    { 13131, "cunte_blockammo", "sw_door15" },
    { 13131, "cunte_blockammo", "sw_locals" },
    { 13131, "cunte_blockammo", "wallwindblank_256" },
    { 13131, "cunte_blockammo", "ws_patchygravel" },
    { 12855, "cunte_cop", "des_thrails" },
    { 12855, "cunte_cop", "sjmfrateblu2" },
    { 12855, "cunte_cop", "sjmgrund2b" },
    { 12855, "cunte_cop", "sw_bars" },
    { 12855, "cunte_cop", "sw_brick05" },
    { 12855, "cunte_cop", "sw_brick05b" },
    { 12855, "cunte_cop", "sw_copdoor1" },
    { 12855, "cunte_cop", "sw_copgrass01" },
    { 12855, "cunte_cop", "sw_path1" },
    { 12855, "cunte_cop", "sw_PD" },
    { 12855, "cunte_cop", "sw_PDground" },
    { 12855, "cunte_cop", "sw_shutters1" },
    { 12855, "cunte_cop", "sw_wall01" },
    { 12855, "cunte_cop", "sw_wind01" },
    { 12855, "cunte_cop", "ws_bigstones" },
    { 12853, "cunte_gas01", "aroofbit93" },
    { 12853, "cunte_gas01", "downtsign13_LA" },
    { 12853, "cunte_gas01", "postcards_law" },
    { 12853, "cunte_gas01", "starspangban1_256" },
    { 12853, "cunte_gas01", "sw_floor1" },
    { 12853, "cunte_gas01", "sw_garagewin" },
    { 12853, "cunte_gas01", "sw_gasshelves" },
    { 12853, "cunte_gas01", "sw_gasso" },
    { 12853, "cunte_gas01", "sw_gasso2" },
    { 12853, "cunte_gas01", "sw_gasstation1" },
    { 3306, "cunte_house1", "darkplanks1" },
    { 3306, "cunte_house1", "des_ntwnwall1" },
    { 3306, "cunte_house1", "garargeb2" },
    { 3306, "cunte_house1", "pinkfence_law" },
    { 3306, "cunte_house1", "sw_patiodoors" },
    { 3306, "cunte_house1", "tilered" },
    { 3306, "cunte_house1", "woodwalllight2256" },
    { 3306, "cunte_house1", "ws_boxhouse_wins6" },
    { 12843, "cunte_lik", "crencouwall1" },
    { 12843, "cunte_lik", "des_rosigns1" },
    { 12843, "cunte_lik", "LAstripmall1" },
    { 12848, "cunte_town1", "lhav_shops5new" },
    { 12848, "cunte_town1", "newall9-1" },
    { 12848, "cunte_town1", "pinkshop" },
    { 12848, "cunte_town1", "rufwallb256hi" },
    { 12848, "cunte_town1", "sjmbhus1" },
    { 12848, "cunte_town1", "sprunk_temp" },
    { 12848, "cunte_town1", "sw_bakers01" },
    { 12848, "cunte_town1", "sw_bakers02" },
    { 12848, "cunte_town1", "sw_lickter" },
    { 12848, "cunte_town1", "wall256hi" },
    { 12848, "cunte_town1", "ws_doubledoor3" },
    { 13096, "cunte_wires", "inwindow1shdw" },
    { 13096, "cunte_wires", "sw_skids_a" },
    { 13096, "cunte_wires", "telewireslong2" },
    { 17025, "cuntrock", "cliffmid1" },
    { 17025, "cuntrock", "rock_country128" },
    { 18225, "cuntrockcs_t", "cliffmid4" },
    { 18552, "cunts_gunclub", "ws_corr_1_tan" },
    { 17036, "cuntwbt", "bluemetal05" },
    { 17036, "cuntwbt", "carparkdoor1_256" },
    { 17036, "cuntwbt", "corugwall2-1" },
    { 17036, "cuntwbt", "des_woodslats1" },
    { 17036, "cuntwbt", "des_woodslats2" },
    { 18234, "cuntwbtxcs_t", "des_cornices" },
    { 18234, "cuntwbtxcs_t", "des_door2" },
    { 18234, "cuntwbtxcs_t", "des_thfdoor" },
    { 18234, "cuntwbtxcs_t", "mp_pinemedical" },
    { 18234, "cuntwbtxcs_t", "offwhitebrix" },
    { 18237, "cuntwbtzzcs_t", "corugwallnew6_128" },
    { 18237, "cuntwbtzzcs_t", "des_dinerwall" },
    { 18237, "cuntwbtzzcs_t", "metaldoor01_256" },
    { 17049, "cuntwf", "hay" },
    { 17049, "cuntwf", "sw_vane01" },
    { 17049, "cuntwf", "sw_walltile" },
    { 17049, "cuntwf", "ws_corrugated3" },
    { 17079, "cuntwland", "forestfloor4" },
    { 17079, "cuntwland", "forest_rocks" },
    { 17079, "cuntwland", "grass10dirt" },
    { 17079, "cuntwland", "grass10forest" },
    { 17079, "cuntwland", "grassshort2long256" },
    { 17079, "cuntwland", "grasstype3dirt" },
    { 17079, "cuntwland", "grasstype4-3" },
    { 17079, "cuntwland", "grasstype4_staw" },
    { 17079, "cuntwland", "grasstype5" },
    { 17079, "cuntwland", "grasstype5_4" },
    { 17079, "cuntwland", "roadblendcunt" },
    { 17079, "cuntwland", "rocktq128blender" },
    { 17079, "cuntwland", "rocktq128_dirt" },
    { 17079, "cuntwland", "stones256" },
    { 17079, "cuntwland", "ws_freeway4" },
    { 17079, "cuntwland", "ws_sub_pen_conc2" },
    { 17079, "cuntwland", "ws_tunnelwall1" },
    { 17079, "cuntwland", "ws_tunnelwall2" },
    { 17092, "cuntwlandcarparks", "sw_sandgrass4" },
    { 17081, "cuntwlandcent", "grass10des_dirt2" },
    { 17081, "cuntwlandcent", "grass10_grassdeep1" },
    { 17081, "cuntwlandcent", "grass10_stones256" },
    { 17081, "cuntwlandcent", "grassdeep1" },
    { 17081, "cuntwlandcent", "grasstype510" },
    { 17081, "cuntwlandcent", "grasstype510_10" },
    { 17081, "cuntwlandcent", "RAIL_stones256" },
    { 17081, "cuntwlandcent", "rocktq128_forestblend2" },
    { 17081, "cuntwlandcent", "sw_dirt01_forestblend" },
    { 17081, "cuntwlandcent", "ws_traingravel" },
    { 17101, "cuntwlandse", "cw2_weeroad1" },
    { 17101, "cuntwlandse", "des_crackeddirt1" },
    { 17101, "cuntwlandse", "grass4dirtytrans" },
    { 17101, "cuntwlandse", "grassgrnbrnx256" },
    { 17101, "cuntwlandse", "grasstype5_dirt" },
    { 17101, "cuntwlandse", "newcrop3" },
    { 17075, "cuntwlandwest", "cw2_mounttrailblank" },
    { 17075, "cuntwlandwest", "desertstones256forestmix" },
    { 17075, "cuntwlandwest", "des_dirtgrassmixb" },
    { 17075, "cuntwlandwest", "des_dirtgrassmixbmp" },
    { 17075, "cuntwlandwest", "des_dirtgrassmixc" },
    { 17075, "cuntwlandwest", "des_dirtgrassmix_grass4" },
    { 17075, "cuntwlandwest", "forestfloor3_forest" },
    { 17075, "cuntwlandwest", "forestfloor_sones256" },
    { 17075, "cuntwlandwest", "grasstype10_4blend" },
    { 17075, "cuntwlandwest", "grasstype4blndtodirt" },
    { 17075, "cuntwlandwest", "mountainskree_stones256" },
    { 18239, "cuntwrestcs_t", "des_metalwinwee" },
    { 18239, "cuntwrestcs_t", "mp_Jrest" },
    { 18239, "cuntwrestcs_t", "shopdoor02_law" },
    { 17146, "cuntwroad", "Tar_1line256HVblend2" },
    { 17146, "cuntwroad", "Tar_1line256HVblenddrtdot" },
    { 17146, "cuntwroad", "Tar_1line256HVgtravel" },
    { 17146, "cuntwroad", "Tar_1line256HVlightsand" },
    { 17146, "cuntwroad", "Tar_blenddrtwhiteline" },
    { 17146, "cuntwroad", "Tar_lineslipway" },
    { 17146, "cuntwroad", "ws_drain_small" },
    { 18233, "cuntwshopscs_t", "des_adobedoor3" },
    { 18233, "cuntwshopscs_t", "des_baitshop" },
    { 18233, "cuntwshopscs_t", "des_baitsign" },
    { 18233, "cuntwshopscs_t", "des_ntwnwin2" },
    { 18233, "cuntwshopscs_t", "des_ntwnwin5" },
    { 18233, "cuntwshopscs_t", "des_oldtinroof" },
    { 18233, "cuntwshopscs_t", "des_shopsigns1" },
    { 18233, "cuntwshopscs_t", "orange1" },
    { 18233, "cuntwshopscs_t", "snpdwhit3" },
    { 18233, "cuntwshopscs_t", "vgngewall1_256" },
    { 2958, "cut_beer", "bottles_kb1" },
    { 18264, "cw2_cinemablockcs_t", "corporate2" },
    { 18264, "cw2_cinemablockcs_t", "cw_movieboard" },
    { 18264, "cw2_cinemablockcs_t", "GB_good men" },
    { 18264, "cw2_cinemablockcs_t", "GB_Last of Mullets" },
    { 18264, "cw2_cinemablockcs_t", "LAglaswall1" },
    { 18264, "cw2_cinemablockcs_t", "newall9" },
    { 18264, "cw2_cinemablockcs_t", "pcut_band_law" },
    { 18264, "cw2_cinemablockcs_t", "sw_storewin03" },
    { 17067, "cw2_logcabins", "cw2_logwall" },
    { 17067, "cw2_logcabins", "sw_cabinroof" },
    { 17067, "cw2_logcabins", "trail_win3" },
    { 17067, "cw2_logcabins", "wilsd_05_la" },
    { 18261, "cw2_photoblockcs_t", "cw_loansign" },
    { 18261, "cw2_photoblockcs_t", "sw_wallbrick_04" },
    { 17064, "cw2_storesnstuff", "comptdoor4" },
    { 17064, "cw2_storesnstuff", "des_garagedoor1" },
    { 17064, "cw2_storesnstuff", "LAtranswall1" },
    { 17012, "cwestfac", "vgnwrehse2_256" },
    { 17012, "cwestfac", "vgnwrehse3_256" },
    { 17012, "cwestfac", "vgnwrehse4_256" },
    { 17012, "cwestfac", "vnghse6_128" },
    { 17324, "cwsbarn", "des_bullboards" },
    { 17324, "cwsbarn", "des_ranchwall2" },
    { 17324, "cwsbarn", "des_redslats" },
    { 18216, "cw_changemecs_t", "plasfence1_256" },
    { 18216, "cw_changemecs_t", "plasfence2_256" },
    { 18250, "cw_junkbuildcs_t", "Was_graffiti" },
    { 18250, "cw_junkbuildcs_t", "Was_scrpyd_baler_locker" },
    { 18250, "cw_junkbuildcs_t", "Was_scrpyd_baler_wallgrime" },
    { 18250, "cw_junkbuildcs_t", "Was_scrpyd_bodywk_edge" },
    { 18250, "cw_junkbuildcs_t", "Was_scrpyd_fence_wd_stain" },
    { 18250, "cw_junkbuildcs_t", "Was_scrpyd_hngr_jsts" },
    { 18250, "cw_junkbuildcs_t", "Was_scrpyd_rustmetal" },
    { 18250, "cw_junkbuildcs_t", "Was_scrpyd_shack" },
    { 18250, "cw_junkbuildcs_t", "Was_scrpyd_shack_wall" },
    { 18250, "cw_junkbuildcs_t", "Was_scrpyd_shack_win" },
    { 18250, "cw_junkbuildcs_t", "Was_scrpyd_sign_alv" },
    { 18250, "cw_junkbuildcs_t", "Was_scrpyd_switch" },
    { 18250, "cw_junkbuildcs_t", "Was_scrpyd_wall_crgated" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_carbits" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_carhood" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_cyl_head" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_door_dbl_grey" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_engine" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_tires" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_trailer" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_trailer_door" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_trailer_edge" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_trailer_front" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_trailer_hatch" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_trailer_join" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_trailer_stripe" },
    { 18246, "cw_junkyard2cs_t", "Was_scrpyd_trailer_win_side" },
    { 18249, "cw_junkyardccs_t", "Was_scrpyd_shredder_side" },
    { 18249, "cw_junkyardccs_t", "Was_scrpyd_trk_contnr_sd" },
    { 18247, "cw_junkyarddigcs_t", "Was_scrpyd_axle_end" },
    { 18247, "cw_junkyarddigcs_t", "Was_scrpyd_crane" },
    { 18247, "cw_junkyarddigcs_t", "Was_scrpyd_crane_back" },
    { 18247, "cw_junkyarddigcs_t", "Was_scrpyd_crane_cab" },
    { 18247, "cw_junkyarddigcs_t", "Was_scrpyd_crane_hyd" },
    { 18247, "cw_junkyarddigcs_t", "Was_scrpyd_step" },
    { 18245, "cw_junkyardmachin", "Was_scrpyd_baler_decking" },
    { 18245, "cw_junkyardmachin", "Was_scrpyd_baler_gen" },
    { 18245, "cw_junkyardmachin", "Was_scrpyd_baler_gen_ed" },
    { 18245, "cw_junkyardmachin", "Was_scrpyd_baler_gen_rvt" },
    { 18245, "cw_junkyardmachin", "Was_scrpyd_baler_locker_edge" },
    { 18245, "cw_junkyardmachin", "Was_scrpyd_baler_pipes" },
    { 18245, "cw_junkyardmachin", "Was_scrpyd_baler_pit_dbris" },
    { 18245, "cw_junkyardmachin", "Was_scrpyd_baler_stepfront" },
    { 18245, "cw_junkyardmachin", "Was_scrpyd_light_yellow" },
    { 18245, "cw_junkyardmachin", "Was_scrpyd_wall_grn" },
    { 18245, "cw_junkyardmachin", "Was_scrpyd_wall_grn_skirt" },
    { 17041, "cw_motel1", "des_motelsigns1" },
    { 17041, "cw_motel1", "des_motelsigns3" },
    { 17041, "cw_motel1", "des_motelwall4" },
    { 17041, "cw_motel1", "des_motelwall5" },
    { 18242, "cw_motel2cs_t", "des_motelsigns2" },
    { 18242, "cw_motel2cs_t", "des_motelwall1" },
    { 18242, "cw_motel2cs_t", "des_motelwall2" },
    { 18242, "cw_motel2cs_t", "des_motelwall3" },
    { 18201, "cw_roofbitcs_t", "aroofbit1" },
    { 18201, "cw_roofbitcs_t", "aroofbit2" },
    { 18201, "cw_roofbitcs_t", "aroofbit3" },
    { 18201, "cw_roofbitcs_t", "aroofbit4" },
    { 18201, "cw_roofbitcs_t", "aroofbit5" },
    { 18201, "cw_roofbitcs_t", "aroofbit6" },
    { 18201, "cw_roofbitcs_t", "aroofbit7" },
    { 18201, "cw_roofbitcs_t", "aroofbit8" },
    { 18201, "cw_roofbitcs_t", "aroofbit9" },
    { 18201, "cw_roofbitcs_t", "aroofbit91" },
    { 18201, "cw_roofbitcs_t", "aroofbit92" },
    { 18241, "cw_tempstuffcs_t", "bluemetal03" },
    { 18241, "cw_tempstuffcs_t", "des_metaldoor1" },
    { 18241, "cw_tempstuffcs_t", "roof11new" },
    { 18232, "cw_truckstopcs_t", "des_adobewall3" },
    { 18232, "cw_truckstopcs_t", "des_roswin3" },
    { 18232, "cw_truckstopcs_t", "des_wigwamdoor" },
    { 18232, "cw_truckstopcs_t", "dinerwel" },
    { 18232, "cw_truckstopcs_t", "wlinebits_law" },
    { 18232, "cw_truckstopcs_t", "ws_xenon_old_dirty" },
    { 3193, "cxref_desert", "BIG_COCK" },
    { 3193, "cxref_desert", "Bow_Roofvent" },
    { 3193, "cxref_desert", "des_bywall1" },
    { 3193, "cxref_desert", "des_rustpanel" },
    { 3193, "cxref_desert", "des_wigwam" },
    { 3193, "cxref_desert", "drvin_metal" },
    { 3193, "cxref_desert", "grilldoors1nt" },
    { 3193, "cxref_desert", "pierplanks_128" },
    { 3193, "cxref_desert", "swall3256" },
    { 3193, "cxref_desert", "sw_barnfence01" },
    { 3193, "cxref_desert", "sw_cabwin01" },
    { 3193, "cxref_desert", "sw_woodslat01" },
    { 3336, "cxref_freeway", "mp_aldeasign" },
    { 3336, "cxref_freeway", "roadsback01_LA" },
    { 3246, "cxref_oldwest", "des_ntwndoor2" },
    { 3246, "cxref_oldwest", "des_ntwnwin3" },
    { 3246, "cxref_oldwest", "des_ntwnwin6" },
    { 3187, "cxref_quarrytest", "gs_barge1" },
    { 3187, "cxref_quarrytest", "gs_barge2" },
    { 3187, "cxref_quarrytest", "gs_door1" },
    { 3187, "cxref_quarrytest", "gs_iron1" },
    { 3187, "cxref_quarrytest", "gs_iron2" },
    { 3187, "cxref_quarrytest", "gs_sign1" },
    { 3187, "cxref_quarrytest", "gs_wind1" },
    { 3187, "cxref_quarrytest", "gs_wood1" },
    { 3187, "cxref_quarrytest", "gs_wood2" },
    { 3355, "cxref_savhus", "des_brick1" },
    { 3355, "cxref_savhus", "des_bywall2" },
    { 3355, "cxref_savhus", "sw_wind07" },
    { 3286, "cxrf_indstuff", "des_bytower1" },
    { 3292, "cxrf_payspray", "Alumox64b" },
    { 3292, "cxrf_payspray", "compressor" },
    { 3292, "cxrf_payspray", "newindow4" },
    { 3292, "cxrf_payspray", "panel2_64a" },
    { 3292, "cxrf_payspray", "sf_spray1" },
    { 3292, "cxrf_payspray", "sf_spraydoor1" },
    { 3292, "cxrf_payspray", "walldirtynewa256" },
    { 3292, "cxrf_payspray", "wallwasdrk128" },
    { 3292, "cxrf_payspray", "welder" },
    { 16338, "dam_genroom", "dam_genpanel" },
    { 16338, "dam_genroom", "dam_genrail" },
    { 16338, "dam_genroom", "dam_genwin" },
    { 16338, "dam_genroom", "dam_terazzoedge" },
    { 16338, "dam_genroom", "dam_turbine" },
    { 16338, "dam_genroom", "des_dam_wall" },
    { 16338, "dam_genroom", "ws_drain" },
    { 1556, "dave_door_2a", "casinodoor1_128" },
    { 1557, "dave_door_2b", "miragedoor1_256" },
    { 1555, "dave_door_2c", "vgnhsedor1_256" },
    { 3092, "deadcopx", "ropes01" },
    { 3092, "deadcopx", "tied_cop" },
    { 2905, "dead_mantxd", "billyblood" },
    { 3866, "dem1_sfxrf", "ws_blistered1" },
    { 3866, "dem1_sfxrf", "ws_demolishwall2" },
    { 3866, "dem1_sfxrf", "ws_demolishwall3small" },
    { 3866, "dem1_sfxrf", "ws_demolishwins1" },
    { 3866, "dem1_sfxrf", "ws_flooredge" },
    { 3866, "dem1_sfxrf", "ws_oldoffice3" },
    { 3866, "dem1_sfxrf", "ws_walledge" },
    { 3887, "dem4_sfxrf", "ws_apartmenttan1" },
    { 3887, "dem4_sfxrf", "ws_blistered1smoked" },
    { 3887, "dem4_sfxrf", "ws_classyshop2" },
    { 3887, "dem4_sfxrf", "ws_demolishwall4_small" },
    { 3887, "dem4_sfxrf", "ws_peeling_ceiling2_smoked" },
    { 10984, "demolished1_sfse", "ws_rubble1b" },
    { 16175, "des2vegas_join", "des_redrockbot" },
    { 16175, "des2vegas_join", "des_redrockmid" },
    { 16175, "des2vegas_join", "des_rocky1" },
    { 16175, "des2vegas_join", "des_scrub1_dirt1" },
    { 16175, "des2vegas_join", "rocktbrn_dirt2" },
    { 16175, "des2vegas_join", "vgs_rockbot1a" },
    { 16175, "des2vegas_join", "vgs_rockmid1a" },
    { 16110, "desert", "des_redrock1" },
    { 16110, "desert", "des_redrock2" },
    { 11488, "desertdam", "dam_statue" },
    { 3330, "desertmisc", "des_radiomast" },
    { 16013, "desn2_alphabits", "des_powerlines" },
    { 16395, "desn2_minestuff", "cw2_mountboards1" },
    { 16398, "desn2_peckers", "des_cock1" },
    { 16398, "desn2_peckers", "des_cockbit" },
    { 16398, "desn2_peckers", "des_cockdanglybit2" },
    { 16398, "desn2_peckers", "des_cockhead" },
    { 16398, "desn2_peckers", "pierwall06_law" },
    { 16398, "desn2_peckers", "tarp_law" },
    { 16398, "desn2_peckers", "vgs_shopwall02_128" },
    { 16388, "desn2_stud", "decorated" },
    { 16388, "desn2_stud", "des_spreadsig" },
    { 16388, "desn2_stud", "simplewall256" },
    { 16360, "desn2_truckstop", "sw_wind17" },
    { 16360, "desn2_truckstop", "ws_xenon_1" },
    { 11549, "desn_decocafe", "mp_Jdiner" },
    { 11549, "desn_decocafe", "wallwhtwind256" },
    { 11549, "desn_decocafe", "wallwind256" },
    { 11431, "desn_teepee", "des_tepesign" },
    { 11464, "desn_trainstuff", "alleydoor1" },
    { 11464, "desn_trainstuff", "ws_goldengate5" },
    { 11464, "desn_trainstuff", "ws_tunnelwall2smoked" },
    { 11545, "desn_truckstop", "ws_xenon_2" },
    { 11545, "desn_truckstop", "ws_xenon_3" },
    { 13598, "destructo", "exploder1" },
    { 13598, "destructo", "knifeAfterDark" },
    { 13598, "destructo", "pendantlight_128" },
    { 13598, "destructo", "redband_64" },
    { 13598, "destructo", "sjmfnce" },
    { 13598, "destructo", "sunshinebillboard" },
    { 13598, "destructo", "vsrbanner" },
    { 16407, "des_airfieldhus", "burglry_wall1" },
    { 16407, "des_airfieldhus", "grge_corug1" },
    { 16407, "des_airfieldhus", "kb_flykiller1" },
    { 16407, "des_airfieldhus", "plane_cable" },
    { 16407, "des_airfieldhus", "plane_photos1" },
    { 16407, "des_airfieldhus", "quar_cranerail" },
    { 16137, "des_bigearstuff", "dirtyledge_law" },
    { 3303, "des_bighus", "sw_wind09" },
    { 16098, "des_boneyard", "roucghstone" },
    { 16098, "des_boneyard", "roucghstonebrt" },
    { 16098, "des_boneyard", "Was_meshfence" },
    { 3278, "des_breakwin1", "des_warewin" },
    { 16326, "des_byoffice", "des_bywin1" },
    { 16326, "des_byoffice", "plainwoodenfence1_256" },
    { 16377, "des_byofficeint", "blak_1" },
    { 16377, "des_byofficeint", "hectics_text" },
    { 16377, "des_byofficeint", "ufo_pics2" },
    { 16377, "des_byofficeint", "water_cool1" },
    { 16377, "des_byofficeint", "water_cool2" },
    { 16102, "des_cen", "desert_1line256" },
    { 16102, "des_cen", "desert_1linetar" },
    { 16102, "des_cen", "desstones_dirt1" },
    { 16102, "des_cen", "des_dirttrackl" },
    { 16102, "des_cen", "des_geyser" },
    { 16102, "des_cen", "des_ripplsand" },
    { 16102, "des_cen", "des_rocky1_dirt1" },
    { 16102, "des_cen", "des_scrub1" },
    { 16102, "des_cen", "sandgrnd128" },
    { 11425, "des_clifftown", "des_adobedoor2" },
    { 11425, "des_clifftown", "des_adobewall1" },
    { 11425, "des_clifftown", "des_adobewin1" },
    { 11425, "des_clifftown", "des_adobewin2" },
    { 11425, "des_clifftown", "des_adobewin3" },
    { 11425, "des_clifftown", "des_cemgates" },
    { 11425, "des_clifftown", "des_damcamper" },
    { 11425, "des_clifftown", "des_shfront1" },
    { 11425, "des_clifftown", "des_shopwin1" },
    { 11425, "des_clifftown", "ros_thwin1" },
    { 16132, "des_cn2_dam", "des_dam_detail1" },
    { 16132, "des_cn2_dam", "des_dam_wins" },
    { 16364, "des_damquay", "des_creamshopdoor" },
    { 16364, "des_damquay", "pierdoor01_law" },
    { 16364, "des_damquay", "sw_dinewin" },
    { 11499, "des_dinerw", "gate1_LAe" },
    { 16271, "des_factory", "corr_2_plaintiledblue" },
    { 16271, "des_factory", "des_facwin" },
    { 16271, "des_factory", "dish_cylinder_a" },
    { 16271, "des_factory", "sm_quarry_conv_belt_empty" },
    { 16271, "des_factory", "sm_quarry_crusher1" },
    { 16021, "des_geyser", "des_geywin1" },
    { 16021, "des_geyser", "sjmbigold1" },
    { 16387, "des_gunclub", "woodenpanels256" },
    { 16008, "des_n", "des_1lineend" },
    { 16008, "des_n", "des_roadedge1" },
    { 16008, "des_n", "drvin_ground1" },
    { 16008, "des_n", "greycrossing" },
    { 16008, "des_n", "motocross_256" },
    { 16008, "des_n", "pavebsandend" },
    { 16037, "des_nbridge", "girder2_red_64HV" },
    { 16103, "des_ne", "des_dirt2stones" },
    { 16103, "des_ne", "des_dirtgravel" },
    { 16103, "des_ne", "des_dirttrackx" },
    { 16103, "des_ne", "des_oldrunway" },
    { 16103, "des_ne", "des_oldrunwayblend" },
    { 16103, "des_ne", "des_panelconc" },
    { 16103, "des_ne", "des_yelrock" },
    { 16103, "des_ne", "Tar_venturasjoin" },
    { 16103, "des_ne", "venturas_fwend" },
    { 16103, "des_ne", "vgs_rockwall01_128" },
    { 16010, "des_nstuff", "des_metalwinbig" },
    { 16011, "des_ntown", "des_creamshopwin" },
    { 16011, "des_ntown", "des_ntwndoor1" },
    { 16011, "des_ntown", "des_ntwndoor3" },
    { 16011, "des_ntown", "des_ntwnskirt1" },
    { 16011, "des_ntown", "des_ntwnwin4" },
    { 11429, "des_nw", "des_grass2dirt1" },
    { 11429, "des_nw", "des_grass2scrub" },
    { 11429, "des_nw", "des_roadedge2" },
    { 11506, "des_nw2", "cuntroad01_law" },
    { 11506, "des_nw2", "des_dirt2gygrass" },
    { 11496, "des_nwstuff", "brdwalkwater_la" },
    { 11450, "des_nwtown", "des_greendoor" },
    { 11450, "des_nwtown", "des_greenwin" },
    { 11450, "des_nwtown", "des_hotelsigns" },
    { 11450, "des_nwtown", "des_nwmed" },
    { 11450, "des_nwtown", "des_nwwatower" },
    { 11450, "des_nwtown", "des_woodshopdoor1" },
    { 11450, "des_nwtown", "des_woodshopwin1" },
    { 11450, "des_nwtown", "gymtop1b_LAe" },
    { 11450, "des_nwtown", "gymtop1c_LAe" },
    { 11450, "des_nwtown", "gymtop1_LAe" },
    { 11450, "des_nwtown", "mp_cnbarbers" },
    { 11451, "des_nwtownpolice", "des_sheriffsign" },
    { 11449, "des_nwtownw", "des_loungesign" },
    { 11449, "des_nwtownw", "des_rosmot1" },
    { 16087, "des_oilfield", "des_reftower2" },
    { 16055, "des_quarry", "desertgravel256" },
    { 16055, "des_quarry", "desgrns256" },
    { 16055, "des_quarry", "des_quarryrd" },
    { 16055, "des_quarry", "des_quarryrdl" },
    { 16055, "des_quarry", "des_quarryrdr" },
    { 16055, "des_quarry", "des_rockyfill" },
    { 16055, "des_quarry", "lasdkcrtgr1111" },
    { 16055, "des_quarry", "lasdkcrtgr1ssss" },
    { 16071, "des_quarrybelts", "sjmlawarwall5" },
    { 16071, "des_quarrybelts", "sm_quarry_belt_bad" },
    { 16071, "des_quarrybelts", "sm_quarry_conv_belt" },
    { 16071, "des_quarrybelts", "sm_quarry_crusher2" },
    { 16071, "des_quarrybelts", "sm_quarry_handrail" },
    { 16076, "des_quarrybits", "redvertical_64HV" },
    { 16076, "des_quarrybits", "sm_crusher_rollers" },
    { 16076, "des_quarrybits", "sm_quarry_Rusty" },
    { 16328, "des_quarrycrane", "ws_cranehook" },
    { 11490, "des_ranch", "des_logwall" },
    { 11490, "des_ranch", "des_ranchwin" },
    { 11490, "des_ranch", "des_trellis" },
    { 11490, "des_ranch", "newindow11128" },
    { 16213, "des_s", "des_pave_trackstart" },
    { 16109, "des_se1", "Tar_2line128" },
    { 16232, "des_se2", "des_dirt2dedgrass" },
    { 16234, "des_se3", "grasstype5_desdirt" },
    { 11469, "des_steakhouse", "des_bull" },
    { 11469, "des_steakhouse", "des_bullheid" },
    { 11469, "des_steakhouse", "des_bullsign" },
    { 16006, "des_stownmain1", "des_roswin4" },
    { 16006, "des_stownmain1", "des_thwin2" },
    { 16005, "des_stownmain2", "des_roswin2" },
    { 16005, "des_stownmain2", "sw_door19" },
    { 16385, "des_stownmain3", "newall11-1" },
    { 16067, "des_stownmots1", "des_bowlingsig" },
    { 16067, "des_stownmots1", "des_rosigns2" },
    { 16067, "des_stownmots1", "kb_diner_2b" },
    { 16067, "des_stownmots1", "LAtranswall2" },
    { 16069, "des_stownstrip1", "sw_metalgate1" },
    { 16064, "des_stownstrip2", "kingothering" },
    { 16064, "des_stownstrip2", "yellowall_LA" },
    { 16434, "des_stwnsigns1", "des_banksign" },
    { 11430, "des_sw", "pav_brngrass" },
    { 11430, "des_sw", "Tar_1line256HVtodirt" },
    { 16136, "des_telescopestuff", "carparkdoor3_256" },
    { 16136, "des_telescopestuff", "dish_holemetal_t" },
    { 16136, "des_telescopestuff", "dish_panel_B" },
    { 16136, "des_telescopestuff", "dish_panel_c" },
    { 16136, "des_telescopestuff", "dish_roundbit_b" },
    { 16136, "des_telescopestuff", "dish_strut_t" },
    { 16136, "des_telescopestuff", "poshentrance2_256" },
    { 16136, "des_telescopestuff", "stoneclad1" },
    { 16136, "des_telescopestuff", "ws_palebrickwall1" },
    { 16023, "des_trainstuff", "metpat64shadow" },
    { 16023, "des_trainstuff", "railxing3" },
    { 16023, "des_trainstuff", "ws_stoneblock" },
    { 16060, "des_trees", "Newtreed256" },
    { 16060, "des_trees", "sm_bark_light" },
    { 16060, "des_trees", "veg_bevtreebase" },
    { 16146, "des_ufoinn", "clukpost1_LAe2" },
    { 16146, "des_ufoinn", "des_probesign" },
    { 16146, "des_ufoinn", "electricbox256" },
    { 11484, "des_wdam", "dam_panel" },
    { 11471, "des_wtownmain", "orange2" },
    { 3426, "des_xoilfield", "oilband_64" },
    { 1559, "diamond", "CJ_W_GRAD" },
    { 1970, "dinerseat1", "diner_seat1" },
    { 1970, "dinerseat1", "diner_tbl1" },
    { 1968, "dinerseat2", "diner_tbl2" },
    { 1968, "dinerseat2", "donut_seat1" },
    { 3595, "dingbat01_la", "bambowal1_LA" },
    { 3595, "dingbat01_la", "comptwall20" },
    { 3595, "dingbat01_la", "dingwin01_LA" },
    { 3595, "dingbat01_la", "dingwin02_LA" },
    { 3595, "dingbat01_la", "dingwin03_LA" },
    { 3595, "dingbat01_la", "LApinkwall1" },
    { 3595, "dingbat01_la", "mosaic1_LAwn" },
    { 13633, "dirtouter", "ahbobo_1" },
    { 13633, "dirtouter", "AH_heat" },
    { 13633, "dirtouter", "AH_homiessharp" },
    { 13662, "dirtrack", "AH_chevron" },
    { 13662, "dirtrack", "ah_ramp" },
    { 13662, "dirtrack", "bplasticsack" },
    { 13662, "dirtrack", "plasticsack" },
    { 13631, "dirtstad", "andymonkey" },
    { 1972, "display1", "kb_display1" },
    { 5154, "dkcargoshp_las2", "alarm_64" },
    { 5154, "dkcargoshp_las2", "bandingblue_64" },
    { 5154, "dkcargoshp_las2", "boatrailing_128" },
    { 5154, "dkcargoshp_las2", "boatside2_256" },
    { 5154, "dkcargoshp_las2", "cargodoor_128" },
    { 5154, "dkcargoshp_las2", "Diamondp64" },
    { 5154, "dkcargoshp_las2", "green_64" },
    { 5154, "dkcargoshp_las2", "jettyfloor02" },
    { 5154, "dkcargoshp_las2", "mp_cellwalla_256" },
    { 5154, "dkcargoshp_las2", "mp_cellwall_256" },
    { 5154, "dkcargoshp_las2", "wallbluetinge256" },
    { 12932, "dk_midbuilds", "healthcen02_256" },
    { 13744, "docg01alfa_lahills", "Helipad_H" },
    { 13744, "docg01alfa_lahills", "plaster256i" },
    { 13724, "docg01_lahills", "ab_tile2" },
    { 13724, "docg01_lahills", "Bow_sub_decortop" },
    { 13724, "docg01_lahills", "chr_flags_256" },
    { 13724, "docg01_lahills", "glassblock4_law" },
    { 13724, "docg01_lahills", "marbletile8b" },
    { 13724, "docg01_lahills", "ston10S" },
    { 13724, "docg01_lahills", "sw_mansionwin" },
    { 3621, "dockcargo1_las", "dt_ceiling1" },
    { 3621, "dockcargo1_las", "lasdkcrtgr1" },
    { 3621, "dockcargo1_las", "lasdkcrtgr11" },
    { 3621, "dockcargo1_las", "lasdkcrtgr111" },
    { 3621, "dockcargo1_las", "lasdkcrtgr1s" },
    { 3621, "dockcargo1_las", "lasdkcrtgr1ss" },
    { 3621, "dockcargo1_las", "lasdkcrtgr1sss" },
    { 3621, "dockcargo1_las", "meshwiny" },
    { 3621, "dockcargo1_las", "sanpedock1" },
    { 3621, "dockcargo1_las", "sanpedock2" },
    { 3621, "dockcargo1_las", "sjmpostback" },
    { 3564, "dockcargo2_las", "lastran1" },
    { 3564, "dockcargo2_las", "lastran2" },
    { 3564, "dockcargo2_las", "lastran3" },
    { 3564, "dockcargo2_las", "lastran4" },
    { 3564, "dockcargo2_las", "lastran6" },
    { 3564, "dockcargo2_las", "lastran7" },
    { 3564, "dockcargo2_las", "lastran8" },
    { 3564, "dockcargo2_las", "lastrk1" },
    { 3564, "dockcargo2_las", "lastrk1aa" },
    { 3564, "dockcargo2_las", "lastrk1bb" },
    { 3564, "dockcargo2_las", "lastrk2" },
    { 3564, "dockcargo2_las", "lastrk3" },
    { 3564, "dockcargo2_las", "lastrk5" },
    { 3564, "dockcargo2_las", "lastrk7" },
    { 3564, "dockcargo2_las", "steelgirder_64V" },
    { 1278, "docklight", "aascaff" },
    { 10852, "dockroad_sfse", "dt_bmx_grass" },
    { 10852, "dockroad_sfse", "sf_junction3" },
    { 10842, "docks2refl_sfse", "support_256" },
    { 10842, "docks2refl_sfse", "ws_corr_2_blu" },
    { 10842, "docks2refl_sfse", "ws_drydockdoors" },
    { 10842, "docks2refl_sfse", "ws_sub_pen_conc3" },
    { 10842, "docks2refl_sfse", "ws_sub_pen_conc4" },
    { 5108, "docks2_las2", "concroadslab_256" },
    { 5108, "docks2_las2", "dukbrid1_LAS" },
    { 5108, "docks2_las2", "LASLACMA1" },
    { 5108, "docks2_las2", "sjmndukwal1" },
    { 5108, "docks2_las2", "sjmndukwal2" },
    { 10769, "docks2_sfse", "ws_navystation" },
    { 10769, "docks2_sfse", "ws_traxonconcdirty" },
    { 5109, "docks_las2", "adockfn3" },
    { 5109, "docks_las2", "dukbridmet1_LAS" },
    { 5109, "docks_las2", "meetwalv1" },
    { 5109, "docks_las2", "sjmndukwal3" },
    { 14488, "dogsgym", "AH_bgmartiles" },
    { 14488, "dogsgym", "ah_grnplstr" },
    { 14488, "dogsgym", "AH_halfcourt" },
    { 14488, "dogsgym", "AH_stolewindow" },
    { 14488, "dogsgym", "ah_yelplnks" },
    { 1607, "dolphin", "dolphin" },
    { 9614, "donut_sfw", "donut1_sfw" },
    { 9614, "donut_sfw", "donut2_sfw" },
    { 9614, "donut_sfw", "donut3_sfw" },
    { 9614, "donut_sfw", "grass128hv_blend_" },
    { 9614, "donut_sfw", "tuff_nut2" },
    { 9614, "donut_sfw", "TUFF_nut3" },
    { 9614, "donut_sfw", "ws_alley2_128_dirt" },
    { 2221, "donut_tray", "bagel_rb" },
    { 2221, "donut_tray", "coffeetop_rb" },
    { 2221, "donut_tray", "cupside_rb" },
    { 2221, "donut_tray", "donut2_rb" },
    { 2221, "donut_tray", "donut3_rb" },
    { 2221, "donut_tray", "muffbot_rb" },
    { 2221, "donut_tray", "mufftop_rb" },
    { 2221, "donut_tray", "rustycoffeerap_rb" },
    { 2221, "donut_tray", "rustynap_rb" },
    { 2221, "donut_tray", "rustyside_rb" },
    { 4877, "LOSWORLD1_las", "ablndwall1_LAE" },
    { 4877, "LOSWORLD1_las", "GB_nastybar14" },
    { 4877, "LOSWORLD1_las", "hotdoor01_law" },
    { 4880, "LOSWORLD3_las", "downtshop1_LAn" },
    { 4880, "LOSWORLD3_las", "downtshop3_LAn" },
    { 4880, "LOSWORLD3_las", "gz_lawbuilda_3" },
    { 4880, "LOSWORLD3_las", "gz_lawbuilda_4" },
    { 4880, "LOSWORLD3_las", "gz_lawbuilda_5" },
    { 4887, "LOSWORLD_las", "decogranite_la" },
    { 4887, "LOSWORLD_las", "holpac02_law" },
    { 4887, "LOSWORLD_las", "nwdwntwn1_LAS" },
    { 4887, "LOSWORLD_las", "nwdwntwn2_LAS" },
    { 4887, "LOSWORLD_las", "nwdwntwn5_LAS" },
    { 4887, "LOSWORLD_las", "pershing1_LAn" },
    { 4887, "LOSWORLD_las", "snpdrlwar1" },
    { 4887, "LOSWORLD_las", "snpedwar4" },
    { 4887, "LOSWORLD_las", "ws_glassnbrassdoor" },
    { 11014, "drivingschool_sfse", "ws_turningtricks1_small" },
    { 13654, "drkpoly", "asandockw4" },
    { 14420, "dr_gsbits", "ah_corn1" },
    { 14420, "dr_gsbits", "mp_apt1_frame1" },
    { 14420, "dr_gsbits", "mp_apt1_frame2" },
    { 14420, "dr_gsbits", "mp_apt1_frame3" },
    { 14420, "dr_gsbits", "mp_apt1_frame4" },
    { 14420, "dr_gsbits", "mp_apt1_pic1" },
    { 14420, "dr_gsbits", "mp_apt1_pic2" },
    { 14420, "dr_gsbits", "mp_apt1_pic3" },
    { 14420, "dr_gsbits", "mp_apt1_pic4" },
    { 14420, "dr_gsbits", "mp_apt1_pic5" },
    { 14420, "dr_gsbits", "mp_apt1_pic6" },
    { 14420, "dr_gsbits", "mp_apt1_pic7" },
    { 14420, "dr_gsbits", "mp_apt1_pic8" },
    { 14420, "dr_gsbits", "mp_gs_border" },
    { 14420, "dr_gsbits", "mp_gs_carpet" },
    { 14420, "dr_gsbits", "mp_gs_libwall" },
    { 14420, "dr_gsbits", "mp_gs_rose" },
    { 14420, "dr_gsbits", "mp_shop_window" },
    { 14391, "dr_gsmix", "auto_tune2" },
    { 14391, "dr_gsmix", "chromecabinet01side_128" },
    { 14391, "dr_gsmix", "chromecabinet01_128" },
    { 14391, "dr_gsmix", "knobs01" },
    { 14391, "dr_gsmix", "mixingdesk01" },
    { 14391, "dr_gsmix", "mixingdesk02" },
    { 14391, "dr_gsmix", "mixingdesk03" },
    { 14391, "dr_gsmix", "mixingdesk05" },
    { 14391, "dr_gsmix", "mixingdesk07" },
    { 14391, "dr_gsmix", "mixingdesk09" },
    { 14391, "dr_gsmix", "phones_64" },
    { 14391, "dr_gsmix", "reel01" },
    { 14391, "dr_gsmix", "speaker04" },
    { 14391, "dr_gsmix", "speaker05" },
    { 14391, "dr_gsmix", "studiomonitor01" },
    { 14391, "dr_gsmix", "white_128" },
    { 14387, "dr_gsnew", "ab_Fireplace" },
    { 14387, "dr_gsnew", "ab_wood_pot" },
    { 14387, "dr_gsnew", "AH_flroortile12" },
    { 14387, "dr_gsnew", "cd_tex1" },
    { 14387, "dr_gsnew", "cd_tex2" },
    { 14387, "dr_gsnew", "la_flair1" },
    { 14387, "dr_gsnew", "mp_cloth_subwall" },
    { 14387, "dr_gsnew", "mp_flowerbush" },
    { 14387, "dr_gsnew", "mp_gs_border1" },
    { 14387, "dr_gsnew", "mp_gs_flowerwall" },
    { 14387, "dr_gsnew", "mp_gs_kitchfloor" },
    { 14387, "dr_gsnew", "mp_gs_kitchwall" },
    { 14387, "dr_gsnew", "mp_gs_mud" },
    { 14387, "dr_gsnew", "mp_gs_pooltiles" },
    { 14387, "dr_gsnew", "mp_gs_wall" },
    { 14387, "dr_gsnew", "mp_gs_wall1" },
    { 14387, "dr_gsnew", "mp_gs_wood" },
    { 14387, "dr_gsnew", "mp_marble" },
    { 14387, "dr_gsnew", "mp_stonefloor" },
    { 14392, "dr_gsstudio", "amp01" },
    { 14392, "dr_gsstudio", "amp02" },
    { 14392, "dr_gsstudio", "amp03" },
    { 14392, "dr_gsstudio", "amp04" },
    { 14392, "dr_gsstudio", "amp05" },
    { 14392, "dr_gsstudio", "bcwarlock_256" },
    { 14392, "dr_gsstudio", "cymbal_128" },
    { 14392, "dr_gsstudio", "drmstnd1_256" },
    { 14392, "dr_gsstudio", "drumsideblue128" },
    { 14392, "dr_gsstudio", "flyingv_256" },
    { 14392, "dr_gsstudio", "golddisc_128" },
    { 14392, "dr_gsstudio", "la_flair2" },
    { 14392, "dr_gsstudio", "lesbass2_128" },
    { 14392, "dr_gsstudio", "monitors_128" },
    { 14392, "dr_gsstudio", "rec_mix2" },
    { 14392, "dr_gsstudio", "rec_mix5" },
    { 14392, "dr_gsstudio", "rec_mix5b" },
    { 14392, "dr_gsstudio", "rec_mix5c" },
    { 14392, "dr_gsstudio", "speaker07" },
    { 14392, "dr_gsstudio", "stagemic_128" },
    { 14392, "dr_gsstudio", "studiopanel02" },
    { 14392, "dr_gsstudio", "woodcabinet01_128" },
    { 2727, "ds_sign", "CJ_DS_light" },
    { 4682, "dtbuil1_lan2", "arsebottom" },
    { 4682, "dtbuil1_lan2", "barbershop_256" },
    { 4682, "dtbuil1_lan2", "coinlaundry1_256" },
    { 4682, "dtbuil1_lan2", "greenshop256hi" },
    { 4682, "dtbuil1_lan2", "greenshoptop1_256" },
    { 4682, "dtbuil1_lan2", "grocer1_kb256" },
    { 4682, "dtbuil1_lan2", "jewel03_128" },
    { 4682, "dtbuil1_lan2", "jewlers1_256" },
    { 4682, "dtbuil1_lan2", "LAInside_Tracksign1" },
    { 4682, "dtbuil1_lan2", "LAInside_Tracksign2" },
    { 4682, "dtbuil1_lan2", "lascourtsc2" },
    { 4682, "dtbuil1_lan2", "laspedhus2" },
    { 4682, "dtbuil1_lan2", "laspedhus3" },
    { 4682, "dtbuil1_lan2", "laspedhus7" },
    { 4682, "dtbuil1_lan2", "sl_shopwall1" },
    { 1942, "dum1", "weight4" },
    { 1654, "dynamite", "blueflt64" },
    { 1654, "dynamite", "clock64" },
    { 1654, "dynamite", "redcan" },
    { 1217, "dynbarrels", "hotcoals_64HV" },
    { 1217, "dynbarrels", "redallu" },
    { 1227, "dynbuket", "Metal4_256" },
    { 1237, "dyncones", "Cone02_64" },
    { 1211, "dynhydrent", "firehydrant_yell" },
    { 1208, "dynjunk", "junk_tv2" },
    { 1208, "dynjunk", "junk_washer1" },
    { 1293, "dynnewstnd2", "news_128" },
    { 2925, "dyno_box", "dyno_crate" },
    { 1216, "dynphn", "phoneboxmiami" },
    { 1258, "dynpostbx", "mailbox2_64" },
    { 1258, "dynpostbx", "postbox" },
    { 1258, "dynpostbx", "white64" },
    { 1236, "dynrecycle", "bincover_64HV" },
    { 1236, "dynrecycle", "recycle01_64" },
    { 1315, "dyntraffic", "Alumox64e" },
    { 1315, "dyntraffic", "trafficlight_64" },
    { 1575, "dyn_drugs", "drugs1" },
    { 1575, "dyn_drugs", "drugs2" },
    { 1575, "dyn_drugs", "drugs3" },
    { 1575, "dyn_drugs", "drugs4" },
    { 1575, "dyn_drugs", "drugs5" },
    { 1575, "dyn_drugs", "drugs6" },
    { 1508, "dyn_garage", "CJ_metalDOOR1" },
    { 1581, "dyn_keycard", "keycard" },
    { 1488, "dyn_objects", "CJ_bottle3" },
    { 1574, "dyn_trash", "binend" },
    { 1574, "dyn_trash", "trash" },
    { 1552, "dyn_vegas", "vgnfence1_256" },
    { 17550, "eastbeach09_lae2", "Sprunksign1_LAe2" },
    { 17550, "eastbeach09_lae2", "sprunkwall1_LAe2" },
    { 17550, "eastbeach09_lae2", "sprunkwall2_LAe2" },
    { 17550, "eastbeach09_lae2", "sprunkwall3_LAe2" },
    { 17550, "eastbeach09_lae2", "sprunkwall4_LAe2" },
    { 17541, "eastbeach2a_lae2", "airportwind02" },
    { 17541, "eastbeach2a_lae2", "craproad5_LAe" },
    { 17541, "eastbeach2a_lae2", "downtwin17" },
    { 17541, "eastbeach2a_lae2", "gangshop5_LAe" },
    { 17541, "eastbeach2a_lae2", "gangsign1_LAe" },
    { 17541, "eastbeach2a_lae2", "hedge1" },
    { 17541, "eastbeach2a_lae2", "lights_64HV" },
    { 17541, "eastbeach2a_lae2", "sfe_nicearch6" },
    { 17541, "eastbeach2a_lae2", "towaway" },
    { 17555, "eastbeach3c_lae2", "compfence3_LAe" },
    { 17555, "eastbeach3c_lae2", "compnews3lae" },
    { 17555, "eastbeach3c_lae2", "decobuild2d_LAn" },
    { 17555, "eastbeach3c_lae2", "deisel_2sfs" },
    { 17555, "eastbeach3c_lae2", "eastwall1_LAe2" },
    { 17555, "eastbeach3c_lae2", "gradient128" },
    { 17555, "eastbeach3c_lae2", "LASLACMA992" },
    { 17555, "eastbeach3c_lae2", "lastat1" },
    { 17555, "eastbeach3c_lae2", "metpull_law" },
    { 17555, "eastbeach3c_lae2", "vgs_shpfrnt03_128" },
    { 17555, "eastbeach3c_lae2", "yelowmankypatio_lae2" },
    { 17555, "eastbeach3c_lae2", "yelowmankywall_lae2" },
    { 17555, "eastbeach3c_lae2", "yelowmankywin_lae2" },
    { 17547, "eastbeach4a_lae2", "aptsforrent_lae2" },
    { 17547, "eastbeach4a_lae2", "bluestucco1" },
    { 17547, "eastbeach4a_lae2", "dryhedge_128" },
    { 17547, "eastbeach4a_lae2", "greywallb256" },
    { 17547, "eastbeach4a_lae2", "LAdtbuilding3" },
    { 17547, "eastbeach4a_lae2", "LAdtbuilding5" },
    { 17547, "eastbeach4a_lae2", "lastaco6" },
    { 17547, "eastbeach4a_lae2", "ltgreenwallc1" },
    { 17547, "eastbeach4a_lae2", "policeha02_128" },
    { 17547, "eastbeach4a_lae2", "sand256" },
    { 17547, "eastbeach4a_lae2", "snpedwen2" },
    { 17533, "eastbeach7_lae2", "apartmentwin2blank_256" },
    { 17533, "eastbeach7_lae2", "apartmentwin2_256" },
    { 17533, "eastbeach7_lae2", "apartmentwin3_256" },
    { 17533, "eastbeach7_lae2", "bluewin1" },
    { 17533, "eastbeach7_lae2", "shopwindowlow2_256" },
    { 17549, "eastbeach8_lae2", "beachshop1_LAe2" },
    { 17549, "eastbeach8_lae2", "beachshop2_LAe2" },
    { 17549, "eastbeach8_lae2", "beachsigns1_LAe2" },
    { 13710, "easthills_lahills", "sjmoran4" },
    { 17542, "eastls1b_lae2", "bricksign1_LAe" },
    { 17542, "eastls1b_lae2", "comptwall25" },
    { 17542, "eastls1b_lae2", "comptwall3" },
    { 17542, "eastls1b_lae2", "gangshop3_LAe" },
    { 17542, "eastls1b_lae2", "gangshop4_LAe" },
    { 17542, "eastls1b_lae2", "gangshop7_LAe" },
    { 17542, "eastls1b_lae2", "gangshTop1_LAe" },
    { 17542, "eastls1b_lae2", "papershop_law" },
    { 17542, "eastls1b_lae2", "tanstucco1_LA" },
    { 17542, "eastls1b_lae2", "vendr01_law" },
    { 17526, "eastls1_lae2", "alleywall1" },
    { 17526, "eastls1_lae2", "alleywall4" },
    { 17526, "eastls1_lae2", "alleywall5" },
    { 17526, "eastls1_lae2", "comptsign1_LAe" },
    { 17526, "eastls1_lae2", "comptsign2_LAe" },
    { 17526, "eastls1_lae2", "comptsign3_LAe" },
    { 17526, "eastls1_lae2", "gangshop6_LAe" },
    { 17526, "eastls1_lae2", "sanpshop3" },
    { 17526, "eastls1_lae2", "spanshop2_LAe" },
    { 17526, "eastls1_lae2", "swapmall1" },
    { 17552, "eastls3_lae2", "motel_wall1" },
    { 17552, "eastls3_lae2", "venwins01_law" },
    { 17537, "eastls4_lae2", "alley256" },
    { 17537, "eastls4_lae2", "autosign_lae2" },
    { 17537, "eastls4_lae2", "backalley3_LAe" },
    { 17537, "eastls4_lae2", "carwash_sign2" },
    { 17537, "eastls4_lae2", "cinboard_law" },
    { 17537, "eastls4_lae2", "clothes2_256" },
    { 17537, "eastls4_lae2", "compcourtrail2" },
    { 17537, "eastls4_lae2", "compdoor6_LAe" },
    { 17537, "eastls4_lae2", "comptwall13Bot" },
    { 17537, "eastls4_lae2", "cwashbboard" },
    { 17537, "eastls4_lae2", "ja_marketsgnlae2" },
    { 17537, "eastls4_lae2", "marksgn_lae2" },
    { 17537, "eastls4_lae2", "momapapa" },
    { 17537, "eastls4_lae2", "mural04_LA" },
    { 17537, "eastls4_lae2", "sjmhicut2las" },
    { 17537, "eastls4_lae2", "spanishwin1_LAe" },
    { 17537, "eastls4_lae2", "stripsign_lae2" },
    { 17537, "eastls4_lae2", "sun_plasterwall" },
    { 17537, "eastls4_lae2", "venblock01c" },
    { 17848, "eastlstr2_lae2", "antenna1" },
    { 17848, "eastlstr2_lae2", "deadpalm01" },
    { 17848, "eastlstr2_lae2", "dead_agave" },
    { 17848, "eastlstr2_lae2", "dead_fuzzy" },
    { 17504, "eastlstr_lae2", "brokesign1" },
    { 17504, "eastlstr_lae2", "compfence4_LAe" },
    { 17504, "eastlstr_lae2", "comptfurnitsign1" },
    { 17504, "eastlstr_lae2", "comptfurnitsign2" },
    { 17504, "eastlstr_lae2", "comptfurnitsign3" },
    { 17504, "eastlstr_lae2", "mural07_LA" },
    { 17504, "eastlstr_lae2", "scrapmet1_LAe" },
    { 5392, "eastshops1_lae", "blueshop2_LAe" },
    { 5392, "eastshops1_lae", "gardenshop1LAe" },
    { 5392, "eastshops1_lae", "glasprinshop1LAe" },
    { 5392, "eastshops1_lae", "petbarshop1LAe" },
    { 5392, "eastshops1_lae", "roof12L" },
    { 5392, "eastshops1_lae", "shopdoors1_LAe" },
    { 5392, "eastshops1_lae", "woodwaresign1" },
    { 17553, "ebeachcineblok", "3winstone_law" },
    { 17553, "ebeachcineblok", "downtwin21" },
    { 17553, "ebeachcineblok", "forlease_lae2" },
    { 17553, "ebeachcineblok", "ja_Angelesinvsgn_lae2" },
    { 17553, "ebeachcineblok", "pizzatop_128" },
    { 969, "electricgate", "airport1_64" },
    { 969, "electricgate", "airport2_64" },
    { 969, "electricgate", "banding6_64HV" },
    { 969, "electricgate", "binwheel64" },
    { 969, "electricgate", "KeepOut_64" },
    { 969, "electricgate", "notice01" },
    { 3272, "ele_substation", "cabin2" },
    { 3272, "ele_substation", "des_substa_bit1" },
    { 3272, "ele_substation", "des_substa_bit2" },
    { 3272, "ele_substation", "lasjmpow1" },
    { 3272, "ele_substation", "lasjmpow2" },
    { 3272, "ele_substation", "lasjmpow6" },
    { 3272, "ele_substation", "lasjmpow8" },
    { 3272, "ele_substation", "lasjmpow92" },
    { 14530, "estate2", "ab_dsWhiteboard" },
    { 14530, "estate2", "ab_SFmap" },
    { 14530, "estate2", "Auto_feltzer" },
    { 14530, "estate2", "Auto_hustler" },
    { 14530, "estate2", "Auto_monstera" },
    { 14530, "estate2", "Auto_Slamvan2" },
    { 14530, "estate2", "Auto_windsor" },
    { 14530, "estate2", "firextingtemp" },
    { 14530, "estate2", "man_parquet" },
    { 14530, "estate2", "mp_bobbie_carpet" },
    { 1963, "estateprops", "blu_cyl_32" },
    { 1963, "estateprops", "bnk_ppr_64" },
    { 1963, "estateprops", "bnk_shdo3a" },
    { 1963, "estateprops", "grn_cyl_32" },
    { 1963, "estateprops", "red_cyl_32" },
    { 8498, "excalibur", "excalibur01" },
    { 8498, "excalibur", "excalibur02_64" },
    { 8498, "excalibur", "excalibur03_64" },
    { 8498, "excalibur", "excalibur04_64" },
    { 8498, "excalibur", "excalibur05_64" },
    { 8498, "excalibur", "excalibur06" },
    { 8498, "excalibur", "excalibur07_64" },
    { 8498, "excalibur", "excalibur08_64" },
    { 8498, "excalibur", "excaliburledge01" },
    { 8498, "excalibur", "excaliburwall01_128" },
    { 8498, "excalibur", "excaliburwall02_128" },
    { 8498, "excalibur", "excaliburwall03_128" },
    { 8498, "excalibur", "excaliburwall04_64" },
    { 8498, "excalibur", "excaliburwall05_128" },
    { 8498, "excalibur", "excaliburwall06_64" },
    { 8498, "excalibur", "excaliburwall07" },
    { 8498, "excalibur", "excaliburwall08" },
    { 8498, "excalibur", "excaliburwall09" },
    { 8498, "excalibur", "excaliburwndw01_128" },
    { 8498, "excalibur", "vegaspavement2_256" },
    { 8498, "excalibur", "vegasroad1_256" },
    { 8620, "excalibursign", "excalibursign01_64" },
    { 8620, "excalibursign", "excalibursign02" },
    { 8620, "excalibursign", "excaliburwall10_128" },
    { 8620, "excalibursign", "exclbrsword" },
    { 8620, "excalibursign", "imperial05_128" },
    { 8620, "excalibursign", "vgsclubwall05_128" },
    { 3525, "excaliburtorch", "northwood3_128" },
    { 3525, "excaliburtorch", "sw_cabinwall01" },
    { 3525, "excaliburtorch", "tislndshpillar01_128" },
    { 8515, "exclibrland", "Bow_grass_gryard" },
    { 2600, "external", "CJ_LAMPPOST3" },
    { 2600, "external", "CJ_LAMPPOST4" },
    { 2600, "external", "CJ_LENS" },
    { 918, "externalext", "CJ_OIL_DRUM" },
    { 1495, "ext_doors2", "CJ_SCOR_DOOR" },
    { 1495, "ext_doors2", "CJ_WOODDOOR4" },
    { 1495, "ext_doors2", "flat_door01" },
    { 1498, "ext_doors_old", "CJ_DOOR6" },
    { 12814, "factorycunte", "dirtgrn128" },
    { 12814, "factorycunte", "hi_nopark1_256128" },
    { 12814, "factorycunte", "inddoor1" },
    { 12814, "factorycunte", "newall3_16c128" },
    { 17001, "factorycuntw", "frate_doors64128" },
    { 17001, "factorycuntw", "ladder64" },
    { 11244, "factorynewsfse", "ws_oldwarehouse10" },
    { 10775, "factory_sfse", "ws_oldwarehouse8" },
    { 10775, "factory_sfse", "ws_solarin" },
    { 1657, "fanani", "man_clnfn_blde" },
    { 1657, "fanani", "man_sdrm_cfanbdy" },
    { 17005, "farmhouse", "examwind1_LAe" },
    { 17005, "farmhouse", "gz_vic3d" },
    { 17005, "farmhouse", "sjmbigold2" },
    { 17005, "farmhouse", "sjmbigold6" },
    { 17005, "farmhouse", "ws_cheapodoor2" },
    { 3425, "farmstuff", "gs_wind2" },
    { 8547, "fctrygrnd01", "vgsclubpllr01_64" },
    { 10610, "fedmint_sfs", "ws_fedmint" },
    { 10610, "fedmint_sfs", "ws_fed_mint_win1" },
    { 10610, "fedmint_sfs", "ws_fed_mint_win2" },
    { 10610, "fedmint_sfs", "ws_rollerdoor_blue" },
    { 10610, "fedmint_sfs", "ws_security_door" },
    { 970, "fences", "NoParking_64" },
    { 970, "fences", "slab256" },
    { 970, "fences", "wirefence" },
    { 9901, "ferry_building", "ferry_build1" },
    { 9901, "ferry_building", "ferry_build10" },
    { 9901, "ferry_building", "ferry_build11" },
    { 9901, "ferry_building", "ferry_build12" },
    { 9901, "ferry_building", "ferry_build13" },
    { 9901, "ferry_building", "ferry_build2" },
    { 9901, "ferry_building", "ferry_build3" },
    { 9901, "ferry_building", "ferry_build5" },
    { 9901, "ferry_building", "ferry_build6" },
    { 9901, "ferry_building", "ferry_build76" },
    { 9901, "ferry_building", "ferry_build8" },
    { 9901, "ferry_building", "ferry_build9" },
    { 9901, "ferry_building", "skylight_windows" },
    { 4020, "fighot", "lasbevcit99xxx" },
    { 4020, "fighot", "Parking2_LAe2" },
    { 4020, "fighot", "sl_lavicdtcnr" },
    { 4020, "fighot", "sl_lavicdtdecor1" },
    { 4020, "fighot", "sl_lavicdtwin" },
    { 4020, "fighot", "sl_lavicdtwin2" },
    { 4020, "fighot", "sl_lavicdtwin3" },
    { 5705, "filmstud", "golf_heavygrass" },
    { 5705, "filmstud", "venicewin02" },
    { 5705, "filmstud", "venwall_la" },
    { 5705, "filmstud", "Victim_bboard" },
    { 11008, "firehouse_sfse", "halldoor01_law" },
    { 11008, "firehouse_sfse", "SFPD" },
    { 11008, "firehouse_sfse", "SFSE_WRHSE_WNDW" },
    { 11008, "firehouse_sfse", "ws_usflagcrumpled" },
    { 2961, "fire_brx", "fire_break" },
    { 1599, "fish1", "fish2" },
    { 1600, "fish2", "fish3" },
    { 1601, "fish3", "fish1" },
    { 9910, "fishwarf", "gz_vic3b" },
    { 9910, "fishwarf", "michelle_car4" },
    { 9910, "fishwarf", "rooftop_gz2" },
    { 9910, "fishwarf", "sfe_nicearch5" },
    { 9910, "fishwarf", "sf_backaley3" },
    { 9910, "fishwarf", "sf_windos_10wall" },
    { 9910, "fishwarf", "sw_realty" },
    { 8488, "flamingo1", "casinolights4_128" },
    { 8488, "flamingo1", "flmngo01_256" },
    { 8488, "flamingo1", "flmngo04_256" },
    { 8488, "flamingo1", "flmngo05_256" },
    { 8488, "flamingo1", "flmngo06_128" },
    { 8488, "flamingo1", "flmngo07_128" },
    { 8488, "flamingo1", "flmngo08" },
    { 8488, "flamingo1", "flmngo09" },
    { 8488, "flamingo1", "flmngo10_128" },
    { 8488, "flamingo1", "flmngoledge" },
    { 8844, "flmngoland", "la_tilered" },
    { 8844, "flmngoland", "newhedgea" },
    { 8844, "flmngoland", "vgschurchwall05_128" },
    { 1340, "foodkarts", "cardbrdplain64" },
    { 1340, "foodkarts", "chillidog_sign" },
    { 1340, "foodkarts", "dogcart01" },
    { 1340, "foodkarts", "dogcart02" },
    { 1340, "foodkarts", "dogcart03" },
    { 1340, "foodkarts", "dogcart04" },
    { 1340, "foodkarts", "dogcart05" },
    { 1340, "foodkarts", "dogcart06" },
    { 1340, "foodkarts", "gashob" },
    { 1340, "foodkarts", "iceyside" },
    { 1340, "foodkarts", "iceysign" },
    { 1340, "foodkarts", "noodbox" },
    { 1340, "foodkarts", "noodcart" },
    { 1340, "foodkarts", "noodex" },
    { 1340, "foodkarts", "noodex2" },
    { 1340, "foodkarts", "noodles_32" },
    { 5762, "foodlawn", "foodmartla2" },
    { 9582, "fort_sfw", "club_roofwin_sfw" },
    { 9582, "fort_sfw", "fortclub_1" },
    { 9582, "fort_sfw", "fortclub_10" },
    { 9582, "fort_sfw", "fortclub_11" },
    { 9582, "fort_sfw", "fortclub_2" },
    { 9582, "fort_sfw", "fortclub_5" },
    { 9582, "fort_sfw", "fortclub_6" },
    { 9582, "fort_sfw", "fortclub_7" },
    { 9582, "fort_sfw", "fortclub_8" },
    { 9582, "fort_sfw", "fortclub_9" },
    { 9582, "fort_sfw", "fortclub_extrabits" },
    { 9582, "fort_sfw", "mallfloor2" },
    { 11413, "fosterflowers", "starflower1" },
    { 11413, "fosterflowers", "starflower3" },
    { 10940, "fosterroads_sfse", "ws_freeway3" },
    { 9833, "fountain_sfw", "fountain_sfw" },
    { 10489, "freeway2_sfs", "ws_freeway2" },
    { 10489, "freeway2_sfs", "ws_freeway3blend" },
    { 11135, "freeways2_sfse", "dt_road2grasstype4" },
    { 10857, "freeways3_sfse", "ws_bridgepavement" },
    { 10857, "freeways3_sfse", "ws_freeway1" },
    { 4809, "freeway_las", "metal_stair_64H" },
    { 4809, "freeway_las", "obhilltex1" },
    { 4809, "freeway_las", "pavemiddirt_law" },
    { 4809, "freeway_las", "whitetile_plain_hi" },
    { 2963, "freezrx", "freeze_door" },
    { 3474, "freightcrane", "bluecab1_256" },
    { 3474, "freightcrane", "bluecab2_256" },
    { 3474, "freightcrane", "bluecab3_256" },
    { 3474, "freightcrane", "bluecab4_256" },
    { 3474, "freightcrane", "junk_tyre" },
    { 3474, "freightcrane", "metalwheel1_256" },
    { 3474, "freightcrane", "oldpaintyelend_256" },
    { 3474, "freightcrane", "yellowcabchev_256" },
    { 10230, "freight_sfe", "freighterhull3" },
    { 10230, "freight_sfe", "freighterhull4" },
    { 10230, "freight_sfe", "tyre_ship_sfe" },
    { 10140, "frieghter2sfe", "sfMAST2" },
    { 10140, "frieghter2sfe", "sf_shipbulklight" },
    { 10140, "frieghter2sfe", "sf_ship_ceiling" },
    { 10140, "frieghter2sfe", "sf_ship_generic17" },
    { 10140, "frieghter2sfe", "sf_ship_generic26" },
    { 10140, "frieghter2sfe", "sf_ship_generic6" },
    { 10140, "frieghter2sfe", "sf_ship_gratet" },
    { 10140, "frieghter2sfe", "sf_ship_interior" },
    { 10140, "frieghter2sfe", "sf_ship_pipes" },
    { 10140, "frieghter2sfe", "sf_ship_steps" },
    { 17503, "furniture_lae2", "ammu_airvent" },
    { 17503, "furniture_lae2", "brckwht128" },
    { 17503, "furniture_lae2", "clukmenu1_LAe2" },
    { 17503, "furniture_lae2", "comptwall19" },
    { 17503, "furniture_lae2", "craproad6_LAe" },
    { 17503, "furniture_lae2", "furndetail1_LAe" },
    { 17503, "furniture_lae2", "inwindow4" },
    { 17503, "furniture_lae2", "LAmexfood1" },
    { 17503, "furniture_lae2", "strpclb4_LAe" },
    { 17503, "furniture_lae2", "totem64" },
    { 1824, "gamingtble", "craps-layout" },
    { 1824, "gamingtble", "crapside_128" },
    { 17700, "gangblok1_lae2", "GB_doorpur01" },
    { 17700, "gangblok1_lae2", "gz_vic3c" },
    { 17700, "gangblok1_lae2", "mural01_LA" },
    { 17700, "gangblok1_lae2", "pigpen1_LAe" },
    { 17700, "gangblok1_lae2", "sanpshop4z" },
    { 17700, "gangblok1_lae2", "strpclb1_LAe" },
    { 17700, "gangblok1_lae2", "strpclb2_LAe" },
    { 17700, "gangblok1_lae2", "strpclb3_LAe" },
    { 17700, "gangblok1_lae2", "tacostand1_LAe" },
    { 17700, "gangblok1_lae2", "warehouse2" },
    { 14443, "ganghoos", "ab_wall3" },
    { 14443, "ganghoos", "ab_wallPanel" },
    { 14443, "ganghoos", "ah_BADCEIL" },
    { 14443, "ganghoos", "AH_bathwalls" },
    { 14443, "ganghoos", "ah_CRAKPLNK" },
    { 14443, "ganghoos", "ah_curtains1" },
    { 14443, "ganghoos", "AH_filthtiles" },
    { 14443, "ganghoos", "AH_filthtiles2" },
    { 14443, "ganghoos", "ah_FLKWIN" },
    { 14443, "ganghoos", "ah_mikebindsarse" },
    { 14443, "ganghoos", "AH_oldwdpan" },
    { 14443, "ganghoos", "AH_pelmet" },
    { 14443, "ganghoos", "AH_walltile3" },
    { 14443, "ganghoos", "ah_yelbadwall" },
    { 14443, "ganghoos", "motel_bathfloor" },
    { 14443, "ganghoos", "mp_burn_carpet" },
    { 14443, "ganghoos", "mp_burn_carpet1" },
    { 14443, "ganghoos", "mp_burn_carpet2" },
    { 14443, "ganghoos", "mp_burn_carpet3" },
    { 14443, "ganghoos", "mp_burn_wall3" },
    { 3646, "ganghouse1_lax", "aanewd" },
    { 3646, "ganghouse1_lax", "comptroof4" },
    { 3646, "ganghouse1_lax", "comptwall14" },
    { 3646, "ganghouse1_lax", "comptwall7" },
    { 3646, "ganghouse1_lax", "grille1_LA" },
    { 3646, "ganghouse1_lax", "snpdhus2" },
    { 17515, "ganton01_lae2", "comptsign7_LAe" },
    { 17515, "ganton01_lae2", "yelloplaster1" },
    { 17577, "ganton02_lae2", "century02_LA" },
    { 17577, "ganton02_lae2", "greenbot1_LAe2" },
    { 17577, "ganton02_lae2", "greenbot2_LAe2" },
    { 5774, "garag3_lawn", "bigblue3" },
    { 5774, "garag3_lawn", "orngpartwall1_256" },
    { 5774, "garag3_lawn", "sprysig1" },
    { 9625, "garage_sfw", "garage1b_sfw" },
    { 9625, "garage_sfw", "garage2b_sfw" },
    { 9625, "garage_sfw", "garage3b_sfw" },
    { 9625, "garage_sfw", "garage_win_sfw" },
    { 9625, "garage_sfw", "toll_SFw4" },
    { 10629, "gardencentre_sfs", "ws_uphill" },
    { 1672, "gasgren", "gun_teargas_2" },
    { 985, "gategen", "trespasign1_256" },
    { 10713, "gayclub_sfs", "CJ_GEN_GLASS2" },
    { 10713, "gayclub_sfs", "CJ_PIZZA_DOOR" },
    { 10713, "gayclub_sfs", "ws_gaydar" },
    { 10713, "gayclub_sfs", "ws_plasterwall1" },
    { 3853, "gay_xref", "metatelepole1" },
    { 3853, "gay_xref", "teleconect2" },
    { 3853, "gay_xref", "ws_gayflag1" },
    { 3853, "gay_xref", "ws_gayflag2" },
    { 6102, "gazlaw1", "Bow_bar_entrance_door" },
    { 6102, "gazlaw1", "lawshop2" },
    { 6102, "gazlaw1", "lawshop3" },
    { 6102, "gazlaw1", "lawshopwall1" },
    { 6102, "gazlaw1", "lawshopwall1b" },
    { 6102, "gazlaw1", "lawshopwall2" },
    { 6102, "gazlaw1", "lawshopwall2b" },
    { 6102, "gazlaw1", "lawshopwall3" },
    { 6102, "gazlaw1", "lawshopwall3b" },
    { 6102, "gazlaw1", "lawshopwall4b" },
    { 6102, "gazlaw1", "lawshopwall4c" },
    { 6102, "gazlaw1", "law_gazgrn1" },
    { 6102, "gazlaw1", "law_gazgrn4" },
    { 6102, "gazlaw1", "law_gazgrn7" },
    { 6102, "gazlaw1", "law_gazwhite1" },
    { 6102, "gazlaw1", "law_gazwhite2" },
    { 6102, "gazlaw1", "law_gazwhite4" },
    { 6102, "gazlaw1", "law_gazwhite5" },
    { 6102, "gazlaw1", "law_gazwhitefloor" },
    { 6102, "gazlaw1", "law_gazwhitestep" },
    { 6102, "gazlaw1", "pawn_door01" },
    { 6104, "gazlaw2", "gm_labuld4_a" },
    { 6104, "gazlaw2", "gm_labuld4_b" },
    { 6104, "gazlaw2", "gm_labuld4_d" },
    { 6104, "gazlaw2", "gm_labuld4_e" },
    { 6104, "gazlaw2", "gm_labuld4_f" },
    { 6104, "gazlaw2", "lawshop1" },
    { 6104, "gazlaw2", "law_gazbrn1" },
    { 6104, "gazlaw2", "sw_storewin05" },
    { 6104, "gazlaw2", "sw_wind19" },
    { 6157, "gazlaw3", "churchdoor1_LAn" },
    { 6157, "gazlaw3", "lawbanding1" },
    { 6157, "gazlaw3", "law_archthing1" },
    { 6157, "gazlaw3", "law_archthing2" },
    { 6157, "gazlaw3", "law_archthing3" },
    { 6157, "gazlaw3", "law_archthing4" },
    { 6157, "gazlaw3", "law_archthing5" },
    { 6157, "gazlaw3", "law_archthing6" },
    { 6157, "gazlaw3", "law_archthing7" },
    { 6157, "gazlaw3", "mono3_sfe" },
    { 6157, "gazlaw3", "mono4_sfe" },
    { 6157, "gazlaw3", "pier69_planter" },
    { 6157, "gazlaw3", "sfe_bigbuild3" },
    { 6157, "gazlaw3", "swintops01c_law" },
    { 6157, "gazlaw3", "swintops01d_law" },
    { 6157, "gazlaw3", "swintops01_law" },
    { 9300, "gazsfn1", "fillerbase01_law" },
    { 9300, "gazsfn1", "fillerbase02_law" },
    { 9300, "gazsfn1", "fillerbase_law" },
    { 9300, "gazsfn1", "fillerdoor_law" },
    { 9300, "gazsfn1", "law_gazcoast1" },
    { 9300, "gazsfn1", "law_gazcoast2" },
    { 9301, "gazsfn2", "Bow_Smear_Cement" },
    { 9301, "gazsfn2", "law_gazgrn2" },
    { 9278, "gazsfnlite", "cst_bollard_sfw" },
    { 9278, "gazsfnlite", "fusebox1_128" },
    { 9278, "gazsfnlite", "sfxref_flagpole" },
    { 9278, "gazsfnlite", "sfxref_lite2c" },
    { 2817, "gb_bedrmrugs01", "GB_livingrug03" },
    { 2817, "gb_bedrmrugs01", "GB_rugbedroom01" },
    { 2817, "gb_bedrmrugs01", "GB_rugbedroom02" },
    { 2817, "gb_bedrmrugs01", "GB_rugbedroom03" },
    { 2819, "gb_bedroomclths01", "GB_clothesbed01" },
    { 2819, "gb_bedroomclths01", "GB_clothesbed02" },
    { 2819, "gb_bedroomclths01", "GB_clothesbed03" },
    { 2819, "gb_bedroomclths01", "GB_clothesbed04" },
    { 2819, "gb_bedroomclths01", "GB_clothesbed05" },
    { 2813, "gb_books01", "GB_magazine02" },
    { 2813, "gb_books01", "GB_magazine05" },
    { 2813, "gb_books01", "GB_magazine06" },
    { 2813, "gb_books01", "GB_novels01" },
    { 2813, "gb_books01", "GB_novels02" },
    { 2813, "gb_books01", "GB_novels03" },
    { 2813, "gb_books01", "GB_novels04" },
    { 2813, "gb_books01", "GB_novels05" },
    { 2813, "gb_books01", "GB_novels07" },
    { 2813, "gb_books01", "GB_novels08" },
    { 2813, "gb_books01", "GB_novels09" },
    { 2813, "gb_books01", "GB_novels10" },
    { 2813, "gb_books01", "GB_novels11" },
    { 2813, "gb_books01", "GB_novels12" },
    { 2822, "gb_cleancrock01", "cj_plate" },
    { 2822, "gb_cleancrock01", "cj_plate2" },
    { 2822, "gb_cleancrock01", "GB_plateclean01" },
    { 2812, "gb_dirtycrock01", "GB_bowldirty01" },
    { 2812, "gb_dirtycrock01", "GB_mug01" },
    { 2812, "gb_dirtycrock01", "GB_platedirty01" },
    { 2812, "gb_dirtycrock01", "GB_platedirty02" },
    { 2812, "gb_dirtycrock01", "GB_platedirty03" },
    { 2821, "gb_foodwrap01", "cj_napkin" },
    { 2821, "gb_foodwrap01", "GB_foodwrap02" },
    { 2821, "gb_foodwrap01", "GB_foodwrap03" },
    { 2821, "gb_foodwrap01", "GB_foodwrap04" },
    { 2821, "gb_foodwrap01", "midgrey64" },
    { 2821, "gb_foodwrap01", "sm_marble" },
    { 2823, "gb_kitchtake", "CJ_BS2" },
    { 2823, "gb_kitchtake", "deep_red64" },
    { 2823, "gb_kitchtake", "GB_pizzabox01" },
    { 2823, "gb_kitchtake", "GB_takeaway01" },
    { 2823, "gb_kitchtake", "GB_takeaway02" },
    { 2823, "gb_kitchtake", "GB_takeaway03" },
    { 2823, "gb_kitchtake", "GB_takeaway04" },
    { 2816, "gb_magazines01", "GB_magazine03" },
    { 2811, "gb_ornaments01", "beigehotel_128" },
    { 2811, "gb_ornaments01", "GB_photo01" },
    { 2811, "gb_ornaments01", "GB_photo02" },
    { 2811, "gb_ornaments01", "GB_plant02" },
    { 2811, "gb_ornaments01", "GB_vase01" },
    { 2815, "gb_rugs01", "GB_livingrug02" },
    { 2815, "gb_rugs01", "GB_rug01" },
    { 1616, "genalley", "gensecuritycam" },
    { 1616, "genalley", "ventgen128" },
    { 15034, "genhotelsave", "ab_mottleWhite" },
    { 15034, "genhotelsave", "AH_windows" },
    { 15034, "genhotelsave", "andydark2" },
    { 15034, "genhotelsave", "bathtile04_int" },
    { 15034, "genhotelsave", "bathtile05_int" },
    { 15034, "genhotelsave", "CJ_PAINTING8" },
    { 15034, "genhotelsave", "HS2_2Wall4" },
    { 15034, "genhotelsave", "lw_desklamp_128_256" },
    { 15034, "genhotelsave", "walp57S" },
    { 18025, "genintclothessport", "CJ_PRO_WIN" },
    { 18025, "genintclothessport", "mp_cloth_pcarp" },
    { 18025, "genintclothessport", "mp_cloth_prob" },
    { 18025, "genintclothessport", "mp_cloth_pwall" },
    { 18025, "genintclothessport", "mp_cop_sep" },
    { 18012, "genintgeneric", "kb_teracota_pot2_64" },
    { 18012, "genintgeneric", "planterbox128" },
    { 14770, "genintgenintint3", "brothredleth" },
    { 14770, "genintgenintint3", "GB_midbar03" },
    { 14770, "genintgenintint3", "GB_midbar04" },
    { 14825, "genintint2_gym", "boxgym_mainlightingmap" },
    { 14825, "genintint2_gym", "gym_ceiling" },
    { 14825, "genintint2_gym", "gym_pillar" },
    { 14825, "genintint2_gym", "plywood3_gym" },
    { 14665, "genintint711_1", "711_walltemp" },
    { 14665, "genintint711_1", "interiorwindowglow" },
    { 14665, "genintint711_1", "mp_gun_mat" },
    { 18018, "genintintbarb", "GB_midbar01" },
    { 18018, "genintintbarb", "GB_midbar07" },
    { 18018, "genintintbarb", "GB_midbar12" },
    { 18018, "genintintbarb", "Gen_Gantry_Rust" },
    { 18001, "genintintbarbera", "barbersfurn1" },
    { 18001, "genintintbarbera", "barberslight1" },
    { 18001, "genintintbarbera", "barberstill" },
    { 18001, "genintintbarbera", "barbers_junk2" },
    { 18001, "genintintbarbera", "barbers_junk3" },
    { 14776, "genintintcarint3", "ab_steelFrame" },
    { 14776, "genintintcarint3", "auto_tune1" },
    { 14776, "genintintcarint3", "auto_tune3" },
    { 14776, "genintintcarint3", "concretebigc256" },
    { 14776, "genintintcarint3", "doornvent256128" },
    { 14776, "genintintcarint3", "Industdoor1128" },
    { 14776, "genintintcarint3", "joey_shadow_texture" },
    { 14776, "genintintcarint3", "leccy_cables" },
    { 14776, "genintintcarint3", "Metal2_256128" },
    { 14776, "genintintcarint3", "metpat_64" },
    { 14776, "genintintcarint3", "porta_256128" },
    { 14776, "genintintcarint3", "posh1_128" },
    { 14776, "genintintcarint3", "smoketest1a_sfw" },
    { 14776, "genintintcarint3", "toolwall1" },
    { 14776, "genintintcarint3", "tool_store" },
    { 14776, "genintintcarint3", "tool_store2" },
    { 14776, "genintintcarint3", "tyretread_64H" },
    { 14776, "genintintcarint3", "yellowvertical_64HV" },
    { 18022, "genintintfasta", "ceilingtile1_128" },
    { 18022, "genintintfasta", "CJ_TILE1" },
    { 18022, "genintintfasta", "diner_wall5" },
    { 18020, "genintintfastb2", "BS_WINDOW" },
    { 18020, "genintintfastb2", "cj_burgerwood" },
    { 18020, "genintintfastb2", "CJ_BURG_WALL" },
    { 18020, "genintintfastb2", "ws_terratiles" },
    { 18023, "genintintfastc", "CJ_GREENWOOD2" },
    { 18023, "genintintfastc", "CJ_PIZZA_WALL" },
    { 18023, "genintintfastc", "dinerfloor01_128" },
    { 18023, "genintintfastc", "wellstackedpizza_256" },
    { 18021, "genintintfastd", "barbers_wall1" },
    { 18021, "genintintfastd", "CJ_DON_WIN" },
    { 18021, "genintintfastd", "tile_test3red" },
    { 14826, "genintintgarage2a", "car_cover4" },
    { 14826, "genintintgarage2a", "car_jack" },
    { 14826, "genintintgarage2a", "kb_tyre" },
    { 14826, "genintintgarage2a", "remingtonkb1" },
    { 14842, "genintintpolicea", "copcell_bars" },
    { 14842, "genintintpolicea", "copstuff" },
    { 14842, "genintintpolicea", "cops_chrome" },
    { 14842, "genintintpolicea", "cop_notice" },
    { 14842, "genintintpolicea", "filing_cabnu" },
    { 14842, "genintintpolicea", "poldesk" },
    { 14842, "genintintpolicea", "poldesktop" },
    { 14846, "genintintpoliceb", "breezewall2" },
    { 14846, "genintintpoliceb", "copbtm_green" },
    { 14846, "genintintpoliceb", "coptop_blue" },
    { 14846, "genintintpoliceb", "coptop_brown" },
    { 14846, "genintintpoliceb", "coptop_pink" },
    { 14846, "genintintpoliceb", "cop_bench" },
    { 14846, "genintintpoliceb", "cop_cellfloor" },
    { 14846, "genintintpoliceb", "cop_cellwall" },
    { 14846, "genintintpoliceb", "cop_cellwall_btm" },
    { 14846, "genintintpoliceb", "pol_dor_surr2" },
    { 14846, "genintintpoliceb", "pol_flr164" },
    { 14846, "genintintpoliceb", "pol_flr2" },
    { 14846, "genintintpoliceb", "pol_flr3" },
    { 14846, "genintintpoliceb", "pol_galss1a" },
    { 14846, "genintintpoliceb", "pol_stairs2" },
    { 14846, "genintintpoliceb", "p_countr" },
    { 14846, "genintintpoliceb", "p_door1" },
    { 14846, "genintintpoliceb", "p_floor2" },
    { 14846, "genintintpoliceb", "p_floor3" },
    { 14846, "genintintpoliceb", "p_floor4" },
    { 14666, "genintintsex", "backdoor_128" },
    { 14666, "genintintsex", "CJ_BLUE_DOOR" },
    { 14666, "genintintsex", "mp_cop_floor2" },
    { 14666, "genintintsex", "mp_porn_wall" },
    { 18029, "genintintsmallrest", "GB_restaursmll02" },
    { 18029, "genintintsmallrest", "GB_restaursmll03" },
    { 18029, "genintintsmallrest", "GB_restaursmll04" },
    { 18029, "genintintsmallrest", "GB_restaursmll05" },
    { 18029, "genintintsmallrest", "GB_restaursmll06" },
    { 18029, "genintintsmallrest", "GB_restaursmll07" },
    { 18029, "genintintsmallrest", "GB_restaursmll08" },
    { 18029, "genintintsmallrest", "GB_restaursmll09" },
    { 18029, "genintintsmallrest", "GB_restaursmll10" },
    { 18029, "genintintsmallrest", "GB_restaursmll11" },
    { 18029, "genintintsmallrest", "GB_restaursmll12" },
    { 18029, "genintintsmallrest", "GB_restaursmll13" },
    { 18029, "genintintsmallrest", "GB_restaursmll14" },
    { 18029, "genintintsmallrest", "GB_restaursmll15" },
    { 18029, "genintintsmallrest", "GB_restaursmll16b" },
    { 18029, "genintintsmallrest", "GB_restaursmll19" },
    { 18029, "genintintsmallrest", "GB_restaursmll20" },
    { 18029, "genintintsmallrest", "kitchensink_256" },
    { 2627, "genintint_gym", "bench_test1" },
    { 2627, "genintint_gym", "bench_test2" },
    { 2627, "genintint_gym", "bench_test2b" },
    { 2627, "genintint_gym", "chrome_tube1" },
    { 2627, "genintint_gym", "cycle1" },
    { 2627, "genintint_gym", "cycle2" },
    { 2627, "genintint_gym", "gym_runni" },
    { 2627, "genintint_gym", "weight1" },
    { 18009, "genintrestrest1", "adobe_wall1" },
    { 18009, "genintrestrest1", "rest_cob" },
    { 18009, "genintrestrest1", "rest_floor2_512" },
    { 18009, "genintrestrest1", "rest_gravel" },
    { 18009, "genintrestrest1", "rest_mainlightingmap" },
    { 18009, "genintrestrest1", "rest_wall5" },
    { 18010, "genintrestrest2", "ceiling_light64" },
    { 18010, "genintrestrest2", "kbsofa333c" },
    { 18010, "genintrestrest2", "kb_canopy128_2" },
    { 18055, "genintsmlrst_split", "GB_restaursmll01" },
    { 18055, "genintsmlrst_split", "GB_restaursmll16a" },
    { 18055, "genintsmlrst_split", "GB_restaursmll17a" },
    { 18055, "genintsmlrst_split", "GB_restaursmll17b" },
    { 18055, "genintsmlrst_split", "GB_restaursmll21" },
    { 18055, "genintsmlrst_split", "GB_restaursmll22" },
    { 18055, "genintsmlrst_split", "GB_restaursmll23" },
    { 14784, "genintwarehsint3", "lasjmflood2" },
    { 14784, "genintwarehsint3", "lastat97" },
    { 14784, "genintwarehsint3", "lightwallba256" },
    { 14784, "genintwarehsint3", "sjmdockral1" },
    { 14784, "genintwarehsint3", "sjmlawardra1" },
    { 14784, "genintwarehsint3", "sjmlawarwall2" },
    { 14784, "genintwarehsint3", "sjmlawarwall4" },
    { 14784, "genintwarehsint3", "sjmpostbar2" },
    { 14784, "genintwarehsint3", "snpdimwin1" },
    { 10751, "genroads_sfse", "sf_tramline2" },
    { 8508, "genshop", "shoptiles01_128" },
    { 8508, "genshop", "vgs_shpfrnt04_128" },
    { 10844, "genwhse_sfse", "slab64" },
    { 18045, "gen_munation", "mp_gun_floor" },
    { 18045, "gen_munation", "mp_gun_shutter" },
    { 18047, "gen_mun_counter", "mp_gun_cabinet" },
    { 18047, "gen_mun_counter", "mp_gun_counter" },
    { 18047, "gen_mun_counter", "mp_gun_metal" },
    { 18048, "gen_mun_xtars2", "mp_gun_man" },
    { 18048, "gen_mun_xtars2", "mp_gun_man2" },
    { 18048, "gen_mun_xtars2", "mp_gun_man3" },
    { 18048, "gen_mun_xtars2", "star_spang" },
    { 14785, "gen_offtrackint", "bluemat_32" },
    { 14785, "gen_offtrackint", "exitgreen_64" },
    { 14785, "gen_offtrackint", "otb_mural1" },
    { 14785, "gen_offtrackint", "otb_mural2" },
    { 14785, "gen_offtrackint", "otb_mural3" },
    { 14785, "gen_offtrackint", "otb_mural4" },
    { 14785, "gen_offtrackint", "otb_rooftile1" },
    { 14785, "gen_offtrackint", "otb_rooftile2" },
    { 14800, "gen_otb_bits", "ab_boxStack" },
    { 1686, "gen_petrol", "vgnptrpump1_256" },
    { 1686, "gen_petrol", "vgnptrpump2_128" },
    { 14853, "gen_pol_vegas", "blue_carpet_256" },
    { 14853, "gen_pol_vegas", "burglry_wall5b" },
    { 14853, "gen_pol_vegas", "grey_carpet_256" },
    { 14853, "gen_pol_vegas", "mp_cop_bars" },
    { 14853, "gen_pol_vegas", "mp_cop_chief" },
    { 14853, "gen_pol_vegas", "mp_cop_frame" },
    { 14853, "gen_pol_vegas", "mp_cop_name" },
    { 14853, "gen_pol_vegas", "mp_cop_panel" },
    { 14853, "gen_pol_vegas", "mp_cop_pinboard" },
    { 14853, "gen_pol_vegas", "mp_cop_signs" },
    { 14853, "gen_pol_vegas", "mp_cop_wall" },
    { 14853, "gen_pol_vegas", "mp_cop_whiteboard" },
    { 14853, "gen_pol_vegas", "mp_cop_wood" },
    { 14853, "gen_pol_vegas", "mp_gun_dirt" },
    { 14853, "gen_pol_vegas", "mp_police_win" },
    { 14853, "gen_pol_vegas", "office_wallnu1" },
    { 14853, "gen_pol_vegas", "pol_win_kb" },
    { 14859, "gf1", "CJ_MAT2DIRT" },
    { 14859, "gf1", "mp_apt1_pos1" },
    { 14859, "gf1", "mp_apt1_pos2" },
    { 14859, "gf1", "mp_apt1_pos3" },
    { 14859, "gf1", "mp_apt1_pos4" },
    { 14859, "gf1", "mp_cooch_carp" },
    { 14859, "gf1", "mp_cooch_clothes" },
    { 14859, "gf1", "mp_cooch_frame" },
    { 14859, "gf1", "mp_cooch_wall" },
    { 14859, "gf1", "mp_cop_ceiling" },
    { 14865, "gf2", "mp_bobbie_carpwhite" },
    { 14865, "gf2", "mp_bobbie_pennant" },
    { 14865, "gf2", "mp_bobbie_pompom" },
    { 14865, "gf2", "mp_bobbie_pompom1" },
    { 14865, "gf2", "mp_bobbie_pompom2" },
    { 14865, "gf2", "mp_bobbie_wall" },
    { 14865, "gf2", "mp_bobbie_wood" },
    { 14871, "gf3", "kickhay" },
    { 14871, "gf3", "TREE_STUB1" },
    { 14876, "gf4", "mp_diner_sawdust" },
    { 14876, "gf4", "mp_gimp_officewall" },
    { 14876, "gf4", "mp_tank_floor" },
    { 14881, "gf5", "mp_jail_wall" },
    { 14888, "gf6", "gm_millie_cock" },
    { 14888, "gf6", "mp_gimp_basewall" },
    { 14888, "gf6", "mp_gimp_sponge" },
    { 14888, "gf6", "mp_gimp_tilefloor" },
    { 14888, "gf6", "mp_millie_ring" },
    { 14888, "gf6", "mp_millie_swing" },
    { 14888, "gf6", "mp_millie_wallwhite" },
    { 14888, "gf6", "mp_millie_whip" },
    { 14888, "gf6", "mp_millie_whip1" },
    { 14888, "gf6", "mp_millie_whip2" },
    { 14888, "gf6", "mp_millie_wood" },
    { 14888, "gf6", "mp_millie_woodwall" },
    { 14888, "gf6", "mp_vicgrill" },
    { 9608, "ggatepark", "gantsign2_sfw" },
    { 9608, "ggatepark", "gantsign_sfw" },
    { 9608, "ggatepark", "gg_sign2_sfw" },
    { 9608, "ggatepark", "gg_sign_sfw" },
    { 9608, "ggatepark", "sfe_diner1" },
    { 9608, "ggatepark", "sfe_diner2" },
    { 9608, "ggatepark", "sfe_diner3" },
    { 9608, "ggatepark", "sfe_diner4" },
    { 9269, "ggbridge_sfn", "stonesandkb2_128" },
    { 9269, "ggbridge_sfn", "ws_goldengate2" },
    { 5407, "glenpark1x_lae", "craproad1_LAe" },
    { 5407, "glenpark1x_lae", "downtsign12_LA" },
    { 5407, "glenpark1x_lae", "hedgealphad1" },
    { 5407, "glenpark1x_lae", "lasclean1" },
    { 5407, "glenpark1x_lae", "lasjmhoodcrb" },
    { 5407, "glenpark1x_lae", "lasjmscruffwall1" },
    { 5407, "glenpark1x_lae", "mural06_LA" },
    { 5407, "glenpark1x_lae", "sanpedton3" },
    { 5407, "glenpark1x_lae", "savtop" },
    { 5407, "glenpark1x_lae", "savtopWN" },
    { 5407, "glenpark1x_lae", "scumtiles3_LAe" },
    { 5407, "glenpark1x_lae", "sjmhoodlawn4" },
    { 5407, "glenpark1x_lae", "sl_pornshopla1" },
    { 5407, "glenpark1x_lae", "sl_pornshopla1b" },
    { 5443, "glenpark1_lae", "chocolate1" },
    { 5443, "glenpark1_lae", "concretebig4256" },
    { 5443, "glenpark1_lae", "mudyforest256" },
    { 5443, "glenpark1_lae", "transmishop1LAe" },
    { 5461, "glenpark6d_lae", "downtwin21b" },
    { 5461, "glenpark6d_lae", "GB_truckdepot20" },
    { 5461, "glenpark6d_lae", "gymshops1_LAe" },
    { 5461, "glenpark6d_lae", "gymshops2_LAe" },
    { 5461, "glenpark6d_lae", "shopint1_LAe" },
    { 5461, "glenpark6d_lae", "shopint2_LAe" },
    { 5461, "glenpark6d_lae", "shutter01LA" },
    { 5461, "glenpark6d_lae", "tiledwall01_LA" },
    { 5462, "glenpark6_lae", "dirty256" },
    { 5462, "glenpark6_lae", "girder_red_64HV" },
    { 5462, "glenpark6_lae", "hillshop2_LA" },
    { 5462, "glenpark6_lae", "hillshop4_LA" },
    { 5462, "glenpark6_lae", "hwtopwin01b_law" },
    { 5462, "glenpark6_lae", "hwtopwin01_law" },
    { 5462, "glenpark6_lae", "scaffolding_vc" },
    { 5462, "glenpark6_lae", "wareh3_LAe" },
    { 5390, "glenpark7_lae", "bboardblank_law" },
    { 5390, "glenpark7_lae", "compfence5_LAe" },
    { 5390, "glenpark7_lae", "ganggraf01_LA" },
    { 2976, "gloopx", "alien_cont2" },
    { 2976, "gloopx", "alien_glass" },
    { 2976, "gloopx", "alien_liquid" },
    { 8409, "gnhotel1", "ap_tarmac" },
    { 8409, "gnhotel1", "carpark1_64" },
    { 8409, "gnhotel1", "glass_64" },
    { 8409, "gnhotel1", "gnhoteldoor01_128" },
    { 8409, "gnhotel1", "gnhoteldoor03_128" },
    { 8409, "gnhotel1", "gnhoteldoor04_128" },
    { 8409, "gnhotel1", "gnhoteldoor05_128" },
    { 8409, "gnhotel1", "gnhotelpanel01_64" },
    { 8409, "gnhotel1", "gnhotelpanel02_64" },
    { 8409, "gnhotel1", "gnhotelpillar01_128" },
    { 8409, "gnhotel1", "gnhotelstairs01_128" },
    { 8409, "gnhotel1", "gnhotelwall03_128" },
    { 8409, "gnhotel1", "gnhotelwall06_128" },
    { 8409, "gnhotel1", "gnhotelwall07_128" },
    { 8409, "gnhotel1", "gnhotelwindow01_128" },
    { 8409, "gnhotel1", "old_corugwal_256" },
    { 8409, "gnhotel1", "Plaindoorblue_128" },
    { 8409, "gnhotel1", "redstuff" },
    { 8409, "gnhotel1", "step_64HV" },
    { 2993, "goflagx", "GOflag" },
    { 3070, "gogsx", "nightvision" },
    { 9683, "goldengate_sfw", "bridge_egg_sfw" },
    { 9683, "goldengate_sfw", "ws_goldengate1" },
    { 9683, "goldengate_sfw", "ws_goldengate4" },
    { 1974, "golfball", "kb_golf" },
    { 10403, "golf_sfs", "golf_fairway1" },
    { 10403, "golf_sfs", "golf_fairway2" },
    { 10403, "golf_sfs", "golf_grassrock" },
    { 10403, "golf_sfs", "golf_gravelpath" },
    { 10403, "golf_sfs", "golf_greengrass" },
    { 10403, "golf_sfs", "rock_country128blnd" },
    { 4227, "graffiti_lan01", "cleargraf01_LA" },
    { 3261, "grasshouse", "hoophouse" },
    { 3261, "grasshouse", "veg_bmarijuana" },
    { 3261, "grasshouse", "veg_marijuana" },
    { 13725, "gravblok01_lahills", "dirtybeach01_law" },
    { 13725, "gravblok01_lahills", "hosp03_law" },
    { 10442, "graveyard_sfs", "ws_graveydfence" },
    { 10442, "graveyard_sfs", "ws_grvl_desgrassblend" },
    { 10442, "graveyard_sfs", "ws_memorial" },
    { 4810, "griffobs_las", "cornice01_la" },
    { 4810, "griffobs_las", "Gen_Log" },
    { 4810, "griffobs_las", "Gen_Log_End" },
    { 4810, "griffobs_las", "grifnewtex1b" },
    { 4810, "griffobs_las", "hllblf2_LAE" },
    { 4810, "griffobs_las", "lasjmslumruf" },
    { 4810, "griffobs_las", "sm_pinetreebit" },
    { 4810, "griffobs_las", "wilsd_06_la" },
    { 4810, "griffobs_las", "wilsd_08_la" },
    { 4810, "griffobs_las", "ws_neatwoodfence" },
    { 9919, "grnwht_sfe", "sfe_redwht1" },
    { 9919, "grnwht_sfe", "sfe_redwht1b" },
    { 9919, "grnwht_sfe", "sfe_redwht2" },
    { 9919, "grnwht_sfe", "sfe_redwht3" },
    { 9919, "grnwht_sfe", "sfe_redwht4" },
    { 9919, "grnwht_sfe", "sfe_wall_1" },
    { 9919, "grnwht_sfe", "sf_hospitaldr1" },
    { 9919, "grnwht_sfe", "sf_hospitaldr2" },
    { 9919, "grnwht_sfe", "sl_dtdoor1" },
    { 9919, "grnwht_sfe", "vic01_LA" },
    { 9919, "grnwht_sfe", "victim_sfe" },
    { 9919, "grnwht_sfe", "whitgrn_sfe1" },
    { 9919, "grnwht_sfe", "whitgrn_sfe2" },
    { 9919, "grnwht_sfe", "whitgrn_sfe3" },
    { 9919, "grnwht_sfe", "whitgrn_sfe4" },
    { 9919, "grnwht_sfe", "whitgrn_sfe5" },
    { 9919, "grnwht_sfe", "whitgrn_sfe6" },
    { 5111, "ground2_las2", "Grass_dirt_64HV" },
    { 5111, "ground2_las2", "sanpedcorn1" },
    { 5111, "ground2_las2", "sanpedpawn1a" },
    { 5111, "ground2_las2", "sjmlawarhustrim" },
    { 4849, "ground3_las", "backalley1_LAe" },
    { 4849, "ground3_las", "floorboard256128" },
    { 4849, "ground3_las", "hollysign05_LAw" },
    { 4849, "ground3_las", "lasnude1" },
    { 4849, "ground3_las", "lasnude2" },
    { 4849, "ground3_las", "lasnude7" },
    { 4849, "ground3_las", "lasnude9" },
    { 4849, "ground3_las", "lasnude9a" },
    { 4849, "ground3_las", "lasnude9h" },
    { 4849, "ground3_las", "newcut4_LAS" },
    { 4849, "ground3_las", "rubbish" },
    { 4849, "ground3_las", "sanpedowd5" },
    { 5122, "ground3_las2", "fossiloil_128" },
    { 5122, "ground3_las2", "Was_alt" },
    { 5122, "ground3_las2", "Was_crush" },
    { 5122, "ground3_las2", "Was_dier" },
    { 5122, "ground3_las2", "Was_engblox" },
    { 5122, "ground3_las2", "Was_scrpyd_tires_pile" },
    { 5122, "ground3_las2", "Was__mdedge" },
    { 4820, "ground4_las", "adet" },
    { 4820, "ground4_las", "ahoodnewwi2" },
    { 4820, "ground4_las", "compfence6_LAe" },
    { 4820, "ground4_las", "driveway2_128" },
    { 4820, "ground4_las", "driveway_128" },
    { 4820, "ground4_las", "hedge" },
    { 4820, "ground4_las", "lasjmscruffwall5" },
    { 4820, "ground4_las", "sanpednhus2" },
    { 4820, "ground4_las", "sanpedwall4" },
    { 4820, "ground4_las", "sjmlahus232" },
    { 4806, "ground5_las", "combrd1" },
    { 4806, "ground5_las", "labreplace" },
    { 4806, "ground5_las", "newcut2_LAS" },
    { 4806, "ground5_las", "newcut3_LAS" },
    { 4806, "ground5_las", "roof11L256" },
    { 10356, "groundbit_sfs", "ws_hextile" },
    { 10851, "groundbit_sfse", "ws_altz_wall6big" },
    { 5135, "groundb_las2", "cmpwarhus2" },
    { 5135, "groundb_las2", "sanpedock95" },
    { 5135, "groundb_las2", "sanpedock97" },
    { 5135, "groundb_las2", "snpedwar1" },
    { 5135, "groundb_las2", "snpedwar2" },
    { 5138, "ground_las2", "sanpedock3" },
    { 14406, "gs_mansion_lights", "mp_CJ_Light" },
    { 14406, "gs_mansion_lights", "mp_CJ_LIGHT_FITTING" },
    { 726, "gtatreesh", "oakbark64" },
    { 726, "gtatreesh", "oakleaf1" },
    { 726, "gtatreesh", "oakleaf2" },
    { 726, "gtatreesh", "pinebranch2" },
    { 726, "gtatreesh", "pinewood" },
    { 727, "gtatreesh04", "spruce1" },
    { 727, "gtatreesh04", "sprucebark" },
    { 728, "gtatreeshi", "berrybush1" },
    { 729, "gtatreeshi7", "cedar1" },
    { 731, "gtatreeshi9", "bchamae" },
    { 731, "gtatreeshi9", "cypress1" },
    { 731, "gtatreeshi9", "cypress2" },
    { 730, "gtatreeshifir", "bthuja1" },
    { 730, "gtatreeshifir", "cedar2" },
    { 650, "gta_cactus", "sjm cactus" },
    { 674, "gta_deserttrees", "sm_cactus_leaf" },
    { 674, "gta_deserttrees", "sm_josh_bark" },
    { 674, "gta_deserttrees", "sm_josh_leaf" },
    { 630, "gta_potplants", "greekurn" },
    { 630, "gta_potplants", "kb_teracota_pot64" },
    { 630, "gta_potplants", "yuka256" },
    { 858, "gta_procdesert", "sm_des_bush2" },
    { 858, "gta_procdesert", "sm_des_bush3" },
    { 817, "gta_procflowers", "gras07Si" },
    { 825, "gta_proc_bigbush", "veg_bush1" },
    { 825, "gta_proc_bigbush", "veg_bush4" },
    { 802, "gta_proc_bushland", "veg_bush3" },
    { 802, "gta_proc_bushland", "veg_bush3red" },
    { 801, "gta_proc_ferns", "veg_bush2" },
    { 801, "gta_proc_ferns", "veg_bushgrn" },
    { 801, "gta_proc_ferns", "veg_bushred" },
    { 812, "gta_proc_grassland", "oak2b" },
    { 804, "gta_proc_grasslanda", "veg_leaf" },
    { 804, "gta_proc_grasslanda", "veg_leafred" },
    { 806, "gta_proc_rushes", "gras03Si" },
    { 806, "gta_proc_rushes", "gras04Si" },
    { 716, "gta_tree_bevhills", "treegridtop_law" },
    { 716, "gta_tree_bevhills", "trunk3" },
    { 716, "gta_tree_bevhills", "trunk5" },
    { 716, "gta_tree_bevhills", "vegaspalm01_128" },
    { 615, "gta_tree_boak", "bark04S64" },
    { 615, "gta_tree_boak", "sm_redwood_bark" },
    { 654, "gta_tree_oldpine", "pinelo128" },
    { 654, "gta_tree_oldpine", "tree19Mi" },
    { 670, "gta_tree_pine", "sm_redwood_branch" },
    { 17540, "gymblok2_lae2", "gangshop1_LAe" },
    { 17540, "gymblok2_lae2", "roadsignbackground128" },
    { 2913, "gym_weights", "cheerybox01" },
    { 10355, "haight1_sfs", "beigeledge" },
    { 10355, "haight1_sfs", "drivetile_02" },
    { 10355, "haight1_sfs", "sl_vic_cornice1" },
    { 10355, "haight1_sfs", "ws_apartmentmanky1" },
    { 10355, "haight1_sfs", "ws_apartmentmanky2" },
    { 10355, "haight1_sfs", "ws_apartmentmankyb1" },
    { 10355, "haight1_sfs", "ws_apartmentmankyb2" },
    { 10355, "haight1_sfs", "ws_apartmentmankyblue1" },
    { 10355, "haight1_sfs", "ws_apartmentmankygreen1" },
    { 10355, "haight1_sfs", "ws_apartmentmankywhite1" },
    { 10355, "haight1_sfs", "ws_apartmentpink1" },
    { 10355, "haight1_sfs", "ws_apartmentpink2" },
    { 10355, "haight1_sfs", "ws_apartmentred1" },
    { 10355, "haight1_sfs", "ws_apartmentred2" },
    { 10355, "haight1_sfs", "ws_apartmentwhite1" },
    { 10355, "haight1_sfs", "ws_apartmentwhite2" },
    { 10355, "haight1_sfs", "ws_apartmentwhite3" },
    { 10355, "haight1_sfs", "ws_dom's" },
    { 10355, "haight1_sfs", "ws_ed_shop10" },
    { 10355, "haight1_sfs", "ws_ed_shop12" },
    { 10355, "haight1_sfs", "ws_ed_shop2" },
    { 10355, "haight1_sfs", "ws_ed_shop3" },
    { 10355, "haight1_sfs", "ws_ed_shop4" },
    { 10355, "haight1_sfs", "ws_hashbanner" },
    { 10355, "haight1_sfs", "ws_japwin" },
    { 10428, "hashblock1b_sfs", "gz_vic3a" },
    { 10428, "hashblock1b_sfs", "ws_haight2btom" },
    { 10428, "hashblock1b_sfs", "ws_haight2top5" },
    { 10430, "hashblock1z_sfs", "ws_apartmentblue1" },
    { 10430, "hashblock1z_sfs", "ws_apartmentmankyc1" },
    { 10430, "hashblock1z_sfs", "ws_ed_shop13" },
    { 10430, "hashblock1z_sfs", "ws_ed_shop13_door" },
    { 10430, "hashblock1z_sfs", "ws_haight2top4" },
    { 10430, "hashblock1z_sfs", "ws_haightfrontage2" },
    { 10429, "hashblock1_sfs", "Bow_Concrete_drip" },
    { 10429, "hashblock1_sfs", "ws_apartmentblue2" },
    { 10429, "hashblock1_sfs", "ws_haight2top6" },
    { 10429, "hashblock1_sfs", "ws_haight3btm" },
    { 10429, "hashblock1_sfs", "ws_haight4" },
    { 10429, "hashblock1_sfs", "ws_haighttattoo" },
    { 10429, "hashblock1_sfs", "ws_hippy2" },
    { 10429, "hashblock1_sfs", "ws_spliff" },
    { 10429, "hashblock1_sfs", "ws_streak_billbd" },
    { 10429, "hashblock1_sfs", "ws_suburbansign" },
    { 10434, "hashblock2b_sfs", "ws_apartmentgrn1" },
    { 10434, "hashblock2b_sfs", "ws_apartmentgrn2" },
    { 10434, "hashblock2b_sfs", "ws_emg_awning" },
    { 10434, "hashblock2b_sfs", "ws_haight2top" },
    { 10434, "hashblock2b_sfs", "ws_haightshop1alt" },
    { 10434, "hashblock2b_sfs", "ws_haightshop1altdoor" },
    { 10434, "hashblock2b_sfs", "ws_mural2" },
    { 10431, "hashblock2_sfs", "ws_w's_shopfront" },
    { 10431, "hashblock2_sfs", "ws_w's_shopfront_top" },
    { 10439, "hashblock3_sfs", "dt_road_to_alley" },
    { 10439, "hashblock3_sfs", "ws_hs_awning" },
    { 10439, "hashblock3_sfs", "ws_mural1" },
    { 10435, "hashblock4_sfs", "redshade2_64" },
    { 10435, "hashblock4_sfs", "ws_apartmentmint1" },
    { 10435, "hashblock4_sfs", "ws_apartmentmint2" },
    { 10435, "hashblock4_sfs", "ws_apartmentmint3" },
    { 10427, "hashhouses1_sfs", "ws_haight2top1" },
    { 10427, "hashhouses1_sfs", "ws_haight2top3" },
    { 10433, "hashmarket1_sfs", "woodboards2" },
    { 3860, "hashmarket_sfsx", "ws_tarp1" },
    { 3860, "hashmarket_sfsx", "ws_tarp2" },
    { 3860, "hashmarket_sfsx", "ws_tarp3" },
    { 3860, "hashmarket_sfsx", "ws_tarp4" },
    { 10447, "hashupass_sfs", "Bow_sub_wallGrime" },
    { 3878, "headstones_sfsx", "ws_wargrave" },
    { 3878, "headstones_sfsx", "ws_wargrave2" },
    { 1301, "helimagnet", "Copperoxb64" },
    { 981, "helixbarrier", "bridgehzrd_kb_128" },
    { 981, "helixbarrier", "colourboxes" },
    { 981, "helixbarrier", "curb_64H" },
    { 14514, "hexi_lite", "ab_hexi_Lite" },
    { 13734, "hillcliff_lahills", "cobbles_kb_256" },
    { 3619, "hillhouse14_la", "anwfrntbev4" },
    { 3619, "hillhouse14_la", "aposhus1" },
    { 3619, "hillhouse14_la", "aposhus2" },
    { 3619, "hillhouse14_la", "aposhus3" },
    { 3619, "hillhouse14_la", "aposhus4" },
    { 3600, "hillhousex13_6", "courthsewin_128" },
    { 3600, "hillhousex13_6", "roof01L256" },
    { 3608, "hillhousex2_us", "mulhuose01_law" },
    { 3601, "hillhousex4_5", "bevgate02_law" },
    { 3601, "hillhousex4_5", "inwindow1" },
    { 3612, "hillhousex_la10_12", "downtwin20" },
    { 3598, "hillhousex_la1_2", "bevdoor04_law" },
    { 3598, "hillhousex_la1_2", "plasterLAh" },
    { 3598, "hillhousex_la1_2", "shinglesLAh" },
    { 3598, "hillhousex_la1_2", "sunsetwin01_LA" },
    { 3598, "hillhousex_la1_2", "sunsetwin02_LA" },
    { 1851, "hi_cutdice", "dice3" },
    { 5718, "hobos_lawn", "carney01_LAwN" },
    { 5718, "hobos_lawn", "carney02_LAwN" },
    { 5718, "hobos_lawn", "carney03_LAwN" },
    { 5718, "hobos_lawn", "carney04_LAwN" },
    { 5718, "hobos_lawn", "Smear_CemLAwN" },
    { 9593, "hosbibalsfw", "2hospital1sfw" },
    { 9593, "hosbibalsfw", "2hospital2sfw" },
    { 9593, "hosbibalsfw", "2hospital3sfw" },
    { 9593, "hosbibalsfw", "2hospital4sfw" },
    { 9593, "hosbibalsfw", "2hospital5sfw" },
    { 9593, "hosbibalsfw", "2hospital6sfw" },
    { 9593, "hosbibalsfw", "2hospital7sfw" },
    { 9593, "hosbibalsfw", "hospital6_sfw" },
    { 9593, "hosbibalsfw", "hospital7_sfw" },
    { 9593, "hosbibalsfw", "hospital8t_sfw" },
    { 9593, "hosbibalsfw", "paveslab1" },
    { 2558, "hospital", "CJ_H_CURTAIN1" },
    { 3899, "hospital2", "airportdoor1" },
    { 3899, "hospital2", "AmbulanceParking_64" },
    { 3899, "hospital2", "black" },
    { 3899, "hospital2", "burnt_faggots64" },
    { 3899, "hospital2", "concretenew256" },
    { 3899, "hospital2", "cutscenebank128" },
    { 3899, "hospital2", "dustyconcrete128" },
    { 3899, "hospital2", "fire_exit128" },
    { 3899, "hospital2", "hospitalboard_128a" },
    { 3899, "hospital2", "HospitalCarPark_64" },
    { 3899, "hospital2", "ind_hospital1_128" },
    { 3899, "hospital2", "ind_hospital2_128" },
    { 3899, "hospital2", "newall15128" },
    { 3899, "hospital2", "notice01_128" },
    { 3899, "hospital2", "plainwoodoor2" },
    { 3899, "hospital2", "runwaylight_64" },
    { 3899, "hospital2", "sky33_64hv" },
    { 5402, "hospital_lae", "hospwin1_LAe" },
    { 5402, "hospital_lae", "hospwin2_LAe" },
    { 5402, "hospital_lae", "hospwin3_LAe" },
    { 5708, "hospital_lawn", "allsaints2_law copy" },
    { 5708, "hospital_lawn", "allsaints_law" },
    { 5708, "hospital_lawn", "hosp01_law" },
    { 5708, "hospital_lawn", "hosp03b_law" },
    { 5708, "hospital_lawn", "rock1b_128" },
    { 10412, "hotel1", "carpet_red_256" },
    { 10412, "hotel1", "gold128" },
    { 10412, "hotel1", "grasslawnfade_256" },
    { 10412, "hotel1", "ws_awning" },
    { 10412, "hotel1", "ws_hotel1" },
    { 10412, "hotel1", "ws_hotel2" },
    { 10412, "hotel1", "ws_hotel5" },
    { 10412, "hotel1", "ws_hotel6" },
    { 10412, "hotel1", "ws_hotelrail" },
    { 10412, "hotel1", "ws_vankhoffsign" },
    { 10425, "hotel2_sfs", "ws_hoteldoor1" },
    { 10444, "hotelbackpool_sfs", "ws_hotel7" },
    { 10444, "hotelbackpool_sfs", "ws_hotel7b" },
    { 10615, "hotelback_sfs", "ws_desgreengrass_pave" },
    { 3432, "hotelcanopy", "gnhotelcanopy01_64" },
    { 3432, "hotelcanopy", "gnhotelcanopy03_64" },
    { 9229, "hrbr_sfn", "alleydoor7" },
    { 9229, "hrbr_sfn", "dt_bridge_rail_texture" },
    { 11389, "hubint1_sfse", "ws_altz_wall5_BIG" },
    { 11389, "hubint1_sfse", "ws_altz_wall7_BIG" },
    { 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG" },
    { 11389, "hubint1_sfse", "ws_STDcalendar" },
    { 11390, "hubint2", "ws_greymetal_small" },
    { 11390, "hubint2", "ws_lightswitchgrubby" },
    { 11391, "hubprops2_sfse", "blackbag" },
    { 11391, "hubprops2_sfse", "CJ_fire" },
    { 17518, "hub_alpha", "clothline1_LAe" },
    { 17518, "hub_alpha", "macbrij1_LAe" },
    { 1246, "icons", "pill_32" },
    { 1246, "icons", "skull" },
    { 1274, "icons2", "yellowhi132" },
    { 1273, "icons3", "greengrad32" },
    { 1272, "icons4", "diskmetal32" },
    { 1272, "icons4", "heart" },
    { 1272, "icons4", "salogo64" },
    { 1239, "icons6", "lyellow32" },
    { 1242, "icons7", "cj_para" },
    { 1247, "icons9", "bribe16" },
    { 5418, "idlewood3_lae", "lasjmrail1" },
    { 5418, "idlewood3_lae", "sanpedmot1" },
    { 5418, "idlewood3_lae", "sanpedmot3" },
    { 5418, "idlewood3_lae", "sanpedmot4" },
    { 5418, "idlewood3_lae", "sanpedmotWIN" },
    { 5418, "idlewood3_lae", "sanpedton1" },
    { 5418, "idlewood3_lae", "sanpedton5" },
    { 5474, "idlewood46_lae", "downtwin29" },
    { 5474, "idlewood46_lae", "redresdoor" },
    { 5474, "idlewood46_lae", "vengardoor01_law" },
    { 5411, "idlewood6_detail", "eastwin02_LAe2" },
    { 5411, "idlewood6_detail", "holwall" },
    { 5411, "idlewood6_detail", "ladocksig1" },
    { 5411, "idlewood6_detail", "snpedwar4b" },
    { 5422, "idlewood6_lae", "barberpole1" },
    { 5422, "idlewood6_lae", "barbershop1" },
    { 5422, "idlewood6_lae", "concretebigc256128" },
    { 5422, "idlewood6_lae", "gangshop9_LAe" },
    { 5422, "idlewood6_lae", "las69str2" },
    { 5422, "idlewood6_lae", "lastat4" },
    { 5422, "idlewood6_lae", "liqdel1" },
    { 5422, "idlewood6_lae", "reeces_LAe" },
    { 5422, "idlewood6_lae", "sanpshop4" },
    { 5422, "idlewood6_lae", "sjmhicut1las" },
    { 5417, "idlewood6_tr", "ladocksig2" },
    { 5417, "idlewood6_tr", "ladocksig3" },
    { 14502, "immy_furn", "ab_pipe" },
    { 14502, "immy_furn", "mp_motel_bed" },
    { 14502, "immy_furn", "mp_motel_bed1" },
    { 14502, "immy_furn", "mp_motel_bed2" },
    { 14498, "imm_rooms", "venetian_blind" },
    { 14500, "imm_roomss", "ab_tilehex2" },
    { 14500, "imm_roomss", "Bow_bar_top" },
    { 14500, "imm_roomss", "motel_wall2" },
    { 14500, "imm_roomss", "mp_motel_bluew" },
    { 14500, "imm_roomss", "mp_motel_bluewALT" },
    { 14500, "imm_roomss", "mp_motel_carpet" },
    { 14500, "imm_roomss", "mp_motel_wallpaper" },
    { 14500, "imm_roomss", "mp_motel_wallpaper1" },
    { 2986, "imm_roomx", "kb_imvent" },
    { 5126, "imrancomp_las2", "sanpdconv" },
    { 5126, "imrancomp_las2", "sanpedock94" },
    { 5132, "imstuff_las2", "cardbrdirty128" },
    { 5132, "imstuff_las2", "sjmlawarplt2" },
    { 5132, "imstuff_las2", "sjmlawarshcrategen" },
    { 14506, "imy_motel", "ab_tile1" },
    { 14506, "imy_motel", "Ah_exit" },
    { 14506, "imy_motel", "mp_motel_numbers" },
    { 14506, "imy_motel", "mp_motel_pinkw" },
    { 14506, "imy_motel", "mp_motel_pinkwALT" },
    { 14506, "imy_motel", "mp_motel_roof" },
    { 14506, "imy_motel", "mp_motel_rooms" },
    { 14506, "imy_motel", "mp_motel_whitewall" },
    { 14506, "imy_motel", "mp_motel_whitewallALT" },
    { 14525, "imy_motel2", "ah_skylight" },
    { 14525, "imy_motel2", "mp_motel_reception" },
    { 2989, "imy_skylx", "skylightkb" },
    { 3059, "imy_smsx", "niteclb1_LAe" },
    { 3059, "imy_smsx", "niteclb3_LAe" },
    { 3091, "imy_trx", "kb_trainbarrier" },
    { 14515, "im_motelxtras", "wallsocketkb" },
    { 14516, "im_xtra", "CJ_PAINTING13" },
    { 3895, "inditaly", "Plaindoor_64V" },
    { 3895, "inditaly", "stepflat_64HV" },
    { 3895, "inditaly", "tenwhite128" },
    { 3895, "inditaly", "tenwhitebrick64" },
    { 3896, "indust1", "block_maindraga" },
    { 3896, "indust1", "concretenewb32" },
    { 3896, "indust1", "firewall" },
    { 3896, "indust1", "Grass_32" },
    { 3896, "indust1", "indsmallwall64" },
    { 3896, "indust1", "ind_tendragblka" },
    { 3896, "indust1", "ind_tendragblkb" },
    { 3896, "indust1", "LO1road_128" },
    { 3896, "indust1", "sandytar_64HV" },
    { 3896, "indust1", "tarmac_64HV" },
    { 3901, "indust2", "railplat01" },
    { 3901, "indust2", "rustybolts64" },
    { 3901, "indust2", "rustybolts_drk32" },
    { 3722, "indust2_lax", "Was_grfiti" },
    { 3722, "indust2_lax", "Was_sd" },
    { 914, "industrialext", "CJ_PANEL" },
    { 914, "industrialext", "CJ_Panel2" },
    { 914, "industrialext", "CJ_SPEC" },
    { 914, "industrialext", "CJ_VENT1" },
    { 914, "industrialext", "cj_yellowgenerator" },
    { 914, "industrialext", "lecybox" },
    { 5140, "industry3_las2", "lasclean2" },
    { 5140, "industry3_las2", "santall2" },
    { 5140, "industry3_las2", "santall5" },
    { 5140, "industry3_las2", "santall7" },
    { 5140, "industry3_las2", "santall8" },
    { 5140, "industry3_las2", "santall8s" },
    { 5140, "industry3_las2", "sjmhicut4las" },
    { 5140, "industry3_las2", "sjmlashopsig1" },
    { 5140, "industry3_las2", "sjmlashopsig2" },
    { 5140, "industry3_las2", "snpedshptst3" },
    { 3636, "indust_lax", "lasjmpow4" },
    { 3636, "indust_lax", "lasjmpow91" },
    { 3636, "indust_lax", "lasjmpow93" },
    { 3636, "indust_lax", "lasjmpow94" },
    { 3636, "indust_lax", "lasjmpow95" },
    { 13627, "inneroval", "loadbay64" },
    { 13627, "inneroval", "newgrnd1brntrk_128" },
    { 13624, "innertrak", "AH_dirt64b2" },
    { 13624, "innertrak", "AH_dirtmix_128" },
    { 13624, "innertrak", "dirtgrass" },
    { 18008, "intclothesa", "chromeffect" },
    { 18008, "intclothesa", "CJ_VICT_DOOR2" },
    { 18008, "intclothesa", "CJ_VIC_1" },
    { 18008, "intclothesa", "CJ_VIC_2" },
    { 18008, "intclothesa", "mp_cloth_vicfloor" },
    { 18008, "intclothesa", "mp_cloth_vicgird" },
    { 18008, "intclothesa", "mp_lightfitting" },
    { 18008, "intclothesa", "shop_rail" },
    { 18008, "intclothesa", "shop_rail2" },
    { 18008, "intclothesa", "shop_shelf11" },
    { 18008, "intclothesa", "shop_wall3" },
    { 18008, "intclothesa", "stair_treads" },
    { 18094, "intclothesa2", "denims" },
    { 18024, "intclotheshiphop", "CJ_SUBURB_WIN" },
    { 18024, "intclotheshiphop", "concreteCJ256" },
    { 18024, "intclotheshiphop", "mp_cloth_sub" },
    { 18024, "intclotheshiphop", "mp_cop_light" },
    { 18067, "intclothes_acc", "CJ_VIC_3" },
    { 18067, "intclothes_acc", "CJ_VIC_4" },
    { 18067, "intclothes_acc", "mp_cloth_vic" },
    { 18067, "intclothes_acc", "mp_cloth_vicrug" },
    { 14783, "intgarage2aint3", "canvas22" },
    { 14783, "intgarage2aint3", "garagewall1" },
    { 14783, "intgarage2aint3", "gragedoorkb2" },
    { 14783, "intgarage2aint3", "hotknifebody2kb" },
    { 14783, "intgarage2aint3", "hotknifebody3kb" },
    { 14660, "inttattoobits", "tatoo_chair1" },
    { 14660, "inttattoobits", "tatoo_chair3" },
    { 14660, "inttattoobits", "tat_roll1" },
    { 14660, "inttattoobits", "tat_spray1" },
    { 14660, "inttattoobits", "tat_tissue3" },
    { 14660, "inttattoobits", "tissues2" },
    { 14660, "inttattoobits", "tissues4" },
    { 14771, "int_brothelint3", "Bow_bar_cooler_lwr" },
    { 14771, "int_brothelint3", "Bow_bar_cooler_upr" },
    { 14771, "int_brothelint3", "Bow_bar_panelfront" },
    { 14771, "int_brothelint3", "carpbroth1" },
    { 14771, "int_brothelint3", "GB_midbar06" },
    { 14771, "int_brothelint3", "GB_midbar09" },
    { 14771, "int_brothelint3", "GB_midbar10" },
    { 14771, "int_brothelint3", "GB_midbar15" },
    { 14771, "int_brothelint3", "GB_nastybar12" },
    { 14771, "int_brothelint3", "sw_backdoor01" },
    { 14771, "int_brothelint3", "wallpbroth1" },
    { 14777, "int_casinoint3", "GB_midbar05" },
    { 14777, "int_casinoint3", "GB_midbar08" },
    { 14777, "int_casinoint3", "GB_midbar11" },
    { 14777, "int_casinoint3", "GB_midbar16" },
    { 18007, "int_cutbar3", "barbers_wall2" },
    { 18007, "int_cutbar3", "barbers_wall3" },
    { 1491, "int_doors", "CJ_WOODDOOR1" },
    { 1491, "int_doors", "CJ_WOODDOOR2" },
    { 1491, "int_doors", "CJ_WOODDOOR3" },
    { 1499, "int_doors(cj)", "CJ_DOORSURROUND" },
    { 14798, "int_kbsgarage3", "ab_wall_flake" },
    { 14661, "int_tatoo", "counter1" },
    { 14661, "int_tatoo", "mp_tat_power" },
    { 14661, "int_tatoo", "mp_tat_tats1" },
    { 14661, "int_tatoo", "mp_tat_tats2" },
    { 14661, "int_tatoo", "tattoo_frm1" },
    { 14661, "int_tatoo", "tattoo_wall1" },
    { 14661, "int_tatoo", "tat_shadoa" },
    { 14531, "int_zerosrca", "CJ_RC_WIN" },
    { 14531, "int_zerosrca", "donut_ceil" },
    { 14531, "int_zerosrca", "stadium_ground2" },
    { 14531, "int_zerosrca", "ws_ed_zeroshop" },
    { 5401, "jeffers4_lae", "flooringwd01_int" },
    { 5401, "jeffers4_lae", "newall9b_16c128" },
    { 5401, "jeffers4_lae", "sidewgrass1" },
    { 5401, "jeffers4_lae", "stainwinLAe" },
    { 5406, "jeffers5a_lae", "CJ_SUBURBlw_WIN" },
    { 5406, "jeffers5a_lae", "discwa1_LAe2" },
    { 5406, "jeffers5a_lae", "gangshop13_LAe" },
    { 5406, "jeffers5a_lae", "heat_01" },
    { 5406, "jeffers5a_lae", "lasuburbansgn1" },
    { 5406, "jeffers5a_lae", "poshentrance1_256" },
    { 5406, "jeffers5a_lae", "stonemall2_law" },
    { 5406, "jeffers5a_lae", "vgnshopwal1_256" },
    { 5406, "jeffers5a_lae", "vgshopwall05_64" },
    { 1602, "jellyfish1", "jellyfishc" },
    { 1603, "jellyfish2", "jellyb2" },
    { 3047, "jetdx", "mp_jet_roof" },
    { 14404, "jet_interior", "LD_747_cockpitdoor" },
    { 14404, "jet_interior", "LD_747_door" },
    { 14404, "jet_interior", "LD_747_floor" },
    { 14404, "jet_interior", "LD_747_skin" },
    { 14404, "jet_interior", "LD_747_toiletdoor" },
    { 14404, "jet_interior", "mp_jet_cockpit" },
    { 14404, "jet_interior", "mp_jet_wall" },
    { 3129, "jt_doorbx", "pldoor_envmap" },
    { 3129, "jt_doorbx", "pldoor_gen" },
    { 3132, "jt_doorx", "Shamalbody256" },
    { 3132, "jt_doorx", "trolley02" },
    { 2601, "juice", "sprunk2dirty2" },
    { 3852, "jump_sfxref", "rooftop_pipes" },
    { 3852, "jump_sfxref", "sfgas1" },
    { 849, "junkpiles", "CJgrass" },
    { 849, "junkpiles", "ws_oldredbrick" },
    { 2188, "kbblackjack", "balckjack_txt2a" },
    { 2188, "kbblackjack", "bj_squrea" },
    { 2188, "kbblackjack", "chip_tray_1" },
    { 2188, "kbblackjack", "chip_tray_gry" },
    { 2188, "kbblackjack", "deck_cards" },
    { 2188, "kbblackjack", "roulette_4_256" },
    { 2188, "kbblackjack", "roulette_6_256" },
    { 2188, "kbblackjack", "roulette_wood" },
    { 2188, "kbblackjack", "wheel_o_2b" },
    { 1853, "kbchips1", "indx_chip1" },
    { 1853, "kbchips1", "indx_chip2" },
    { 1853, "kbchips1", "indx_chip3" },
    { 1853, "kbchips1", "indx_chip4" },
    { 1853, "kbchips1", "indx_chip5" },
    { 1853, "kbchips1", "indx_chip6" },
    { 1706, "kbcouch1", "kbcornice_2_128" },
    { 1706, "kbcouch1", "kbwood_panel4_128" },
    { 1706, "kbcouch1", "kb_sofa555c" },
    { 1706, "kbcouch1", "kb_sofa555d" },
    { 1706, "kbcouch1", "kb_sofaside2" },
    { 1706, "kbcouch1", "kb_sofa_256" },
    { 1950, "kbeer", "bottles_kb2" },
    { 4892, "kbgarage_las", "aanewwin" },
    { 4892, "kbgarage_las", "ahoodnewdr1" },
    { 4892, "kbgarage_las", "canvas22sjm" },
    { 5341, "kbgarage_las2", "sanpedwall2" },
    { 1826, "kbmiscfrn1", "bank_mny_LR" },
    { 1826, "kbmiscfrn1", "bank_safe_LR" },
    { 1826, "kbmiscfrn1", "bnk_dsk_2" },
    { 1826, "kbmiscfrn1", "man_mny2" },
    { 1826, "kbmiscfrn1", "wee_blak_32" },
    { 1825, "kbmiscfrn1cj", "htl_tbltop2" },
    { 1827, "kbmiscfrn2", "chrome_sheet" },
    { 1827, "kbmiscfrn2", "man_mny1" },
    { 1827, "kbmiscfrn2", "safridge_256" },
    { 627, "kbplantssmz", "plantc256" },
    { 1978, "kbroul1", "green_beize_128" },
    { 1978, "kbroul1", "roulette_surf1" },
    { 1978, "kbroul1", "roulette_surf2" },
    { 1978, "kbroul1", "roulette_wood3" },
    { 1929, "kbroul2", "oliveash_256" },
    { 1929, "kbroul2", "roulet_nosa" },
    { 1929, "kbroul2", "roul_slotbit2" },
    { 1929, "kbroul2", "roul_slotbit3" },
    { 1929, "kbroul2", "roul_slotbit4" },
    { 1929, "kbroul2", "roul_slotbit5" },
    { 1929, "kbroul2", "roul_slotbit6" },
    { 1830, "kbslotmchines", "slot2" },
    { 1830, "kbslotmchines", "slot3" },
    { 1830, "kbslotmchines", "slot4" },
    { 1830, "kbslotmchines", "slot5" },
    { 1830, "kbslotmchines", "slot7" },
    { 1830, "kbslotmchines", "slot_bit2" },
    { 1948, "kbslotnu", "larg_reel1" },
    { 1948, "kbslotnu", "slot_black" },
    { 1948, "kbslotnu", "slot_chrome1" },
    { 1948, "kbslotnu", "slot_steel" },
    { 1948, "kbslotnu", "wheel_o_tbl1a" },
    { 1828, "kbtgr_rug", "man_tigr_rug" },
    { 1707, "kb_carcouch", "kb_car_couch2" },
    { 2957, "kb_ctdoorx", "garage_docks" },
    { 1839, "kb_hifi", "blak_speaker" },
    { 1839, "kb_hifi", "hifi_1" },
    { 1839, "kb_hifi", "hifi_2" },
    { 1702, "kb_parker", "kbsofa333e" },
    { 1702, "kb_parker", "kb_sofaside1" },
    { 2890, "kb_skip_txd", "skipY" },
    { 2890, "kb_skip_txd", "skip_peeling1" },
    { 2890, "kb_skip_txd", "skip_rubble1" },
    { 1895, "kb_wheel1", "roulette_4drk" },
    { 1895, "kb_wheel1", "wheel_o_1" },
    { 1895, "kb_wheel1", "wheel_o_2" },
    { 1895, "kb_wheel1", "wheel_o_2c" },
    { 1895, "kb_wheel1", "wheel_o_2d" },
    { 1895, "kb_wheel1", "wheel_o_2e" },
    { 1895, "kb_wheel1", "wheel_o_2f" },
    { 1895, "kb_wheel1", "wheel_o_3" },
    { 1895, "kb_wheel1", "white256" },
    { 2988, "kcomp_gx", "kmwood_gate" },
    { 3116, "kei_wnchx", "trilby04" },
    { 2886, "keypad", "nt_phone3" },
    { 13634, "kickarse", "law_blue1" },
    { 13590, "kickstart", "AH_barpanelM" },
    { 13590, "kickstart", "ah_bluBADWL" },
    { 13590, "kickstart", "AH_fitlhskirting" },
    { 13590, "kickstart", "ah_logend" },
    { 13590, "kickstart", "carlites64a" },
    { 13590, "kickstart", "carundera64" },
    { 13590, "kickstart", "Grass-base-Right" },
    { 13590, "kickstart", "kickGrass" },
    { 13590, "kickstart", "midtrack" },
    { 13590, "kickstart", "rock01_law" },
    { 13590, "kickstart", "Rocky road" },
    { 13590, "kickstart", "Upt_Precinct_woodLedge" },
    { 13590, "kickstart", "yellowrust2_64" },
    { 14384, "kit3hghg", "AH_greencurtain" },
    { 2942, "kmb_atmx", "kmb_atm" },
    { 2942, "kmb_atmx", "kmb_atm_dam" },
    { 2942, "kmb_atmx", "kmb_atm_sign" },
    { 2942, "kmb_atmx", "kmb_chip1" },
    { 2942, "kmb_atmx", "kmb_chip2" },
    { 2942, "kmb_atmx", "kmb_wiresC" },
    { 2960, "kmb_beamx", "kmb_beam" },
    { 2903, "kmb_chute", "chute_coords" },
    { 2903, "kmb_chute", "kb_lug1" },
    { 2903, "kmb_chute", "parachute" },
    { 2922, "kmb_keypadx", "keypad2" },
    { 2922, "kmb_keypadx", "keypad_glass" },
    { 2922, "kmb_keypadx", "keypad_light" },
    { 2949, "kmb_lockdoortxd", "locked_door" },
    { 2901, "kmb_marijtxd", "kmb_marijuana" },
    { 2894, "kmb_notebook", "kmb_notebook" },
    { 2891, "kmb_packet", "kmb_packet" },
    { 2953, "kmb_paperx", "kmb_write_code" },
    { 2936, "kmb_rckx", "larock256" },
    { 3124, "ksnipx", "ak47_all" },
    { 2972, "k_cratesx", "747_crate" },
    { 2972, "k_cratesx", "cargo1_128" },
    { 2972, "k_cratesx", "cargo3_128" },
    { 2972, "k_cratesx", "tyrecover_256128" },
    { 2977, "k_militbx", "military_cratee" },
    { 2964, "k_pool", "blue_pool_table" },
    { 2964, "k_pool", "poolcue" },
    { 2964, "k_pool", "pool_table_cloth" },
    { 14708, "labig1int2", "ab_mottleGrey" },
    { 14708, "labig1int2", "doorframew" },
    { 14708, "labig1int2", "GB_restaursmll32" },
    { 14708, "labig1int2", "GB_restaursmll38" },
    { 14708, "labig1int2", "GB_restaursmll52" },
    { 14708, "labig1int2", "GB_restaursmll53" },
    { 14708, "labig1int2", "HS1_2Wall5" },
    { 14708, "labig1int2", "HS1_wall5" },
    { 14708, "labig1int2", "HS2_3Wall2" },
    { 14708, "labig1int2", "HS2_Artex5" },
    { 14708, "labig1int2", "HS2_floor2" },
    { 14708, "labig1int2", "HS2_floor3" },
    { 14708, "labig1int2", "HS2_floor4" },
    { 14708, "labig1int2", "HS3_wall9" },
    { 14708, "labig1int2", "HS_art" },
    { 14708, "labig1int2", "HS_vase" },
    { 14708, "labig1int2", "HS_wood1" },
    { 14708, "labig1int2", "mp_apt1_ceiling" },
    { 14708, "labig1int2", "skirtingw" },
    { 14708, "labig1int2", "StudioWall" },
    { 14708, "labig1int2", "vgsclubdoor01_128" },
    { 14708, "labig1int2", "WH_skirt" },
    { 14706, "labig2int2", "banniswd_int" },
    { 14706, "labig2int2", "carpet1aw" },
    { 14706, "labig2int2", "flooringwd02_int" },
    { 14706, "labig2int2", "frenchwind2_int" },
    { 14706, "labig2int2", "frenchwinds_int" },
    { 14706, "labig2int2", "HS1_Shade2" },
    { 14706, "labig2int2", "HS2_2Wall1" },
    { 14706, "labig2int2", "HS2_3Wall6" },
    { 14706, "labig2int2", "HS3_wall2" },
    { 14706, "labig2int2", "HS3_wall5" },
    { 14706, "labig2int2", "HS3_wall7" },
    { 14706, "labig2int2", "HS_art2" },
    { 14706, "labig2int2", "HS_art3" },
    { 14706, "labig2int2", "HS_art5" },
    { 14706, "labig2int2", "HS_art7" },
    { 14706, "labig2int2", "HS_art9" },
    { 14706, "labig2int2", "lightswitch01_int" },
    { 14706, "labig2int2", "mp_apt1_kitchwallpaper" },
    { 14706, "labig2int2", "skirtingb" },
    { 14706, "labig2int2", "vegdoor1_int" },
    { 14706, "labig2int2", "wallpnice12" },
    { 14706, "labig2int2", "whitecarpet01" },
    { 14706, "labig2int2", "wood14S" },
    { 14707, "labig3int2", "aptdoor01_int" },
    { 14707, "labig3int2", "bathtile02_int" },
    { 14707, "labig3int2", "burglry_wall6" },
    { 14707, "labig3int2", "cactusL" },
    { 14707, "labig3int2", "HS2_3Carpet1" },
    { 14707, "labig3int2", "HS2_3Wall10" },
    { 14707, "labig3int2", "HS2_3Wall5" },
    { 14707, "labig3int2", "HS2_3Wall7" },
    { 14707, "labig3int2", "HS2_3Wall9" },
    { 14707, "labig3int2", "HS_art4" },
    { 14707, "labig3int2", "HS_art6" },
    { 14707, "labig3int2", "HS_art8" },
    { 14707, "labig3int2", "planPot" },
    { 14707, "labig3int2", "Soil" },
    { 14707, "labig3int2", "WH_walls" },
    { 15048, "labigsave", "ah_carp1" },
    { 15048, "labigsave", "ah_carpet2kb" },
    { 15048, "labigsave", "AH_carpet4kb" },
    { 15048, "labigsave", "ah_curwall" },
    { 15048, "labigsave", "AH_fancyceil" },
    { 15048, "labigsave", "AH_flroortile1" },
    { 15048, "labigsave", "AH_flroortile2" },
    { 15048, "labigsave", "ah_GRYSKT" },
    { 15048, "labigsave", "ah_pineceiling" },
    { 15048, "labigsave", "ah_pluskirt" },
    { 15048, "labigsave", "ah_posmarskirt" },
    { 15048, "labigsave", "ah_wallstyle1" },
    { 15048, "labigsave", "AH_walltile1" },
    { 15048, "labigsave", "ah_wpaper8" },
    { 1328, "labins01_la", "bin1_LAe" },
    { 1328, "labins01_la", "bin2_LAe" },
    { 1328, "labins01_la", "bins10_LAe2" },
    { 1328, "labins01_la", "bins1_LAe2" },
    { 1328, "labins01_la", "bins2_LAe2" },
    { 1328, "labins01_la", "bins3_LAe2" },
    { 1328, "labins01_la", "bins4_LAe2" },
    { 1328, "labins01_la", "bins5_LAe2" },
    { 1328, "labins01_la", "bins6_LAe2" },
    { 1328, "labins01_la", "bins7_LAe2" },
    { 1328, "labins01_la", "bins8_LAe2" },
    { 1328, "labins01_la", "bins9_LAe2" },
    { 1328, "labins01_la", "cj_bin2" },
    { 1328, "labins01_la", "map64" },
    { 8550, "laconcha", "vegaspawnwall_128" },
    { 8550, "laconcha", "vgnfirestat2_64" },
    { 8551, "laconchasign", "laconca01_128" },
    { 8551, "laconchasign", "laconcasign02_64" },
    { 17524, "lae2bigblock", "gangsign2_LAe" },
    { 17524, "lae2bigblock", "hillshop1_LA" },
    { 17524, "lae2bigblock", "hillshop3_LA" },
    { 17524, "lae2bigblock", "hollywin03_LAw" },
    { 17524, "lae2bigblock", "ja_multisign_lae2" },
    { 17524, "lae2bigblock", "venfood01_law" },
    { 17524, "lae2bigblock", "wareh1_LAe" },
    { 17524, "lae2bigblock", "wareh2_LAe" },
    { 17524, "lae2bigblock", "waresigns1_LAe" },
    { 17535, "lae2billboards", "billbd1_LAe" },
    { 17535, "lae2billboards", "SunBillB03" },
    { 17678, "lae2bridge", "macbrij4_LAe" },
    { 17678, "lae2bridge", "Newpavement" },
    { 17588, "lae2coast_alpha", "compcourtrail1_m" },
    { 17588, "lae2coast_alpha", "east_pacific" },
    { 17588, "lae2coast_alpha", "golden_palms" },
    { 17588, "lae2coast_alpha", "LAShad1" },
    { 17588, "lae2coast_alpha", "plainglass" },
    { 17925, "lae2fake_int", "burglry_wall4" },
    { 17925, "lae2fake_int", "carpet1kb" },
    { 17532, "lae2grnd", "fencebroke256" },
    { 17532, "lae2grnd", "redcanopything" },
    { 17532, "lae2grnd", "sw_door14" },
    { 17519, "lae2newtempbx", "asanpdshpsh1" },
    { 17519, "lae2newtempbx", "asanpdshpsh1c" },
    { 17519, "lae2newtempbx", "carlot1" },
    { 17519, "lae2newtempbx", "lasclean4" },
    { 17519, "lae2newtempbx", "lasclean5" },
    { 17519, "lae2newtempbx", "lasclean6" },
    { 17519, "lae2newtempbx", "LAskyscraper5" },
    { 17519, "lae2newtempbx", "lastaco1" },
    { 17519, "lae2newtempbx", "lastripx2" },
    { 17519, "lae2newtempbx", "lastripx2a" },
    { 17519, "lae2newtempbx", "sanpedpawn1" },
    { 17519, "lae2newtempbx", "sanpedpawn1d" },
    { 17519, "lae2newtempbx", "sanpedpawn2" },
    { 17519, "lae2newtempbx", "sanpedpawn2c" },
    { 17519, "lae2newtempbx", "santaco6" },
    { 17519, "lae2newtempbx", "santaco6za" },
    { 17519, "lae2newtempbx", "siliconvalleywins4" },
    { 17519, "lae2newtempbx", "sjmlashop5" },
    { 17519, "lae2newtempbx", "snpedpost1" },
    { 17519, "lae2newtempbx", "snpedpost1a" },
    { 17519, "lae2newtempbx", "snpedpost1b" },
    { 17505, "lae2roads", "craproad2_LAe" },
    { 17505, "lae2roads", "craproad3_LAe" },
    { 17505, "lae2roads", "craproad7_LAe7" },
    { 17505, "lae2roads", "grassdry_path_128HV" },
    { 17505, "lae2roads", "macbrij2_LAe" },
    { 17606, "lae2roadscoast", "concretedust2_256128" },
    { 17606, "lae2roadscoast", "LAroad_centre1" },
    { 17606, "lae2roadscoast", "stonewalls1_LA" },
    { 17606, "lae2roadscoast", "Was_scrpyd_wall_in_hngr" },
    { 17595, "lae2roadshub", "Grass_concpath2" },
    { 17595, "lae2roadshub", "sidewgrass2" },
    { 17595, "lae2roadshub", "sidewgrass3" },
    { 17595, "lae2roadshub", "sidewgrass5" },
    { 17595, "lae2roadshub", "sidewgrass_fuked" },
    { 17595, "lae2roadshub", "trainground1" },
    { 17595, "lae2roadshub", "trainground3" },
    { 17563, "lae2tempshit", "wattsstax1_LAe" },
    { 17563, "lae2tempshit", "wattsstax2_LAe" },
    { 17563, "lae2tempshit", "wattsstax3_LAe" },
    { 17563, "lae2tempshit", "wattsstax4_LAe" },
    { 5395, "laeroads", "hiwaymidlle_256" },
    { 5395, "laeroads", "macbrij3_LAe" },
    { 5391, "laeroads2s", "sl_pavebutt2" },
    { 5391, "laeroads2s", "sl_roadbutt1" },
    { 5421, "laesmokecnthus", "bballbck_kb" },
    { 5421, "laesmokecnthus", "greenwall4" },
    { 5421, "laesmokecnthus", "sl_blustainplanks" },
    { 3593, "lafuckar", "car3_128" },
    { 13675, "lahillsgrounds", "bevpool" },
    { 13675, "lahillsgrounds", "bevr03b_law" },
    { 13701, "lahillshilhs1c", "ws_garagedoor3_blue" },
    { 13681, "lahillshilhs1e", "veg_hedge1_256" },
    { 13678, "lahillslaroads", "roaddgrassblnd" },
    { 13678, "lahillslaroads", "Tar_1line256HVblend" },
    { 13706, "lahillsroadscoast", "dt_roadblend" },
    { 13706, "lahillsroadscoast", "kbpavementblend" },
    { 13706, "lahillsroadscoast", "sjmhoodlawn42B" },
    { 13712, "lahillstr_lawn", "kb_ivy2_128" },
    { 13712, "lahillstr_lawn", "mulhfenc02_LA" },
    { 13694, "lahillstxd1a", "glasswindow2_256" },
    { 13816, "lahills_safe1", "dor_slider_16_32" },
    { 13816, "lahills_safe1", "gry_roof" },
    { 13816, "lahills_safe1", "koe_girder_128_642" },
    { 13816, "lahills_safe1", "pool_side_128_256" },
    { 13816, "lahills_safe1", "pord_conc_128" },
    { 13816, "lahills_safe1", "white_girdr" },
    { 13761, "lahills_whisky", "discharger" },
    { 13761, "lahills_whisky", "lasviper6" },
    { 13761, "lahills_whisky", "lasviper7" },
    { 13761, "lahills_whisky", "whisk1" },
    { 13761, "lahills_whisky", "whisk2" },
    { 13761, "lahills_whisky", "whisk3" },
    { 13761, "lahills_whisky", "whisk4" },
    { 13761, "lahills_whisky", "whisk5" },
    { 13861, "lahills_wiresnshit3", "antenna2" },
    { 13861, "lahills_wiresnshit3", "scumtiles2_LAe" },
    { 13861, "lahills_wiresnshit3", "sjmornfnce" },
    { 14713, "lahss2aint2", "HS1_2Wall3" },
    { 14713, "lahss2aint2", "HS1_carpet1" },
    { 14713, "lahss2aint2", "HS1_Shade" },
    { 14713, "lahss2aint2", "HS1_wall2" },
    { 14713, "lahss2aint2", "HS2_Artex2" },
    { 14713, "lahss2aint2", "HS2_Artex4" },
    { 14713, "lahss2aint2", "HS2_Blind1" },
    { 14713, "lahss2aint2", "HS2_Blind3" },
    { 14713, "lahss2aint2", "HS2_Curt3" },
    { 14713, "lahss2aint2", "HS2_floor1" },
    { 14713, "lahss2aint2", "HS2_wall4" },
    { 14713, "lahss2aint2", "HS2_wall6" },
    { 14713, "lahss2aint2", "HS3_Light3" },
    { 14713, "lahss2aint2", "HS_plug" },
    { 14712, "lahss2bint2", "HS1_2Wall2" },
    { 14712, "lahss2bint2", "HS1_Shade3" },
    { 14712, "lahss2bint2", "HS2_Artex6" },
    { 14712, "lahss2bint2", "HS3_wall8" },
    { 14712, "lahss2bint2", "WH_carpet2" },
    { 14701, "lahss2int2", "HS1_Kwall" },
    { 14701, "lahss2int2", "HS1_Kwall2" },
    { 14701, "lahss2int2", "HS1_Plug" },
    { 14701, "lahss2int2", "HS1_wall1" },
    { 14701, "lahss2int2", "HS1_wall3" },
    { 14701, "lahss2int2", "HS1_wall4" },
    { 14701, "lahss2int2", "HS2_Artex1" },
    { 14701, "lahss2int2", "HS2_Artex3" },
    { 14701, "lahss2int2", "HS2_Blind2" },
    { 14701, "lahss2int2", "HS2_Curt1" },
    { 14701, "lahss2int2", "HS2_Curt4" },
    { 14701, "lahss2int2", "HS2_Curt5" },
    { 14701, "lahss2int2", "HS2_wall1" },
    { 14701, "lahss2int2", "HS2_wall2" },
    { 14701, "lahss2int2", "WH_carpet1" },
    { 14701, "lahss2int2", "WH_carpet4" },
    { 14704, "lahss2_2int2", "HS_lamp1" },
    { 14704, "lahss2_2int2", "HS_radiator1" },
    { 14704, "lahss2_2int2", "HS_radiator2" },
    { 14704, "lahss2_2int2", "HS_vase2" },
    { 4556, "laland1_lan2", "gm_labuld2_a" },
    { 4556, "laland1_lan2", "gm_labuld4_c" },
    { 4556, "laland1_lan2", "sl_blokpave2" },
    { 14709, "lamidint2", "mp_apt1_bathfloor1" },
    { 14709, "lamidint2", "mp_apt1_bathtiles" },
    { 14709, "lamidint2", "mp_apt1_door" },
    { 14709, "lamidint2", "mp_apt1_floor" },
    { 14709, "lamidint2", "mp_apt1_kitchfloor" },
    { 14709, "lamidint2", "mp_apt1_roomwall" },
    { 14709, "lamidint2", "mp_apt1_win" },
    { 4653, "lan2freeway", "sl_freew2road1" },
    { 3781, "lan2office", "glass_office1" },
    { 3781, "lan2office", "glass_office2" },
    { 3781, "lan2office", "glass_office3" },
    { 3781, "lan2office", "glass_office4" },
    { 3781, "lan2office", "glass_office5" },
    { 3781, "lan2office", "glass_office6" },
    { 3781, "lan2office", "glass_office7" },
    { 3781, "lan2office", "glass_office8" },
    { 4601, "lan2_gm1", "gm_labuld1_a" },
    { 4601, "lan2_gm1", "gm_labuld1_b" },
    { 4601, "lan2_gm1", "gm_labuld1_c" },
    { 4601, "lan2_gm1", "gm_labuld1_d" },
    { 4601, "lan2_gm1", "gm_labuld1_e" },
    { 4601, "lan2_gm1", "pinkgranite" },
    { 4113, "lanbloka", "newall4-1" },
    { 4113, "lanbloka", "sl_dwntwndecor1" },
    { 4113, "lanbloka", "sl_forlease1" },
    { 4113, "lanbloka", "sl_laoffblokedg1" },
    { 4113, "lanbloka", "sl_laoffblokwall1" },
    { 4113, "lanbloka", "sl_laoffblokwin1" },
    { 4113, "lanbloka", "sl_laspiredecor1" },
    { 4113, "lanbloka", "sl_laspirewall1" },
    { 4113, "lanbloka", "sl_laspirewin1" },
    { 4113, "lanbloka", "sl_laspirewin2" },
    { 4011, "lanblokb", "sl_cinemasign1" },
    { 4011, "lanblokb", "sl_regalsgn" },
    { 4011, "lanblokb", "sl_rotnbrikvent" },
    { 4011, "lanblokb", "sl_rotnbrikwin1" },
    { 4010, "lanblokb2", "bluewhitebuild1" },
    { 4010, "lanblokb2", "bluewhitebuildwall2" },
    { 4010, "lanblokb2", "bluewhitebuildwall2drt" },
    { 4010, "lanblokb2", "bluewhitebuildwndbtm" },
    { 4010, "lanblokb2", "bluewhitewindow" },
    { 4010, "lanblokb2", "forleasesign" },
    { 4010, "lanblokb2", "sl_brikdotdecor1" },
    { 4010, "lanblokb2", "sl_brikdotwin1" },
    { 4010, "lanblokb2", "sl_lavicdtdecor1b" },
    { 4007, "lanblokc", "bonavwall1_LAn" },
    { 4007, "lanblokc", "skyscra1_LAn" },
    { 4007, "lanblokc", "skyscra2_LAn" },
    { 4007, "lanblokc", "sl_laoffblok2win1" },
    { 4007, "lanblokc", "sl_laoffblok2win2" },
    { 4005, "lanblokd", "decobuild2b_LAn" },
    { 4005, "lanblokd", "decobuild2c_LAn" },
    { 4005, "lanblokd", "decobuild2_LAn" },
    { 4005, "lanblokd", "deptstore1_LAn" },
    { 4005, "lanblokd", "deptstore2_LAn" },
    { 4005, "lanblokd", "deptstore4_LAn" },
    { 3975, "lanbloke", "lasbevcit1" },
    { 3975, "lanbloke", "lasbevcit2" },
    { 3975, "lanbloke", "lasbevcit3" },
    { 3975, "lanbloke", "lasbevcit4" },
    { 3975, "lanbloke", "lasbevcit5" },
    { 3975, "lanbloke", "lasbevcit8" },
    { 3975, "lanbloke", "lasbevcit99" },
    { 3975, "lanbloke", "lasunion95" },
    { 3975, "lanbloke", "ottos_SFE" },
    { 3983, "lanblokg", "Bow_dlct_plstrb_genb" },
    { 3984, "lanbloki", "bookwindowshigh" },
    { 3984, "lanbloki", "churchwall1" },
    { 3984, "lanbloki", "churchwin1_LAn" },
    { 3984, "lanbloki", "greytile_LA" },
    { 3984, "lanbloki", "nicewindowsnews" },
    { 3984, "lanbloki", "ws_sandstone2b" },
    { 17685, "landcoast_lae2", "rockwall1_LAe2" },
    { 17685, "landcoast_lae2", "rockwall2_LAe2" },
    { 17514, "landhub", "grasspatch_64HV" },
    { 17514, "landhub", "grasspave256" },
    { 17514, "landhub", "sidewgrass4" },
    { 17514, "landhub", "yardgrass2" },
    { 1631, "landjump", "Aascaff128" },
    { 1631, "landjump", "greywallc128" },
    { 1631, "landjump", "jumpside1_256" },
    { 1631, "landjump", "jumpside2_256" },
    { 1631, "landjump", "jumptop1_128" },
    { 1631, "landjump", "plasticdrum1_128" },
    { 1631, "landjump", "skipdirt_128" },
    { 17634, "landlae2b", "compfence4b_LAe" },
    { 17634, "landlae2b", "compfence5b_LAe" },
    { 17539, "landlae2c", "conc_slab_256" },
    { 17539, "landlae2c", "roughwall_kb_semless" },
    { 17513, "landlae2e", "basketballcourt1" },
    { 10903, "landsfe", "GB_nastybar20" },
    { 9483, "landsfw", "rock1_128" },
    { 4100, "lanfireesc_tr", "barbwire1" },
    { 4100, "lanfireesc_tr", "sl_metaledge" },
    { 4558, "lanlacmab_lan2", "lasbrwnhus3" },
    { 4558, "lanlacmab_lan2", "LASLACMA9" },
    { 4558, "lanlacmab_lan2", "LASLACMA98" },
    { 4558, "lanlacmab_lan2", "LASLACMA99" },
    { 4558, "lanlacmab_lan2", "LASLACMA991" },
    { 4558, "lanlacmab_lan2", "LASLACMA998" },
    { 4558, "lanlacmab_lan2", "sjmmetrail" },
    { 4558, "lanlacmab_lan2", "sl_galleryplaza1" },
    { 4558, "lanlacmab_lan2", "sl_gallerywall1" },
    { 4558, "lanlacmab_lan2", "sl_plazatile02" },
    { 4558, "lanlacmab_lan2", "sl_stapldoor1" },
    { 4559, "lanlacma_lan2", "LASLACMA2" },
    { 4559, "lanlacma_lan2", "LASLACMA5" },
    { 4559, "lanlacma_lan2", "LASLACMA7" },
    { 4559, "lanlacma_lan2", "LASLACMA91" },
    { 4559, "lanlacma_lan2", "LASLACMA94" },
    { 4559, "lanlacma_lan2", "LASLACMA95" },
    { 4559, "lanlacma_lan2", "LASLACMA97" },
    { 4559, "lanlacma_lan2", "LASLACMA996" },
    { 4559, "lanlacma_lan2", "LASLACMA997" },
    { 4714, "lanlacma_tr_lan2", "sl_galleryrail1" },
    { 3977, "lanriver", "stormdrain1b_sl" },
    { 3977, "lanriver", "stormdrain1_nt" },
    { 3990, "lanroad", "lakerbcol" },
    { 3990, "lanroad", "sl_pavebutt1" },
    { 5149, "lasground2_las2", "driveway4_128" },
    { 5149, "lasground2_las2", "garage_roof" },
    { 5149, "lasground2_las2", "gragewinkb1" },
    { 5149, "lasground2_las2", "rooftoprd128" },
    { 5113, "lasground_las2", "general01_law" },
    { 5113, "lasground_las2", "sjmbarber21" },
    { 5142, "lashops1b_las2", "lasjmslumwall" },
    { 5142, "lashops1b_las2", "lasplaza2" },
    { 5142, "lashops1b_las2", "lasplaza3" },
    { 5142, "lashops1b_las2", "lasplaza5" },
    { 5142, "lashops1b_las2", "lasplaza8" },
    { 5142, "lashops1b_las2", "lasplaza91" },
    { 5142, "lashops1b_las2", "lasplaza92" },
    { 5142, "lashops1b_las2", "mural03_LA" },
    { 5142, "lashops1b_las2", "sanpedshpito" },
    { 5142, "lashops1b_las2", "sjmhoodaab" },
    { 5142, "lashops1b_las2", "sjmhoodaac" },
    { 5142, "lashops1b_las2", "snpdwhit2" },
    { 5110, "lashops1_las2", "crenhous2" },
    { 5110, "lashops1_las2", "sanpshop5z" },
    { 5110, "lashops1_las2", "sjmhicut3las" },
    { 5168, "lashops6_las2", "sw_wind12" },
    { 5168, "lashops6_las2", "yellow2_128" },
    { 5267, "lashops91_las2", "laspowrec2" },
    { 5180, "lashops93_las2", "snpedshptst1" },
    { 5180, "lashops93_las2", "snpedshptst2" },
    { 5180, "lashops93_las2", "Window1164HV" },
    { 14718, "lasmall1int2", "burglry_wall7" },
    { 14718, "lasmall1int2", "cooker1" },
    { 14718, "lasmall1int2", "hob_1" },
    { 14718, "lasmall1int2", "kb_sink2" },
    { 14718, "lasmall1int2", "la_kitch4" },
    { 14718, "lasmall1int2", "washmchne_1" },
    { 15031, "lasmallsave", "ab_tile4" },
    { 5106, "lasraodnshops", "sanpedmot2" },
    { 5106, "lasraodnshops", "sanpedton2" },
    { 4807, "lasroads_las", "newall8-1" },
    { 5120, "lasroads_las2", "lasunion994" },
    { 5120, "lasroads_las2", "snpedtest1BLND" },
    { 3620, "lasxrefdock", "boatcables_128" },
    { 3620, "lasxrefdock", "sanpedock6" },
    { 3620, "lasxrefdock", "sanpedock96" },
    { 3620, "lasxrefdock", "sjmlawarlit" },
    { 3620, "lasxrefdock", "sjmlawarlit1" },
    { 3620, "lasxrefdock", "ws_goldengate5b" },
    { 3761, "lasxrefdockbox", "shadow1shelfd" },
    { 3761, "lasxrefdockbox", "sjmlawarshel" },
    { 3761, "lasxrefdockbox", "sjmlawarshel2" },
    { 3749, "law2misc_lax", "cemewall01_law" },
    { 3749, "law2misc_lax", "sanwel1" },
    { 3749, "law2misc_lax", "sanwel4" },
    { 6291, "law2_roadsb", "anwfrntbev6" },
    { 6291, "law2_roadsb", "nicepavegras_LA" },
    { 6205, "lawartg", "luxorwall01_128" },
    { 1980, "lawest1", "fillertop01_law" },
    { 1980, "lawest1", "fillertop02_law" },
    { 1980, "lawest1", "shoptop01_law" },
    { 1980, "lawest1", "sunsetmall05_law" },
    { 6293, "lawland2", "asanlithus1" },
    { 6293, "lawland2", "asanlithus2" },
    { 6293, "lawland2", "asanlithus3" },
    { 6293, "lawland2", "asanmonhrbwal1" },
    { 6293, "lawland2", "compcourtrail1" },
    { 6293, "lawland2", "lasjmflat1" },
    { 6293, "lawland2", "lightglass" },
    { 5813, "lawnabv", "bargainpawn1_256" },
    { 5813, "lawnabv", "dwntwnvgn1_128]" },
    { 5813, "lawnabv", "nudexxxsign1_256" },
    { 5813, "lawnabv", "vgnwstshop1_256" },
    { 5813, "lawnabv", "vgnwstshop4_256" },
    { 5813, "lawnabv", "vgnwstshoptop_256" },
    { 5813, "lawnabv", "ws_corr_wall1" },
    { 3684, "lawnapartxref", "genroof03_128" },
    { 3684, "lawnapartxref", "vgnbalcony1_256" },
    { 3684, "lawnapartxref", "vnghse4_256" },
    { 3684, "lawnapartxref", "vnghse5_256" },
    { 5728, "lawnbit", "frostedglass256128" },
    { 5857, "lawnbuy", "ws_starballs" },
    { 5713, "lawnest2", "concrete_64HV" },
    { 5713, "lawnest2", "grave02_law" },
    { 5713, "lawnest2", "grave03_law" },
    { 5713, "lawnest2", "grave04_law" },
    { 5713, "lawnest2", "grave05_law" },
    { 5810, "lawnstripm", "papercuts" },
    { 5810, "lawnstripm", "savsig1" },
    { 5810, "lawnstripm", "savsig4" },
    { 5810, "lawnstripm", "sodom_law" },
    { 3676, "lawnxref", "lasthoose1" },
    { 3676, "lawnxref", "lasthoose1blue" },
    { 3676, "lawnxref", "lasthoose2" },
    { 3676, "lawnxref", "lasthoose3" },
    { 3676, "lawnxref", "lasthoose4" },
    { 3676, "lawnxref", "lasthoose4blue" },
    { 3676, "lawnxref", "lasthoose5" },
    { 3676, "lawnxref", "lasthoose6" },
    { 6038, "lawwhitebuilds", "buzzer_law" },
    { 6038, "lawwhitebuilds", "gasstopwall1_256" },
    { 6038, "lawwhitebuilds", "GB_blend01" },
    { 6038, "lawwhitebuilds", "musk3" },
    { 6038, "lawwhitebuilds", "planterend_law" },
    { 6038, "lawwhitebuilds", "planterside_law" },
    { 6038, "lawwhitebuilds", "plantertop_law" },
    { 6038, "lawwhitebuilds", "venwin03_lawlit" },
    { 6038, "lawwhitebuilds", "wilsa_01b_lalit" },
    { 6038, "lawwhitebuilds", "wilsc_01_la" },
    { 6064, "law_beach1", "avenpol4" },
    { 6064, "law_beach1", "beachwalk_law" },
    { 6064, "law_beach1", "musk1" },
    { 6064, "law_beach1", "musk2" },
    { 6064, "law_beach1", "musk4" },
    { 6064, "law_beach1", "musk5" },
    { 6049, "law_beach2", "beachut1back256" },
    { 6049, "law_beach2", "blueshade3_64" },
    { 6049, "law_beach2", "glasses2_law" },
    { 6049, "law_beach2", "greenshade_64" },
    { 6049, "law_beach2", "law_gazcoast3" },
    { 6049, "law_beach2", "law_gazcoast4" },
    { 6049, "law_beach2", "lombard_build2_3" },
    { 6049, "law_beach2", "Lombard_door1" },
    { 6049, "law_beach2", "luxorwall02_128" },
    { 6040, "law_cnrtplaz", "creamshop1_LAe" },
    { 6040, "law_cnrtplaz", "off01bot_law" },
    { 6040, "law_cnrtplaz", "off01mid_law" },
    { 6040, "law_cnrtplaz", "off01top_law" },
    { 2895, "law_coffinfl", "hot_flowers1" },
    { 2895, "law_coffinfl", "hot_flowers2" },
    { 2898, "law_coffintu", "faketurf_law" },
    { 2896, "law_coffintxd", "caskdrape_law" },
    { 2896, "law_coffintxd", "caskhandle_law" },
    { 2896, "law_coffintxd", "caskside2_law" },
    { 2896, "law_coffintxd", "casktop_law" },
    { 2896, "law_coffintxd", "metleg_32_law" },
    { 6052, "law_doontoon", "gz_lawbuilda_1" },
    { 6052, "law_doontoon", "gz_lawbuilda_2" },
    { 6052, "law_doontoon", "gz_lawbuilda_6" },
    { 6052, "law_doontoon", "gz_lawbuilda_7" },
    { 6052, "law_doontoon", "sfe_nicearch2" },
    { 6052, "law_doontoon", "sfe_nicearch3" },
    { 6052, "law_doontoon", "sf_windos_10b" },
    { 6052, "law_doontoon", "sf_window_mod1" },
    { 6052, "law_doontoon", "stepshoptop_law" },
    { 3586, "la_props1", "shutters2" },
    { 14802, "lee_bdupsflat", "Bdup_Bed" },
    { 14802, "lee_bdupsflat", "Bdup_cabinet" },
    { 14802, "lee_bdupsflat", "Bdup_Clock" },
    { 14802, "lee_bdupsflat", "Bdup_Cooker" },
    { 14802, "lee_bdupsflat", "Bdup_door" },
    { 14802, "lee_bdupsflat", "Bdup_Fridge" },
    { 14802, "lee_bdupsflat", "Bdup_GhettoB" },
    { 14802, "lee_bdupsflat", "Bdup_KitchDoor" },
    { 14802, "lee_bdupsflat", "Bdup_KitchSink" },
    { 14802, "lee_bdupsflat", "Bdup_lamp" },
    { 14802, "lee_bdupsflat", "Bdup_Light" },
    { 14802, "lee_bdupsflat", "Bdup_NetCurtains" },
    { 14802, "lee_bdupsflat", "Bdup_news" },
    { 14802, "lee_bdupsflat", "Bdup_phone" },
    { 14802, "lee_bdupsflat", "Bdup_Pillow" },
    { 14802, "lee_bdupsflat", "Bdup_Pizza" },
    { 14802, "lee_bdupsflat", "Bdup_plate" },
    { 14802, "lee_bdupsflat", "Bdup_Poster" },
    { 14802, "lee_bdupsflat", "Bdup_punters" },
    { 14802, "lee_bdupsflat", "Bdup_Rug" },
    { 14802, "lee_bdupsflat", "Bdup_Sofa" },
    { 14802, "lee_bdupsflat", "Bdup_table" },
    { 14802, "lee_bdupsflat", "Bdup_TV" },
    { 14802, "lee_bdupsflat", "Bdup_VCR" },
    { 14802, "lee_bdupsflat", "Bdup_Wine" },
    { 14802, "lee_bdupsflat", "CJ_LID" },
    { 14802, "lee_bdupsflat", "mp_Gen_Bin_Bag" },
    { 14802, "lee_bdupsflat", "mp_sprunk2dirty" },
    { 14802, "lee_bdupsflat", "USAflag" },
    { 14801, "lee_bdupsmain", "ahomcarpet" },
    { 14801, "lee_bdupsmain", "ahomcarpet2" },
    { 14801, "lee_bdupsmain", "Bdup_Blinds" },
    { 14801, "lee_bdupsmain", "Bdup_graf1" },
    { 14801, "lee_bdupsmain", "Bdup_graf2" },
    { 14801, "lee_bdupsmain", "Bdup_graf3" },
    { 14801, "lee_bdupsmain", "Bdup_graf4" },
    { 14801, "lee_bdupsmain", "Bdup_graf5" },
    { 14801, "lee_bdupsmain", "Bdup_KitchFloor" },
    { 14801, "lee_bdupsmain", "lasjmslumwin1" },
    { 14801, "lee_bdupsmain", "subindwall2" },
    { 2776, "lee_chair1", "Strip_Chair" },
    { 2776, "lee_chair1", "strip_metal" },
    { 3961, "lee_kitch", "ChipPan" },
    { 3961, "lee_kitch", "ChoppingBoard" },
    { 3961, "lee_kitch", "Cooker" },
    { 3961, "lee_kitch", "Cooker_Dial" },
    { 3961, "lee_kitch", "Freezer" },
    { 3961, "lee_kitch", "Grater" },
    { 3961, "lee_kitch", "KitchenUnits" },
    { 3961, "lee_kitch", "Knive1" },
    { 3961, "lee_kitch", "metal1" },
    { 3961, "lee_kitch", "metal2" },
    { 3961, "lee_kitch", "metal5" },
    { 3961, "lee_kitch", "metal6" },
    { 3961, "lee_kitch", "metal7" },
    { 3961, "lee_kitch", "Microwave" },
    { 3961, "lee_kitch", "Oil" },
    { 3961, "lee_kitch", "Oil2" },
    { 3961, "lee_kitch", "Pepper" },
    { 3961, "lee_kitch", "Pot1" },
    { 3961, "lee_kitch", "Pot3" },
    { 3961, "lee_kitch", "rack" },
    { 3961, "lee_kitch", "Roast" },
    { 3961, "lee_kitch", "SinkL" },
    { 3961, "lee_kitch", "Spatula" },
    { 3961, "lee_kitch", "Spices" },
    { 3961, "lee_kitch", "Steak" },
    { 14808, "lee_strip2", "HS3_wall1" },
    { 14808, "lee_strip2", "Strip_Carpet" },
    { 14808, "lee_strip2", "strip_carpet2" },
    { 14808, "lee_strip2", "Strip_Ceiling" },
    { 14808, "lee_strip2", "Strip_Chand" },
    { 14808, "lee_strip2", "Strip_curtain" },
    { 14808, "lee_strip2", "Strip_Dresser" },
    { 14808, "lee_strip2", "Strip_Gold" },
    { 14808, "lee_strip2", "strip_lights" },
    { 14808, "lee_strip2", "Strip_neon1" },
    { 14808, "lee_strip2", "Strip_neon2" },
    { 14808, "lee_strip2", "strip_neon_Curtain" },
    { 14808, "lee_strip2", "strip_neon_Flat" },
    { 14808, "lee_strip2", "strip_table" },
    { 14808, "lee_strip2", "Strip_Throne" },
    { 14808, "lee_strip2", "strip_wall" },
    { 14808, "lee_strip2", "Strip_wood" },
    { 14808, "lee_strip2", "WH_Hbed" },
    { 14808, "lee_strip2", "WH_Hbo1" },
    { 14811, "lee_strip2_1", "BeerGlass" },
    { 14811, "lee_strip2_1", "BeerGlass2" },
    { 14811, "lee_strip2_1", "BeerTap" },
    { 14811, "lee_strip2_1", "CJ_NEON_HEART" },
    { 14811, "lee_strip2_1", "Liquer" },
    { 14811, "lee_strip2_1", "till1" },
    { 14811, "lee_strip2_1", "VodkaBottle" },
    { 14811, "lee_strip2_1", "Winebottle2" },
    { 14811, "lee_strip2_1", "WineGlass2" },
    { 14832, "lee_stripclub", "cl_floornew_256" },
    { 14832, "lee_stripclub", "mirror_ref1" },
    { 14832, "lee_stripclub", "Strip_bar_wall1" },
    { 14832, "lee_stripclub", "Strip_ceiling" },
    { 14832, "lee_stripclub", "Strip_ladyDoor" },
    { 14832, "lee_stripclub", "Strip_neon3" },
    { 14832, "lee_stripclub", "Strip_neon4" },
    { 14832, "lee_stripclub", "Strip_plant" },
    { 14832, "lee_stripclub", "Strip_plantBark" },
    { 14832, "lee_stripclub", "Strip_plantPot" },
    { 14832, "lee_stripclub", "Strip_podium" },
    { 14832, "lee_stripclub", "Strip_podium2" },
    { 14832, "lee_stripclub", "Strip_sofa" },
    { 14832, "lee_stripclub", "Strip_sofa2" },
    { 14832, "lee_stripclub", "Strip_wood_floor" },
    { 14829, "lee_stripclub1", "Strip_light" },
    { 14839, "lee_strippriv", "Strip_Ashtray" },
    { 14839, "lee_strippriv", "Strip_DrinkCab" },
    { 14839, "lee_strippriv", "Strip_Fan" },
    { 14839, "lee_strippriv", "Strip_Private" },
    { 14839, "lee_strippriv", "Strip_Sign12" },
    { 14839, "lee_strippriv", "WH_Chang" },
    { 14839, "lee_strippriv", "WH_Chang1" },
    { 14839, "lee_strippriv", "WH_Cpik" },
    { 14839, "lee_strippriv", "WH_Curtains" },
    { 14839, "lee_strippriv", "WH_fan" },
    { 14839, "lee_strippriv", "WH_Sofa" },
    { 14812, "lee_studhall", "carpet" },
    { 14812, "lee_studhall", "GoldDisk1" },
    { 14812, "lee_studhall", "GoldDisk2" },
    { 14812, "lee_studhall", "GoldDisk3" },
    { 14812, "lee_studhall", "GoldDisk4" },
    { 14812, "lee_studhall", "GoldDisk5" },
    { 14812, "lee_studhall", "GoldDisk6" },
    { 14812, "lee_studhall", "Papercup" },
    { 14812, "lee_studhall", "WaterCooler" },
    { 14812, "lee_studhall", "WaterCooler2" },
    { 2723, "lee_txd", "Strip_chair" },
    { 2723, "lee_txd", "Strip_lamp" },
    { 2723, "lee_txd", "Strip_table_base" },
    { 2723, "lee_txd", "Strip_table_top" },
    { 3904, "libertyfar", "buildtall1" },
    { 3904, "libertyfar", "china6a" },
    { 3904, "libertyfar", "china6d" },
    { 3904, "libertyfar", "Chinabuildnew1a" },
    { 3904, "libertyfar", "Chinabuildnew1b" },
    { 3904, "libertyfar", "Chinabuildnew1c" },
    { 3904, "libertyfar", "Chinabuilds06a" },
    { 3904, "libertyfar", "Chinabuilds06b" },
    { 3904, "libertyfar", "Chinabuilds06c" },
    { 3904, "libertyfar", "chinatwnfmrkt" },
    { 3904, "libertyfar", "chinatwnfmrktb" },
    { 3904, "libertyfar", "chnaquadhouse1" },
    { 3904, "libertyfar", "chnaquadhouse2" },
    { 3904, "libertyfar", "entlev" },
    { 3904, "libertyfar", "fishroof" },
    { 3904, "libertyfar", "indhibuild10_l0r" },
    { 3904, "libertyfar", "indhibuild2a" },
    { 3904, "libertyfar", "indhibuild2b" },
    { 3904, "libertyfar", "indhibuild2c" },
    { 3904, "libertyfar", "indhibuild2d" },
    { 3904, "libertyfar", "indhibuild3_l0" },
    { 3904, "libertyfar", "luigiscluba" },
    { 3904, "libertyfar", "mainten2a" },
    { 3904, "libertyfar", "mainten2b" },
    { 3904, "libertyfar", "mainten2c" },
    { 3904, "libertyfar", "mainten2d" },
    { 3904, "libertyfar", "mainten364" },
    { 3904, "libertyfar", "mainten3a" },
    { 3904, "libertyfar", "mainten3b" },
    { 3904, "libertyfar", "mainten3c" },
    { 3904, "libertyfar", "newtenmt1" },
    { 3904, "libertyfar", "newtenmt2" },
    { 3904, "libertyfar", "newtenmt3" },
    { 3904, "libertyfar", "newtenmt4" },
    { 3904, "libertyfar", "newtenmt6" },
    { 3904, "libertyfar", "newtenmt7" },
    { 3904, "libertyfar", "newtenx" },
    { 3904, "libertyfar", "Paveblank_64hv" },
    { 3904, "libertyfar", "redbuild06a" },
    { 3904, "libertyfar", "redbuild06b" },
    { 3904, "libertyfar", "redbuild12a" },
    { 3904, "libertyfar", "redbuild12b" },
    { 3904, "libertyfar", "redbuild12c" },
    { 3904, "libertyfar", "redbuild12d" },
    { 3904, "libertyfar", "redlightbuild04b" },
    { 3904, "libertyfar", "redlightbuild04_dyr_l0" },
    { 3904, "libertyfar", "redlightbuild06b_l0f" },
    { 3904, "libertyfar", "redlightbuild06e_l0b" },
    { 3904, "libertyfar", "redlightbuild06e_l0f" },
    { 3904, "libertyfar", "redlightbuild06v_l0b" },
    { 3904, "libertyfar", "redlightbuild06v_l0f" },
    { 3904, "libertyfar", "redlightbuild08a_l0b" },
    { 3904, "libertyfar", "redlightbuild08a_l0f" },
    { 3904, "libertyfar", "redlightbuild09f1" },
    { 3904, "libertyfar", "redlightbuild09f2" },
    { 3904, "libertyfar", "redlightbuild10f" },
    { 3904, "libertyfar", "redlightbuild11_l0f" },
    { 3904, "libertyfar", "redlightbuild12_l0b" },
    { 3904, "libertyfar", "rizzo2" },
    { 3904, "libertyfar", "steps" },
    { 3904, "libertyfar", "subplat" },
    { 3904, "libertyfar", "subplatyell" },
    { 3904, "libertyfar", "support_water256" },
    { 3904, "libertyfar", "support_water64" },
    { 3904, "libertyfar", "tallbuild" },
    { 3904, "libertyfar", "tenblock6" },
    { 3904, "libertyfar", "towerflat" },
    { 3897, "libertyhi", "blueshop128" },
    { 3897, "libertyhi", "bricksoftgrey128" },
    { 3897, "libertyhi", "concretebuild64" },
    { 3897, "libertyhi", "greytendetwin256128" },
    { 3897, "libertyhi", "inddoordark128" },
    { 3897, "libertyhi", "inddoorway128" },
    { 3897, "libertyhi", "indtendark64" },
    { 3897, "libertyhi", "ledge4_64H" },
    { 3897, "libertyhi", "marcos01_128" },
    { 3897, "libertyhi", "newallkb1128" },
    { 3897, "libertyhi", "newallktenb1128" },
    { 3897, "libertyhi", "newtreea128" },
    { 3897, "libertyhi", "Newtreeb256" },
    { 3897, "libertyhi", "railhi_64V" },
    { 3897, "libertyhi", "railmesh_64" },
    { 3897, "libertyhi", "railtrack_64" },
    { 3897, "libertyhi", "Road_yellowline256HV" },
    { 3897, "libertyhi", "wallmix64HV" },
    { 3905, "libertyhi2", "alleypave_64V" },
    { 3905, "libertyhi2", "artgal_128" },
    { 3905, "libertyhi2", "bank1_64" },
    { 3905, "libertyhi2", "bank3_64" },
    { 3905, "libertyhi2", "bankdoor_64a" },
    { 3905, "libertyhi2", "inddoor7" },
    { 3905, "libertyhi2", "indtena128" },
    { 3905, "libertyhi2", "ind_tentop128" },
    { 3905, "libertyhi2", "ledge_uni_64H" },
    { 3905, "libertyhi2", "newall_harling_sless128" },
    { 3905, "libertyhi2", "Pillarbrickgrey_64HV" },
    { 3905, "libertyhi2", "tenabrick64" },
    { 3905, "libertyhi2", "tenbeige128" },
    { 3905, "libertyhi2", "tenbeigebrick64" },
    { 3902, "libertyhi3", "cafea64" },
    { 3902, "libertyhi3", "glass2_64" },
    { 3902, "libertyhi3", "ledgetop_64HV" },
    { 3902, "libertyhi3", "marcos02_128" },
    { 3902, "libertyhi3", "metfence2_64HV" },
    { 3902, "libertyhi3", "newall9-1128" },
    { 3902, "libertyhi3", "shopdoor3_64" },
    { 3902, "libertyhi3", "taxi_256128" },
    { 3906, "libertyhi5", "chipboardgrating64HV" },
    { 3906, "libertyhi5", "concrete02_64HV" },
    { 3906, "libertyhi5", "dragtop_64h" },
    { 3906, "libertyhi5", "grating 64HV" },
    { 3906, "libertyhi5", "indcleaner128" },
    { 3906, "libertyhi5", "inddoor3" },
    { 3906, "libertyhi5", "indnailshop128" },
    { 3906, "libertyhi5", "indredten128" },
    { 3906, "libertyhi5", "indten2btm128" },
    { 3906, "libertyhi5", "indten2top128" },
    { 3906, "libertyhi5", "indtenbtm128" },
    { 3906, "libertyhi5", "indtentop128" },
    { 3906, "libertyhi5", "ind_italdeli128" },
    { 3906, "libertyhi5", "ind_italywinda128" },
    { 3906, "libertyhi5", "ind_photo256128" },
    { 3906, "libertyhi5", "ind_store128" },
    { 3906, "libertyhi5", "ind_window" },
    { 3906, "libertyhi5", "italyawalll64" },
    { 3906, "libertyhi5", "italy_cds128" },
    { 3906, "libertyhi5", "ledgegreen_64H" },
    { 3906, "libertyhi5", "ledge_detl_256128" },
    { 3906, "libertyhi5", "newall9d_16c128" },
    { 3906, "libertyhi5", "nicewhttop256128" },
    { 3906, "libertyhi5", "ornatetall256128" },
    { 3906, "libertyhi5", "shopgrating128H" },
    { 3906, "libertyhi5", "TENdblue2_128" },
    { 3906, "libertyhi5", "TENdbrown5_128" },
    { 3906, "libertyhi5", "tenreditaly128" },
    { 3906, "libertyhi5", "TENterr2_128" },
    { 3906, "libertyhi5", "wallbrown02_64HV" },
    { 3906, "libertyhi5", "walldirtynewa256128" },
    { 3906, "libertyhi5", "walldirtyneward256128" },
    { 4726, "libhelipad_lan2", "dt_twinklylites" },
    { 4726, "libhelipad_lan2", "footplate_gz" },
    { 4726, "libhelipad_lan2", "helipad_basepanel" },
    { 4726, "libhelipad_lan2", "helipad_whitelines" },
    { 4726, "libhelipad_lan2", "helipad_yellowline" },
    { 17944, "lngblok_lae2", "downtsign14_LA" },
    { 17944, "lngblok_lae2", "grnboard_law" },
    { 17944, "lngblok_lae2", "sw_wind22" },
    { 17944, "lngblok_lae2", "white64bumpy" },
    { 10052, "lomall", "club_metal_sfw" },
    { 10052, "lomall", "helipad_leg" },
    { 10052, "lomall", "lomall_ext1_" },
    { 10052, "lomall", "lomall_ext3_" },
    { 10052, "lomall", "tileornateg256" },
    { 10052, "lomall", "zombiegeddon" },
    { 9947, "lombard", "lombard_build1_3" },
    { 9947, "lombard", "lombard_build3_2" },
    { 9947, "lombard", "lombard_build3_3" },
    { 9947, "lombard", "lombard_build3_4" },
    { 9947, "lombard", "lombard_sfe" },
    { 9947, "lombard", "pier69_ground1" },
    { 9947, "lombard", "windy_SF" },
    { 17546, "losflor2_lae2", "hydrowin1_LAe" },
    { 17538, "losflor4_lae2", "ventc128" },
    { 17538, "losflor4_lae2", "wallbrown64HV" },
    { 1255, "lounger", "lounger_back" },
    { 1255, "lounger", "lounger_bits" },
    { 8496, "lowbuild03_lvs", "vgshopwall01_128" },
    { 8496, "lowbuild03_lvs", "vgshopwall02_128" },
    { 8496, "lowbuild03_lvs", "vgshopwall03_64" },
    { 8496, "lowbuild03_lvs", "vgshopwall04_64" },
    { 8496, "lowbuild03_lvs", "vgshopwall06_64" },
    { 14780, "lring_gmint3", "clamp" },
    { 14780, "lring_gmint3", "crash_pad" },
    { 14780, "lring_gmint3", "crash_pad_red" },
    { 14780, "lring_gmint3", "nuringtest" },
    { 14780, "lring_gmint3", "nuringtest2" },
    { 14780, "lring_gmint3", "ringbase" },
    { 14780, "lring_gmint3", "ROPE_1" },
    { 8398, "luxorland", "luxorfloor01_256" },
    { 8398, "luxorland", "luxorfloor02_128" },
    { 8397, "luxorpillar1", "luxorpillar01_128" },
    { 3441, "luxorpillar2", "luxorpillar02_256" },
    { 8589, "lwbldstuff03", "biglips_128" },
    { 8589, "lwbldstuff03", "filmcase01_64" },
    { 8589, "lwbldstuff03", "filmstrip01_64" },
    { 8589, "lwbldstuff03", "lipstick_64" },
    { 14841, "l_gymers", "ab_boxingFloor" },
    { 5458, "macpark1tr_lae", "cobbles_kb_edge_128" },
    { 5458, "macpark1tr_lae", "grasslong256" },
    { 5458, "macpark1tr_lae", "macpath_LAe" },
    { 14425, "madbedrooms", "ah_wallstyle2" },
    { 14389, "madpoolbit", "AH_flroortile4" },
    { 14623, "mafcasmain", "ab_carpGreenEdge" },
    { 14623, "mafcasmain", "ab_MarbleDiamond" },
    { 14623, "mafcasmain", "ab_panel5" },
    { 14623, "mafcasmain", "ab_tileStar" },
    { 14623, "mafcasmain", "ab_tileStar2" },
    { 14623, "mafcasmain", "casino_carp" },
    { 14623, "mafcasmain", "ele_flr" },
    { 14623, "mafcasmain", "marble_wall" },
    { 14623, "mafcasmain", "marble_wall2" },
    { 14623, "mafcasmain", "sign_managerSuite" },
    { 14626, "mafcassigns1", "sign_placeYourBets" },
    { 14642, "mafcasspiral", "sign_CaligulaWin" },
    { 14590, "mafcastopfoor", "ab_carpet01" },
    { 14590, "mafcastopfoor", "ab_stairwellLwr" },
    { 14590, "mafcastopfoor", "cop_ceiling1" },
    { 14590, "mafcastopfoor", "donut_wall1" },
    { 3089, "mafcasx", "cof_wind1" },
    { 14636, "mafcas_signs", "sign_careful" },
    { 14636, "mafcas_signs", "sign_caution" },
    { 14636, "mafcas_signs", "sign_donot" },
    { 14636, "mafcas_signs", "sign_notice" },
    { 14621, "mafiacasinodl", "sign_bank&change" },
    { 14576, "mafiacasinovault01", "ab_vaultboxes" },
    { 14576, "mafiacasinovault01", "ab_vaultmetal" },
    { 3053, "magnetx", "magnetY" },
    { 5848, "mainlcawn", "24hoursign1_LAwN" },
    { 5848, "mainlcawn", "cashdispenser1_256" },
    { 5848, "mainlcawn", "downtsign16_LA" },
    { 5848, "mainlcawn", "fakestone2_LA" },
    { 5848, "mainlcawn", "sexsign1_LAwn" },
    { 5848, "mainlcawn", "striplight01_128" },
    { 5848, "mainlcawn", "touristbureauLAwN" },
    { 14572, "maint1", "ab_maintDoors" },
    { 14572, "maint1", "main_floor" },
    { 14572, "maint1", "main_wall" },
    { 6048, "mall_law", "frostdoor01_law" },
    { 6048, "mall_law", "lascourtsc1" },
    { 6048, "mall_law", "malltwr01_law" },
    { 6048, "mall_law", "malltwr02_law" },
    { 6048, "mall_law", "mallvent_LAW" },
    { 6048, "mall_law", "stonemall_law" },
    { 6048, "mall_law", "veronamall_law" },
    { 6048, "mall_law", "wolf1" },
    { 6048, "mall_law", "wolf2" },
    { 6048, "mall_law", "wolf3" },
    { 6048, "mall_law", "wolf4" },
    { 6048, "mall_law", "wolf6b" },
    { 10973, "mall_sfse", "mallfloor3" },
    { 10973, "mall_sfse", "ws_grilleshade" },
    { 10973, "mall_sfse", "ws_shopfront1a" },
    { 10973, "mall_sfse", "ws_trainstationwin2" },
    { 14702, "masmall3int2", "HS2_Curt2" },
    { 14702, "masmall3int2", "HS2_wall3" },
    { 14702, "masmall3int2", "HS3_Light" },
    { 14702, "masmall3int2", "HS3_wall3" },
    { 14702, "masmall3int2", "HS3_wall4" },
    { 14702, "masmall3int2", "HS3_wall6" },
    { 5787, "melrose02_lawn", "LAstripmall2" },
    { 5787, "melrose02_lawn", "melrblu_law" },
    { 5787, "melrose02_lawn", "melrgr01_law" },
    { 5787, "melrose02_lawn", "melrgren2_law" },
    { 5787, "melrose02_lawn", "melrpurp2_law" },
    { 5787, "melrose02_lawn", "shopfr01_LA" },
    { 5787, "melrose02_lawn", "shopfr02_LA" },
    { 5780, "melrose03_lawn", "hollyshop01_LAwn" },
    { 5780, "melrose03_lawn", "hollyshop02_LAwn" },
    { 5780, "melrose03_lawn", "hollyshop03_LAwn" },
    { 5780, "melrose03_lawn", "hollyshop04_LAwn" },
    { 5780, "melrose03_lawn", "ws_apartmentmankypeach1" },
    { 5730, "melrose05_lawn", "melrbr01_law" },
    { 5730, "melrose05_lawn", "melrbr02_law" },
    { 5704, "melrose07_lawn", "decotop_law" },
    { 5704, "melrose07_lawn", "shopdeco01b_law" },
    { 5704, "melrose07_lawn", "shopdeco01_law" },
    { 5704, "melrose07_lawn", "shopdeco02_law" },
    { 5704, "melrose07_lawn", "shopdeco03b_law" },
    { 5704, "melrose07_lawn", "shopdeco03c_law" },
    { 5704, "melrose07_lawn", "shopdeco03_law" },
    { 5704, "melrose07_lawn", "shopwall01_law" },
    { 5704, "melrose07_lawn", "ws_conc_step1" },
    { 5733, "melrose08_lawn", "base5_1" },
    { 5733, "melrose08_lawn", "malawn01_LAwN" },
    { 5733, "melrose08_lawn", "malawn02_LAwN" },
    { 5733, "melrose08_lawn", "melrdoor01_law" },
    { 5733, "melrose08_lawn", "melroran2_law" },
    { 5733, "melrose08_lawn", "melryel_law" },
    { 5771, "melrose11_lawn", "melrshop05_LAwN" },
    { 5771, "melrose11_lawn", "melrshop06_LAwN" },
    { 5771, "melrose11_lawn", "melrshop07_LAwN" },
    { 5771, "melrose11_lawn", "melrsign04_LA" },
    { 5771, "melrose11_lawn", "melrsign07_LA" },
    { 5771, "melrose11_lawn", "melrsign08_LA" },
    { 5732, "melrose12_lawn", "comptwall39" },
    { 5732, "melrose12_lawn", "melrshop01_LAwN" },
    { 5732, "melrose12_lawn", "melrshop03_LAwN" },
    { 5732, "melrose12_lawn", "melrsign01_LA" },
    { 5732, "melrose12_lawn", "melrwall01_LAw" },
    { 5773, "melrose13_lawn", "downtwin19" },
    { 5773, "melrose13_lawn", "downtwin22" },
    { 5773, "melrose13_lawn", "LAplaza1" },
    { 5773, "melrose13_lawn", "recshop01_LA" },
    { 5773, "melrose13_lawn", "recshop02_LA" },
    { 5773, "melrose13_lawn", "shopfr03_LA" },
    { 5731, "melrose15_lawn", "2winsmel_law" },
    { 5731, "melrose15_lawn", "melrshut01_law" },
    { 5731, "melrose15_lawn", "melrshut02_law" },
    { 5731, "melrose15_lawn", "melrshut03_law" },
    { 5731, "melrose15_lawn", "melrsign03_LA" },
    { 5731, "melrose15_lawn", "melrsign05_LA" },
    { 5731, "melrose15_lawn", "melryel02_law" },
    { 5731, "melrose15_lawn", "yoyojos_law" },
    { 5737, "melrose16_lawn", "frostwin01_law" },
    { 5737, "melrose16_lawn", "planterbev01_law" },
    { 5737, "melrose16_lawn", "shopdeco06_law" },
    { 5737, "melrose16_lawn", "shopface08_law" },
    { 5737, "melrose16_lawn", "shoptop02_law" },
    { 5709, "melrose17_lawn", "shopface01_law" },
    { 5709, "melrose17_lawn", "shopface02bl_law" },
    { 5709, "melrose17_lawn", "shopface02c_law" },
    { 5709, "melrose17_lawn", "shopface06_law" },
    { 5709, "melrose17_lawn", "shopwin02_law" },
    { 5709, "melrose17_lawn", "shopwin06_law" },
    { 5785, "melrosetr1_lawn", "711doors1" },
    { 5785, "melrosetr1_lawn", "blob1_LAwN" },
    { 5789, "melrosetr_lawn", "melrsign06_LA" },
    { 10281, "michgar", "michelle_car1" },
    { 10281, "michgar", "michelle_car2" },
    { 10281, "michgar", "michelle_car3" },
    { 10281, "michgar", "toolwall2" },
    { 3267, "milbase", "a51_boffstuff2" },
    { 3267, "milbase", "a51_boffstuff4" },
    { 3267, "milbase", "a51_light1" },
    { 3267, "milbase", "CJ_FILLING" },
    { 3267, "milbase", "lightblue_64" },
    { 3267, "milbase", "lightred2_32" },
    { 3267, "milbase", "sam_camobits" },
    { 2985, "minigx", "mini_base" },
    { 3056, "minimex", "kmb_dynamite" },
    { 7630, "miragecasino1", "cparkvgn1_256" },
    { 7630, "miragecasino1", "cparkvgn2_256" },
    { 7630, "miragecasino1", "cparkvgn3_256" },
    { 7630, "miragecasino1", "cparkvgn4_256" },
    { 7630, "miragecasino1", "maxhead4" },
    { 7630, "miragecasino1", "ws_carparknew5" },
    { 7553, "miragecasino2", "miragepillar1_256" },
    { 7553, "miragecasino2", "miragepillar2_256" },
    { 7553, "miragecasino2", "miragesign1_256" },
    { 7553, "miragecasino2", "miragesign2_256" },
    { 7553, "miragecasino2", "miragewall1" },
    { 7553, "miragecasino2", "miragewall2" },
    { 7553, "miragecasino2", "miragewall3" },
    { 7553, "miragecasino2", "miragewall4_256" },
    { 7553, "miragecasino2", "miragewall5_256" },
    { 7553, "miragecasino2", "miragewall6_256" },
    { 7553, "miragecasino2", "visagesign2_256" },
    { 3786, "missiles_sfs", "ws_greyfoam" },
    { 3786, "missiles_sfs", "ws_packingcase1" },
    { 10982, "mission2apts_sfse", "ws_aptwin" },
    { 10982, "mission2apts_sfse", "ws_ed_shop5" },
    { 10982, "mission2apts_sfse", "ws_ed_shop9b" },
    { 10988, "mission2_sfse", "ws_apartmentyello1" },
    { 10988, "mission2_sfse", "ws_apartmentyello2" },
    { 10988, "mission2_sfse", "ws_apartmentyello3" },
    { 10988, "mission2_sfse", "ws_buildblock1a" },
    { 10988, "mission2_sfse", "ws_buildblock1b" },
    { 10988, "mission2_sfse", "ws_fancywallpink" },
    { 10988, "mission2_sfse", "ws_fancywindowpink" },
    { 10988, "mission2_sfse", "ws_shopfront1b" },
    { 10980, "mission3z_sfse", "ws_ed_shop6" },
    { 10981, "mission3_sfse", "ws_buildblock2a" },
    { 10981, "mission3_sfse", "ws_buildblock2b" },
    { 10981, "mission3_sfse", "ws_buildblock2c" },
    { 10981, "mission3_sfse", "ws_classyshop1" },
    { 10981, "mission3_sfse", "ws_ed_shop1" },
    { 10977, "mission_sfse", "ws_apartmentbrown1" },
    { 10977, "mission_sfse", "ws_apartmentbrown2" },
    { 10977, "mission_sfse", "ws_ed_shop8" },
    { 10977, "mission_sfse", "ws_ed_shop8_door" },
    { 1262, "mitraffic", "lamppost" },
    { 1262, "mitraffic", "Tafficlights" },
    { 1952, "mixkb1", "aluminum_1" },
    { 1952, "mixkb1", "chrome_tube2" },
    { 1952, "mixkb1", "chrome_tube3" },
    { 1952, "mixkb1", "deck_rim" },
    { 1952, "mixkb1", "mixer1" },
    { 1952, "mixkb1", "mixer2" },
    { 2967, "mobile93a", "mobile93a" },
    { 2966, "mobile93b", "mobile93b" },
    { 9907, "monlith_sfe", "sf_column1" },
    { 9907, "monlith_sfe", "sf_windos_4" },
    { 9907, "monlith_sfe", "sf_windos_5" },
    { 9907, "monlith_sfe", "sf_windos_6" },
    { 9907, "monlith_sfe", "window5b" },
    { 1692, "moregenroofstuff", "airvent_shadowT_gz" },
    { 1692, "moregenroofstuff", "mast_shadow_t" },
    { 1692, "moregenroofstuff", "skylight_meshed" },
    { 1692, "moregenroofstuff", "skylight_scum" },
    { 1692, "moregenroofstuff", "solar_panel_1" },
    { 3436, "motel01", "vegasfence01_64" },
    { 3436, "motel01", "vegasmotel01_128" },
    { 3436, "motel01", "vegasmotel02_128" },
    { 3436, "motel01", "vegasmotel03_64" },
    { 3436, "motel01", "vegasmoteldoor01_128" },
    { 3436, "motel01", "vegasmotelwind01_128" },
    { 3435, "motel01sign", "vegasmotelsign01_128" },
    { 3435, "motel01sign", "vegasmotelsign02_128" },
    { 3435, "motel01sign", "vegasmotelsign03_128" },
    { 5413, "motel_lae", "crakwindo1_LAe" },
    { 14482, "motel_skuzwin", "motel_curt1" },
    { 10386, "mountainsfs", "grass4dirty" },
    { 10386, "mountainsfs", "ws_stonewall" },
    { 14742, "mp3", "GB_rapposter02" },
    { 14742, "mp3", "GB_rapposter05" },
    { 18056, "mp_diner1", "mp_CJ_CARDBOARD128" },
    { 18056, "mp_diner1", "mp_cj_sheetmetal" },
    { 18056, "mp_diner1", "mp_diner_swing" },
    { 18056, "mp_diner1", "mp_diner_wall" },
    { 18058, "mp_diner2", "mp_diner_count" },
    { 18058, "mp_diner2", "mp_diner_counttop" },
    { 18058, "mp_diner2", "mp_diner_floordirt" },
    { 18058, "mp_diner2", "mp_diner_seats" },
    { 18058, "mp_diner2", "mp_diner_slats" },
    { 18058, "mp_diner2", "mp_diner_table" },
    { 18058, "mp_diner2", "mp_diner_tilewallALT" },
    { 14847, "mp_policesf", "mp_cop_carpet" },
    { 14847, "mp_policesf", "mp_cop_ceilingtile" },
    { 14847, "mp_policesf", "mp_cop_cell" },
    { 14847, "mp_policesf", "mp_cop_floor" },
    { 14847, "mp_policesf", "mp_cop_floor1" },
    { 14847, "mp_policesf", "mp_cop_lectern" },
    { 14847, "mp_policesf", "mp_cop_marble" },
    { 14847, "mp_policesf", "mp_cop_skirt" },
    { 14847, "mp_policesf", "mp_cop_skirting" },
    { 14847, "mp_policesf", "mp_cop_tile" },
    { 14847, "mp_policesf", "mp_cop_vinyl" },
    { 14847, "mp_policesf", "mp_cop_wallpink" },
    { 14847, "mp_policesf", "mp_tank_room" },
    { 14847, "mp_policesf", "mp_tank_roomplain" },
    { 11631, "mp_ranchcut", "CJ_PAINTING20" },
    { 11631, "mp_ranchcut", "CJ_PAINTING22" },
    { 11631, "mp_ranchcut", "CJ_PAINTING6" },
    { 11631, "mp_ranchcut", "Gen_Quallity_HiFi_Side" },
    { 11631, "mp_ranchcut", "mpCJ_Black_metal" },
    { 11631, "mp_ranchcut", "mpCJ_DarkWood" },
    { 11631, "mp_ranchcut", "mpCJ_Deer1" },
    { 11631, "mp_ranchcut", "mpCJ_GALVANISEDn" },
    { 11631, "mp_ranchcut", "mpCJ_HI_FI" },
    { 11631, "mp_ranchcut", "mpcj_speaker2" },
    { 11631, "mp_ranchcut", "mpCJ_SPEAKER4" },
    { 11631, "mp_ranchcut", "mpcj_speaker_6" },
    { 11631, "mp_ranchcut", "mpCJ_WOOD_DARK" },
    { 11631, "mp_ranchcut", "mpkbsofa333c" },
    { 11631, "mp_ranchcut", "mpman_tigr_rug" },
    { 11631, "mp_ranchcut", "mp_torenoshadA" },
    { 1726, "mrk_couches2", "kb_sofa5_256" },
    { 2013, "mrk_kitstuf", "ffrriiddggee__33" },
    { 2013, "mrk_kitstuf", "fridge_3" },
    { 18217, "mtbfencecs_t", "steel256256" },
    { 18217, "mtbfencecs_t", "ws_scaffoldscreen" },
    { 18268, "mtbtrackcs_t", "palmbark128" },
    { 3281, "mtb_banners", "xtreme_prolaps" },
    { 13721, "mulhousclahills", "residentialdoor3_256" },
    { 13673, "mullho03a_lahills", "desegravelgrassroadLA" },
    { 13673, "mullho03a_lahills", "gravelkb2_128" },
    { 13673, "mullho03a_lahills", "sw_wall02" },
    { 13711, "mullho03_lahills", "shadover_law" },
    { 13754, "mullholl_lahills", "redslates64_law" },
    { 9957, "multistory_sfe", "sfe_whitewall" },
    { 3121, "munchyx", "doughunt" },
    { 14735, "newcrak", "ab_rug" },
    { 14735, "newcrak", "ab_wall2" },
    { 14735, "newcrak", "AH_ArchitraveM" },
    { 14735, "newcrak", "AH_BLINDSM" },
    { 14735, "newcrak", "AH_flrwllM" },
    { 14735, "newcrak", "AH_skirtM" },
    { 14735, "newcrak", "AH_skirtscum" },
    { 14735, "newcrak", "AH_stripwallcln" },
    { 14735, "newcrak", "carp21S" },
    { 14735, "newcrak", "carp23S" },
    { 14735, "newcrak", "carpet-tile" },
    { 14735, "newcrak", "kbdirty_wall1" },
    { 11388, "newhubgrg1_sfse", "ws_hubbeams1" },
    { 11388, "newhubgrg1_sfse", "ws_hubbeams2" },
    { 1245, "newramp", "craneblnk_128" },
    { 1285, "newstand", "newstandnew256" },
    { 1285, "newstand", "newstandnew256back" },
    { 9223, "newstuff_sfn", "carlot1_LAn" },
    { 9223, "newstuff_sfn", "cm_clothing ad1" },
    { 9223, "newstuff_sfn", "oldflowerbed" },
    { 9223, "newstuff_sfn", "sl_preswallbot01" },
    { 1982, "new_cabinets", "cabinet_grill" },
    { 1982, "new_cabinets", "cabinet_hi1" },
    { 1982, "new_cabinets", "cabinet_hi1b" },
    { 1982, "new_cabinets", "cabinet_hi3" },
    { 1982, "new_cabinets", "cabinet_hilite" },
    { 1982, "new_cabinets", "meat1" },
    { 1982, "new_cabinets", "meat2" },
    { 1982, "new_cabinets", "shelf4" },
    { 1983, "new_cabinets2", "cereal2" },
    { 1983, "new_cabinets2", "cereal3" },
    { 1983, "new_cabinets2", "cereal4" },
    { 1983, "new_cabinets2", "powder1_1" },
    { 1983, "new_cabinets2", "powder1_2" },
    { 1983, "new_cabinets2", "shop_shelfnu2" },
    { 1983, "new_cabinets2", "shop_shelfnu3" },
    { 1983, "new_cabinets2", "shop_shelfnu4" },
    { 1983, "new_cabinets2", "shop_shelfnu5" },
    { 1983, "new_cabinets2", "sh_tins1" },
    { 1983, "new_cabinets2", "sh_tins2" },
    { 1981, "new_cabinets3", "butter_etc2" },
    { 1981, "new_cabinets3", "jarsss1" },
    { 1981, "new_cabinets3", "jarsss2" },
    { 1981, "new_cabinets3", "sauce1" },
    { 1981, "new_cabinets3", "shop_shelfnu6" },
    { 4720, "nightlights1_lan2", "sl_dtwinlights1" },
    { 4720, "nightlights1_lan2", "sl_dtwinlights3" },
    { 11410, "nightlights_sfse", "sfnitewindow_alfa" },
    { 5661, "nightlts_lae", "sl_dtwinlights2" },
    { 9932, "nitelites", "monlith_win_tex" },
    { 9932, "nitelites", "sfnitewindows" },
    { 17954, "nitelites_lae2", "nitwin01_LA" },
    { 4212, "nitewin_lan", "neonwin1" },
    { 8431, "nucarpark", "nucarpark01_128" },
    { 8431, "nucarpark", "nucarpark02_128" },
    { 8431, "nucarpark", "nucarpark03_128" },
    { 8431, "nucarpark", "nucarpark04_64" },
    { 8710, "nuhotel01", "nuhotel01_128" },
    { 8710, "nuhotel01", "nuhotel02_128" },
    { 8710, "nuhotel01", "nuhotel03_128" },
    { 8710, "nuhotel01", "nuhotel04_128" },
    { 8710, "nuhotel01", "nuhotel05_64" },
    { 8710, "nuhotel01", "nuhotel07_128" },
    { 8710, "nuhotel01", "nuhoteldoor01_128" },
    { 8710, "nuhotel01", "nuhoteldoor02_128" },
    { 8710, "nuhotel01", "nuhoteldoor03_128" },
    { 10350, "oc_flats_gnd_sfs", "ws_screenedfence_big" },
    { 10350, "oc_flats_gnd_sfs", "ws_stucco_red_1" },
    { 10350, "oc_flats_gnd_sfs", "ws_stucco_yello_1" },
    { 10350, "oc_flats_gnd_sfs", "ws_woodfence1" },
    { 1637, "od_beachstuff", "beachtowels" },
    { 1637, "od_beachstuff", "beachwood" },
    { 1637, "od_beachstuff", "beach_hut_128" },
    { 1637, "od_beachstuff", "lotion" },
    { 1637, "od_beachstuff", "loungertubes" },
    { 1637, "od_beachstuff", "lounger_matress" },
    { 1637, "od_beachstuff", "mbhutdr3" },
    { 1637, "od_beachstuff", "mbhutdr4" },
    { 1637, "od_beachstuff", "mbhutgre" },
    { 1637, "od_beachstuff", "mbhutsig" },
    { 1637, "od_beachstuff", "mbhutwin" },
    { 1637, "od_beachstuff", "mbhutyel" },
    { 1637, "od_beachstuff", "vbnet" },
    { 11326, "oldgarage_sfse", "ws_corr_2_plaintiled" },
    { 11326, "oldgarage_sfse", "ws_fuckedwin1" },
    { 11326, "oldgarage_sfse", "ws_xenon_used" },
    { 4850, "oldshops_las", "lasmulap7" },
    { 4850, "oldshops_las", "sanpedmark1" },
    { 4850, "oldshops_las", "sanpedmark2" },
    { 4850, "oldshops_las", "sanpedmark3" },
    { 4850, "oldshops_las", "sanpedmark4" },
    { 4850, "oldshops_las", "sanpedmark5" },
    { 4850, "oldshops_las", "snpedbutshp1" },
    { 4850, "oldshops_las", "snpedmat1" },
    { 4850, "oldshops_las", "snpedmat3" },
    { 4850, "oldshops_las", "snpedmat4" },
    { 4850, "oldshops_las", "snpedmat9" },
    { 16051, "oldwest", "snakefarmsign" },
    { 16051, "oldwest", "sw_hedstones" },
    { 8591, "olympic01", "nudedaily_256" },
    { 8591, "olympic01", "olympic01_128" },
    { 8591, "olympic01", "olympic02_128" },
    { 8591, "olympic01", "olympic03_64" },
    { 8591, "olympic01", "olympic05_64" },
    { 8591, "olympic01", "olympic06_64" },
    { 8591, "olympic01", "strippers1_256" },
    { 8591, "olympic01", "vgscityhwal1" },
    { 2754, "otb_machine", "ab_shinyPanel" },
    { 2754, "otb_machine", "lift4" },
    { 2754, "otb_machine", "mp_CJ_GALVANISED" },
    { 10249, "ottos2_sfw", "ottos_pics_sfe" },
    { 10249, "ottos2_sfw", "pinebranch1" },
    { 3857, "ottos_glass", "carshowroom1" },
    { 9953, "ottos_sfw", "carshowroom2" },
    { 9953, "ottos_sfw", "carshowroom3" },
    { 9953, "ottos_sfw", "carshowroomfloor" },
    { 9953, "ottos_sfw", "carshowroomrceiling" },
    { 13602, "ovalsurround", "dresswall1_256" },
    { 10166, "p69_rocks", "sfe_rock1" },
    { 10166, "p69_rocks", "sfe_rock2" },
    { 10166, "p69_rocks", "sfe_rock3" },
    { 14593, "papaerchaseoffice", "ab_blinds" },
    { 14593, "papaerchaseoffice", "ab_payphone1" },
    { 14593, "papaerchaseoffice", "ab_SkirtingGrey" },
    { 14593, "papaerchaseoffice", "glassPartition" },
    { 14593, "papaerchaseoffice", "sign_noCamera" },
    { 14593, "papaerchaseoffice", "sign_outOfOrder" },
    { 14593, "papaerchaseoffice", "sign_planDept" },
    { 14593, "papaerchaseoffice", "sign_restroom" },
    { 14593, "papaerchaseoffice", "spad_tile2_64" },
    { 14593, "papaerchaseoffice", "wall_stone3_256" },
    { 14593, "papaerchaseoffice", "wall_stone6_256" },
    { 14599, "paperchasebits", "ab_blueprint1" },
    { 14599, "paperchasebits", "ab_blueprint2" },
    { 14599, "paperchasebits", "ab_blueprint3" },
    { 14599, "paperchasebits", "ab_blueprint4" },
    { 14599, "paperchasebits", "sign_firstaid" },
    { 14600, "paperchase_bits2", "ab_docbox" },
    { 14600, "paperchase_bits2", "ab_medbag" },
    { 14600, "paperchase_bits2", "ab_medbottle" },
    { 14600, "paperchase_bits2", "ab_paperoll" },
    { 14600, "paperchase_bits2", "ab_plasticBin" },
    { 3060, "paracx", "parachute_e" },
    { 3060, "paracx", "ripcord" },
    { 3060, "paracx", "strings" },
    { 3026, "parapakx", "parapak" },
    { 5532, "paynspray_lae", "bigblue1" },
    { 5532, "paynspray_lae", "bigblue2" },
    { 5532, "paynspray_lae", "sprysig2" },
    { 14537, "pdomebar", "ab_weeLite" },
    { 14537, "pdomebar", "club_beer1SFw" },
    { 14537, "pdomebar", "club_bottles1_SFW" },
    { 14537, "pdomebar", "club_floor2_sfwTEST" },
    { 14537, "pdomebar", "club_wood1_SFw" },
    { 14539, "pdomes_logo", "pdomes_jizzys" },
    { 14539, "pdomes_logo", "pdomes_OM" },
    { 14539, "pdomes_logo", "pdomes_PLEA" },
    { 14539, "pdomes_logo", "pdomes_SURD" },
    { 14540, "pdome_extras", "ab_lipSofa" },
    { 14540, "pdome_extras", "pdomes_flexLite" },
    { 3985, "pershingsq", "hotelfig2_LAn" },
    { 3985, "pershingsq", "la_brownhibuildc" },
    { 3985, "pershingsq", "posh_eagle9_sfe" },
    { 1244, "petrol", "pumpdial" },
    { 2702, "pick_up", "CJ_BREAD" },
    { 2702, "pick_up", "cj_burg_top" },
    { 2702, "pick_up", "cj_fambly" },
    { 2702, "pick_up", "cj_fambly2" },
    { 2702, "pick_up", "CJ_red_FELT" },
    { 2702, "pick_up", "lwface08" },
    { 2702, "pick_up", "lwstrap05" },
    { 2266, "picture_frame", "CJ_PAINTING1" },
    { 2266, "picture_frame", "CJ_PAINTING10" },
    { 2266, "picture_frame", "CJ_PAINTING11" },
    { 2266, "picture_frame", "CJ_PAINTING14" },
    { 2266, "picture_frame", "CJ_PAINTING16" },
    { 2266, "picture_frame", "CJ_PAINTING17" },
    { 2266, "picture_frame", "CJ_PAINTING18" },
    { 2266, "picture_frame", "CJ_PAINTING19" },
    { 2266, "picture_frame", "CJ_PAINTING21" },
    { 2266, "picture_frame", "CJ_PAINTING23" },
    { 2266, "picture_frame", "CJ_PAINTING28" },
    { 2266, "picture_frame", "CJ_PAINTING29" },
    { 2266, "picture_frame", "CJ_PAINTING3" },
    { 2266, "picture_frame", "CJ_PAINTING30" },
    { 2266, "picture_frame", "CJ_PAINTING31" },
    { 2266, "picture_frame", "CJ_PAINTING32" },
    { 2266, "picture_frame", "CJ_PAINTING33" },
    { 2266, "picture_frame", "CJ_PAINTING34" },
    { 2266, "picture_frame", "CJ_PAINTING35" },
    { 2266, "picture_frame", "CJ_PAINTING36" },
    { 2266, "picture_frame", "CJ_PAINTING37" },
    { 2266, "picture_frame", "CJ_PAINTING5" },
    { 2266, "picture_frame", "CJ_PAINTING7" },
    { 2254, "picture_frame_clip", "CJ_PAINTING12" },
    { 2254, "picture_frame_clip", "CJ_PAINTING15" },
    { 2254, "picture_frame_clip", "CJ_PAINTING2" },
    { 2254, "picture_frame_clip", "CJ_PAINTING24" },
    { 2254, "picture_frame_clip", "CJ_PAINTING26" },
    { 2254, "picture_frame_clip", "CJ_PAINTING27" },
    { 2254, "picture_frame_clip", "CJ_PAINTING4" },
    { 9903, "pier69", "pier69_blue1" },
    { 9903, "pier69", "pier69_blue2" },
    { 9903, "pier69", "pier69_blue3" },
    { 9903, "pier69", "pier69_blue4" },
    { 9903, "pier69", "pier69_blue5" },
    { 9903, "pier69", "pier69_blue6" },
    { 9903, "pier69", "pier69_blue7" },
    { 9903, "pier69", "pier69_brown1" },
    { 9903, "pier69", "pier69_brown2" },
    { 9903, "pier69", "pier69_brown3" },
    { 9903, "pier69", "pier69_brown4" },
    { 9903, "pier69", "pier69_brown5" },
    { 9903, "pier69", "pier69_brown6" },
    { 9903, "pier69", "pier69_brown7" },
    { 9903, "pier69", "pier69_catwalkside" },
    { 9903, "pier69", "pier69_sign2" },
    { 9903, "pier69", "rooftop_gz4" },
    { 6448, "piera_law2", "beachpiersign1_256" },
    { 6448, "piera_law2", "Gen_Crain_Mast" },
    { 6283, "pierb_law2", "brownstar_law" },
    { 6283, "pierb_law2", "pierbild02_law" },
    { 6283, "pierb_law2", "pierbild03_law" },
    { 6283, "pierb_law2", "pierbild05_law" },
    { 6283, "pierb_law2", "pierbild06_law" },
    { 6283, "pierb_law2", "pierbild07_law" },
    { 6283, "pierb_law2", "pierbild08_law" },
    { 6283, "pierb_law2", "pierends_law" },
    { 6283, "pierb_law2", "pierfenc_LAw2" },
    { 6283, "pierb_law2", "pierlegbot_law" },
    { 6283, "pierb_law2", "pierlegtop_law" },
    { 6283, "pierb_law2", "sancorn5" },
    { 6283, "pierb_law2", "sancorn6" },
    { 6283, "pierb_law2", "sancorn7" },
    { 6283, "pierb_law2", "sanice1" },
    { 6283, "pierb_law2", "sanice2" },
    { 6283, "pierb_law2", "sanice3" },
    { 6283, "pierb_law2", "sanice4" },
    { 6283, "pierb_law2", "sanice5" },
    { 6283, "pierb_law2", "sanpiz4" },
    { 6283, "pierb_law2", "santall8s1" },
    { 6283, "pierb_law2", "sanwel5" },
    { 6283, "pierb_law2", "sanwel6" },
    { 6283, "pierb_law2", "sanwel7" },
    { 6283, "pierb_law2", "wilsd_02_la" },
    { 6287, "pierc_law2", "beachawning1_256" },
    { 6287, "pierc_law2", "beachwall1_256" },
    { 6287, "pierc_law2", "beachwall2_256" },
    { 6287, "pierc_law2", "beachwall5_256" },
    { 6287, "pierc_law2", "beachwall6_256" },
    { 6287, "pierc_law2", "beachwall7_256" },
    { 6287, "pierc_law2", "blueroof_128" },
    { 6287, "pierc_law2", "pierbild09_law" },
    { 6287, "pierc_law2", "pierwin02_law" },
    { 6287, "pierc_law2", "sancorn1" },
    { 6287, "pierc_law2", "sancorn2" },
    { 6287, "pierc_law2", "sancorn3" },
    { 6287, "pierc_law2", "sancorn4" },
    { 6287, "pierc_law2", "sanpiz3" },
    { 6287, "pierc_law2", "sanpiz5" },
    { 6287, "pierc_law2", "shoptop05_law" },
    { 6287, "pierc_law2", "stormdrain3b_nt" },
    { 6188, "pier_law", "pierlegTEST" },
    { 6188, "pier_law", "piermetalt_LAW" },
    { 6188, "pier_law", "pierside_LAW" },
    { 9949, "pier_sfe", "pierhead1_sfe" },
    { 9949, "pier_sfe", "pierhead2_sfe" },
    { 9949, "pier_sfe", "pierhead3_sfe" },
    { 9949, "pier_sfe", "pierhead4_sfe" },
    { 10621, "pinkcarpark_sfs", "vegparking2_256" },
    { 10621, "pinkcarpark_sfs", "ws_fmaparking" },
    { 8421, "pirateland", "pirates01_128" },
    { 8421, "pirateland", "pirates02_128" },
    { 8421, "pirateland", "pirates03_64" },
    { 8421, "pirateland", "pirates04_64" },
    { 8421, "pirateland", "pirates05_64" },
    { 8421, "pirateland", "tislandbanister" },
    { 8421, "pirateland", "tislandledge01_64" },
    { 8421, "pirateland", "tislandledge03_128" },
    { 8421, "pirateland", "tislndrock01_128" },
    { 8421, "pirateland", "tislndrock02_128" },
    { 8421, "pirateland", "tislndskullrock_256" },
    { 8423, "pirateship01", "old_carpet_dvdr" },
    { 8423, "pirateship01", "pirates07_128" },
    { 8423, "pirateship01", "tislandfront01_128" },
    { 8423, "pirateship01", "tislandfront02_128" },
    { 8423, "pirateship01", "tislandfront03_128" },
    { 8423, "pirateship01", "tislandshpback_256" },
    { 8423, "pirateship01", "tislandwall01_128" },
    { 8423, "pirateship01", "tislandwall02_128" },
    { 8423, "pirateship01", "tislandwall04_64" },
    { 8423, "pirateship01", "tislandwall05_128" },
    { 8423, "pirateship01", "tislandwdbox01_128" },
    { 8423, "pirateship01", "tislandwdbox02_64" },
    { 8423, "pirateship01", "tislndshpmast" },
    { 2635, "pizza_furn", "CJ_TART_TABLE" },
    { 2218, "pizza_tray", "pboxside" },
    { 2218, "pizza_tray", "pfries" },
    { 2218, "pizza_tray", "pizzaslice" },
    { 2218, "pizza_tray", "tray_cb" },
    { 2247, "plants_galss", "CJ_willow" },
    { 2246, "plants_office", "cooker3" },
    { 4562, "plaza1_lan2", "sl_blokpave1" },
    { 14533, "pleas_dome", "ab_carpethexi" },
    { 14533, "pleas_dome", "ab_clubloungewall" },
    { 14533, "pleas_dome", "ab_litepetal" },
    { 14533, "pleas_dome", "ab_metaldisc" },
    { 14533, "pleas_dome", "ab_velvor" },
    { 14533, "pleas_dome", "club_floor1_sfwTEST" },
    { 14533, "pleas_dome", "club_metal2_sfw" },
    { 14533, "pleas_dome", "club_wall4_SFw" },
    { 14533, "pleas_dome", "club_zeb_SFW1" },
    { 14533, "pleas_dome", "club_zeb_SFW2" },
    { 14533, "pleas_dome", "mallfence_law" },
    { 14533, "pleas_dome", "ornate_ceiling1_sfw" },
    { 14533, "pleas_dome", "pdome_arch1" },
    { 14533, "pleas_dome", "pdome_wall1" },
    { 14533, "pleas_dome", "scaffold_stuff" },
    { 14533, "pleas_dome", "sfw_clublight1" },
    { 14533, "pleas_dome", "timber_gz" },
    { 14533, "pleas_dome", "toaty_lite_SFW" },
    { 14533, "pleas_dome", "ws_corner_iron1" },
    { 9900, "pointysfe", "pointy_sfe" },
    { 9900, "pointysfe", "transam_2_sfe" },
    { 9900, "pointysfe", "ws_trans_block" },
    { 2602, "police_props_un", "GUS" },
    { 2965, "pool_blsx", "poolballsa1" },
    { 2965, "pool_blsx", "poolballsa2" },
    { 2965, "pool_blsx", "poolballscue" },
    { 1684, "portakabin", "ws_portacabin1" },
    { 1684, "portakabin", "ws_portacabin2" },
    { 1684, "portakabin", "ws_portacabin3" },
    { 9918, "posh2_sfe", "poshsfe1" },
    { 9918, "posh2_sfe", "poshsfe2" },
    { 9918, "posh2_sfe", "poshsfe3" },
    { 10049, "posh_sfe", "posh_eagle5_sfe" },
    { 10049, "posh_sfe", "posh_eagle6_sfe" },
    { 10049, "posh_sfe", "posh_eagle7_sfe" },
    { 10049, "posh_sfe", "ws_alley2_128_plain" },
    { 2984, "potax", "chemtoilet1256" },
    { 2984, "potax", "chemtoilet2256" },
    { 9259, "presidio01_sfn", "sl_clayroof01" },
    { 9259, "presidio01_sfn", "sl_presdoor01" },
    { 9259, "presidio01_sfn", "sl_presdoor02" },
    { 9259, "presidio01_sfn", "sl_presroofedg01" },
    { 9259, "presidio01_sfn", "sl_preswin04" },
    { 9259, "presidio01_sfn", "sl_preswin06" },
    { 9259, "presidio01_sfn", "sl_preswindbl01" },
    { 9259, "presidio01_sfn", "sl_whitewood01" },
    { 9259, "presidio01_sfn", "stainwin_law" },
    { 9259, "presidio01_sfn", "yelloconc_LA" },
    { 3262, "privatesign", "sign_tresspass1" },
    { 3262, "privatesign", "sign_tresspass2" },
    { 3262, "privatesign", "sw_hairpinL" },
    { 3262, "privatesign", "sw_hairpinR" },
    { 2670, "proc_rub", "CJ_CERT_1" },
    { 2670, "proc_rub", "CJ_CERT_2" },
    { 2670, "proc_rub", "CJ_CERT_3" },
    { 2670, "proc_rub", "CJ_CERT_4" },
    { 2670, "proc_rub", "CJ_FAG_BUT" },
    { 2670, "proc_rub", "sprunk2dirty" },
    { 3661, "projects_la", "ws_boxhouse_wins2" },
    { 1664, "propbarstuff", "kb_vodka_64_256" },
    { 1985, "punchbag2", "punchbag2" },
    { 8395, "pyramid", "luxorwindow01_128" },
    { 3049, "qrydrx", "Was_scrpyd_barbwire" },
    { 3049, "qrydrx", "ws_corr_1_red" },
    { 3214, "quarry", "lasjmflood3" },
    { 3214, "quarry", "Was_swr_trolleycage" },
    { 10628, "queens1_sfs", "ws_cinemasign1" },
    { 10628, "queens1_sfs", "ws_fancyshop1" },
    { 10628, "queens1_sfs", "ws_fancyshop1b" },
    { 10628, "queens1_sfs", "ws_fancyshop1c" },
    { 10628, "queens1_sfs", "ws_fancyshop1e" },
    { 10628, "queens1_sfs", "ws_lights_in_marble" },
    { 10628, "queens1_sfs", "ws_queens1" },
    { 10626, "queens2_sfs", "ws_apartmentmankyblue2" },
    { 10626, "queens2_sfs", "ws_apartmentmankyblue3" },
    { 10626, "queens2_sfs", "ws_apartmentmankygreen3" },
    { 10626, "queens2_sfs", "ws_apartmentmankypeach2" },
    { 10626, "queens2_sfs", "ws_apartmentmankypeach3" },
    { 10626, "queens2_sfs", "ws_awning_plum" },
    { 10626, "queens2_sfs", "WS_barberspole" },
    { 10626, "queens2_sfs", "ws_beenflick1" },
    { 10626, "queens2_sfs", "ws_beenflick2" },
    { 10626, "queens2_sfs", "ws_dirty_awning2b" },
    { 10626, "queens2_sfs", "WS_ED_shop3b" },
    { 10626, "queens2_sfs", "WS_ED_shop3c" },
    { 10626, "queens2_sfs", "ws_gazeglasses" },
    { 10626, "queens2_sfs", "ws_lesbeans" },
    { 10626, "queens2_sfs", "ws_newvicapt_blu" },
    { 10626, "queens2_sfs", "ws_newvicapt_blu2" },
    { 10626, "queens2_sfs", "ws_newvicapt_blu3" },
    { 10626, "queens2_sfs", "ws_newvicapt_pnk" },
    { 10626, "queens2_sfs", "ws_newvicapt_pnk_2" },
    { 10626, "queens2_sfs", "ws_newvicapt_pnk_3" },
    { 10626, "queens2_sfs", "ws_plainshop" },
    { 10631, "queensammo_sfs", "ammu_boots" },
    { 10631, "queensammo_sfs", "ammu_camo1" },
    { 10631, "queensammo_sfs", "CJ_SUB_DOORS" },
    { 10631, "queensammo_sfs", "ws_ammu-posh" },
    { 11252, "railbridge_sfse", "ws_goldengate5bnoalpha" },
    { 5394, "railtracklae", "trainground2" },
    { 17283, "railwaycuntw", "grasstype10_rail" },
    { 4860, "railway_las", "lasjmroof" },
    { 4860, "railway_las", "lasunion2" },
    { 4860, "railway_las", "lasunion5" },
    { 4860, "railway_las", "lasunion7" },
    { 4860, "railway_las", "railplatformwall" },
    { 4860, "railway_las", "sjmscorclawn3" },
    { 1660, "ramp2", "chemsign2_64" },
    { 18036, "range_main", "gun_galss1" },
    { 18036, "range_main", "gun_xtra6" },
    { 18036, "range_main", "range_mainlightingmap" },
    { 1636, "rcbomb", "rcbomb" },
    { 3947, "rczero_track", "grassdeep1blnd" },
    { 2464, "rc_shop_acc", "CJ_BIPLANE1" },
    { 2464, "rc_shop_acc", "CJ_RC_1" },
    { 2464, "rc_shop_acc", "CJ_RC_13" },
    { 2464, "rc_shop_acc", "CJ_RC_2" },
    { 2464, "rc_shop_acc", "CJ_RC_3" },
    { 2464, "rc_shop_acc", "CJ_RC_4" },
    { 2464, "rc_shop_acc", "CJ_RC_5" },
    { 2464, "rc_shop_acc", "CJ_RC_6" },
    { 2464, "rc_shop_acc", "CJ_RC_7" },
    { 2464, "rc_shop_acc", "CJ_TRAIN_SET" },
    { 2464, "rc_shop_acc", "CJ_WING" },
    { 2362, "rc_shop_figure", "CJ_RC_10" },
    { 2362, "rc_shop_figure", "CJ_RC_11" },
    { 2362, "rc_shop_figure", "CJ_RC_12" },
    { 2362, "rc_shop_figure", "CJ_RC_9" },
    { 2487, "rc_shop_hanger", "CJ_kite" },
    { 2487, "rc_shop_hanger", "CJ_kite2" },
    { 2487, "rc_shop_hanger", "CJ_kite3" },
    { 2487, "rc_shop_hanger", "CJ_kite4" },
    { 2484, "rc_shop_toy", "CJ_SAIL_1" },
    { 2484, "rc_shop_toy", "CJ_SAIL_2" },
    { 2471, "rc_shop_trains", "CJ_RC_14" },
    { 2471, "rc_shop_trains", "CJ_RC_15" },
    { 2471, "rc_shop_trains", "CJ_trains" },
    { 1960, "record1", "record1" },
    { 1960, "record1", "record2" },
    { 1960, "record1", "record3" },
    { 3255, "refinery", "des_refpipes" },
    { 3255, "refinery", "des_reftower1" },
    { 8437, "residential01", "residential01_256" },
    { 8437, "residential01", "residential02_256" },
    { 8437, "residential01", "residential03_256" },
    { 8437, "residential01", "residentialsign01_256" },
    { 8433, "residnce01", "residence01_256" },
    { 8433, "residnce01", "residence02_256" },
    { 8433, "residnce01", "residence03_128" },
    { 8433, "residnce01", "residence04_128" },
    { 8433, "residnce01", "residence05_256" },
    { 8433, "residnce01", "residence06_128" },
    { 13715, "richman02_lahills", "monobloc_256128" },
    { 13626, "road", "sidetrack" },
    { 13626, "road", "trackroadside" },
    { 10294, "road2sfe", "sf_pave3" },
    { 10294, "road2sfe", "sf_pave4" },
    { 10294, "road2sfe", "sf_pave5" },
    { 10820, "roadbridge_sfse", "drain" },
    { 1346, "roadside", "CJ_PHONEBOX1" },
    { 1346, "roadside", "CJ_phoneboxmiami" },
    { 1346, "roadside", "CJ_PHONESEXADD" },
    { 13713, "roadslahills", "roadnew4blend_256" },
    { 13323, "roads_cunte", "paveb256" },
    { 13717, "roads_lahills", "pavebsand256blueblend" },
    { 13717, "roads_lahills", "snpedtest1blend" },
    { 6035, "roads_law", "crossing2_law" },
    { 5703, "roads_lawn", "sidewalk4_LAe" },
    { 5703, "roads_lawn", "starpaveb_law" },
    { 5703, "roads_lawn", "starpave_law" },
    { 5703, "roads_lawn", "starpave_lawblend" },
    { 13676, "roads_tunnellahills", "tunwill1law2" },
    { 9743, "rock_coastsfw", "cst_rocksea_sfw" },
    { 9743, "rock_coastsfw", "cst_rock_undersea_sfw" },
    { 6332, "rodeo01_law2", "arodeo1sj" },
    { 6332, "rodeo01_law2", "bevhot01b_law" },
    { 6332, "rodeo01_law2", "bevhot01_law" },
    { 6332, "rodeo01_law2", "ceaserpillar01_256" },
    { 6332, "rodeo01_law2", "clothes01_128" },
    { 6332, "rodeo01_law2", "glassentrace2" },
    { 6332, "rodeo01_law2", "prada_256" },
    { 6332, "rodeo01_law2", "rodeowind3" },
    { 6332, "rodeo01_law2", "rodesign01_LA" },
    { 6332, "rodeo01_law2", "rodesign02_LA" },
    { 6332, "rodeo01_law2", "rodwall01_LAw2" },
    { 6332, "rodeo01_law2", "rodwall02_LAw2" },
    { 6332, "rodeo01_law2", "rodwall04_LAw2" },
    { 6332, "rodeo01_law2", "rodwall05_LAw2" },
    { 6332, "rodeo01_law2", "rodwall06_LAw2" },
    { 6332, "rodeo01_law2", "rodwall07_LAw2" },
    { 6332, "rodeo01_law2", "rodwall08_LAw2" },
    { 6332, "rodeo01_law2", "rodwall09_LAw2" },
    { 6332, "rodeo01_law2", "rodwall10_LAw2" },
    { 6332, "rodeo01_law2", "shopface05b_law" },
    { 6332, "rodeo01_law2", "shopface05c_law" },
    { 6351, "rodeo02_law2", "bevhiwin_01" },
    { 6351, "rodeo02_law2", "dirtwall128" },
    { 6351, "rodeo02_law2", "helmutwall1_LAw" },
    { 6351, "rodeo02_law2", "hollywall02_law" },
    { 6351, "rodeo02_law2", "oranconc01_LA" },
    { 6351, "rodeo02_law2", "ortilwall_LAw" },
    { 6351, "rodeo02_law2", "prolsign01_LA" },
    { 6351, "rodeo02_law2", "rodesign03_LA" },
    { 6351, "rodeo02_law2", "woodboards1" },
    { 6341, "rodeo03_law2", "century01_LA" },
    { 6341, "rodeo03_law2", "sl_hirisergrnconc" },
    { 6344, "rodeo04_law2", "golf_hedge1" },
    { 6340, "rodeo05_law2", "airportwind04" },
    { 6340, "rodeo05_law2", "badmarb2_LAn" },
    { 6340, "rodeo05_law2", "citywall6" },
    { 6340, "rodeo05_law2", "gnocchiston_LA" },
    { 6340, "rodeo05_law2", "rodeowin02" },
    { 6340, "rodeo05_law2", "siliconvalleywins1" },
    { 2992, "roulx", "roulette_glow" },
    { 3074, "runwayx", "kb_bckdrp" },
    { 14744, "rybath", "AH_rywood" },
    { 14744, "rybath", "tiletop" },
    { 3694, "ryderholes", "ryder_mud" },
    { 3694, "ryderholes", "ryd_holes" },
    { 14743, "ryhall", "AH_ryskirt" },
    { 14743, "ryhall", "GB_midbarand" },
    { 14746, "rylounge", "AH_rykitiles" },
    { 14745, "rystuff", "mp_apt1_bathfloor" },
    { 14745, "rystuff", "mp_apt1_bathwall" },
    { 14745, "rystuff", "mp_apt1_bathwall1" },
    { 14745, "rystuff", "mp_apt1_sofatest" },
    { 14745, "rystuff", "mp_CJ_bottle" },
    { 14745, "rystuff", "mp_CJ_bottle2" },
    { 14745, "rystuff", "mp_CJ_CHROME2" },
    { 14745, "rystuff", "mp_CJ_FILLIMENT" },
    { 14745, "rystuff", "mp_CJ_HI_FI" },
    { 14740, "rywins", "mp_CJ_WOODDOOR2" },
    { 3884, "samsite_sfxrf", "sam_camo-navy" },
    { 3884, "samsite_sfxrf", "sam_camobits-navy" },
    { 3717, "sanclifbal1_lax", "glasfenc1_LA" },
    { 3717, "sanclifbal1_lax", "sanmonwin01" },
    { 3717, "sanclifbal1_lax", "whiteconc01" },
    { 3717, "sanclifbal1_lax", "yelloconcW_LA" },
    { 6388, "sancliff02_law2", "oranconcwin_LA" },
    { 6390, "sancliff_law2", "bluepat_LAw2" },
    { 6390, "sancliff_law2", "pharmacy1_1256" },
    { 6390, "sancliff_law2", "windblind_law" },
    { 1610, "sandcastle", "whitesand_256" },
    { 3783, "sanpedh22_1x", "snpdhus3" },
    { 3588, "sanpedhse_1x", "ctdoon1_LAS" },
    { 3588, "sanpedhse_1x", "lasmulap4" },
    { 3588, "sanpedhse_1x", "lasmulap5" },
    { 3588, "sanpedhse_1x", "laspedhus8" },
    { 3588, "sanpedhse_1x", "laspedhus9" },
    { 3588, "sanpedhse_1x", "laspedhus91" },
    { 3588, "sanpedhse_1x", "snpedflatt2" },
    { 3588, "sanpedhse_1x", "snpedflatt7" },
    { 6294, "santamonhus", "pierbuild10b_law" },
    { 6294, "santamonhus", "pierbuild11b_law" },
    { 6294, "santamonhus", "pierbuild11c_law" },
    { 6294, "santamonhus", "pierbuild11d_law" },
    { 6294, "santamonhus", "pierbuild11_law" },
    { 6294, "santamonhus", "pierhouse4_law" },
    { 6294, "santamonhus", "pierwall04_law" },
    { 6286, "santamonhus1", "fivewins_law" },
    { 6286, "santamonhus1", "lasmulap1" },
    { 6286, "santamonhus1", "lasmulap2" },
    { 6286, "santamonhus1", "lasmulap3" },
    { 6286, "santamonhus1", "pierbuild9_law" },
    { 6286, "santamonhus1", "pierwin08c_law" },
    { 6286, "santamonhus1", "pierwin09b_law" },
    { 6286, "santamonhus1", "pierwin09_law" },
    { 6286, "santamonhus1", "pierwin9_law" },
    { 6281, "santamonicalaw2", "asanwall1" },
    { 6280, "santamonicalaw2a", "asanmonstat1" },
    { 6280, "santamonicalaw2a", "sandypath_law" },
    { 6296, "santamopollaw2", "avenpol1" },
    { 6296, "santamopollaw2", "avenpol2" },
    { 6296, "santamopollaw2", "avenpol3" },
    { 6042, "santavenice3", "concretebig3_256128" },
    { 6042, "santavenice3", "psychic_law" },
    { 6042, "santavenice3", "venblock01" },
    { 6042, "santavenice3", "venblock01b" },
    { 6042, "santavenice3", "venwalkway_law" },
    { 1595, "satdish", "generatorfront1_256" },
    { 1595, "satdish", "wallwhitetinge256" },
    { 15054, "savesfmid", "AH_blackmar" },
    { 15054, "savesfmid", "AH_flroortile8" },
    { 15054, "savesfmid", "ah_pnwainscot" },
    { 15054, "savesfmid", "AH_walltile5" },
    { 15054, "savesfmid", "AH_wdpanel" },
    { 15054, "savesfmid", "cspornmag" },
    { 18365, "sawmillcs_t", "bricklayerdark_hi64HV" },
    { 18365, "sawmillcs_t", "dirtyframe64HVa" },
    { 18365, "sawmillcs_t", "electricity_64" },
    { 18365, "sawmillcs_t", "inwindow3" },
    { 18365, "sawmillcs_t", "mp_sawmill" },
    { 18365, "sawmillcs_t", "sprinklersign64" },
    { 3867, "scaffolding_sfx", "Gen_Scaffold_Wood" },
    { 10388, "scum2_sfs", "ws_carparkmanky1" },
    { 10388, "scum2_sfs", "ws_carparkmanky2" },
    { 10388, "scum2_sfs", "ws_cobrasign_small" },
    { 10388, "scum2_sfs", "ws_devop_temp" },
    { 18026, "scummy", "CJ_BINC_WIN" },
    { 10969, "scum_sfse", "ws_jaunk_billbd" },
    { 10969, "scum_sfse", "ws_mistys_bar" },
    { 10226, "sfeship1", "sf_shipcomp" },
    { 10226, "sfeship1", "sf_shipcomp2" },
    { 10226, "sfeship1", "sf_ship_door" },
    { 10226, "sfeship1", "sf_ship_generic1" },
    { 10226, "sfeship1", "sf_ship_generic11" },
    { 10226, "sfeship1", "sf_ship_generic12" },
    { 10226, "sfeship1", "sf_ship_generic14" },
    { 10226, "sfeship1", "sf_ship_generic15" },
    { 10226, "sfeship1", "sf_ship_generic16" },
    { 10226, "sfeship1", "sf_ship_generic18" },
    { 10226, "sfeship1", "sf_ship_generic19" },
    { 10226, "sfeship1", "sf_ship_generic20" },
    { 10226, "sfeship1", "sf_ship_generic21" },
    { 10226, "sfeship1", "sf_ship_generic22" },
    { 10226, "sfeship1", "sf_ship_generic23" },
    { 10226, "sfeship1", "sf_ship_generic24" },
    { 10226, "sfeship1", "sf_ship_generic25" },
    { 10226, "sfeship1", "sf_ship_generic27" },
    { 10226, "sfeship1", "sf_ship_generic28" },
    { 10226, "sfeship1", "sf_ship_generic3" },
    { 10226, "sfeship1", "sf_ship_generic4" },
    { 10226, "sfeship1", "sf_ship_generic5" },
    { 10226, "sfeship1", "sf_ship_generic8" },
    { 10226, "sfeship1", "sf_ship_generic9" },
    { 10226, "sfeship1", "sf_ship_handrail" },
    { 10226, "sfeship1", "sf_ship_screen1" },
    { 9906, "sfe_builda", "blindZIP_law" },
    { 9906, "sfe_builda", "deisel_1sfs" },
    { 9906, "sfe_builda", "deisel_3sfs" },
    { 9906, "sfe_builda", "sl_dwntwallvic1" },
    { 9906, "sfe_builda", "sl_dwntwnvic1" },
    { 9906, "sfe_builda", "sl_dwntwnvic2" },
    { 9906, "sfe_builda", "sl_dwntwnvic3" },
    { 9906, "sfe_builda", "sl_dwntwnvic4" },
    { 9906, "sfe_builda", "sl_dwntwnvic5" },
    { 9906, "sfe_builda", "sl_dwntwnvicconc" },
    { 10029, "sfe_copchop", "helipad_base" },
    { 9915, "sfe_park1", "samtue_test" },
    { 9958, "sfe_sub", "sfe_sub_1" },
    { 9958, "sfe_sub", "sfe_sub_2" },
    { 9958, "sfe_sub", "sfe_sub_3" },
    { 10044, "sfe_swank1", "sf_shop1" },
    { 14760, "sfhosemed2", "AH_blucurtain" },
    { 14760, "sfhosemed2", "AH_Ironbal" },
    { 14760, "sfhosemed2", "ah_marcorn1" },
    { 14760, "sfhosemed2", "ah_pnwainscot3" },
    { 14760, "sfhosemed2", "ah_pnwainskt" },
    { 14760, "sfhosemed2", "ah_poshwdflr1" },
    { 14760, "sfhosemed2", "ah_RFPLSTR" },
    { 14760, "sfhosemed2", "AH_walltile2" },
    { 14760, "sfhosemed2", "ah_whtcorn" },
    { 14760, "sfhosemed2", "ah_wpaper5" },
    { 14760, "sfhosemed2", "carp19S" },
    { 14760, "sfhosemed2", "walp40S" },
    { 14757, "sfhsb2bits", "AH_bigcurtains1" },
    { 14757, "sfhsb2bits", "AH_bigcurtains2" },
    { 14754, "sfhsb3", "ah_flrtile1" },
    { 14754, "sfhsb3", "ah_halltiles" },
    { 14754, "sfhsb3", "ah_plnks1" },
    { 14754, "sfhsb3", "ah_pnwainscotbroon" },
    { 14754, "sfhsb3", "ah_skrtmorebroon" },
    { 14754, "sfhsb3", "ah_wpaper10" },
    { 14754, "sfhsb3", "ah_wpaper4" },
    { 14754, "sfhsb3", "ah_wpaper6" },
    { 14748, "sfhsm1", "AH_bartilegreen" },
    { 14748, "sfhsm1", "AH_bigwoodthing" },
    { 14748, "sfhsm1", "AH_orncorn" },
    { 14748, "sfhsm1", "ah_pnwainscot5" },
    { 14748, "sfhsm1", "ah_pnwainscot6" },
    { 14748, "sfhsm1", "AH_windows1" },
    { 14748, "sfhsm1", "carpet3kb" },
    { 14748, "sfhsm1", "diner_wall1" },
    { 14750, "sfhsm2", "ston09S" },
    { 14750, "sfhsm2", "wallpnice06" },
    { 14751, "sfhsm2bits", "AH_redcurtain" },
    { 14759, "sfhsmedium1", "ah_wpaper1" },
    { 14759, "sfhsmedium1", "ah_wpaper3" },
    { 14755, "sfhss2", "ah_pnwainscot12" },
    { 14755, "sfhss2", "ah_rotwindow" },
    { 14755, "sfhss2", "ah_utilbor4" },
    { 14755, "sfhss2", "mcstraps_wall2" },
    { 14758, "sfmansion1", "AH_cornice" },
    { 14758, "sfmansion1", "AH_flroortile6" },
    { 14758, "sfmansion1", "ah_pnwainscot4" },
    { 14758, "sfmansion1", "ah_stainglass" },
    { 9220, "sfn_apart02sfn", "concreteslab" },
    { 9220, "sfn_apart02sfn", "fencewhta256" },
    { 9220, "sfn_apart02sfn", "newindow10" },
    { 9220, "sfn_apart02sfn", "newindow12" },
    { 9220, "sfn_apart02sfn", "newindow6" },
    { 9227, "sfn_caravansfn", "trail_side1" },
    { 9227, "sfn_caravansfn", "trail_vent" },
    { 9227, "sfn_caravansfn", "trail_wall3" },
    { 9227, "sfn_caravansfn", "trail_wall4" },
    { 9227, "sfn_caravansfn", "trail_win" },
    { 9292, "sfn_crashbar", "sfn_crashbar" },
    { 9241, "sfn_helipad", "genwndw01_128" },
    { 9241, "sfn_helipad", "office01_law" },
    { 9361, "sfn_office", "law_gazwhite3" },
    { 9206, "sfn_sfn", "sfncn_rockgrass3" },
    { 9206, "sfn_sfn", "sfncn_rockgrass4" },
    { 9206, "sfn_sfn", "sfn_rockhole" },
    { 10452, "sfsroadshotel", "ws_biffins" },
    { 10452, "sfsroadshotel", "ws_biffinsback" },
    { 9909, "sfvictorian", "gz_sf_door12b" },
    { 9909, "sfvictorian", "GZ_vic7c" },
    { 9909, "sfvictorian", "GZ_vic7d" },
    { 9909, "sfvictorian", "GZ_vic8a" },
    { 9909, "sfvictorian", "steepsign2_SF" },
    { 9909, "sfvictorian", "steepsign_SF" },
    { 9482, "sfw_victemp2", "ws_chinagate" },
    { 9482, "sfw_victemp2", "ws_conc_block2" },
    { 3801, "sfxref", "hangplant1_sf" },
    { 3801, "sfxref", "sfxref_aircon1" },
    { 3801, "sfxref", "sfxref_aircon2" },
    { 3801, "sfxref", "sfxref_aircon3" },
    { 3801, "sfxref", "sfxref_aircon4" },
    { 3801, "sfxref", "sfxref_alarm1" },
    { 3801, "sfxref", "sfxref_alarm2" },
    { 3801, "sfxref", "sfxref_ironthingt1" },
    { 3801, "sfxref", "sfxref_lite1a" },
    { 3801, "sfxref", "sfxref_lite1b" },
    { 3801, "sfxref", "sfxref_lite1d" },
    { 3801, "sfxref", "sfxref_lite2a" },
    { 3801, "sfxref", "sfxref_shadb" },
    { 3801, "sfxref", "windowbox_SF1" },
    { 3801, "sfxref", "windowbox_SF2" },
    { 3448, "shamcpark", "concretewall1_256" },
    { 1608, "shark", "sharky" },
    { 9818, "ship_brijsfw", "blchr_seat2b" },
    { 9818, "ship_brijsfw", "fusebox2_128" },
    { 9818, "ship_brijsfw", "sf_ship_generic10" },
    { 9818, "ship_brijsfw", "sf_ship_generic13" },
    { 9818, "ship_brijsfw", "sf_ship_generic2" },
    { 9818, "ship_brijsfw", "sf_ship_generic29" },
    { 9818, "ship_brijsfw", "ship_greenscreen1" },
    { 9818, "ship_brijsfw", "ship_screen1sfw" },
    { 8432, "shop06_lvs", "vegashops01_256" },
    { 8432, "shop06_lvs", "vegashops02_128" },
    { 8432, "shop06_lvs", "vegashops03_128" },
    { 8507, "shop09", "sidewalkmarket01_128" },
    { 8507, "shop09", "sidewalkmarket02_128" },
    { 5040, "shopliquor_las", "labombshop" },
    { 5040, "shopliquor_las", "las69str4" },
    { 5040, "shopliquor_las", "lasjmbrsig4" },
    { 5040, "shopliquor_las", "lasjmliq1" },
    { 5040, "shopliquor_las", "lasjmliq2" },
    { 5040, "shopliquor_las", "lasjmliq3" },
    { 5040, "shopliquor_las", "mural02_LA" },
    { 2366, "shopping", "cj_ziptop" },
    { 6095, "shops01_law", "bankoff01_law" },
    { 6095, "shops01_law", "GB_canopy01b" },
    { 6095, "shops01_law", "GB_chatwall03b" },
    { 6095, "shops01_law", "GB_shop01" },
    { 6095, "shops01_law", "GB_shopdoor01" },
    { 6095, "shops01_law", "GB_sign02" },
    { 6095, "shops01_law", "GB_sign04" },
    { 6095, "shops01_law", "GB_venflat02" },
    { 6095, "shops01_law", "GB_yellow01" },
    { 6095, "shops01_law", "greenshade2_64" },
    { 6095, "shops01_law", "hotwall1_law" },
    { 6095, "shops01_law", "lasmflat3" },
    { 6095, "shops01_law", "topsm01drk_law" },
    { 6095, "shops01_law", "venflat02" },
    { 6060, "shops2_law", "atmflat" },
    { 6060, "shops2_law", "biffoffwin_law" },
    { 6060, "shops2_law", "hotbasetop_law" },
    { 6060, "shops2_law", "hottop2_law" },
    { 6060, "shops2_law", "newall8-1blue" },
    { 6060, "shops2_law", "shoptop08_law" },
    { 6060, "shops2_law", "venshade03_law" },
    { 6060, "shops2_law", "ws_alley4_128_plain" },
    { 10925, "shopszz_sfse", "buymorejeans" },
    { 10925, "shopszz_sfse", "ws_newshop" },
    { 10926, "shops_sfse", "ws_oldtowerbottom" },
    { 10926, "shops_sfse", "ws_oldtowertop" },
    { 10926, "shops_sfse", "ws_woodenscreen2" },
    { 1493, "shop_doors", "CJ_SHOPDOOR1" },
    { 1842, "shop_shelf1", "formica" },
    { 1842, "shop_shelf1", "shelf3" },
    { 1842, "shop_shelf1", "shelf5" },
    { 1842, "shop_shelf1", "shelf6" },
    { 1842, "shop_shelf1", "shelf7" },
    { 1842, "shop_shelf1", "shelf8" },
    { 1842, "shop_shelf1", "shelf9" },
    { 1229, "signs", "busschedule64" },
    { 1229, "signs", "bus_stop64" },
    { 1229, "signs", "NoParking2_128" },
    { 1229, "signs", "parkmeter_128" },
    { 1229, "signs", "phonesign_128" },
    { 1229, "signs", "redparkmeter" },
    { 1229, "signs", "roadsign01_128" },
    { 10941, "silicon2_sfse", "siliconvalleywins2" },
    { 10941, "silicon2_sfse", "siliconvalleywins3" },
    { 10941, "silicon2_sfse", "siliconvalleywins5" },
    { 10941, "silicon2_sfse", "ws_badplaster" },
    { 10941, "silicon2_sfse", "ws_girderhole" },
    { 10939, "silicon_sfse", "pavementhexagon" },
    { 10939, "silicon_sfse", "ws_traingravelblend" },
    { 10061, "simcondo_sfe", "sl_hiriserail1" },
    { 10061, "simcondo_sfe", "sl_hiriserail2" },
    { 3576, "sjmla_las", "lasdockbar" },
    { 3576, "sjmla_las", "SJMLAWEPCRAT1" },
    { 3576, "sjmla_las", "SJMLAWEPCRAT2" },
    { 2411, "skate_shop", "CJ_PRO_3" },
    { 3524, "skullpillar", "pirateskull02_128" },
    { 3434, "skullsign", "pirates06_64" },
    { 3434, "skullsign", "pirates08_128" },
    { 3434, "skullsign", "pirates09_128" },
    { 3434, "skullsign", "pirateskull01_128" },
    { 3434, "skullsign", "piratesword_64" },
    { 3434, "skullsign", "vegasstripsign1_256" },
    { 3434, "skullsign", "vegasstripsign2_256" },
    { 3434, "skullsign", "vgsn_scrollsgn" },
    { 14479, "skuzzy_motelmain", "burglry_wall5" },
    { 14479, "skuzzy_motelmain", "motel_mirror2" },
    { 14479, "skuzzy_motelmain", "mp_CJ_Laminate1" },
    { 4550, "skyscr1_lan2", "ablndwall2_LAE" },
    { 4550, "skyscr1_lan2", "downtwin24" },
    { 4550, "skyscr1_lan2", "gm_labuld2_b" },
    { 4550, "skyscr1_lan2", "gm_labuld3_a" },
    { 4550, "skyscr1_lan2", "gm_labuld3_b" },
    { 4550, "skyscr1_lan2", "sl_librarycolmn1" },
    { 4550, "skyscr1_lan2", "sl_librarycolmn2" },
    { 4550, "skyscr1_lan2", "sl_librarydoor1" },
    { 4550, "skyscr1_lan2", "sl_librarygdoor1" },
    { 4550, "skyscr1_lan2", "sl_librarywall1" },
    { 4550, "skyscr1_lan2", "sl_librarywin1" },
    { 4550, "skyscr1_lan2", "sl_librarywin2" },
    { 4550, "skyscr1_lan2", "sl_librarywin3" },
    { 4550, "skyscr1_lan2", "sl_skyscprbtm1" },
    { 4550, "skyscr1_lan2", "sl_skyscprwall1" },
    { 4550, "skyscr1_lan2", "sl_skyscrpr02" },
    { 4550, "skyscr1_lan2", "sl_skyscrpr02wall1" },
    { 4550, "skyscr1_lan2", "sl_skyscrpr03" },
    { 4568, "skyscrap2_lan2", "sl_marblewall2" },
    { 4586, "skyscrap3_lan2", "sl_dthotelwin1" },
    { 4586, "skyscrap3_lan2", "sl_skyscrpr05" },
    { 4586, "skyscrap3_lan2", "sl_skyscrpr05b" },
    { 4586, "skyscrap3_lan2", "sl_skyscrpr05wall1" },
    { 5740, "skyscrapelawn", "glasswindow3_256" },
    { 10948, "skyscrapper_sfs", "ws_skywins4" },
    { 10938, "skyscrap_sfse", "ws_rollerdoor_alu_noentry" },
    { 10938, "skyscrap_sfse", "ws_skyscraperwin1" },
    { 10053, "slapart01sfe", "sl_brwnaprtwall1" },
    { 10053, "slapart01sfe", "sl_brwnaprtwin1" },
    { 10053, "slapart01sfe", "sl_brwnaprtwin2" },
    { 10053, "slapart01sfe", "sl_brwnaprtwin3" },
    { 10053, "slapart01sfe", "sl_grngarage1" },
    { 10053, "slapart01sfe", "sl_hirise2win1" },
    { 10053, "slapart01sfe", "sl_hirise2_conc" },
    { 10053, "slapart01sfe", "sl_hirisegrn1" },
    { 10053, "slapart01sfe", "sl_hirisepnk1" },
    { 10053, "slapart01sfe", "sl_hiriseredconc" },
    { 10053, "slapart01sfe", "sl_hirisewhite1" },
    { 9908, "smallertxd", "bigpark_sfe" },
    { 9908, "smallertxd", "hotel_bit1" },
    { 9908, "smallertxd", "hotel_win1" },
    { 9908, "smallertxd", "pizzabot_64" },
    { 9908, "smallertxd", "sfe_bigbuild4" },
    { 9908, "smallertxd", "sf_backaley4" },
    { 9908, "smallertxd", "sf_LOSWORLD_1097b" },
    { 9908, "smallertxd", "sf_shop3" },
    { 9908, "smallertxd", "sf_windos_15c" },
    { 9908, "smallertxd", "wash_grnd_mess1_128" },
    { 14756, "smallsfhs", "AH_flroortiledirt1" },
    { 14756, "smallsfhs", "ah_whitiles" },
    { 3587, "snpedhusxref", "lasjmscum2a" },
    { 3587, "snpedhusxref", "lasjmslumgrnd" },
    { 3587, "snpedhusxref", "sanpednhusd1" },
    { 3587, "snpedhusxref", "sanpednhusd4" },
    { 3587, "snpedhusxref", "sjmlababit" },
    { 3587, "snpedhusxref", "sjmlawood" },
    { 3587, "snpedhusxref", "sjmlawood2" },
    { 3587, "snpedhusxref", "vgsclubwall08_128" },
    { 8396, "sphinx01", "luxorceiling01_128" },
    { 8396, "sphinx01", "luxorceiling02_128" },
    { 8396, "sphinx01", "luxorledge02_128" },
    { 8396, "sphinx01", "luxormural01_256" },
    { 8396, "sphinx01", "sphinxbody01_128" },
    { 8396, "sphinx01", "sphinxface01_256" },
    { 2689, "sport_cloth", "BB_TOPS" },
    { 2689, "sport_cloth", "oran12" },
    { 2689, "sport_cloth", "rockstarhood" },
    { 12847, "sprunkworks", "bigsprunkcan" },
    { 12847, "sprunkworks", "bigsprunkends" },
    { 12847, "sprunkworks", "coe_factry1" },
    { 11095, "stadbridge_sfs", "ws_footbridge" },
    { 17511, "stadium_lae2", "compmallsign1" },
    { 17511, "stadium_lae2", "formumsgn_lae2" },
    { 17511, "stadium_lae2", "forum1" },
    { 17511, "stadium_lae2", "grassdeep2" },
    { 17511, "stadium_lae2", "hotring1" },
    { 17511, "stadium_lae2", "hotring2" },
    { 17511, "stadium_lae2", "kickbarrier" },
    { 17511, "stadium_lae2", "stadtbludoors_lae2" },
    { 17511, "stadium_lae2", "stadtcorrugate_lae2" },
    { 17511, "stadium_lae2", "stadtdoors_lae2" },
    { 17511, "stadium_lae2", "stadtpaytwin_lae2" },
    { 17511, "stadium_lae2", "stadt_banner1" },
    { 17511, "stadium_lae2", "stadt_banner2" },
    { 17511, "stadium_lae2", "stadt_banner3" },
    { 17511, "stadium_lae2", "ticketsnprice_lae2" },
    { 10954, "stadium_sfse", "ws_stadiumgates" },
    { 13603, "stad_tag", "Was_swr_wall_blue" },
    { 4101, "stapl", "sl_Laexpomtl1" },
    { 4101, "stapl", "sl_laexpowall1" },
    { 4101, "stapl", "sl_laexpowin1" },
    { 4101, "stapl", "sl_Laexpowin2" },
    { 4101, "stapl", "sl_stapldoor2" },
    { 14818, "starps_ext", "kb_pathgras" },
    { 3900, "station", "ledge2_64H" },
    { 3900, "station", "ledgetop2_64HV" },
    { 3900, "station", "newall2_16c128" },
    { 3900, "station", "rustd64" },
    { 3900, "station", "stairstep01_64" },
    { 11352, "stationsfse_1", "sfsestationsigns" },
    { 5772, "stationtunnel", "market_LAwN" },
    { 10932, "station_sfse", "neon" },
    { 4573, "stolenbuild01", "sl_dtbuild1door1" },
    { 4573, "stolenbuild01", "sl_dtbuild1wall1" },
    { 4573, "stolenbuild01", "sl_dtbuild1win1" },
    { 4573, "stolenbuild01", "sl_dtbuild1win2" },
    { 4573, "stolenbuild01", "sl_dtbuild1win3" },
    { 4573, "stolenbuild01", "sl_dtwn2edge1" },
    { 4573, "stolenbuild01", "sl_dtwn2wall1" },
    { 4573, "stolenbuild01", "sl_dtwn2win1" },
    { 4572, "stolenbuild02", "sl_skyscrpr04" },
    { 4572, "stolenbuild02", "sl_zippendant1" },
    { 4570, "stolenbuild03", "girdygird" },
    { 4570, "stolenbuild03", "sl_concretewin1" },
    { 4570, "stolenbuild03", "sl_dtbuild2edge1" },
    { 4570, "stolenbuild03", "sl_dtbuild2wall1" },
    { 4570, "stolenbuild03", "sl_dtbuild2win1" },
    { 4570, "stolenbuild03", "sl_dtbuild2win2" },
    { 4570, "stolenbuild03", "sl_dtbuild2win3" },
    { 5404, "stormdra1_lae", "lasrmd2_sjm" },
    { 5404, "stormdra1_lae", "lasrmd3_sjm" },
    { 5404, "stormdra1_lae", "lasrmd4_sjm" },
    { 5105, "stormdrain_las2", "abeybrid" },
    { 14819, "straps_int", "speakerkb1" },
    { 1294, "streetlights", "Lamphead" },
    { 6977, "stripshop1", "vgnstripwall1_256" },
    { 5735, "studio01_lawn", "studoff01_law" },
    { 5735, "studio01_lawn", "studoff02_law" },
    { 5735, "studio01_lawn", "studoff03_law" },
    { 5735, "studio01_lawn", "studoff04_law" },
    { 9239, "stuff2_sfn", "cm_SFN_warehousewall" },
    { 9239, "stuff2_sfn", "sl_preswin02" },
    { 9239, "stuff2_sfn", "sl_preswindbl02" },
    { 10824, "subpen1_sfse", "ws_sub_pen_conc" },
    { 10375, "subshops_sfs", "ws_archangels_dirty" },
    { 10375, "subshops_sfs", "ws_fancyshop1d" },
    { 10375, "subshops_sfs", "ws_fancywindaes2" },
    { 10375, "subshops_sfs", "ws_rollerdoor_silver2" },
    { 13608, "sumoback", "dirtmix_128" },
    { 6349, "sunbill_law2", "SunBillB01" },
    { 6349, "sunbill_law2", "SunBillB02" },
    { 5722, "sunrise01_lawn", "hair01_law" },
    { 5722, "sunrise01_lawn", "holshop_law" },
    { 5722, "sunrise01_lawn", "tileshoptop1_law" },
    { 5722, "sunrise01_lawn", "venshade02_law" },
    { 5716, "sunrise02_lawn", "mann01_law" },
    { 5716, "sunrise02_lawn", "mann02_law" },
    { 5716, "sunrise02_lawn", "mann03_law" },
    { 5716, "sunrise02_lawn", "Mannblok1_LAn" },
    { 5716, "sunrise02_lawn", "manndoorb_law" },
    { 5716, "sunrise02_lawn", "manndoorc_law" },
    { 5716, "sunrise02_lawn", "manndoor_law" },
    { 5716, "sunrise02_lawn", "manns01_LAwN" },
    { 5716, "sunrise02_lawn", "mannwallb_law" },
    { 5716, "sunrise02_lawn", "mannwallc_law" },
    { 5716, "sunrise02_lawn", "mannwall_law" },
    { 5727, "sunrise04_lawn", "decodet1_LAwn" },
    { 5727, "sunrise04_lawn", "decodet2_LAwn" },
    { 5727, "sunrise04_lawn", "fredwall1_LAwN" },
    { 5727, "sunrise04_lawn", "fredwall2_LAwN" },
    { 5727, "sunrise04_lawn", "fredwall3_LAwN" },
    { 5727, "sunrise04_lawn", "holbuild10b_law" },
    { 5727, "sunrise04_lawn", "holbuild10_law" },
    { 5727, "sunrise04_lawn", "lasjmflood1" },
    { 5727, "sunrise04_lawn", "mosaic2_LAwn" },
    { 5727, "sunrise04_lawn", "windowbot01_law" },
    { 5768, "sunrise05_lawn", "hollysign01_LAw" },
    { 5768, "sunrise05_lawn", "hollywin01_LAw" },
    { 5768, "sunrise05_lawn", "hollywin04_LAw" },
    { 5725, "sunrise08_lawn", "cornice02_la" },
    { 5725, "sunrise08_lawn", "holbuild06b_law" },
    { 5725, "sunrise08_lawn", "holbuild06dr_law" },
    { 5725, "sunrise08_lawn", "holbuild06_law" },
    { 5725, "sunrise08_lawn", "hwbig01b_law" },
    { 5725, "sunrise08_lawn", "hwbig01c_law" },
    { 5725, "sunrise08_lawn", "hwbig01_law" },
    { 5725, "sunrise08_lawn", "motpic_law" },
    { 5725, "sunrise08_lawn", "pillarstone_law" },
    { 5725, "sunrise08_lawn", "tikboxwall_law" },
    { 5725, "sunrise08_lawn", "tikboxwin_law" },
    { 5725, "sunrise08_lawn", "topgrill01_law" },
    { 5725, "sunrise08_lawn", "weeregal" },
    { 5769, "sunrise09_lawn", "hollydoor01_law" },
    { 5769, "sunrise09_lawn", "hollysign03_LAw" },
    { 5769, "sunrise09_lawn", "hollysign04_LAw" },
    { 5769, "sunrise09_lawn", "hollywall01_law" },
    { 5769, "sunrise09_lawn", "hollywin05_LAw" },
    { 5769, "sunrise09_lawn", "vinedet1_LAwN" },
    { 5769, "sunrise09_lawn", "vinesign2_LAw" },
    { 5769, "sunrise09_lawn", "vinewall01_law" },
    { 5719, "sunrise10_lawn", "compcouwall2" },
    { 5719, "sunrise10_lawn", "eldritch_law" },
    { 5719, "sunrise10_lawn", "eld_box2_law" },
    { 5719, "sunrise10_lawn", "eld_box3_law" },
    { 5719, "sunrise10_lawn", "eld_box_law" },
    { 5719, "sunrise10_lawn", "holbuild01c_law" },
    { 5719, "sunrise10_lawn", "holbuild01_law" },
    { 5719, "sunrise10_lawn", "holbuild02b_law" },
    { 5719, "sunrise10_lawn", "holbuild02c_law" },
    { 5719, "sunrise10_lawn", "holbuild02d_law" },
    { 5719, "sunrise10_lawn", "holbuild02_law" },
    { 5719, "sunrise10_lawn", "holbuild03b_law" },
    { 5719, "sunrise10_lawn", "holbuild03c_law" },
    { 5719, "sunrise10_lawn", "holbuild03d_law" },
    { 5719, "sunrise10_lawn", "holbuild03_law" },
    { 5719, "sunrise10_lawn", "holbuild04_law" },
    { 5719, "sunrise10_lawn", "pillarbase_law" },
    { 5719, "sunrise10_lawn", "pillartop_law" },
    { 5719, "sunrise10_lawn", "pillar_law" },
    { 5719, "sunrise10_lawn", "starland01_law" },
    { 5719, "sunrise10_lawn", "startours01_law" },
    { 5717, "sunrise11_lawn", "ShopWall1_LAn" },
    { 5717, "sunrise11_lawn", "ShopWall2_LAn" },
    { 5717, "sunrise11_lawn", "ShopWindo1_LAn" },
    { 6338, "sunset01_law2", "downtwin18" },
    { 6338, "sunset01_law2", "melrorg_law" },
    { 6338, "sunset01_law2", "sffront24_256" },
    { 5775, "sunset01_lawn", "comptwindo5" },
    { 5775, "sunset01_lawn", "standardet1_LA" },
    { 5775, "sunset01_lawn", "stanwin01_LAwN" },
    { 5775, "sunset01_lawn", "stanwin02_LAwN" },
    { 6336, "sunset02_law2", "bank01_LAw" },
    { 6336, "sunset02_law2", "rodeowin01" },
    { 6336, "sunset02_law2", "SunBillB07" },
    { 6336, "sunset02_law2", "SunBillB08" },
    { 6354, "sunset03_law2", "billLA01" },
    { 6354, "sunset03_law2", "billLA02" },
    { 6354, "sunset03_law2", "coinlaundry2_256" },
    { 6354, "sunset03_law2", "streetsign1_256" },
    { 6354, "sunset03_law2", "SunBillB04" },
    { 6354, "sunset03_law2", "SunBillB06" },
    { 6328, "sunset04_law2", "pawnsigns01_128" },
    { 4551, "sunset1_lan2", "Bow_road_nomark_b" },
    { 4551, "sunset1_lan2", "emptyshop" },
    { 4551, "sunset1_lan2", "snpedpurtrm" },
    { 5870, "sunst18_lawn", "argwin1_LA" },
    { 5870, "sunst18_lawn", "greenwall3" },
    { 5870, "sunst18_lawn", "laspowrec3" },
    { 5870, "sunst18_lawn", "laspowrec6" },
    { 6357, "sunstrans_law2", "dogbill01" },
    { 6357, "sunstrans_law2", "SunBillB05" },
    { 6357, "sunstrans_law2", "SunBillB10" },
    { 5998, "sunstr_lawn", "eldneoLAwN" },
    { 5998, "sunstr_lawn", "ganggraf02_LA" },
    { 5998, "sunstr_lawn", "manns02_LAwN" },
    { 5998, "sunstr_lawn", "neon01_LAwN" },
    { 5998, "sunstr_lawn", "neon02_LAwN" },
    { 5998, "sunstr_lawn", "neon04_LAwN" },
    { 5998, "sunstr_lawn", "neon05_LAwN" },
    { 5998, "sunstr_lawn", "sunneon01" },
    { 5998, "sunstr_lawn", "sunneon02" },
    { 2404, "surf_boards", "CJ_SURFBOARDS" },
    { 15046, "svcunthoose", "ab_flakeywall" },
    { 15046, "svcunthoose", "AH_carpet5kb" },
    { 15046, "svcunthoose", "csGarageTrolley01psd" },
    { 15046, "svcunthoose", "csheistbox01" },
    { 15046, "svcunthoose", "GB_fireplace02" },
    { 15046, "svcunthoose", "GB_plug01" },
    { 15046, "svcunthoose", "GB_toilet01" },
    { 15046, "svcunthoose", "mplid02" },
    { 15055, "svlamid", "ah_blindfana" },
    { 15055, "svlamid", "AH_flroortile3" },
    { 15042, "svsfsm", "AH_filthrug1" },
    { 15042, "svsfsm", "chin_carp2" },
    { 15042, "svsfsm", "GB_rapposter01" },
    { 15042, "svsfsm", "GB_rapposter03" },
    { 15042, "svsfsm", "strip_carpet" },
    { 15058, "svvgmid", "AH_flroortile11" },
    { 15058, "svvgmid", "AH_walltile4" },
    { 14493, "sweetsbits", "ab_cusion1" },
    { 14493, "sweetsbits", "ab_cusion2" },
    { 14528, "sweetshads", "andydark3" },
    { 14495, "sweetshall", "ab_rollerblind" },
    { 14495, "sweetshall", "ab_wall4" },
    { 14495, "sweetshall", "AH_dirtywalls8bit2" },
    { 14495, "sweetshall", "ah_wpaper13" },
    { 14495, "sweetshall", "GB_nastybar25" },
    { 14495, "sweetshall", "mcstraps_ceiling" },
    { 14495, "sweetshall", "mcstraps_door1" },
    { 14495, "sweetshall", "mp_cooker1" },
    { 14527, "sweetslites", "mp_diner_fan" },
    { 14526, "sweetsmain", "ab_kitchunit2" },
    { 14526, "sweetsmain", "ab_tilekitch" },
    { 14526, "sweetsmain", "ah_whitpanelceil" },
    { 14526, "sweetsmain", "ah_wpaper12" },
    { 14526, "sweetsmain", "gb_binbag01" },
    { 14526, "sweetsmain", "GB_Pan01" },
    { 14526, "sweetsmain", "Metal3_64_hole" },
    { 14526, "sweetsmain", "mp_CJ_BIG_TELLY1" },
    { 14526, "sweetsmain", "mp_cooker2" },
    { 14526, "sweetsmain", "mp_cooker3" },
    { 14526, "sweetsmain", "wall2" },
    { 14526, "sweetsmain", "wall5" },
    { 14481, "sweets_bit2", "ab_curtain_shwr" },
    { 12962, "sw_apartflat", "sw_genstore2" },
    { 12962, "sw_apartflat", "sw_hardware" },
    { 12962, "sw_apartflat", "sw_realtywin" },
    { 12962, "sw_apartflat", "wal0256hi" },
    { 13012, "sw_apartflat5", "des_donutwall" },
    { 13012, "sw_apartflat5", "sjmfad1" },
    { 13012, "sw_apartflat5", "sw_lastdrop" },
    { 12938, "sw_apartments", "sjmrufhus3" },
    { 12938, "sw_apartments", "sw_policeline" },
    { 13007, "sw_bankint", "bank_wall1" },
    { 13007, "sw_bankint", "bank_wall4" },
    { 13007, "sw_bankint", "closed_temp" },
    { 13007, "sw_bankint", "comdore_pet256" },
    { 13007, "sw_bankint", "kbcornice_1_128" },
    { 13007, "sw_bankint", "spad_tile5_256" },
    { 13007, "sw_bankint", "type_128" },
    { 13007, "sw_bankint", "woodfloor1" },
    { 13008, "sw_block01", "sw_cafedoor1" },
    { 13008, "sw_block01", "ws_smoked" },
    { 12862, "sw_block03", "sw_barb" },
    { 12862, "sw_block03", "sw_bigmike" },
    { 12862, "sw_block03", "sw_cashstore" },
    { 12862, "sw_block03", "sw_door03" },
    { 12862, "sw_block03", "sw_door04" },
    { 12862, "sw_block03", "sw_door05" },
    { 12862, "sw_block03", "sw_garagedoor" },
    { 12862, "sw_block03", "sw_lintl01" },
    { 12862, "sw_block03", "sw_roofbit1" },
    { 12862, "sw_block03", "sw_watson" },
    { 12862, "sw_block03", "sw_wind02" },
    { 12862, "sw_block03", "sw_wind04" },
    { 12862, "sw_block03", "sw_woodwall1" },
    { 12862, "sw_block03", "sw_woodwall2" },
    { 13014, "sw_block04", "GB_nastybar21" },
    { 13014, "sw_block04", "sw_wallbrick_03" },
    { 13014, "sw_block04", "sw_wind06" },
    { 12923, "sw_block05", "sw_door08" },
    { 12923, "sw_block05", "sw_walltopx3" },
    { 12923, "sw_block05", "sw_woodslats1" },
    { 12924, "sw_block06", "sw_wallbrick_07" },
    { 12964, "sw_block09", "GB_truckdepot18" },
    { 12964, "sw_block09", "sjmbwall1" },
    { 12964, "sw_block09", "sw_genstore" },
    { 12980, "sw_block10", "sw_wind20" },
    { 12980, "sw_block10", "sw_woodslats2" },
    { 12984, "sw_block11", "shoptopb128" },
    { 13011, "sw_block12", "gwfrontpan_law" },
    { 12979, "sw_block9", "sw_bikeshed" },
    { 12979, "sw_block9", "sw_wind14" },
    { 12931, "sw_brewery", "sw_brewbrickwin01" },
    { 12931, "sw_brewery", "sw_brewbrickwin02" },
    { 12960, "sw_church", "sw_confess" },
    { 12960, "sw_church", "sw_confessthru" },
    { 12960, "sw_church", "sw_trellis" },
    { 12960, "sw_church", "sw_winshutr" },
    { 12976, "sw_diner1", "huspnk256hi" },
    { 12976, "sw_diner1", "SW_dinersigns" },
    { 12976, "sw_diner1", "sw_oldpump" },
    { 12976, "sw_diner1", "sw_pump" },
    { 12976, "sw_diner1", "sw_roof01" },
    { 12988, "sw_fact02", "sw_bioeng" },
    { 13065, "sw_fact02alt", "spandLoadingDoor" },
    { 13065, "sw_fact02alt", "ws_oldwall1" },
    { 12911, "sw_farm1", "sw_farmsign01" },
    { 12863, "sw_genstore1", "sw_awning2" },
    { 12959, "sw_library", "airportwind01" },
    { 12959, "sw_library", "sw_library" },
    { 12959, "sw_library", "sw_libwin" },
    { 12983, "sw_med1", "sw_med01" },
    { 12937, "sw_oldshack", "hilltest2_LAS" },
    { 12937, "sw_oldshack", "sw_cabshut01" },
    { 12937, "sw_oldshack", "sw_hubcaps" },
    { 12937, "sw_oldshack", "sw_pelts01" },
    { 12910, "sw_railbridge1", "sw_rock1b" },
    { 13296, "sw_roadgas", "bballboard3_256" },
    { 12925, "sw_sheds", "sw_barnframe" },
    { 12986, "sw_well1", "Bio_64" },
    { 1490, "tags2_lalae", "frontyard" },
    { 1490, "tags2_lalae", "grove" },
    { 1531, "tags_laazteca", "aztecas" },
    { 1525, "tags_lakilo", "kilotray" },
    { 1526, "tags_larifa", "rifa" },
    { 1527, "tags_larollin", "rollin" },
    { 1528, "tags_laseville", "seville" },
    { 1529, "tags_latemple", "temple" },
    { 1530, "tags_lavagos", "vagos" },
    { 3018, "targetmx", "target4" },
    { 1583, "targets", "5parttarget" },
    { 1583, "targets", "target1" },
    { 1583, "targets", "target2" },
    { 1583, "targets", "target3" },
    { 1583, "targets", "targetframe1" },
    { 1583, "targets", "targetframe2" },
    { 3762, "tcecen4law", "lasjmwinny" },
    { 3762, "tcecen4law", "mulhuose01c_law" },
    { 5764, "telewirelawn", "donutLAwN" },
    { 17517, "templae2land", "bincoslae2_128" },
    { 17517, "templae2land", "bincowin" },
    { 17517, "templae2land", "LAglaswall2" },
    { 5408, "tempstuff_lae", "examball1_LAe" },
    { 5408, "tempstuff_lae", "examintp2_LAS" },
    { 5408, "tempstuff_lae", "examintp_LAS" },
    { 5408, "tempstuff_lae", "examroof1_LAe" },
    { 5408, "tempstuff_lae", "examwall1_LAe" },
    { 5408, "tempstuff_lae", "sl_metalbndrust1" },
    { 1885, "temp_shop", "basket_1" },
    { 1975, "texttest", "kb_blue" },
    { 1975, "texttest", "kb_red" },
    { 4600, "theatrelan2", "flmngo03_128" },
    { 4600, "theatrelan2", "gm_labuld2_c" },
    { 4600, "theatrelan2", "sl_pendant1" },
    { 4600, "theatrelan2", "sl_whitewash1" },
    { 4600, "theatrelan2", "wolf1 copy" },
    { 962, "ticket_sub", "CJ_TICKM" },
    { 8532, "tikigrass", "vgsndivebrd" },
    { 8534, "tikimotel", "sa_wood01_128" },
    { 8534, "tikimotel", "sa_wood03_128" },
    { 8534, "tikimotel", "sa_wood04_128" },
    { 8534, "tikimotel", "sa_wood05_128" },
    { 8534, "tikimotel", "tikidoor01_128" },
    { 8534, "tikimotel", "tikitriangle_128" },
    { 8536, "tikisign", "tikireed01_128" },
    { 8536, "tikisign", "tikisign01_128" },
    { 8536, "tikisign", "tikisign02_128" },
    { 9623, "toll_sfw", "toll_SFw1" },
    { 9623, "toll_sfw", "toll_SFw3" },
    { 977, "towerdoor", "Front_Door" },
    { 14570, "traidaqua", "ab_aqua_anenome" },
    { 14570, "traidaqua", "ab_aqua_bubbles" },
    { 14570, "traidaqua", "ab_aqua_coral" },
    { 14570, "traidaqua", "ab_aqua_kelp" },
    { 14570, "traidaqua", "ab_aqua_sand" },
    { 14570, "traidaqua", "ab_aqua_starfish" },
    { 14570, "traidaqua", "ab_aqua_tubeweed" },
    { 14570, "traidaqua", "ab_aqua_urchin" },
    { 14570, "traidaqua", "ab_tv" },
    { 14570, "traidaqua", "sa_wood06_128" },
    { 14569, "traidman", "ab_aquarium" },
    { 14569, "traidman", "chinese3" },
    { 14569, "traidman", "chinese8" },
    { 14569, "traidman", "darkgrey_carpet_256" },
    { 14569, "traidman", "luxebrown_law" },
    { 14569, "traidman", "pagodaroof4" },
    { 14569, "traidman", "walpaper_dragn" },
    { 14385, "trailerkb", "tr_floor1" },
    { 14385, "trailerkb", "tr_floor2" },
    { 14385, "trailerkb", "tr_kit_1a" },
    { 14385, "trailerkb", "tr_kit_2ba" },
    { 14385, "trailerkb", "tr_kit_3a" },
    { 14385, "trailerkb", "tr_kit_4b" },
    { 14385, "trailerkb", "tr_wall2" },
    { 14385, "trailerkb", "tr_wall3" },
    { 14385, "trailerkb", "tr_wood1" },
    { 3167, "trailers", "sm_airstreamside" },
    { 3167, "trailers", "sm_airstreamside2" },
    { 1373, "traincross", "railxing" },
    { 1373, "traincross", "rednwhite" },
    { 1373, "traincross", "trainwarninglight" },
    { 10931, "traingen_sfse", "metpatshadow32" },
    { 4817, "traintrack_las", "sjmlascumpth" },
    { 10752, "traintunnel1_sfse", "wallwashvc128" },
    { 9680, "tramstatsfw", "sf_tramcross" },
    { 9680, "tramstatsfw", "tramdoors_sfw" },
    { 9680, "tramstatsfw", "tramstation1_sfw" },
    { 9680, "tramstatsfw", "tramstation2_sfw" },
    { 9680, "tramstatsfw", "tramstation3_sfw" },
    { 1375, "tramstop", "tramstop_sf" },
    { 767, "tree1", "bzelka1" },
    { 767, "tree1", "elmtreered" },
    { 767, "tree1", "Elm_treegrn" },
    { 767, "tree1", "Elm_treegrn2" },
    { 767, "tree1", "Elm_treegrn4" },
    { 764, "tree2", "bgleda0" },
    { 764, "tree2", "bpiced1" },
    { 764, "tree2", "cedarbare" },
    { 764, "tree2", "cedarwee" },
    { 764, "tree2", "elmdead" },
    { 764, "tree2", "Locustbra" },
    { 764, "tree2", "sprucbr" },
    { 764, "tree2", "weeelm" },
    { 763, "tree3", "ashbrnch" },
    { 763, "tree3", "bcorya0" },
    { 763, "tree3", "bfraxa1" },
    { 763, "tree3", "bpinud2" },
    { 763, "tree3", "hazelbranch" },
    { 763, "tree3", "hazelbrnch" },
    { 763, "tree3", "pinebrnch1" },
    { 3910, "treeshad", "railshadowdif" },
    { 8663, "triadcasino", "FourDragons01_256" },
    { 8663, "triadcasino", "imperial01_64" },
    { 8663, "triadcasino", "imperial02_64" },
    { 8663, "triadcasino", "imperial03_128" },
    { 8663, "triadcasino", "imperial04_128" },
    { 14562, "triadinteriorn", "vgnchinlion1_512" },
    { 3531, "triadprops_lvs", "casinowall1" },
    { 3531, "triadprops_lvs", "chinese1" },
    { 3531, "triadprops_lvs", "GB_restaursmll58" },
    { 14560, "triad_bar", "pagoda3" },
    { 14560, "triad_bar", "pagodaroof2" },
    { 14560, "triad_bar", "pagodaroof3" },
    { 14560, "triad_bar", "triad_decor1" },
    { 14565, "triad_bar2", "shaker128" },
    { 14608, "triad_big", "buddha_gold" },
    { 14608, "triad_big", "silver_coins2" },
    { 14564, "triad_ext", "ab_spotlite" },
    { 14563, "triad_main", "chinese5" },
    { 14563, "triad_main", "chin_carp3" },
    { 14563, "triad_main", "sign_maintenance" },
    { 14561, "triad_neon", "ab_neon_wof" },
    { 14561, "triad_neon", "kbneon" },
    { 14561, "triad_neon", "lightalp1a" },
    { 14561, "triad_neon", "sign_Restaurant" },
    { 14561, "triad_neon", "sign_wheelofrtne2" },
    { 14605, "tricas_neon", "sign_hotel&casino" },
    { 14605, "tricas_neon", "sign_neondollar&star" },
    { 14605, "tricas_neon", "SIGN_playAgain" },
    { 14605, "tricas_neon", "sign_the4dragons" },
    { 8577, "trnstnground", "concretenew256128" },
    { 2994, "trolex", "trolley01" },
    { 2994, "trolex", "trolley03" },
    { 17072, "truckedepotlawn", "GB_truckdepot01" },
    { 17072, "truckedepotlawn", "GB_truckdepot02" },
    { 17072, "truckedepotlawn", "GB_truckdepot03" },
    { 17072, "truckedepotlawn", "GB_truckdepot04" },
    { 17072, "truckedepotlawn", "GB_truckdepot05" },
    { 17072, "truckedepotlawn", "GB_truckdepot07" },
    { 17072, "truckedepotlawn", "GB_truckdepot08" },
    { 972, "tunnel", "corugwall1128" },
    { 972, "tunnel", "panlantic_128" },
    { 972, "tunnel", "tunnel_128" },
    { 1609, "turtle", "turtlebit" },
    { 1609, "turtle", "turtlehead" },
    { 1609, "turtle", "turtletop" },
    { 6490, "tvstudio_law2", "tvstud01_LAw2" },
    { 6490, "tvstudio_law2", "tvstud02_LAw2" },
    { 6490, "tvstudio_law2", "tvstud03_LAw2" },
    { 10357, "tvtower_sfs", "ws_transmit_red" },
    { 10357, "tvtower_sfs", "ws_transmit_wht" },
    { 16150, "ufo_bar", "des_fanshadow" },
    { 16150, "ufo_bar", "des_intufowin" },
    { 16150, "ufo_bar", "ufo_pics1" },
    { 896, "underwater", "coral" },
    { 896, "underwater", "greyrockbig" },
    { 896, "underwater", "rocktr128" },
    { 896, "underwater", "starfish64" },
    { 4821, "union_las", "lasunion1" },
    { 4821, "union_las", "lasunion96" },
    { 4821, "union_las", "lasunion98" },
    { 4821, "union_las", "lasunion995" },
    { 7979, "vegasairprtland", "blackshadow3" },
    { 7979, "vegasairprtland", "hangerlight01_64" },
    { 430, "vegasbooth", "vendor01_lvs_128" },
    { 430, "vegasbooth", "vendor02_lvs_128" },
    { 430, "vegasbooth", "vendor04_lvs_64" },
    { 430, "vegasbooth", "vendor05_lvs_128" },
    { 7419, "vegasbuild", "Bow_church_dirt_to_grass_side" },
    { 7419, "vegasbuild", "vegparking1_256" },
    { 7419, "vegasbuild", "vgnwoodenwall_256" },
    { 6871, "vegascourtbld", "courthse1_256" },
    { 6871, "vegascourtbld", "courthse2_256" },
    { 6871, "vegascourtbld", "courthse3_256" },
    { 6871, "vegascourtbld", "courthsedor2_256" },
    { 6871, "vegascourtbld", "courthsewin2_128" },
    { 6871, "vegascourtbld", "courthse_128" },
    { 6871, "vegascourtbld", "marbletilewal1_256" },
    { 6871, "vegascourtbld", "vegaselecbloc_256" },
    { 7488, "vegasdwntwn1", "dangersign256" },
    { 7488, "vegasdwntwn1", "dwntwnvgn2_256" },
    { 7488, "vegasdwntwn1", "dwntwnvgn3_256" },
    { 7488, "vegasdwntwn1", "dwntwnvgn4_256" },
    { 7488, "vegasdwntwn1", "dwntwnvgnawn1_128" },
    { 7488, "vegasdwntwn1", "gen_gym1_256" },
    { 7488, "vegasdwntwn1", "savsig2" },
    { 7488, "vegasdwntwn1", "vgncprkdoor1_256" },
    { 7488, "vegasdwntwn1", "vgnstonewall1_256" },
    { 7488, "vegasdwntwn1", "villainnwall02_128" },
    { 7488, "vegasdwntwn1", "warning-strip64" },
    { 3449, "vegashse2", "airconditioner02_128" },
    { 3449, "vegashse2", "badhousewall01_128" },
    { 3449, "vegashse2", "badhousewalld01_128" },
    { 3449, "vegashse2", "badhousewalld02_128" },
    { 3449, "vegashse2", "badhousewalld04_128" },
    { 3449, "vegashse2", "badhousewalld05_128" },
    { 3449, "vegashse2", "badhousewalld06_128" },
    { 3449, "vegashse2", "hseconcblend1_256" },
    { 3449, "vegashse2", "pinkwall01_64" },
    { 3449, "vegashse2", "studiowall_law" },
    { 3446, "vegashse3", "starhedge2" },
    { 3446, "vegashse3", "vgnhseledgw1_64" },
    { 3442, "vegashse4", "Est_corridor_ceiling" },
    { 3442, "vegashse4", "Est_Gen_stone" },
    { 3442, "vegashse4", "mallint01" },
    { 3442, "vegashse4", "vgnlowbuild3_256" },
    { 3484, "vegashse5", "newindow14" },
    { 3484, "vegashse5", "vegashousewal1_256" },
    { 3484, "vegashse5", "vegashousewal2_256" },
    { 3484, "vegashse5", "vegashousewal7_256" },
    { 3484, "vegashse5", "vegashousewal8_256" },
    { 3484, "vegashse5", "vgnhsepsh4_256" },
    { 3445, "vegashse6", "vegashousewal3_256" },
    { 3445, "vegashse6", "vegashousewal4_256" },
    { 3445, "vegashse6", "vgnhsepsh1_256" },
    { 3483, "vegashse7", "black128" },
    { 3483, "vegashse7", "vegashousewal5_256" },
    { 3483, "vegashse7", "vegashousewal6_256" },
    { 3483, "vegashse7", "vgnhsepsh7_128" },
    { 3444, "vegashse8", "airconditioner01_128" },
    { 3444, "vegashse8", "badhousegttrng03_128" },
    { 3444, "vegashse8", "badhousewall02_256" },
    { 3444, "vegashse8", "badhousewall03_256" },
    { 3444, "vegashse8", "badhousewall04_256" },
    { 3444, "vegashse8", "badhousewall05_256" },
    { 3444, "vegashse8", "badhousewall07_128" },
    { 3444, "vegashse8", "badhousewallb01_256" },
    { 3444, "vegashse8", "badhousewallb02_128" },
    { 3444, "vegashse8", "badhousewallc01_128" },
    { 3444, "vegashse8", "badhousewallc02_128" },
    { 3444, "vegashse8", "redstones01_256" },
    { 3444, "vegashse8", "venbuildwh_law2" },
    { 6875, "vegasnbuild1", "brickglasvgn1_256" },
    { 6875, "vegasnbuild1", "brickglasvgn2_128" },
    { 6875, "vegasnbuild1", "brickvgn1_128" },
    { 7367, "vegasnefnc", "ws_griddyfence_64" },
    { 7541, "vegasneon", "vgntelewires1" },
    { 15033, "vegassavesmal", "ah_corn2" },
    { 15033, "vegassavesmal", "ah_wallstyle3" },
    { 8373, "vegass_jetty", "coasty_bit6_sfe" },
    { 6869, "vegastemp1", "casinobase1_256" },
    { 6869, "vegastemp1", "casinobase2_256" },
    { 6869, "vegastemp1", "casinowall1_128" },
    { 6869, "vegastemp1", "vgnbarb1_256" },
    { 6869, "vegastemp1", "vgnbarb2_256" },
    { 6869, "vegastemp1", "vgnbarb3_256" },
    { 6869, "vegastemp1", "vgnbarbtex1_256" },
    { 6869, "vegastemp1", "vgnbarbwall6_256" },
    { 6869, "vegastemp1", "vgnbarbwall7_256" },
    { 6869, "vegastemp1", "vgnbarb_wall_128" },
    { 7916, "vegaswaterfall", "newaterfal1_256" },
    { 7497, "vegaswrehse1", "roof05L256" },
    { 7497, "vegaswrehse1", "sjmbarblas" },
    { 18038, "vegas_munation", "mp_gun_floorred" },
    { 18038, "vegas_munation", "mp_gun_range" },
    { 18038, "vegas_munation", "mp_gun_wallbreeze" },
    { 3469, "vegenmotel", "vgnmotel4_256" },
    { 3467, "vegstreetsign", "streetsign2_256" },
    { 734, "vegtresshi9b", "oakb" },
    { 1209, "vend", "veding1_64" },
    { 1209, "vend", "veding2_64" },
    { 6057, "venicegb02_law", "bbalcony03_law" },
    { 6057, "venicegb02_law", "hedge1_law" },
    { 6057, "venicegb02_law", "mottwin_law" },
    { 6057, "venicegb02_law", "venw01b_law" },
    { 6057, "venicegb02_law", "venw01_law" },
    { 6056, "venice_law", "jettylounge_law" },
    { 6056, "venice_law", "law_blue2" },
    { 6056, "venice_law", "law_blue3" },
    { 6056, "venice_law", "law_blue4" },
    { 6056, "venice_law", "law_blue5" },
    { 6056, "venice_law", "law_blue6" },
    { 6056, "venice_law", "law_blue7" },
    { 6056, "venice_law", "law_terra2" },
    { 6056, "venice_law", "law_terra4" },
    { 6056, "venice_law", "law_terra5" },
    { 6056, "venice_law", "law_yellow2" },
    { 6056, "venice_law", "law_yellow4" },
    { 6056, "venice_law", "law_yellow5" },
    { 6056, "venice_law", "law_yellow6" },
    { 6056, "venice_law", "newlawdoor" },
    { 6056, "venice_law", "stonewalls2" },
    { 6056, "venice_law", "wdpanel01b_law" },
    { 6056, "venice_law", "wdpanel01_law" },
    { 9106, "vgeamun", "blueroof_64" },
    { 9106, "vgeamun", "hirisedoor1_256" },
    { 9106, "vgeamun", "vgnammuwal1" },
    { 9106, "vgeamun", "vgnammuwal2" },
    { 9106, "vgeamun", "vgnammuwal3" },
    { 9184, "vgebillboards", "cokopops_2" },
    { 9184, "vgebillboards", "eris_4" },
    { 8849, "vgeretail1", "alleywallyell" },
    { 8849, "vgeretail1", "casinoshop31_256" },
    { 8849, "vgeretail1", "zippizzaco_256" },
    { 9029, "vgetrainfnce", "wire_sm" },
    { 14703, "vghsb3int2", "HS2_2Wall2" },
    { 14703, "vghsb3int2", "HS2_3Wall1" },
    { 14703, "vghsb3int2", "HS4_Wall7" },
    { 14703, "vghsb3int2", "HS4_Wall8" },
    { 14714, "vghss1int2", "HS1_2Floor1" },
    { 14714, "vghss1int2", "HS2_2Wall3" },
    { 14714, "vghss1int2", "HS2_2Wall5" },
    { 14714, "vghss1int2", "HS2_3Wall4" },
    { 14714, "vghss1int2", "HS4_Wall5" },
    { 14714, "vghss1int2", "HS4_Wall6" },
    { 6959, "vgnbasktball", "yellowbball" },
    { 7416, "vgnbball", "actopblank_256" },
    { 7416, "vgnbball", "banditsign_256" },
    { 7416, "vgnbball", "vgngewall2_256" },
    { 7418, "vgnbballsign2", "autobahn3_256" },
    { 7418, "vgnbballsign2", "bailbondvg_256" },
    { 7418, "vgnbballsign2", "bankofSA_law" },
    { 7418, "vgnbballsign2", "disgraceland1_256" },
    { 7418, "vgnbballsign2", "frogspawn1_256" },
    { 7418, "vgnbballsign2", "KACCdepot_256" },
    { 7418, "vgnbballsign2", "scoreboardvgn_256" },
    { 7418, "vgnbballsign2", "steakhouse_256" },
    { 7418, "vgnbballsign2", "tattoosignvgn_256" },
    { 7418, "vgnbballsign2", "weldwed1_256" },
    { 7418, "vgnbballsign2", "ws_chipboard2" },
    { 7232, "vgncastext01", "Clowns_Pocket" },
    { 7288, "vgncastext02", "vgncasign12_256" },
    { 7288, "vgncastext02", "vgncasign22_256" },
    { 7288, "vgncastext02", "vgncasign42_256" },
    { 6993, "vgncircir", "circirc1_256" },
    { 6993, "vgncircir", "circirc2_256" },
    { 6993, "vgncircir", "circirctex1_128" },
    { 6993, "vgncircir", "circirctex2_64" },
    { 6993, "vgncircir", "circirctex3_128" },
    { 6993, "vgncircir", "circirctex4_256" },
    { 6993, "vgncircir", "circirctex4_neon" },
    { 6993, "vgncircir", "gasstopwall1_128" },
    { 6993, "vgncircir", "neon_centrala" },
    { 6993, "vgncircir", "starfish_static_lits" },
    { 6993, "vgncircir", "vgnbarb1_256na" },
    { 6993, "vgncircir", "vgncirctent1_256" },
    { 7231, "vgncircir2", "aluminiumbands64" },
    { 7231, "vgncircir2", "Clown_Pock_sign1b" },
    { 7231, "vgncircir2", "Clown_Pock_sign1c2" },
    { 7231, "vgncircir2", "hairybanjo_256" },
    { 6866, "vgncnstrct1", "Circus_gls_01" },
    { 6866, "vgncnstrct1", "Circus_gls_02" },
    { 6866, "vgncnstrct1", "Circus_gls_03" },
    { 6866, "vgncnstrct1", "Circus_gls_04" },
    { 6866, "vgncnstrct1", "Circus_gls_05" },
    { 6866, "vgncnstrct1", "concretegroundl1b" },
    { 6866, "vgncnstrct1", "desmudtrail3" },
    { 6866, "vgncnstrct1", "vegasclubdoor_128" },
    { 7247, "vgncoast", "concretewall22b" },
    { 7247, "vgncoast", "metalwheel1_128" },
    { 7247, "vgncoast", "metalwheel2_128" },
    { 7247, "vgncoast", "mp_bigmetaldoor_256" },
    { 7533, "vgncondos1", "casinowall6_256" },
    { 7533, "vgncondos1", "plantwoodchip_128" },
    { 7533, "vgncondos1", "vgnmotel1_256" },
    { 7533, "vgncondos1", "vgnmotel2_256" },
    { 7533, "vgncondos1", "vgnmotel3_256" },
    { 7426, "vgncorp1", "brick2" },
    { 7426, "vgncorp1", "curbred_64H" },
    { 7426, "vgncorp1", "elcid1_256" },
    { 7426, "vgncorp1", "elcid2_256" },
    { 7426, "vgncorp1", "elcid3_256" },
    { 7426, "vgncorp1", "elcid4_256" },
    { 7426, "vgncorp1", "elcid5_128" },
    { 7426, "vgncorp1", "elcid6_128" },
    { 7426, "vgncorp1", "elcid7_128" },
    { 7426, "vgncorp1", "elcid8_128" },
    { 7426, "vgncorp1", "ivorytower1_256" },
    { 7426, "vgncorp1", "ivorytower2_256" },
    { 7426, "vgncorp1", "vgnbuild1_256" },
    { 7426, "vgncorp1", "vgnbuild2_128" },
    { 7426, "vgncorp1", "vgnbuild3_256" },
    { 7426, "vgncorp1", "vgndwntwnrf2_128" },
    { 7009, "vgndwntwn1", "newpolice_sa" },
    { 7009, "vgndwntwn1", "vgnbankbld1_256" },
    { 7009, "vgndwntwn1", "vgnbankbld2_256" },
    { 7009, "vgndwntwn1", "vgnbankbld3_256" },
    { 7009, "vgndwntwn1", "vgnbankbld4_256" },
    { 7009, "vgndwntwn1", "vgnbankbld5_256" },
    { 7009, "vgndwntwn1", "vgnbankbld6_256" },
    { 7009, "vgndwntwn1", "win_frame" },
    { 7424, "vgndwntwn2", "gravelkb_128b" },
    { 7424, "vgndwntwn2", "souveniers1_256" },
    { 7424, "vgndwntwn2", "vegaswigshop1_256" },
    { 7424, "vgndwntwn2", "vgnalleywall1_256" },
    { 7424, "vgndwntwn2", "vgsSshopnew01" },
    { 6908, "vgndwntwn21", "247sign1_64" },
    { 6908, "vgndwntwn21", "fighotwin1_LAn" },
    { 6908, "vgndwntwn21", "newbank" },
    { 6908, "vgndwntwn21", "vgnbuild5bot_256" },
    { 6908, "vgndwntwn21", "vgnbuild5top_256" },
    { 6908, "vgndwntwn21", "vgnlawbuild1_256" },
    { 6908, "vgndwntwn21", "vgnlawbuild2_256" },
    { 6908, "vgndwntwn21", "vgnlawbuild3_256" },
    { 6908, "vgndwntwn21", "vgnlawbuild4_256" },
    { 6908, "vgndwntwn21", "vgnofic1_256" },
    { 6908, "vgndwntwn21", "vgnofic2_256" },
    { 6908, "vgndwntwn21", "vgnshopwal2_256" },
    { 6908, "vgndwntwn21", "vgnshopwal3_256" },
    { 6908, "vgndwntwn21", "vgnwstshop3_256" },
    { 6908, "vgndwntwn21", "vgnwstshoptop2_256" },
    { 6868, "vgndwntwn22", "vgnlowbuild1_256" },
    { 6868, "vgndwntwn22", "vgnlowbuild2_128" },
    { 6868, "vgndwntwn22", "vgnlowbuild4_256" },
    { 6868, "vgndwntwn22", "vgnlowbuild5_256" },
    { 6868, "vgndwntwn22", "vgnlowbuild6_256" },
    { 6868, "vgndwntwn22", "vgnlowbuild7_256" },
    { 6865, "vgndwntwn23", "steaksign1_256" },
    { 6865, "vgndwntwn23", "steaksign2_256" },
    { 6865, "vgndwntwn23", "Stekullvegas2" },
    { 6865, "vgndwntwn23", "vgnbordpnk2_256" },
    { 6865, "vgndwntwn23", "vgnpawnshrt_256" },
    { 6865, "vgndwntwn23", "vgnwstshop2_256" },
    { 6865, "vgndwntwn23", "ws_corr_wall2" },
    { 6872, "vgndwntwn5", "artsoul1_256" },
    { 6872, "vgndwntwn5", "fitzwallvgn2_256" },
    { 6872, "vgndwntwn5", "fountain6_256" },
    { 6872, "vgndwntwn5", "glasswindow5_256" },
    { 6872, "vgndwntwn5", "glasswindow6_256" },
    { 6872, "vgndwntwn5", "venetfount1_256" },
    { 6872, "vgndwntwn5", "venetfount2_256" },
    { 6872, "vgndwntwn5", "venetfount3_128" },
    { 6872, "vgndwntwn5", "vgnledge1_128" },
    { 7525, "vgnfirestat", "desertgravelsand" },
    { 7525, "vgnfirestat", "hangersign01_256" },
    { 7525, "vgnfirestat", "vegasfiredept1_256" },
    { 7525, "vgnfirestat", "vgnfirestat1_256" },
    { 7525, "vgnfirestat", "vgnfirestat4_256" },
    { 7525, "vgnfirestat", "vgnwrehse1_256" },
    { 7525, "vgnfirestat", "vgn_pinkfirestat_256" },
    { 7490, "vgnfrates", "resaurantsign1_256" },
    { 7490, "vgnfrates", "sanpshop1" },
    { 7490, "vgnfrates", "vgnwrehsewal1_256" },
    { 7490, "vgnfrates", "vgnwrehsewal2_256" },
    { 6988, "vgnfremnt1", "casinobulb2_128n" },
    { 6988, "vgnfremnt1", "casinodoor_frmnt" },
    { 6988, "vgnfremnt1", "casinofront_256" },
    { 6988, "vgnfremnt1", "casinohotel5_256" },
    { 6988, "vgnfremnt1", "casinolights1b_128n" },
    { 6988, "vgnfremnt1", "casinolights1_128" },
    { 6988, "vgnfremnt1", "casinolights2_128" },
    { 6988, "vgnfremnt1", "casinolights2_128n" },
    { 6988, "vgnfremnt1", "casinolights3_128" },
    { 6988, "vgnfremnt1", "casinolights3_128n" },
    { 6988, "vgnfremnt1", "casinolights5_256" },
    { 6988, "vgnfremnt1", "casinolights6lit3_256" },
    { 6988, "vgnfremnt1", "casinolights6_256" },
    { 6988, "vgnfremnt1", "casinolights7_256" },
    { 6988, "vgnfremnt1", "casinolights9_256" },
    { 6988, "vgnfremnt1", "casinolit2_128" },
    { 6988, "vgnfremnt1", "casinopillar1_256" },
    { 6988, "vgnfremnt1", "casinoshop32_256" },
    { 6988, "vgnfremnt1", "casinoside2_256" },
    { 6988, "vgnfremnt1", "casinosign1_128" },
    { 6988, "vgnfremnt1", "casinosign1_256" },
    { 6988, "vgnfremnt1", "casinosign2_128" },
    { 6988, "vgnfremnt1", "casinowall1_256" },
    { 6988, "vgnfremnt1", "casinowall2_256" },
    { 6988, "vgnfremnt1", "casinowall5_256" },
    { 6988, "vgnfremnt1", "freemontsign1_256" },
    { 6988, "vgnfremnt1", "goldframe_256" },
    { 6988, "vgnfremnt1", "hotelsignvgn1_256" },
    { 6988, "vgnfremnt1", "scmgarage1_128" },
    { 6988, "vgnfremnt1", "vgnhotelwin1" },
    { 6988, "vgnfremnt1", "vgnhotelwin2" },
    { 6985, "vgnfremnt2", "casinoawn1_128" },
    { 6985, "vgnfremnt2", "casinoawn2_256" },
    { 6985, "vgnfremnt2", "casinobulb3_128" },
    { 6985, "vgnfremnt2", "casinohotel1_256" },
    { 6985, "vgnfremnt2", "casinolights8_128" },
    { 6985, "vgnfremnt2", "casinoshop1_256" },
    { 6985, "vgnfremnt2", "casinoshop2_256" },
    { 6985, "vgnfremnt2", "casinoshop4_256" },
    { 6985, "vgnfremnt2", "casinouper1_256" },
    { 6985, "vgnfremnt2", "casinouper2_256" },
    { 6985, "vgnfremnt2", "casinowall42_256" },
    { 6985, "vgnfremnt2", "casinowall4_128" },
    { 6985, "vgnfremnt2", "girlsneon_256" },
    { 6985, "vgnfremnt2", "striplightsblu_256" },
    { 6985, "vgnfremnt2", "striplightsgreen_256" },
    { 6985, "vgnfremnt2", "striplightsorange_256" },
    { 6985, "vgnfremnt2", "striplightspinky_256" },
    { 6985, "vgnfremnt2", "striplightsred_256" },
    { 6985, "vgnfremnt2", "striplightsyel_256" },
    { 6985, "vgnfremnt2", "vegassign1_256" },
    { 6985, "vgnfremnt2", "vgnbordpurp1_256" },
    { 6985, "vgnfremnt2", "vgnbordpurp2_256" },
    { 6985, "vgnfremnt2", "vgndwntwn3_256_256" },
    { 6985, "vgnfremnt2", "vgnhotelwall1_256" },
    { 6985, "vgnfremnt2", "vgntext1_256" },
    { 6985, "vgnfremnt2", "vgsN_casadd01" },
    { 6985, "vgnfremnt2", "vgs_casino_neon" },
    { 6985, "vgnfremnt2", "washmallotsd_256" },
    { 7073, "vgnfremntsgn", "averysign1_256" },
    { 7073, "vgnfremntsgn", "averysign2_256" },
    { 7073, "vgnfremntsgn", "averysigneon1a_256" },
    { 7073, "vgnfremntsgn", "averysigneon2a_256" },
    { 7073, "vgnfremntsgn", "candysign1_256" },
    { 7530, "vgngebuild", "vgngewall3_256" },
    { 7530, "vgngebuild", "vgngewall4_256" },
    { 7530, "vgngebuild", "vgngewall5_256" },
    { 7530, "vgngebuild", "vgngewall6_256" },
    { 7420, "vgnglfcrse1", "des_dirt1_glfhvy" },
    { 7420, "vgnglfcrse1", "fence_iron_256" },
    { 7420, "vgnglfcrse1", "glfclbhsesign_256" },
    { 7420, "vgnglfcrse1", "golf_fairway3" },
    { 7420, "vgnglfcrse1", "hotel2base1_256" },
    { 7420, "vgnglfcrse1", "hotel2base2_256" },
    { 7420, "vgnglfcrse1", "sandstone2_128" },
    { 7420, "vgnglfcrse1", "seabed" },
    { 6876, "vgnground", "crossing_law2" },
    { 6876, "vgnground", "vegasroad3_256" },
    { 6886, "vgnground3", "crossing_law3" },
    { 6886, "vgnground3", "vegasdirtypave1_256" },
    { 6886, "vgnground3", "vegasdirtypave2_256" },
    { 6886, "vgnground3", "vegasdirtyroad1_256" },
    { 6886, "vgnground3", "vegasdirtyroad2_256" },
    { 6886, "vgnground3", "vgsN_road2sand01" },
    { 6886, "vgnground3", "vgsN_road2sand02" },
    { 6886, "vgnground3", "ws_carparknew2c" },
    { 3455, "vgnhseblk1", "vnghse1_256" },
    { 3455, "vgnhseblk1", "vnghse2_256" },
    { 3455, "vgnhseblk1", "vnghse3_128" },
    { 6919, "vgnhseing1", "vgnhseledgw2_64" },
    { 6919, "vgnhseing1", "vgnwrehse8_256" },
    { 7518, "vgnhseland", "vgnhsewall1_256" },
    { 6882, "vgnland", "con2sand1a" },
    { 6882, "vgnland", "con2sand1b" },
    { 6882, "vgnland", "con2sand1c" },
    { 6882, "vgnland", "des_scrub1_dirt1a" },
    { 6882, "vgnland", "des_scrub1_dirt1b" },
    { 6882, "vgnland", "hiway2sand1a" },
    { 6882, "vgnland", "hiwaygravel1_256" },
    { 6882, "vgnland", "ws_carparknew2b" },
    { 6882, "vgnland", "ws_oldredbrick64" },
    { 7526, "vgnlowbild", "24hoursign1_256" },
    { 7526, "vgnlowbild", "cashloans1_256" },
    { 7526, "vgnlowbild", "gaygordos_128" },
    { 7526, "vgnlowbild", "pavedark128" },
    { 7526, "vgnlowbild", "touristbureau_256" },
    { 7526, "vgnlowbild", "vegaspillar12_128" },
    { 7526, "vgnlowbild", "vgnlowbildwal1_256" },
    { 3460, "vgnlpost", "lamppost2" },
    { 6947, "vgnmall", "vgncarwash2_128" },
    { 6947, "vgnmall", "vgnpizzawindow_256" },
    { 7019, "vgnoutown2", "vgnwrehse5_256" },
    { 7019, "vgnoutown2", "vgnwrehse6_256" },
    { 7019, "vgnoutown2", "vgnwrehse7_256" },
    { 7103, "vgnplantgen", "metalwheel3_128" },
    { 7103, "vgnplantgen", "metalwheel4_128" },
    { 7103, "vgnplantgen", "metalwheel5" },
    { 7103, "vgnplantgen", "metalwheel5_128" },
    { 6909, "vgnptrlpmp", "soapytitwank_256" },
    { 6909, "vgnptrlpmp", "vgnstripwal1_128" },
    { 6867, "vgnpwrmainbld", "hazwaste1_256" },
    { 6867, "vgnpwrmainbld", "sw_wallbrick_02" },
    { 6929, "vgnpwroutbld1", "sw_stresswall1" },
    { 6931, "vgnpwroutbld3", "plant_tank" },
    { 7024, "vgnpwrwhse", "Bow_Load_Door" },
    { 6912, "vgnrailroad", "conchev_64HV" },
    { 6912, "vgnrailroad", "railwy_tun" },
    { 7506, "vgnretail2", "vgnmetalwall1_256" },
    { 7506, "vgnretail2", "vgnmetalwall2_256" },
    { 7506, "vgnretail2", "vgnmetalwall5_256" },
    { 7506, "vgnretail2", "vgnmetalwall6_256" },
    { 7508, "vgnretail3", "counter01_law" },
    { 7508, "vgnretail3", "garageledge01_64" },
    { 7094, "vgnretail5", "carparksign02_128" },
    { 7094, "vgnretail5", "sw_trellis_64" },
    { 7094, "vgnretail5", "vegasclub01_128" },
    { 7094, "vgnretail5", "vegasclub02_128" },
    { 7094, "vgnretail5", "vegasclubledge_128" },
    { 7094, "vgnretail5", "vgsclubwall01_128" },
    { 7094, "vgnretail5", "VgsN_wedtack1b" },
    { 6922, "vgnretail6", "marinawindow2_256" },
    { 6922, "vgnretail6", "vgsn_chplroof" },
    { 6922, "vgnretail6", "vgsn_chplwall" },
    { 6922, "vgnretail6", "wddngchapel02_64" },
    { 6922, "vgnretail6", "wddngchapel03_64" },
    { 6922, "vgnretail6", "wddngchapelsign03_128" },
    { 6922, "vgnretail6", "wddngchapelsign04_128" },
    { 6922, "vgnretail6", "wddngchapelsign08_256" },
    { 6922, "vgnretail6", "wddngchplldge01_64" },
    { 6922, "vgnretail6", "wddngchplldge03_64" },
    { 6924, "vgnretail7", "erotic_wc_256" },
    { 6924, "vgnretail7", "vgnwedding1_256" },
    { 6924, "vgnretail7", "vgnwedding2_256" },
    { 7520, "vgnretail72", "gasstop1_256" },
    { 7520, "vgnretail72", "solairtyre64" },
    { 7520, "vgnretail72", "solairwheel64" },
    { 7520, "vgnretail72", "vgnmetalwall4_256" },
    { 7015, "vgnscaffold", "vgsnscafold_256" },
    { 7015, "vgnscaffold", "vgsnscfldclr_256" },
    { 6873, "vgnshambild1", "cparknumbers1a_128" },
    { 6873, "vgnshambild1", "fitzwallvgn1_256" },
    { 6873, "vgnshambild1", "fitzwallvgn3_256" },
    { 6873, "vgnshambild1", "fitzwallvgn6_256" },
    { 6873, "vgnshambild1", "glasswindow3b_256" },
    { 6873, "vgnshambild1", "vgsN_emerald" },
    { 6971, "vgnshamcpark", "fitzwallvgn4_256" },
    { 6971, "vgnshamcpark", "fitzwallvgn5_256" },
    { 6944, "vgnshopnmall", "gaulle_3" },
    { 6944, "vgnshopnmall", "prolaps01_small" },
    { 6944, "vgnshopnmall", "vgnmetalwall3_256" },
    { 6978, "vgnstrfshsign", "vgncasign32_256" },
    { 7489, "vgntamotel", "Bow_dryclean_floor" },
    { 7489, "vgntamotel", "freestwall1" },
    { 7489, "vgntamotel", "gingerwig_128" },
    { 7489, "vgntamotel", "motelsign2_256" },
    { 7489, "vgntamotel", "vegmotelsign2_256" },
    { 7489, "vgntamotel", "vgnacmotel2_256" },
    { 7489, "vgntamotel", "vgnacmotel5_128" },
    { 7489, "vgntamotel", "vgncoctart1_256" },
    { 7511, "vgntrainstat", "awning4256" },
    { 7511, "vgntrainstat", "metaliron1_128" },
    { 7511, "vgntrainstat", "venetian15_128" },
    { 7650, "vgnusedcar", "greenshade4_64" },
    { 7650, "vgnusedcar", "lightblue2_32" },
    { 7650, "vgnusedcar", "lightgreen2_32" },
    { 7650, "vgnusedcar", "lightpurple2_32" },
    { 7650, "vgnusedcar", "lightyellow2_32" },
    { 7650, "vgnusedcar", "marinadoor2_256" },
    { 7650, "vgnusedcar", "shody1_256" },
    { 6864, "vgnvrock", "ampback_256" },
    { 6864, "vgnvrock", "ampfront_256" },
    { 6864, "vgnvrock", "vrocksign1_256" },
    { 6864, "vgnvrock", "VRockwall_256" },
    { 6864, "vgnvrock", "VRockwins_256" },
    { 8044, "vgsairport", "LasVenturasAirport_256" },
    { 3496, "vgsbballnet1", "bballboard2_256" },
    { 8136, "vgsbikeschool", "gravelground128" },
    { 8419, "vgsbldng1", "buildng01wind2_64" },
    { 8419, "vgsbldng1", "buildng01wind_128" },
    { 8419, "vgsbldng1", "buildng01_64" },
    { 8419, "vgsbldng1", "cityplansign01_256" },
    { 8419, "vgsbldng1", "hotbasebot_law" },
    { 3431, "vgsclubox", "vgsclubdsply_128" },
    { 8842, "vgse24hr", "takeaway1" },
    { 8567, "vgsebuild02", "airconfrnt2_128" },
    { 8567, "vgsebuild02", "la_brownhibuilda" },
    { 8567, "vgsebuild02", "la_brownhibuildb" },
    { 8567, "vgsebuild02", "vgsderelict01_128" },
    { 8567, "vgsebuild02", "vgsderelict02_128" },
    { 8567, "vgsebuild02", "vgsderelict03_128" },
    { 8567, "vgsebuild02", "vgsderelict04_128" },
    { 8567, "vgsebuild02", "vgsderelict05_128" },
    { 8567, "vgsebuild02", "vgsderelictdoor_128" },
    { 8867, "vgsecnstrct01", "concretewall21_256" },
    { 8870, "vgsecnstrct03", "newscafold_256" },
    { 8870, "vgsecnstrct03", "scafoldclear_256" },
    { 8491, "vgseflmngonion", "flmngo11_128" },
    { 8491, "vgseflmngonion", "flmngosign01" },
    { 8463, "vgseland", "tiadbuddhagold" },
    { 8463, "vgseland", "triadcarpet" },
    { 8463, "vgseland", "triadcarpet2" },
    { 8438, "vgseroads", "blendpavement2b_256" },
    { 14711, "vgshm2int2", "HS2_2Carpet1" },
    { 14711, "vgshm2int2", "HS2_4wall1" },
    { 14711, "vgshm2int2", "HS2_wall5" },
    { 14711, "vgshm2int2", "HSV_carpet1" },
    { 14711, "vgshm2int2", "HSV_carpet2" },
    { 14711, "vgshm2int2", "HSV_wall1" },
    { 14711, "vgshm2int2", "HSV_wall2" },
    { 14711, "vgshm2int2", "HSV_wall4" },
    { 14710, "vgshm3int2", "HS1_Shade4" },
    { 14710, "vgshm3int2", "HSV_2carpet1" },
    { 14710, "vgshm3int2", "HSV_3carpet1" },
    { 14710, "vgshm3int2", "HSV_3carpet2" },
    { 14710, "vgshm3int2", "HSV_3wall1" },
    { 14710, "vgshm3int2", "HSV_3wall2" },
    { 14710, "vgshm3int2", "HSV_3wall3" },
    { 14710, "vgshm3int2", "HSV_3wall4" },
    { 14710, "vgshm3int2", "HSV_3wall5" },
    { 8401, "vgshpground", "carparksign03_128" },
    { 8401, "vgshpground", "parkinghut01_128" },
    { 8401, "vgshpground", "parkinghut02_128" },
    { 8401, "vgshpground", "parkinghutdoor_128" },
    { 8401, "vgshpground", "parkingsign01_128" },
    { 8401, "vgshpground", "vegaspawn01_128" },
    { 8401, "vgshpground", "vegaspawnwall02_128" },
    { 8401, "vgshpground", "vgspawnroof01_128" },
    { 14700, "vgshs2int2", "ah_rouren" },
    { 14700, "vgshs2int2", "ah_SCMFLR" },
    { 14700, "vgshs2int2", "ah_wwornskt" },
    { 8947, "vgslockup", "vegasoffice05_128" },
    { 8495, "vgsmall", "vgncarwash1_256" },
    { 6863, "vgsnbuild07", "vegasbank1_256" },
    { 6863, "vgsnbuild07", "vegasbank2_256" },
    { 6863, "vgsnbuild07", "vegasbank3_256" },
    { 6863, "vgsnbuild07", "vgndwntwn1_256_256" },
    { 6863, "vgsnbuild07", "vgndwntwn2_256_256" },
    { 3502, "vgsncircon", "woodsuport1_128" },
    { 3502, "vgsncircon", "woodsuport2_128" },
    { 7300, "vgsn_billboard", "homies_1_128" },
    { 3475, "vgsn_fncelec_pst", "ws_oldpainted_64" },
    { 3505, "vgsn_nitree", "vgsN_rope" },
    { 3521, "vgsn_rbstiff", "randysign1_256" },
    { 3521, "vgsn_rbstiff", "randysign2_256" },
    { 8434, "vgsoffice1", "vegasoffice01_128" },
    { 8434, "vgsoffice1", "vegasoffice02_128" },
    { 8434, "vgsoffice1", "vegasoffice03_128" },
    { 8434, "vgsoffice1", "vegasoffice04_256" },
    { 8434, "vgsoffice1", "vegasoffice06" },
    { 7978, "vgssairport", "aascaff_yellow" },
    { 7978, "vgssairport", "airportwindow02_128" },
    { 7978, "vgssairport", "Industdoor9white" },
    { 7978, "vgssairport", "newall16white" },
    { 7978, "vgssairport", "newall_harling_sless" },
    { 7978, "vgssairport", "venturasairsign1" },
    { 7978, "vgssairport", "weatheredwood64HV" },
    { 7981, "vgssairport02", "airsign2_64" },
    { 7981, "vgssairport02", "alleydoorz256" },
    { 7981, "vgssairport02", "chevronYB_64" },
    { 7981, "vgssairport02", "danger" },
    { 7981, "vgssairport02", "drivecare_64" },
    { 7981, "vgssairport02", "exit_noexit128" },
    { 7981, "vgssairport02", "metalcopy" },
    { 7981, "vgssairport02", "ws_airsecurity" },
    { 8130, "vgsschurch", "vgschapelwall01_64" },
    { 8130, "vgsschurch", "vgschrchwndow01_128" },
    { 8130, "vgsschurch", "vgschurchdoor01_128" },
    { 8130, "vgsschurch", "vgschurchdoor03_128" },
    { 8130, "vgsschurch", "vgschurchmural01_256" },
    { 8130, "vgsschurch", "vgschurchroof01_128" },
    { 8130, "vgsschurch", "vgschurchsign01_256" },
    { 8130, "vgsschurch", "vgschurchwall03_128" },
    { 8130, "vgsschurch", "vgschurchwall04_256" },
    { 8130, "vgsschurch", "vgschurchwall06_256" },
    { 8147, "vgsselecfence", "vgsSmetalgate01" },
    { 7993, "vgsshiways", "hiwayinsideblend1_256" },
    { 8035, "vgsshospshop", "bincoLogo" },
    { 8035, "vgsshospshop", "desgrassbrnsnd" },
    { 8035, "vgsshospshop", "hosp_sign01a" },
    { 8035, "vgsshospshop", "hosp_sign01b" },
    { 8035, "vgsshospshop", "hosp_sign01c" },
    { 8035, "vgsshospshop", "vgsShospsign01" },
    { 8035, "vgsshospshop", "wok&roll1_2256" },
    { 8006, "vgssland", "desgrasandblend" },
    { 8006, "vgssland", "hiwayblend1_256" },
    { 7996, "vgssland01", "greyground2sand" },
    { 8001, "vgssland03", "Upt_Conc floor" },
    { 8037, "vgssmulticarprk", "vgsSstonewall01" },
    { 7987, "vgssroads", "blendpavement2_256" },
    { 7987, "vgssroads", "road1256" },
    { 8322, "vgsssignage02", "dirtringtex1_256" },
    { 8293, "vgsssignage03", "electrics01" },
    { 8071, "vgsswarehse01", "vgswrehouse01_128" },
    { 8071, "vgsswarehse01", "vgswrehouse02_128" },
    { 8057, "vgsswarehse02", "GB_truckdepot10" },
    { 8057, "vgsswarehse02", "GB_truckdepot16" },
    { 8057, "vgsswarehse02", "Nu-chem_64" },
    { 8057, "vgsswarehse02", "shafted01" },
    { 8057, "vgsswarehse02", "vgsScautionsign01" },
    { 8057, "vgsswarehse02", "ws_RShaul_transp_M" },
    { 8057, "vgsswarehse02", "ws_warehousewall1" },
    { 7985, "vgsswarehse02c", "garageledge02_64" },
    { 7985, "vgsswarehse02c", "GB_truckdepot12" },
    { 7985, "vgsswarehse02c", "muddywater" },
    { 7985, "vgsswarehse02c", "vgsSnewshop03" },
    { 7985, "vgsswarehse02c", "vgsSpinkshop01" },
    { 7985, "vgsswarehse02c", "vgsSpinkshop02" },
    { 7985, "vgsswarehse02c", "vgsSpinkshop03" },
    { 7985, "vgsswarehse02c", "vgsSpinkshop04" },
    { 7985, "vgsswarehse02c", "vgsSshopnew02" },
    { 7985, "vgsswarehse02c", "wddngchapelsign06_128" },
    { 8034, "vgsswarhse04", "flightschoolwall01_128" },
    { 8034, "vgsswarhse04", "GB_truckdepot14" },
    { 8034, "vgsswarhse04", "vgsSfltschool01" },
    { 8065, "vgsswrehse03", "sumo" },
    { 8065, "vgsswrehse03", "vgswrhsign01" },
    { 8399, "vgs_shops", "vegasclubmural_128" },
    { 8399, "vgs_shops", "vgsclubwall02_128" },
    { 8399, "vgs_shops", "vgsclubwall03_128" },
    { 8399, "vgs_shops", "vgsclubwall08_256" },
    { 8399, "vgs_shops", "vgs_shpfrnt01_128" },
    { 8399, "vgs_shops", "vgs_shpfrnt02_128" },
    { 8399, "vgs_shops", "villainn02_256" },
    { 8399, "vgs_shops", "villainnwall01_128" },
    { 8201, "vgs_stadium", "dirtringtex2_256" },
    { 8201, "vgs_stadium", "dirtringtex3_256" },
    { 7492, "vgwestabats", "vgnabatwal1_256" },
    { 7492, "vgwestabats", "vgnabatwal2_256" },
    { 7492, "vgwestabats", "vgnabatwal3_256" },
    { 7492, "vgwestabats", "vgnabatwal4_256" },
    { 7448, "vgwestcoast", "golf_hvygras_cpark" },
    { 7452, "vgwestland", "des_dirt1_grass" },
    { 7509, "vgwestretail1", "hedge2_256" },
    { 7681, "vgwsavehses", "carparksignplate_64" },
    { 7681, "vgwsavehses", "villainnpipe_64" },
    { 7429, "vgwstdirtyrd", "vegasdirtypaveblend1" },
    { 7429, "vgwstdirtyrd", "vegasdirtypaveblend2" },
    { 7429, "vgwstdirtyrd", "vegasdirtyroad3_256" },
    { 7429, "vgwstdirtyrd", "vgsroadirt1_256" },
    { 7429, "vgwstdirtyrd", "vgsroadirt2_256" },
    { 7415, "vgwwelcome", "lvswelcomesign01_512" },
    { 7415, "vgwwelcome", "lvswelvomesign02" },
    { 7415, "vgwwelcome", "ws_coppersheet2" },
    { 2025, "wardrobe_tmp", "wardrobe_1128" },
    { 5174, "warehus_las2", "cmpwarhus1" },
    { 5174, "warehus_las2", "las2_dcwal1" },
    { 5174, "warehus_las2", "las2_dcwal2" },
    { 5134, "wasteland_las2", "ja_gencheapmx" },
    { 5134, "wasteland_las2", "ja_sgcombo3" },
    { 5134, "wasteland_las2", "mural05_LA" },
    { 5134, "wasteland_las2", "snpedsigx1" },
    { 5134, "wasteland_las2", "snpedsigx2" },
    { 8412, "wddngchpl", "wddngchapelsign01_256" },
    { 8675, "wddngchpl02", "vgschapelwall02_128" },
    { 8675, "wddngchpl02", "wddngchapeldoor01_128" },
    { 8675, "wddngchpl02", "wddngchapeldoor02_128" },
    { 8675, "wddngchpl02", "wddngchapelwndw01_128" },
    { 8675, "wddngchpl02", "wddngchapelwndw02" },
    { 8676, "wddngchplsign2", "wddngchapelsign05_256" },
    { 17298, "weefarmcuntw", "sjmbigold3" },
    { 17298, "weefarmcuntw", "sjmbigoldgut" },
    { 17298, "weefarmcuntw", "sjmbigoldwin" },
    { 17298, "weefarmcuntw", "sjmscruffhut4" },
    { 3925, "weemap", "skyclouds" },
    { 1649, "wglass", "carshowwin2" },
    { 14738, "whorebar", "AH_Architrave" },
    { 14738, "whorebar", "AH_blueceiling" },
    { 14738, "whorebar", "AH_cheapwhoremainwall" },
    { 14738, "whorebar", "AH_cheapwindow" },
    { 14738, "whorebar", "AH_fbatters" },
    { 14738, "whorebar", "AH_mirror" },
    { 14738, "whorebar", "AH_tile" },
    { 14738, "whorebar", "AH_wdblinds" },
    { 14738, "whorebar", "AH_whoredoor" },
    { 14738, "whorebar", "skirting" },
    { 14739, "whorebits", "AH_barchair" },
    { 14739, "whorebits", "AH_bartop" },
    { 14739, "whorebits", "AH_beercabinet2" },
    { 14739, "whorebits", "AH_cheapbarpan" },
    { 14739, "whorebits", "AH_speakbig" },
    { 14739, "whorebits", "AH_wdpanelback" },
    { 14739, "whorebits", "sink" },
    { 14736, "whorerooms", "AH_bathbigblu" },
    { 14736, "whorerooms", "AH_bathmos" },
    { 14736, "whorerooms", "AH_bathplanks" },
    { 14736, "whorerooms", "AH_dirt1" },
    { 14736, "whorerooms", "AH_flrwll" },
    { 14736, "whorerooms", "AH_grncarpet" },
    { 14736, "whorerooms", "blu_paper" },
    { 14736, "whorerooms", "blu_paper2" },
    { 14737, "whorewallstuff", "AH_dirtypix2" },
    { 14737, "whorewallstuff", "AH_drinkshelf" },
    { 14737, "whorewallstuff", "AH_fbatters2" },
    { 14737, "whorewallstuff", "AH_paintbond" },
    { 14737, "whorewallstuff", "ah_painting1" },
    { 14737, "whorewallstuff", "ah_painting2" },
    { 14737, "whorewallstuff", "Pict1" },
    { 14816, "whore_furn", "WH_flowers1" },
    { 14816, "whore_furn", "WH_keys" },
    { 14815, "whore_main", "WH_carpet3" },
    { 14815, "whore_main", "WH_tiles" },
    { 14815, "whore_main", "WH_tiles2" },
    { 14815, "whore_main", "WH_Wall" },
    { 14817, "whore_rms", "WH_boa1" },
    { 14817, "whore_rms", "WH_boots" },
    { 14817, "whore_rms", "WH_Clit" },
    { 14817, "whore_rms", "WH_Cpot" },
    { 14817, "whore_rms", "WH_fan2" },
    { 14817, "whore_rms", "WH_gown" },
    { 14817, "whore_rms", "WH_gown2" },
    { 14817, "whore_rms", "WH_horse" },
    { 14817, "whore_rms", "WH_netC" },
    { 14817, "whore_rms", "WH_netC2" },
    { 14817, "whore_rms", "WH_Rug1" },
    { 14817, "whore_rms", "WH_stetson" },
    { 4981, "wiresetc2_las", "ganggraf03_LA" },
    { 4981, "wiresetc2_las", "lasunionclk" },
    { 4981, "wiresetc2_las", "unity1" },
    { 5150, "wiresetc_las2", "ganggraf01_LA_m" },
    { 5150, "wiresetc_las2", "lastat4_M" },
    { 10695, "wires_sfs", "ws_telwiresnew1" },
    { 3031, "wngdishx", "dish1" },
    { 3031, "wngdishx", "dish_leg" },
    { 3031, "wngdishx", "metal_leg" },
    { 3030, "wong_twx", "kb_radiomast_burnt" },
    { 1675, "wshxrefhse", "decodoor5256" },
    { 1675, "wshxrefhse", "duskyblue_128" },
    { 1675, "wshxrefhse", "greygreensubuild_128" },
    { 1675, "wshxrefhse", "resimexwin4_256" },
    { 1675, "wshxrefhse", "washdecowall3256" },
    { 1677, "wshxrefhse2", "awning1256" },
    { 1677, "wshxrefhse2", "tilestone256" },
    { 1677, "wshxrefhse2", "yellowbeige_128" },
    { 1676, "wshxrefpump", "petrolpumpbase_256" },
    { 1676, "wshxrefpump", "petrolpumptop_128" },
    { 3879, "ws_jetty_sfx", "northwood3_64" },
    { 3879, "ws_jetty_sfx", "ws_algae_concrete" },
    { 3879, "ws_jetty_sfx", "ws_jeepwheel" },
    { 1319, "ws_roadside_dyn1", "ws_roadpost" },
    { 1319, "ws_roadside_dyn1", "ws_roadwarnings" },
    { 18200, "w_town2cs_t", "Bow_door_graffiti_128" },
    { 18200, "w_town2cs_t", "corrugated02_red" },
    { 18200, "w_town2cs_t", "dogpillar_128" },
    { 18200, "w_town2cs_t", "inwindow1128" },
    { 18200, "w_town2cs_t", "mottled_creme_64HV" },
    { 18200, "w_town2cs_t", "shoptopc128" },
    { 18200, "w_town2cs_t", "shoptopd128" },
    { 18200, "w_town2cs_t", "yellowbuilda256" },
    { 18265, "w_town3cs_t", "inddoor5" },
    { 18265, "w_town3cs_t", "sjmscruffhut2" },
    { 18202, "w_towncs_t", "hatwall256hi" },
    { 18202, "w_towncs_t", "husdr" },
    { 18202, "w_towncs_t", "husruf" },
    { 18202, "w_towncs_t", "mp_pinesheriff" },
    { 18202, "w_towncs_t", "pax256hi" },
    { 18202, "w_towncs_t", "sh256hi" },
    { 18202, "w_towncs_t", "shpbill256hi" },
    { 18202, "w_towncs_t", "shpcam2561hi" },
    { 18202, "w_towncs_t", "shphr1hi" },
    { 18202, "w_towncs_t", "shpton256hi" },
    { 18202, "w_towncs_t", "sjmroof1" },
    { 10789, "xenon_sfse", "ws_xenomart" },
    { 3439, "xrefairtree", "rustadark128" },
    { 3439, "xrefairtree", "treepropleaf01" }
}; */

// Silah sistemi
#define MAX_MERMI_DEAGLE       (50)
#define MAX_MERMI_AK47         (90)
#define MAX_MERMI_M4           (150)
#define MAX_MERMI_SHOTGUN      (35)
#define MAX_MERMI_COLT         (68)
#define MAX_MERMI_SILENCED     (68)
#define MAX_MERMI_TEC9         (150)
#define MAX_MERMI_UZI          (150)
#define MAX_MERMI_MP5          (90)
#define MAX_MERMI_RIFLE        (30)
#define MAX_MERMI_SNIPER       (30)
#define MAX_MERMI_SAWNOFF      (40)

#define MAX_WEAPON_HOUSE       (40)

/*Enum*/
enum Silah_Bilgi_Enum
{
	sSilahID[13],
	sMermi[13],
	sMermiTD_UpdateTime,
	PlayerText:MermiTD
}
new Silah_Bilgi[MAX_PLAYERS][Silah_Bilgi_Enum];

new const SilahSlotuBul[] =
{
	0, // Fist
	0, // Brass Knuckles
	1, // Golf Club
	1, // Nightstick
	1, // Knife
	1, // Baseball Bat
	1, // Shovel
	1, // Pool Cue
	1, // Katana
	1, // Chainsaw
	10, // Purple Dildo
	10, // Dildo
	10, // Vibrator
	10, // Small Vibrator
	10, // Flowers
	10, // Cane
	8, // Grenade
	8, // Tear Gas
	8, // Molotov Cocktail
	0, //
	0, //
	0, //
	2, // 9mm
	2, // Silenced 9mm
	2, // Desert Eagle
	3, // Shotgun
	3, // Sawnoff Shotgun
	3, // Combat Shotgun
	4, // Micro SMG
	4, // MP5
	5, // AK-47
	5, // M4
	4, // Tec-9
	6, // Country Rifle
	6, // Sniper Rifle
	7, // Rocket Launcher
	7, // Heat Seeker
	7, // Flamethrower
	7, // Minigun
	8, // Satchel Charge
	12, // Detonator
	9, // Spraycan
	9, // Fire Extinguisher
	9, // Camera
	11, // Night Vis. Goggles
	11, // Thermal Goggles
	11 // Parachute
};

enum weaponSettings
{
	Float:Position[6],
	Bone,
	Hidden,
	duzenlendi
}
new WeaponSettings[MAX_PLAYERS][17][weaponSettings], WeaponTick[MAX_PLAYERS], EditingWeapon[MAX_PLAYERS];

//Vehicle Types
#define VEHICLE_TYPE_INVALID 	(0)
#define VEHICLE_TYPE_PLANE 		(1)
#define VEHICLE_TYPE_HELI 		(2)
#define VEHICLE_TYPE_BIKE 		(3)
#define VEHICLE_TYPE_MBIKE 		(4)
#define VEHICLE_TYPE_BOAT 		(5)
#define VEHICLE_TYPE_TRAILER 	(6)
#define VEHICLE_TYPE_VEHICLE 	(7)

new MeslekDogrulama[MAX_PLAYERS];
new tmpobjid;
new TircilikMeslekDogrulama[MAX_PLAYERS];
new bunnySuspect[MAX_PLAYERS];
new g_aFireObjects[36] = {INVALID_OBJECT_ID, ...};
new g_aFireExtinguished[36];
new Float:playerEskiPos[MAX_PLAYERS][4];
new Sedye[MAX_PLAYERS];
new Saved[MAX_PLAYERS];
new Float:SAVEposX[MAX_PLAYERS];
new Float:SAVEposY[MAX_PLAYERS];
new Float:SAVEposZ[MAX_PLAYERS];
new Float:SAVEposA[MAX_PLAYERS];
new SAVEInterior[MAX_PLAYERS];
new SAVEVirtualWorld[MAX_PLAYERS];

new PlayerText:spectate_TD[MAX_PLAYERS][2];

new PlayerText: playerhud[MAX_PLAYERS][6];

enum E_ServerTD {
    Text:std_DarkScreen
}
new ServerTextdraws[E_ServerTD];
new PlayerText:OnayliHoodGirisTD[MAX_PLAYERS][1];
new PlayerText:cWspeedo[MAX_PLAYERS][10];

new PlayerText: carsexhud[MAX_PLAYERS][14];
/////////////////////////////////////////////////


new bool:HUD_Created[MAX_PLAYERS];
//new bool:HudStatus[MAX_PLAYERS];
//new PlayerText:HudTextDraw[MAX_PLAYERS];

//new PlayerText: drug_effect[MAX_PLAYERS];

new Text: TD_vehicle_info[2];
//new PlayerText: TD_vehicle_name[MAX_PLAYERS];

new Text: TD_restaurant[4];
new PlayerText: TD_restaurant_prod[MAX_PLAYERS][8]; //0-3 - ???????? ????, 4 - 7 - ????????

new Text: Developer;
new Text: Admin;

/* LABELS */
new PlayerText: mulkbilgi[MAX_PLAYERS];
new PlayerText: mulktext[MAX_PLAYERS][2];

//new Text:errormsg[MAX_PLAYERS];
new PlayerText: TD_job_message[MAX_PLAYERS][1];
new Text: infotxt[MAX_PLAYERS];

new Text: zond_cam[11];

enum SPEEDOMETR_DATA
{
	speedFont,
	Float:speedX,
    Float:speedY,
	Float:speedLX,
    Float:speedLY
};


new const speedSettings[4][SPEEDOMETR_DATA] =
{
// FONT         CORDS                   LetterSize
    {1,     497.9165, 105.4813,     0.3199, 1.2999}, //?????? 1 ????
    {1,     497.9165, 387.4053,     0.3199, 1.2999}, //????? 1 ????
    {2,     497.9165, 105.4813,     0.2899, 1.3500},
    {2,     497.9165, 387.4053,     0.2899, 1.3500}
};

new PlayerText:SpeedText[MAX_PLAYERS];

enum E_PlayerTD
{
    PlayerText:LoginCharacterTD[5],
    PlayerText:HudTD,
    PlayerText:SpectatingInfo[6]
}
new PlayerTextdraws[MAX_PLAYERS][E_PlayerTD];

enum E_Character_Selection
{
    bool:sIsSelecting,
    sCharactersCount,
    sCurrentSlotID,
    sActorID
}
new CharacterSelection[MAX_PLAYERS][E_Character_Selection];

new PlayerText:FuelText[MAX_PLAYERS];

/*enum ERROR_ENUM
{
	eMsg[80],
	eExpire

}
new ErrorInfo[MAX_PLAYERS][3][ERROR_ENUM];*/

enum DAMAGE_ENUM
{
	damageOn,
	damageWeapon,
	damageBodypart,
	Float:damageAmount,
	damageArmour,
	damageTime,
	damageBy[MAX_PLAYER_NAME]
};
new DamageInfo[MAX_PLAYERS][MAX_DAMAGES][DAMAGE_ENUM];


#define MAX_CORPS 50

enum cpInfo
{
	cUsed,
	cType,
	cName[MAX_PLAYER_NAME],
	cTime,
	Float:cX,
	Float:cY,
	Float:cZ,
	Text3D:cText,
	cVeh,
	cNote[170],
	cSkin,
	cBody
};
new CorpInfo[MAX_CORPS][cpInfo];

// Yaris Sistemi - sarishin
#define MAX_YARIS                       (2) // oyun içerisinde aktif olabilecek maksimum yaris sayisi
#define MAX_YARIS_CHECKPOINT            (20) // her yaris basina maksimum checkpoint sayisi

enum E_YARIS {
    yarisBaslatildi, // yarisin hazir olup oyuncularin davet edilebilcegini kontrol ediyor
    yarisAktif, // yarisin basladigi ve artik oyuncularin davet edilemeyecegini kontrol ediyor
    yarisSahibi, // yarisa oyuncu davet edebilecek kisinin oyun içi ID'si, default -1
    yarisIsmi[32], // yarisin ismi, maksimum 32 bit
    Float:yarisCheckpointX[MAX_YARIS_CHECKPOINT], // 20 checkpointin hepsinin X degeri
    Float:yarisCheckpointY[MAX_YARIS_CHECKPOINT], // 20 checkpointin hepsinin Y degeri
    Float:yarisCheckpointZ[MAX_YARIS_CHECKPOINT], // 20 checkpointin hepsinin Z degeri
    yarisCheckpointInterior[MAX_YARIS_CHECKPOINT], // 20 checkpointin hepsinin Interior degeri
    yarisCheckpointVirtualWorld[MAX_YARIS_CHECKPOINT], // 20 checkpointin hepsinin Virtual World Degeri
    yarisKatilanSayisi, // Yarisa katilan oyuncularin sayisi
    yarisKazananlar[3], // Yarisi kazanan ilk 3 kisi
    yarisAktifCheckpoint // yarista toplam kaç checkpoint oldugu
};
new YarisInfo[MAX_YARIS][E_YARIS];

enum CARFIX_ENUM
{
	Float: fixX,
	Float: fixY,
	Float: fixZ,
	fixVW,
	fixInt,
	fixPickUp
}

enum FACTION_ENUM
{
	fID,
	fPickUp,
	fName[32],
	fShortName[8],
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	fSpawnInt,
	fSpawnVW,
	fJoinRank,
	fType,
	fRanks,
	fChatON,
	fColor,
	Float:fUniformX,
	Float:fUniformY,
	Float:fUniformZ,
	fUniformInt,
	fUniformVW,
	Carfix[CARFIX_ENUM],

	fPoint,
	fPointTime,
	fON
};
new Factions[MAX_FACTIONS][FACTION_ENUM];
new FactionRanks[MAX_FACTIONS][20][32];

enum RANK_ENUM
{
	rInvite,
	rUninvite,
	rRank,
	r_eRank,
	rSpawn,
	rChat,
	rTow,
	rBodyCam,
	r_eRights,
};
new FRank[MAX_FACTIONS][20][RANK_ENUM];

enum RANK_SETTINGS_DATA
{
	right_id,
	right_name[64],
	right_cmd[32]
};

new RS[9][RANK_SETTINGS_DATA] = {
	{0, "{FFFFFF}Birlik davet yetkisi ", "/birlikdavet"},
	{1, "{FFFFFF}Birlikten çýkarma yetkisi", "/birliktenat"},
	{2, "{FFFFFF}Rütbe deðiþtirme yetkisi", "/rozetgoster"},
	{3, "{FFFFFF}Rütbe adý deðiþtirme yetkisi", "/rutbedegistir"},
	{4, "{FFFFFF}Spawn noktasýný deðiþtirme yetkisi", "/spawndegistir"},
	{5, "{FFFFFF}Birlik sohbet kanalýný düzenleme", "/fchat"},
	{6, "{FFFFFF}Birlik araçlarýný spawnlama", "/birlikrespawn"},
	{7, "{FFFFFF}Bodycam eriþimi", "/mdc"},
	{8, "{FFFFFF}Rütbe izinlerini düzenleme", "/birlikizinleri"}
};

enum BORT_ENUM
{
    bortOn,
	bortName[32],
	bortObject,
	bortUsing
}
new BortInfo[MAX_PLAYERS][MAX_BORTES][BORT_ENUM];

enum FIRE_ENUM
{
	fireOn,
	fireObj,
	Float:firePos[3],
	fireVW,
	fireInt,
	fireHealth,
	fireTimer,
	Text3D:fireLabel
};

new FiresInfo[MAX_FIRES][FIRE_ENUM];

new attach_fd_model[] = {19330,19331,19942,11736,11738,18634,18641,19472,19559,19904,1008,11745,18875};
new bort_list_fd[17] = {1997, 2146, 19944, 3799, 2772, 12950, 18728, 18725, 18690, 19836, 2411, 1366, 1448, 19834, 1238, 1228, 1459};

new attach_fd_name[][] =
{
	"Yellow helmet",
	"Black helmet",
	"Walkie-talkie",
	"First aid kit",
	"BLS bag",
	"Scrap",
	"Lantern",
	"Respirator",
	"Backpack",
	"Orange vest",
	"Balloon",
	"Bag with things",
	"Pager"
};

new bort_names_fd[17][32] =
{
	"Gurney",
	"Gurney 2",
	"Package with a corpse",
	"Suicide box",
	"Stairs",
	"Ladder 2",
	"Signal Torch",
	"Smoke particles",
	"Particles of Fire",
	"Blood stain",
	"Maniken",
	"Hydrant",
	"Fixer",
	"Tape",
	"Cone",
	"Barrier",
	"Barrier 2"
};

new attach_city_model[] = {19904,19142,19515,18636,19161,19162,19521,19098,19200,19776,19777,18875,19942};
new bort_list_city[4] = {19834, 1238, 1228, 1459};

new attach_city_name[][] =
{
	"Turuncu Yelek",
	"Siyah Zýrh",
	"Gri Kurþun Geçirmez Yelek",
	"Polis Þapkasý 1",
	"Polis Þapkasý 2",
	"Polis Þapkasý 3",
	"Polis Þapkasý 4",
	"Polis Þapkasý",
	"Polis Motosiklet Kaský",
	"FBI Kart",
	"FBI Logo",
	"Çaðrý Cihazý",
	"Telsiz"
};

new bort_names_city[4][32] =
{
	"Bant",
	"Koni",
	"Bariyer",
	"Bariyer 2"
};

enum FOODSTAND_ENUM
{
	fID,
	fType,
	//Text3D:fLabel,
	fPickUp,
	fObject,
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	Float:fPosRX,
	Float:fPosRY,
	Float:fPosRZ,
	fVW,
	fInt,
	fStandOn
}
new FoodStand[MAX_FOOD_STAND][FOODSTAND_ENUM];


enum GPS_ENUM
{
	Float: gpsX,
	Float: gpsY,
	Float: gpsZ,
	gpsName[24]
};

new gps_location[20][GPS_ENUM] =
{
	{1479.1593,-1741.9025,13.5469, "City Hall"},
	{1544.5807,-1675.2900,13.5587, "LSPD HQ"},
	{1314.8073,-921.7766,38.0479, "LSFD HQ"},
	{1187.9469,-1324.1838,13.5592, "Hastane"},
	{1645.8088,-2325.5740,-2.6797, "Airport LS"},
	{1129.7343,-1412.8407,13.6160, "Verona - Mall"},
	{369.7311,-2043.1614,7.6719, "Pier Santa-Maria"},
	{548.9447,-1276.1792,17.2482, "Dealership Grotti"},
	{592.4351,-1247.7162,18.1278, "Rodeo Bank LS"},
	{1572.8501,-1330.9803,16.4844, "Central Bank LS"},
	{2866.9553,-1406.7509,11.0105, "East Beach Bank LS"},
	{644.7441,-1356.0962,13.5637, "SANNews"},
    {2219.0261,-1142.7472,25.7969, "Jefferson Motel"},
	{1811.3171,-1888.6415,13.4079, "Unity Station"},
	{1290.9767,-1549.5199,13.5469,"Driving School"},
	{1765.1187,-2280.2227,-2.5845, "Flight School"},
	{680.8654,-528.7534,16.1886, "Dillimore"},
	{233.0554,-139.7697,1.4297, "Blueberry"},
	{1289.7198,249.6513,19.4073, "Montgomery"},
	{2343.8179,16.4910,26.3359, "Palomino Creek"}
};

#define MAX_ONAYLIHOOD (100)

enum hoodData {
	hoodID,
	hoodAd[32],
	hoodVarmi,
	Float:hoodPos[4],
	hoodPickup,
	hZone,
	bool:hExists,
	Text3D:hoodText3D
};

new OnayliHoodlar[MAX_ONAYLIHOOD][hoodData];

enum ITEM_ENUM
{
	itemModel,
	itemType,
	itemSize,
	itemName[32],
	itemQ,
	itemSplit,
	itemFloat,
	itemID
};

#define FLOAT_ITEMS         65..67,103..118

#define ITEM_TYPE_NONE              (0)
#define ITEM_TYPE_WEAPON            (1)
#define ITEM_TYPE_SEEDS             (2)
#define ITEM_TYPE_FOOD              (3)
#define ITEM_TYPE_DRUGS             (4)
#define ITEM_TYPE_MISC              (5)
#define ITEM_TYPE_REACT             (6)
#define ITEM_TYPE_INSIDEABLE_OBJECT (7)
#define ITEM_TYPE_AMMO              (8)

#define ITEM_SIZE_NONE              (0)
#define ITEM_SIZE_SMALL             (1)
#define ITEM_SIZE_MEDIUM            (2)
#define ITEM_SIZE_BIG               (3)
#define ITEM_SIZE_VBIG              (4)

#define INV_SIGN    		19
#define INV_RADIO   		20
#define INV_MASK    		21
#define INV_BURGER      	35
#define INV_PIZZA       	36
#define INV_CHICKEN     	37
#define INV_HOTDOG      	38
#define INV_GASCAN      	39
#define INV_BOOMBOX     	40
#define INV_SILENCER    	44
#define INV_OPTICS      	45
#define INV_LIGHTER     	47
#define INV_CIGAR       	48
#define INV_DICE        	49
#define INV_CARDS       	50
#define INV_PEN         	51
#define INV_PICKLOCK       	52
#define INV_SHELL        	53
#define INV_POWDER			54
#define INV_BODYBAG   		55
#define INV_BEER        	56
#define INV_VODKA       	57
#define INV_COLA        	58
#define INV_WATER       	59
#define INV_WHISKEY     	60
#define INV_BRANDY      	61
#define INV_SODA        	62
#define INV_WINE        	63
#define INV_MED_GANJA       65

#define INV_GANJA           66
#define INV_COCA            115
#define INV_POPPY           116

#define INV_DRUG            67

#define INV_LSD             67
#define INV_MET             68
#define INV_HEROIN          69
#define INV_COCAINE         70
#define INV_EPHEDRINE       71
#define INV_DIETHYL         72
#define INV_ALKALI          73
#define INV_ACID            74

#define INV_HEAL            75
#define INV_CARSOUND        76
#define INV_SKATE        	77
#define INV_PIZZA_BOX       78
#define INV_CHICKEN_BOX     79

#define INV_SEED_GANJA	   	64
#define INV_SEED_COCA       80
#define INV_SEED_POPPY      81

#define INV_TOOLS       	100
#define INV_FAKENUM       	101

#define INV_CUBANPURO       119

//âñå ïðåäìåòû
#define MAX_ITEM_LIST 120
new inventory_items[MAX_ITEM_LIST][ITEM_ENUM] =
{
	{0, 	ITEM_TYPE_NONE, 				ITEM_SIZE_NONE,		"Belirsiz", 					0,0,0, 0},
	{331, 	ITEM_TYPE_WEAPON, 				ITEM_SIZE_MEDIUM,	"Cassette", 					0,0,0, 1},
	{333,	ITEM_TYPE_WEAPON,				ITEM_SIZE_BIG,		"Golf sopasý ", 		0,0,0, 2},
	{334,	ITEM_TYPE_WEAPON, 				ITEM_SIZE_MEDIUM,	"Cudgel", 					0,0,0, 3},
	{335,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"Býçak",	 					0,0,0, 4},
	{336,	ITEM_TYPE_WEAPON,				ITEM_SIZE_BIG,		"Sopa", 		0,0,0, 5},
	{337,  	ITEM_TYPE_WEAPON,				ITEM_SIZE_BIG,		"Kürek", 					0,0,0, 6},
	{338,	ITEM_TYPE_WEAPON, 				ITEM_SIZE_BIG,		"Cue",						0,0,0, 7},
	{339,	ITEM_TYPE_WEAPON,				ITEM_SIZE_BIG,		"Katana",					0,0,0, 8},
	{341,	ITEM_TYPE_WEAPON,				ITEM_SIZE_VBIG,		"Testere", 				0,0,0, 9},
	{321,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"Lilac dildo", 			0,0,0, 10},
	{322,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"Dildo", 					0,0,0, 11},
	{323,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"Vibratör", 				0,0,0, 12},
	{324,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"Gümüþ vibratör", 	0,0,0, 13},
	{325,	ITEM_TYPE_WEAPON,				ITEM_SIZE_BIG,		"Çiçek", 					0,0,0, 14},
	{326,	ITEM_TYPE_WEAPON,				ITEM_SIZE_BIG,		"Cane", 					0,0,0, 15},
	{342,	ITEM_TYPE_WEAPON,				ITEM_SIZE_SMALL,	"El Bombasý", 					0,1,0, 16},
	{343,	ITEM_TYPE_WEAPON,				ITEM_SIZE_SMALL,	"Gaz", 						0,1,0, 17},
	{344,	ITEM_TYPE_WEAPON,				ITEM_SIZE_BIG,		"Molotof", 		0,1,0, 18},
	{2656,	ITEM_TYPE_MISC,					ITEM_SIZE_MEDIUM,	"Araç stickerý",	0,1,0, 19},
	{19942,	ITEM_TYPE_MISC,					ITEM_SIZE_SMALL,	"Telsiz", 					0,1,0, 20},
	{19801,	ITEM_TYPE_MISC, 				ITEM_SIZE_MEDIUM,	"Maske", 					0,1,0, 21},
	{346,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"M1911", 					0,0,0, 22},
	{347,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"M1911 (susturuculu)", 	0,0,0, 23},
	{348,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"Desert Eagle", 			0,0,0, 24},
	{349,	ITEM_TYPE_WEAPON,				ITEM_SIZE_BIG,		"Shotgun", 					0,0,0, 25},
	{350,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"Sawn-off Shotgun", 		0,0,0, 26},
	{351,	ITEM_TYPE_WEAPON,				ITEM_SIZE_BIG,		"Combat Shotgun", 			0,0,0, 27},
	{352,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"Uzi", 						0,0,0, 28},
	{353,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"MP5", 						0,0,0, 29},
	{355,	ITEM_TYPE_WEAPON,				ITEM_SIZE_BIG,		"AK-47", 					0,0,0, 30},
	{356,	ITEM_TYPE_WEAPON,				ITEM_SIZE_BIG,		"M4", 						0,0,0, 31},
	{372,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"Tec-9", 					0,0,0, 32},
	{357,	ITEM_TYPE_WEAPON,				ITEM_SIZE_VBIG,		"Country Rifle", 			0,0,0, 33},
	{358,	ITEM_TYPE_WEAPON,				ITEM_SIZE_VBIG,		"Sniper Rifle", 			0,0,0, 34},
	{19094,	ITEM_TYPE_FOOD,					ITEM_SIZE_MEDIUM,	"Burger", 					0,1,0, 35},
	{2702,	ITEM_TYPE_FOOD, 				ITEM_SIZE_MEDIUM,	"Pizza", 					0,1,0, 36},
	{2663,	ITEM_TYPE_FOOD,					ITEM_SIZE_MEDIUM,	"Tavuk", 		0,1,0, 37},
    {19346, ITEM_TYPE_FOOD,					ITEM_SIZE_MEDIUM,	"Hot dog", 					0,1,0, 38},
	{1650,	ITEM_TYPE_MISC,					ITEM_SIZE_VBIG,		"Bidon", 				0,1,0, 39},
	{2226,	ITEM_TYPE_MISC,					ITEM_SIZE_VBIG,		"Boombox", 					0,1,0, 40},
	{365,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"Sprey Kutusu", 				50,0,0, 41},
	{366,	ITEM_TYPE_WEAPON,				ITEM_SIZE_VBIG,		"Yangýn Söndürücü", 			50,0,0, 42},
	{367,	ITEM_TYPE_WEAPON,				ITEM_SIZE_MEDIUM,	"Kamera", 				50,0,0, 43},
	{2040,	ITEM_TYPE_MISC,					ITEM_SIZE_MEDIUM,	"Susturucu", 				0,0,0, 44},
	{2040,	ITEM_TYPE_MISC,					ITEM_SIZE_MEDIUM,	"Dürbün", 		0,0,0, 45},
	{371, 	ITEM_TYPE_WEAPON,				ITEM_SIZE_VBIG,		"Paraþüt", 					0,0,0, 46},
	{19998,	ITEM_TYPE_MISC,					ITEM_SIZE_SMALL,	"Çakmak", 				0,1,0, 47},
	{19897,	ITEM_TYPE_MISC,					ITEM_SIZE_MEDIUM,	"Sigara", 				0,1,0, 48},
	{1906,	ITEM_TYPE_MISC,					ITEM_SIZE_SMALL,	"Zar", 			0,1,0, 49},
	{11748,	ITEM_TYPE_MISC,					ITEM_SIZE_MEDIUM,	"Oyun Kartý", 			0,1,0, 50},
	{3027,	ITEM_TYPE_MISC,					ITEM_SIZE_SMALL,	"Kalem", 					0,1,0, 51},
	{19921,	ITEM_TYPE_MISC,					ITEM_SIZE_SMALL,	"Maymuncuk", 					0,1,0, 52},
	{2041,	ITEM_TYPE_MISC,					ITEM_SIZE_SMALL,	"Kovan", 					0,1,0, 53},
	{19792,	ITEM_TYPE_MISC,					ITEM_SIZE_SMALL,	"Toz", 					0,1,0, 54},
	{19792,	ITEM_TYPE_NONE,					ITEM_SIZE_SMALL, 	"Ceset Torbasý", 			0,1,0, 55},
    {2958,	ITEM_TYPE_FOOD,					ITEM_SIZE_MEDIUM,	"Bira", 					0,1,0, 56},
    {1668,	ITEM_TYPE_FOOD,					ITEM_SIZE_MEDIUM,	"Vodka", 					0,1,0, 57},
    {1546,	ITEM_TYPE_FOOD,					ITEM_SIZE_MEDIUM,	"Cola", 					0,1,0, 58},
    {1455,	ITEM_TYPE_FOOD,					ITEM_SIZE_MEDIUM,	"Su", 					0,1,0, 59},
    {1520,	ITEM_TYPE_FOOD,					ITEM_SIZE_MEDIUM,	"Viski", 					0,1,0, 60},
    {19820,	ITEM_TYPE_FOOD,					ITEM_SIZE_MEDIUM,	"Konyak", 					0,1,0, 61},
    {19346,	ITEM_TYPE_FOOD,					ITEM_SIZE_MEDIUM,	"Soda", 					0,1,0, 62},
    {1664,	ITEM_TYPE_FOOD,					ITEM_SIZE_MEDIUM,	"Þarap", 					0,1,0, 63},
    {1664,	ITEM_TYPE_SEEDS,				ITEM_SIZE_SMALL,	"Kenevir Tohumu", 			0,1,0, 64},
    {1578,	ITEM_TYPE_DRUGS,				ITEM_SIZE_SMALL, 	"Týbbi esrar", 	0,1,1, 65},
    {1578, 	ITEM_TYPE_DRUGS,				ITEM_SIZE_SMALL,	"Marijuana", 				0,1,1, 66},
	{1579,	ITEM_TYPE_DRUGS,				ITEM_SIZE_SMALL,	"Uyuþturucu", 				0,1,1, 67},
    {1576,	ITEM_TYPE_NONE,					ITEM_SIZE_SMALL,	"Belirsiz", 					0,0,0, 68},
    {1577,	ITEM_TYPE_NONE,					ITEM_SIZE_SMALL,	"Belirsiz", 					0,0,0, 69},
    {1575,	ITEM_TYPE_NONE,					ITEM_SIZE_SMALL,	"Belirsiz", 					0,0,0, 70},
    {1664,	ITEM_TYPE_NONE,					ITEM_SIZE_SMALL,	"Belirsiz", 					0,0,0, 71},
    {1664,	ITEM_TYPE_MISC,					ITEM_SIZE_SMALL,	"Dietil",					0,1,0, 72},
    {1650,	ITEM_TYPE_MISC,					ITEM_SIZE_SMALL,	"Alkali", 					0,1,1, 73},
    {1664,	ITEM_TYPE_MISC,					ITEM_SIZE_SMALL,	"Hidroklorik Asit", 			0,1,1, 74},
    {11736,	ITEM_TYPE_MISC,					ITEM_SIZE_MEDIUM,	"Ýlk Yardim Kiti", 					0,1,0, 75},
    {19920,	ITEM_TYPE_MISC,					ITEM_SIZE_MEDIUM,	"XM Radio", 				0,1,0, 76},
    {19878,	ITEM_TYPE_MISC,					ITEM_SIZE_BIG,		"Kaykay", 				0,0,0, 77},
	{2814, 	ITEM_TYPE_INSIDEABLE_OBJECT,	ITEM_SIZE_BIG,		"Pizza Kutusu",			0,0,0, 78},
	{2663,  ITEM_TYPE_INSIDEABLE_OBJECT, 	ITEM_SIZE_MEDIUM, 	"Paket 'Cluckin' Bell'",	0,0,0, 79},
	{1664, 	ITEM_TYPE_SEEDS, 				ITEM_SIZE_SMALL,	"Koka Tohumu",				0,1,0, 80},
	{1664, 	ITEM_TYPE_SEEDS,				ITEM_SIZE_SMALL, 	"Haþhaþ Tohumu",				0,1,0, 81},
	{2041, 	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	".45 ACP", 					7,0,0, 82}, 	// M1911 //82
    {2041, 	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	".45 ACP .ext", 			14,0,0, 83}, 	// M1911 //83
    {2041, 	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	".50AE", 					7,0,0, 84},	// DEAGLE //84
    {2041, 	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	".50AE .ext", 				14,0,0, 85},	// DEAGLE //85
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"12-G BIRDSHOT", 			6,0,0, 86},	// SHOTGUN //86
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"12-G BUCKSHOT", 			6,0,0, 87}, 	// SHOTGUN //87
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"12-G SLUG", 				6,0,0, 88},	// SHOTGUN //88
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"12-G BEANBAG", 			6,0,0, 89}, 	// SHOTGUN //89 //ðåçèíîâûå
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"9x19mm", 					30,0,0, 90}, 	// MAC/TEC //90
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"9x19mm .ext", 				60,0,0, 91}, 	// MAC/TEC //91
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"7.62x39mm", 				30,0,0, 92}, 	// AK47 //92
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"5.56x45mm", 				30,0,0, 93}, 	// M4A1 //93
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"7.62x39mm T", 				30,0,0, 94}, 	// AK47 //94
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"5.56x45mm T", 				30,0,0, 95}, 	// M4A1 //95
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"7.62x51mm", 				4,0,0, 96},	// SNIPER / RIFLE //96
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"7.62x39mm (drum)", 		80,0,0, 97},	// AK47 //97
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"5.56x45mm (drum)", 		60,0,0, 98}, 	// M4 //98
    {2041,	ITEM_TYPE_AMMO,					ITEM_SIZE_SMALL,	"5.56x45mm (plastik)",	 	30,0,0, 99}, 	// M4 //99
	{19921,	ITEM_TYPE_MISC,					ITEM_SIZE_SMALL,	"Alet Çantasý",				0,0,0, 100},
	{19257,	ITEM_TYPE_MISC,					ITEM_SIZE_SMALL,	"Sahte numara",			0,0,0, 101},
	{371,  ITEM_TYPE_INSIDEABLE_OBJECT, 	ITEM_SIZE_MEDIUM, 	"Sýrt Cantasi",					0,0,0, 102},
	{2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM,  	"Kýrmýzý fosfor",			0,1,1, 103},
    {2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Vinilbenzil alkol",	0,1,1, 104},
    {2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Metilamin",				0,1,1, 105},
    {2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Heliotropin",        	0,1,1, 106},
    {2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Efedrin",					0,1,1, 107},
    {2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Potasyum permanganat",		0,1,1, 108},
    {2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Kloroform",				0,1,1, 109},
    {2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Eter",           			0,1,1, 110},
    {2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Hidrojen klorür",       	0,1,1, 111},
    {2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Metanol",        	   		0,1,1, 112},
    {2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Liserjik asit",			0,1,1, 113},
    {2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Ekgonin",           		0,1,1, 114},
	{2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Koka yapraklarý",        		0,1,1, 115},
	{2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Mak",		         		0,1,1, 116},
	{2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Kurutulmuþ koka yapraklarý ",		0,1,1, 117},
	{2709, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"Kurutulmuþ afyon ",				0,1,1, 118},
    {19897,	ITEM_TYPE_MISC,					ITEM_SIZE_MEDIUM,	"Küba purosu", 				0,1,0, 119}
};

#define FLOAT_ITEMS         65..67,103..118

#define ITEM_TYPE_NONE              (0)
#define ITEM_TYPE_WEAPON            (1)
#define ITEM_TYPE_SEEDS             (2)
#define ITEM_TYPE_FOOD              (3)
#define ITEM_TYPE_DRUGS             (4)
#define ITEM_TYPE_MISC              (5)
#define ITEM_TYPE_REACT             (6)
#define ITEM_TYPE_INSIDEABLE_OBJECT (7)
#define ITEM_TYPE_AMMO              (8)

#define ITEM_SIZE_NONE              (0)
#define ITEM_SIZE_SMALL             (1)
#define ITEM_SIZE_MEDIUM            (2)
#define ITEM_SIZE_BIG               (3)
#define ITEM_SIZE_VBIG              (4)

#define INV_SIGN    		19
#define INV_RADIO   		20
#define INV_MASK    		21
#define INV_BURGER      	35
#define INV_PIZZA       	36
#define INV_CHICKEN     	37
#define INV_HOTDOG      	38
#define INV_GASCAN      	39
#define INV_BOOMBOX     	40
#define INV_SILENCER    	44
#define INV_OPTICS      	45
#define INV_LIGHTER     	47
#define INV_CIGAR       	48
#define INV_DICE        	49
#define INV_CARDS       	50
#define INV_PEN         	51
#define INV_PICKLOCK       	52
#define INV_SHELL        	53
#define INV_POWDER			54
#define INV_BODYBAG   		55
#define INV_BEER        	56
#define INV_VODKA       	57
#define INV_COLA        	58
#define INV_WATER       	59
#define INV_WHISKEY     	60
#define INV_BRANDY      	61
#define INV_SODA        	62
#define INV_WINE        	63
#define INV_MED_GANJA       65

#define INV_GANJA           66
#define INV_COCA            115
#define INV_POPPY           116

#define INV_DRUG            67

#define INV_LSD             67
#define INV_MET             68
#define INV_HEROIN          69
#define INV_COCAINE         70
#define INV_EPHEDRINE       71
#define INV_DIETHYL         72
#define INV_ALKALI          73
#define INV_ACID            74

#define INV_HEAL            75
#define INV_CARSOUND        76
#define INV_SKATE        	77
#define INV_PIZZA_BOX       78
#define INV_CHICKEN_BOX     79

#define INV_SEED_GANJA	   	64
#define INV_SEED_COCA       80
#define INV_SEED_POPPY      81

#define INV_TOOLS       	100
#define INV_FAKENUM       	101

#define INV_CUBANPURO       119

#define CARLIC_PRICE    ServerInfo[sPriceDriverLicense]
#define FLYLIC_PRICE    (7000)
#define TAXILIC_PRICE   ServerInfo[sPriceTaxiLicense]

#define EXAM_TIME       (240)

#define MAX_CHARACTERS      (3)
#define AUTH_TIME           (300)
#define CHARACTER_UNACTIVE                     (0)
#define CHARACTER_ACTIVE                     (1)

#define GENDER_MALE                            (1)
#define GENDER_FEMALE                        (2)

#define RACE_WHITE                            (1)
#define RACE_BLACK                            (2)

#define MIN_CHARACTER_AGE                    (17)
#define MAX_CHARACTER_AGE                    (98)

#define CUSTOMIZATION_BACK                    (0)
#define CUSTOMIZATION_AGE                    (1)
#define CUSTOMIZATION_GENDER                (2)
#define CUSTOMIZATION_RACE                    (3)
#define CUSTOMIZATION_ORIGIN                (4)
#define CUSTOMIZATION_SKIN                    (5)
#define CUSTOMIZATION_VERIFY                (6)
#define CUSTOMIZATION_DONE                    (7)

#define DIALOG_EX                             EMBED_SILVER "örnek: " EMBED_WHITE

#define MYSQL_DEFAULT_HANDLE MySQL:1
#define MYSQL_INVALID_HANDLE MySQL:0
#define MYSQL_INVALID_CACHE Cache:0
#define MYSQL_INVALID_ORM ORM:0

new login_char_id[MAX_PLAYERS][MAX_CHARACTERS],
	login_char_name[MAX_PLAYERS][MAX_CHARACTERS][MAX_PLAYER_NAME+1];

#define MAX_SPAWN_POINT 4
new Float: first_spawn[MAX_SPAWN_POINT][4] =
{
    {2269.4795,-81.2131,26.5414,184.9469}, // P-C
    {1358.6038,251.7677,19.5669,64.0962}, //  Monty
	{207.7609,-64.7452,1.5781,178.4230}, // Dilimore
	{-204.1443,1119.1970,19.7422,269.5804} //  Fort Carson
};

new license_exam_cp[17];
new fly_exam_cp[10];

new Float: license_exam_coord[17][3] =
{
   {1077.9421, -1760.8413, 13.1062},
    {1069.7742, -1743.6262, 13.1792},
    {1125.6846, -1742.9705, 13.1255},
    {1173.2028, -1795.8419, 13.1255},
    {1171.8732, -1848.7852, 13.1255},
    {1064.7334, -1848.9559, 13.1275},
    {868.2761, -1767.7832, 13.1099},
    {662.2955, -1734.7739, 13.3051},
    {638.0414, -1608.3522, 15.2394},
    {637.0955, -1437.5593, 13.7718},
    {777.1824, -1402.8928, 13.0962},
    {1003.7480, -1403.3344, 12.7427},
    {1056.4824, -1461.9592, 13.0966},
    {1035.2485, -1601.7378, 13.1099},
    {1035.6083, -1708.9515, 13.1176},
    {1153.0645, -1714.3525, 13.5083},
    {1105.6610, -1738.3989, 13.2321}
};

new Float: fly_exam_coord[10][3] =
{
	{1799.6403, -2253.3269, 41.0483},
	{1735.2058,-2151.1125,64.9770},
	{1722.7869,-1964.8521,69.8375},
	{1772.3292,-1808.5341,76.2515},
	{1871.6609,-1725.9799,64.2006},
	{1935.5216,-1594.7958,63.1090},
	{1847.6520,-1477.8009,64.2859},
	{1697.8094,-1411.9990,111.9126},
	{1582.0636,-1322.9044,104.7356},
	{1765.6816,-2286.6672,26.9876}
};

#define INJURED_LEG_TIME        (30)
//How many seconds after receiving a wound in the leg the character will not be able to jump

#define WEAPON_TYPE_NONE        0
#define WEAPON_TYPE_PRIMARY 	1
#define WEAPON_TYPE_SECONDARY 	2
#define WEAPON_TYPE_MELEE 		3
//î

new aWeaponNames[][] =
{
    {"Fist"},
    {"Brass Knuckless"},
    {"Golf Club"},
    {"Nightstick"},
    {"Knife"},
    {"Baseball Bat"},
    {"Shovel"},
    {"Pool Cue"},
    {"Katana"},
    {"Chainsaw"},
    {"Purple Dildo"},
    {"Dildo"},
    {"Vibrator"},
    {"Silver Vibrator"},
    {"Flowers"},
    {"Cane"},
    {"Grenade"},
    {"Tear Gas"},
    {"Molotof Kokteyli"},
    {"Unknown"},
    {"Unknown"},
    {"Unknown"},
    {"Colt 45"},
    {"Silenced 9mm"},
    {"Desert Eagle"},
    {"Shotgun"},
    {"Sawnoff Shotgun"},
    {"40MM Grenade Launcher"},
    {"Micro SMG"},
    {"MP5"},
    {"AK-47"},
    {"M4"},
    {"Tec-9"},
    {"Country Rifle"},
    {"Sniper Rifle"},
    {"RPG"},
    {"HS Rocket"},
    {"Flamethrower"},
    {"Minigun"},
    {"Satchel Charge"},
    {"Detonator"},
    {"Spray Can"},
    {"Fire Extinguisher"},
    {"Camera"},
    {"Night Goggles"},
    {"Thermal Goggles"},
    {"Parachute"}
};

GetWeaponNameEx(weaponid, bool:disassembledName = false)
{
    new name[55];

    format(name, sizeof(name), aWeaponNames[weaponid]);

    if(!weaponid)name = "Yok";
    if(strlen(name) == 0)name = "Yok";
    if(disassembledName == true) format(name, sizeof(name), "%s - mermi yok", name);

    return name;
}

enum DROP_ENUM
{
	dropBDID,
	dropID,
	dropAmount,
	dropEx,
	dropS,
	Float:dropQFloat,
	dropInvName[16],
	dropObject,
	Float:dropPosX,
	Float:dropPosY,
	Float:dropPosZ,
	Float:dropPosRX,
	Float:dropPosRY,
	Float:dropPosRZ,
	dropInt,
	dropVW,
	dropTime
}
new ItemDrop[MAX_ITEM_DROPS][DROP_ENUM];

enum FOOD_DROPS_ENUM
{
    foodDropped,
	foodObject,
	foodModel,
	Float:foodPosX,
	Float:foodPosY,
	Float:foodPosZ,
	foodVW,
	foodInt,
	foodTime
}
new FoodDrop[MAX_FOOD_DROPS][FOOD_DROPS_ENUM];

enum REPORT_INFO
{
	bool:rReportExists,
	rReportDetails[90],
	rReportTime,
	rReportBy[32]
}

enum reportData {
	rExists,
	rType,
	rPlayer,
	rYetkili,
	rText[128 char]
};

new ReportData[MAX_REPORTS][reportData];

new ReportInfo[100][REPORT_INFO];
new playerReport[MAX_PLAYERS][128];

enum QUEST_INFO
{
	bool:qQuestExists,
	qQuestDetails[90],
	qQuestTime,
	qQuestBy[32]
}

new QuestInfo[100][QUEST_INFO];
new playerQuest[MAX_PLAYERS][128];

#define MAX_TICKETS	8

enum TICKETS_ENUM
{
	tID,
	tReason[128],
	tAmount
}
new Tickets[MAX_PLAYERS][MAX_TICKETS][TICKETS_ENUM],
	Ticket[MAX_PLAYERS][TICKETS_ENUM];

#define MAX_STREET 			(150)
#define MAX_STREETS_ZONES 	(59)

new street_zones[MAX_STREETS_ZONES];

enum E_STREETDATA
{
	street_id,
	street_object[3],
	street_name[32],
	street_direction[20],
	Float: sSign[6], // offset & rot
	Float: sName[6], // offset & rot
	Float: sDirection[6] // offset & rot
}
new street_data[MAX_STREET][E_STREETDATA];

new Float:zones_points_0[] = {
	2318.0,-91.0,2317.0,-51.0,2336.0,-52.0,2335.0,9.0,2318.0,9.0,2316.0,65.0,2332.0,64.0,2337.0,101.0,2300.0,105.0,2300.0,272.0,
	2387.0,271.0,2384.0,104.0,2350.0,100.0,2351.0,83.0,2352.0,54.0,2368.0,55.0,2369.0,9.0,2351.0,9.0,2352.0,-89.0,2318.0,-91.0
};
new Float:zones_points_1[] = {
	2453.0,-34.0,2450.0,-75.0,2354.0,-73.0,2352.0,-36.0,2336.0,-37.0,2336.0,-51.0,2231.0,-52.0,2233.0,17.0,2287.0,19.0,2287.0,-20.0,
	2300.0,-19.0,2300.0,7.0,2334.0,6.0,2334.0,-17.0,2353.0,-18.0,2353.0,6.0,2384.0,6.0,2385.0,-20.0,2401.0,-20.0,2401.0,5.0,
	2455.0,3.0,2453.0,-34.0
};
new Float:zones_points_2[] = {
	2300.0,134.0,2285.0,135.0,2287.0,100.0,2285.0,83.0,2284.0,73.0,2262.0,70.0,2261.0,59.0,2285.0,59.0,2287.0,22.0,2288.0,-52.0,
	2258.0,-54.0,2258.0,-91.0,2287.0,-91.0,2317.0,-92.0,2316.0,-53.0,2301.0,-53.0,2300.0,7.0,2317.0,7.0,2317.0,65.0,2305.0,65.0,
	2300.0,134.0
};
new Float:zones_points_3[] = {
	2299.0,135.0,2285.0,135.0,2284.0,117.0,2230.0,117.0,2230.0,135.0,2217.0,145.0,2179.0,157.0,2208.0,214.0,2297.0,205.0,2299.0,135.0
};
new Float:zones_points_4[] = {
	2285.0,115.0,2231.0,117.0,2228.0,70.0,2284.0,74.0,2285.0,115.0
};
new Float:zones_points_5[] = {
	2179.0,156.0,2130.0,103.0,2132.0,87.0,2183.0,80.0,2183.0,54.0,2217.0,51.0,2244.0,49.0,2245.0,71.0,2228.0,70.0,2230.0,133.0,
	2217.0,145.0,2179.0,156.0
};
new Float:zones_points_6[] = {
	2084.0,49.0,2082.0,36.0,2124.0,36.0,2125.0,1.0,2176.0,3.0,2232.0,-17.0,2233.0,18.0,2286.0,20.0,2285.0,58.0,2261.0,59.0,
	2263.0,70.0,2246.0,70.0,2244.0,50.0,2183.0,54.0,2182.0,79.0,2132.0,87.0,2126.0,49.0,2084.0,49.0
};
new Float:zones_points_7[] = {
	2452.0,-75.0,2354.0,-73.0,2352.0,-90.0,2334.0,-106.0,2334.0,-143.0,2450.0,-145.0,2452.0,-75.0
};
new Float:zones_points_8[] = {
	2352.0,-90.0,2258.0,-92.0,2221.0,-99.0,2180.0,-102.0,2232.0,-144.0,2334.0,-143.0,2334.0,-105.0,2352.0,-90.0
};
new Float:zones_points_9[] = {
	2231.0,-18.0,2176.0,-26.0,2176.0,-99.0,2220.0,-99.0,2256.0,-92.0,2256.0,-52.0,2231.0,-53.0,2231.0,-18.0
};
new Float:zones_points_10[] = {
	2386.0,156.0,2474.0,159.0,2476.0,119.0,2460.0,105.0,2456.0,83.0,2400.0,83.0,2383.0,103.0,2386.0,156.0
};
new Float:zones_points_11[] = {
	2125.0,0.0,2115.0,-84.0,2115.0,-138.0,2228.0,-145.0,2174.0,-100.0,2177.0,-26.0,2230.0,-17.0,2176.0,4.0,2125.0,0.0
};
new Float:zones_points_12[] = {
	2571.0,-18.0,2457.0,-15.0,2452.0,-74.0,2571.0,-76.0,2571.0,-18.0
};
new Float:zones_points_13[] = {
	2402.0,81.0,2403.0,7.0,2455.0,5.0,2456.0,31.0,2474.0,32.0,2568.0,30.0,2570.0,-15.0,2693.0,-17.0,2688.0,101.0,2573.0,98.0,
	2569.0,50.0,2545.0,52.0,2523.0,53.0,2522.0,77.0,2472.0,78.0,2472.0,53.0,2455.0,51.0,2454.0,81.0,2402.0,81.0
};
new Float:zones_points_14[] = {
	2569.0,51.0,2524.0,54.0,2522.0,77.0,2473.0,77.0,2472.0,53.0,2457.0,52.0,2460.0,105.0,2477.0,118.0,2477.0,160.0,2573.0,158.0,
	2569.0,51.0
};
new Float:zones_points_15[] = {
	2456.0,32.0,2456.0,-13.0,2569.0,-16.0,2568.0,31.0,2456.0,32.0
};
new Float:zones_points_16[] = {
	2082.0,74.0,1651.0,174.0,1524.0,155.0,1529.0,118.0,1516.0,113.0,1302.0,-64.0,1105.0,-177.0,525.0,-125.0,347.0,-134.0,346.0,-179.0,
	1107.0,-206.0,1896.0,39.0,2078.0,22.0,2082.0,74.0
};
new Float:zones_points_17[] = {
	1895.0,39.0,1267.0,-368.0,1274.0,-404.0,1910.0,-364.0,1895.0,39.0
};
new Float:zones_points_18[] = {
	2297.0,273.0,2301.0,209.0,2052.0,230.0,1882.0,327.0,1774.0,293.0,1600.0,368.0,1428.0,405.0,1109.0,560.0,981.0,388.0,878.0,326.0,
	773.0,323.0,694.0,310.0,528.0,232.0,383.0,114.0,309.0,64.0,244.0,35.0,227.0,160.0,605.0,315.0,748.0,329.0,864.0,357.0,
	1121.0,599.0,2297.0,273.0
};
new Float:zones_points_19[] = {
	2137.0,211.0,2087.0,84.0,1655.0,178.0,1688.0,325.0,1775.0,291.0,1888.0,326.0,2047.0,228.0,2137.0,211.0
};
new Float:zones_points_20[] = {
	1282.0,210.0,1255.0,144.0,1312.0,126.0,1327.0,188.0,1282.0,210.0
};
new Float:zones_points_21[] = {
	1409.0,402.0,1392.0,328.0,1421.0,309.0,1589.0,361.0,1409.0,402.0
};
new Float:zones_points_22[] = {
	1066.0,493.0,1227.0,389.0,1273.0,360.0,1316.0,343.0,1313.0,328.0,1330.0,318.0,1352.0,312.0,1363.0,325.0,1425.0,307.0,1427.0,269.0,
	1400.0,269.0,1293.0,317.0,1282.0,293.0,1232.0,312.0,1247.0,334.0,1025.0,443.0,1066.0,493.0
};
new Float:zones_points_23[] = {
	1299.0,205.0,1308.0,234.0,1292.0,242.0,1303.0,254.0,1332.0,244.0,1354.0,290.0,1320.0,305.0,1330.0,319.0,1351.0,313.0,1412.0,412.0,
	1380.0,427.0,1334.0,448.0,1319.0,382.0,1330.0,373.0/*,1327.0,356.0*/,1307.0,309.0,1295.0,317.0,1270.0,268.0,1286.0,259.0,1277.0,250.0,
	1265.0,212.0,1299.0,205.0
};
new Float:zones_points_24[] = {
	1277.0,249.0,1202.0,275.0,1160.0,150.0,1229.0,117.0,1277.0,249.0
};
new Float:zones_points_25[] = {
	1186.0,363.0,1138.0,288.0,1202.0,276.0,1274.0,249.0,1286.0,261.0,1269.0,269.0,1282.0,291.0,1233.0,311.0,1245.0,333.0,1186.0,363.0
};
new Float:zones_points_26[] = {
	1331.0,372.0,1319.0,344.0,1274.0,361.0,1227.0,389.0,1267.0,481.0,1333.0,449.0,1319.0,382.0,1331.0,372.0
};
new Float:zones_points_27[] = {
	1301.0,204.0,1514.0,112.0,1530.0,118.0,1438.0,214.0,1391.0,212.0,1304.0,252.0,1295.0,241.0,1308.0,235.0,1301.0,204.0
};
new Float:zones_points_28[] = {
	1399.0,269.0,1380.0,220.0,1394.0,213.0,1441.0,215.0,1455.0,270.0,1399.0,269.0
};
new Float:zones_points_29[] = {
	1354.0,289.0,1332.0,241.0,1380.0,219.0,1398.0,269.0,1354.0,289.0
};
new Float:zones_points_30[] = {
	1265.0,212.0,1225.0,117.0,1226.0,-43.0,1280.0,-77.0,1296.0,-54.0,1253.0,143.0,1281.0,210.0,1265.0,212.0
};
new Float:zones_points_31[] = {
	697.0,309.0,693.0,214.0,796.0,207.0,812.0,323.0,780.0,320.0,778.0,338.0,815.0,348.0,810.0,409.0,707.0,399.0,748.0,331.0,
	751.0,318.0,697.0,309.0
};
new Float:zones_points_32[] = {
	-193.0,216.0,-288.0,-123.0,42.0,-156.0,106.0,55.0,-193.0,216.0
};
new Float:zones_points_33[] = {
	198.0,43.0,199.0,-11.0,226.0,-14.0,226.0,-77.0,224.0,-201.0,226.0,-277.0,244.0,-276.0,243.0,-257.0,258.0,-258.0,258.0,-219.0,
	243.0,-217.0,242.0,-202.0,274.0,-202.0,274.0,-81.0,242.0,-80.0,244.0,-63.0,260.0,-63.0,260.0,-12.0,287.0,0.0,265.0,43.0,
	198.0,43.0
};
new Float:zones_points_34[] = {
	196.0,44.0,129.0,53.0,128.0,-66.0,222.0,-66.0,225.0,-16.0,198.0,-10.0,196.0,44.0
};
new Float:zones_points_35[] = {
	143.0,-67.0,143.0,-81.0,325.0,-79.0,336.0,-68.0,336.0,-6.0,288.0,-1.0,260.0,-11.0,260.0,-63.0,143.0,-67.0
};
new Float:zones_points_36[] = {
	294.0,-80.0,293.0,-136.0,324.0,-136.0,324.0,-203.0,360.0,-253.0,398.0,-182.0,346.0,-179.0,346.0,-134.0,385.0,-131.0,385.0,-7.0,
	337.0,-6.0,337.0,-68.0,325.0,-80.0,294.0,-80.0
};
new Float:zones_points_37[] = {
	274.0,-81.0,274.0,-202.0,324.0,-203.0,324.0,-136.0,293.0,-136.0,294.0,-80.0,274.0,-81.0
};
new Float:zones_points_38[] = {
	266.0,43.0,287.0,-1.0,336.0,-6.0,385.0,-7.0,385.0,114.0,309.0,65.0,266.0,43.0
};
new Float:zones_points_39[] = {
	143.0,-67.0,80.0,-67.0,79.0,-200.0,175.0,-203.0,173.0,-181.0,152.0,-180.0,151.0,-151.0,140.0,-149.0,143.0,-67.0
};
new Float:zones_points_40[] = {
	143.0,-81.0,141.0,-148.0,151.0,-152.0,152.0,-179.0,174.0,-180.0,175.0,-203.0,187.0,-203.0,186.0,-182.0,224.0,-181.0,225.0,-81.0,
	143.0,-81.0
};
new Float:zones_points_41[] = {
	173.0,-218.0,175.0,-286.0,231.0,-289.0,244.0,-276.0,227.0,-277.0,227.0,-217.0,173.0,-218.0
};
new Float:zones_points_42[] = {
	19.0,-201.0,-298.0,-140.0,-277.0,-208.0,-232.0,-275.0,-117.0,-393.0,20.0,-398.0,20.0,-345.0,201.0,-347.0,196.0,-289.0,175.0,-286.0,
	173.0,-218.0,257.0,-218.0,258.0,-258.0,361.0,-257.0,324.0,-203.0,19.0,-201.0
};
new Float:zones_points_43[] = {
	218.0,-290.0,218.0,-317.0,273.0,-316.0,275.0,-259.0,244.0,-259.0,245.0,-277.0,232.0,-289.0,218.0,-290.0
};
new Float:zones_points_44[] = {
	197.0,-288.0,205.0,-393.0,457.0,-415.0,630.0,-426.0,632.0,-473.0,651.0,-475.0,648.0,-408.0,483.0,-403.0,303.0,-374.0,216.0,-319.0,
	219.0,-290.0,197.0,-288.0
};
new Float:zones_points_45[] = {
	242.0,43.0,36.0,95.0,-191.0,216.0,-603.0,254.0,-741.0,171.0,-647.0,-34.0,-693.0,-136.0,-885.0,-194.0,-933.0,-222.0,-965.0,-423.0,
	-1031.0,-421.0,-1009.0,-140.0,-815.0,206.0,-639.0,295.0,-280.0,286.0,-20.0,208.0,229.0,160.0,242.0,43.0
};
new Float:zones_points_46[] = {
	-932.0,-222.0,-586.0,-229.0,-331.0,-244.0,-268.0,-257.0,-236.0,-292.0,-275.0,-329.0,-466.0,-308.0,-941.0,-282.0,-932.0,-222.0
};
new Float:zones_points_47[] = {
	-193.0,216.0,-286.0,-122.0,-300.0,-138.0,-276.0,-207.0,-232.0,-272.0,-119.0,-393.0,44.0,-477.0,72.0,-598.0,-94.0,-1001.0,-125.0,-966.0,
	-144.0,-814.0,-67.0,-581.0,-276.0,-335.0,-236.0,-293.0,-272.0,-257.0,-331.0,-244.0,-585.0,-231.0,-647.0,-32.0,-379.0,233.0,-193.0,216.0
};
new Float:zones_points_48[] = {
	500.0,207.0,386.0,116.0,386.0,-130.0,397.0,-184.0,459.0,-399.0,412.0,-578.0,231.0,-1026.0,262.0,-1038.0,504.0,-866.0,430.0,-600.0,
	428.0,-584.0,530.0,-610.0,552.0,-422.0,477.0,-418.0,481.0,-401.0,649.0,-406.0,661.0,-245.0,520.0,-259.0,539.0,-128.0,534.0,228.0,
	500.0,207.0
};
new Float:zones_points_49[] = {
	61.0,-544.0,73.0,-600.0,3.0,-769.0,305.0,-838.0,403.0,-598.0,677.0,-679.0,675.0,-652.0,532.0,-611.0,297.0,-542.0,61.0,-544.0
};
new Float:zones_points_50[] = {
	1253.0,-411.0,1153.0,-422.0,1107.0,-210.0,782.0,-204.0,786.0,-386.0,886.0,-510.0,887.0,-550.0,841.0,-559.0,842.0,-573.0,910.0,-571.0,
	1250.0,-448.0,1253.0,-411.0
};
new Float:zones_points_51[] = {
	1173.0,-188.0,1251.0,-406.0,1249.0,-451.0,1193.0,-618.0,1149.0,-760.0,1153.0,-933.0,1166.0,-932.0,1185.0,-715.0,1262.0,-520.0,1276.0,-403.0,
	1264.0,-366.0,1330.0,-325.0,1221.0,-172.0,1173.0,-188.0
};
new Float:zones_points_52[] = {
	673.0,-479.0,674.0,-607.0,656.0,-608.0,655.0,-653.0,676.0,-652.0,674.0,-825.0,697.0,-811.0,708.0,-643.0,707.0,-609.0,689.0,-609.0,
	690.0,-478.0,673.0,-479.0
};
new Float:zones_points_53[] = {
	646.0,-608.0,635.0,-642.0,641.0,-650.0,656.0,-607.0,646.0,-608.0
};
new Float:zones_points_54[] = {
	604.0,-540.0,603.0,-612.0,643.0,-615.0,645.0,-607.0,674.0,-607.0,674.0,-535.0,648.0,-536.0,648.0,-525.0,634.0,-524.0,633.0,-540.0,
	604.0,-540.0
};
new Float:zones_points_55[] = {
	689.0,-609.0,707.0,-610.0,708.0,-643.0,778.0,-641.0,778.0,-579.0,732.0,-577.0,729.0,-438.0,689.0,-438.0,691.0,-521.0,714.0,-523.0,
	714.0,-536.0,691.0,-537.0,689.0,-609.0
};
new Float:zones_points_56[] = {
	649.0,-407.0,652.0,-475.0,632.0,-473.0,630.0,-426.0,552.0,-422.0,540.0,-539.0,673.0,-534.0,673.0,-480.0,689.0,-477.0,689.0,-407.0,
	649.0,-407.0
};
new Float:zones_points_57[] = {
	690.0,-538.0,731.0,-539.0,732.0,-578.0,779.0,-577.0,783.0,-538.0,841.0,-536.0,841.0,-454.0,730.0,-455.0,732.0,-521.0,692.0,-521.0,
	690.0,-538.0
};
new Float:zones_points_58[] = {
	784.0,-538.0,779.0,-578.0,779.0,-642.0,863.0,-642.0,869.0,-573.0,842.0,-573.0,842.0,-560.0,888.0,-549.0,886.0,-510.0,841.0,-511.0,
	842.0,-536.0,784.0,-538.0
};

new street_names[MAX_STREETS_ZONES][64] = {
	"Main Street",
	"Halm Street",
	"Harris Avenue",
	"Bakers Street",
	"Ashworth Street",
	"Warner Avenue",
	"Lakewood Drive",
	"Herson Lane",
	"Deep Creek Avenue",
	"Rowe Street",
	"The Santee Alley",
	"Palomino Docs",
	"Farley Street",
	"Alton Road",
	"Haldon Avenue",
	"Crest Avenue",
	"Little John Road",
	"Navarra Road",
	"Long Road",
	"The Original Manassero Farms",
	"Oak Shadows",
	"Stab City",
	"Oak Road",
	"Eisenhower Avenue",
	"Redstone Lane",
	"Twain Street",
	"Mariposa Lane",
	"McKinley Road",
	"Ashlan Street",
	"Main Street",
	"Franklin Road",
	"Hampton Barns",
	"Blueberry Acres",
	"Pine Grove Avenue",
	"Walnut Lane",
	"Saint Avenue",
	"Chapel Hill Avenue",
	"Cardinal Street",
	"Lakeside Estates",
	"Briarwick Avenue",
	"Lindberg Alley",
	"Fresa Street",
	"Harvey Street",
	"Gold Strike Village",
	"Mirea Road",
	"Sierra Road",
	"Delaware Road",
	"Middleton Road",
	"Parkside Drive",
	"Casiano Road",
	"Manoldi Avenue",
	"Santa Road",
	"Goldberg Avenue",
	"Lee Alley",
	"Cress Avenue",
	"Goldberg Avenue",
	"Locust Street",
	"Morton Street",
	"East Avenue"
};

enum MARKS_DATA
{
    mID,
    mText[196],
    mCreator[32],
    mCreateDate[64],
    Float:mPosX,
    Float:mPosY,
    Float:mPosZ,
    mInt,
    mVW,

    mON,
    Text3D:mLabel,
};
new E_MARKS[MAX_MARKS][MARKS_DATA];

#define SC_MIN_INSTALL      (5)     // The rank from which speed cameras can be installed
#define SC_DEF_SPEED        (90.0)  // Standard speed exceeding which a fine will be issued
#define SC_MAX_SPEED        (150)   // The maximum speed that the camera can càpture
#define SC_DEF_RADIUS       (20.0)  // The radius in which the camera will record violations
#define SC_DEF_TICKET_SUM   (500)   // Speeding fine
#define SC_DEF_TIME         (5)     // Time, when driving near the camera for the second or more times, during which a fine will not be issued

#define MAX_SERVER_ACTORS   (10)

#define ACTOR_TYPE_NONE     (0)
#define ACTOR_TYPE_DRUGS    (1)

#define ACTOR_SEX_MALE      (0)
#define ACTOR_SEX_FEMALE    (1)
#define MAX_DRUG_ACTORS     (2)


#define 	MAX_OYUNCU_UYUSTURUCU_SAYI	6
#define 	MAX_OYUNCU_PAKET_SAYI		6
#define 	MAX_OYUNCU_HAMMADDE_SAYI	100
//
#define 	MAX_UYUSTURUCU_GRAM 		15
#define 	MAX_UYUSTURUCU_KALITE		100
//
#define 	MAX_ARAC_PAKET_SAYI			10
//
#define 	HAMMADDE_FIYAT				5 // $
//
#define		MAX_TOHUM					300
#define 	TOHUM_OBJE 					15038 //1320
#define 	TOHUM_LABEL_RENK 			0xFFFFFFFF
#define 	TOHUM_LABEL_MESAFE 			5.0
//
#define 	PAKET_LABEL_MESAFE 			5.0
#define 	PAKET_LABEL_RENK 			0xFFFFFFFF

enum UyusVeriler
{
	Ad[30],
	HammaddeSayi // 1gr üretmek için gereken hammadde sayýsý
}

new UyusTipleri[11][UyusVeriler] =
{
	{"LSD", 5}, // ID: 0 | Üretim Fiyatý: $50
	{"Kokain", 9}, // ID: 1 | Üretim Fiyat: $60
	{"Eroin", 7}, // ID: 2 | Üretim Fiyatý: $50
	{"Amfetamin / pasif", 9999}, // ID: 3 | Üretim Fiyatý: $40
	{"Metamfetamin", 4}, // ID: 4 | Üretim Fiyatý: $30
	{"Ekstazi",	3}, // ID: 5 | Üretim Fiyatý: $45
	{"PCP / pasif",	9999}, // ID: 6 | Üretim Fiyatý: $35
	{"Ketamin / pasif",	9999}, // ID: 7 | Üretim Fiyatý: $55
	{"Marijuana", 5}, // ID: 8 | Üretim Fiyatý: $50
	{"Haþhaþ / pasif", 99999}, // ID: 9 | Üretim Fiyatý: $50
	{"Aþk Suyu", 99999}
};

enum PaketVeriler
{
	PaketAd[30],
	Boyut[15],
	MaxGram,
	PaketObje
}

new PaketTipleri[15][PaketVeriler] =
{
	{"Ziploc Poþet", "K", 7, 1575},
	{"Ziploc Poþet", "O", 14, 1575},
	{"Ziploc Poþet", "B", 28, 1575},
	{"Poþetle Sarýlmýþ Top", "K", 10, 1580},
	{"Poþetle Sarýlmýþ Top", "O", 20, 1580},
	{"Poþetle Sarýlmýþ Top", "B", 30, 1580},
	{"Sarýlý Folyo", "K", 8, 1576},
	{"Sarýlý Folyo", "B", 16, 1576},
	{"Ýlaç Kutusu", "K", 5, 1577},
	{"Ýlaç Kutusu", "O", 10, 1577},
	{"Ýlaç Kutusu", "B", 15, 1577},
	{"Pizza Kutusu", "O", 70, 1582},
	{"Pizza Kutusu", "B", 140, 1582},
	{"El Çantasý", "B", 250, 1210},
	{"Spor Çantasý", "B", 500, 371}
};

enum Tohumlar
{
	tohumObjeID,
	tohumHammadde,
	tohumSahip,
	tohumSure,
	Text3D: tohumLabel,
	Float: tohumX,
	Float: tohumY,
	Float: tohumZ,
	tohumVW,
	tohumInt
}
new Tohum[MAX_TOHUM][Tohumlar];

new UyusturucuDialog[MAX_PLAYERS][6];

new DRUGS_MALE_ACTOR_SKINS[12] = {1, 21, 28, 29, 47, 66, 67, 107, 116, 123, 127, 142};
new DRUGS_FEMALE_ACTOR_SKINS[10] = {190, 191, 192, 193, 195, 13, 56, 93, 129, 152};

enum ACTOR_DATA
{
    aID,
    aType,
    Float:aPosX,
    Float:aPosY,
    Float:aPosZ,
    Float:aPosR,
    aInterior,
    aWorld,
    aSkin,
    aSex,
    aName[32],
    aAnimation,
    aPosUsed,

    Text3D:aLabel,
    aON,
};
new E_ACTOR[MAX_SERVER_ACTORS][ACTOR_DATA];

enum ACTOR_MNAMES_DATA
{
    dID,
    dName[12]
}
new ACTOR_MNAMES[26][ACTOR_MNAMES_DATA] =
{
    {0, "Bob"},
    {1, "Mark"},
    {2, "John"},
    {3, "Anthony"},
    {4, "William"},
    {5, "Dwayne"},
    {6, "Ray"},
    {7, "Vernon"},
    {8, "Harry"},
    {9, "Daniel"},
    {10, "Bruce"},
    {11, "Christopher"},
    {12, "Melvyn"},
    {13, "Kristian"},
    {14, "Howard"},
    {15, "Michael"},
    {16, "Steven"},
    {17, "Gregory"},
    {18, "Frank"},
    {19, "Cody"},
    {20, "Toby"},
    {21, "Tyler"},
    {22, "Jacob"},
    {23, "Homer"},
    {24, "Peter"},
    {25, "Pierce"}
};

enum ACTOR_FNAMES_DATA
{
    dID,
    dName[12]

}
new ACTOR_FNAMES[25][ACTOR_FNAMES_DATA] =
{
    {0, "Sophia"},
    {1, "Lynette"},
    {2, "Suzan"},
    {3, "Sarah"},
    {4, "Carol"},
    {5, "Ruth"},
    {6, "Christal"},
    {7, "Ryth"},
    {8, "Lindsey"},
    {9, "Mary"},
    {10, "Betty"},
    {11, "Alexia"},
    {12, "Susan"},
    {13, "Nancy"},
    {14, "Candice"},
    {15, "Rachel"},
    {16, "Mary"},
    {17, "Linda"},
    {18, "Jennifer"},
    {19, "Shauna"},
    {20, "Grace"},
    {21, "Charleen"},
    {22, "Angel"},
    {23, "Britney"},
    {24, "Eleanore"}
};


enum ACTOR_SURNAMES_DATA
{
    dID,
    dSurname[12]
}
new ACTOR_SURNAMES[47][ACTOR_SURNAMES_DATA] =
{
    {0, "Marley"},
    {1, "West"},
    {2, "Page"},
    {3, "Cage"},
    {4, "Smith"},
    {5, "Forester"},
    {6, "Baksley"},
    {7, "Ashton"},
    {8, "Tucker"},
    {9, "Wishp"},
    {10, "Nichols"},
    {11, "Walsh"},
    {12, "Shaw"},
    {13, "Gordon"},
    {14, "Nelson"},
    {15, "Baker"},
    {16, "Davidson"},
    {17, "Bryant"},
    {18, "Hart"},
    {19, "Todd"},
    {20, "York"},
    {21, "Crawford"},
    {22, "Willis"},
    {23, "Reeves"},
    {24, "Morgan"},
    {25, "Parks"},
    {26, "McLaughlin"},
    {27, "Hampton"},
    {28, "Farmer"},
    {29, "Bates"},
    {30, "Black"},
    {31, "Flinn"},
    {32, "Drake"},
    {33, "Houston"},
    {34, "Jacobs"},
    {35, "Weaver"},
    {36, "Walker"},
    {37, "Stafford"},
    {38, "Bond"},
    {39, "Stevens"},
    {40, "Phillips"},
    {41, "Garrett"},
    {42, "Cain"},
    {43, "Johnson"},
    {44, "Clarke"},
    {45, "Booth"},
    {46, "Benson"}
};

enum DRUGS_ACTOR_DATA_POS
{
    dID,
    Float:dX,
    Float:dY,
    Float:dZ,
    Float:dR,
    dInterior,
    dWorld,
    dPosUsed,
};
new D_ACTOR_POS[9][DRUGS_ACTOR_DATA_POS] =
{
    {0, -168.3290, 1031.4220, 19.7344, 270.0, 0, 0, 0},
    {1, 414.0645, 2536.2444, 19.1484, 180.0, 0, 0, 0},
    {2, -2244.5476, -1739.9977, 479.7629, 290.0, 0, 0, 0},
    {3, -2083.5020, -2423.9788, 30.6250, 235.0, 0, 0, 0},
    {4, 289.0271, -564.5673, 17.3386, 258.5515, 0, 0, 0},
    {5, 171.4148, -120.7469, 1.5524, 359.4563, 0, 0, 0},
    {6, 258.1330, -191.0994, 7.0613, 188.7830, 0, 0, 0},
    {7, 1322.3104, 392.3955, 19.5547, 335.6436, 0, 0, 0},
    {8, 2321.8096, -66.3857, 26.4844, 89.8106, 0, 0, 0}
};

enum RADIOS_ENUM
{
	radioID,
	radioChannel,
	radioOwner,
	radioPass[33],
	radioOn
}
new RadiosInfo[MAX_RADIOS][RADIOS_ENUM];

enum SPEEDCAM_INFO
{
    sc_id,
    sc_object,
    sc_speed,
    sc_name[32],
    Float:sc_x,
    Float:sc_y,
    Float:sc_z,
    Float:sc_rx,
    Float:sc_ry,
    Float:sc_rz,
    sc_int,
    sc_vw,

    sc_areaid
};
new speedcam[MAX_SPEEDCAMS][SPEEDCAM_INFO],
    Iterator:speedcamObjects<MAX_SPEEDCAMS>;

enum NOTE_ENUM
{
	noteID,
	noteText[128],
	noteOn
}
new PlayerNotes[MAX_PLAYERS][MAX_PLAYER_NOTES][NOTE_ENUM];

enum OtobusData
{
	Otobus_ID,
	Float:OtobusPosX,
	Float:OtobusPosY,
	Float:OtobusPosZ,
	bool:Otobus_Durak
};
new AracCP[MAX_VEHICLES];
new OtobusAracCP[MAX_VEHICLES];
new OtobusCP[][OtobusData] =
{
	//{0, 2097.9980,-1788.9056,13.5538, false},
	{1, 1856.4021,-1934.9515,13.3828, false},
	{2, 1959.0129,-2100.7507,13.6938, false},
	{3, 2129.0828,-2212.5640,13.3828, false},
	{4, 2097.2808,-2307.9211,13.3828, false},
	{5, 2291.0354,-2288.0083,13.3821, false},
	{6, 2218.4207,-2182.2332,13.3363, false},
	{7, 2218.8403,-1929.8542,13.3202, false},
	{8, 2275.7144,-1735.4087,13.3828, false},
	{9, 2344.5288,-1672.9521,13.3566, false},
	{10, 2433.4514,-1466.8311,23.8321, false},
	{11, 2453.7471,-1292.2289,23.8359, false},
	{12, 2621.6689,-1259.4360,49.0112, false},
	{13, 2720.4067,-1435.9772,30.2813, false},
	{14, 2663.9063,-1655.0096,10.6953, false},
	{15, 2766.7053,-1956.1993,13.3219, false},
	{16, 2376.2786,-2046.7797,14.3824, false},
	{17, 2150.3669,-2119.9678,13.3906, false},
	{18, 1531.9115,-1888.5752,13.6288, false},
	{19, 1391.5029,-1750.9760,13.3828, false},
	{20, 1532.3027,-1673.1805,13.3828, false},
	{21, 1392.7037,-1587.2679,13.3566, false},
	{22, 1302.6157,-1392.7324,13.2606, false},
	{23, 1206.7183,-1328.3905,13.3984, false},
	{24, 1255.2701,-1150.5858,23.6563, false},
	{25, 1497.0909,-1164.0106,23.9140, false},
	{26, 1790.7406,-1176.3657,23.6509, false},
	{27, 1845.8735,-1350.0762,13.3921, false},
	{28, 1818.5096,-1686.0674,13.3828, false},
	{29, 1818.8760,-1869.6726,13.4141, false}
};

#define PAYPHONE_STATE_NONE 	0
#define PAYPHONE_STATE_INCALL 	1
#define PAYPHONE_STATE_RINGING  2

enum PAYPHONE_ENUM
{
	phID,
	phType,
	Float: phX,
	Float: phY,
	Float: phZ,
	Float: phRX,
	Float: phRY,
	Float: phRZ,
	phInt,
	phVW,
	phNumber,

	//Local
	phObj,
	Text3D:phLabel,
	phUsed,
	phCaller,
	bool:pp_exist,
	phRing,
	phState

}
new PayphoneInfo[MAX_PAYPHONES][PAYPHONE_ENUM];

#define BALIK_TUTMA_ORANI 25
new BalikTimer[MAX_PLAYERS];

#define KARIDES         (2)
#define SULUNES         (1)
#define EKMEK_KIRINTISI (0)

enum balikPoslar
{
	Float:balikPos[4]
}

new MeslekGiris[] =
{
	{{359.791229, -2031.955078, 7.835937}, MESLEK_BALIKCI},
};
#pragma warning disable 227
enum    e_baliklar
{
	TurAdi[32],
	MinAgirlik,
	MaxAgirlik,
	Float: GramFiyat
};

new BalikTurleri[][e_baliklar] =
{
	// tür adý - min. aðýrlýk - max. aðýrlýk - gram fiyati
        {"Çupra", 120, 1000, 0.02},
        {"Ýstavrit", 100, 1000, 0.01},
        {"Levrek", 200, 1000, 0.02},
        {"Lagos", 111, 1000, 0.02},
        {"Somon", 88, 1000, 0.04},
        {"Mezgit", 200, 1000, 0.03},
        {"Zargana", 83, 1000, 0.03},
        {"Orkinos", 100, 1000, 0.02}
};

enum MOVEABLE_GATES_ENUM
{
	gateID,
	gateModel,
	gateObject,
	gateInt,
	gateVW,
	gateFaction,
	gateOpened,
	Float:gatePosX,
	Float:gatePosY,
	Float:gatePosZ,
	Float:gatePosRX,
	Float:gatePosRY,
	Float:gatePosRZ,
	Float:gateSpeed,
	Float:gateRadius,
	Float:gateMoveX,
	Float:gateMoveY,
	Float:gateMoveZ,
	Float:gateMoveRX,
	Float:gateMoveRY,
	Float:gateMoveRZ,
	gateSound,
	gateObjectOn
}
new Gates[MAX_GATES][MOVEABLE_GATES_ENUM];

enum LABEL_ENUM
{
	tID,
	tText[128],
	Float:tPosX,
	Float:tPosY,
	Float:tPosZ,
	//tColor,
	tVW,
	tInt,
	tGameText,
	tPickupModel,

	tLabelOn,
	Text3D:tLabel,
	tPickUp,

	tCreateDate[64],
	tCreator[32],

	tEdited,
	tEditDate[64],
	tEditor[32]
}
new LabelsInfo[MAX_LABELS][LABEL_ENUM];

enum MUSIC_ENUM
{
	mID,
	mName[64],
	mUrl[128]
}
new PlayerMusic[MAX_PLAYERS][MAX_PLAYER_MUSIC][MUSIC_ENUM];

enum OBJECTS_ENUM
{
	oID,
	oModel,
	oObject,
	oName[32],
	oInt,
	oVW,
	Float:oPosX,
	Float:oPosY,
	Float:oPosZ,
	Float:oPosRX,
	Float:oPosRY,
	Float:oPosRZ,
	oObjectOn
}
new ObjectsInfo[MAX_OBJECTS][OBJECTS_ENUM];

#define LEAR_HEARTS 1
#define LEAR_DIAMONDS 2
#define LEAR_CLUBS 3
#define LEAR_SPADES 4

#define MAX_TYPE_CARDS 14
#define MAX_CARDS_FOR_LEAR 4
#define MAX_PLAYER_CURRENT_CARDS 6

new exicards[0][13] = {"2","3","4","5","6","7","8","9","10","J","Q","K","A"};

new PackCards[MAX_PLAYERS][MAX_TYPE_CARDS];
new PackCardsLears[MAX_PLAYERS][14][MAX_CARDS_FOR_LEAR];

new PlayerSumm[MAX_PLAYERS];
new PlayerSummLear[MAX_PLAYERS][14];
new PlayerCurrentCards[MAX_PLAYERS][MAX_PLAYER_CURRENT_CARDS][2];

new bronze_str[] = {"{9ACD32} Premium: {FFFFFF} BRONZE\n\n {9ACD32} Advantages:\n {FFFFFF} Bronze title on the forum;\nColor and group on the forum;\nThe capacity of the LAN on the forum is 150;\nName change in game 2 times;\n /blockpm (block PM messages from a specific player);\nMaximum amount of health at the entrance;\nDisable AntiAfk system;\nLimit of contacts in the phone book - 25;\nMaximum number of houses for purchase - 2;\nPossibility to change license plate on your vehicle - 3 times "},
	bronze_str_2[] = {"Available vehicles for purchase: Bf Injection, Bandito;\n /setstyle (Change of HUD style (a), available at choice 4);\n /setstyle (Change of style of fight, available at choice 4);\nAvailable limit of accessories in the house - 150 objects;\n\n {9ACD32} Cost: {FFFFFF} 150 rubles."};


new silver_str[] = {"{9ACD32} Premium: {FFFFFF} SILVER\n\n {9ACD32} Advantages:\n {FFFFFF} Silver title on the forum;\nColor and group on the forum;\nThe capacity of the LAN on the forum is 200;\nName change in the game 3 times ;\n /blockpm (block PM messages from a specific player);\nMaximum amount of health upon entry;\nDisable AntiAfk system;\nLimit of contacts in the phone book - 35"},
    silver_str_2[] = {"Quit your job instantly, and not after 2 hours;\nSaving the mask after exiting the game;\nMaximum number of houses for purchase - 4;\nMaximum number of businesses for purchase - 2;\nMaximum number of vehicles for purchase - 5;\nPossibility to set on nitro car (2x, 5x, 10x);\nAbility to change the license plate on your vehicle - 5 times;\nAvailable vehicles for purchase: Bf Injection, Bandito, Sandking, Bullet, Cheetah"},
    silver_str_3[] = {"Reduced ad time /ad /cad (60 seconds for regular accounts, 30 seconds for silver);\n /setstyle (Change HUD style (a), available at choice 4);\n /setstyle (Change battle style, available choice 4);\nAvailable limit of fittings in the house - 250 objects;\n\n {9ACD32} Cost: {FFFFFF} 250 rubles."};


new gold_str[] = {"{9ACD32} Premium: {FFFFFF} GOLD\n\n {9ACD32} Advantages:\n {FFFFFF} Gold title on the forum;\nColor and group on the forum;\nThe capacity of the LAN on the forum is 200;\nName change in the game 5 times ;\n /blockpm (block PM messages from a specific player);\nMaximum amount of health when entering;\nDisable AntiAfk system"},
    gold_str_2[] = {"The limit of contacts in the phone book is 40;\nQuitting from work instantly, not after 2 hours;\nSaving the mask after leaving the game;\nMaximum number of houses to buy - 5;\nMaximum number of businesses to buy - 3;\nMaximum number of vehicles for purchase - 7;\nAbility to install nitro (2x, 5x, 10x) on the car;\nAbility to change the license plate on your vehicle - 7 times"},
    gold_str_3[] = {"Available vehicles for purchase: Infernus, Bullet, Cheetah, NRG-500, FBI Rancher, Sandking, Bf Injection, Bandito;\nReduced ad /ad /cad time (For regular accounts, feed 60 seconds, for gold 30 seconds);\n /setstyle (Change HUD style (a), available at choice 4);\n /setstyle (Change style in combat, available at choice 4);\nAvailable hardware limit in the house - 400 objects;\n\n {9ACD32} Cost: {FFFFFF} 450 rubles."};


#define MODE_SKATE (1)        // 0 - medium speed | 1 - fast speed
#define TYPE_SKATE (0)        // 0 - the skate is placed on the right arm | 1 - the skate is placed in the back
#define INDEX_SKATE (0)       //is the slot that used SetPlayerAttachedObject

enum skate
{
        bool:sActive,
        sSkate,
};
new InfoSkate[MAX_PLAYERS][skate];


forward OnTeleportInsert(playerid, teleid);

#define TOLL_COST (15) 					//
#define TOLL_DELAY_COP (4) 				//
#define TOLL_OPEN_DISTANCE (4.0) 		//
#define MAX_TOLLS (10)

enum TOLL_ENUM
{
	E_tLocked,  // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
	E_tOpenTime // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
}
new aTolls[MAX_TOLLS][TOLL_ENUM];

new Float: toll_gate_pos[MAX_TOLLS][3] =
{
    {607.9684, -1194.2866, 19.0043},//Richman
	{623.9500, -1183.9774, 19.2260},//Richman
 	{39.7039, -1522.9891, 5.1995},//Flint
 	{62.7378, -1539.9891, 5.0639},//Flint
 	{1778.9886, 702.6728, 15.2574},//LV
    {1795.9447, 704.2550, 15.0006},//LV
    {612.53070, 346.59592, 17.92614},//BLR
    {604.37152, 346.88141, 17.92614},//BLR
    {-195.2768,252.2416,12.0781},//BLL
    {-199.5153,260.3405,12.0781}//BLL
};

new Float: toll_gate_rot[MAX_TOLLS][2] =
{
 	{0.000000, 23.81982421875},
	{0.000000, 214.37744140625},
	{0.000000, 270.67565917969},
	{0.000000, 87.337799072266},
	{0.000000, 348.10229492188},
	{0.000000, 169.43664550781},
	{0.00000, 35.00000},
	{0.00000, 215.92000},
	{0.00000, -14.94000},
	{0.00000, -195.00000}
};

new L_a_RequestAllowedCop;
new L_a_TollObject[MAX_TOLLS];

#define			 	MAX_METERS 					100
// Maximum Parking Meters that can be made in the server.
#define 			CASH_PARKING        		150
// $10 per minutes


enum ParkingMeters
{
	parkObject,
	parkVehicle,
	Text3D:parkLabel,
	parkID,
	Float:parkX,
	Float:parkY,
	Float:parkZ,
	Float:parkA,
	bool:parkAvailable
};

new pMeter[MAX_METERS][ParkingMeters];

new const modelNames[212][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Article Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Article Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stuntplane", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Petrol Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Article Trailer 3", "Andromada", "Dodo", "RC Cam", "Launch", "LCPD", "LCPD", "LCPD",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

enum OWNED_CARS_ENUM
{
	carID,
	carDate[24],
	carModel,
	carColor1,
	carColor2,
	Float:carParkX,
	Float:carParkY,
	Float:carParkZ,
	Float:carParkA,
	carPlate[24],
	carOwner[MAX_PLAYER_NAME],
	carOwnerID,
	carOwnerPlayer,
	carAlarm,
	carLock,
	carImmob,
	carInsurance,
	carDestroyed,
	Impounded,
	carDeath,
	carGps,
	Float:carFuel,
	carRegistered,
	Float:carBattery,

	bool:ePhysicalAttack,
	eDoorHealth,
	eDoorEffect,
	bool:vCooldown,
	Text3D:eVehicleLabel,

	/*trunkInv[MAX_TRUNK_INVENTORY],
	trunkInvQ[MAX_TRUNK_INVENTORY],
	trunkInvEx[MAX_TRUNK_INVENTORY],
	trunkInvS[MAX_TRUNK_INVENTORY],
	Float:trunkInvQFloat[MAX_TRUNK_INVENTORY],
	trunkInvName[MAX_TRUNK_INVENTORY],//[16],

	carInv[MAX_CAR_INVENTORY],
	carInvQ[MAX_CAR_INVENTORY],
	carInvEx[MAX_CAR_INVENTORY],
	carInvS[MAX_CAR_INVENTORY],
	Float:carInvQFloat[MAX_CAR_INVENTORY],
	carInvName[MAX_CAR_INVENTORY],//[16],*/

	carComponent[14],
	carPaintJob,
	carRadio,
	carRadioOn,
	carRadioURL[156],
	carTrunkLock,
	carHoodLock,
	carComps,
	carOn,
	carAttach[MAX_TRUNK_INVENTORY],
	carAttachObj[MAX_TRUNK_INVENTORY],
	Float:carAttachPosX[MAX_TRUNK_INVENTORY],
	Float:carAttachPosY[MAX_TRUNK_INVENTORY],
	Float:carAttachPosZ[MAX_TRUNK_INVENTORY],
	Float:carAttachRotX[MAX_TRUNK_INVENTORY],
	Float:carAttachRotY[MAX_TRUNK_INVENTORY],
	Float:carAttachRotZ[MAX_TRUNK_INVENTORY],
	Float:carEngine,
	Float:carMilliage,
	Float:carArmour,
	carType,
	carFaction,
	carInt,
	carVW,
	carObjectiveTime,
	carLocked,
	carLights,
	carEngineOn,
	carAlarmTime,
	carSiren[5],
	carAdmin,
	carDriver,
	carRent,
	carTerminate,
	carTerminateEx,
	carHidedPlate,
	carFakePlate,
	carFakePlateS[24],

    carSlotUsed[MAX_CAR_WEAPONS],
	carWanted,

	vCorp,

	carCargoObj[6],
	carCargoAmount[MAX_TRUCK_PRODUCT]
}
new VehicleInfo[MAX_VEHICLES][OWNED_CARS_ENUM];
new VehicleAlertNote[MAX_VEHICLES];

new default_VehicleInfo[OWNED_CARS_ENUM] = {0, ...};

enum CARSIGN_ENUM
{
	Model,
	Float:positionX,
	Float:positionY,
	Float:positionZ
}
new CarSignPosition[][CARSIGN_ENUM] =
{
	{461, 0.3, -1.0, -0.3},
	{462, 0.3, -1.0, -0.3},
	{525, 1.167443, -3.043605, 0.180004},
	{543, 1.030224, -2.722537, -0.200004},
	{473, 1.193565, -1.414345, 0.420029},
	{463, 0.3, -1.0, -0.3},
	{440, 1.002595, -2.681906, -0.459998},
	{600, 1.091160, -2.746158, -0.120002},
	{491, 0.953455, -2.979441, -0.239999},
	{410, 0.955007, -2.228608, -0.080001},
	{516, 1.027337, -2.962487, -0.170002},
	{418, 1.103214, -2.570087, -0.464830},
	{586, 0.3, -1.0, -0.3},
	{467, 1.028320, -2.999034, -0.214818},
	{547, 1.020201, -2.584710, -0.120000},
	{401, 1.054817, -2.480719, -0.140003},
	{549, 1.082301, -2.583779, -0.080000},
	{436, 0.916299, -2.549531, -0.050001},
	{420, 1.0, -2.9, -0.3},
	{517, 1.034572, -2.839301, -0.210004},
	{589, 0.992253, -2.355031, 0.000000},
	{518, 0.900428, -2.861342, -0.260004},
	{527, 0.982744, -2.393449, -0.110004},
	{551, 1.061103, -3.165968, -0.150003},
	{439, 1.006824, -2.595001, -0.270002},
	{445, 1.021359, -2.832397, -0.279996},
	{478, 1.052814, -2.609067, -0.380001},
	{492, 0.978229, -2.940849, -0.180002},
	{422, 0.983972, -2.524313, -0.420005},
	{529, 1.115404, -2.667127, -0.040000},
	{405, 0.980890, -2.784532, -0.210003},
	{466, 1.045667, -2.966061, -0.260004},
	{546, 1.069141, -2.793050, -0.070000},
	{540, 1.091474, -2.847417, -0.269996},
	{474, 1.069592, -2.866971, -0.390014},
	{526, 0.983719, -2.478292, -0.192113},
	{500, 0.890960, -2.004438, -0.320005},
	{483, 0.853677, -2.782062, -0.690004},
	{545, 0.928996, -2.174747, -0.480005},
	{419, 0.894909, -2.980162, -0.230004},
	{561, 0.979001, -2.623326, -0.240000},
	{459, 1.053846, -2.747935, -0.310001},
	{421, 0.904305, -3.054692, -0.350002},
	{458, 1.028704, -2.880819, -0.281234},
	{550, 1.069714, -2.771331, -0.190003},
	{576, 1.106926, -3.187511, -0.189998},
	{412, 1.076371, -3.572624, -0.280000},
	{438, 1.156400, -2.742904, -0.490127},
	{533, 0.974355, -2.592291, -0.180003},
	{534, 0.902085, -2.936193, -0.235802},
	{585, 1.040636, -3.108255, 0.000011},
	{507, 1.120712, -3.145817, -0.244607},
	{554, 1.174269, -2.955613, -0.229997},
	{567, 1.151497, -2.914819, -0.323813},
	{536, 0.993514, -3.115452, -0.260004},
	{599, 1.156144, -2.711604, -0.280002},
	{575, 0.988381, -2.790904, -0.090000},
	{490, 1.160361, -3.164604, -0.280003},
	{479, 0.989108, -2.917149, -0.140010},
	{489, 1.156144, -2.711604, -0.280002},
	{505, 1.156144, -2.711604, -0.280002},
	{431, 1.333595, -5.849972, -0.349942},
	{528, 1.144452, -2.726179, -0.440945},
	{523, 0.3, -1.0, -0.3},
	{581, 0.3, -1.0, -0.3},
	{596, 1.0, -2.9, -0.3},
	{597, 1.0, -2.9, -0.3},
	{598, 1.0, -2.9, -0.3},
	{542, 0.906872, -2.986380, 0.060001},
	{475, 0.950730, -2.742572, -0.130002},
	{413, 1.046246, -2.721698, -0.320005},
	{496, 0.977342, -2.171343, -0.080001},
	{535, 1.130306, -2.585677, -0.260024},
	{508, 1.315136, -3.968503, -0.799797},
	{426, 1.0, -2.9, -0.3},
	{404, 0.904094, -2.716050, -0.130002},
	{562, 0.932509, -2.307183, 0.000000},
	{580, 1.111744, -2.988797, -0.220002},
	{427, 1.165557, -3.895762, -0.450003},
	{498, 1.212809, -3.118173, -0.430007},
	{482, 1.020809, -2.521172, -0.500000},
	{566, 1.010413, -3.070576, -0.210004},
	{587, 1.092979, -2.675873, -0.070001},
	{423, 1.077004, -2.316038, -0.530009},
	{588, 1.292603, -4.102272, -0.280002},
	{559, 1.018711, -2.410182, -0.030000},
	{579, 1.126602, -2.781873, -0.121123},
	{400, 0.969509, -2.338449, -0.340002},
	{453, 1.779353, -4.521831, 0.782691},
	{402, 0.962478, -2.753054, -0.110001},
	{558, 0.952415, -2.535459, 0.080000},
	{480, 0.920290, -2.553400, -0.200003},
	{408, 1.345347, -3.027748, -0.510008},
	{602, 1.057301, -2.615010, -0.160005},
	{565, 0.836606, -2.065968, -0.050016},
	{555, 0.776128, -2.399894, -0.186654},
	{484, 1.914409, -6.640307, 0.918600},
	{430, 1.741363, -3.972848, 0.732989},
	{409, 0.922155, -3.940322, -0.160002},
	{560, 0.976966, -2.092453, -0.149999},
	{454, 2.659766, -4.882382, 0.413978},
	{603, 0.995825, -2.742580, -0.250000},
	{415, 1.000831, -2.276099, -0.170001},
	{446, 1.756320, -4.015568, 0.610863},
	{563, 1.339340, -1.450655, -0.110008},
	{497, 0.870477, -1.143729, 0.000000},
	{417, 0.810983, -4.166908, 0.830009},
	{487, 0.870477, -1.143729, 0.000000},
	{593, 0.493165, -2.364330, -0.396965},
	{509, 0.3, -1.0, -0.3},
	{510, 0.3, -1.0, -0.3},
	{481, 0.3, -1.0, -0.3},
	{477, 1.076897, -2.785017, -0.060000},
	{468, 0.3, -1.0, -0.3},
	{521, 0.3, -1.0, -0.3},
	{522, 0.3, -1.0, -0.3},
	{471, 0.3, -1.0, -0.3},
	{424, 0.931385, -1.469463, 0.310007},
	{541, 1.0, -2.3, -0.3},
	{429, 0.963224, -2.496615, -0.140003},
	{506, 0.955852, -2.359090, -0.229991},
	{448, 0.3, -1.0, -0.3},
	{601, 1.299075, -3.126926, 0.790003},
	{176, 1.333595, -5.849972, -0.349942},
	{416, 1.260592, -3.708050, -0.590007},
	{544, 1.096374, -2.750413, -0.619934},
	{552, 1.274269, -2.964355, 0.000000},
	{407, 1.311471, -3.237637, -0.580261}
};

enum INSURANCE_ENUM
{
	insuranceModel,
	insurancePrice
}

new InsurancesPrice[][INSURANCE_ENUM] =
{
	{469, 4000},
   	{487, 6000},
   	{460, 7500},
   	{512, 4500},
   	{519, 9000},
   	{593, 7000},
   	{446, 1900},
   	{452, 1500},
   	{453, 900},
   	{454, 3000},
   	{473, 600},
   	{484, 2100},
   	{493, 2500},
   	{461, 900},
   	{462, 300},
   	{463, 650},
   	{468, 900},
   	{471, 900},
   	{521, 1100},
   	{522, 1500},
   	{581, 800},
   	{586, 700},
   	{409, 2000},
   	{421, 1200},
   	{426, 1200},
   	{434, 1500},
   	{480, 1500},
   	{507, 1350},
   	{533, 1350},
   	{545, 1350},
   	{551, 1100},
   	{555, 1500},
   	{560, 1900},
   	{580, 1700},
   	{401, 700},
   	{405, 900},
   	{410, 600},
   	{419, 650},
   	{436, 600},
   	{439, 700},
   	{445, 900},
   	{458, 700},
   	{466, 650},
   	{467, 650},
   	{482, 900},
   	{491, 800},
   	{492, 900},
   	{496, 900},
   	{516, 900},
	{517, 900},
   	{518, 700},
   	{526, 700},
   	{527, 600},
   	{529, 900},
   	{534, 750},
	{535, 900},
   	{536, 900},
   	{540, 900},
   	{546, 750},
   	{547, 600},
   	{550, 900},
   	{561, 900},
   	{566, 900},
   	{567, 900},
	{575, 900},
   	{585, 900},
   	{589, 900},
   	{404, 400},
   	{412, 450},
   	{418, 450},
   	{474, 450},
   	{475, 450},
   	{479, 450},
   	{542, 400},
   	{543, 400},
   	{549, 400},
   	{576, 450},
   	{600, 450},
   	{402, 2800},
   	{411, 4300},
   	{415, 4300},
   	{429, 3800},
   	{451, 4300},
   	{477, 3500},
   	{506, 3800},
   	{541, 3800},
   	{558, 2500},
   	{559, 3200},
   	{562, 3500},
   	{565, 2500},
   	{587, 2500},
   	{602, 2500},
   	{603, 2800},
   	{400, 950},
   	{470, 1800},
   	{489, 900},
   	{490, 2200},
   	{495, 1500},
   	{500, 900},
   	{554, 800},
   	{579, 1100},
   	{406, 1500},
   	{408, 1000},
   	{413, 800},
   	{414, 850},
   	{420, 700},
   	{422, 600},
   	{423, 700},
   	{431, 1000},
   	{437, 1000},
   	{438, 500},
   	{440, 800},
   	{455, 1500},
   	{456, 900},
   	{478, 600},
   	{498, 850},
   	{499, 900},
   	{524, 1500},
   	{525, 500},
   	{531, 400},
	{552, 800},
 	{578, 1000},
   	{588, 700},
   	{424, 1500},
   	{442, 700},
   	{457, 350},
   	{483, 750},
   	{508, 900},
   	{568, 2000},
   	{572, 300}
};

enum COMP_ENUM
{
	compID,
	compPrice,
}
new vehicle_component[8][29][COMP_ENUM] =
{
 	{//Êîëåñà
	    {1025, 1100},
		{1073, 1300},
		{1074, 1500},
		{1075, 1500},
		{1076, 1800},
		{1077, 1600},
		{1078, 2100},
		{1079, 1400},
		{1080, 2400},
		{1081, 1600},
		{1082, 1900},
		{1083, 1900},
		{1084, 1800},
		{1085, 1600},
		{1096, 1700},
		{1097, 1700},
		{1098, 900},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
		{0,0},{0,0}
	},
	{//Ñïîéëåðû
	    {1000, 800},
		{1001, 980},
		{1002, 890},
		{1003, 940},
		{1014, 950},
		{1015, 930},
		{1016, 850},
		{1023, 900},
		{1049, 980},
		{1050, 800},
		{1058, 950},
		{1060, 780},
		{1138, 1450},
		{1139, 1200},
		{1146, 1000},
		{1147, 1450},
		{1158, 1300},
		{1162, 1200},
		{1163, 1100},
		{1164, 1300},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}
	},
	{//Âîçäóõîçàáîðíèêè
        {1004, 900},
		{1005, 750},
		{1011, 800},
		{1012, 850},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
		{0,0},{0,0},{0,0},{0,0},{0,0}
	},
	{//Êðûøè
	    {1006, 650},
		{1032, 890},
		{1033, 950},
		{1035, 950},
		{1038, 890},
		{1053, 850},
		{1054, 780},
		{1055, 780},
		{1061, 850},
		{1067, 890},
		{1068, 950},
		{1088, 780},
		{1091, 850},
		{1103, 1300},
		{1128, 1550},
		{1130, 1550},
		{1131, 1300},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
		{0,0},{0,0}
	},
	{//Áîêîâûå þáêè
		{1017, 300},
		{1027, 700},
		{1030, 800},
		{1039, 980},
		{1040, 850},
		{1051, 800},
		{1052, 700},
		{1062, 770},
		{1063, 750},
		{1071, 900},
		{1072, 850},
		{1094, 800},
		{1099, 500},
		{1093, 700},
		{1101, 850},
		{1102, 400},
		{1107, 400},
		{1120, 550},
		{1121, 800},
		{1124, 690},
		{1137, 400},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}
	},
	{//Âûõëîïíûå òðóáû
	    {1018, 800},
		{1019, 700},
		{1020, 580},
		{1021, 550},
		{1022, 550},
		{1028, 1000},
		{1029, 850},
		{1034, 1000},
		{1037, 850},
		{1043, 750},
		{1044, 650},
		{1045, 800},
		{1046, 900},
		{1059, 850},
		{1064, 900},
		{1065, 850},
		{1066, 1000},
		{1089, 800},
		{1092, 900},
		{1104, 800},
		{1105, 700},
		{1113, 1000},
		{1114, 900},
		{1126, 700},
		{1127, 800},
		{1129, 650},
		{1132, 750},
		{1135, 800},
		{1136, 700}
	},
	{//Ïåðåäíèé áàìïåð
		{1117, 2250},
		{1152, 2650},
		{1153, 2800},
		{1155, 2800},
		{1157, 2650},
		{1160, 3100},
		{1165, 2600},
		{1166, 2800},
		{1169, 3200},
		{1170, 2800},
		{1171, 3200},
		{1172, 2800},
		{1173, 2800},
		{1174, 2250},
		{1175, 2100},
		{1179, 2400},
		{1181, 2300},
		{1182, 2350},
		{1185, 2200},
		{1188, 2500},
		{1189, 2350},
		{1190, 2150},
		{1191, 2250},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}
	},
	{//Çàäíèé áàìïåð
		{1141, 3000},
		{1140, 2900},
		{1148, 3000},
		{1149, 3100},
		{1150, 2650},
		{1151, 2800},
		{1154, 2650},
		{1156, 2800},
		{1159, 2900},
		{1161, 2850},
		{1167, 2750},
		{1168, 2700},
		{1176, 2200},
		{1177, 2250},
		{1178, 2300},
		{1180, 2350},
		{1183, 2150},
		{1184, 2200},
		{1186, 2300},
		{1187, 2200},
		{1192, 2100},
		{1193, 2200},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}
	}
};

IsNotAEngineCar(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if (pveh >= 509 && pveh <= 510 || pveh == 571 || pveh == 462 || pveh == 481
	|| pveh == 430 || pveh == 446 || pveh == 452 || pveh == 453 || pveh == 454
	|| pveh == 472 || pveh == 473 || pveh == 484 || pveh == 493 || pveh == 595
	|| pveh == 417 || pveh == 425 || pveh == 430 || pveh == 446 || pveh == 452
	|| pveh == 453 || pveh == 454 || pveh == 460 || pveh == 469 || pveh == 472
	|| pveh == 473 || pveh == 476 || pveh == 484 || pveh == 487 || pveh == 488
	|| pveh == 493 || pveh == 497 || pveh == 511 || pveh == 512 || pveh == 513
	|| pveh == 519 || pveh == 520 || pveh == 512 || pveh == 548 || pveh == 481
	|| pveh == 553 || pveh == 577 || pveh == 592 || pveh == 593 || pveh == 595)
    {
        return true;
    }
	return false;
}

new
	PlayerText: Dashcam[MAX_PLAYERS][2],
	VehRadarID[MAX_VEHICLES],
	CheckingSpeed[MAX_VEHICLES],
	OldVehID[MAX_PLAYERS]
;


new VehicleNames[212][] =
{
   "Landstalker",  "Bravura",  "Buffalo", "Linerunner", "Perennial", "Sentinel",
   "Dumper",  "Firetruck" ,  "Trashmaster" ,  "Stretch",  "Manana",  "Infernus",
   "Voodoo", "Pony",  "Mule", "Cheetah", "Ambulance",  "Leviathan",  "Moonbeam",
   "Esperanto", "Taxi",  "Washington",  "Bobcat",  "Mr Whoopee", "BF Injection",
   "Hunter", "Premier",  "Enforcer",  "Securicar", "Banshee", "Predator", "Bus",
   "Rhino",  "Barracks",  "Hotknife",  "Trailer",  "Previon", "Coach", "Cabbie",
   "Stallion", "Rumpo", "RC Bandit",  "Romero", "Packer", "Monster",  "Admiral",
   "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer",  "Turismo", "Speeder",
   "Reefer", "Tropic", "Flatbed","Yankee", "Caddy", "Solair","Berkley's RC Van",
   "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron","RC Raider","Glendale",
   "Oceanic", "Sanchez", "Sparrow",  "Patriot", "Quad",  "Coastguard", "Dinghy",
   "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",  "Regina",  "Comet", "BMX",
   "Burrito", "Camper", "Marquis", "Baggage", "Dozer","Maverick","News Chopper",
   "Rancher", "FBI Rancher", "Virgo", "Greenwood","Jetmax","Hotring","Sandking",
   "Blista Compact", "Police Maverick", "Boxville", "Benson","Mesa","RC Goblin",
   "Hotring Racer", "Hotring Racer", "Bloodring Banger", "Rancher",  "Super GT",
   "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropdust", "Stunt",
   "Tanker", "RoadTrain", "Nebula", "Majestic", "Buccaneer", "Shamal",  "Hydra",
   "FCR-900","NRG-500","HPV1000","Cement Truck","Tow Truck","Fortune","Cadrona",
   "FBI Truck", "Willard", "Forklift","Tractor","Combine","Feltzer","Remington",
   "Slamvan", "Blade", "Freight", "Streak","Vortex","Vincent","Bullet","Clover",
   "Sadler",  "Firetruck", "Hustler", "Intruder", "Primo", "Cargobob",  "Tampa",
   "Sunrise", "Merit",  "Utility Truck",  "Nevada", "Yosemite", "Windsor",  "Monster",
   "Monster","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RCTiger",
   "Flash","Tahoma","Savanna", "Bandito", "Freight", "Trailer", "Kart", "Mower",
   "Dune", "Sweeper", "Broadway", "Tornado", "AT-400",  "DFT-30", "Huntley",
   "Stafford", "BF-400", "Newsvan","Tug","Trailer","Emperor","Wayfarer","Euros",
   "Hotdog", "Club", "Trailer", "Trailer","Andromada","Dodo","RC Cam", "Launch",
   "LSPD Cruiser", "LSPD Cruiser","Police Car (LVPD)","Police Ranger",
   "Picador",   "S.W.A.T. Van",  "Alpha",   "Phoenix",   "Glendale",   "Sadler",
   "Luggage Trailer","Luggage Trailer","Stair Trailer", "Boxville", "Farm Plow",
   "Utility Trailer"
};

new VehicleColoursTableRGBA[256] =
{
    0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
    0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
    0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
    0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
    0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
    0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
    0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
    0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
    0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
    0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
    0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
    0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
    0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF,
    0x177517FF, 0x210606FF, 0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF,
    0xB7B7B7FF, 0x464C8DFF, 0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF,
    0x1E1D13FF, 0x1E1306FF, 0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF,
    0x992E1EFF, 0x2C1E08FF, 0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF,
    0x481A0EFF, 0x7A7399FF, 0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF,
    0x7B3E7EFF, 0x3C1737FF, 0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF,
    0x163012FF, 0x16301BFF, 0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF,
    0x2B3C99FF, 0x3A3A0BFF, 0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF,
    0x2C5089FF, 0x15426CFF, 0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF,
    0x995C52FF, 0x99581EFF, 0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF,
    0x96821DFF, 0x197F19FF, 0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF,
    0x8A653AFF, 0x732617FF, 0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF,
    0x561A28FF, 0x4E0E27FF, 0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

new Float:GetVehicleMaxSpeed[] = {
	157.0, 147.0, 186.0, 110.0, 133.0, 164.0, 110.0, 148.0, 100.0, 158.0, 129.0, 221.0, 168.0, 110.0, 105.0, 192.0, 154.0, 270.0, 115.0, 149.0,
	145.0, 154.0, 140.0, 99.0,  135.0, 270.0, 173.0, 165.0, 157.0, 201.0, 190.0, 130.0, 94.0,  110.0, 167.0, 0.0,   149.0, 158.0, 142.0, 168.0,
	136.0, 145.0, 139.0, 126.0, 110.0, 164.0, 270.0, 270.0, 111.0, 0.0,   0.0,   193.0, 270.0, 60.0,  135.0, 157.0, 106.0, 95.0,  157.0, 136.0,
	270.0, 160.0, 111.0, 142.0, 145.0, 145.0, 147.0, 140.0, 144.0, 270.0, 157.0, 110.0, 190.0, 190.0, 149.0, 173.0, 270.0, 186.0, 117.0, 140.0,
	184.0, 73.0,  156.0, 122.0, 190.0, 99.0,  64.0,  270.0, 270.0, 139.0, 157.0, 149.0, 140.0, 270.0, 214.0, 176.0, 162.0, 270.0, 108.0, 123.0,
	140.0, 145.0, 216.0, 216.0, 173.0, 140.0, 179.0, 166.0, 108.0, 79.0,  101.0, 270.0,	270.0, 270.0, 120.0, 142.0, 157.0, 157.0, 164.0, 270.0,
	270.0, 160.0, 176.0, 151.0, 130.0, 160.0, 158.0, 149.0, 176.0, 149.0, 60.0,  70.0,  110.0, 167.0, 168.0, 158.0, 173.0, 0.0,   0.0,   270.0,
	149.0, 203.0, 164.0, 151.0, 150.0, 147.0, 149.0, 142.0, 270.0, 153.0, 145.0, 157.0, 121.0, 270.0, 144.0, 158.0, 113.0, 113.0, 156.0, 178.0,
	169.0, 154.0, 178.0, 270.0, 145.0, 165.0, 160.0, 173.0, 146.0, 0.0,   0.0,   93.0,  60.0,  110.0, 60.0,  158.0, 158.0, 270.0, 130.0, 158.0,
	153.0, 151.0, 136.0, 85.0,  0.0,   153.0, 142.0, 165.0, 108.0, 162.0, 0.0,   0.0,   270.0, 270.0, 130.0, 190.0, 175.0, 175.0, 175.0, 158.0,
	151.0, 110.0, 169.0, 171.0, 148.0, 152.0, 0.0,   0.0,   0.0,   108.0, 0.0,   0.0
};

new price_reg[2] = {0, 300};
new price_lock[6] = {0, 700, 1400, 2800, 5400, 8500};
new price_alarm[5] = {0, 600, 1600, 3500, 6200};
new price_immob[5] = {0, 800, 2200, 4600, 9100};
new price_radio[2] = {0, 400};
new price_gps[2] = {0, 1000};

new price_mod_lock[] = {900, 1500, 2400, 3600, 5100};
new price_mod_alarm[] = {700, 1800, 3200, 5000};
new price_mod_immob[] = {800, 2000, 4300, 8500};

new JackingEngine[MAX_PLAYERS];
new JackingLock[MAX_PLAYERS];
new JackingVehicle[MAX_PLAYERS];
new BreakingHouse[MAX_PLAYERS];
new StealingHouse[MAX_PLAYERS];


new max_vehicle_components[8] = {17, 20, 4, 17, 21, 29, 23, 22};

new veh_int[MAX_VEHICLES], veh_vw[MAX_VEHICLES];

new PlayerText:SpawnVeh_Box[MAX_PLAYERS];
new PlayerText:SpawnVeh_Model[MAX_PLAYERS];
new PlayerText:SpawnVeh_Base[MAX_PLAYERS][3];
new PlayerText:SpawnVeh_Arrows[MAX_PLAYERS][2];

stock CreateVehicleMenu(playerid)
{
	SpawnVeh_Box[playerid] = CreatePlayerTextDraw(playerid, 391.699737, 100.814804, "box");
	PlayerTextDrawLetterSize(playerid, SpawnVeh_Box[playerid], 0.000000, 11.692327);
	PlayerTextDrawTextSize(playerid, SpawnVeh_Box[playerid], 476.199951, 0.000000);
	PlayerTextDrawAlignment(playerid, SpawnVeh_Box[playerid], 1);
	PlayerTextDrawColor(playerid, SpawnVeh_Box[playerid], -2139062017);
	PlayerTextDrawUseBox(playerid, SpawnVeh_Box[playerid], 1);
	PlayerTextDrawBoxColor(playerid, SpawnVeh_Box[playerid], -2139062017);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Box[playerid], 0);
	PlayerTextDrawSetOutline(playerid, SpawnVeh_Box[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, SpawnVeh_Box[playerid], 255);
	PlayerTextDrawFont(playerid, SpawnVeh_Box[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SpawnVeh_Box[playerid], 1);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Box[playerid], 0);

	SpawnVeh_Model[playerid] = CreatePlayerTextDraw(playerid, 393.216583, 106.677719, "");
	PlayerTextDrawLetterSize(playerid, SpawnVeh_Model[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpawnVeh_Model[playerid], 82.000000, 91.000000);
	PlayerTextDrawAlignment(playerid, SpawnVeh_Model[playerid], 1);
	PlayerTextDrawColor(playerid, SpawnVeh_Model[playerid], -1);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Model[playerid], 0);
	PlayerTextDrawSetOutline(playerid, SpawnVeh_Model[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, SpawnVeh_Model[playerid], -1061109505);
	PlayerTextDrawFont(playerid, SpawnVeh_Model[playerid], 5);
	PlayerTextDrawSetProportional(playerid, SpawnVeh_Model[playerid], 0);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Model[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, SpawnVeh_Model[playerid], 419);
	PlayerTextDrawSetPreviewRot(playerid, SpawnVeh_Model[playerid], -15.000000, 0.000000, -45.000000, 0.899999);
	PlayerTextDrawSetPreviewVehCol(playerid, SpawnVeh_Model[playerid], 1, 1);
    PlayerTextDrawSetSelectable(playerid, SpawnVeh_Model[playerid], true);

	SpawnVeh_Base[playerid][0] = CreatePlayerTextDraw(playerid, 474.166473, 184.836654, "Admiral");
	PlayerTextDrawLetterSize(playerid, SpawnVeh_Base[playerid][0], 0.434999, 1.776297);
	PlayerTextDrawAlignment(playerid, SpawnVeh_Base[playerid][0], 3);
	PlayerTextDrawColor(playerid, SpawnVeh_Base[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Base[playerid][0], 1);
	PlayerTextDrawSetOutline(playerid, SpawnVeh_Base[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, SpawnVeh_Base[playerid][0], 255);
	PlayerTextDrawFont(playerid, SpawnVeh_Base[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, SpawnVeh_Base[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Base[playerid][0], 1);

	SpawnVeh_Base[playerid][1] = CreatePlayerTextDraw(playerid, 388.800537, 89.648048, "LD_BEAT:cring");
	PlayerTextDrawLetterSize(playerid, SpawnVeh_Base[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpawnVeh_Base[playerid][1], 19.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, SpawnVeh_Base[playerid][1], 1);
	PlayerTextDrawColor(playerid, SpawnVeh_Base[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Base[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, SpawnVeh_Base[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, SpawnVeh_Base[playerid][1], 255);
	PlayerTextDrawFont(playerid, SpawnVeh_Base[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, SpawnVeh_Base[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Base[playerid][1], 0);

	SpawnVeh_Base[playerid][2] = CreatePlayerTextDraw(playerid, 395.500518, 94.022277, "ARACI GETIR");
	PlayerTextDrawLetterSize(playerid, SpawnVeh_Base[playerid][2], 0.322916, 1.330371);
	PlayerTextDrawAlignment(playerid, SpawnVeh_Base[playerid][2], 1);
	PlayerTextDrawColor(playerid, SpawnVeh_Base[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Base[playerid][2], 1);
	PlayerTextDrawSetOutline(playerid, SpawnVeh_Base[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, SpawnVeh_Base[playerid][2], 255);
	PlayerTextDrawFont(playerid, SpawnVeh_Base[playerid][2], 3);
	PlayerTextDrawSetProportional(playerid, SpawnVeh_Base[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Base[playerid][2], 1);

	SpawnVeh_Arrows[playerid][0] = CreatePlayerTextDraw(playerid, 471.250122, 141.000030, "LD_BEAT:right");
	PlayerTextDrawLetterSize(playerid, SpawnVeh_Arrows[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpawnVeh_Arrows[playerid][0], 17.000000, 27.000000);
	PlayerTextDrawAlignment(playerid, SpawnVeh_Arrows[playerid][0], 1);
	PlayerTextDrawColor(playerid, SpawnVeh_Arrows[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Arrows[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, SpawnVeh_Arrows[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, SpawnVeh_Arrows[playerid][0], 255);
	PlayerTextDrawFont(playerid, SpawnVeh_Arrows[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, SpawnVeh_Arrows[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Arrows[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, SpawnVeh_Arrows[playerid][0], true);

	SpawnVeh_Arrows[playerid][1] = CreatePlayerTextDraw(playerid, 380.416717, 141.518585, "LD_BEAT:left");
	PlayerTextDrawLetterSize(playerid, SpawnVeh_Arrows[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpawnVeh_Arrows[playerid][1], 17.000000, 29.000000);
	PlayerTextDrawAlignment(playerid, SpawnVeh_Arrows[playerid][1], 1);
	PlayerTextDrawColor(playerid, SpawnVeh_Arrows[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Arrows[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, SpawnVeh_Arrows[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, SpawnVeh_Arrows[playerid][1], 255);
	PlayerTextDrawFont(playerid, SpawnVeh_Arrows[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, SpawnVeh_Arrows[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, SpawnVeh_Arrows[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, SpawnVeh_Arrows[playerid][1], true);

	return 1;
}

enum E_UNSCRAMBLER_DATA
{
	//eUnscrambleLevel,
	eScrambledWord[60],
	eUnscrambledWord[60]
}

new UnscrambleInfo[][E_UNSCRAMBLER_DATA] =
{
	{"MORTO", "MOTOR"},
	{"CLASTRI", "CALISTIR"},
	{"KRLUA", "KURAL"},
	{"TOWNDOWN", "LOSWORLD"},
	{"TUKKOL", "KOLTUK"},
	{"LIRYA", "AYRIL"},
	{"BDION", "BIDON"},
	{"OLBAK", "KABLO"},
	{"TARKIM", "MIKTAR"},
	{"LAKAMUT", "MUTLAKA"}
};

/*
new Float: Jacking_CP[8][3] = {
	{2216.8882,-2404.0046,13.5469},
	{2873.8855,893.4097,10.7500},
	{1032.4172,2344.1072,10.8203},
	{425.3987,2546.8647,16.2877},
	{-1869.1023,-1681.6959,21.7500},
	{-1561.9364,-2721.1296,48.5408},
	{22.7649,-2653.4316,40.5005},
	{-259.2915,-2182.3169,29.0084}
};*/

enum GARAGE_ENUM
{
	garageID,
	garageOwner,
	garageOwnerName[MAX_PLAYER_NAME],

	garageHouse,
	garageBiz,

	garageDDoor,
	Text3D:garageLabelDDoor,

	garagePrice,
	garageLocked,
	Float: garageVeh_Enter[4],
	Float: garageVeh_Exit[4],
	garageEnterInt,
	garageEnterVW,
	Float: garagePlayer_Enter[3],
	garageExitInt,
	garageExitVW,
	Float: garagePlayer_Exit[3],
	garageCP,

	gFireTimer,

	gFurniture,
	gOutsideFurniture,
	Float: gFurnitureRadius
}

new GarageInfo[MAX_GARAGES][GARAGE_ENUM];

new Float: garage_veh_pos[9][4] =
{
    {612.5345,-1.3466,1000.6270,90.1865},
	{614.5330,-124.6238,997.6979,88.4038},
	{615.4903,-75.3255,997.6971,86.8641},
	{1253.8479,-862.2391,1083.7823,0.1047},
	{1227.8630,5.3595,1001.0543,0.1440},
	{2538.269, -1537.054, 2023.286, 88.755},
	{1145.403, 36.718, 1001.846, 270.634},
	{1226.998, 36.683, 1001.091, 359.786},
	{2349.39795, -1787.45105, 3000.75708, 90.0}
};

new Float: garage_player_pos[9][4] =
{
    {627.3027,-11.8948,1000.9219,267.5414},
	{620.2144,-119.7664,998.8496,0.7716},
	{620.1339,-70.8999,997.9922,356.8630},
	{1258.1970,-867.9012,1084.0519,86.0345},
	{1224.9291,8.1757,1001.3489,89.1820},
	{2535.509, -1534.658, 2023.582, 270.318},
	{1148.243, 34.473, 1002.147, 88.052},
	{1230.097, 38.633, 1001.386, 176.057},
	{2353.2781,-1782.1946,3001.0859,359.1046}
};

new garage_int[9] = {1, 3, 2, 6, 7, 25, 26, 27, 28};

#define IsFurnitureFirable(%0) (%0 < 5 && %0 == 7 && %0 == 8 && %0 == 15 && %0 == 29)

#define MAX_FURNITURE_LIST      20
#define MAX_FURNITURE 			500

enum FURNITURE_ENUM
{
	fID,
	fModel,
	fObject,
	fName[64],
	//fBuildingID,
	fInterior,
	fVirtualWorld,
	fMarketPrice,
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	Float:fPosRX,
	Float:fPosRY,
	Float:fPosRZ,
	fLocked,
	fOpened,
	fOn,
	fTexture[5],
	fCategory,

	ChemIdx
}

new HFurn[MAX_HOUSES][MAX_FURNITURE][FURNITURE_ENUM];
new BFurn[MAX_BIZ][MAX_FURNITURE][FURNITURE_ENUM];
new GFurn[MAX_GARAGES][MAX_FURNITURE][FURNITURE_ENUM];
//new TFurn[MAX_TRAILERS][MAX_FURNITURE][FURNITURE_ENUM];

#define BIZ_NONE       	        (0)
#define BIZ_BAR 		        (1)
#define BIZ_STORE               (2)
#define BIZ_AMMO                (3)
#define BIZ_CLOTHES             (4)
#define BIZ_BARBER              (5)
#define BIZ_GAS_STATION         (6)
#define BIZ_PAYNSPRAY           (7)
#define BIZ_BANK                (8)
#define BIZ_AUTOSALON           (9)
#define BIZ_BOATSALON           (10)
#define BIZ_FLYSALON            (11)
#define BIZ_TUNING              (12)
#define BIZ_ADVERT              (13)
#define BIZ_LICENSE             (14)
#define BIZ_PIZZA               (15)
#define BIZ_CLUCKIN             (16)
#define BIZ_BURGER              (17)
#define BIZ_DONUT 		        (18)
#define BIZ_RESTAURANT          (19)
#define BIZ_BUILD               (20)
#define BIZ_PHARMACY            (21)
#define BIZ_PAWN    	        (22)
#define BIZ_PHONES    	        (23)
#define BIZ_ATTACH    	        (25)

//#define BIZ_WAREHOUSE         (24)
//#define BIZ_LAUNDARY          (26)

#define PRICE_BURGER            (10)
#define PRICE_PIZZA             (15)
#define PRICE_CHICKEN           (7)
#define PRICE_HOTDOG            (5)

#define UPGRADE_PRICE_RADIO     (100)
#define UPGRADE_PRICE_DOOR      (1500)

#define PRICE_RADIO            (500)
#define PRICE_EVHIRSIZLIK      (500)

new biz_prod_types[26] =
	{-1, 2, 23, 21, 3, -1, 0, 11, -1, 4, 4, 4, 12, 15, -1, 1, 1, 1, 1, 1, 22, -1, -1, -1, -1, -1};

new biz_prod_point[26] =
	{0, 5, 5, 10, 5, 0, 10, 3, 0, 3, 3, 3, 10, 20, 0, 5, 5, 5, 5, 5, 10, 0, 0, 0, 0, 0};

#define MAX_BIZ_TYPES 26
new biz_types[MAX_BIZ_TYPES][64] = {
    "Diðer",
    "Bar / Club",
    "Market",
    "Silah Dükkaný",
    "Giyim Maðazasý",
    "Berber Dükkaný",
    "Benzinlik",
    "Tamirhane",
    "Banka",
    "Araç Galerisi",
    "Gemi Satýcýsý",
    "Uçak Satýcýsý",
    "Modifiye Dükkaný",
    "Reklam Ajansý",
    "Sürücü Kursu",
    "Pizza Dükkaný",
    "Tavuk Dükkaný",
    "Burger Dükkaný",
    "Donut Dükkaný",
    "Restorant",
    "Mimarlýk Ofisi",
    "Eczane",
    "Pawnshop",
    "Telefoncu",
    // "Warehouse",
    //"Laundry",
    "Süpermarket",
    "Aksesuar Dükkaný"
};

new trucker_teslimat[MAX_BIZ_TYPES][64] = {
    "Diðer",
    "Ýçki Kolisi",
    "Market Eþyalarý",
    "Silah Dükkaný",
    "Tekstil Parçalarý",
    "Yeni Traþ Makinesi",
    "Motor Yaðý LibOil",
    "Tamir Araç/Gereçleri",
    "POS Kaðýdý",
    "Kalem / Kaðýt",
    "Gemi Satýcýsý",
    "Uçak Satýcýsý",
    "Tamirat Parçalarý",
    "Kalem / Kaðýt",
    "Kalem / Kaðýt",
    "Pizza Kutusu",
    "Donmuþ Tavuk Parçacýklarý",
    "Burger Ekmekleri",
    "Lezzetli Çikolatalý Sos",
    "Sývý Yað Kolisi",
    "Kalem / Kaðýt",
    "Ýlaç Kutusu",
    "Araç Gereç",
    "Yeni Telefon",
    // "Warehouse",
    //"Laundry",
    "Süpermarket Eþyalarý",
    "Yeni Sezon Saat"
};

#define LIMIT_MAX_PRODUCTS (12)
new const max_product[] =
	{4, 4, 4, 3, 11, 8, 12, 3};

new const name_order[][][32] =
{
    /*
    {1579, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½",		0,1,1, 108},
    {1579, ITEM_TYPE_REACT, 				ITEM_SIZE_MEDIUM, 	"ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½",        	   		0,1,1, 112},
    */
    {"Buster", "Double D-Luxe", "Full Rack", "Salad Meal", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ"},
    {"Clukin' Little Meal", "Clukin' Big Meal", "Clukin' Huge Meal", "Salata", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ"},
    {"Çocuk Menüsü", "Et Kulesi", "Et Dünyasý", "Etli Salata", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ"},
    {"Küçük porsiyon", "Orta porsiyon", "Büyük porsiyon", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ"},
    {"SIM kartý", "Telsiz", "Çakmak", "Sigara", "Zar", "Benzin Bidonu", "Kalem", "Oyun kartý", "Kamera", "Boombox", "Araç Etiket", "Boþ"},
    {"Bira", "Votka", "Kola", "Su", "Viski", "Brandy", "Soda", "Þarap", "Boþ", "Boþ", "Boþ", "Boþ"},
    {"","Ýlk yardým Kiti", "Kýrmýzý fosfor", "Vinilbenzil alkol", "Metilamin", "Heliotropin", "Efedrin", "Potasyum permanganat", "Kloroform", "Eter", "Hidrojen klorür", "Metanol"},
    {"Bicak", "Beyzol Sopasi", "Maske", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ", "Boþ"}
};

new const model_order[8][12] =
{
    {2218, 2219, 2220, 2355, 0, 0, 0, 0, 0, 0, 0, 0},
    {2215, 2216, 2217, 2353, 0, 0, 0, 0, 0, 0, 0, 0},
    {2213, 2214, 2212, 2354, 0, 0, 0, 0, 0, 0, 0, 0},
    {2221, 2223, 2222, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {19792, 19942, 19998, 19897, 1906, 1650, 338, 11748, 367, 2226, 1248, 0}, // -sim -ï¿½ï¿½ï¿½ï¿½ -INV_CARSOUND -
    {2958, 1668, 1546, 1455, 1520, 19820, 19346, 1664, 0, 0, 0, 0},
    {1578, 11736, 2709, 2709, 2709, 2709, 2709, 2709, 2709, 2709, 2709, 2709},
    {335, 336, 19801, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

new const biz_prices[8][12] =
{
    {100, 100, 200, 300, 0, 0, 0, 0, 0, 0, 0, 0},
    {100, 100, 200, 300, 0, 0, 0, 0, 0, 0, 0, 0},
    {100, 100, 200, 300, 0, 0, 0, 0, 0, 0, 0, 0},
    {100, 100, 200, 300, 0, 0, 0, 0, 0, 0, 0, 0},
    {300, 500, 1500, 50, 100, 100, 1000, 50, 100, 1500, 1000, 150},
    {100, 200, 100, 50, 300, 500, 100, 300, 0, 0, 0, 0},
    {1000, 1500, 1000, 1000, 1500, 1000, 1500, 1000, 1000, 1000, 2000, 1500},
    {10000, 5000, 40000, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

enum BIZ_ENUM
{
	bizID,
	Text3D:bizLabelDDoor,
	bizDurum,
	Float:bizPosX,
	Float:bizPosY,
	Float:bizPosZ,
	Float:bizExitX,
	Float:bizExitY,
	Float:bizExitZ,
	Float:bizSpawn[4], 	//-------- Dealership --------//
	bizSpawnInt, 		//-------- Dealership --------//
	bizSpawnVW, 		//-------- Dealership --------//
	bizPickUp,
	bizName[32],
	bizInfo[32],
	bizMes[128],
	bizOwner[MAX_PLAYER_NAME],
	bizOwnerID,
	bizLocked,
	bizPrice,
	bizFreeze,
	bizLevelbuy,
	bizExitInt,
	bizExitVW,
	bizPosInt,
	bizPosVW,
	bizCash,
	bizType,
	bizEntrance,
	bizRadio,
	bizRadioOn,
	bizRadioURL[156],
	bizDDoor,
	bizProductPrice[12],
	bizProduct,
	bizBuyPrice,

	bizOnline,
	bizAlreadyOnline,

	bFireTimer,

	bFurniture,
	bOutsideFurniture,
	Float: bFurnitureRadius

	/*bizPrName[12][32],
	bizPrItem[12],
	bizPrPrice[12]*/
};
new BizInfo[MAX_BIZ][BIZ_ENUM];

#define MAX_WORK_SPACE 10

enum BIZ_WORKERS
{
	bizJobOn,
	bizWorker[24],
	bizPosition[24]
};
new BizWorkers[MAX_BIZ][MAX_WORK_SPACE][BIZ_WORKERS];

new mcallenstring[777];
new Text3D:mcallenlabel;

enum APART_ENUM
{
	aID,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aExitX,
	Float:aExitY,
	Float:aExitZ,
	aExitInt,
	aExitVW,
	aPosInt,
	aPosVW,
	aApartOn,
	aPickup
};
new ApartInfo[MAX_APART][APART_ENUM];

enum APART_INTERIORS_ENUM
{
	aID,
	aName[32],
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	aInt
};
new E_APARTINT[18][APART_INTERIORS_ENUM] = {

	{0, "", 						0.0, 		0.0, 		0.0, 		0},
	{1, "Ghetto Apart", 			162.9840, 	-24.6746,	996.4470,  	1},
	{2, "Ghetto Apart 2", 			2099.8064, 	-1180.0836,	1029.6458, 	1},
	{3, "Apart",					313.3590,	53.9657,	1072.7437,  1},
	{4, "Apart 2",					787.8120, 	-896.5082, 	482.8069, 	1},
	{5, "Sivil Site 1", 			1528.69995, -26.70, 	1002.5,		1},
	{6, "Ghetto Site 1", 		665.6864, 	-673.1936, 	787.2360, 	1},
	{7, "Ghetto Site 2", 		1469.9661, 	-190.8232, 	1031.9879, 	1},
	{8, "Çin Stili Site",	1632.6002, 	744.2397, 	900.9210, 	1},
	{9, "Sivil Site 2",			1256.0890, 	-1848.6511, 612.0620, 	1},
	{10, "Fakir Ýþi Apart",			2795.1311, 	-1215.3330, 984.7050, 	1},
	{11, "Otel 1", 		-152.8758,	37.3332, 	1001.0859, 	1},
	{12, "Otel 2", 		-528.3482, 	-361.4522, 	1001.0859, 	1},
	{13, "Ghetto Site 3", 		-2055.2624, 1013.7964, 	1464.8419, 	1},
	{14, "Rezidans",			619.0,		-1397.0,	1000.0,		1},
	{15, "Hall", 				1301.7100,	-1467.8789, 3001.0859, 16},
	{16, "Motel",					1767.8296, 	-1541.9338,	1187.3810, 14},
	{17, "Motel 2",					2168.4255,	-1720.0083,	1730.8040, 15}
}; //2393.54980469 -35.14160156 2521.51098633

#define MAX_TENAT_SPACE 5

enum HOUSE_ENUM
{
	hID,
	Text3D:hLabelDDoor,
	hCheckPoint,
	hPickup,
	//hExtCheckPoint,
	hExtPickup,

	Float:hPosX,
	Float:hPosY,
	Float:hPosZ,
	hPosInt,
	hPosVW,
	Float:hExitX,
	Float:hExitY,
	Float:hExitZ,
	hExitInt,
	hExitVW,

	Float:hExtX[2],
	Float:hExtY[2],
	Float:hExtZ[2],
	hExtInt[2],
	hExtVW[2],

	hOwner[MAX_PLAYER_NAME],
	hOwnerID,
	hLocked,
	hPrice,
	hLevelbuy,
	hCash,

	hApart,

	hRobbed, // hRobbed = gettime() + 12 * 3600;
	hRobber, // Who? ID  30 sec = 10% safe AND if 3 policer online and non afk
	hAlarmA,
	hAlarmTime,
	Text3D:hAText,

	Float:hCheckPosX,
	Float:hCheckPosY,
	Float:hCheckPosZ,
	hRadio,
	hLock,
	hAlarm,
	hDoor,
	hDDoor,
	hRadioOn,
	hRadioURL[156],
	hClass,
	hHeal,
	hHealAmount,
	hCupboard,

	hFireTimer,

	hFurniture,
	hOutsideFurniture,
	Float: hFurnitureRadius /*ALTER TABLE `houses` ADD `furniture_radius` FLOAT NOT NULL DEFAULT '7.0' ;*/
};
new HouseInfo[MAX_HOUSES][HOUSE_ENUM];

/* Îáîçíà÷åíèÿ ðàáîò */

#define JOBLESS             (0)
#define JOB_TRUCKER         (1)
#define JOB_MECHANIC        (2)
#define JOB_TAXI            (3)
#define JOB_PIZZA           (4)
#define JOB_BALIKCI         (5)
#define JOB_TASIMACILIK     (6)
#define JOB_CARJACKER       (7)
#define JOB_LAMBERJACKER    (8)
#define JOB_TRASHMASTER     (9)
#define JOB_MINER           (10)


#define GetJobName(%0) jobs_names[%0]

#define MISSION_NONE		0
#define CARJACKER_DELIVER 	1
#define CARJACKER_DROPOFF 	2

#define BLACKMARKET_X   2705.23
#define BLACKMARKET_Y   -2550.89
#define BLACKMARKET_Z   13.634

#define PAWNSHOP_X   2705.23
#define PAWNSHOP_Y   -2550.89
#define PAWNSHOP_Z   13.634

enum JOBS_ENUM
{
	jobID,
	jobType,
	Float:jobX,
	Float:jobY,
	Float:jobZ,
	jobInt,
	jobVW,
	jobPickUp,
	jobOn,
	jobCheckpoint1,
	jobCheckpoint2,
	jobCheckpoint3,
	jobCheckpoint4,
	jobCheckpoint5,
	jobCheckpoint6,
	jobCheckpoint7,
	jobCheckpoint8,
	jobCheckpoint9,
	jobCheckpoint10
	
}
new JobsInfo[MAX_JOBS][JOBS_ENUM];

//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
#define MAX_JOBS_TYPES 7
new jobs_names[MAX_JOBS_TYPES][32] = {
	"Yok",
    "Lojistik Firmasý",
    "Mekanik",
    "Taksi Þoförü",
    "Pizzacý",
    "Balýkçý",
    "Taþýmacýlýk"
};

new RepairOffer[MAX_PLAYERS];
new RepairToVehicle[MAX_PLAYERS];
new RepairService[MAX_PLAYERS];
new RepairTime[MAX_PLAYERS];
new RepairTowTruck[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new bool:TaxiDuty[MAX_PLAYERS];
new TaxiFare[MAX_PLAYERS];
new TaxiMoney[MAX_PLAYERS];
new TaxiMade[MAX_PLAYERS];
new TaxiPassenger[MAX_PLAYERS];

#define     TRASH_BAG_VALUE     (125)    	// value of a collected trash bag (default: 125)
#define     REFILL_TIME         (300)   	// trash container refill time - in seconds (default: 300)
#define     ATTACHMENT_INDEX    (4)     	// for setplayerattachedobject (default: 4)
#define     TRASH_LIMIT         (10)    	// trashmaster capacity (default: 10)
#define     MAX_TRASHES         (100)       // max trashes
#define     MAX_FACTORIES       (3)         // max factories

#define		TYPE_DUMPSTER		(1)			// type of trash
#define 	TYPE_BIN			(2)			// type of trash

enum	e_trashdata
{
	TrashID,
	TrashType,
	Float: TrashX,
	Float: TrashY,
	Float: TrashZ,
	Float: TrashRZ,
	TrashObject,
	Text3D: TrashLabel,
	TrashLevel,
	TrashTimer
}

enum    e_factorydata
{
	FactoryID,
    FactoryName[32],
	Float: FactoryX,
	Float: FactoryY,
	Float: FactoryZ,
	FactoryCurrent,
	FactoryCP,
	Text3D: FactoryLabel
}

new	TrashData[MAX_TRASHES][e_trashdata],
	FactoryData[MAX_FACTORIES][e_factorydata],
    LoadedTrash[MAX_VEHICLES];

new
	bool: HasTrash[MAX_PLAYERS],
	TrashCP[MAX_PLAYERS] = {-1, ...},
    FactoryIcons[MAX_PLAYERS][sizeof(FactoryData)],
    //PlayerBar: CapacityBar[MAX_PLAYERS],
    PlayerText: CapacityText[MAX_PLAYERS];

#define TRUCKER_FUEL 		0 //Vehicle
#define TRUCKER_FOOD		1
#define TRUCKER_DRINK 		2
#define TRUCKER_CLOTHES 	3
#define TRUCKER_CARS 		4 //Vehicle
#define TRUCKER_FURNITURE   5
#define TRUCKER_MEAT        6
#define TRUCKER_EGGS        7
#define TRUCKER_MILK 		8 //Vehicle
#define TRUCKER_CEREAL      9 //Vehicle
#define TRUCKER_COTTON      10 //Vehicle
#define TRUCKER_DYES        11 //Vehicle
#define TRUCKER_COMPONENTS  12
#define TRUCKER_MALT        13 //Vehicle
#define TRUCKER_MONEY       14
#define TRUCKER_PAPER       15
#define TRUCKER_AGGREGATE   16 //Vehicle
#define TRUCKER_WOODS	 	17 //Vehicle
#define TRUCKER_GUNPOWDER   18
#define TRUCKER_SCRAP       19 //Vehicle
#define TRUCKER_STEEL       20
#define TRUCKER_GUNS        21
#define TRUCKER_BRICKS 		22 //Vehicle
#define TRUCKER_APPLIANCES  23
#define TRUCKER_FRUITS      24

#define PAGE_NEXT           (0)
#define PAGE_PREV           (1)

enum CARGO_OBJECT_ENUM
{
	oOn,
	oObj,
	Text3D:oLabel,
	Float:oX,
	Float:oY,
	Float:oZ,
	oInt,
	oVW,
	oProduct
}

new CargoObject[MAX_CARGO_OBJ][CARGO_OBJECT_ENUM];

enum TRUCK_CARGO_ENUM
{
	tID,
	tType,
	tName[64],
	tStorage,
	tStorageSize,
	tPrice,
	tProductID,
	tProductAmount,
	tPack,
	tGps,
	tLocked,
	Float: tPosX,
	Float: tPosY,
	Float: tPosZ,
	Text3D:tLabel,
	tPickup,
	tOn,
	tResult
}

new TruckCargo[MAX_TRUCK_CARGO][TRUCK_CARGO_ENUM];

enum E_Job_Data
{
    bool:jActive,
    jType,
    jLocationID,
    jFee,
    jStartDate
}

new CharacterJob[MAX_PLAYERS][E_Job_Data];
new JobFinished[MAX_PLAYERS];
new Float:DeliveryHiringX = 2260.3518,
    Float:DeliveryHiringY = -2353.4138,
    Float:DeliveryHiringZ = 13.5469;

enum E_DeliveryL
{
    dItem[32],
    dDescription[64],
    dWaitTime,
	Float: deliveryX,
	Float: deliveryY,
    Float: deliveryZ
}

new truckcargo_product[MAX_TRUCK_PRODUCT][32] = {
	"Yakýt",
	"Yiyecek",
	"Ýçecekler",
	"Giyim",
	"Nakliye",
	"Mobilya",
	"Et",
	"Yumurta",
	"Süt",
	"Mýsýr",
	"Pamuk",
	"Boya",
	"Yedek Parça",
	"Malt",
	"Para",
	"Kaðýt",
	"Kýrýlmýþ Taþ",
	"Odun",
	"Pudra",
	"Metal",
	"Demir",
	"Silah Parçalarý",
	"Tuðla",
	"Teknik",
	"Meyve"
};

new truckcargo_type[3][32] = {"hammadde", "üretim", "satýn alým"};

new Float: dft_attach[4] = {-0.04656, -4.26884, 0.81490, 3.54000};

new Float: dft_attach_brick[3][3] =
{
    {0.04380, 1.17068, 0.46367},
	{0.04380, -1.35450, 0.46370},
	{0.04380, -3.79490, 0.4637}
};

new Float: paker_attach[2][4] =
{
	{0.00000, 0.40200, 1.85540, 15.18000},
	{-0.00730, -6.36940, 0.00000, 15.18000}
};

new Float: picador_attach[2][3] =
{
	{0.13280, -1.10310, -0.17710},
	{0.01329, -1.86198, -0.17710}
};

new Float: sadler_attach[2][3] =
{
	{0.13280, -1.10310, -0.21710},
	{0.01330, -1.86200, -0.21710}
};

new Float: bobcat_attach[3][3] =
{
	{-0.31250, -0.80650, -0.31710},
	{0.42700, -0.80650, -0.31710},
	{0.04260, -1.84000, -0.31710}
};

new Float: walton_attach[4][3] =
{
	{-0.44386, -1.00283, -0.07710},
	{0.51337, -1.10535, -0.07710},
	{0.46038, -1.85669, -0.07710},
	{-0.36452, -1.87622, -0.07710}
};

new Float: yosemite_attach[6][3] =
{
	{-0.31250, -1.00700, -0.23710},
	{0.42700, -1.00650, -0.23710},
	{0.06740, -1.70740, -0.23710},
	{0.06560, -2.40020, -0.23710},
	{0.06553, -0.99522, 0.46057},
	{0.07971, -1.69164, 0.46057}
};

new Float: yosemite_attach_brick[3] = {0.00995, -1.59382, 0.26984};
new obj_ship[11], obj_gate[4], obj_lamp[8], ship_arrived, ship_depart, ship_next, ship_docked, time_truck;

enum ENTRANCE_ENUM
{
	eID,
	Float: eEnterX,
	Float: eEnterY,
	Float: eEnterZ,
	Float: eEnterA,
	Float: eExitX,
	Float: eExitY,
	Float: eExitZ,
	Float: eExitA,
	eText[128],
	gpsText[128],
	eEnterInt,
	eEnterVW,
	eExitInt,
	eExitVW,
	eEnterPickup,
	eExitPickup,
	eLocked,
	eFaction,
	eVehicle,
	entranceOn
}

new EntranceInfo[MAX_ENTRANCE][ENTRANCE_ENUM];

new
	bool:Player_Fire_Enabled[MAX_PLAYERS],
	Player_Key_Sprint_Time[MAX_PLAYERS];

enum ENUM_FIRE_INFO
{
	bool:fire_VALID,
	bool:fire_MIRROR,
	Float:fire_OFFSET_X,
	Float:fire_OFFSET_Y,
	Float:fire_OFFSET_Z,
	Float:fire_ROT_X,
	Float:fire_ROT_Y,
	Float:fire_ROT_Z
};
new FIRE_INFO[][ENUM_FIRE_INFO] =
{
	{true, false, 0.356599, -2.323499, -2.282700, 0.000000, 0.000000, 180.000000}, //400
	{true, false, 0.438600, -2.509499, -2.088700, 0.000000, 0.000000, 180.000000}, //401
	{true, true, 0.502600, -2.623499, -2.136700, 0.000000, 0.000000, 180.000000}, //402
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //403
	{true, false, 0.452600, -2.679299, -2.057499, 0.000000, 0.000000, 180.000000}, //404
	{true, false, 0.484899, -2.694099, -2.203500, 0.000000, 0.000000, 180.000000}, //405
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //406
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //407
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //408
	{true, false, 0.613099, -3.776700, -2.107199, 0.000000, 0.000000, 180.000000}, //409
	{true, false, 0.393799, -2.313999, -2.057199, 0.000000, 0.000000, 180.000000}, //410
	{true, true, 0.307799, -2.537999, -2.083199, 0.000000, 0.000000, 180.000000}, //411
	{true, false, 0.427300, -3.339999, -2.165199, 0.000000, 0.000000, 180.000000}, //412
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //413
	{true, false, 0.516099, -3.160899, -2.317199, 0.000000, 0.000000, 180.000000}, //414
	{true, true, 0.378100, -2.368799, -2.103199, 0.000000, 0.000000, 180.000000}, //415
	{true, false, 0.504199, -3.720499, -2.407199, 0.000000, 0.000000, 180.000000}, //416
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //417
	{true, false, 0.574599, -2.647899, -2.439199, 0.000000, 0.000000, 180.000000}, //418
	{true, false, 0.558099, -2.929099, -2.161200, 0.000000, 0.000000, 180.000000}, //419
	{true, false, 0.574100, -2.639099, -2.137199, 0.000000, 0.000000, 180.000000}, //420
	{true, false, 0.450100, -2.983999, -2.191200, 0.000000, 0.000000, 180.000000}, //421
	{true, false, 0.411700, -2.547899, -2.334000, 0.000000, 0.000000, 180.000000}, //422
	{true, false, -0.369800, -2.315999, -2.404000, 0.000000, 0.000000, 180.000000}, //423
	{true, true, 0.512099, -1.669300, -1.856099, 0.000000, 0.000000, 180.000000}, //424
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //425
	{true, false, 0.578000, -2.621899, -2.136100, 0.000000, 0.000000, 180.000000}, //426
	{true, false, 0.601499, -3.878599, -2.324200, 0.000000, 0.000000, 180.000000}, //427
	{true, false, 0.588999, -2.971599, -2.462199, 0.000000, 0.000000, 180.000000}, //428
	{true, true, 0.503000, -2.523599, -1.965199, 0.000000, 0.000000, 180.000000}, //429
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //430
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //431
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //432
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //433
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //434
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //435
	{true, false, 0.486999, -2.497599, -2.099299, 0.000000, 0.000000, 180.000000}, //436
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //437
	{true, false, 0.490399, -2.705899, -2.371700, 0.000000, 0.000000, 180.000000}, //438
	{true, true, 0.352400, -2.581899, -2.064399, 0.000000, 0.000000, 180.000000}, //439
	{true, false, 0.420700, -2.677599, -2.570899, 0.000000, 0.000000, 180.000000}, //440
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //441
	{true, false, 0.593100, -2.798699, -2.205100, 0.000000, 0.000000, 180.000000}, //442
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //443
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //444
	{true, false, 0.480199, -2.714699, -2.147099, 0.000000, 0.000000, 180.000000}, //445
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //446
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //447
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //448
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //449
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //450
	{true, false, 0.005400, -2.552699, -1.987100, 0.000000, 0.000000, 180.000000}, //451
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //452
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //453
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //454
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //455
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //456
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //457
	{true, false, 0.519200, -2.790499, -2.229899, 0.000000, 0.000000, 180.000000}, //458
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //459
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //460
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //461
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //462
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //463
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //464
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //465
	{true, false, 0.435200, -2.877399, -2.125900, 0.000000, 0.000000, 180.000000}, //466
	{true, false, 0.481200, -2.917399, -2.097899, 0.000000, 0.000000, 180.000000}, //467
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //468
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //469
	{true, false, -1.250200, -2.029500, -0.472800, 0.000000, 0.000000, 180.000000}, //470
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //471
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //472
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //473
	{true, true, 0.584999, -2.822599, -2.209800, 0.000000, 0.000000, 180.000000}, //474
	{true, false, 0.481000, -2.595699, -2.113800, 0.000000, 0.000000, 180.000000}, //475
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //476
	{true, false, 0.587000, -2.805699, -2.071799, 0.000000, 0.000000, 180.000000}, //477
	{true, false, 0.416700, -2.568699, -2.196799, 0.000000, 0.000000, 180.000000}, //478
	{true, false, 0.460799, -2.865999, -2.082799, 0.000000, 0.000000, 180.000000}, //479
	{true, false, 0.483300, -2.409999, -2.163700, 0.000000, 0.000000, 180.000000}, //480
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //481
	{true, false, 0.445899, -2.641699, -2.439800, 0.000000, 0.000000, 180.000000}, //482
	{true, false, -0.340600, -2.846899, -2.512400, 0.000000, 0.000000, 180.000000}, //483
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //484
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //485
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //486
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //487
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //488
	{true, false, 0.446500, -2.771499, -2.240900, 0.000000, 0.000000, 180.000000}, //489
	{true, false, 0.439999, -3.227299, -2.240900, 0.000000, 0.000000, 180.000000}, //490
	{true, false, 0.572200, -2.925899, -2.166899, 0.000000, 0.000000, 180.000000}, //491
	{true, false, 0.579599, -2.606400, -2.116899, 0.000000, 0.000000, 180.000000}, //492
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //493
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //494
	{true, false, 0.596599, -2.335199, -2.332799, 0.000000, 0.000000, 180.000000}, //495
	{true, false, 0.545400, -2.173599, -2.111700, 0.000000, 0.000000, 180.000000}, //496
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //497
	{true, false, -0.473800, -3.108199, -2.361400, 0.000000, 0.000000, 180.000000}, //498
	{true, false, 0.516200, -3.340600, -2.287400, 0.000000, 0.000000, 180.000000}, //499
	{true, false, 0.446900, -1.940299, -2.245399, 0.000000, 0.000000, 180.000000}, //500
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //501
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //502
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //503
	{true, false, 0.430299, -2.876699, -2.117300, 0.000000, 0.000000, 180.000000}, //504
	{true, false, 0.446299, -2.772699, -2.236900, 0.000000, 0.000000, 180.000000}, //505
	{true, true, 0.560599, -2.476300, -2.120100, 0.000000, 0.000000, 180.000000}, //506
	{true, false, 0.485199, -2.971699, -2.262000, 0.000000, 0.000000, 180.000000}, //507
	{true, false, 0.467400, -3.586999, -2.686900, 0.000000, 0.000000, 180.000000}, //508
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //509
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //510
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //511
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //512
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //513
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //514
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //515
	{true, false, 0.447800, -2.946699, -2.141499, 0.000000, 0.000000, 180.000000}, //516
	{true, false, 0.501800, -2.858699, -2.119499, 0.000000, 0.000000, 180.000000}, //517
	{true, false, -0.423400, -2.882499, -2.091500, 0.000000, 0.000000, 180.000000}, //518
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //519
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //520
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //521
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //522
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //523
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //524
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //525
	{true, false, 0.481799, -2.314099, -2.129499, 0.000000, 0.000000, 180.000000}, //526
	{true, false, 0.471799, -2.298099, -1.999199, 0.000000, 0.000000, 180.000000}, //527
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //528
	{true, false, -0.424699, -2.729899, -2.011199, 0.000000, 0.000000, 180.000000}, //529
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //530
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //531
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //532
	{true, true, 0.515100, -2.452399, -2.037100, 0.000000, 0.000000, 180.000000}, //533
	{true, true, 0.483099, -2.958400, -2.167099, 0.000000, 0.000000, 180.000000}, //534
	{true, true, 0.350600, -2.693499, -2.189100, 0.000000, 0.000000, 180.000000}, //535
	{true, true, 0.500000, -2.971299, -2.161099, 0.000000, 0.000000, 180.000000}, //536
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //537
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //538
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //539
	{true, false, -0.410600, -2.748699, -2.265599, 0.000000, 0.000000, 180.000000}, //540
	{true, true, 0.624000, -2.205999, -1.875100, 0.000000, 0.000000, 180.000000}, //541
	{true, false, 0.587400, -2.829499, -1.996899, 0.000000, 0.000000, 180.000000}, //542
	{true, false, -0.411000, -2.764599, -2.099200, 0.000000, 0.000000, 180.000000}, //543
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //544
	{true, true, 0.314900, -2.263700, -2.260600, 0.000000, 0.000000, 180.000000}, //545
	{true, false, 0.581200, -2.833499, -2.020299, 0.000000, 0.000000, 180.000000}, //546
	{true, false, 0.629199, -2.589499, -2.074300, 0.000000, 0.000000, 180.000000}, //547
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //548
	{true, false, 0.441300, -2.511600, -2.030299, 0.000000, 0.000000, 180.000000}, //549
	{true, false, -0.628300, -2.899799, -2.267199, 0.000000, 0.000000, 180.000000}, //550
	{true, false, 0.590799, -3.145499, -2.092799, 0.000000, 0.000000, 180.000000}, //551
	{true, false, 0.446900, -3.063399, -1.924800, 0.000000, 0.000000, 180.000000}, //552
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //553
	{true, false, 0.559300, -2.751999, -2.208499, 0.000000, 0.000000, 180.000000}, //554
	{true, true, 0.136000, -2.282899, -2.003200, 0.000000, 0.000000, 180.000000}, //555
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //556
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //557
	{true, true, 0.465799, -2.558699, -1.977200, 0.000000, 0.000000, 180.000000}, //558
	{true, true, 0.633099, -2.394599, -1.977200, 0.000000, 0.000000, 180.000000}, //559
	{true, true, 0.479999, -2.474699, -1.991199, 0.000000, 0.000000, 180.000000}, //560
	{true, true, 0.446200, -2.739599, -2.166300, 0.000000, 0.000000, 180.000000}, //561
	{true, true, 0.483300, -2.380199, -2.037100, 0.000000, 0.000000, 180.000000}, //562
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //563
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //564
	{true, false, 0.479299, -2.134199, -1.999099, 0.000000, 0.000000, 180.000000}, //565
	{true, false, 0.564700, -2.946699, -2.063100, 0.000000, 0.000000, 180.000000}, //566
	{true, false, 0.628700, -2.776700, -2.252900, 0.000000, 0.000000, 180.000000}, //567
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //568
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //569
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //570
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //571
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //572
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //573
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //574
	{true, false, 0.453399, -2.709800, -1.975300, 0.000000, 0.000000, 180.000000}, //575
	{true, false, 0.658100, -3.092499, -2.043299, 0.000000, 0.000000, 180.000000}, //576
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //577
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //578
	{true, false, -0.424600, -2.890699, -2.102699, 0.000000, 0.000000, 180.000000}, //579
	{true, false, -0.408600, -2.872699, -2.092700, 0.000000, 0.000000, 180.000000}, //580
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //581
	{true, false, 0.444999, -3.395499, -2.334199, 0.000000, 0.000000, 180.000000}, //582
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //583
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //584
	{true, false, -0.428999, -3.143299, -1.889299, 0.000000, 0.000000, 180.000000}, //585
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //586
	{true, true, 0.698000, -2.692600, -2.056400, 0.000000, 0.000000, 180.000000}, //587
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //588
	{true, false, 0.583999, -2.358599, -1.965899, 0.000000, 0.000000, 180.000000}, //589
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //590
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //591
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //592
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //593
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //594
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //595
	{true, false, 0.577000, -2.622299, -2.138499, 0.000000, 0.000000, 180.000000}, //596
	{true, false, 0.577000, -2.622299, -2.138499, 0.000000, 0.000000, 180.000000}, //597
	{true, false, 0.595000, -2.678299, -2.002500, 0.000000, 0.000000, 180.000000}, //598
	{true, false, 0.440600, -2.773699, -2.239099, 0.000000, 0.000000, 180.000000}, //599
	{true, false, 0.442600, -2.763700, -2.054199, 0.000000, 0.000000, 180.000000}, //600
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //601
	{true, true, 0.560999, -2.523999, -2.200700, 0.000000, 0.000000, 180.000000}, //602
	{true, true, 0.587000, -2.661999, -2.192699, 0.000000, 0.000000, 180.000000}, //603
	{true, false, 0.425700, -2.877099, -2.124700, 0.000000, 0.000000, 180.000000}, //604
	{true, false, -0.411900, -2.767699, -2.098700, 0.000000, 0.000000, 180.000000}, //605
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //606
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //607
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //608
	{true, false, -0.477699, -3.106199, -2.359499, 0.000000, 0.000000, 180.000000}, //609
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //610
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} //611
};

new tircilikDorse[MAX_PLAYERS];


#if !defined KEY_AIM
	#define KEY_AIM 128
#endif

#define BUNNYPRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

new InSprung[MAX_PLAYERS] = 0;
new TimerIDSprung;

enum LAST_ADVERT_ENUM
{
	advertText[256],
	adverttime,
	advertnumber
}
new LastAdvertInfo[MAX_LAST_ADVERT][LAST_ADVERT_ENUM];

new lastadvert = 0;

new NEED_COPS_TO_CRIME = 2;
new NEED_FIRE_TO_CRIME = 1;

enum CHOPSHOP_DATA
{
	chopshop_id,
	chopshop_wanted[10],
    Float: chopshop_pos[6],
    chopshop_faction, // can run by a faction, they can
    chopshop_object[2],
    chopshop_money,
    chopshop_vehs,
    chopshop_procent,
    chopshop_timer,
    bool:chopshop_exist
}
new chopshop_data[MAX_CHOPSHOP][CHOPSHOP_DATA];

enum CCTV_ENUM
{
	tvID,
	tvObject,
	tvCollision,
	tvName[32],
	tvInt,
	tvVW,
	Float:tvPosX,
	Float:tvPosY,
	Float:tvPosZ,
	Float:tvPosRX,
	Float:tvPosRY,
	Float:tvPosRZ,
    tvBreak,
    Text3D:tvText,
	tvSignal,
	tvSignalTime,
	tvObjectOn,
}
new CCTVInfo[MAX_CCTV][CCTV_ENUM];


enum PLAYER_CAMERA_ENUM
{
	pc_used,
	pc_time,
}
new PCamera[MAX_PLAYERS][MAX_CCTV][PLAYER_CAMERA_ENUM];

enum BORSA_ENUM {
	bID,
	bName[50 char],
	bPrice
};
new Borsa[MAX_BORSA][BORSA_ENUM];

enum PLAYER_BOOMBOX_ENUM
{
	bUsed,
	bArea,
	bUrl[156],
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	bInt,
	bVW,
	bObject
}
new BoomboxInfo[MAX_PLAYERS][PLAYER_BOOMBOX_ENUM],
    Iterator:boomboxIter<MAX_PLAYERS>;

enum BOOMBOX_ENUM
{
	boomboxName[64],
	boomboxUrl[156]
}
new RADIO_STATIONS[3][15][BOOMBOX_ENUM] =
{
	{
		{"Easy Hits Florida", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://us1.internet-radio.com:8180/listen.pls&t=.m3u"},
		{"RADIO 24", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk2.internet-radio.com:8080/listen.pls&t=.m3u"},
		{"Dance UK Radio", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk2.internet-radio.com:30252/listen.pls&t=.m3u"},
		{"EDM CLUB MUSIC FLORIDA", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://us1.internet-radio.com:8273/listen.pls&t=.m3u"},
		{"Psy FM", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://81.88.36.42:8030/listen.pls&t=.m3u"},
		{"181.FM Good Time Oldies", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8046/listen.pls&t=.m3u"},
		{"PONdENDS", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://s7.voscast.com:7000/listen.pls&t=.m3u"},
		{"DnBHeaven", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://dnbheaven.com:8000/listen.pls&t=.m3u"},
		{"Bassjunkees","https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://space.ducks.invasion.started.at.bassjunkees.com:8442/listen.pls&t=.m3u"},
		{"1.FM ABSOLUTE TOP 40", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://69.46.90.245:8078/listen.pls&t=.m3u"},
		{"ChartHits", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://95.141.24.3:80/listen.pls&t=.m3u"},
		{"181.FM Energy 98", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8800/listen.pls&t=.m3u"},
		{"DRUMSTEP", "http://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://95.141.24.54:80/listen.pls&t=.m3u"},
		{"Sub FM", "http://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://radio.sub.fm:8529/listen.pls?sid=1&t=.m3u"},
		{"Ambient FM", "http://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk2.internet-radio.com:31491/listen.pls&t=.m3u"}
	},
	{
		{"Smooth Jazz Florida", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://us1.internet-radio.com:8105/listen.pls&t=.m3u"},
		{"Smooth Jazz CD101.9", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://us1.internet-radio.com:8144/listen.pls&t=.m3u"},
		{"Highway 181", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://108.61.73.120:8018/listen.pls&t=.m3u"},
		{"100hitz New Country", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://173.244.215.162:9210/listen.pls&t=.m3u"},
		{"Classic Rock Florida", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://us1.internet-radio.com:8105/listen.pls&t=.m3u"},
		{"Fleetwood Mac", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://stn2.streamthenet.com:6050/listen.pls&t=.m3u"},
		{"Arrow Classic Rock", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://91.221.151.237:8109/listen.pls?sid=1&t=.m3u"},
		{"181.fm Rock", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8008/listen.pls&t=.m3u"},
		{"181.FM 80s Hairband", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8014/listen.pls&t=.m3u"},
		{"Soft Rock FM", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://173.236.21.250:8032/listen.pls&t=.m3u"},
		{"181.FM 90s Country", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8050/listen.pls&t=.m3u"},
		{"idobi Howl", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://69.46.88.29:80/listen.pls&t=.m3u"},
		{"KNAC", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://s5.voscast.com:7346/listen.pls&t=.m3u"},
		{"2000FM Hard Rock", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://107.155.111.170:18110/listen.pls&t=.m3u"},
		{"SmoothJazz Global", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://sj128.hnux.com/listen.pls&t=.m3u"}
	},
	{
		{"Pigpen Radio", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk4.internet-radio.com:30884/listen.pls&t=.m3u"},
		{"Smash FM", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk1.internet-radio.com:8106/listen.pls&t=.m3u"},
		{"LOSWORLDRadio", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk2.internet-radio.com:8106/listen.pls&t=.m3u"},
		{"PARTY VIBE RADIO", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://www.partyviberadio.com:8004/listen.pls?sid=1&t=.m3u"},
		{"GOOD COMPANY RADIO ", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk4.internet-radio.com:10104/listen.pls&t=.m3u"},
		{"181.FM Old School", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8068/listen.pls&t=.m3u"},
		{"LadyLinQRadio", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://us1.internet-radio.com:8336/listen.pls&t=.m3u"},
		{"DEFJAY", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://212.45.104.39:8008/listen.pls&t=.m3u"},
		{"HOT 108 JAMZ", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://108.61.30.179:4020/listen.pls&t=.m3u"},
		{"181.FM The BEAT - The BEAT", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8054/listen.pls&t=.m3u"},
		{"POWERHITZ", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://108.61.30.179:5040/listen.pls&t=.m3u"},
		{"100hitz", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://206.217.213.236:8170/listen.pls&t=.m3u"},
		{"181.FM The BOX", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8024/listen.pls&t=.m3u"},
		{"ReggaeWorld", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://67.212.189.122:8042/listen.pls&t=.m3u"},
		{"Radio Tequila Necenzurat", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://necenzurat.radiotequila.ro:7000/listen.pls&t=.m3u"}
	}
};

#define MAX_BIRLIK_ZONES 8
new gz_birlik[MAX_BIRLIK_ZONES];
new Float: birlik_zones[MAX_BIRLIK_ZONES][1] =
{
	{1831.60009765625, -1747.7878112792969, 1935.60009765625, -1613.7878112792969}

};

#define MAX_REPAIR_ZONES 8
new gz_repair[MAX_REPAIR_ZONES];
new Float: repair_zones[MAX_REPAIR_ZONES][3] =
{
	{1289.9601,226.6236,19.5547},
	{1368.4257,279.1518,19.5669},
	{1273.6106,360.0854,19.5547},
	{1198.5424,314.0163,19.5547},
    {2334.2034,-108.4665,26.4869},
    {2214.3706,-50.3569,26.4844},
    {2472.8738,-17.8446,26.4844},
    {2541.7617,108.9385,26.4766}
};

// 87  - 9314 (28)
// 100 - 7302 (28)
// - 11455 (28)

#define     MAX_BILLBOARDS     (30)

enum dyBollard
{
	bbObject,

    bbID,
    bbText[100],
    bbRentBy,
    bbRentDate,
    bbRentCost,
	Float: bbPosX,
	Float: bbPosY,
	Float: bbPosZ,
	Float: bbPosRX,
	Float: bbPosRY,
	Float: bbPosRZ,
	bbInt,
	bbVW,
	bbModel,
	bool:  bbActive,
}
new BillboardInfo[MAX_BILLBOARDS][dyBollard];

new billboard_obj[] = {
   7302,
   9314
};

/*

    8326,
    8423,
    7310,
    7309,
    7302,
    7303,
    8330,
    7301,
    8332,
    8328,
    8239,
    8730,
    8408,
    7905,
    7904,
    7900,
    7901,
    7907,
    7908,
    9188,
    9191,
    7906,
    9190,
    7912,
    7913,
    7909,
    7911,
    7914,
    7915,
    9184,
    9185,
    9186,
    9187,
    9189,
    7903

*/

enum  gbData
{
	Float:minX,
	Float:minY,
	Float:maxX,
	Float:maxY,
	Zone,
	Rectangle,
};

new GuvenliBolge[][gbData] =
{

    {1403.3157, -1769.6935, 1576.6831, -1596.5215}, // lspd
    {1589.4672,-2204.3843, 1359.4391,-2368.9509}, // vip
    {2065.0, -1845.0, 2194.0, -1735.0}, // pizza
    {1949.0, -1824.0, 2065.0, -1808.0},  // pizza
    {1948.0, -1760.0, 2065.0, -1735.0},  // pizza
    {1949.0, -1808.0, 1966.0, -1760.0},  // pizza
    {1900.0, -1798.0, 1949.0, -1756.0},  // pizza
    {2041.0, -1845.0, 2065.0, -1824.0},
    {1224.0, 195.5, 1276.0, 273.5},
    {333.0, -2093.5, 417.0, -2006.5}

};

new car_attach[39] = {19835, 1598, 2114, 3071, 18632, 18634, 18635, 18641, 19623, 2103, 2226, 1840, 18644, 11736, 11738, 2690, 11745, 19308, 19309, 19310, 19311, 19317, 19624, 19626, 19816, 19878, 19893, 19894, 336, 335, 19624, 1098, 1279, 1546, 1550, 1582, 1581, 19921, 325};

enum ATTACH_ENUM
{
	aID,
	aName[32],
	aModel,
	aBone,
	Float:aOffsetX,
	Float:aOffsetY,
	Float:aOffsetZ,
	Float:aRotX,
	Float:aRotY,
	Float:aRotZ,
	Float:aScaleX,
	Float:aScaleY,
	Float:aScaleZ,
	aUsed
}
new AttachInfo[MAX_PLAYERS][MAX_PLAYER_ATTACH][ATTACH_ENUM];

enum PLAYER_ATTACH_ENUM
{
	toyModel,
	toyName[64],
	toyPrice,
	toyBone,
	Float:toyOffestX,
	Float:toyOffestY,
	Float:toyOffestZ,
	Float:toyRotX,
	Float:toyRotY,
	Float:toyRotZ,
	Float:toyScaleX,
	Float:toyScaleY,
	Float:toyScaleZ,
}

new HatsInfo[][PLAYER_ATTACH_ENUM] = {
{18926, "Askeri þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18927, "Mavi þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18928, "Hippie þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18960, "Visör üstlü hippie þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18929, "Kömür rengi þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18930, "Koyu turuncu þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18931, "Lacivert þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18932, "Turuncu þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18933, "Açýk gri þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18955, "Bej ve kýrmýzý þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18956, "Fermuarlý þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18957, "Mavi-mavi þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18958, "Sarý ve siyah þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18959, "Askeri þapka", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18934, "Pembe þapka", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18935, "Sarý þapka", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18944, "Koyu turuncu þapka", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18945, "Gri þapka", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18946, "Gri þapka 2", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18947, "Siyah þapka", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18948, "Mavi þapka", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18949, "Yeþil þapka", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18950, "Kýrmýzý þapka", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18951, "Açýk Yeþil Þapka", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19488, "Beyaz Þapka", 30, 2, 0.13, 0.0, -0.0, -89.4, 103.69, -4.19, 1.0, 1.0, 1.0},
{18967, "Siyah Panama Þapka", 30, 2, 0.15, 0.01, -0.01, 0.0, 97.09, 87.59, 1.0, 1.0, 1.0},
{18968, "Gri Panama Þapka", 30, 2, 0.15, 0.01, -0.01, 0.0, 97.09, 87.59, 1.0, 1.0, 1.0},
{18969, "Turuncu Panama Þapka", 30, 2, 0.15, 0.01, -0.01, 0.0, 97.09, 87.59, 1.0, 1.0, 1.0},
{18970, "Kaplan Þapka", 30, 2, 0.109999, 0.045999, -0.007, 0.0, 96.29, 89.5, 1.0, 1.0, 1.0},
{18971, "Siyah ve Beyaz Þapka", 30, 2, 0.109999, 0.045999, -0.007, 0.0, 96.29, 89.5, 1.0, 1.0, 1.0},
{18972, "Siyah ve Turuncu Þapka", 30, 2, 0.109999, 0.045999, -0.007, 0.0, 96.29, 89.5, 1.0, 1.0, 1.0},
{18973, "Siyah ve Yeþil Þapka", 30, 2, 0.109999, 0.045999, -0.007, 0.0, 96.29, 89.5, 1.0, 1.0, 1.0},
{19064, "Noel Baba Þapkasý 1", 30, 2, 0.126000, 0.008000, 0.0, 0.0, 87.0, 94.190002, 1.0, 1.0, 1.0},
{19066, "Noel Baba Þapkasý 2", 30, 2, 0.126000, 0.008000, 0.0, 0.0, 87.0, 94.190002, 1.0, 1.0, 1.0},
{19065, "Mutlu Yýllar Þapkasý", 30, 2, 0.126000, 0.008000, 0.0, 0.0, 87.0, 94.190002, 1.0, 1.0, 1.0},
{19067, "Kýrmýzý Þapka", 30, 2, 0.133999, -0.006000, 0.0, -22.199998, 92.500030, 114.199836, 1.0, 1.0, 1.0},
{19068, "Yeþil ve Beyaz Þapka", 30, 2, 0.133999, -0.006000, 0.0, -22.199998, 92.500030, 114.199836, 1.0, 1.0, 1.0},
{19069, "Siyah Þapka 1", 30, 2, 0.133999, -0.006000, 0.0, -22.199998, 92.500030, 114.199836, 1.0, 1.0, 1.0},
{19554, "Siyah Bere Þapka", 30, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18953, "Siyah Þapka 2", 30, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0},
{19093, "Beyaz DUDE Þapka", 30, 2, 0.107999, 0.0, -0.008999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18961, "Kamyoncu Þapka", 30, 2, 0.107999, 0.0, -0.008999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19095, "Kahverengi Kovboy Þapka", 50, 2, 0.18, 0.006999, -0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19096, "Siyah Kovboy Þapka", 50, 2, 0.18, 0.006999, -0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19097, "Siyah Kovboy Þapka 2", 50, 2, 0.18, 0.006999, -0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19098, "Kahverengi Kovboy Þapka 2", 50, 2, 0.18, 0.006999, -0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19099, "Parlak Kahverengi Kovboy Þapka", 50, 2, 0.18, 0.006999, -0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19101, "Normal Ordu Kaský", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19102, "Þehir Ordu Kaský", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19103, "Çöl Ordu Kaský", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19104, "Orman Ordu Kaský", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19105, "Cýva Ordu Kaský", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19106, "Normal Ordu Panama", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19107, "Þehir Ordu Panama", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19108, "Çöl Ordu Panama", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19109, "Orman Ordu Panama", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19110, "Cýva Ordu Panama", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19111, "Kutup Ordu Panama", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19112, "Ordu Panama Pembe", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19352, "Büyük Siyah Þapka", 50, 2, 0.143999, 0.015000, 0.0, 0.0, 90.800003, 0.0, 1.0, 1.0, 1.0},
{19487, "Büyük Beyaz Þapka", 50, 2, 0.143999, 0.015000, 0.0, 0.0, 90.800003, 0.0, 1.0, 1.0, 1.0},
{18964, "Püsküllü Siyah Þapka", 50, 2, 0.136999, -0.003000, -0.004000, 35.900001, 88.200019, 44.699966, 1.0, 1.0, 1.0},
{18965, "Püsküllü Siyah Þapka 2", 50, 2, 0.136999, -0.003000, -0.004000, 35.900001, 88.200019, 44.699966, 1.0, 1.0, 1.0},
{18966, "Hippie Uzun Þapka", 50, 2, 0.136999, -0.003000, -0.004000, 35.900001, 88.200019, 44.699966, 1.0, 1.0, 1.0},
{18921, "Mavi Beret", 40, 2, 0.179000, -0.000999, -0.012000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18922, "Kýrmýzý Beret", 40, 2, 0.179000, -0.000999, -0.012000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18923, "Siyah ve Mavi Beret", 40, 2, 0.179000, -0.000999, -0.012000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18924, "Ordu Beret", 40, 2, 0.179000, -0.000999, -0.012000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18925, "Kýrmýzý Ordu Beret", 40, 2, 0.179000, -0.000999, -0.012000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18939, "Lacivert Kapak Arkasý", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18940, "Azure Kapak Arkasý", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18941, "Siyah Kapak Arkasý", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18942, "Gri Kapak Arkasý", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18943, "Yeþil Kapak Arkasý", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19553, "Kovboy Þapka", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19528, "Cadý Þapkasý", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19558, "Pizza Þapka", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19137, "Cluckin Bell Þapkasý", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18638, "Sarý Ýnþaat Kaský", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19113, "Hippie Kaský", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19114, "Siyah Kask", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19117, "Kýrmýzý Kask", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19118, "Yeþil Kask", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19119, "Mavi Kask", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19120, "Sarý Kask", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
{19330, "Ýtfaiyeci Sarý Kask", 80, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19331, "Ýtfaiyeci Siyah Kask", 80, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0}
}; //Ã®

new GlassesInfo[][PLAYER_ATTACH_ENUM] = {
{19006, "Kýrmýzý Gözlükler", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19007, "Yeþil Gözlükler", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19008, "Sarý Gözlükler", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19009, "Mavi Gözlükler", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19010, "Pembe Gözlükler", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19011, "Komik Gözlükler", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19012, "Gri Gözlükler", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19013, "Komik Gözlükler 2", 20, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19014, "Siyah ve Beyaz Gözlükler", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19015, "Beyaz Gözlükler", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19016, "X-Iþýný Gözlükleri", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19017, "Spor Sarý Gözlükler", 60, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19018, "Spor Turuncu Gözlükler", 60, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19019, "Spor Kýrmýzý Gözlükler", 60, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19020, "Spor Mavi Gözlükler", 60, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19021, "Spor Yeþil Gözlükler", 60, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19022, "Siyah Pilot Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19023, "Mavi Pilot Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19024, "Mor Pilot Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19025, "Pembe Pilot Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19026, "Kýrmýzý Pilot Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19027, "Turuncu Pilot Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19028, "Sarý Pilot Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19029, "Yeþil Pilot Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19030, "Beyin Pembe Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19031, "Zeki Yeþil Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19032, "Zeki Kýrmýzý Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19033, "Zeki Siyah Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19034, "Zeki Siyah Gözlükler 2", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19035, "Zeki Mavi Gözlükler", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19085, "Korsan Bandajý", 20, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19349, "Tek Gözlük", 30, 2, 0.080999, 0.170998, -0.004, 82.4, -2.10001, -84.3, 1.0, 1.0, 1.0}
};

new BandanasInfo[][PLAYER_ATTACH_ENUM] = {
{18891, "Mor Bandana", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18892, "Kýrmýzý Bandana", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18893, "Kýrmýzý ve Beyaz Bandana", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18894, "Turuncu Bandana", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18895, "Kafatasý Bandana", 25, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18896, "Siyah Bandana", 40, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18897, "Mavi Bandana", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18898, "Yeþil Bandana", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18899, "Pembe Bandana", 40, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18900, "Renkli Bandana", 45, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18901, "Leopar Bandana", 30, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18902, "Sarý Bandana", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18903, "Lacivert Bandana", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18904, "Koyu Mavi Bandana", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18905, "Zeytin Yeþili Bandana", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18906, "Turuncu / Sarý Bandana", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18907, "Renkli Bandana 2", 35, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18908, "Mavi Bandana 2", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18909, "Lacivert Bandana 2", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18910, "Ateþ Bandana", 50, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
{18911, "Kafatasý Yüz Bandana", 90, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
{18912, "Siyah Yüz Bandana", 50, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
{18913, "Yeþil Yüz Bandana", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
{18914, "Ordu Yüz Bandana", 60, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
{18915, "Renkli Yüz Bandana", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
{18916, "Hafif Yüz Bandana", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
{18917, "Koyu Mavi Yüz Bandana", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
{18918, "Gri Yüz Bandana", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
{18919, "Beyaz Yüz Bandana", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
{18920, "Renkli Bandana", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
{18974, "Zorro Maskesi", 20, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
{19163, "Lateks Maskesi", 10, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
{19801, "Balaklava", 20, 2, 0.067999, 0.023999, -0.000000, -9.999995, 85.700004, -172.399948, 1.141000, 1.148000, 1.101999}
};

new HeadphonesInfo[][PLAYER_ATTACH_ENUM] = {
{19421, "Beyaz kulaklýk", 20, 2, 0.036999, -0.028, -0.006999, 86.6, 176.2, 88.4, 1.157, 1.0, 1.0},
{19422, "Siyah kulaklýk", 20, 2, 0.036999, -0.028, -0.006999, 86.6, 176.2, 88.4, 1.157, 1.0, 1.0},
{19423, "Gri kulaklýk", 20, 2, 0.036999, -0.028, -0.006999, 86.6, 176.2, 88.4, 1.157, 1.0, 1.0},
{19424, "Mavi kulaklýk", 20, 2, 0.036999, -0.028, -0.006999, 86.6, 176.2, 88.4, 1.157, 1.0, 1.0}
};

new SportsInfo[][PLAYER_ATTACH_ENUM] = {
{19036, "Beyaz Hokey Maskesi", 50, 2, 0.096999, 0.043999, -0.006000, 87.499961, 94.899955, 0.0, 1.0, 1.0, 1.0},
{19037, "Kýrmýzý Hokey Maskesi", 50, 2, 0.096999, 0.043999, -0.006000, 87.499961, 94.899955, 0.0, 1.0, 1.0, 1.0},
{19038, "Yeþil Hokey Maskesi", 50, 2, 0.096999, 0.043999, -0.006000, 87.499961, 94.899955, 0.0, 1.0, 1.0, 1.0},
{18952, "Kýrmýzý Boks Kaský", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
{19472, "Solunum Maskesi", 20, 2, -0.005000, 0.142999, -0.008000, 87.499961, 94.899955, 0.0, 1.0, 1.116000, 1.0},
{2919, "Spor Çantasý", 20, 5, 0.273000, 0.034999, 0.046999, -11.199997, -103.500007, 4.300001, 0.439000, 0.161000, 0.351000},
{19624, "Rockstar Valizi", 50, 5, 0.093, 0.008999, -0.016001, -11.2, -103.5, 4.3, 1.104, 0.708, 0.698999},
{3026, "Sýrt Çantasý", 20, 1, -0.143000, -0.049999, 0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19559, "Daðcýlýk Sýrt Çantasý", 40, 1, -0.143000, -0.049999, 0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18645, "Kýrmýzý ve Beyaz Motosiklet Kaský", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
{18976, "Mavi Motosiklet Kaský", 50, 2, 0.087998, 0.039000, -0.006998, 82.800025, 91.199928, 4.500027, 0.970000, 1.179000, 1.0},
{18977, "Kýrmýzý Motosiklet Kaský", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
{18978, "Beyaz Motosiklet Kaský", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
{18979, "Mor Motosiklet Kaský", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
{18936, "Gri Motosiklet Kaský", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
{18937, "Kýrmýzý Motosiklet Kaský", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
{18938, "Mavi Motosiklet Kaský", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
{371, "Spor Sýrt Çantasý", 50, 1, -0.143000, -0.049999, 0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{1210, "Çanta", 100, 5, 0.093, 0.008999, -0.016001, -11.2, -103.5, 4.3, 1.104, 0.708, 0.698999},
{19878, "Kaykay", 200, 1, -0.143000, -0.049999, 0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0}
};

new GuitarsInfo[][PLAYER_ATTACH_ENUM] = {
{19317, "Bas Gitar", 150},
{19318, "Uçan Gitar", 200},
{19319, "Büyücünün Gitarý", 150},
{19319, "Boombox", 400}
};

new ClockInfo[][PLAYER_ATTACH_ENUM] = {
{19039, "Rolex Saati", 250, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
{19040, "Klasik Gümüþ Saat", 200, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
{19041, "Klasik Kahverengi Saat", 195, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
{19042, "Chanel Saat", 2100, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
{19043, "Calvin Klein Saat ", 170, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
{19044, "Mor Saat", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
{19045, "Pembe Saat", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
{19046, "Yeþil Saat", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
{19047, "Mor Saat", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0}
};

new BarberShop[][PLAYER_ATTACH_ENUM] = {
{19516, "Peruk 1", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19517, "Peruk 2", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19518, "Peruk 3", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19519, "Peruk 4", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18640, "Peruk 5", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{18975, "Peruk 6", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19077, "Peruk 7", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19350, "Býyýk 1", 50, 18, 0.096, -0.059, 0.004999, 174.2, 2.19998, 22.1, 1.0, 1.0, 1.0},
{19351, "Býyýk 2", 50, 18, 0.096, -0.059, 0.004999, 174.2, 2.19998, 22.1, 1.0, 1.0, 1.0},
{19136, "Gözlük ve Þapkalý Peruk", 200, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
{19274, "Palyaço Periði", 150, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0}
};

new HardwareStore[][PLAYER_ATTACH_ENUM] = {
	{18632, "Olta Kamýþý", 75, 6, 0.067, 0.010999, -0.053999, 177.3, -5.79997, -3.5, 1.0, 1.0, 1.0},
	{18633, "Demir Boru", 50, 6, 0.065, 0.019999, -0.05, 90.2, -91.7, 0.0, 1.0, 1.0, 1.0},
	{18634, "Levye", 45, 6, 0.078, 0.019999, -0.059999, 93.4, -92.3999, 3.0, 1.0, 1.0, 1.0},
	{18635, "Çekiç", 50, 6, 0.002, -0.018, -0.05, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18644, "Tornavida", 40, 6, 0.070999, 0.008999, -0.000999, 0.0, 172.9, 0.0, 1.0, 1.0, 1.0},
	{19627, "Anahtar", 45, 6, 0.079, 0.024, 0.003999, 88.7, 0.0, 96.5, 1.0, 1.0, 1.0},
	{19626, "Kürek", 30, 6, 0.064999, 0.030998, -0.05, 7.09999, 178.7, 98.1999, 1.0, 1.0, 1.0},
	{19631, "Demir Tokmak", 50, 6, 0.069, 0.004999, -0.05, -103.7, -102.2, -0.7, 1.0, 1.0, 1.0},
	{19816, "Gaz Tanký", 75, 6, 0.044999, 0.068, 0.003999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18641, "Fener", 70, 6, 0.07, 0.009999, 0.039999, -175.5, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19144, "Büyük Fener", 80, 6, 0.07, 0.019999, 0.042, -179.8, -81.1, 1.49998, 1.0, 1.0, 1.0},
	{18642, "Elektrikçi", 80, 6, 0.085, 0.033999, 0.026999, 8.1, 178.8, -1.8, 1.0, 1.0, 1.0},
	{1369, "Tekerlekli Sandalye", 75, 6, 0.067, 0.010999, -0.053999, 177.3, -5.79997, -3.5, 1.0, 1.0, 1.0},
	{19054, "Hediye Kutusu", 50, 6, 0.106, -0.012, 0.029, 0.0, -98.3, 0.0, 0.148999, 0.139, 0.087999},
	{0, "Araç Yedek Anahtarý", 150, 6, 0.106, -0.012, 0.029, 0.0, -98.3, 0.0, 0.148999, 0.139, 0.087999}
};

new PreloadAnimLibs[][] =
{
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

new bool:OnAnim[MAX_PLAYERS char];

new g_ModelsAwaiting = 0;

// noclip
enum noclipenum
{
	cameramode,
	flyobject,
	mode,
	lrold,
	udold,
	lastmove,
	Float:accelmul
}
new noclipdata[MAX_PLAYERS][noclipenum];


enum TELES_ENUM
{
	aID,
	Float:telesPosX,
	Float:telesPosY,
	Float:telesPosZ,
	telesInt,
	telesMapName[32],
	telesOn,
	telesType
};
new AdminTeles[MAX_INTERIORS][TELES_ENUM];

// TELES TYPES //
#define 		HOUSE_SMALL_INT_TYPE 	0
#define 		HOUSE_MID_INT_TYPE 		1
#define 		HOUSE_BIG_INT_TYPE 		2
#define 		ENTRANCES_INT_TYPE 		3
#define 		BUSSINESS_INT_TYPE 		4
#define         GPS_TELE_TYPE           10

enum E_Staff {
    sSpecID,
    sSpecType,
    bool:sSpec,
    Float:sSpecX,
    Float:sSpecY,
    Float:sSpecZ,
    Float:sSpecA,
    sSpecInterior,
    sSpecWorld
}

new StaffInfo[MAX_PLAYERS][E_Staff];

enum ATM_ENUM
{
	atmID,
	Float:atmPosX,
	Float:atmPosY,
	Float:atmPosZ,
	Float:atmPosRZ,
	atmInt,
	atmVW,
	atmObject
}
new ATMInfo[MAX_ATMS][ATM_ENUM];

enum RENTAL_ENUM
{
	rentalID,
	rentalType,
	rentalJob,
	Float:rentalX,
	Float:rentalY,
	Float:rentalZ,
	rentalInterior,
	rentalWorld,
	rentalPickup,
	Text3D: rental3D
};
new RentalPoint[MAX_RENTAL][RENTAL_ENUM];
new Iterator:RentalPoints<MAX_RENTAL>;

new AC_CODE[AC_MAX_CODES][AC_MAX_CODE_LENGTH] =
{
    "000",
    "001",
    "002",
    "003",
    "004",
    "005",
    "006",
    "007",
    "008",
    "009",
    "010",
    "011",
    "012",
    "013",
    "014",
    "015",
    "016",
    "017",
    "018",
    "019",
    "020",
    "021",
    "022",
    "023",
    "024",
    "025",
    "026",
    "027",
    "028",
    "029",
    "030",
    "031",
    "032",
    "033",
    "034",
    "035",
    "036",
    "037",
    "038",
    "039",
    "040",
    "041",
    "042",
    "043",
    "044",
    "045",
    "046",
    "047",
    "048",
    "049",
    "050",
    "051",
    "052",
    "053"
};

new AC_CODE_NAME[AC_MAX_CODES][AC_MAX_CODE_NAME_LENGTH] =
{
    {"AirBreak (ayakta)"},
    {"AirBreak (araçta)"},
    {"Teleport (ayakta)"},
    {"Teleport (araçta)"},
    {"Teleport (into/between vehicles)"},
    {"Teleport (vehicle to player)"},
    {"Teleport (pickups)"},
    {"FlyHack (ayakta)"},
    {"FlyHack (araçta)"},
    {"SpeedHack (ayakta)"},
    {"SpeedHack (araçta)"},
    {"Health hack (araçta)"},
    {"Health hack (ayakta)"},
    {"Armour hack"},
    {"Money hack"},
    {"Weapon hack"},
    {"Ammo hack (add)"},
    {"Ammo hack (infinite)"},
    {"Special actions hack"},
    {"GodMode from bullets (ayakta)"},
    {"GodMode from bullets (araçta)"},
    {"Invisible hack"},
    {"Lagcomp-spoof"},
    {"Tuning hack"},
    {"Parkour mod"},
    {"Quick turn"},
    {"Rapid fire"},
    {"FakeSpawn"},
    {"FakeKill"},
    {"Pro Aim"},
    {"CJ run"},
    {"CarShot"},
    {"CarJack"},
    {"UnFreeze"},
    {"AFK Ghost"},
    {"Full Aiming"},
    {"Fake NPC"},
    {"Reconnect"},
    {"High ping"},
    {"Dialog hack"},
    {"Sandbox"},
    {"Invalid version"},
    {"Rcon hack"},
    {"Tuning crasher"},
    {"Invalid seat crasher"},
    {"Dialog crasher"},
    {"Attached object crasher"},
    {"Weapon Crasher"},
    {"Connects to one slot"},
    {"Flood callback functions"},
    {"Flood change seat"},
    {"DDos"},
    {"NOP's"},
    {"Game Speed"}
};

new AC_TRIGGER_TYPE_NAME[AC_MAX_TRIGGER_TYPES][AC_MAX_TRIGGER_TYPE_NAME_LENGTH] =
{
    {"Bos"},
    {"Uyar"},
    {"Kick"}
};

new
    AC_CODE_TRIGGER_TYPE[AC_MAX_CODES],
    AC_CODE_TRIGGERED_COUNT[AC_MAX_CODES] = {0, ...};

new
    pAntiCheatLastCodeTriggerTime[MAX_PLAYERS][AC_MAX_CODES],
    pAntiCheatSettingsPage[MAX_PLAYERS char],
    pAntiCheatSettingsMenuListData[MAX_PLAYERS][AC_MAX_CODES_ON_PAGE],
    pAntiCheatSettingsEditCodeId[MAX_PLAYERS];

enum cadirlar
{
	bool:cadirExists,
	cadirSahip,
	Float:cadirPos[3],
	cadirObject,
	cadirKilit,
	Text3D:cadirText
}
new CadirData[MAX_CADIR][cadirlar];

/* --------------------------------[ Discord Log ]----------------------------- */

#define 	SERV_LOG 	"server-info"
#define 	PVM_LOG 	"pm-info"
#define 	SES_LOG 	"ss-info"
#define 	REK_LOG 	"reklamlar"

/* --------------------------------[ Modüller ]-------------------------------- */

#include "../include/furniture_list.inc"
#include "../include/vehicle_sells.inc"
#include "gm/a_build/build.inc"

/* --------------------------------[ Gamemode ]-------------------------------- */

public OnGameModeInit()
{
	SQL_OnGameModeInit();
	Server_OnGameModeInit();
	Job_OnGameModeInit();
	TDraw_OnGameModeInit();
	Taxi_OnGameModeInit();
	ItemDrop_Init();
	Label_OnGameModeInit();
	Tower_OnGameModeInit();
	Garage_OnGameModeInit();
	Enterance_OnGameModeInit();
    Gate_OnGameModeInit();
	ATM_OnGameModeInit();
	Borsa_OnGameModeInit();
    Obj_OnGameModeInit();
    CCTV_OnGameModeInit();
	ChopShop_OnGameModeInit();
	SC_OnGameModeInit();
    House_OnGameModeInit();
    Apart_OnGameModeInit();
    Tele_OnGameModeInit();
    Biz_OnGameModeInit();
    Food_OnGameModeInit();
    APB_OnGameModeInit();
    Factions_OnGameModeInit();
    Radio_OnGameModeInit();
    Trucker_OnGameModeInit();
    PayPhone_OnGameModeInit();
    Marks_OnGameModeInit();
	Ship_Init();
	Patrul_Init();
    Toll_Init();
	SetCurrentTime();
	Interior_OnGameModeInit();
	Timer_OnGameModeInit();
	License_OnGameModeInit();
	LoadPayPhoneTD();
	Advert_OnGameModeInit();
	BillBoard_OnGameModeInit();
	Park_OnGameModeInit();
	RadarHud_OnGameModeInit();

	//StoreTD();
	Street_OnGameModeInit();

	// Balýk noktalarý
	BalikNoktalariniYukle();

	SetTimer("Cars_OnGameModeInit", 5000, false);
	SetTimer("Vehicle_OnGameModeInit", 5000, false);

	SetTimer("KBDHava",7000000,true);
	mysql_tquery(dbHandle, "SELECT * FROM paketler WHERE sqlid = 0 AND aracsqlid = 0 AND faction_id = -1", "PaketYukle");
	mysql_tquery(dbHandle, "SELECT * FROM tohumlar", "TohumSorgu", "dddds", 0, 0, 0, 0, "");

	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 3000); // 900
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 3000);

	for (new i; i < sizeof(GuvenliBolge); ++i)
	{
	    GuvenliBolge[i][Rectangle] = CreateDynamicRectangle(GuvenliBolge[i][minX], GuvenliBolge[i][minY], GuvenliBolge[i][maxX], GuvenliBolge[i][maxY], 0, 0);
	    GuvenliBolge[i][Zone] = GangZoneCreate(GuvenliBolge[i][minX], GuvenliBolge[i][minY], GuvenliBolge[i][maxX], GuvenliBolge[i][maxY]);
	    GangZoneShowForPlayer(i, GuvenliBolge[i][Zone], 0x54ff0060);
	}

	//////////////////// TIRCLIK MESLEÐÝ ///////////////////////////////////////////
	CreateDynamicPickup(1239, 23, 2289.317626, -2353.620849, 13.546875 , -1, -1);
	CreateDynamic3DTextLabel("{bcbcbc}(( Týrcýlýk Noktasý ))\n{afafaf}« /tircilik »", -1, 2289.317626, -2353.620849, 13.546875 ,5.0);

	CreateDynamicPickup(1239, 23, 2638.6077,857.0383,6.0938, -1, -1);
	CreateDynamic3DTextLabel("{bcbcbc}(( Týrcýlýk Noktasý ))\n{afafaf}« /tircilik »", -1, 2638.6077,857.0383,6.0938,5.0);

	CreateDynamicPickup(1239, 23, 2041.7294,2039.7290,10.8203, -1, -1);
	CreateDynamic3DTextLabel("{bcbcbc}(( Týrcýlýk Noktasý ))\n{afafaf}« /tircilik »", -1, 2041.7294,2039.7290,10.8203,5.0);

	CreateDynamicPickup(1239, 23, 74.7177,-253.5841,1.5781, -1, -1);
	CreateDynamic3DTextLabel("{bcbcbc}(( Týrcýlýk Noktasý ))\n{afafaf}« /tircilik »", -1, 74.7177,-253.5841,1.5781,5.0);

	CreateDynamicPickup(1239, 23, -1046.8080,-658.3515,32.0126, -1, -1);
	CreateDynamic3DTextLabel("{bcbcbc}(( Týrcýlýk Noktasý ))\n{afafaf}« /tircilik »", -1, -1046.8080,-658.3515,32.0126,5.0);

	CreateDynamicPickup(1239, 23, -1978.9320,477.3718,29.0156, -1, -1);
	CreateDynamic3DTextLabel("{bcbcbc}(( Týrcýlýk Noktasý ))\n{afafaf}« /tircilik »", -1, -1978.9320,477.3718,29.0156,5.0);

	CreateDynamicPickup(1239, 23, -2457.4937,2292.7139,4.9844, -1, -1);
	CreateDynamic3DTextLabel("{bcbcbc}(( Týrcýlýk Noktasý ))\n{afafaf}« /tircilik »", -1, -2457.4937,2292.7139,4.9844,5.0);

	CreateDynamicPickup(1239, 23, 1045.2523,2134.1365,10.8203, -1, -1);
	CreateDynamic3DTextLabel("{bcbcbc}(( Týrcýlýk Noktasý ))\n{afafaf}« /tircilik »", -1, 1045.2523,2134.1365,10.8203,5.0);

	CreateDynamicPickup(1239, 23, -85.9225,-1189.7953,1.7500, -1, -1);
	CreateDynamic3DTextLabel("{bcbcbc}(( Týrcýlýk Noktasý ))\n{afafaf}« /tircilik »", -1, -85.9225,-1189.7953,1.7500,5.0);
    //////////////////// TIRCLIK MESLEÐÝ ///////////////////////////////////////////

    // Weapon Config Ayarlarý
    SetVehiclePassengerDamage(true);
    SetDisableSyncBugs(true);
	SetDamageFeed(false);
	SetDamageSounds(0, 0);

	//Streamer_ToggleErrorCallback(1);
    SetCrashDetectLongCallTime(0);
	DisableCrashDetectLongCall();

	//UploadAntiCheatSettings();

//	#include <interiors/main_lc/main.inc>

	return 1;
}

Server_OnGameModeInit()
{
    SendRconCommand("mapname "MAP_NAME"");
	SendRconCommand("hostname "ServerName"");

    DisableInteriorEnterExits();
	ManualVehicleEngineAndLights();
	AllowInteriorWeapons(1);
	EnableStuntBonusForAll(0);
 	DisableNameTagLOS();
	ShowPlayerMarkers(0);
	LimitPlayerMarkerRadius(15.0);
	SetNameTagDrawDistance(20.0);
	SetGameModeText(GameModeText);

	SetCrashDetectLongCallTime(0);
	DisableCrashDetectLongCall();

	mysql_tquery(dbHandle, "SELECT * FROM server_settings", "OnServerSettingsLoaded", "");

	mysql_tquery(dbHandle, "SELECT id FROM ozel_modeller", "LoadModels");

	//Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 800);
    return 1;
}

this::OnServerSettingsLoaded()
{
	new rows = cache_num_rows();

	if(rows)
	{
		cache_get_value(0, "hostname", ServerInfo[sHostName], 120);
		cache_get_value(0, "weburl", ServerInfo[sWebUrl], 64);
		cache_get_value(0, "language", ServerInfo[sLanguage], 64);
		cache_get_value(0, "map", ServerInfo[sMap], 32);
		cache_get_value(0, "version", ServerInfo[sVersion], 32);
		cache_get_value_int(0, "maintenance", ServerInfo[sMaintenance]);
		cache_get_value(0, "password", ServerInfo[sPassword], 64);
		cache_get_value_int(0, "weather", ServerInfo[sWeather]);
		cache_get_value_int(0, "price_payday", ServerInfo[sPricePayday]);
		cache_get_value_int(0, "price_park", ServerInfo[sPricePark]);
		cache_get_value_float(0, "dealership_percent", ServerInfo[sDealershipPercent]);

		if(ServerInfo[sMaintenance] && ServerInfo[sPassword] != '0')
		{
			SendRconCommand(sprintf("hostname [BAKIM] %s", ServerInfo[sHostName]));
			SendRconCommand(sprintf("password %s", ServerInfo[sPassword]));
		}

		else SendRconCommand(sprintf("hostname %s", ServerInfo[sHostName]));

		SendRconCommand(sprintf("weburl %s", ServerInfo[sWebUrl]));
		SendRconCommand(sprintf("language %s", ServerInfo[sLanguage]));
		SendRconCommand(sprintf("mapname %s", ServerInfo[sMap]));
		SetGameModeText(ServerInfo[sVersion]);

		cache_get_value_int(0, "price_taxi_license", ServerInfo[sPriceTaxiLicense]);

		cache_get_value_float(0, "price_vehicle_register_percent", ServerInfo[sPriceVehRegisterPercent]);
		cache_get_value_float(0, "price_vehicle_weekly_tax_percent", ServerInfo[sPriceVehWeeklyTaxPercent]);

		cache_get_value_int(0, "price_driver_license", ServerInfo[sPriceDriverLicense]);

		cache_get_value_int(0, "price_fuel", ServerInfo[sPriceFuel]);

		cache_get_value_float(0, "locale_sale_percent", ServerInfo[sLocaleSalePercent]);

		SetWeather(ServerInfo[sWeather]);

		ServerInfo[sDoublePayday] = false;

		ServerInfo[sPriceColour] = 250;
		ServerInfo[sPriceInsurance] = 100;
	}

	else printf("[!] Sunucu ayarlari alinamadi.");

	return 1;
}

public main()
{
    print("Gamemode baþlatýldý!");
}

public OnGameModeExit()
{
	mysql_tquery(dbHandle, "UPDATE `users` SET `online`=0 WHERE `online` = 1");
	for(new i; i < MAX_BIZ; i++) Save_Business(i);
	for(new i; i < MAX_HOUSES; i++) Save_House(i);
	for(new i; i < MAX_VEHICLES; i++) Save_Car(i);
	for(new i; i < MAX_PLAYERS; i++) Save_User(i);

	SaveServer();

	mysql_close(dbHandle);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if (IsPlayerNPC(playerid)) {
		return 1;
	}

    if (IsPlayerLogged(playerid))
	{
     	SetSpawnInfoEx(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
    	SpawnPlayer(playerid);
		return 1;
	}
    else
	{
	    SetTimerEx("CheckAccount", 1200, false, "i", playerid);
		SendServerMessage(playerid, "Hesap verileriniz yükleniyor, lütfen bir kaç saniye bekleyin.");
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
	Login_OnPlayerConnect(playerid);
	//Anticheat_OnPlayerConnect(playerid);
	MeslekDogrulama[playerid] = 0;
	Saved[playerid] = 0;
	PlayerInfo[playerid][pCadir] = -1;
	Player_Fire_Enabled[playerid] = true;
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    SetPlayerColor(playerid, TEAM_HIT_COLOR);
	Login_OnPlayerDisconnect(playerid, reason);
	Police_OnPlayerDisconnect(playerid);
    if(IsPlayerPhoneCreated(playerid)) Phone_Destroy(playerid);
   	Player_Fire_Enabled[playerid] = false;
	Player_Key_Sprint_Time[playerid] = 0;
    SetPVarInt(playerid, "BalikChekpoint", 0);
    foreach (new i : Player)
	{
	    if (PlayerInfo[playerid][pDraggedBy] == i)
	    {
	        if (IsValidDynamicObject(Sedye[i])) DestroyDynamicObject(Sedye[i]);
	    }
	}
 	DetachTrailerFromVehicle(tircilikDorse[playerid]);
 	DestroyVehicle(tircilikDorse[playerid]);
   	if (PlayerInfo[playerid][pMasa] == true)
	{
	    PlayerInfo[playerid][pMasa] = false;
	    DestroyDynamicObject(PlayerInfo[playerid][pMasaObject]);
	    DestroyDynamic3DTextLabel(PlayerInfo[playerid][pMasaText]);
	}
	if (PlayerInfo[playerid][pStand] == true)
	{
	    PlayerInfo[playerid][pStand] = false;
	    DestroyDynamicObject(PlayerInfo[playerid][pStandObject]);
	    DestroyDynamic3DTextLabel(PlayerInfo[playerid][pStandText]);
	}

	new cadirid = CadirID(playerid);
   	if (cadirid != -1)
   	{
   	    foreach (new i:Player) if (PlayerInfo[i][pCadir] == cadirid)
        {
            SetPlayerPos(i, CadirData[cadirid][cadirPos][0], CadirData[cadirid][cadirPos][1], CadirData[cadirid][cadirPos][2]);
            SetPlayerInterior(i, 0);
            SetPlayerVirtualWorld(i, 0);
            PlayerInfo[i][pCadir] = -1;
        }
        Cadir_Sil(playerid);
  	}
	return 1;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if (PlayerInfo[playerid][pChar] > 0 && PlayerInfo[playerid][pOnDuty])	SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
	else	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	Login_OnPlayerSpawn(playerid);
	GetPlayerPos(playerid,playerEskiPos[playerid][0],playerEskiPos[playerid][1],playerEskiPos[playerid][2]);
   	if (PlayerInfo[playerid][pKelepceli] == 1)
	{
		PlayerInfo[playerid][pKelepceli] = 0;
		PlayerInfo[playerid][pDragged] = 0;
		PlayerInfo[playerid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerInfo[playerid][pDragTimer]);
	}
	PlayerInfo[playerid][pTircilikSeferde] = 0;
    InSprung[playerid] = 0;
    Sedye[playerid] = 0;
	BalikTimer[playerid] = -1;
	PlayerInfo[playerid][pIsyeriOnay] = 0;
	PlayerInfo[playerid][pMKoduGosteriliyor] = false;
	PlayerInfo[playerid][pBalikGram][0] = -1;
	PlayerInfo[playerid][pBalikGram][1] = -1;
	PlayerInfo[playerid][pBalikGram][2] = -1;
	PlayerInfo[playerid][pBalikGram][3] = -1;
	PlayerInfo[playerid][pBalikGram][4] = -1;
	PlayerInfo[playerid][pBalikGram][5] = -1;
	PlayerInfo[playerid][pBalikGram][6] = -1;
	PlayerInfo[playerid][pBalikGram][7] = -1;
	PlayerInfo[playerid][pBalikGram][8] = -1;
	PlayerInfo[playerid][pBalikGram][9] = -1;
	PlayerInfo[playerid][pBalikID][0] = -1;
	PlayerInfo[playerid][pBalikID][1] = -1;
	PlayerInfo[playerid][pBalikID][2] = -1;
	PlayerInfo[playerid][pBalikID][3] = -1;
	PlayerInfo[playerid][pBalikID][4] = -1;
	PlayerInfo[playerid][pBalikID][5] = -1;
	PlayerInfo[playerid][pBalikID][6] = -1;
	PlayerInfo[playerid][pBalikID][7] = -1;
	PlayerInfo[playerid][pBalikID][8] = -1;
	PlayerInfo[playerid][pBalikID][9] = -1;
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if (!IsPlayerLogged(playerid)) {
		return 0;
	}

    foreach (new i : Player)
	{
	    if (PlayerInfo[playerid][pDraggedBy] == i)
	    {
	        if (IsValidDynamicObject(Sedye[i]))
	        	DestroyDynamicObject(Sedye[i]);
	    }
	}
	GetPlayerPos(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
	SetSpawnInfoEx(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
    Police_OnPlayerDeath(playerid);
	Death_OnPlayerDeath(playerid, killerid, reason);
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    OtobusAracCP[vehicleid] = 0;
    AracCP[vehicleid] = -1;
    Vehicle_OnVehicleSpawn(vehicleid);
	return 1;
}

public OnVehicleRequestDeath(vehicleid, killerid)
{
    new Float:Health;
    GetVehicleHealth(vehicleid, Health);

    if(Health > 300.0)
    {
        return 0;
    }

    return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    Police_OnVehicleDeath(vehicleid);
	Vehicle_OnVehicleDeath(vehicleid, killerid);
	Radar_OnVehicleDeath(vehicleid);
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if (PlayerInfo[playerid][pMKoduGosteriliyor] == true) {
	 	SendErrorMessage(playerid,"Meslek kodunu girmeden bu sistemi kullanamazsýnýz.");
	 	SendErrorMessage(playerid,"Eðer kod menüsünü bir þekilde kapattýysanýz relog atmanýz gerekecek.");
	 	return 1;
 	}
	if (!IsPlayerLogged(playerid)) {
		return 0;
	}
	if (result == -1)	return SendErrorMessage(playerid, "\"/%s\" komutu bulunamadý. Yardým için {FF6347}/yardim{FFFFFF} veya {FF6347}/soru{FFFFFF} komutunu kullanabilirsiniz.", cmd);

	printf(sprintf("%s: /%s %s", GetNameEx(playerid), cmd, params));
	return 1;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	if (PlayerInfo[playerid][pMKoduGosteriliyor] == true) {
	 	SendErrorMessage(playerid,"Meslek kodunu girmeden bu sistemi kullanamazsýnýz.");
	 	SendErrorMessage(playerid,"Eðer kod menüsünü bir þekilde kapattýysanýz relog atmanýz gerekecek.");
	 	return 1;
 	}
	if (!IsPlayerLogged(playerid)) return 0;
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if (PlayerInfo[playerid][pMKoduGosteriliyor] == true) {
	 	SendErrorMessage(playerid,"Meslek kodunu girmeden bu sistemi kullanamazsýnýz.");
	 	SendErrorMessage(playerid,"Eðer kod menüsünü bir þekilde kapattýysanýz relog atmanýz gerekecek.");
	 	return 1;
 	}
	if (!IsPlayerLogged(playerid)) 			return 0;
	if (GetPVarInt(playerid, #buing_phone))	return 0;

	if (PlayerInfo[playerid][pMutedTime] > 0)
	{
		SendErrorMessage(playerid, "Yönetici sizin konuþmanýzý yasaklamýþ.");
		return 0;
	}
	if (PlayerInfo[playerid][pInjured] == 2)
	{
		SendErrorMessage(playerid, "Aðýr yaralýyken konuþamazsýn.");
		return 0;
	}
    if(PlayerInfo[playerid][pAdmin] > 0 && IsAdminDuty(playerid))
	{
	    new str[144];
		format(str, sizeof(str), "{FFFFFF}(( [OOC] {a92626}%s{FFFFFF}: %s ))", GetAccName(playerid), text);
		ProxDetectorOutOfCharacter(20.0, playerid, str, COLOUR_ALTO);
		return 0;
	}
	Player_OnPlayerText(playerid, text);
	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	if (PlayerInfo[playerid][pMKoduGosteriliyor] == true) {
	 	SendErrorMessage(playerid,"Meslek kodunu girmeden bu sistemi kullanamazsýnýz.");
	 	SendErrorMessage(playerid,"Eðer kod menüsünü bir þekilde kapattýysanýz relog atmanýz gerekecek.");
	 	return 1;
 	}
	return 0;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if (dialogid == DIALOG_CONFIRM_SYS) {
		ConfirmDialog_Response(playerid, response);
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if ((newstate == 2 && oldstate == 3) || (newstate == 3 && oldstate == 2)) 	return Kick(playerid);
	if (IsPlayerNPC(playerid)) return 1;
	new vehicleid = GetPlayerVehicleID(playerid);

  	if (OtobusAracCP[vehicleid] == 1)
	SetPlayerCheckpoint(playerid, OtobusCP[AracCP[vehicleid]][OtobusPosX], OtobusCP[AracCP[vehicleid]][OtobusPosY], OtobusCP[AracCP[vehicleid]][OtobusPosZ], 5.0);

	Box_OnPlayerStateChange(playerid, newstate);
	Weapon_OnPlayerStateChange(playerid, newstate);
	Taxi_OnPlayerStateChange(playerid, newstate);
	Vehicle_OnPlayerStateChange(playerid, newstate, oldstate);
	HUD_OnPlayerStateChange(playerid, newstate, oldstate);
	Lic_OnPlayerStateChange(playerid, newstate);
	Radar_OnPlayerStateChange(playerid, newstate, oldstate);
	Trash_OnPlayerStateChange(playerid, newstate, oldstate);
	return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
	if (IsPlayerNPC(playerid)) return 1;
	if (PlayerInfo[playerid][pMKoduGosteriliyor] == true) {
	 	SendErrorMessage(playerid,"Meslek kodunu girmeden bu sistemi kullanamazsýnýz.");
	 	SendErrorMessage(playerid,"Eðer kod menüsünü bir þekilde kapattýysanýz relog atmanýz gerekecek.");
	 	return 1;
 	}
	if (PlayerInfo[playerid][pTircilikSeferde] > 1) {

	    if(PlayerInfo[playerid][pTircilikSeferde] == 0) return SendErrorMessage(playerid, "Týrcýlýk seferinde deðilsiniz.");
	    new vehicleid = GetPlayerVehicleID(playerid), diger = GetVehicleTrailer(vehicleid);
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515) return SendErrorMessage(playerid, "Bu mesleði sadece Roadtrain ve Linerunner ismili araçlarla yapýlabilir");
	    if(!IsTrailerAttachedToVehicle(vehicleid)) return SendErrorMessage(playerid, "Bu araçta dorse yok.");
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Týrýn þöförü olmalýsýnýz.");
	    if(GetVehicleTrailer(vehicleid) != tircilikDorse[playerid]) return SendErrorMessage(playerid, "Bu dorse size ait deðil.");

	    DetachTrailerFromVehicle(diger);
	    DetachTrailerFromVehicle(tircilikDorse[playerid]);
	    DestroyVehicle(diger);
	    DestroyVehicle(tircilikDorse[playerid]);

	    TircilikMeslekDogrulama[playerid] += 1;

		if(PlayerInfo[playerid][pTircilikSeferde] == 1) { SendSyntaxMessage(playerid,"Yükünüzü teslim ettiniz."); GiveCash(playerid, randomEx(200,350)); }
		if(PlayerInfo[playerid][pTircilikSeferde] == 2) { SendSyntaxMessage(playerid,"Yükünüzü teslim ettiniz."); GiveCash(playerid, randomEx(200,350)); }
		if(PlayerInfo[playerid][pTircilikSeferde] == 3) { SendSyntaxMessage(playerid,"Yükünüzü teslim ettiniz."); GiveCash(playerid, randomEx(200,350)); }
		if(PlayerInfo[playerid][pTircilikSeferde] == 4) { SendSyntaxMessage(playerid,"Yükünüzü teslim ettiniz."); GiveCash(playerid, randomEx(200,350)); }
		if(PlayerInfo[playerid][pTircilikSeferde] == 5) { SendSyntaxMessage(playerid,"Yükünüzü teslim ettiniz."); GiveCash(playerid, randomEx(200,350)); }
		if(PlayerInfo[playerid][pTircilikSeferde] == 6) { SendSyntaxMessage(playerid,"Yükünüzü teslim ettiniz."); GiveCash(playerid, randomEx(200,350)); }
		if(PlayerInfo[playerid][pTircilikSeferde] == 7) { SendSyntaxMessage(playerid,"Yükünüzü teslim ettiniz."); GiveCash(playerid, randomEx(200,350)); }
		if(PlayerInfo[playerid][pTircilikSeferde] == 8) { SendSyntaxMessage(playerid,"Yükünüzü teslim ettiniz."); GiveCash(playerid, randomEx(200,350)); }
        if(PlayerInfo[playerid][pTircilikSeferde] == 9) { SendSyntaxMessage(playerid,"Yükünüzü teslim ettiniz."); GiveCash(playerid, randomEx(200,350)); }
		return 1;
	}
    if (GetPVarInt(playerid, #SWATROPE) && PlayerInfo[playerid][pSwatDuty])
    {
        DeletePVar(playerid, #SWATROPE);
        DeletePVar(playerid, #CHOPID);

        ClearAnimations(playerid);
        TogglePlayerControllable(playerid,0);
        TogglePlayerControllable(playerid,1);

        DisablePlayerCheckpoint(playerid);

		for (new i = 0; i < MAX_ROPE_LENGTH; i++) {
            DestroyObject(RopesInfo[playerid][i]);
        }
    }
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 431 && OtobusAracCP[GetPlayerVehicleID(playerid)] == 1)
	{
	    AracCP[GetPlayerVehicleID(playerid)]++;
	    if(AracCP[GetPlayerVehicleID(playerid)] < sizeof(OtobusCP))
	    {
	    	if(OtobusCP[AracCP[GetPlayerVehicleID(playerid)]-1][Otobus_Durak] == true)
	    	{
	    	   	InfoMSG(playerid, "~r~Lutfen Bekleyin!", 5);
	    		TogglePlayerControllable(playerid, false);
				SetTimerEx("OtobusDurak", 4400, false, "i", playerid);
	    	}else{
 	    		InfoMSG(playerid, "~g~Yolcular aliniyor ~w~lutfen bekleyin!", 5);
	    		TogglePlayerControllable(playerid, false);
				SetTimerEx("OtobusDurak", 4000, false, "i", playerid);
	        	SetPlayerCheckpoint(playerid, OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosX], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosY], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosZ], 5.0);
			}
	    }
	    else
	    {
	        DisablePlayerCheckpoint(playerid);
	        OtobusAracCP[GetPlayerVehicleID(playerid)] = 0;
	        AracCP[GetPlayerVehicleID(playerid)] = -1;
			GiveCash(playerid, randomEx(250,2500));
	        SendSyntaxMessage(playerid, "Sefer bitti.");
	    }
	}
	if (PlayerInfo[playerid][pJob] == JOB_TASIMACILIK)
	{
		if (pTemp[playerid][pTruckerOn])
		{
		    new query[350];
		    if (pCurrentCheckpoint[playerid] < 10)
		        pCurrentCheckpoint[playerid]++;

		    new columnName[32];
		    format(columnName, sizeof(columnName), "jobCheckpoint%d", pCurrentCheckpoint[playerid]);

		    mysql_format(dbHandle, query, sizeof(query), "SELECT %s FROM jobs WHERE jobid = 6", columnName);
		    mysql_tquery(dbHandle, query, "TasimacilikCheckpoint", "ds", playerid, columnName);
		}
	}
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	printf(cmd);
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if (IsPlayerNPC(playerid))
		return 1;

	return 0;
}

public OnDynamicObjectMoved(objectid)
{
    Ship_OnDynamicObjectMoved(objectid);

	return 1;
}


public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	V_OnVehicleDamageStatusUpdate(vehicleid);
	return 1;
}

this::DamagePause(id)
{
    SetPlayerDrunkLevel(id, 0);
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	House_OnPlayerSelectedMenuRow(playerid, row);
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
    if (pTemp[playerid][pInteriorBiz])	ShowMenuForPlayer(buy_interior, playerid);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

#define EGZOZ_1(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define EGZOZ_2(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new Float:vx,Float:vy,Float:vz;
	GetPlayerVelocity(playerid,vx,vy,vz);
/*	if(Player_Fire_Enabled[playerid])
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid)
			{
				new vehicle_modelid = GetVehicleModel(vehicleid);
				if(FIRE_INFO[vehicle_modelid - 400][fire_VALID])
				{
					if(EGZOZ_1(KEY_SPRINT))
					{
						Player_Key_Sprint_Time[playerid] = gettime();
					}
					else if(EGZOZ_2(KEY_SPRINT))
					{
						if(gettime() - Player_Key_Sprint_Time[playerid] > 2)
						{
							PlayerPlaySound(playerid, 1131, 0.0, 0.0, 0.0);

							new effect_object = CreateObject(18695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), effect_object2 = -1;
							AttachObjectToVehicle
							(
								effect_object, vehicleid,
								FIRE_INFO[vehicle_modelid - 400][fire_OFFSET_X], FIRE_INFO[vehicle_modelid - 400][fire_OFFSET_Y], FIRE_INFO[vehicle_modelid - 400][fire_OFFSET_Z],
								FIRE_INFO[vehicle_modelid - 400][fire_ROT_X], FIRE_INFO[vehicle_modelid - 400][fire_ROT_Y], FIRE_INFO[vehicle_modelid - 400][fire_ROT_Z]
							);

							if(FIRE_INFO[vehicle_modelid - 400][fire_MIRROR])
							{
								effect_object2 = CreateObject(18695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
								AttachObjectToVehicle
								(
									effect_object2, vehicleid,
									-FIRE_INFO[vehicle_modelid - 400][fire_OFFSET_X], FIRE_INFO[vehicle_modelid - 400][fire_OFFSET_Y], FIRE_INFO[vehicle_modelid - 400][fire_OFFSET_Z],
									FIRE_INFO[vehicle_modelid - 400][fire_ROT_X], -FIRE_INFO[vehicle_modelid - 400][fire_ROT_Y], -FIRE_INFO[vehicle_modelid - 400][fire_ROT_Z]
								);
							}
							SetTimerEx("DestroyEffectObject", 100, false, "ii", effect_object, effect_object2);
						}
					}
				}
			}
		}
	}
	*/

/*	if (PRESSED(KEY_JUMP) && (vy > 0.01 || vy <-0.01 || vx > 0.01 || vx <-0.01) && IsPlayerInAnyVehicle(playerid) == 0 && InSprung[playerid] == 0)
	{
		if(vz > 0.01 || vz < -0.01) return 1;
		InSprung[playerid] = 1;
		TimerIDSprung = SetTimerEx("FunktionInSprung",1,true,"i",playerid);
	}*/
	if (PRESSED ( KEY_FIRE ) && GetPlayerWeapon(playerid) == 42)
	{
		static
	        Float:fX,
	        Float:fY,
	        Float:fZ;

	    for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	    {
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if ((IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 3.4, fX, fY, fZ))/* && ++ g_aFireExtinguished[i] == 32*/)
   			{
   			    SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18743, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));
   			    SetTimerEx("DestroyFire", 2500, false, "d", CreateDynamicObject(18688, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));
   				DestroyDynamicObject(g_aFireObjects[i]);
     			g_aFireExtinguished[i] = 0;
			}
		}
	}
	if (PRESSED ( KEY_FIRE ) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
	{
	 	static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fVector[3],
			Float:fCamera[3];

	    GetPlayerCameraFrontVector(playerid, fVector[0], fVector[1], fVector[2]);
	    GetPlayerCameraPos(playerid, fCamera[0], fCamera[1], fCamera[2]);

	    for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	    {
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if (IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 3050, fX, fY, fZ))
			{
				if (++g_aFireExtinguished[i] == 64 && DistanceCameraTargetToLocation(fCamera[0], fCamera[1], fCamera[2], fX, fY, fZ + 2.5, fVector[0], fVector[1], fVector[2]) < 12.0)
   				{
	   			    SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18743, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));
	   			    SetTimerEx("DestroyFire", 2500, false, "d", CreateDynamicObject(18688, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));
	   				DestroyDynamicObject(g_aFireObjects[i]);
	     			g_aFireExtinguished[i] = 0;
				}
		  	}
	    }
	}
	Admin_OnPlayerKeyStateChange(playerid, newkeys);
	Attach_OnPlayerKeyStateChange(playerid, newkeys);
	Keys_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	//Skate_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	Player_OnPlayerUpdate(playerid);
	Vehicle_OnPlayerUpdate(playerid);
	Phone_OnPlayerUpdate(playerid);
	Corpse_OnPlayerUpdate(playerid);

	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if ((PlayerInfo[forplayerid][pSettings] & togName) || maskOn{playerid})	ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);

	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if (IsPlayerLogged(playerid) && maskOn{playerid})	ShowPlayerNameTagForPlayer(playerid, playerid, false);

	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if (VehicleInfo[vehicleid][carLocked]) SetVehicleParamsForPlayer(vehicleid,forplayerid,0,1)
	;
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
    SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &WEAPON:weapon, &bodypart)
{
	if(IsPlayerPause(playerid)) return 0;
    Weapon_OnPlayerDamage(playerid, amount, issuerid, weapon, bodypart);
	return 1;
}

forward OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ);
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    Weapon_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ);
    Fire_OnPlayerWeaponShot(playerid);
    CCTV_OnPlayerWeaponShot(playerid, weaponid);
	return 1;
}

public OnPlayerChange3DMenuBox(playerid,MenuID,boxid,list,boxes)
{
	return 1;
}

public OnPlayerSelect3DMenuBox(playerid,MenuID,boxid,list,boxes)
{
	Furn_OnPlayerSelect3DMenuBox(playerid, MenuID, boxid, list, boxes);

	return 1;
}

public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	if (extraid == MODEL_SELECTION_COLOR && response == MODEL_RESPONSE_SELECT)
	{
	    if (GetPVarInt(playerid, #veh_color_type) == 1)
	    {
		    new vehicle = GetPlayerVehicleID(playerid);

			if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID]) return 1;

		    if (GetPVarInt(playerid, #veh_color1) == -1)
		    {
		        SetPVarInt(playerid, #veh_color1, index);

		        new colors[256];

		        for(new i; i != 256; i++)
				{
		            colors[i] = i;
				}

		    	ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors, sizeof(colors));
				return 1;
			}
		    StartVehicleUpgrade(playerid, vehicle, 10, 100, GetPVarInt(playerid, #veh_color1), index);
		}

		if (GetPVarInt(playerid, #veh_color_type) == 2)
	    {
		    new vehicle = GetPlayerVehicleID(playerid);

			if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID]) return 1;

		    if (GetPVarInt(playerid, #veh_color1) == -1)
		    {
		        SetPVarInt(playerid, #veh_color1, index);

		        new colors[256];

		        for(new i; i != 256; i++)
				{
		            colors[i] = i;
				}

		    	ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors, sizeof(colors));
				return 1;
			}
		    StartVehicleUpgrade(playerid, vehicle, 10, 500, GetPVarInt(playerid, #veh_color1), index);
		}
	    return 1;
	}

	if (extraid == MODEL_BUING_COLOR && response == MODEL_RESPONSE_SELECT)
	{
	    if (GetPVarInt(playerid, #veh_color_type) == 1)
	    {
			SetPVarInt(playerid, #veh_color_type, 0);
	        SetPVarInt(playerid, #veh_color1, index);

	        new colors[256];

	        for(new i; i != 256; i++)
			{
	            colors[i] = i;
			}

			SendSyntaxMessage(playerid, "Lütfen aracýn {ffc46a}ikinci{FFFFFF} rengini seçin."); //öâåò
	    	ShowColorSelectionMenu(playerid, MODEL_BUING_COLOR, colors, sizeof(colors));
			return 1;
		}

		SetPVarInt(playerid, #veh_color2, index);

		ShowBuyingVehicleDetails(playerid);
	    return 1;
	}

	BB_OnPlayerModelSelection(playerid, extraid, modelid, response);

	return 1;
}

public OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, modelid, Float:x, Float:y, Float:z)
{
	Ob_OnPlayerSelectDynamicObject(playerid, objectid);
	Fu_OnPlayerSelectDynamicObject(playerid, objectid);

	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	/*
	0 - EDIT_RESPONSE_CANCEL   // player cancelled (ESC)
	1 - EDIT_RESPONSE_FINAL    // player clicked on save
	2 - EDIT_RESPONSE_UPDATE   // player moved the object (edition did not stop at all)
	*/
    if (GetPVarInt(playerid, #edit_street)) 	 		St_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
 	else if (GetPVarInt(playerid, #edit_food))  		Food_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
	else if (GetPVarInt(playerid, #edit_item))  		Item_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
	else if (GetPVarInt(playerid, #edit_atm))   		ATM_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rz);
	else if (GetPVarInt(playerid, #edit_trash))   		Trash_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rz);
	else if (GetPVarInt(playerid, #edit_pp))   			PP_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rz);
	else if (GetPVarInt(playerid, #edit_pm))   			PM_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rz);
	else if (pTemp[playerid][pEditBort]) 				Fact_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
	else if (GetPVarInt(playerid, #veh_editor))			Veh_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
	else if (GetPVarInt(playerid, #edit_object))		Obj_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
	else if (GetPVarInt(playerid, #edit_cctv))			CCTV_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
	else if (GetPVarInt(playerid, #edit_tower))			Tow_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
	else if (GetPVarInt(playerid, #edit_gate) ||        GetPVarInt(playerid, #2_edit_gate))	Gate_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
	else if (GetPVarInt(playerid, "edit_furniture"))	Bu_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
	else if (GetPVarInt(playerid, "SC:Edit"))			SC_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
	else if (GetPVarInt(playerid, #EditChopShop))		ChSh_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
	else if (GetPVarInt(playerid, "BB:Edit"))			BB_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz);
	else if (GetPVarInt(playerid, #CorpsEdit))			Corpse_OnPlayerEdit(playerid, objectid, response, x, y, z, rz);
	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	Lic_OnPlayerEnterDynamicRaceCP(playerid, checkpointid);


	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	//Vehicle_OnPlayerEnterDynamicCP(playerid, checkpointid);
	GPS_OnPlayerEnterDynamicCP(playerid, checkpointid);
	Garage_OnPlayerEnterDynamicCP(playerid, checkpointid);
	Trash_OnPlayerEnterDynamicCP(playerid, checkpointid);
	return 1;
}
public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	Biz_OnPlayerPickUpDynamicPickup(playerid, pickupid);
	Ent_OnPlayerPickUpDynamicPickup(playerid, pickupid);
	Lab_OnPlayerPickUpDynamicPickup(playerid, pickupid);
	Fo_OnPlayerPickUpDynamicPickup(playerid, pickupid);
	Ho_OnPlayerPickUpDynamicPickup(playerid, pickupid);
	Ap_OnPlayerPickUpDynamicPickup(playerid, pickupid);
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    Attach_EditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
	Faction_EditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
	Weapon_EditAttachedObject(playerid, response, index, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ);
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if (!IsPlayerLogged(playerid)) return 0;

	for(new i; i < Iter_Count(boomboxIter); i++) 	 if (areaid == BoomboxInfo[i][bArea])  Box_OnPlayerEnterArea(playerid, areaid);
	for(new i; i < Iter_Count(speedcamObjects); i++) if (areaid == speedcam[i][sc_areaid]) SpeedCam_OnPlayerEnterArea(playerid, areaid);

 for (new i = 0; i < MAX_ONAYLIHOOD; i++)
    {
        // Check if the hood exists and if the player enters the specific zone
        if (OnayliHoodlar[i][hoodVarmi] == true && OnayliHoodlar[i][hZone] == areaid)
        {
            // Prepare the string to display the group name (Birlik name)
            new str[100];
            format(str, sizeof(str), "%s", OnayliHoodlar[i][hoodAd]);

            // Assuming that OnayliHoodGirisTD is already initialized for the player
            // Show the group name using PlayerTextDrawSetString and PlayerTextDrawShow
            PlayerTextDrawSetString(playerid, OnayliHoodGirisTD[playerid][0], str);
            PlayerTextDrawShow(playerid, OnayliHoodGirisTD[playerid][0]);
            break; // We found the matching hood, no need to continue the loop
        }
    }
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	PlayerTextDrawHide(playerid, OnayliHoodGirisTD[playerid][0]);
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if (clickedid == Text:INVALID_TEXT_DRAW)
	{
		if (pTemp[playerid][pPayphone] != -1)
			return cancelPayphone(playerid);

		else if (GetPVarInt(playerid, #spawnveh_id))
		{
			CancelSelectTextDraw(playerid);
			DeletePVar(playerid, #spawnveh_id);

			PlayerTextDrawHide(playerid, SpawnVeh_Model[playerid]);
			PlayerTextDrawHide(playerid, SpawnVeh_Box[playerid]);
			for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, SpawnVeh_Arrows[playerid][i]);
			for(new e = 0; e < 3; e++) PlayerTextDrawHide(playerid, SpawnVeh_Base[playerid][e]);
		}
	}
	TD_OnPlayerClickTextDraw(playerid, clickedid);
	PP_OnPlayerClickTextDraw(playerid, clickedid);
	return 1;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(CharacterSelection[playerid][sIsSelecting])
    {
        if(playertextid == PlayerTextdraws[playerid][LoginCharacterTD][1])
        {
            // Giris Yap
            new query[1024];
            format(query, sizeof(query), "SELECT users.*, accounts.* FROM users, accounts WHERE users.id = %i", GetPVarInt(playerid, PVAR_LISTCHARS_CDETAILS_CID));
            mysql_tquery(dbHandle, query, "LoadCharacter", "i", playerid);

			mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weaponsettings WHERE sOwner = %d", GetPVarInt(playerid, PVAR_LISTCHARS_CDETAILS_CID));
		    mysql_tquery(dbHandle, queryx, "OnLoadWeapons", "d", playerid);
        }

        if(playertextid == PlayerTextdraws[playerid][LoginCharacterTD][2])
        {
            // Geri

            LoginScreenDisplayCharacter(playerid, CharacterSelection[playerid][sCurrentSlotID] - 1);
            SyncCharacterSelectionButtons(playerid);
        }

        else if(playertextid == PlayerTextdraws[playerid][LoginCharacterTD][3])
        {
            // Ileri

            LoginScreenDisplayCharacter(playerid, CharacterSelection[playerid][sCurrentSlotID] + 1);
            SyncCharacterSelectionButtons(playerid);
        }
    }

    Ph_OnPlayerClickPlayerTextDraw(playerid, playertextid);
    Fo_OnPlayerClickPlayerTextDraw(playerid, playertextid);
    PP_OnPlayerClickPlayerTextDraw(playerid, playertextid);
    Vh_OnPlayerClickPlayerTextDraw(playerid, playertextid);
    MD_OnPlayerClickPlayerTextDraw(playerid, playertextid);
    return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	Admin_OnPlayerClickMap(playerid, fX, fY, fZ);
	return 1;
}

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
    if (errorid == CR_SERVER_LOST)
	{
		if(!LoadMySQLSettings()) return 0;

	    dbHandle = mysql_connect("localhost", "root", "", "gamemode");
		mysql_log();
		if (mysql_errno() != 0) printf("[MySQL]: Yeniden baglanilamadi: %s", sqlData[SQL_HOST]);
		else
		{
			printf("[MySQL]: Yeniden baglanildi: %s | Kullanici Adi: %s", sqlData[SQL_HOST], sqlData[SQL_USER]);

	        if(mysql_errno(dbHandle) != 0) printf("[SQL] Oyun sunucusu veritabanýna baðlanamadý.");

	        mysql_set_charset("latin5", dbHandle);
	        mysql_query(dbHandle, "SET NAMES latin5");

	        mysql_log(ERROR | WARNING);
		}
	}

	printf("** Veritabanýnda bir sorun oluþtu! QUERY: %s\n\n ERROR: %s\n\nCALL: %s", query, error, callback);
    SendAdmMessage("Bir veritabaný hatasý oluþtu!", error);
    SendAdmMessage("(q: %s)", query);
    SendAdmMessage("(e: %s)", error);
    SendAdmMessage("(c: %s)", callback);
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
    return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, STREAMER_TAG_OBJECT objectid, Float:x, Float:y, Float:z)
{
	CCTV_OnPlayerShootDynamicObject(playerid, weaponid, objectid);
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	Weapon_OnPlayerExitVehicle(playerid, vehicleid);
	Mechanic_OnPlayerExitVehicle(playerid);
	License_OnPlayerExitVehicle(playerid, vehicleid);
	Vehicle_OnPlayerExitVehicle(playerid, vehicleid);
	Box_OnPlayerExitVehicle(playerid);
	Death_OnPlayerExitVehicle(playerid, vehicleid);
	Police_OnPlayerExitVehicle(playerid);
	pTemp[playerid][AntiHileSistemi] = -1;
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if(IsPlayerAndroid(playerid))
    {
		SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0);
    }
    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)	ClearAnimations(playerid);
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli]) return SendErrorMessage(playerid, "Þu an herhangi bir araca binemezsiniz.");
    if (VehicleInfo[vehicleid][carTerminate] > 0 && VehicleInfo[vehicleid][carType] != 0) VehicleInfo[vehicleid][carTerminate] = 0;
	if (VehicleInfo[vehicleid][carTerminateEx] > 0) VehicleInfo[vehicleid][carTerminateEx] = 0;

	if (PlayerInfo[playerid][pProbation] == 1 && !ispassenger)
		ClearAnimations(playerid), RemovePlayerFromVehicle(playerid), SendErrorMessage(playerid, "Probationdayken araç süremezsiniz!");

	if(!ispassenger)
	{
	    if(CarJackDriver(vehicleid) != INVALID_PLAYER_ID)
	    {
	        new Float:x, Float:y, Float:z;

	        GetPlayerPos(playerid, x, y, z);
	        SetPlayerPos(playerid, x, y, z+1.5);
	        TogglePlayerControllable(playerid, 0);
	        SetTimerEx("CarJackFREEZE", 2100, false, "i", playerid);

            Dialog_Show(playerid, EMPTY_DIALOG, DIALOG_STYLE_LIST, "CAR JACK YASAKTIR!", "Car Jack yapmanýz yasaktýr.", "", "Tamam");
	        return 1;
	    }
	}

	Police_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
	Corpse_OnPlayerEnterVehicle(playerid);

	pTemp[playerid][AntiHileSistemi] = vehicleid;
	return 1;
}

//native IsValidVehicle(vehicleid);
/*Internal*/
static BWH_memset(variable[], cells, value) // Slice - http://forum.sa-mp.com/showpost.php?p=1974747
{
	new address;

	#emit LOAD.S.pri  variable
	#emit STOR.S.pri  address

	BWH_raw_memset(address, cells, value);
}

static BWH_raw_memset(address, cells, value) // Slice - http://forum.sa-mp.com/showpost.php?p=1974747
{
	new param_adr;

	#emit LCTRL       6
	#emit MOVE.alt
	#emit LCTRL       0
	#emit ADD
	#emit MOVE.alt
	#emit LCTRL       1
	#emit SUB.alt
	#emit ADD.C       92
	#emit STOR.S.pri  param_adr
	#emit LOAD.S.pri  cells
	#emit SHL.C.pri   2
	#emit SREF.S.pri  param_adr

	#emit LOAD.S.alt  address
	#emit LOAD.S.pri  value
	#emit FILL        0
}

stock DebugMessage(playerid, message[])
{
    if(pTemp[playerid][pDebugMode] == 0)
        return false;

    if(strlen(message) > 96)
    {
        SendClientMessageEx(playerid, COLOUR_BRIGHTRED, sprintf("[DEBUG]" EMBED_ALTO " %.96s", message));
        SendClientMessageEx(playerid, COLOUR_ALTO, sprintf("... %s", message[96]));
    }

    else
    {
        SendClientMessageEx(playerid, COLOUR_BRIGHTRED, sprintf("[DEBUG]" EMBED_ALTO " %s", message));
    }

    return true;
}

stock Log_Kaydet(const path[], const str[], {Float,_}:...)
{
	static args, start, end, File:file, string[1024];
	if((start = strfind(path, "/")) != -1) {
		strmid(string, path, 0, start + 1);

		if(!fexist(string)) return printf("Girilen log klasörü geçersiz. (%s)", string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if(!file)
		return 0;

	if(args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 8); end > start; end -= 4)
		{
        #emit LREF.pri end
        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);
	return 1;
}

stock ConfirmDialog(playerid, caption[], info[], callback[], ...)
{
	new n = numargs(), 		// number of arguments, static + optional
		szParamHash[64];	// variable where the passed arguments will be stored
	for(new arg = 4; arg < n; arg++){	// loop all additional arguments
		format(szParamHash, sizeof(szParamHash), "%s%d|", szParamHash, getarg(arg)); // store them in szParamHash
	}
	SetPVarInt(playerid, "confDialogArgs", n -4);			// store the amount of additional arguments
	SetPVarString(playerid, "confDialCallback", callback);	// store the callback that needs to be called after response
	SetPVarString(playerid, "confDialog_arg", szParamHash);	// store the additional arguments

	ShowPlayerDialog(playerid, DIALOG_CONFIRM_SYS, DIALOG_STYLE_MSGBOX, caption, info, ">>>", "Ýptal"); // display the dialog message itself

	return 1;
}

stock ConfirmDialog_Response(playerid, response)
{
	new szCallback[33],		// variable to fetch our callback to
		szParamHash[64], 	// variable to check raw compressed argument string
		n,					// variable to fetch the amount of additional arguments
		szForm[12];			// variable to generate the CallLocalFunction() "format" argument

	n = GetPVarInt(playerid, "confDialogArgs");	// Fetch the amount of additional arguments
	GetPVarString(playerid, "confDialCallback", szCallback, sizeof(szCallback));	// fetch the callback
	GetPVarString(playerid, "confDialog_arg", szParamHash, sizeof(szParamHash));	// fetch the raw compressed additional arguments

	new hashDecoded[12];	// variable to store extracted additional arguments from the ConfirmDialog() generated string

	sscanf(szParamHash, "p<|>A<d>(0)[12]", hashDecoded);	// extraction of the additional arguments

	new args, 	// amount of cells passed to CallLocalFunction
		addr, 	// pointer address variable for later use
		i;		// i

	format(szForm, sizeof(szForm), "dd");	// static parameters for the callback, "playerid" and "response"

	#emit ADDR.pri hashDecoded	// get pointer address of the extracted additional arguments
	#emit STOR.S.pri addr		// store the pointer address in variable 'addr'
	if (n){	// if there's any additional arguments
		for(i = addr + ((n-1) * 4); i >= addr; i-=4){ // loops all additional arguments by their addresses
			format(szForm, sizeof(szForm), "%sd", szForm); // adds an aditional specifier to the "format" parameter of CallLocalFunction
			#emit load.s.pri i	// load the argument at the current address
			#emit push.pri		// push it to the CallLocalFunction argument list
			args+=4;			// increase used cell number by 4
		}
	}


	args+=16;	// preserve 4 more arguments for CallLocalFunction (16 cause 4 args by 4 cells (4*4))

	#emit ADDR.pri response				// fetch "response" pointer address to the primary buffer
	#emit push.pri						// push it to the argument list

	#emit ADDR.pri playerid				// fetch "playerid" pointer address to the primary buffer
	#emit push.pri						// push it to the argument list

	#emit push.adr szForm				// push the szForm ("format") to the argument list by its referenced address
	#emit push.adr szCallback			// push the szCallback (custom callback) to the argument list by its referenced address
	#emit push.s args					// push the amount of arguments
	#emit sysreq.c CallLocalFunction	// call the function

	// Clear used data
	#emit LCTRL 4
	#emit LOAD.S.ALT args
	#emit ADD.C 4
	#emit ADD
	#emit SCTRL 4

	// Clear used PVars
	DeletePVar(playerid, "confDialCallback");
	DeletePVar(playerid, "confDialog_arg");
	DeletePVar(playerid, "confDialogArgs");

	return 1;
}

this::Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return VectorSize(x1-x2, y1-y2, z1-z2);
}

this::DCC_SendWarning(channeltype, numtype)
{
	if(numtype == 0) return 1;

	new DCC_Embed:ixd2 = DCC_CreateEmbed();
	new extv2[555];
	format(extv2, sizeof(extv2), "Bu mesaj, %s tarihinde otomatik olarak gönderilmiþtir! \nÝçeriðin bu kanaldan dýþarýya çýkartýlmasý **yasaktýr!**", GetNOW());
	DCC_SetEmbedColor(ixd2, 15548997);
	DCC_AddEmbedField(ixd2, trcar(extv2));
	DCC_SendChannelEmbedMessage(channeltype, ixd2);
    return 1;
}

insert_log(const string[], type, subtype, playerid = 0, secondid = 0)
{
    new query[1524];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `logs` (userid,secondid,text,data,type,subtype) VALUES (%i,%i,'%s','%s',%i,%i)",
	playerid, secondid, string, GetFullDate(), type, subtype);
	mysql_tquery(dbHandle, query);
	return 1;
}

isNumeric(const string[])
{
	new length = strlen(string);

	if (length == 0) return 0;

  	for (new i = 0; i < length; i++)
  	{
    	if ((string[i] > '9' || string[i] < '0' && string[i] != '-' && string[i] != '+') || (string[i] == '-' && i != 0) || (string[i] == '+' && i != 0)) return false;
	}

	if (length==1 && (string[0]=='-' || string[0]=='+')) return false;

  	return true;
}

IsAnIP(str[])
{
	if (!str[0] || str[0] == '\1')	return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] < '0' || str[i] > '9') && str[i] != '.') 				return 0;
	    if (0 < ((i == 0) ? (strval(str)) : (strval(str[i + 1]))) > 255)	return 0;
	}
	return 1;
}

place_color(string[])
{
	for(new i=0; string[i]; i++)
	{
		if (string[i] != '~') continue;

        if (string[i + 7] == '~')
		{
			string[i + 7] = '}';
            string[i] = '{';
		}

		if (string[i + 1] == 'n' && string[i + 2] == '~')
        {
            strdel(string, i, i + 2);
            strins(string, "\n", i, 3);
            strdel(string, i + 1, i + 2);
            strins(string, "", i + 1, 1);
		}
	}
	return 1;
}

strreplace(string[], find, replace)
{
	for(new i=0; string[i]; i++)
	{
		if (string[i] != find) continue;

		string[i] = replace;
	}
	return 1;
}

GetMonthName(month)
{
	new name[32];
	switch(month)
	{
		case 1: format(name,32,"Ocak");
		case 2: format(name,32,"Þubat");
		case 3: format(name,32,"Mart");
		case 4: format(name,32,"Nisan");
		case 5: format(name,32,"Mayýs");
		case 6: format(name,32,"Haziran");
		case 7: format(name,32,"Temmuz");
		case 8: format(name,32,"Aðustos");
		case 9: format(name,32,"Eylül");
		case 10: format(name,32,"Ekim");
		case 11: format(name,32,"Kasým");
		case 12: format(name,32,"Aralýk");
	}
	return name;
}

GetInitials(const string[])
{
	new ret[64], index = 0;

	for (new i = 0, l = strlen(string); i != l; i ++)
	{
	    if (('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))	ret[index++] = string[i];
	}
	return ret;
}

StringHasSymbols(string[])
{
	for(new i = 0; i < strlen(string); i++)
	{
		switch(string[i])
		{
			case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/': return 1;
			default: continue;
		}
	}
	return 0;
}

CompareStrings(string[], string2[])
{
	return (!strcmp(string, string2, true))?(1):(0);
}

ConvertSecond(time)
{
	new mes[9];

	if (time < 60) format(mes, sizeof(mes), "00:%02i", time);
	else if (time == 60) mes = "01:00";
	else if (time > 60 && time < 3600)
	{
		new Float: minutes = time / 60, seconds = time % 60;

		format(mes, sizeof(mes), "%02.0f:%02i", minutes, seconds);
	}
	else if (time == 3600) mes = "01:00:00";
	else if (time > 3600)
	{
		new Float: hours = time / 3600, minutes_int = time % 3600, Float: minutes = minutes_int / 60, seconds = minutes_int % 60;

		format(mes, sizeof(mes), "%02.0f:%02.0f:%02i", hours, minutes, seconds);
	}
	return mes;
}

FormatNumber(number)
{
	new value[32], length;

	format(value, sizeof(value), "%i", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++)
		{
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}

	if (number < 0)	strins(value, "-", 0);

	return value;
}

GetFullDate()
{
	new date[56], year, month, day, hour, minute, second;

	getdate(year, month, day);
	gettime(hour, minute, second);
	format(date, sizeof(date), "%02d/%02d/%i, %02d:%02d:%02d", day, month, year, hour, minute, second);
	return date;
}

SetCurrentTime()
{
	gettime(server_hour);
	SetWorldTime(server_hour);
	return 1;
}

randomEx(min, max)
{
	new rand = random(max-min)+min;
	return rand;
}

RemoveAlpha(color)
{
    return (color & ~0xFF);
}

ClearChatbox(playerid, lines)
{
	for(new i=0; i<lines; i++)
	{
		SCM(playerid, COLOR_GREY, " ");
	}
	return 1;
}

ClearChatboxForAll(lines)
{
	for(new i=0; i<lines; i++)
	{
		SCMALL(COLOR_GREY, " ");
	}
	return 1;
}

/*
SaveAllPlayers() //ñîõðàíåíèå âñåõ
{
	foreach(new i : Player)
	{
		KickEx(i);
	}
	return 1;
}*/

stock trcar(car[]) {
  new tmp[1000];
  setto(tmp,car);
  tmp=replacenew("ð", "g",tmp);
  tmp=replacenew("|", "",tmp);
  tmp=replacenew("Ð", "G",tmp);
  tmp=replacenew("þ", "s",tmp);
  tmp=replacenew("Þ", "S",tmp);
  tmp=replacenew("ý", "i",tmp);
  tmp=replacenew("I", "I",tmp);
  tmp=replacenew("Ý", "I",tmp);
  tmp=replacenew("ö", "o",tmp);
  tmp=replacenew("Ö", "O",tmp);
  tmp=replacenew("ç", "c",tmp);
  tmp=replacenew("Ç", "C",tmp);
  tmp=replacenew("ü", "u",tmp);
  tmp=replacenew("Ü", "U",tmp);
  return tmp;
}

stock GetNOW()
{
	new Tarih[3], m[256];
	getdate(Tarih[0], Tarih[1], Tarih[2]);

	format(m, sizeof m, "%d/%d/%d", Tarih[2], Tarih[1], Tarih[0]);
	return m;
}

stock GetTimeEx()
{
	new Saat[3], m[256];
	gettime(Saat[0], Saat[1], Saat[2]);

	format(m, sizeof m, "%02d:%02d:%02d", Saat[0], Saat[1], Saat[2]);
	return m;
}

stock setto(dest[],source[]) {
	new count = strlen(source);
	new i=0;
	for (i=0;i<count;i++) {
		dest[i]=source[i];
	}
	dest[count]=0;
}

stock replacenew(trg[],newstr[],src[]) {
    new f=0;
    new s1[256];
    new tmp[256];
    format(s1,sizeof(s1), "%s",src);
    f = strfind(s1,trg);
    tmp[0]=0;
    while (f>=0) {
        strcat(tmp,ret_memcpy(s1, 0, f));
        strcat(tmp,newstr);
        format(s1,sizeof(s1), "%s",ret_memcpy(s1, f+strlen(trg), strlen(s1)-f));
        f = strfind(s1,trg);
    }
    strcat(tmp,s1);
    return tmp;
}

ret_memcpy(source[],index=0,numbytes) {
	new tmp[256];
	new i=0;
	tmp[0]=0;
	if (index>=strlen(source)) return tmp;
	if (numbytes+index>=strlen(source)) numbytes=strlen(source)-index;
	if (numbytes<=0) return tmp;
	for (i=index;i<numbytes+index;i++) {
		tmp[i-index]=source[i];
		if (source[i]==0) return tmp;
	}
	tmp[numbytes]=0;
	return tmp;
}

stock ReplaceText(string[], const search[], const replacement[], bool:ignorecase = false, pos = 0, limit = -1, maxlength = 256)
{
    if(!limit)return 0;

    new sublen = strlen(search),
        replen = strlen(replacement),
        bool:packed = ispacked(string),
        maxlen = maxlength,
        len = strlen(string),
        count = 0;

    if(packed)maxlen *= 4;
    if(!sublen)return 0;

    while(-1 != (pos = strfind(string, search, ignorecase, pos)))
    {
        strdel(string, pos, pos + sublen);

        len -= sublen;

        if(replen && len + replen < maxlen)
        {
            strins(string, replacement, pos, maxlength);

            pos += replen;
            len += replen;
       }

        if(limit != -1 && ++count >= limit)break;
   }

    return count;
}

stock TurkishCharFix(info[])
{
    new namefix[256];
	ReplaceText(info, "ð", "g");
	ReplaceText(info, "Ð", "G");
	ReplaceText(info, "ü", "u");
	ReplaceText(info, "Ü", "U");
	ReplaceText(info, "þ", "s");
	ReplaceText(info, "Þ", "S");
	ReplaceText(info, "ç", "c");
	ReplaceText(info, "Ç", "C");
	ReplaceText(info, "ö", "o");
	ReplaceText(info, "Ö", "O");
	ReplaceText(info, "ý", "i");
	ReplaceText(info, "Ý", "I");
    format(namefix, sizeof(namefix), info);
    return namefix;
}

stock IsEngineVehicle(vehicleid)
{
    new const g_aengineStatus[] = {
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
    };
    new modelid;
    modelid = GetVehicleModel(vehicleid);
    if(modelid < 400 || modelid > 611)
        return 0;

    return (g_aengineStatus[modelid - 400]);
}

stock GetPhoneSexName(playerid)
{
    new gender[32] = "", sex = PlayerInfo[playerid][pSex];
	switch(sex)
	{
		case 1: gender = "[E]";
		case 2: gender = "[K]";
	}
	return gender;
}

stock GetSQLHealth(id){
	new Float:health, query[43 + MAX_PLAYER_NAME + 1], Cache:search;

	mysql_format(dbHandle, query, sizeof(query), "SELECT health FROM users WHERE id = '%i'", PlayerInfo[id][pID]);
	search = mysql_query(dbHandle, query);

	if(cache_num_rows()){
		cache_get_value_float(0, "health", health);
	}

	cache_delete(search);
	search = MYSQL_INVALID_CACHE;
	return floatround(health);
}

stock GetSQLArmor(id){
	new Float:armour, query[43 + MAX_PLAYER_NAME + 1], Cache:search;

	mysql_format(dbHandle, query, sizeof(query), "SELECT armour FROM users WHERE id = '%i'", PlayerInfo[id][pID]);
	search = mysql_query(dbHandle, query);

	if(cache_num_rows()){
		cache_get_value_float(0, "armour", armour);
	}

	cache_delete(search);
	search = MYSQL_INVALID_CACHE;
	return floatround(armour);
}

stock GetOriginName(id){
	new originName[32], query[43 + MAX_PLAYER_NAME + 1], Cache:search;

	mysql_format(dbHandle, query, sizeof(query), "SELECT origin FROM users WHERE id = '%d'", id);
	search = mysql_query(dbHandle, query);

	if(cache_num_rows()){
		cache_get_value(0, "origin", originName, 32);
	}

	cache_delete(search);
	search = MYSQL_INVALID_CACHE;
	return originName;
}

stock GetOriginLangName(id){
	new langoriginName[32], query[43 + MAX_PLAYER_NAME + 1], Cache:search;

	mysql_format(dbHandle, query, sizeof(query), "SELECT langname FROM users WHERE id = '%i'", id);
	search = mysql_query(dbHandle, query);

	if(cache_num_rows()){
		cache_get_value(0, "langname", langoriginName, 32);
	}

	cache_delete(search);
	search = MYSQL_INVALID_CACHE;
	return langoriginName;
}

public OnOutgoingRPC(playerid, rpcid, BitStream:bs)
{
	switch(rpcid)
	{
		case ORPC_ResetPlayerWeapons: // ResetPlayerWeapons
		{
			BWH_memset(Silah_Bilgi[playerid][sSilahID], 13, 0);
			BWH_memset(Silah_Bilgi[playerid][sMermi], 13, 0);
		}
		case ORPC_GivePlayerWeapon: // GivePlayerWeapon
		{
			new BWH_weaponid, BWH_ammo;

			BS_ReadValue(
				bs,
				PR_UINT32, BWH_weaponid,
				PR_UINT32, BWH_ammo
			);

			if((BWH_weaponid == Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[BWH_weaponid]]) || (SilahSlotuBul[BWH_weaponid] < 6 && SilahSlotuBul[BWH_weaponid] > 2)) // We sum the ammo if weapon is the same or if slot is 3, 4 & 5.
			{
				if(Silah_Bilgi[playerid][sMermi][SilahSlotuBul[BWH_weaponid]] > 0) // If ammo in that slot is above 0, we sum it (Take into account that empty weapons remain in weapon data, so this is actually needed).
				{
					BWH_ammo += Silah_Bilgi[playerid][sMermi][SilahSlotuBul[BWH_weaponid]];
				}
			}

			Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[BWH_weaponid]] = BWH_weaponid;
			Silah_Bilgi[playerid][sMermi][SilahSlotuBul[BWH_weaponid]] = BWH_ammo;

			BS_ResetReadPointer(bs);

			if((BWH_weaponid > 21 && BWH_weaponid < 35) || BWH_weaponid == 38) // Weapons that fire bullets only.
			{
				BS_SetWriteOffset(bs, 32);

				BS_WriteValue(
					bs,
					PR_UINT32, 8000000 // The client ammo doesn't matter. As long as it is not visible in the HUD and doesn't run out, that is good.
				);
			}
		}
		case ORPC_SetPlayerAmmo: // SetPlayerAmmo
		{
			new BWH_weaponid, BWH_ammo;

			BS_ReadValue(
				bs,
				PR_UINT8, BWH_weaponid,
				PR_INT16, BWH_ammo
			);

			if(BWH_ammo > 0 && ((BWH_weaponid > 21 && BWH_weaponid < 35) || BWH_weaponid == 38))
			{
				Silah_Bilgi[playerid][sMermi][SilahSlotuBul[BWH_weaponid]] = BWH_ammo;
				return 0; // Don't allow it to be sent.
			}
			else
			{
				if(BWH_weaponid > 15) // Melee weaps can't be removed by setting their ammo to 0.
				{
					Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[BWH_weaponid]] = 0;
				}
			}

			BS_ResetReadPointer(bs);
		}
	}

	#if defined BWH_OnOutgoingRPC
		return BWH_OnOutgoingRPC(playerid, rpcid, BitStream:bs);
	#else
		return 1;
	#endif
}

public OnIncomingPacket(playerid, packetid, BitStream:bs)
{
	switch(packetid)
	{
		case IPacket_OnFootSync:
		{
			new BWH_OnFootData[PR_OnFootSync];

			BS_IgnoreBits(bs, 8);

			BS_ReadOnFootSync(bs, BWH_OnFootData);
			BS_ResetReadPointer(bs);

			if(BWH_OnFootData[PR_weaponId] != 46 && BWH_OnFootData[PR_weaponId] != 40 && BWH_OnFootData[PR_weaponId] > 0 && Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[BWH_OnFootData[PR_weaponId]]] != BWH_OnFootData[PR_weaponId])
			{
				BS_SetWriteOffset(bs, 8);
				BWH_OnFootData[PR_weaponId] = 0;
				BS_WriteOnFootSync(bs, BWH_OnFootData);
			}

			new Float:OPTUD_w, Float:OPTUD_x, Float:OPTUD_y, Float:OPTUD_z;

			BS_SetReadOffset(bs, 0x98);
			BS_ReadValue(bs, PR_FLOAT, OPTUD_w, PR_FLOAT, OPTUD_x, PR_FLOAT, OPTUD_y, PR_FLOAT, OPTUD_z);
			BS_ResetReadPointer(bs);

			new const Float:OPTUD_angle = atan2(2 * ((OPTUD_y * OPTUD_z) + (OPTUD_w * OPTUD_x)), (OPTUD_w * OPTUD_w) - (OPTUD_x * OPTUD_x) - (OPTUD_y * OPTUD_y) + (OPTUD_z * OPTUD_z));

			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
			{
				if((OPTUD_angle > 85.0 || OPTUD_angle < -85.0) && OPTUD_angle == OPTUD_angle && PlayerInfo[playerid][pAdmin] < 1)
				{
					KickLine(playerid, "Geçersiz Oturum #1");
					return false;
				}
			}
		}
		case IPacket_PassengerSync:
		{
			new BWH_passengerData[PR_PassengerSync];

			BS_IgnoreBits(bs, 8);

			BS_ReadPassengerSync(bs, BWH_passengerData);
			BS_ResetReadPointer(bs);

			if(BWH_passengerData[PR_weaponId] != 46 && BWH_passengerData[PR_weaponId] != 40 && BWH_passengerData[PR_weaponId] > 0 && Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[BWH_passengerData[PR_weaponId]]] != BWH_passengerData[PR_weaponId])
			{
				BS_SetWriteOffset(bs, 8);
				BWH_passengerData[PR_weaponId] = 0;
				BS_WritePassengerSync(bs, BWH_passengerData);
			}
		}
		case IPacket_DriverSync:
		{
			new BWH_inCarData[PR_InCarSync];

			BS_IgnoreBits(bs, 8);

			BS_ReadInCarSync(bs, BWH_inCarData);
			BS_ResetReadPointer(bs);

			if(BWH_inCarData[PR_weaponId] != 46 && BWH_inCarData[PR_weaponId] != 40 && BWH_inCarData[PR_weaponId] > 0 && Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[BWH_inCarData[PR_weaponId]]] != BWH_inCarData[PR_weaponId])
			{
				BS_SetWriteOffset(bs, 8);
				BWH_inCarData[PR_weaponId] = 0;
				BS_WriteInCarSync(bs, BWH_inCarData);
			}
		}
		case UNOCCUPIED_SYNC:
		{
			new unoccupiedData[PR_UnoccupiedSync];

			BS_IgnoreBits(bs, 8);
			BS_ReadUnoccupiedSync(bs, unoccupiedData);

			if(floatcmp(floatabs(unoccupiedData[PR_roll][0]), 1.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_roll][1]), 1.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_roll][2]), 1.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_direction][0]), 1.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_direction][1]), 1.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_direction][2]), 1.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_position][0]), 20000.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_position][1]), 20000.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_position][2]), 20000.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_angularVelocity][0]), 1.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_angularVelocity][1]), 1.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_angularVelocity][2]), 1.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_velocity][0]), 100.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_velocity][1]), 100.00000) == 1
				|| floatcmp(floatabs(unoccupiedData[PR_velocity][2]), 100.00000) == 1
			) {
				return false;
			}
		}
		case 206:
		{
	        new bulletData[PR_BulletSync];
	        BS_IgnoreBits(bs, 8);
	        BS_ReadBulletSync(bs, bulletData);

	        if(bulletData[PR_hitType] == BULLET_HIT_TYPE_PLAYER)
	        {
		        new Float: getPlayerX, Float: getPlayerY, Float: getPlayerZ, Float: getLastPlayerZ;

		        GetPlayerPos(playerid, getPlayerX, getPlayerY, getPlayerZ);
		        GetPlayerPos(bulletData[PR_hitId], getLastPlayerZ, getLastPlayerZ, getLastPlayerZ);

		        new Float:betweenDistance = floatabs(bulletData[PR_origin][0] - getPlayerX) + floatabs(bulletData[PR_origin][1] - getPlayerY);

		        if(bulletData[PR_offsets][0] == 0.0 && bulletData[PR_offsets][1] == 0.0 && bulletData[PR_offsets][2] == 0.0 || betweenDistance < 0.15 || floatabs(bulletData[PR_origin][2] - getPlayerZ) < 0.01 || floatabs(getLastPlayerZ - bulletData[PR_hitPos][2]) < 0.01)
		        {
			        SCM(playerid, COLOR_LIGHTRED, "(Uyarý): {FFFFFF}Silent Aimbot tespit edildi.");
			        Kick(playerid);
		        }
	       }
		}
		case AIM_SYNC:
		{
			new aimData[PR_AimSync];

			BS_IgnoreBits(bs, 8);
			BS_ReadAimSync(bs, aimData);

			if(aimData[PR_camMode] == 45 || aimData[PR_camMode] == 49 && PlayerInfo[playerid][pAdmin] < 5)
			{
				Kick(playerid);
				return false;
			}
		}
	}

	#if defined BWH_OnIncomingPacket
		return BWH_OnIncomingPacket(playerid, packetid, bs);
	#else
		return 1;
	#endif
}

public OnIncomingRPC(playerid, rpcid, BitStream:bs)
{
	if(rpcid == 26 && _:bs == 1702096) {
		new vehicleid, passanger;
		BS_ReadUint16(bs, vehicleid);
		BS_ReadUint8(bs, passanger);
		if(passanger == 1) {
			if(vehicleid == -1) return 1;
			if(VehicleInfo[vehicleid][carLocked]) {
				ClearAnimations(playerid, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				return false;
			}
			return 1;
		}
		if(GetVehicleModel(vehicleid) < 400) return 1;
		foreach(new i : Player)
		    if(IsPlayerInVehicle(i, vehicleid) && !IsPlayerAFK(i) && GetPlayerVehicleSeat(i) == 0 && i != playerid && GetPlayerState(i) == PLAYER_STATE_DRIVER) {
			ClearAnimations(playerid, 1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			// SetPVarInt(playerid, "AntiCarJack", GetPVarInt(playerid, "AntiCarJack")+1);
			// if(GetPVarInt(playerid, "AntiCarJack") >= 3) KickPlayer(playerid , "LOSWORLD", "Carjack"), SendAdminAlert(false, COLOR_ERROR, "%s adlý kullanýcý, Car Jack sebebiyle kicklendi.", GetNameEx(playerid));
			if(PlayerInfo[playerid][pAdmin] > 0) SendServerMessage(playerid, "Aracýn sürücü koltuðunda %s(%d) oturuyor. CJ yapma.", GetNameEx(i), i);
			else SendErrorMessage(playerid, "Carjack yapmak yasak!");
			return false;
		}
	}
	return 1;
}

stock GetPosBehindVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:offset=0.5)
{
    new Float:vehicleSize[3], Float:vehiclePos[3];
    GetVehiclePos(vehicleid, vehiclePos[0], vehiclePos[1], vehiclePos[2]);
    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, vehicleSize[0], vehicleSize[1], vehicleSize[2]);
    GetXYBehindVehicle(vehicleid, vehiclePos[0], vehiclePos[1], (vehicleSize[1]/2)+offset);
    x = vehiclePos[0];
    y = vehiclePos[1];
    z = vehiclePos[2];
    return 1;
}

GetXYBehindVehicle(vehicleid, &Float:q, &Float:w, Float:distance)
{
    new Float:a;
    GetVehiclePos(vehicleid, q, w, a);
    GetVehicleZAngle(vehicleid, a);
    q += (distance * -floatsin(-a, degrees));
    w += (distance * -floatcos(-a, degrees));
}

SilahYapabilirMi(playerid, gunid) {
	new found = 1;
	if(gunid >= 25 && gunid <= 27) {
		for(new i = 30; i < 34; i++) {
			if(AC_PlayerHasWeapon(playerid, i) && AC_PlayerHasAmmo(playerid, i) && i != 32 && i != gunid && GetPVarInt(playerid, "pBeanBag") == 0) {
				found = 0;
				break;
			}
		}
	}
	else if(gunid >= 28 && gunid <= 29 || gunid == 32) {
		for(new i = 30; i < 34; i++) {
			if(AC_PlayerHasWeapon(playerid, i) && AC_PlayerHasAmmo(playerid, i) && i != 32 && i != gunid) {
				found = 0;
				break;
			}
		}
	}
	else if(gunid >= 30 && gunid <= 31) {
		for(new i = 30; i < 34; i++) {
			if(AC_PlayerHasWeapon(playerid, i) && AC_PlayerHasAmmo(playerid, i) && i != 32 && i != gunid) {
				found = 0;
				break;
			}
		}
	}
	else if(gunid >= 33 && gunid <= 34) {
		for(new i = 30; i < 34; i++) {
			if(AC_PlayerHasWeapon(playerid, i) && AC_PlayerHasAmmo(playerid, i) && i != 32 && i != gunid) {
				found = 0;
				break;
			}
		}
	}
	return found;
}

BWH_GetPlayerWeaponData(playerid, slot, &weapon, &ammo)
{
	if(!IsPlayerConnected(playerid) || (slot < 0 || slot > 12))
	{
		return 0;
	}

	GetPlayerWeaponData(playerid, slot, weapon, ammo);

	if(weapon != 46 && weapon != 40)
	{
		weapon = Silah_Bilgi[playerid][sSilahID][slot];
	}

	if((weapon > 21 && weapon < 35) || weapon == 38)
	{
		ammo = Silah_Bilgi[playerid][sMermi][slot];
	}
	return 1;
}

BWH_GetPlayerAmmo(playerid)
{
	if(!IsPlayerConnected(playerid))
	{
		return 0;
	}

	new BWH_weapon = GetPlayerWeapon(playerid);

	if(BWH_weapon) // GetPlayerWeapon will return 0 if the weapon is not given by the server or if it's fists.
	{
		if((BWH_weapon > 21 && BWH_weapon < 35) || BWH_weapon == 38)
		{
			return Silah_Bilgi[playerid][sMermi][SilahSlotuBul[BWH_weapon]];
		}
		else
		{
			return GetPlayerAmmo(playerid);
		}
	}
	return 0;
}

stock AracSilahLimiti(model)
{
	new limit;
	switch(model)
	{
		case 424, 473, 531: limit = 1;
		case 513, 487, 519: limit = 3;
		case 602, 429, 402, 415, 480, 587, 603, 506, 451, 477, 541, 411, 555, 500: limit = 4;
		case 422, 579, 400, 470, 600, 489, 505, 478, 554, 543, 560, 561, 507, 585, 466, 445, 492, 546, 516, 551, 467, 404, 426, 405, 458, 580, 550, 540, 421, 529, 438, 420: limit = 10;
		case 418: limit = 12;
		case 508, 483: limit = 15;
		case 459, 482, 413, 440, 499, 498, 456, 414, 453, 454, 484: limit = 18;
		default: limit = 6;
	}
	if(Arac_Model(model) == VEHICLE_TYPE_BIKE) return 0;
	if(Arac_Model(model) == VEHICLE_TYPE_MBIKE) return 1;
	return limit;
}

stock Arac_Sahip(playerid, vehicleid, bool:sahip)
{
	if(!IsValidVehicle(vehicleid)) return 0;
	if(VehicleInfo[vehicleid][carOwnerID] == PlayerInfo[playerid][pID] || pTemp[playerid][pAdminDuty]) return 1;
	if(sahip == false) {
		if(PlayerInfo[playerid][pFaction] == VehicleInfo[vehicleid][carFaction] && VehicleInfo[vehicleid][carFaction] != -1) return 1;
		if(PlayerInfo[playerid][pCarKey] == vehicleid) return 1;
		if(VehicleInfo[vehicleid][carRent] >= 0 && VehicleInfo[vehicleid][carRent] == PlayerInfo[playerid][pID]) return 1;
	}
	return 0;
}

stock Arac_Yakin(playerid, Float:radius = 2.0)
{
	new Float:fX, Float:fY, Float:fZ;
	foreach(new i : Vehicle) if(GetVehicleVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
		GetVehiclePos(i, fX, fY, fZ);
		if(!IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ)) continue;
		return i;
	}
	return -1;
}

stock Arac_Model(vehiclemodel)
{
	if(!(0x18F > vehiclemodel < 0x264)) {
		switch(vehiclemodel) {
			case 460,476,511,512,513,519,520,553,577,592,593: return VEHICLE_TYPE_PLANE;
			case 417,425,447,469,487,488,497,548,563: return VEHICLE_TYPE_HELI;
			case 481, 509, 510: return VEHICLE_TYPE_BIKE;
			case 448,461,462,463,468,471,521,522,523,581,586: return VEHICLE_TYPE_MBIKE;
			case 430,446,452,453,454,472,473,484,493,495: return VEHICLE_TYPE_BOAT;
			case 435,450,569,570,584,590,591,606,607,608,610,611: return VEHICLE_TYPE_TRAILER;
			default: return VEHICLE_TYPE_VEHICLE;
		}
	}
	return 0;
}

PlayerAME(playerid, message[])
{
    new string[256];

    format(string,sizeof(string),"> %s %s", GetNameWithMask(playerid), message);
    SendClientMessageEx(playerid, 0xD0AEEBFF,string);

    SetPlayerChatBubble(playerid, string, 0xD0AEEBFF, 15.0, 10000);

    return 1;
}

PlayerAME2(playerid, message[])
{
    new string[256];

    format(string,sizeof(string),"> %s %s", GetNameWithMask(playerid), message);

    SetPlayerChatBubble(playerid, string, 0xD0AEEBFF, 15.0, 10000);

    return 1;
}

PlayerME(playerid, message[])
{
    pc_cmd_me(playerid, message);
    return 1;
}

SilahSlotBul(weaponid)
{
	new slot = 0;
	switch(weaponid)
	{
		case 2..9: slot = 1;
		case 22..24: slot = 2;
		case 25..27: slot = 3;
		case 28..29: slot = 4;
		case 30..31: slot = 5;
		case 32: slot = 4;
		case 33..34: slot = 6;
	}
	return slot;
}

GetWeaponObjectSlot(weaponid)
{
	new objectslot;

	switch (weaponid)
	{
		case 25..27: objectslot = 6;
		case 28, 29, 32: objectslot = 7;
		case 30, 31: objectslot = 8;
		case 33, 34: objectslot = 9;
	}
	return objectslot;
}

GetWeaponModelEx(weaponid) //Will only return the model of wearable weapons (22-38)
{
	new model;

	switch(weaponid)
	{
		case 22..29: model = 324 + weaponid;
		case 30: model = 355;
		case 31: model = 356;
		case 32: model = 372;
		case 33..38: model = 324 + weaponid;
	}
	return model;
}

forward OnLoadWeapons(playerid);
public OnLoadWeapons(playerid)
{
	new rows, weaponid, index;
	cache_get_row_count(rows);

	if(!rows) return 1;

	for (new i; i < rows; i++)
	{
		cache_get_value_name_int(i, "WeaponID", weaponid);
		index = weaponid - 22;

		cache_get_value_name_float(i, "PosX", WeaponSettings[playerid][index][Position][0]);
		cache_get_value_name_float(i, "PosY", WeaponSettings[playerid][index][Position][1]);
		cache_get_value_name_float(i, "PosZ", WeaponSettings[playerid][index][Position][2]);

		cache_get_value_name_float(i, "RotX", WeaponSettings[playerid][index][Position][3]);
		cache_get_value_name_float(i, "RotY", WeaponSettings[playerid][index][Position][4]);
		cache_get_value_name_float(i, "RotZ", WeaponSettings[playerid][index][Position][5]);

		cache_get_value_name_int(i, "Bone", WeaponSettings[playerid][index][Bone]);
		cache_get_value_name_int(i, "Hidden", WeaponSettings[playerid][index][Hidden]);
		cache_get_value_name_int(i, "duzenlendi", WeaponSettings[playerid][index][duzenlendi]);
	}
	return 1;
}

IsWeaponWearable(weaponid) return (weaponid >= 22 && weaponid <= 38);
IsWeaponHideable(weaponid) return (weaponid >= 22 && weaponid <= 24 || weaponid == 28 || weaponid == 32);

stock vericek_int(row, const field_name[])
{
	static str;
	cache_get_value_name_int(row, field_name, str);
	return str;
}

stock vericek_bool(row, const field_name[])
{
	static bool:test, bool:test2;
	cache_get_value_name_bool(row, field_name, test);
	switch(test) {
		case 1: test2 = true;
		default: test2 = false;
	}
	return test2;
}

stock vericek_varchar(row, const field_name[])
{
	static bilgi[1024];
	cache_get_value_name(row, field_name, bilgi);
	return bilgi;
}

SilahKontrolEt(playerid, targetid, type)
{
	if(PlayerInfo[playerid][pAdmin] || PlayerInfo[playerid][pOnDuty])
	{
		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d'", PlayerInfo[targetid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);

		if(!rows)
		{
			SendErrorMessage(playerid, "%s adlý karaktere kayýtlý ateþli silah bulunamadý. (%s)", GetNameEx(targetid), GetFullDate());
		}
		else
		{
			if(type == 0)
				SendClientMessageEx(playerid, COLOR_GREEN, "__________________________[%s (%s) | %s]__________________________", GetNameEx(targetid), PlayerInfo[targetid][pAccname], GetFullDate());

			new id, weaponid, ammo, status, house, vehicle, biz, olusumid, idstr[6], statusstr[24], omur;

			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "id", id);
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);
				cache_get_value_int(j, "status", status);
				cache_get_value_int(j, "house", house);
				cache_get_value_int(j, "vehicle", vehicle);
				cache_get_value_int(j, "biz", biz);
				cache_get_value_int(j, "faction_id", olusumid);
				cache_get_value_int(j, "omur", omur);
				format(idstr, 6, "%d", id);

				format(idstr, 6, "0%03d", id);

				switch(status)
				{
					case 0: {
						if(type == 0) format(statusstr, 24, "Üzerinizde");
						else format(statusstr, 24, "Üzerinde");
					}
					case 1: format(statusstr, 24, "Evde (%d)", house);
					case 2: format(statusstr, 24, "Araçta (%d)", vehicle);
					case 3: format(statusstr, 24, "Ýþletmede (%d)", biz);
					case 4: format(statusstr, 24, "Polis Zimmeti");
					case 5: format(statusstr, 24, "Yönetici Müdahalesi");
					case 6: format(statusstr, 24, "Geri Ödeme Yapýldý");
					case 7: format(statusstr, 24, "Oluþum kasasý (%d)", olusumid);
					case 8: format(statusstr, 24, "Vergili Evde Silindi (%d)", house);
					case 9: format(statusstr, 24, "Vergili Araçta Silindi (%d)", vehicle);
					case 10: format(statusstr, 24, "Bozuldu");
				}

				if(type == 1 && status != 0)continue;
				SendServerMessage(playerid, "Slot[%d] - ID[%s] - Silah[%s] - Mermi[%d] - Ömür[%d] - Durum[%s]", j+1, idstr, GetWeaponNameEx(weaponid), ammo, omur, statusstr);
			}
		}
		cache_delete(veri);
	}
	return 1;
}



SilahlariKaydet(playerid)
{
	if(!PlayerInfo[playerid][pOnDuty] && PlayerInfo[playerid][pLevel] >= 3 && PlayerInfo[playerid][pSilahSistemi])
	{
		new weapons[12], ammo[12];

		for(new a; a < 12; a++)
		{
			new query[250];
			BWH_GetPlayerWeaponData(playerid, a, weapons[a], ammo[a]);

			if(!weapons[a] || !ammo[a])continue;
			if(SilahSlotBul(weapons[a]) == 0)continue;

			if(AC_PlayerHasWeapon(playerid, weapons[a]) <= 0)
			{
				mysql_format(dbHandle, query, sizeof(query), "UPDATE weapons SET ammo = '%d' WHERE owner = '%d' AND weaponid = '%d' AND status = '0'", ammo[a], PlayerInfo[playerid][pID], weapons[a]);
				mysql_tquery(dbHandle, query);
			}
			else
			{
				mysql_format(dbHandle, query, sizeof(query), "UPDATE weapons SET ammo = '%d' WHERE owner = '%d' AND weaponid = '%d' AND status = '0'", ammo[a], PlayerInfo[playerid][pID], weapons[a]);
				mysql_tquery(dbHandle, query);
			}
		}
	}
	return 1;
}

SilahElkoyFonksiyon(playerid, targetid, type)
{
    if(type == 1)
    {
	    if(IsPlayerConnected(targetid) && pTemp[targetid][pLogged] && !PlayerInfo[targetid][pOnDuty])
	    {
			if(!PlayerInfo[playerid][pOnDuty])
		        return SendErrorMessage(playerid, "Bunu yapamazsýnýz.");

	        if(!PlayerNearPlayer(3.0, playerid, targetid))
	            return SendErrorMessage(playerid, "Belirtilen oyuncuya yakýn deðilsiniz.");

	        mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '4' WHERE owner = '%d' and status = '0'", PlayerInfo[targetid][pID]);
	        mysql_query(dbHandle, queryx, false);

	        AC_ResetPlayerWeapons(targetid);

	        SendServerMessage(targetid, "%s adlý polis memuru silahlarýna el koydu. (%s)", GetNameEx(playerid), GetFullDate());

	        mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e', NOW())", -1, PlayerInfo[playerid][pID], PlayerInfo[targetid][pID], "silahlara el koyuldu");
	        mysql_tquery(dbHandle, queryx);
	        SendAdmMessage("AdmCmd: %s adlý polis %s kiþisinin tüm silahlarýný el koydu.", GetNameEx(playerid), GetNameEx(targetid));
	        Log_Kaydet("resmibirlikLog.txt", "[/ustundenal silah] %s adli polis, %s adli oyuncunun tum silahlarina el koydu. [Tarih: %s]", GetNameEx(playerid), GetNameEx(targetid), GetFullDate());
	    }
	    else SendErrorMessage(playerid, "Bu iþlemi yapamazsýn.");
	}
	else if(type == 2)
	{
	        mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '5' WHERE owner = '%d' and status = '0'", PlayerInfo[targetid][pID]);
	        mysql_query(dbHandle, queryx);

	        AC_ResetPlayerWeapons(targetid);

	        SendServerMessage(targetid, "%s adlý yetkili, üzerindeki tüm silahlara el koydu. (%s)", PlayerInfo[playerid][pAccname], GetFullDate());
	        if(!pTemp[playerid][pAdminDuty]) SendServerMessage(playerid, "%s adlý kiþinin üzerindeki tüm silahlara el koydun.", GetNameEx(targetid));
	        SendAdmMessage("AdmCmd: %s, %s adlý kullanýcýnýn üzerindeki silahlarýna el koydu.", PlayerInfo[playerid][pAccname], GetNameEx(targetid));
	        Log_Kaydet("admin/silah.txt", "[%s] %s, %s (%d) adli oyuncunun uzerindeki silahlarina el koydu.", GetFullDate(), PlayerInfo[playerid][pAccname], GetNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else SendClientMessageEx(playerid, -1, "Bu komutta bir hata oluþtu, hata kodu SEF#3. Bu hata kodunu geliþtiricilere bildirin.");
    return 1;
}

forward SilahlariYukle(playerid);
public SilahlariYukle(playerid)
{
	static rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	if(!rows)return 1;

	new id, weaponid, ammo, status, house, vehicle, biz, lisans, omur, query[256];

	for(new j; j < rows; j++)
	{
		cache_get_value_int(j, "id", id);
		cache_get_value_int(j, "weaponid", weaponid);
		cache_get_value_int(j, "ammo", ammo);
		cache_get_value_int(j, "status", status);
		cache_get_value_int(j, "house", house);
		cache_get_value_int(j, "vehicle", vehicle);
		cache_get_value_int(j, "biz", biz);
		cache_get_value_int(j, "lisans", lisans);
		cache_get_value_int(j, "omur", omur);

		if(biz == -1 && vehicle == -1 && house == -1 && ammo > 0 && status == 0 && omur > 0)
		{
			if(PlayerInfo[playerid][pSilahSistemi] && AC_PlayerHasWeapon(playerid, weaponid))
			{
				SendServerMessage(playerid, "Üzerinizde ayný tip silah tespit edildi, %d nolu silah yönetici müdahalesi moduna girdi.", id);

				SendServerMessage(playerid, "Silaha iliþkin veriler: %s (SQLID: %d / Mermi: %d / Ruhsat: %s)", GetWeaponNameEx(weaponid), id, ammo, (lisans == 1) ? "Mevcut" : "Mevcut deðil");

				SendServerMessage(playerid, "Bu durumu lütfen Ticket > Bug Bildirimleri kanalýna /silah liste görüntüsüyle beraber gönderin.");

				mysql_format(dbHandle, query, sizeof(query), "UPDATE weapons SET status = '5' WHERE id = '%d' and owner = '%d' and status = '0'", id, PlayerInfo[playerid][pID]);
				mysql_query(dbHandle, query);

				//AC_GivePlayerWeapon(playerid, weaponid, ammo);
			}
			else
			{
				if(weaponid == 24 && ammo > 70 && lisans) ammo = 70;
				if(weaponid == 24 && ammo > 50 && !lisans) ammo = 50;

				AC_GivePlayerWeapon(playerid, weaponid, ammo);
				PlayerInfo[playerid][pSilahSistemi] = 1;
			}
		}
	}
	return 1;
}

GetWeaponSlot(weaponid)
{
    new slot;

    switch(weaponid)
    {
        case 0, 1: slot = 0;
        case 2 .. 9: slot = 1;
        case 10 .. 15: slot = 10;
        case 16 .. 18, 39: slot = 8;
        case 22 .. 24: slot =2;
        case 25 .. 27: slot = 3;
        case 28, 29, 32: slot = 4;
        case 30, 31: slot = 5;
        case 33, 34: slot = 6;
        case 35 .. 38: slot = 7;
        case 40: slot = 12;
        case 41 .. 43: slot = 9;
        case 44 .. 46: slot = 11;
   }

    return slot;
}
forward OnPlayerGetWeapon(playerid, slot, ammo);
My_GivePlayerWeapon(playerid, weaponid, ammo)
{
	new g_slot = GetWeaponSlot(weaponid),   strname[32];

	format(strname, sizeof(strname), "weapon%d", g_slot); SetPVarInt(playerid, strname, weaponid);
	format(strname, sizeof(strname), "weaponsecure%d", g_slot); SetPVarInt(playerid, strname, 5);
	format(strname, sizeof(strname), "ammo%d", g_slot);
	new tmp_ammo = GetPVarInt(playerid, strname);

	SetPVarInt(playerid, strname, tmp_ammo+ammo);
	CUSTOM_GivePlayerWeapon(playerid, weaponid, ammo);
	CallRemoteFunction("OnPlayerGetWeapon", "iii", playerid, g_slot, tmp_ammo+ammo);
}

My_ResetPlayerWeapons(playerid)
{
	new strname[32];

	for(new j; j < 12; j++)
	{
		format(strname, sizeof(strname), "weapon%d", j); SetPVarInt(playerid, strname, 0);
		format(strname, sizeof(strname), "weaponsecure%d", j); SetPVarInt(playerid, strname, 0);
		format(strname, sizeof(strname), "ammo%d", j); SetPVarInt(playerid, strname, 0);
	}

	CUSTOM_ResetPlayerWeapons(playerid);
}

stock DO_Emote(Float:radius, playerid, message[], exceptPlayer = false)
{
	new Float:fX, Float:fY, Float:fZ, Float:distance, VW, Int;
	GetPlayerPos(playerid, fX, fY, fZ);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);
	foreach(new i : Player)
	{
		if(GetPlayerInterior(i) != Int || GetPlayerVirtualWorld(i) != VW) continue;
		if(exceptPlayer && i == playerid) continue;

		distance = GetPlayerDistanceFromPoint(i, fX, fY, fZ);

		if (!(PlayerInfo[i][pSettings] & togDoSetting))
		{
			if(distance < radius/16) SendClientMessageEx(i, 0x79BFA3FF, message);
			else if(distance < radius/8) SendClientMessageEx(i, 0x79BFA3FF, message);
			else if(distance < radius/4) SendClientMessageEx(i, 0x79BFA3FF, message);
			else if(distance < radius/2) SendClientMessageEx(i, 0x79BFA3FF, message);
			else if(distance < radius) SendClientMessageEx(i, 0x79BFA3FF, message);
		}
		else
		{
			if(distance < radius/16) SendClientMessageEx(i, 0xC2A2DAFF, message);
			else if(distance < radius/8) SendClientMessageEx(i, 0xC2A2DAFF, message);
			else if(distance < radius/4) SendClientMessageEx(i, 0xC2A2DAFF, message);
			else if(distance < radius/2) SendClientMessageEx(i, 0xC2A2DAFF, message);
			else if(distance < radius) SendClientMessageEx(i, 0xC2A2DAFF, message);
		}
	}
	return 1;
}

stock DestroyDynamicObjectEx(&objectid)
{
	// for(new j; j < 12; j++) SetDynamicObjectMaterial(objectid, j, 19341, "invalid", "invalid");
	if(IsValidDynamicObject(objectid)) DestroyDynamicObject(objectid);
	objectid = -1;
	return 1;
}

stock DestroyDynamic3DTextLabelEx(&Text3D:labelid)
{
	if(IsValidDynamic3DTextLabel(labelid)) DestroyDynamic3DTextLabel(labelid);
	labelid = Text3D:INVALID_3DTEXT_ID;
	return 1;
}

MulStringHandler(string[]) // text cut off for drugs effect
{
    new mulstr[160];
	strcat(mulstr, string);
	for(new charSet = 0; charSet < strlen(string); charSet += random(5) + 2) {
	   if (mulstr[charSet] != ' ') {
	      strins(mulstr, ".. ", charSet);
	   }
	}
	return mulstr;
}

stock GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
}


stock Float:DistanceCameraTargetToLocation(Float:fCameraX, Float:fCameraY, Float:fCameraZ, Float:fObjectX, Float:fObjectY, Float:fObjectZ, Float:fVectorX, Float:fVectorY, Float:fVectorZ)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ,
		Float:fDistance;

	fDistance = GetDistance(fCameraX, fCameraY, fCameraZ, fObjectX, fObjectY, fObjectZ);

	fX = fVectorX * fDistance + fCameraX;
	fY = fVectorY * fDistance + fCameraY;
	fZ = fVectorZ * fDistance + fCameraZ;

	return floatsqroot((fX - fObjectX) * (fX - fObjectX) + (fY - fObjectY) * (fY - fObjectY) + (fZ - fObjectZ) * (fZ - fObjectZ));
}

stock Oyuncu_Isim(playerid)
{
    new name[MAX_PLAYER_NAME+1];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
    return name;
}

GetCharacterName(databaseID)
{
	new query[90];
	new tmpName[MAX_PLAYER_NAME] = "Sahipsiz";
	if(databaseID)
	{
		mysql_format(dbHandle, query, sizeof(query), "SELECT name FROM users WHERE id = '%d'", databaseID);
		mysql_query(dbHandle, query);

		cache_get_value(0, "name", tmpName, MAX_PLAYER_NAME);
	}

	return tmpName;
}

CarJackDriver(vehicleid) {
	foreach (new i : Player) {
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
	}
	PutPlayerInVehicle(INVALID_PLAYER_ID, vehicleid, 0);
	return INVALID_PLAYER_ID;
}

forward CarJackFREEZE(playerid); public CarJackFREEZE(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

HoldingKey(playerid, key)
{
	new keys, ud, lr;

	GetPlayerKeys(playerid, keys, ud, lr);
	return (keys & key == key) ? (1):(0);
}

forward KillTimerSprung(playerid);
forward FunktionInSprung(playerid);

forward OnPlayerCBug(playerid);
public OnPlayerCBug(playerid)
{
	new mesaj[40];
	format(mesaj, sizeof(mesaj), "~r~C-Bug ~w~yapamazsiniz");
	GameTextForPlayer(playerid, mesaj, 1000, 3);
	SetPlayerArmedWeapon(playerid, 0);
    ClearAnimations(playerid);
    SetPlayerArmedWeapon(playerid, 0);
    AMSG(COLOR_LIGHTRED, "AdmLog: %s(%d) isimli oyuncu C-Bug yaparak sýkmaya çalýþýyor.", GetNameEx(playerid), playerid);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("CbugUnfreeze", 350, false, "i", playerid);
	return 1;
}

forward CbugUnfreeze(playerid);
public CbugUnfreeze(playerid)
{
    PlayerInfo[playerid][pOnCBug] = false;
    TogglePlayerControllable(playerid, true);
	return 1;
}

public KillTimerSprung(playerid)
{
	InSprung[playerid] = 0;
	return 1;
}

public FunktionInSprung(playerid)
{
	new animlib[32];
	new animname[32];
	new Float:vx,Float:vy,Float:vz;
	GetPlayerVelocity(playerid,vx,vy,vz);
	if(vz < -0.5)
	{
	    KillTimer(TimerIDSprung);
	    SetTimerEx("KillTimerSprung",1000,false,"i",playerid);
	    return 1;
	}
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"JUMP_LAND") || !strcmp(animname,"FALL_LAND"))
	{
		KillTimer(TimerIDSprung);
		ClearAnimations(playerid,1);
		ApplyAnimation(playerid,"ped","FALL_COLLAPSE",4.1,0,1,1,0,0,1);
		SetTimerEx("KillTimerSprung",800,false,"i",playerid);
	}
	return 1;
}

Keys_OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	 // C-Bug Engeli
	// if(newkeys & KEY_SPRINT && newkeys & KEY_JUMP && GetPlayerState(playerid) != 2) ClearAnimations(playerid), ApplyAnimation(playerid,"ped","FALL_COLLAPSE",4.1,0,1,1,0,0,1);

	if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && (newkeys & KEY_WALK))
	{
	    if (IsPlayerInRangeOfPoint(playerid, 5.5, 393.8469,-2053.4126,7.8359))
	    {
	        if (PlayerInfo[playerid][pJob] != 5) return SendSyntaxMessage(playerid, "Balýkçý mesleðine girmeden menüye eriþemezsin.");
			Dialog_Show(playerid, BalikMenusu, DIALOG_STYLE_LIST, "{FF9933}Balýkçý Menüsü", "{AFAFAF}» {FFFFFF}Balýk Sat\n{AFAFAF}» {FFFFFF}Yem Satýn Al", "{FFFFFF}Seç", "{FFFFFF}Kapat");
	    }
	}

	if(StaffInfo[playerid][sSpec])
	{
		new currentSpecID = StaffInfo[playerid][sSpecID];

		switch(newkeys)
		{
			case KEY_YES:
			{
				if(StaffInfo[playerid][sSpecType] == SPECTATE_TYPE_PLAYER)
				{
					for(new pid = currentSpecID + 1; pid < MAX_PLAYERS; pid++)
					{
						if(!IsPlayerLoggedIn(pid) || pid == playerid || PlayerInfo[pid][pAdmin] != 0)
							continue;

						Spectate(playerid, SPECTATE_TYPE_PLAYER, pid);
						return -1;
					}

					SendErrorMessage(playerid, "Daha fazla ileri gidecek karakter yok.");
					return -1;
				}

				else if(StaffInfo[playerid][sSpecType] == SPECTATE_TYPE_VEHICLE)
				{
					for(new vid = currentSpecID + 1; vid < MAX_VEHICLES; vid++)
					{
						if(!IsValidVehicle(vid))
							continue;

						Spectate(playerid, SPECTATE_TYPE_VEHICLE, vid);
						return -1;
					}

					SendErrorMessage(playerid, "Daha fazla ileri gidecek araç yok.");
					return -1;
				}
			}

			case KEY_NO:
			{
				if(StaffInfo[playerid][sSpecType] == SPECTATE_TYPE_PLAYER)
				{
					for(new pid = currentSpecID - 1; pid >= 0; pid--)
					{
						if(!IsPlayerLoggedIn(pid) || pid == playerid || PlayerInfo[pid][pAdmin] != 0)
							continue;

						Spectate(playerid, SPECTATE_TYPE_PLAYER, pid);
						return -1;
					}

					SendErrorMessage(playerid, "Daha fazla geri gidecek karakter yok.");
					return -1;
				}

				else if(StaffInfo[playerid][sSpecType] == SPECTATE_TYPE_VEHICLE)
				{
					for(new vid = currentSpecID - 1; vid >= 0; vid--)
					{
						if(!IsValidVehicle(vid))
							continue;

						Spectate(playerid, SPECTATE_TYPE_VEHICLE, vid);
						return -1;
					}

					SendErrorMessage(playerid, "Daha fazla geri gidecek araç yok.");
					return -1;
				}
			}

			case KEY_SPRINT:
			{
				Spectate(playerid, StaffInfo[playerid][sSpecType], currentSpecID);
			}
		}
	}



    if(!pCBugging[playerid] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(PRESSED(KEY_FIRE))
		{
			switch(GetPlayerWeapon(playerid))
			{
				case WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SNIPER:
				{
					ptsLastFiredWeapon[playerid] = gettime();
				}
			}
		}
		else if(PRESSED(KEY_CROUCH))
		{
			if((gettime() - ptsLastFiredWeapon[playerid]) < 1)
			{
				OnPlayerCBug(playerid);
                PlayerInfo[playerid][pOnCBug] = true;
			}
		}
	}

	if (PlayerInfo[playerid][pWalk] > 0 && ((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
			if(PlayerInfo[playerid][pInjured] == 0 && !IsPlayerInAnyVehicle(playerid)) YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
	}

	if (VehicleInfo[JackingVehicle[playerid]][ePhysicalAttack] && RELEASED(KEY_FIRE) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !VehicleInfo[JackingVehicle[playerid]][vCooldown])
    {
		new weaponid = GetPlayerWeapon(playerid);
		new vehicleid = JackingVehicle[playerid];
		if (IsValidVehicle(vehicleid))
		{
			new Float:ccX, Float:ccY, Float:ccZ;
			new Float:dX, Float:dY, Float:dZ, Float: playerHealth;

			AntiCheatGetHealth(playerid, playerHealth);
			GetVehicleModelInfo(VehicleInfo[vehicleid][carModel], VEHICLE_MODEL_INFO_FRONTSEAT, ccX, ccY, ccZ);
			GetVehicleRelativePos(vehicleid, dX, dY, dZ, -ccX - 0.5, ccY, ccZ);

			if (GetVehicleDriver(vehicleid) != -1 || VehicleInfo[vehicleid][eDoorHealth] <= 0.0 || !IsPlayerInFrontVDoor(playerid, vehicleid)) return 1;

		    switch(VehicleInfo[vehicleid][eDoorEffect])
		    {
		        case LESS_DAMAGE_FIST:
		        {
		            if (weaponid == 0)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 1 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 1;
		                if (playerHealth > 15.0)
		                {
		                    PlayerInfo[playerid][pHealth] = playerHealth - 10.0;
		                }
		            }
		            if (weaponid >= 1 && weaponid <= 9)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 10 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 10;
		            }
		          	if (weaponid >= 22 && weaponid <= 24)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 15 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 15;
              		}
		          	if (weaponid >= 25 && weaponid <= 34)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 30 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 30;
		            }
		        }
		        case BLOCK_FIST:
		        {
					if (weaponid == 0) if (playerHealth > 15.0) PlayerInfo[playerid][pHealth] = playerHealth - 5.0;

		            if (weaponid >= 1 && weaponid <= 9)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 10 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 10;
		            }
		          	if (weaponid >= 22 && weaponid <= 24)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 15 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 15;
		            }
					if (weaponid >= 25 && weaponid <= 34)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 30 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 30;
		            }
		        }
		        case LESS_DAMAGE_MELEE:
		        {
					if (weaponid == 0) if (playerHealth > 15.0) PlayerInfo[playerid][pHealth] = playerHealth - 5.0;
		          	if (weaponid >= 22 && weaponid <= 24)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 5 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 5;
		            }
		          	if (weaponid >= 25 && weaponid <= 34)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 20 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 20;
		            }
		        }
		        case BLOCK_PHYSICAL:
		        {
					if (weaponid == 0) if (playerHealth > 15.0) PlayerInfo[playerid][pHealth] = playerHealth - 5.0;
		          	if (weaponid >= 25 && weaponid <= 34)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 30 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 30;
		            }
		        }
		        default:
		        {
		            if (weaponid == 0)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 2 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 2;
		                if (playerHealth > 15.0)
		                {
		                   PlayerInfo[playerid][pHealth] = playerHealth - 5.0;
		                }
		            }
		            if (weaponid >= 1 && weaponid <= 9)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 10 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 10;
		            }
		          	if (weaponid >= 22 && weaponid <= 24)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 15 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 15;
		            }
		          	if (weaponid >= 25 && weaponid <= 34)
		            {
		                VehicleInfo[vehicleid][eDoorHealth] = (VehicleInfo[vehicleid][eDoorHealth] - 30 <= 0) ? 0 : VehicleInfo[vehicleid][eDoorHealth] - 30;
		            }
				}
			}

			new engine, lights, alarm, doors, bonnet, boot, objective, panels, tires;
			GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
			switch(VehicleInfo[vehicleid][eDoorHealth])
			{

				case 0: UpdateVehicleDamageStatus(vehicleid, panels, encode_doors(0, 0, 4, 0, 0, 0), lights, tires);
				case 1 .. 20: UpdateVehicleDamageStatus(vehicleid, panels, encode_doors(0, 0, 2, 0, 0, 0), lights, tires);
			}

			new doorhealth[12];
			format(doorhealth, 12, "%d%%", VehicleInfo[vehicleid][eDoorHealth]);
			UpdateDynamic3DTextLabelText(VehicleInfo[vehicleid][eVehicleLabel], COLOR_WHITE, doorhealth);

			VehicleInfo[vehicleid][vCooldown] = true;
			SetTimerEx("OnCoolDown", 1000, false, "i", vehicleid);

			AlarmOn(vehicleid);

			if (VehicleInfo[vehicleid][eDoorHealth] <= 0)
			{
			    DestroyDynamic3DTextLabel(VehicleInfo[vehicleid][eVehicleLabel]);
			    VehicleInfo[vehicleid][vCooldown] = false;
			    VehicleInfo[vehicleid][ePhysicalAttack] = false;
			    VehicleInfo[vehicleid][eDoorHealth] = 0;
				JackingVehicle[playerid] = 0;

				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, false, bonnet, boot, objective);

				ToggleVehicleLock(JackingVehicle[playerid], false);
				PlaySound(playerid, 1145);
				InfoMSG(playerid, "ARACIN KAPISINI KIRDIN!", 3);
				AlarmOn(JackingVehicle[playerid]);
			}
		}
    }

	if (HOLDING(KEY_FIRE) && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) && GetPVarInt(playerid, #use_food) && GetPVarInt(playerid, #time_food) < gettime())
	{
	    SetPVarInt(playerid, #time_food, gettime()+2);
		SetPVarInt(playerid, #use_food, GetPVarInt(playerid, #use_food)-1);

		if (GetPVarInt(playerid, #use_food) == 0)
		{
		    DeletePVar(playerid, #use_food);
			RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		}

		else
		{
			OnPlayAnim(playerid, "FOOD", "EAT_Burger", 4.1,0,1,1,0,0);
		}
		return 1;
	}

    if (HOLDING(KEY_SECONDARY_ATTACK) && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) && GetPVarInt(playerid, #use_food))
	{
	    DeletePVar(playerid, #use_food);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		return 1;
	}

	if (OnAnim{playerid} && HOLDING(KEY_SPRINT) && GetPlayerAnimationIndex(playerid) && !PlayerInfo[playerid][pInjured])
	{
		StopPlayerAnims(playerid);
	}

    if (HOLDING(KEY_SECONDARY_ATTACK) && GetPVarInt(playerid, #selfie))
	{
        pc_cmd_selfie(playerid, "");
	}

    if (((PRESSING(newkeys, KEY_SPRINT) || PRESSING(newkeys, KEY_JUMP)) || (HOLDING(KEY_SPRINT) || HOLDING(KEY_JUMP))) && pTemp[playerid][pInjuredLegTime] && !IsPlayerInAnyVehicle(playerid))
	{
		TogglePlayerControllable(playerid,0);
		StopPlayerAnims(playerid);
		TogglePlayerControllable(playerid,1);

		if (PRESSED(KEY_SPRINT) || HOLDING(KEY_SPRINT))	ApplyAnimation(playerid, "PED", "FALL_collapse", 4.1, 0, 1, 1, 0, 0);
		else if (PRESSED(KEY_JUMP)|| HOLDING(KEY_JUMP))	ApplyAnimation(playerid, "PED", "getup_front", 4.0, 0, 0, 0, 0, 0);
	}

	if (HOLDING(KEY_SECONDARY_ATTACK) && pTemp[playerid][p3DMenu] != -1)
	{
    	Destroy3DMenu(pTemp[playerid][p3DMenu]);
		pTemp[playerid][p3DMenu] = -1;

		SetTimerEx("ShowEditFurniture", 1000, false, "i", playerid);
		return 1;
	}

	if (PRESSED(KEY_CTRL_BACK))
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){
			if (pTemp[playerid][pCargoID] != 0)
			{
				if (GetNearBootVehicle(playerid) == 0) 	return pc_cmd_koli(playerid, "yerebirak");
				else 									return pc_cmd_koli(playerid, "yerlestir");
			}
			else if (IsPlayerNearCargo(playerid) != -1) 	return pc_cmd_koli(playerid, "yerdenal");

			if (ATM_Nearest(playerid) != -1) 		pc_cmd_atm(playerid, "");
			if (Payphone_Nearest(playerid) != -1) 	pc_cmd_ankesorlutelefon(playerid, "");
			if (GetNearestCorpse(playerid) != -1)	pc_cmd_ceset(playerid, "");
			if (BoomboxInfo[playerid][bUsed] != 0)	ShowBoomboxMenu(playerid);

			if (Trash_Nearest(playerid, 1.5) != -1 && PlayerInfo[playerid][pJob] == JOB_TRASHMASTER && pTemp[playerid][pJob])
				pc_cmd_copculuk(playerid, "");

			if (AntiCheatGetSpecialAction(playerid) == SPECIAL_ACTION_DUCK) {
				if (ItemDrop_Nearest(playerid) != -1) pc_cmd_yerdenal(playerid, "");
			}
		}
	}

	if (RELEASED(KEY_YES) && !IsPlayerInAnyVehicle(playerid)) {
		if (!(PlayerInfo[playerid][pSettings] & togEnter) && pTemp[playerid][p3DMenu] == -1 && PlayerInfo[playerid][pInjured] == 0)
		{
			pc_cmd_giris(playerid, "");
	    	pc_cmd_cikis(playerid, "");
		}
	    /*if (TruckCargo_Nearest(playerid, 1.5) != -1)
		{
			if (pTemp[playerid][pCargoID] == 0)
				pc_cmd_endustri(playerid, "");
			else pc_cmd_koli(playerid, "sat");
		}*/
		if (Job_Nearest(playerid) != -1) pc_cmd_isegir(playerid, "");
	}

	if (HOLDING(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
	{
	    pc_cmd_gateac(playerid, "");

		pc_cmd_giris(playerid, "");
	    pc_cmd_cikis(playerid, "");

		if (Toll_Nearest(playerid) != -1) 	pc_cmd_gise(playerid, "");
		if (AZC_Nearest(playerid) != -1)	pc_cmd_benzin(playerid, "");

	    return 1;
	}

	if (HOLDING(KEY_LOOK_BEHIND) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		pc_cmd_ahe(playerid, "");
		return 1;
	}

	if (HOLDING(KEY_CTRL_BACK) && !IsPlayerInAnyVehicle(playerid) && pTemp[playerid][p3DMenu] != -1)
	{
	    UpdateIntVar(playerid, "chose_texture", 1);

		if (GetPVarInt(playerid, "chose_texture") > 4) SetPVarInt(playerid, "chose_texture", 0);

		new mes[32];
		format(mes, sizeof(mes), "~y~Texture degistirildi: ~w~%i", GetPVarInt(playerid, "chose_texture")+1);
		InfoMSG(playerid, mes, 4);
		return 1;
	}

	/*if (PRESSED(KEY_CTRL_BACK))
	{

	}*/

	if (HOLDING(KEY_NO))
	{
		if (GetPlayerDeniedAction(playerid) != 0) return 1;
		if (GetNearVehicle(playerid, 3.0) != 0) pc_cmd_arac(playerid, "kilit");
		if (HasTrash[playerid]) Trash_ResetPlayer(playerid);
	}

	if (RELEASED(KEY_YES))
	{
		if (pTemp[playerid][pFactionInvite] > 0) return pc_cmd_birlikdavetkabul(playerid, "");
		if (GetPVarInt(playerid, #accept_time) > gettime()) return GetPlayerAcceptAction(playerid);
		if (pTemp[playerid][pServePlayer] != INVALID_PLAYER_ID) return false;


		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			pc_cmd_motor(playerid, "");
			return 1;
		}

        return 1;
	}

	if (pTemp[playerid][pFoodStand] != 0 && (PRESSED(KEY_JUMP) || PRESSED(KEY_FIRE) || PRESSED(KEY_CROUCH)))
	{

		OnPlayAnim(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		pTemp[playerid][pFoodStand] = 0;
		SetPlayerChatBubble(playerid, "elindeki yemeði çöpe atar.", COLOR_PURPLE, 20.0, 4000);
	}

	if (PRESSED(KEY_FIRE) && RepairService[playerid] != 0 && RepairOffer[playerid] != INVALID_PLAYER_ID && RepairToVehicle[playerid] != INVALID_VEHICLE_ID)
	{
		if (GetNearVehicle(playerid, 4.2, RepairToVehicle[playerid]) == 0)	ShowJobMessage(playerid, "~h~~p~ARACIN YAKININDA OLMALISIN.");
		else
		{
			RepairOffer[playerid] = INVALID_PLAYER_ID;
			RepairTime[playerid] = 15;
		}
	}
    return 1;
}

this::OneHourTimer()
{
	for(new i; i < MAX_BIZ; i++) Save_Business(i);
	for(new i; i < MAX_HOUSES; i++) Save_House(i);
	for(new i; i < MAX_VEHICLES; i++) Save_Car(i);
	for(new i; i < MAX_PLAYERS; i++) Save_User(i);
	for(new i; i < MAX_APART; i++) Save_Apart(i);

	printf("saatlik timer dondu");

	SaveServer();
	return 1;
}

this::OneMinuteTimer()
{
	//=============================================================================
	new tmp_hour, tmp_min;

	gettime(tmp_hour, tmp_min);

	if (tmp_hour != server_hour)
	{
    	server_hour = tmp_hour;
    	SetWorldTime(server_hour);

		for(new i = 0; i < MAX_BIZ; i++) {
			if (!BizInfo[i][bizID] || BizInfo[i][bizType] != BIZ_GAS_STATION) continue;
			if (!BizInfo[i][bizOwnerID] && BizInfo[i][bizProduct] > 10) BizInfo[i][bizProduct]--;
		}


		/*if(server_hour == 19 || server_hour == 20 || server_hour == 21 || server_hour == 22)
		{
			SCMALL(COLOR_WHITE, ">> Happy hour sistemi aktif. 22:00'a kadar geçerlidir.");
		}*/
	}
	//==========================================================================
	for(new i = 0; i < MAX_CHOPSHOP; i++)
	{
		if (!chopshop_data[i][chopshop_exist]) continue;

		if (chopshop_data[i][chopshop_timer] >= 60) 	GetRandomModel(i);
		else 										chopshop_data[i][chopshop_timer]++;
	}
    //==========================================================================
	for(new i; i != MAX_LAST_ADVERT; i++)
	{
		if (strlen(LastAdvertInfo[i][advertText]) < 3)	continue;

		if (gettime() - LastAdvertInfo[i][adverttime] > 3600)
		{
			LastAdvertInfo[i][advertText] = EOS;
			LastAdvertInfo[i][adverttime] = 0;
			LastAdvertInfo[i][advertnumber] = 0;
		}
	}
	//==========================================================================
	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i)) 					continue;

        PlayerInfo[i][pPayDayTime]++;
        if (PlayerInfo[i][pPayDayTime] >= 60) 	PayDay(i);

		SetPVarInt(i, #pDelay, 0);

		PlayerInfo[i][pMinutes]++;

		if(GetPlayerPing(i) < 300 && IsPlayerLoggedIn(i) && GetPlayerState(i) != PLAYER_STATE_SPECTATING && GetPlayerState(i) != PLAYER_STATE_WASTED && GetPlayerState(i) != PLAYER_STATE_SPAWNED) {
			GetPlayerPos(i, PlayerInfo[i][pPosX], PlayerInfo[i][pPosY], PlayerInfo[i][pPosZ]);
			GetPlayerFacingAngle(i, PlayerInfo[i][pPosA]);
		}

		if(PlayerInfo[i][pBagimlilikSeviye] > 0)
		{
			PlayerInfo[i][pKrizSure]--;
			if(PlayerInfo[i][pUTedaviSure] > 0)
			{
				PlayerInfo[i][pUTedaviSure]--;
				if(PlayerInfo[i][pUTedaviSure] == 0) SendClientMessageEx(i, COLOR_YELLOW, "[SMS] >> UMV: Uyuþturucu tedavinizdeki %d. seansýnýzýn vakti gelmiþ bulunmakta, sizi hastaneye bekliyoruz.", PlayerInfo[i][pUTedaviEXP] + 1);
			}

			if(PlayerInfo[i][pKrizSure] <= 0 && PlayerInfo[i][pKrizSure]%10 == 0)
			{
				SendClientMessage(i, COLOR_WHITE, "Gözlerin kanlanýyor, terliyor ve kötü hissediyorsun. Kaygýlarýnýn arttýðý ortada.");
				PlayerAME(i, "gözleri kýzarmýþ, terliyor.");
				SetPlayerDrunkLevel(i, 1500);
			}
		}
	}
	//==========================================================================
	for(new i = 0; i < MAX_CORPS; i++)
	{
		if (!CorpInfo[i][cUsed]) continue;

		if ((CorpInfo[i][cTime] - gettime()) > 60*30) 	RemoveCorpse(i);

		if ((CorpInfo[i][cTime] - gettime()) > 60*1 && CorpInfo[i][cVeh] > 0 && GetVehicleModel(CorpInfo[i][cVeh]) > 0)
		{
			new Float: x, Float: y, Float: z;
			GetBootPos(CorpInfo[i][cVeh], x, y, z);

			CorpInfo[i][cText] = CreateDynamic3DTextLabel("*** bagajdan ceset kokusu gelmektedir ***", 0xC2A2DAFF, x, y, z, 20.0, INVALID_PLAYER_ID, CorpInfo[i][cVeh]);
		}
	}
    //==========================================================================
    for(new i; i != MAX_FOOD_DROPS; i++)
	{
	    if (FoodDrop[i][foodDropped] == 0) continue;

		if (FoodDrop[i][foodTime]-- == 0)
		{
        	FoodDrop[i][foodModel] = 0;
        	FoodDrop[i][foodDropped] = 0;

        	if (IsValidDynamicObject(FoodDrop[i][foodObject])) DestroyDynamicObject(FoodDrop[i][foodObject]);
		}
	}

	//==========================================================================
	CheckBillBoard();
	TohumlariGuncelle();
	//==========================================================================
	return 1;
}

this::OneSecondTimer()
{
	PlayerTimer();
	OtherTimer();
	//MeterCheck();
	return 1;
}

forward TalkTimer(playerid);
public TalkTimer(playerid)
{
	return ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

Timer_OnGameModeInit()
{
	SetTimer("OneSecondTimer", 1000, true);
	SetTimer("OneMinuteTimer", 60000, true);
	SetTimer("OneHourTimer", 60000 * 10, true);
    return 1;
}

OtherTimer()
{
	/*
	if (time_truck-- == 0)
	{
	    time_truck = 3600;
	    CheckIndustries();
	}

    if (ship_depart <= gettime() && ship_docked == 1)
	{
	    new mes[128];
	    for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
	        if (TruckCargo[i][tOn] == 0 || TruckCargo[i][tType] != 2) continue;

            TruckCargo[i][tStorage] = 0;
            format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\nDurum: %i / %i\nÜcret: $%i / birim.", truckcargo_product[TruckCargo[i][tProductID]], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize], TruckCargo[i][tPrice]);
        	UpdateDynamic3DTextLabelText(TruckCargo[i][tLabel], 0xFFFFFFFF, mes);
        	Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TruckCargo[i][tLabel], E_STREAMER_INTERIOR_ID, 1);
        	Streamer_SetIntData(STREAMER_TYPE_PICKUP, TruckCargo[i][tPickup], E_STREAMER_INTERIOR_ID, 1);
	    }
		mysql_tquery(dbHandle, "UPDATE `truck_cargo` SET `storage`=0 WHERE `type`=2");

	    ship_docked = 2;
	    ship_depart = ship_next + 2400;

	    new Float: ox, Float: oy, Float: oz;

		for(new i; i != 11; i++)
	    {
	        if (i < 8)	Streamer_SetIntData(STREAMER_TYPE_OBJECT, obj_lamp[i], E_STREAMER_MODEL_ID, 19124);
	        if (i < 4)
	        {
	            GetDynamicObjectPos(obj_gate[i], ox, oy, oz);
	        	MoveDynamicObject(obj_gate[i], ox - 10.0, oy, oz, 1.5);
	        }

			GetDynamicObjectPos(obj_ship[i], ox, oy, oz);
	        MoveDynamicObject(obj_ship[i], ox + 600, oy, oz, 3.0);
		}
	}

	if (ship_next <= gettime() && ship_docked == 0)
	{
	    ship_docked = 3;
        ship_next = ship_depart + 340;

	    new Float: ox, Float: oy, Float: oz;

		for(new i; i != 11; i++)
	    {
			GetDynamicObjectPos(obj_ship[i], ox, oy, oz);
	        MoveDynamicObject(obj_ship[i], ox - 600, oy, oz, 3.0);
		}
	}*/

	for(new i = 0; i < MAX_CCTV; i++)
	{
		if (CCTVInfo[i][tvObjectOn])
		{
			if (CCTVInfo[i][tvSignal])
			{
				if (CCTVInfo[i][tvSignalTime] > 0)
				{
					CCTVInfo[i][tvSignalTime]--;
				}
				else
				{
					CCTVInfo[i][tvSignalTime] = 0;
					CCTVInfo[i][tvSignal] = 0;
				}
			}
		}
	}

	for(new i; i < MAX_HOUSES; i++)
	{
		if (HouseInfo[i][hAlarmTime])
	    {
	        HouseInfo[i][hAlarmTime]--;
	        if (HouseInfo[i][hAlarmTime] == 0) HouseAlarm(i, false);
		}
	}

	for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++)
	{
        new Float:health;

		AntiCheatGetVehicleHealth(i, health);

		if (health < 330.0 && IsABicycle(i) == 0)
		{
			if (VehicleInfo[i][carEngineOn])											VehicleEngine(i, false);
			if (VehicleInfo[i][carOwnerID] > 0 && VehicleInfo[i][carOwnerID] != INVALID_PLAYER_ID && VehicleInfo[i][carDeath] != 1)	ResetVehicleStuff(i);

		    SetVehicleHealth(i, 330.0);
		}

		if (VehicleInfo[i][carTerminateEx])
		{
		    VehicleInfo[i][carTerminateEx]--;
			if (VehicleInfo[i][carTerminateEx] == 1 && VehicleInfo[i][carOwnerID] != INVALID_PLAYER_ID && VehicleInfo[i][carOwnerID] > 0)
	        {
				new sahip = GetVehicleOwner(i);
				if(IsPlayerLogged(sahip)) PlayerInfo[sahip][pCarKey] = 0, SendServerMessage(sahip, "Aracýnla 10 dakika boyunca etkileþime geçmedin ve son bulunduðu yere park edildi.");
				new vehid = i;

		        GetVehiclePos(vehid, VehicleInfo[vehid][carParkX], VehicleInfo[vehid][carParkY], VehicleInfo[vehid][carParkZ]);
		        GetVehicleZAngle(vehid, VehicleInfo[vehid][carParkA]);

		        SQL_SetFloat("cars", "x", VehicleInfo[vehid][carParkX], VehicleInfo[vehid][carID]);
		        SQL_SetFloat("cars", "y", VehicleInfo[vehid][carParkY], VehicleInfo[vehid][carID]);
		        SQL_SetFloat("cars", "z", VehicleInfo[vehid][carParkZ], VehicleInfo[vehid][carID]);
		        SQL_SetFloat("cars", "fa", VehicleInfo[vehid][carParkA], VehicleInfo[vehid][carID]);
		        ResetVehicleStuff(vehid, 1);
		        DestroyVehicleEx(vehid, 1);
			}
		}

		if (VehicleInfo[i][carTerminate])
		{
		    VehicleInfo[i][carTerminate]--;
			if (VehicleInfo[i][carTerminate] == 1 && VehicleInfo[i][carType] != 0)
	        {
				new sahip = GetIDByID(VehicleInfo[i][carRent]);
				if(IsPlayerLogged(sahip)) pTemp[sahip][pRentveh] = 0, pTemp[sahip][pJob] = 0, SendServerMessage(sahip, "Kiralýk aracýnla 5 dakika boyunca etkileþime geçmedin ve silindi.");
				VehicleInfo[i][carRent] = 0;
				AracKiraBitir(i);
			}
		}

        if (VehicleInfo[i][carAlarmTime])
	    {
			new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
			if (VehicleInfo[i][carAlarmTime] == 0) SetVehicleParamsEx(i, engine, lights, VEHICLE_PARAMS_OFF, doors, bonnet, boot, objective);

	        VehicleInfo[i][carAlarmTime]--;
			if (VehicleInfo[i][carAlarmTime] % 2 == 1) SetVehicleParamsEx(i, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
			else 									  SetVehicleParamsEx(i, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
		}

	    if (VehicleInfo[i][carObjectiveTime])
	    {
	        VehicleInfo[i][carObjectiveTime]--;
	        if (VehicleInfo[i][carObjectiveTime] == 0)
	        {
	            new engine,lights,alarm,doors,bonnet,boot,objective;

				GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, VEHICLE_PARAMS_OFF);
			}
		}

		if (VehicleInfo[i][carOwnerID] == INVALID_PLAYER_ID || IsABicycle(i) || VehicleInfo[i][carEngineOn] == 0) continue;

		new iEngine, iLights, iAlarm,
			iDoors, iBonnet, iBoot,
			iObjective
		;
		GetVehicleParamsEx(i, iEngine, iLights, iAlarm, iDoors, iBonnet, iBoot, iObjective);


		//new Float:fl = (float(GetVehicleSpeed(i))+float(random(5))+1.0)/3600 * GetVehicleFuelUsage(GetVehicleModel(i)) * 0.05;
		//SAMALL("SPEED: %d, ÐÀÑÕÎÄ: %f, -%f", GetVehicleSpeed(i), GetVehicleFuelUsage(GetVehicleModel(i)), fl);

		VehicleInfo[i][carFuel] -= (float(GetVehicleSpeed(i))+float(random(5))+1.0)/3600 * GetVehicleFuelUsage(GetVehicleModel(i)) * 0.10;

		if (VehicleInfo[i][carFuel] < 0.0)
		{
			VehicleInfo[i][carFuel] = 0.0;
			VehicleEngine(i, false);
			if (IsPlayerLogged(VehicleInfo[i][carDriver]) && IsPlayerInVehicle(VehicleInfo[i][carDriver], i))
				GameTextForPlayer(VehicleInfo[i][carDriver], "~y~BENZIN BITTI!", 5000, 3);
		}

		//SAMALL("%f", VehicleInfo[i][carFuel]);

		if (GetVehicleSpeed(i)) VehicleInfo[i][carEngine] -= 0.004/10;
		if (VehicleInfo[i][carRadioOn])	VehicleInfo[i][carBattery] -= 0.02/10;
		if (iLights == 1)	VehicleInfo[i][carBattery] -= 0.012/10;

		new Float:vehhp;
		GetVehicleHealth(i, vehhp);

		if (vehhp < 400 && GetVehicleSpeed(i) && VehicleInfo[i][carEngine] < 35)
		{
			VehicleInfo[i][carEngine] -= 0.02/10;
			VehicleInfo[i][carBattery] -= 0.012/10;
		}

		if (VehicleInfo[i][carBattery] < 0.0)
		{
			VehicleInfo[i][carBattery] = 0.0;
			if (VehicleInfo[i][carEngineOn]) VehicleEngine(i, false);
		}

		if (VehicleInfo[i][carEngine] < 0.0)
		{
			VehicleInfo[i][carEngine] = 0.0;
			if (VehicleInfo[i][carEngineOn]) VehicleEngine(i, false);
		}
	}

	for(new i = 0; i != MAX_TOLLS; i++)
	{
		if (aTolls[i][E_tOpenTime] < 1) continue;

		aTolls[i][E_tOpenTime]--;

		if (aTolls[i][E_tOpenTime] == 1)	Toll_CloseToll(i);
	}


	for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
	    if (CallInfo[i][callExists] != 0 && CallInfo[i][callDelete] < gettime())
		{
        	CallInfo[i][callExists] =
			CallInfo[i][callAccept] =
        	CallInfo[i][callType] = 0;
			CallInfo[i][callAcceptBy] = EOS;
		}

		if (ArrestInfo[i][arrestExists] != 0 && ArrestInfo[i][arrestDelete] < gettime())
		{
			ArrestInfo[i][arrestExists] =
			ArrestInfo[i][arrestDelete] = 0;
		}
	}


	for(new i = 1; i != MAX_FACTIONS; i++)
	{
	    if (Factions[i][fON] == 0 ||
			(Factions[i][fType] != FACTION_MAFIA && Factions[i][fType] != FACTION_GANG) ||
			Factions[i][fPointTime] > gettime()
		) continue;

		if (Factions[i][fType] == FACTION_MAFIA)	Factions[i][fPoint] = 50;
        else										Factions[i][fPoint] = 30;

    	Factions[i][fPointTime] = 604800 + gettime();
		SQL_SetInteger("factions", "point", Factions[i][fPoint], Factions[i][fID]);
		SQL_SetInteger("factions", "point_time", Factions[i][fPointTime], Factions[i][fID]);
	}

	for(new i = 0; i < MAX_CORPS; i++)
	{
		if (!CorpInfo[i][cUsed]) continue;
		if (!CorpInfo[i][cVeh])	SetActorPos(CorpInfo[i][cBody], CorpInfo[i][cX], CorpInfo[i][cY], CorpInfo[i][cZ]);
	}

	return 1;
}

TDraw_OnGameModeInit()
{

    ServerTextdraws[std_DarkScreen] = TextDrawCreate(-0.500000, -2.062500, "box");
    TextDrawLetterSize(ServerTextdraws[std_DarkScreen], 0.000000, 59.150035);
    TextDrawTextSize(ServerTextdraws[std_DarkScreen], 846.000000, 0.000000);
    TextDrawAlignment(ServerTextdraws[std_DarkScreen], 1);
    TextDrawColor(ServerTextdraws[std_DarkScreen], -1);
    TextDrawUseBox(ServerTextdraws[std_DarkScreen], 1);
    TextDrawBoxColor(ServerTextdraws[std_DarkScreen], 255);
    TextDrawSetShadow(ServerTextdraws[std_DarkScreen], 0);
    TextDrawBackgroundColor(ServerTextdraws[std_DarkScreen], 255);
    TextDrawFont(ServerTextdraws[std_DarkScreen], 1);
    TextDrawSetProportional(ServerTextdraws[std_DarkScreen], 1);

	//admin
	Developer = TextDrawCreate(300.000000, 6.000000, "~r~~h~93~g~~h~ 25~b~~h~~h~~h~ 35");
	TextDrawFont(Developer, 1);
	TextDrawLetterSize(Developer, 0.183333, 1.650001);
	TextDrawTextSize(Developer, 400.000000, 17.000000);
	TextDrawSetOutline(Developer, 1);
	TextDrawSetShadow(Developer, 0);
	TextDrawAlignment(Developer, 1);
	TextDrawColor(Developer, -1);
	TextDrawBackgroundColor(Developer, 255);
	TextDrawBoxColor(Developer, 50);
	TextDrawUseBox(Developer, 0);
	TextDrawSetProportional(Developer, 1);
	TextDrawSetSelectable(Developer, 0);

	Admin = TextDrawCreate(502.000000, -1.000000, "~p~~h~~r~ADMIN_WORK");
	TextDrawFont(Admin, 1);
	TextDrawLetterSize(Admin, 0.170833, 1.250000);
	TextDrawTextSize(Admin, 400.000000, 17.000000);
	TextDrawSetOutline(Admin, 1);
	TextDrawSetShadow(Admin, 0);
	TextDrawAlignment(Admin, 1);
	TextDrawColor(Admin, -1);
	TextDrawBackgroundColor(Admin, 255);
	TextDrawBoxColor(Admin, 50);
	TextDrawUseBox(Admin, 0);
	TextDrawSetProportional(Admin, 1);
	TextDrawSetSelectable(Admin, 0);

    //???? ??????
	zond_cam[0] = TextDrawCreate(200.600006, 183.000000, "box");
	TextDrawLetterSize(zond_cam[0], 0.000000, -0.354317);
	TextDrawTextSize(zond_cam[0], 0.000000, 37.000000);
	TextDrawAlignment(zond_cam[0], 2);
	TextDrawColor(zond_cam[0], -1);
	TextDrawUseBox(zond_cam[0], 1);
	TextDrawBoxColor(zond_cam[0], -1);
	TextDrawSetShadow(zond_cam[0], 0);
	TextDrawSetOutline(zond_cam[0], 0);
	TextDrawBackgroundColor(zond_cam[0], 255);
	TextDrawFont(zond_cam[0], 1);
	TextDrawSetProportional(zond_cam[0], 1);
	TextDrawSetShadow(zond_cam[0], 0);

	zond_cam[1] = TextDrawCreate(200.100006, 320.000000, "box");
	TextDrawLetterSize(zond_cam[1], 0.000000, -0.354317);
	TextDrawTextSize(zond_cam[1], 0.000000, 37.000000);
	TextDrawAlignment(zond_cam[1], 2);
	TextDrawColor(zond_cam[1], -1);
	TextDrawUseBox(zond_cam[1], 1);
	TextDrawBoxColor(zond_cam[1], -1);
	TextDrawSetShadow(zond_cam[1], 0);
	TextDrawSetOutline(zond_cam[1], 0);
	TextDrawBackgroundColor(zond_cam[1], 255);
	TextDrawFont(zond_cam[1], 1);
	TextDrawSetProportional(zond_cam[1], 1);
	TextDrawSetShadow(zond_cam[1], 0);

	zond_cam[2] = TextDrawCreate(460.000000, 320.000000, "box");
	TextDrawLetterSize(zond_cam[2], 0.000000, -0.354317);
	TextDrawTextSize(zond_cam[2], 0.000000, 37.000000);
	TextDrawAlignment(zond_cam[2], 2);
	TextDrawColor(zond_cam[2], -1);
	TextDrawUseBox(zond_cam[2], 1);
	TextDrawBoxColor(zond_cam[2], -1);
	TextDrawSetShadow(zond_cam[2], 0);
	TextDrawSetOutline(zond_cam[2], 0);
	TextDrawBackgroundColor(zond_cam[2], 255);
	TextDrawFont(zond_cam[2], 1);
	TextDrawSetProportional(zond_cam[2], 1);
	TextDrawSetShadow(zond_cam[2], 0);

	zond_cam[3] = TextDrawCreate(460.000000, 183.000000, "box");
	TextDrawLetterSize(zond_cam[3], 0.000000, -0.354317);
	TextDrawTextSize(zond_cam[3], 0.000000, 37.000000);
	TextDrawAlignment(zond_cam[3], 2);
	TextDrawColor(zond_cam[3], -1);
	TextDrawUseBox(zond_cam[3], 1);
	TextDrawBoxColor(zond_cam[3], -1);
	TextDrawSetShadow(zond_cam[3], 0);
	TextDrawSetOutline(zond_cam[3], 0);
	TextDrawBackgroundColor(zond_cam[3], 255);
	TextDrawFont(zond_cam[3], 1);
	TextDrawSetProportional(zond_cam[3], 1);
	TextDrawSetShadow(zond_cam[3], 0);

	zond_cam[4] = TextDrawCreate(180.365997, 183.000015, "box");
	TextDrawLetterSize(zond_cam[4], 0.000000, 3.206443);
	TextDrawTextSize(zond_cam[4], 0.000000, -5.000000);
	TextDrawAlignment(zond_cam[4], 2);
	TextDrawColor(zond_cam[4], -1);
	TextDrawUseBox(zond_cam[4], 1);
	TextDrawBoxColor(zond_cam[4], -1);
	TextDrawSetShadow(zond_cam[4], 0);
	TextDrawSetOutline(zond_cam[4], 0);
	TextDrawBackgroundColor(zond_cam[4], 255);
	TextDrawFont(zond_cam[4], 1);
	TextDrawSetProportional(zond_cam[4], 1);
	TextDrawSetShadow(zond_cam[4], 0);

	zond_cam[5] = TextDrawCreate(180.365997, 286.833435, "box");
	TextDrawLetterSize(zond_cam[5], 0.000000, 3.206443);
	TextDrawTextSize(zond_cam[5], 0.000000, -5.000000);
	TextDrawAlignment(zond_cam[5], 2);
	TextDrawColor(zond_cam[5], -1);
	TextDrawUseBox(zond_cam[5], 1);
	TextDrawBoxColor(zond_cam[5], -1);
	TextDrawSetShadow(zond_cam[5], 0);
	TextDrawSetOutline(zond_cam[5], 0);
	TextDrawBackgroundColor(zond_cam[5], 255);
	TextDrawFont(zond_cam[5], 1);
	TextDrawSetProportional(zond_cam[5], 1);
	TextDrawSetShadow(zond_cam[5], 0);

	zond_cam[6] = TextDrawCreate(480.219818, 288.000122, "box");
	TextDrawLetterSize(zond_cam[6], 0.000000, 3.206443);
	TextDrawTextSize(zond_cam[6], 0.000000, -5.000000);
	TextDrawAlignment(zond_cam[6], 2);
	TextDrawColor(zond_cam[6], -1);
	TextDrawUseBox(zond_cam[6], 1);
	TextDrawBoxColor(zond_cam[6], -1);
	TextDrawSetShadow(zond_cam[6], 0);
	TextDrawSetOutline(zond_cam[6], 0);
	TextDrawBackgroundColor(zond_cam[6], 255);
	TextDrawFont(zond_cam[6], 1);
	TextDrawSetProportional(zond_cam[6], 1);
	TextDrawSetShadow(zond_cam[6], 0);

	zond_cam[7] = TextDrawCreate(479.751220, 183.000106, "box");
	TextDrawLetterSize(zond_cam[7], 0.000000, 3.206443);
	TextDrawTextSize(zond_cam[7], 0.000000, -5.000000);
	TextDrawAlignment(zond_cam[7], 2);
	TextDrawColor(zond_cam[7], -1);
	TextDrawUseBox(zond_cam[7], 1);
	TextDrawBoxColor(zond_cam[7], -1);
	TextDrawSetShadow(zond_cam[7], 0);
	TextDrawSetOutline(zond_cam[7], 0);
	TextDrawBackgroundColor(zond_cam[7], 255);
	TextDrawFont(zond_cam[7], 1);
	TextDrawSetProportional(zond_cam[7], 1);
	TextDrawSetShadow(zond_cam[7], 0);

	zond_cam[8] = TextDrawCreate(468.506805, 164.333358, "box");
	TextDrawLetterSize(zond_cam[8], 0.000000, 0.442169);
	TextDrawTextSize(zond_cam[8], 0.000000, 18.000000);
	TextDrawAlignment(zond_cam[8], 2);
	TextDrawColor(zond_cam[8], -1);
	TextDrawUseBox(zond_cam[8], 1);
	TextDrawBoxColor(zond_cam[8], -176);
	TextDrawSetShadow(zond_cam[8], 0);
	TextDrawSetOutline(zond_cam[8], 0);
	TextDrawBackgroundColor(zond_cam[8], 255);
	TextDrawFont(zond_cam[8], 1);
	TextDrawSetProportional(zond_cam[8], 1);
	TextDrawSetShadow(zond_cam[8], 0);

	zond_cam[9] = TextDrawCreate(481.656890, 164.133316, "box");
	TextDrawLetterSize(zond_cam[9], 0.000000, 0.489021);
	TextDrawTextSize(zond_cam[9], 469.500030, 0.000000);
	TextDrawAlignment(zond_cam[9], 1);
	TextDrawColor(zond_cam[9], -1);
	TextDrawUseBox(zond_cam[9], 1);
	TextDrawBoxColor(zond_cam[9], -1523963137);
	TextDrawSetShadow(zond_cam[9], 0);
	TextDrawSetOutline(zond_cam[9], 0);
	TextDrawBackgroundColor(zond_cam[9], 255);
	TextDrawFont(zond_cam[9], 1);
	TextDrawSetProportional(zond_cam[9], 1);
	TextDrawSetShadow(zond_cam[9], 0);

	zond_cam[10] = TextDrawCreate(456.593719, 167.250015, "box");
	TextDrawLetterSize(zond_cam[10], 0.000000, -0.166905);
	TextDrawTextSize(zond_cam[10], 0.000000, -2.000000);
	TextDrawAlignment(zond_cam[10], 2);
	TextDrawColor(zond_cam[10], -1);
	TextDrawUseBox(zond_cam[10], 1);
	TextDrawBoxColor(zond_cam[10], -176);
	TextDrawSetShadow(zond_cam[10], 0);
	TextDrawSetOutline(zond_cam[10], 0);
	TextDrawBackgroundColor(zond_cam[10], 255);
	TextDrawFont(zond_cam[10], 1);
	TextDrawSetProportional(zond_cam[10], 1);
	TextDrawSetShadow(zond_cam[10], 0);

    TD_vehicle_info[0] = TextDrawCreate(429.000000, 409.000000, ".");
	TextDrawBackgroundColor(TD_vehicle_info[0], 255);
	TextDrawFont(TD_vehicle_info[0], 2);
	TextDrawLetterSize(TD_vehicle_info[0], 36.150016, -0.500000);
	TextDrawColor(TD_vehicle_info[0], -1);
	TextDrawSetOutline(TD_vehicle_info[0], 0);
	TextDrawSetProportional(TD_vehicle_info[0], 1);
	TextDrawSetShadow(TD_vehicle_info[0], 1);
	TextDrawSetSelectable(TD_vehicle_info[0], 0);

	TD_vehicle_info[1] = TextDrawCreate(485.000000, 395.000000, "vehicle");
	TextDrawBackgroundColor(TD_vehicle_info[1], 255);
	TextDrawFont(TD_vehicle_info[1], 3);
	TextDrawLetterSize(TD_vehicle_info[1], 0.400000, 0.899999);
	TextDrawColor(TD_vehicle_info[1], -1);
	TextDrawSetOutline(TD_vehicle_info[1], 0);
	TextDrawSetProportional(TD_vehicle_info[1], 1);
	TextDrawSetShadow(TD_vehicle_info[1], 1);
	TextDrawSetSelectable(TD_vehicle_info[1], 0);

	//?????????
	TD_restaurant[0] = TextDrawCreate(487.599975, 139.384429, "usebox");
	TextDrawLetterSize(TD_restaurant[0], 0.000000, 20.258150);
	TextDrawTextSize(TD_restaurant[0], 133.600006, 0.000000);
	TextDrawAlignment(TD_restaurant[0], 1);
	TextDrawColor(TD_restaurant[0], 0);
	TextDrawUseBox(TD_restaurant[0], true);
	TextDrawBoxColor(TD_restaurant[0], 255);
	TextDrawSetShadow(TD_restaurant[0], 0);
	TextDrawSetOutline(TD_restaurant[0], 0);
	TextDrawFont(TD_restaurant[0], 0);
	TextDrawSetProportional(TD_restaurant[0], 1);

	TD_restaurant[1] = TextDrawCreate(148.600006, 165.884429, "Bu restoran birden fazla secenek sunuyor.");
	TextDrawLetterSize(TD_restaurant[1], 0.209995, 1.086665);
	TextDrawTextSize(TD_restaurant[1], 1010.000000, -9.333333);
	TextDrawAlignment(TD_restaurant[1], 1);
	TextDrawColor(TD_restaurant[1], -1);
	TextDrawUseBox(TD_restaurant[1], true);
	TextDrawBoxColor(TD_restaurant[1], 0);
	TextDrawSetShadow(TD_restaurant[1], 0);
	TextDrawSetOutline(TD_restaurant[1], 1);
	TextDrawBackgroundColor(TD_restaurant[1], 51);
	TextDrawFont(TD_restaurant[1], 1);
	TextDrawSetProportional(TD_restaurant[1], 1);

	TD_restaurant[2] = TextDrawCreate(148.600006, 176.217773, "Menuden bir tanesini secerek satin alin.");
	TextDrawLetterSize(TD_restaurant[2], 0.209995, 1.086665);
	TextDrawTextSize(TD_restaurant[2], 1010.000000, -9.333333);
	TextDrawAlignment(TD_restaurant[2], 1);
	TextDrawColor(TD_restaurant[2], -1);
	TextDrawUseBox(TD_restaurant[2], true);
	TextDrawBoxColor(TD_restaurant[2], 0);
	TextDrawSetShadow(TD_restaurant[2], 0);
	TextDrawSetOutline(TD_restaurant[2], 1);
	TextDrawBackgroundColor(TD_restaurant[2], 51);
	TextDrawFont(TD_restaurant[2], 1);
	TextDrawSetProportional(TD_restaurant[2], 1);

	TD_restaurant[3] = TextDrawCreate(468.000000, 146.222290, "X");
	TextDrawLetterSize(TD_restaurant[3], 0.449598, 1.241600);
	TextDrawTextSize(TD_restaurant[3], 482.000000, 9.955554);
	TextDrawAlignment(TD_restaurant[3], 1);
	TextDrawColor(TD_restaurant[3], -1061109505);
	TextDrawSetShadow(TD_restaurant[3], 0);
	TextDrawSetOutline(TD_restaurant[3], 1);
	TextDrawBackgroundColor(TD_restaurant[3], 51);
	TextDrawFont(TD_restaurant[3], 1);
	TextDrawSetProportional(TD_restaurant[3], 1);
	TextDrawSetSelectable(TD_restaurant[3], true);
}

TDraw_OnPlayerConnect(playerid)
{
cWspeedo[playerid][0] = CreatePlayerTextDraw(playerid, 1.000, 437.000, "LD_SPAC:white");
PlayerTextDrawTextSize(playerid, cWspeedo[playerid][0], 32.000, 10.000);
PlayerTextDrawAlignment(playerid, cWspeedo[playerid][0], 1);
PlayerTextDrawColor(playerid, cWspeedo[playerid][0], 222);
PlayerTextDrawSetShadow(playerid, cWspeedo[playerid][0], 0);
PlayerTextDrawSetOutline(playerid, cWspeedo[playerid][0], 0);
PlayerTextDrawBackgroundColor(playerid, cWspeedo[playerid][0], 255);
PlayerTextDrawFont(playerid, cWspeedo[playerid][0], 4);
PlayerTextDrawSetProportional(playerid, cWspeedo[playerid][0], 1);

cWspeedo[playerid][2] = CreatePlayerTextDraw(playerid, 1.000, 437.000, "LD_SPAC:white");
PlayerTextDrawTextSize(playerid, cWspeedo[playerid][2], 32.000, 10.000);
PlayerTextDrawAlignment(playerid, cWspeedo[playerid][2], 1);
PlayerTextDrawColor(playerid, cWspeedo[playerid][2], 222);
PlayerTextDrawSetShadow(playerid, cWspeedo[playerid][2], 0);
PlayerTextDrawSetOutline(playerid, cWspeedo[playerid][2], 0);
PlayerTextDrawBackgroundColor(playerid, cWspeedo[playerid][2], 255);
PlayerTextDrawFont(playerid, cWspeedo[playerid][2], 4);
PlayerTextDrawSetProportional(playerid, cWspeedo[playerid][2], 1);

cWspeedo[playerid][1] = CreatePlayerTextDraw(playerid, 1.000, 437.000, "LD_SPAC:white");
PlayerTextDrawTextSize(playerid, cWspeedo[playerid][1], 2.000, 10.000);
PlayerTextDrawAlignment(playerid, cWspeedo[playerid][1], 1);
PlayerTextDrawColor(playerid, cWspeedo[playerid][1], 6553855);
PlayerTextDrawSetShadow(playerid, cWspeedo[playerid][1], 0);
PlayerTextDrawSetOutline(playerid, cWspeedo[playerid][1], 0);
PlayerTextDrawBackgroundColor(playerid, cWspeedo[playerid][1], 255);
PlayerTextDrawFont(playerid, cWspeedo[playerid][1], 4);
PlayerTextDrawSetProportional(playerid, cWspeedo[playerid][1], 1);

cWspeedo[playerid][9] = CreatePlayerTextDraw(playerid, 5.000, 438.000, "HIZ:100~G~KMH");
PlayerTextDrawLetterSize(playerid, cWspeedo[playerid][9], 0.100, 0.799);
PlayerTextDrawAlignment(playerid, cWspeedo[playerid][9], 1);
PlayerTextDrawColor(playerid, cWspeedo[playerid][9], -1);
PlayerTextDrawSetShadow(playerid, cWspeedo[playerid][9], 1);
PlayerTextDrawSetOutline(playerid, cWspeedo[playerid][9], 1);
PlayerTextDrawBackgroundColor(playerid, cWspeedo[playerid][9], 150);
PlayerTextDrawFont(playerid, cWspeedo[playerid][9], 2);
PlayerTextDrawSetProportional(playerid, cWspeedo[playerid][9], 1);

cWspeedo[playerid][3] = CreatePlayerTextDraw(playerid, 1.000, 424.000, "LD_SPAC:white");
PlayerTextDrawTextSize(playerid, cWspeedo[playerid][3], 32.000, 10.000);
PlayerTextDrawAlignment(playerid, cWspeedo[playerid][3], 1);
PlayerTextDrawColor(playerid, cWspeedo[playerid][3], 222);
PlayerTextDrawSetShadow(playerid, cWspeedo[playerid][3], 0);
PlayerTextDrawSetOutline(playerid, cWspeedo[playerid][3], 0);
PlayerTextDrawBackgroundColor(playerid, cWspeedo[playerid][3], 255);
PlayerTextDrawFont(playerid, cWspeedo[playerid][3], 4);
PlayerTextDrawSetProportional(playerid, cWspeedo[playerid][3], 1);

cWspeedo[playerid][4] = CreatePlayerTextDraw(playerid, 1.000, 424.000, "LD_SPAC:white");
PlayerTextDrawTextSize(playerid, cWspeedo[playerid][4], 2.000, 10.000);
PlayerTextDrawAlignment(playerid, cWspeedo[playerid][4], 1);
PlayerTextDrawColor(playerid, cWspeedo[playerid][4], 6553855);
PlayerTextDrawSetShadow(playerid, cWspeedo[playerid][4], 0);
PlayerTextDrawSetOutline(playerid, cWspeedo[playerid][4], 0);
PlayerTextDrawBackgroundColor(playerid, cWspeedo[playerid][4], 255);
PlayerTextDrawFont(playerid, cWspeedo[playerid][4], 4);
PlayerTextDrawSetProportional(playerid, cWspeedo[playerid][4], 1);

cWspeedo[playerid][5] = CreatePlayerTextDraw(playerid, 1.000, 412.000, "LD_SPAC:white");
PlayerTextDrawTextSize(playerid, cWspeedo[playerid][5], 32.000, 10.000);
PlayerTextDrawAlignment(playerid, cWspeedo[playerid][5], 1);
PlayerTextDrawColor(playerid, cWspeedo[playerid][5], 222);
PlayerTextDrawSetShadow(playerid, cWspeedo[playerid][5], 0);
PlayerTextDrawSetOutline(playerid, cWspeedo[playerid][5], 0);
PlayerTextDrawBackgroundColor(playerid, cWspeedo[playerid][5], 255);
PlayerTextDrawFont(playerid, cWspeedo[playerid][5], 4);
PlayerTextDrawSetProportional(playerid, cWspeedo[playerid][5], 1);

cWspeedo[playerid][6] = CreatePlayerTextDraw(playerid, 1.000, 412.000, "LD_SPAC:white");
PlayerTextDrawTextSize(playerid, cWspeedo[playerid][6], 2.000, 10.000);
PlayerTextDrawAlignment(playerid, cWspeedo[playerid][6], 1);
PlayerTextDrawColor(playerid, cWspeedo[playerid][6], 6553855);
PlayerTextDrawSetShadow(playerid, cWspeedo[playerid][6], 0);
PlayerTextDrawSetOutline(playerid, cWspeedo[playerid][6], 0);
PlayerTextDrawBackgroundColor(playerid, cWspeedo[playerid][6], 255);
PlayerTextDrawFont(playerid, cWspeedo[playerid][6], 4);
PlayerTextDrawSetProportional(playerid, cWspeedo[playerid][6], 1);

cWspeedo[playerid][7] = CreatePlayerTextDraw(playerid, 5.000, 425.000, "BENZIN:100~G~L");
PlayerTextDrawLetterSize(playerid, cWspeedo[playerid][7], 0.100, 0.799);
PlayerTextDrawAlignment(playerid, cWspeedo[playerid][7], 1);
PlayerTextDrawColor(playerid, cWspeedo[playerid][7], -1);
PlayerTextDrawSetShadow(playerid, cWspeedo[playerid][7], 1);
PlayerTextDrawSetOutline(playerid, cWspeedo[playerid][7], 1);
PlayerTextDrawBackgroundColor(playerid, cWspeedo[playerid][7], 150);
PlayerTextDrawFont(playerid, cWspeedo[playerid][7], 2);
PlayerTextDrawSetProportional(playerid, cWspeedo[playerid][7], 1);

cWspeedo[playerid][8] = CreatePlayerTextDraw(playerid, 5.000, 413.000, "KM:100.0~g~km");
PlayerTextDrawLetterSize(playerid, cWspeedo[playerid][8], 0.100, 0.799);
PlayerTextDrawAlignment(playerid, cWspeedo[playerid][8], 1);
PlayerTextDrawColor(playerid, cWspeedo[playerid][8], -1);
PlayerTextDrawSetShadow(playerid, cWspeedo[playerid][8], 1);
PlayerTextDrawSetOutline(playerid, cWspeedo[playerid][8], 1);
PlayerTextDrawBackgroundColor(playerid, cWspeedo[playerid][8], 150);
PlayerTextDrawFont(playerid, cWspeedo[playerid][8], 2);
PlayerTextDrawSetProportional(playerid, cWspeedo[playerid][8], 1);


	//info message

	TD_job_message[playerid][0] = CreatePlayerTextDraw(playerid, 608.000, 196.000, "Info_Message");
	PlayerTextDrawLetterSize(playerid, TD_job_message[playerid][0], 0.170, 1.099);
	PlayerTextDrawTextSize(playerid, TD_job_message[playerid][0], -10.000, -7.000);
	PlayerTextDrawAlignment(playerid, TD_job_message[playerid][0], 3);
	PlayerTextDrawColor(playerid, TD_job_message[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, TD_job_message[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, TD_job_message[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_job_message[playerid][0], 150);
	PlayerTextDrawFont(playerid, TD_job_message[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TD_job_message[playerid][0], 1);


	SpeedText[playerid] = CreatePlayerTextDraw(playerid, 520.9165, 105.4813, "~b~FUEL_________~l~I~w~IIIIIIIIII~w~I~l~I~n~~b~SPEED______~w~0___km/h~n~~b~MILEAGE__~w~0.00_km~n~");
	PlayerTextDrawLetterSize(playerid, SpeedText[playerid], 0.2099, 1.0999);
	PlayerTextDrawTextSize(playerid, SpeedText[playerid], 629.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, SpeedText[playerid], 1);
	PlayerTextDrawColor(playerid, SpeedText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, SpeedText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, SpeedText[playerid], 255);
	PlayerTextDrawFont(playerid, SpeedText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, SpeedText[playerid], 1);

	//-------------------------------------------------------------------------//

	Silah_Bilgi[playerid][MermiTD] = CreatePlayerTextDraw(playerid, 520.850097, 63.333305, " ");
	PlayerTextDrawLetterSize(playerid, Silah_Bilgi[playerid][MermiTD], 0.363750, 1.360833);
	PlayerTextDrawAlignment(playerid, Silah_Bilgi[playerid][MermiTD], 2);
	PlayerTextDrawColor(playerid, Silah_Bilgi[playerid][MermiTD], -1378294017);
	PlayerTextDrawSetShadow(playerid, Silah_Bilgi[playerid][MermiTD], 0);
	PlayerTextDrawSetOutline(playerid, Silah_Bilgi[playerid][MermiTD], 1);
	PlayerTextDrawBackgroundColor(playerid, Silah_Bilgi[playerid][MermiTD], 255);
	PlayerTextDrawFont(playerid, Silah_Bilgi[playerid][MermiTD], 1);
	PlayerTextDrawSetProportional(playerid, Silah_Bilgi[playerid][MermiTD], 1);
	PlayerTextDrawSetShadow(playerid, Silah_Bilgi[playerid][MermiTD], 0);

	playerhud[playerid][0] = CreatePlayerTextDraw(playerid, 324.000, 434.000, "16.00_-_19/09/2024_LOSWORLD_ROLEPLAY_HOPZY_DEV(1)");
PlayerTextDrawLetterSize(playerid, playerhud[playerid][0], 0.187, 1.098);
PlayerTextDrawTextSize(playerid, playerhud[playerid][0], 4.000, -13.000);
PlayerTextDrawAlignment(playerid, playerhud[playerid][0], 2);
PlayerTextDrawColor(playerid, playerhud[playerid][0], -1);
PlayerTextDrawSetShadow(playerid, playerhud[playerid][0], 1);
PlayerTextDrawSetOutline(playerid, playerhud[playerid][0], 0);
PlayerTextDrawBackgroundColor(playerid, playerhud[playerid][0], 150);
PlayerTextDrawFont(playerid, playerhud[playerid][0], 2);
PlayerTextDrawSetProportional(playerid, playerhud[playerid][0], 1);


playerhud[playerid][1] = CreatePlayerTextDraw(playerid, 637.000, 437.000, "LD_SPAC:white");
PlayerTextDrawTextSize(playerid, playerhud[playerid][1], 2.000, 10.000);
PlayerTextDrawAlignment(playerid, playerhud[playerid][1], 1);
PlayerTextDrawColor(playerid, playerhud[playerid][1], -1199174657);
PlayerTextDrawSetShadow(playerid, playerhud[playerid][1], 0);
PlayerTextDrawSetOutline(playerid, playerhud[playerid][1], 0);
PlayerTextDrawBackgroundColor(playerid, playerhud[playerid][1], 255);
PlayerTextDrawFont(playerid, playerhud[playerid][1], 4);
PlayerTextDrawSetProportional(playerid, playerhud[playerid][1], 1);


playerhud[playerid][2] = CreatePlayerTextDraw(playerid, 585.000, 437.000, "LD_SPAC:white");
PlayerTextDrawTextSize(playerid, playerhud[playerid][2], 53.000, 10.000);
PlayerTextDrawAlignment(playerid, playerhud[playerid][2], 1);
PlayerTextDrawColor(playerid, playerhud[playerid][2], 222);
PlayerTextDrawSetShadow(playerid, playerhud[playerid][2], 0);
PlayerTextDrawSetOutline(playerid, playerhud[playerid][2], 0);
PlayerTextDrawBackgroundColor(playerid, playerhud[playerid][2], 255);
PlayerTextDrawFont(playerid, playerhud[playerid][2], 4);
PlayerTextDrawSetProportional(playerid, playerhud[playerid][2], 1);


playerhud[playerid][3] = CreatePlayerTextDraw(playerid, 638.000, 428.000, "16/06/2025, 21.00 - ~Y~LDRP");
PlayerTextDrawLetterSize(playerid, playerhud[playerid][3], 0.090, 0.899);
PlayerTextDrawAlignment(playerid, playerhud[playerid][3], 3);
PlayerTextDrawColor(playerid, playerhud[playerid][3], -1);
PlayerTextDrawSetShadow(playerid, playerhud[playerid][3], 1);
PlayerTextDrawSetOutline(playerid, playerhud[playerid][3], 1);
PlayerTextDrawBackgroundColor(playerid, playerhud[playerid][3], 150);
PlayerTextDrawFont(playerid, playerhud[playerid][3], 2);
PlayerTextDrawSetProportional(playerid, playerhud[playerid][3], 1);

playerhud[playerid][4] = CreatePlayerTextDraw(playerid, 583.000, 438.000, "~Y~LOS SANTOS");
PlayerTextDrawLetterSize(playerid, playerhud[playerid][4], 0.090, 0.899);
PlayerTextDrawAlignment(playerid, playerhud[playerid][4], 3);
PlayerTextDrawColor(playerid, playerhud[playerid][4], -1);
PlayerTextDrawSetShadow(playerid, playerhud[playerid][4], 1);
PlayerTextDrawSetOutline(playerid, playerhud[playerid][4], 1);
PlayerTextDrawBackgroundColor(playerid, playerhud[playerid][4], 150);
PlayerTextDrawFont(playerid, playerhud[playerid][4], 2);
PlayerTextDrawSetProportional(playerid, playerhud[playerid][4], 1);

playerhud[playerid][5] = CreatePlayerTextDraw(playerid, 635.000, 438.000, "Brendon_Preston(1)");
PlayerTextDrawLetterSize(playerid, playerhud[playerid][5], 0.100, 0.799);
PlayerTextDrawAlignment(playerid, playerhud[playerid][5], 3);
PlayerTextDrawColor(playerid, playerhud[playerid][5], -1);
PlayerTextDrawSetShadow(playerid, playerhud[playerid][5], 1);
PlayerTextDrawSetOutline(playerid, playerhud[playerid][5], 1);
PlayerTextDrawBackgroundColor(playerid, playerhud[playerid][5], 150);
PlayerTextDrawFont(playerid, playerhud[playerid][5], 2);
PlayerTextDrawSetProportional(playerid, playerhud[playerid][5], 1);




	infotxt[playerid] = TextDrawCreate(325.000, 400.000, "~r~Bilgi Mesaji");
	TextDrawLetterSize(infotxt[playerid], 0.240, 1.099);
	TextDrawAlignment(infotxt[playerid], 2);
	TextDrawColor(infotxt[playerid], -1);
	TextDrawSetOutline(infotxt[playerid], 1);
	TextDrawBackgroundColor(infotxt[playerid], 255);
	TextDrawFont(infotxt[playerid], 3);
	TextDrawSetProportional(infotxt[playerid], 1);
	TextDrawSetShadow(infotxt[playerid], 1);

    /*TD_vehicle_name[playerid] = CreatePlayerTextDraw(playerid, 553.000000, 407.000000, "info");
	PlayerTextDrawBackgroundColor(playerid, TD_vehicle_name[playerid], 255);
	PlayerTextDrawFont(playerid, TD_vehicle_name[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_vehicle_name[playerid], 0.200000, 0.699998);
	PlayerTextDrawColor(playerid, TD_vehicle_name[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_vehicle_name[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_vehicle_name[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_vehicle_name[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TD_vehicle_name[playerid], 0);
	PlayerTextDrawHide(playerid, TD_vehicle_name[playerid]);*/

	/*drug_effect[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 0.000000, "_");
	PlayerTextDrawAlignment(playerid, drug_effect[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, drug_effect[playerid], 255);
	PlayerTextDrawFont(playerid, drug_effect[playerid], 1);
	PlayerTextDrawLetterSize(playerid, drug_effect[playerid], 0.500000, 53.000000);
	PlayerTextDrawColor(playerid, drug_effect[playerid], -1);
	PlayerTextDrawSetOutline(playerid, drug_effect[playerid], 0);
	PlayerTextDrawSetProportional(playerid, drug_effect[playerid], 1);
	PlayerTextDrawSetShadow(playerid, drug_effect[playerid], 1);
	PlayerTextDrawUseBox(playerid, drug_effect[playerid], 1);
	PlayerTextDrawBoxColor(playerid, drug_effect[playerid], -14837680);
	PlayerTextDrawTextSize(playerid, drug_effect[playerid], 0.000000, 1215.000000);
	PlayerTextDrawSetSelectable(playerid, drug_effect[playerid], 0);*/

	spectate_TD[playerid][0] = CreatePlayerTextDraw(playerid, 1.000000, 1.000000, "Loading ...");
	PlayerTextDrawBackgroundColor(playerid, spectate_TD[playerid][0], 255);
	PlayerTextDrawFont(playerid, spectate_TD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, spectate_TD[playerid][0], 0.230000, 0.899999);
	PlayerTextDrawColor(playerid, spectate_TD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, spectate_TD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, spectate_TD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, spectate_TD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, spectate_TD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, spectate_TD[playerid][0], 255);
	PlayerTextDrawTextSize(playerid, spectate_TD[playerid][0], 638.000000, 0.000000);

	spectate_TD[playerid][1] = CreatePlayerTextDraw(playerid, 1.000000, 437.000000, "Loading ...");
	PlayerTextDrawBackgroundColor(playerid, spectate_TD[playerid][1], 255);
	PlayerTextDrawFont(playerid, spectate_TD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, spectate_TD[playerid][1], 0.230000, 0.899999);
	PlayerTextDrawColor(playerid, spectate_TD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, spectate_TD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, spectate_TD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, spectate_TD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, spectate_TD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, spectate_TD[playerid][1], 255);
	PlayerTextDrawTextSize(playerid, spectate_TD[playerid][1], 638.000000, 0.000000);

	mulkbilgi[playerid] = CreatePlayerTextDraw(playerid, 265.000, 355.000, "");
	PlayerTextDrawTextSize(playerid, mulkbilgi[playerid], 115.000, 45.000);
	PlayerTextDrawAlignment(playerid, mulkbilgi[playerid], 1);
	PlayerTextDrawColor(playerid, mulkbilgi[playerid], -1);
	PlayerTextDrawSetShadow(playerid, mulkbilgi[playerid], 0);
	PlayerTextDrawSetOutline(playerid, mulkbilgi[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, mulkbilgi[playerid], 255);
	PlayerTextDrawFont(playerid, mulkbilgi[playerid], 1);
	PlayerTextDrawSetProportional(playerid, mulkbilgi[playerid], 1);

	mulktext[playerid][0] = CreatePlayerTextDraw(playerid, 322.000, 348.000, "~h~~r~SATILIK EV!~n~~w~UCRET: ~g~$21000");
	PlayerTextDrawLetterSize(playerid, mulktext[playerid][0], 0.200, 0.999);
	PlayerTextDrawAlignment(playerid, mulktext[playerid][0], 2);
	PlayerTextDrawColor(playerid, mulktext[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, mulktext[playerid][0], 1);
	PlayerTextDrawSetOutline(playerid, mulktext[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, mulktext[playerid][0], 150);
	PlayerTextDrawFont(playerid, mulktext[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, mulktext[playerid][0], 1);

	mulktext[playerid][1] = CreatePlayerTextDraw(playerid, 322.000, 377.000, "");
	PlayerTextDrawLetterSize(playerid, mulktext[playerid][1], 0.200, 0.999);
	PlayerTextDrawAlignment(playerid, mulktext[playerid][1], 2);
	PlayerTextDrawColor(playerid, mulktext[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, mulktext[playerid][1], 1);
	PlayerTextDrawSetOutline(playerid, mulktext[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, mulktext[playerid][1], 150);
	PlayerTextDrawFont(playerid, mulktext[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, mulktext[playerid][1], 1);

	PlayerTextdraws[playerid][LoginCharacterTD][0] = CreatePlayerTextDraw(playerid, 354.733428, 166.433563, "~y~Matthew Harper (Level: ~w~16~y~)~n~Market~w~ bolgesinde geziyor.");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0], 0.202996, 1.118813);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0], 581.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0], 1);

	PlayerTextdraws[playerid][LoginCharacterTD][1] = CreatePlayerTextDraw(playerid, 377.901916, 196.731704, "Giris Yap");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][LoginCharacterTD][1], 0.220998, 1.205927);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][LoginCharacterTD][1], 8.0, 46.0);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][LoginCharacterTD][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][LoginCharacterTD][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][LoginCharacterTD][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][LoginCharacterTD][1], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][LoginCharacterTD][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][LoginCharacterTD][1], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][LoginCharacterTD][1], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][LoginCharacterTD][1], true);

	PlayerTextdraws[playerid][LoginCharacterTD][2] = CreatePlayerTextDraw(playerid, 359.568450, 265.590988, "Geri");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], 0.285998, 1.529482);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], 8.0, 26.0);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], -19374593);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], true);

	PlayerTextdraws[playerid][LoginCharacterTD][3] = CreatePlayerTextDraw(playerid, 393.901916, 265.590988, "Ileri");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], 0.285998, 1.529482);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], 9.0, 29.0);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], -19374593);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], true);

    PlayerTextdraws[playerid][LoginCharacterTD][4] = CreatePlayerTextDraw(playerid, 548.666809, 75.229618, "888/888");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][LoginCharacterTD][4], 0.235333, 1.081481);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][LoginCharacterTD][4], 0.000000, 32.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][LoginCharacterTD][4], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][LoginCharacterTD][4], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][LoginCharacterTD][4], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][LoginCharacterTD][4], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][LoginCharacterTD][4], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][LoginCharacterTD][4], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][LoginCharacterTD][4], 1);

    // Staff spectating panel.

    PlayerTextdraws[playerid][SpectatingInfo][0] = CreatePlayerTextDraw(playerid, 297.666656, 276.696350, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][SpectatingInfo][0], 0.000000, 5.200002);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][SpectatingInfo][0], 0.000000, 695.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][SpectatingInfo][0], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][0], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][SpectatingInfo][0], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][0], 75);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][SpectatingInfo][0], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][0], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][SpectatingInfo][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][SpectatingInfo][0], 1);

    PlayerTextdraws[playerid][SpectatingInfo][1] = CreatePlayerTextDraw(playerid, 302.133483, 275.281494, "~y~Matthew Harper (ID: 0) - Hesap: 10000 - Karakter: 10000 - IP: 255.255.255.255");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][SpectatingInfo][1], 0.132666, 0.874073);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][SpectatingInfo][1], 0.000000, 686.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][SpectatingInfo][1], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][1], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][SpectatingInfo][1], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][SpectatingInfo][1], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][1], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][SpectatingInfo][1], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][SpectatingInfo][1], 1);

    PlayerTextdraws[playerid][SpectatingInfo][2] = CreatePlayerTextDraw(playerid, 69.666786, 287.481567, "~y~Bilgi:~w~ Ileri gecmek icin ~y~Y~w~, geri gitmek icin ~y~N~w~ ve yenilemek icin ~y~SPACE~w~ kullanabilirsiniz.");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][SpectatingInfo][2], 0.127999, 0.845036);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][SpectatingInfo][2], 0.000000, 127.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][SpectatingInfo][2], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][2], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][SpectatingInfo][2], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][SpectatingInfo][2], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][2], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][SpectatingInfo][2], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][SpectatingInfo][2], 1);

    PlayerTextdraws[playerid][SpectatingInfo][3] = CreatePlayerTextDraw(playerid, 146.532867, 284.577758, "Hiz: 999~n~Int/World: 999/999~n~Ping: 999 P/L: 99.99~n~Can CS/SS: 100.00/100.00~n~Zirh CS/SS: 100.00/100.00");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][SpectatingInfo][3], 0.150999, 0.791111);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][SpectatingInfo][3], 282.208435, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][SpectatingInfo][3], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][3], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][SpectatingInfo][3], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][SpectatingInfo][3], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][3], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][SpectatingInfo][3], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][SpectatingInfo][3], 1);

    PlayerTextdraws[playerid][SpectatingInfo][4] = CreatePlayerTextDraw(playerid, 284.641296, 284.577758, "Landstalker (ID: 2000)~n~Benzin: 100~n~Motor: Acik~n~Sahip: 10000 - Birlik: 1 - Mekan: 1");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][SpectatingInfo][4], 0.150999, 0.791111);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][SpectatingInfo][4], 420.316864, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][SpectatingInfo][4], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][4], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][SpectatingInfo][4], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][SpectatingInfo][4], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][4], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][SpectatingInfo][4], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][SpectatingInfo][4], 1);

    PlayerTextdraws[playerid][SpectatingInfo][5] = CreatePlayerTextDraw(playerid, 422.749725, 284.577758, "Desert Eagle (999 mermi)~n~Yarali: 0sn~n~Skin: 250~n~Anim: indexid");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][SpectatingInfo][5], 0.150999, 0.791111);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][SpectatingInfo][5], 558.411132, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][SpectatingInfo][5], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][5], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][SpectatingInfo][5], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][SpectatingInfo][5], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][SpectatingInfo][5], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][SpectatingInfo][5], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][SpectatingInfo][5], 1);

	//????????
	TD_restaurant_prod[playerid][0] = CreatePlayerTextDraw(playerid, 157.000000, 277.200042, "Product 1");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][0], 0.267998, 0.993332);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][0], 1);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][0], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][0], 1);

	TD_restaurant_prod[playerid][1] = CreatePlayerTextDraw(playerid, 239.000000, 277.200042, "Product 2");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][1], 0.267998, 0.993332);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][1], 1);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][1], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][1], 1);

	TD_restaurant_prod[playerid][2] = CreatePlayerTextDraw(playerid, 321.000000, 277.200042, "Product 3");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][2], 0.267998, 0.993332);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][2], 1);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][2], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][2], 1);

	TD_restaurant_prod[playerid][3] = CreatePlayerTextDraw(playerid, 403.000000, 277.200042, "Product 4");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][3], 0.267998, 0.993332);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][3], 1);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][3], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][3], 1);

	TD_restaurant_prod[playerid][4] = CreatePlayerTextDraw(playerid, 152.799987, 188.657760, "2218");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][4], 0.495200, 1.196799);
	PlayerTextDrawTextSize(playerid, TD_restaurant_prod[playerid][4], 59.999931, 68.195480);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][4], 2);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, TD_restaurant_prod[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, TD_restaurant_prod[playerid][4], 255);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][4], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][4], 5);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, TD_restaurant_prod[playerid][4], true);
	PlayerTextDrawSetPreviewModel(playerid, TD_restaurant_prod[playerid][4], 2218);
	PlayerTextDrawSetPreviewRot(playerid, TD_restaurant_prod[playerid][4], -220.000000, -200.000000, 200.000000, 1.000000);

	TD_restaurant_prod[playerid][5] = CreatePlayerTextDraw(playerid, 234.799987, 188.657760, "2219");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][5], 0.495200, 1.196799);
	PlayerTextDrawTextSize(playerid, TD_restaurant_prod[playerid][5], 59.999931, 68.195480);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][5], 2);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, TD_restaurant_prod[playerid][5], true);
	PlayerTextDrawBoxColor(playerid, TD_restaurant_prod[playerid][5], 255);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][5], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][5], 5);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, TD_restaurant_prod[playerid][5], true);
	PlayerTextDrawSetPreviewModel(playerid, TD_restaurant_prod[playerid][5], 2219);
	PlayerTextDrawSetPreviewRot(playerid, TD_restaurant_prod[playerid][5], -220.000000, -200.000000, 200.000000, 1.000000);

	TD_restaurant_prod[playerid][6] = CreatePlayerTextDraw(playerid, 316.799987, 188.657760, "2220");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][6], 0.495200, 1.196799);
	PlayerTextDrawTextSize(playerid, TD_restaurant_prod[playerid][6], 59.999931, 68.195480);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][6], 2);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, TD_restaurant_prod[playerid][6], true);
	PlayerTextDrawBoxColor(playerid, TD_restaurant_prod[playerid][6], 255);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][6], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][6], 5);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, TD_restaurant_prod[playerid][6], true);
	PlayerTextDrawSetPreviewModel(playerid, TD_restaurant_prod[playerid][6], 2220);
	PlayerTextDrawSetPreviewRot(playerid, TD_restaurant_prod[playerid][6], -220.000000, -200.000000, 200.000000, 1.000000);

	TD_restaurant_prod[playerid][7] = CreatePlayerTextDraw(playerid, 398.799987, 188.657760, "2355");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][7], 0.495200, 1.196799);
	PlayerTextDrawTextSize(playerid, TD_restaurant_prod[playerid][7], 59.999931, 68.195480);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][7], 2);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, TD_restaurant_prod[playerid][7], true);
	PlayerTextDrawBoxColor(playerid, TD_restaurant_prod[playerid][7], 255);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][7], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][7], 5);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, TD_restaurant_prod[playerid][7], true);
	PlayerTextDrawSetPreviewModel(playerid, TD_restaurant_prod[playerid][7], 2355);
	PlayerTextDrawSetPreviewRot(playerid, TD_restaurant_prod[playerid][7], -220.000000, -200.000000, 200.000000, 1.000000);

	FuelText[playerid] = CreatePlayerTextDraw(playerid, 40.000000, 305.000000, "~b~~h~Yakit dolduruluyor...~n~~n~~w~Ucret: ~g~~h~$0 ~y~~h~(0.00L)");
    PlayerTextDrawBackgroundColor(playerid, FuelText[playerid], 255);
    PlayerTextDrawFont(playerid, FuelText[playerid], 1);
    PlayerTextDrawLetterSize(playerid, FuelText[playerid], 0.240000, 1.100000);
    PlayerTextDrawColor(playerid, FuelText[playerid], -1);
    PlayerTextDrawSetOutline(playerid, FuelText[playerid], 1);
    PlayerTextDrawSetProportional(playerid, FuelText[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, FuelText[playerid], 0);

    OnayliHoodGirisTD[playerid][0] = CreatePlayerTextDraw(playerid, 319.000, 417.000, "VERCETTI'S AREA");
PlayerTextDrawLetterSize(playerid, OnayliHoodGirisTD[playerid][0], 0.190, 1.199);
PlayerTextDrawAlignment(playerid, OnayliHoodGirisTD[playerid][0], 2);
PlayerTextDrawColor(playerid, OnayliHoodGirisTD[playerid][0], -174);
PlayerTextDrawUseBox(playerid, OnayliHoodGirisTD[playerid][0], 1);
PlayerTextDrawBoxColor(playerid, OnayliHoodGirisTD[playerid][0], 54);
PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][0], 1);
PlayerTextDrawSetOutline(playerid, OnayliHoodGirisTD[playerid][0], 1);
PlayerTextDrawBackgroundColor(playerid, OnayliHoodGirisTD[playerid][0], 150);
PlayerTextDrawFont(playerid, OnayliHoodGirisTD[playerid][0], 2);
  PlayerTextDrawSetProportional(playerid, OnayliHoodGirisTD[playerid][0], 1);

	for(new i = 0; i < 4; i++)
	{
		TextDrawHideForPlayer(playerid, TD_restaurant[i]);
	}

    for(new i; i < 11; i++)
	{
	    TextDrawHideForPlayer(playerid, zond_cam[i]);
	}
}

SyncHudTextDraw(playerid)
{
	new hour, minute, second, year, month, day;
	new mes[320];
	getdate(year, month, day);
	gettime(hour, minute, second);

	new location[MAX_ZONE_NAME],
		Float:x, Float:y, Float:z;

	if(GetPlayerVirtualWorld(playerid) > 0) location = "Mekan";
	else
	{
	    GetPlayerPos(playerid, x, y, z);
	    GetZone(x, y, location, MAX_ZONE_NAME);
	    strreplace(location, ' ', '_');
	}
        format(mes, sizeof(mes), "%s", location);
	PlayerTextDrawSetString(playerid, playerhud[playerid][4], mes);
	format(mes, sizeof(mes), "%i/%i/%02d,%i:%i_LOSWORLD_%s(%d)", day, month, year, hour, minute, GetName(playerid), playerid);
   	PlayerTextDrawSetString(playerid, playerhud[playerid][0], mes);

}

SyncHudTextDrawModern(playerid)
{
	new hour, minute, second, year, month, day;
	new mes[256];
	getdate(year, month, day);
	gettime(hour, minute, second);
      	format(mes, sizeof(mes), "%i/%i/%02d, %i:%i -~y~ LCRP", day, month, year, hour, minute);
   	PlayerTextDrawSetString(playerid, playerhud[playerid][3], mes);
	format(mes, sizeof(mes), "%i~y~(%s)", playerid, GetNameEx(playerid));
	PlayerTextDrawSetString(playerid, playerhud[playerid][5], mes);

	new location[MAX_ZONE_NAME],
		Float:x, Float:y, Float:z;

	if(GetPlayerVirtualWorld(playerid) > 0) location = "Mekan";
	else
	{
	    GetPlayerPos(playerid, x, y, z);
	    GetZone(x, y, location, MAX_ZONE_NAME);
	    strreplace(location, ' ', '_');
	}

	format(mes, sizeof(mes), "%s", location);
	PlayerTextDrawSetString(playerid, playerhud[playerid][4], mes);
}

ShowHudTextDraw(playerid)
{
	new hour, minute, second, year, month, day;
	new mes[320];
	getdate(year, month, day);
	gettime(hour, minute, second);

	new location[MAX_ZONE_NAME],
		Float:x, Float:y, Float:z;

	if(GetPlayerVirtualWorld(playerid) > 0) location = "Mekan";
	else
	{
	    GetPlayerPos(playerid, x, y, z);
	    GetZone(x, y, location, MAX_ZONE_NAME);
	    strreplace(location, ' ', '_');
	}

	format(mes, sizeof(mes), "%s", location);
	PlayerTextDrawSetString(playerid, playerhud[playerid][4], mes);
	format(mes, sizeof(mes), "%i/%i/%02d_~y~LOSWORLD~w~_%s(%d)", day, month, year, GetName(playerid), playerid);
   	PlayerTextDrawSetString(playerid, playerhud[playerid][0], mes);
	PlayerTextDrawShow(playerid, playerhud[playerid][0]);
	PlayerTextDrawHide(playerid, playerhud[playerid][1]);
	PlayerTextDrawHide(playerid, playerhud[playerid][2]);
	PlayerTextDrawHide(playerid, playerhud[playerid][3]);
	PlayerTextDrawHide(playerid, playerhud[playerid][5]);
        PlayerTextDrawShow(playerid, playerhud[playerid][4]);
	return 1;
}

ShowHudTextDrawModern(playerid)
{
	new hour, minute, second, year, month, day;
	new mes[256];
	getdate(year, month, day);
	gettime(hour, minute, second);
	format(mes, sizeof(mes), "%i/%i/%02d, %i:%i - ~y~LCRPv0.1", day, month, year, hour, minute);
   	PlayerTextDrawSetString(playerid, playerhud[playerid][3], mes);
	format(mes, sizeof(mes), "%i~y~(%s)", playerid, GetNameEx(playerid));
	PlayerTextDrawSetString(playerid, playerhud[playerid][5], mes);


	new location[MAX_ZONE_NAME],
		Float:x, Float:y, Float:z;

	if(GetPlayerVirtualWorld(playerid) > 0) location = "Mekan";
	else
	{
	    GetPlayerPos(playerid, x, y, z);
	    GetZone(x, y, location, MAX_ZONE_NAME);
	    strreplace(location, ' ', '_');
	}

	format(mes, sizeof(mes), "%s", location);
	PlayerTextDrawSetString(playerid, playerhud[playerid][4], mes);

	PlayerTextDrawHide(playerid, playerhud[playerid][0]);
	PlayerTextDrawShow(playerid, playerhud[playerid][1]);
	PlayerTextDrawShow(playerid, playerhud[playerid][2]);
	PlayerTextDrawShow(playerid, playerhud[playerid][3]);
	PlayerTextDrawShow(playerid, playerhud[playerid][4]);
        PlayerTextDrawShow(playerid, playerhud[playerid][5]);
	return 1;
}

HideHudTextDraw(playerid)
{
	PlayerTextDrawHide(playerid, playerhud[playerid][0]);
	PlayerTextDrawHide(playerid, playerhud[playerid][1]);
	PlayerTextDrawHide(playerid, playerhud[playerid][2]);
	PlayerTextDrawHide(playerid, playerhud[playerid][3]);
	PlayerTextDrawHide(playerid, playerhud[playerid][4]);
        PlayerTextDrawHide(playerid, playerhud[playerid][5]);
	return 1;
}

HideHudTextDrawModern(playerid)
{
        PlayerTextDrawHide(playerid, playerhud[playerid][3]);
	PlayerTextDrawShow(playerid, playerhud[playerid][4]);
	PlayerTextDrawHide(playerid, playerhud[playerid][2]);
	PlayerTextDrawHide(playerid, playerhud[playerid][1]);
       PlayerTextDrawHide(playerid, playerhud[playerid][5]);
	return 1;
}

InfoMSG(playerid, info[], delay)
{
	ReplaceText(info, "?", "g");
	ReplaceText(info, "?", "G");
	ReplaceText(info, "?", "u");
	ReplaceText(info, "?", "U");
	ReplaceText(info, "?", "s");
	ReplaceText(info, "?", "S");
	ReplaceText(info, "?", "c");
	ReplaceText(info, "?", "C");
	ReplaceText(info, "?", "o");
	ReplaceText(info, "?", "O");
	ReplaceText(info, "?", "i");
	ReplaceText(info, "?", "I");

	TextDrawFont(infotxt[playerid], 1);
	TextDrawSetString(infotxt[playerid], info);
	TextDrawShowForPlayer(playerid, infotxt[playerid]);
	infotxt_expire{playerid} = delay;
	return 1;
}

InfoMSG2(playerid, header[], info[], delay)
{
	ReplaceText(info, "?", "g");
	ReplaceText(info, "?", "G");
	ReplaceText(info, "?", "u");
	ReplaceText(info, "?", "U");
	ReplaceText(info, "?", "s");
	ReplaceText(info, "?", "S");
	ReplaceText(info, "?", "c");
	ReplaceText(info, "?", "C");
	ReplaceText(info, "?", "o");
	ReplaceText(info, "?", "O");
	ReplaceText(info, "?", "i");
	ReplaceText(info, "?", "I");

	TD_SendMessage(playerid, info, header, delay, 12840, 10.0000, 100.000000, 300.000000, strlen(info));
	return 1;
}

RestaurantMenuHide(playerid)
{
    CancelSelectTextDraw(playerid);
	for(new i; i != 8; i++)
	{
 		if (i < 4)
		 	TextDrawHideForPlayer(playerid, TD_restaurant[i]);

		PlayerTextDrawHide(playerid, TD_restaurant_prod[playerid][i]);
	}
	DeletePVar(playerid, #restaurant);
	return 1;
}

/*TextHud_Update(playerid, vehicleid = 0)
{
    if(!HudStatus{playerid})
	{
		ToggleHudTextdraw(playerid, true);
	}

    new slotnumara = PlayerInfo[playerid][pSlot], channelnumara, hudstring[256];

	if(slotnumara >= 1)
	{
		channelnumara = PlayerInfo[playerid][pChannel];
	}
	else channelnumara = 0;

	if(channelnumara == -1) slotnumara = 0;

    if(!vehicleid)
    {
		switch(PlayerInfo[playerid][pHud])
		{
		    case 0:
		    {
		        if(channelnumara > 99999)
		        {
		            format(hudstring, sizeof(hudstring), "~b~TELSIZ BILGILERI~n~~b~Kanal: ~g~~n~%d~n~~b~Slot: ~g~%d", channelnumara, slotnumara);
		            PlayerTextDrawSetString(playerid, HudTextDraw[playerid], hudstring);
		        }
		        else
		        {
		            format(hudstring, sizeof(hudstring), "~b~TELSIZ BILGILERI~n~~b~Kanal: ~g~%d~n~~b~Slot: ~g~%d", channelnumara, slotnumara);
		            PlayerTextDrawSetString(playerid, HudTextDraw[playerid], hudstring);
		        }
			}
            case 1:
            {
 				format(hudstring, sizeof(hudstring), "_~n~~w~TELSIZ BILGILERI: ~y~%d~n~~w~Slot: ~y~%d", channelnumara, slotnumara);
	            PlayerTextDrawSetString(playerid, HudTextDraw[playerid], hudstring);
            }
            case 2, 3:
			{
				if(HudStatus{playerid})
				{
					ToggleHudTextdraw(playerid, false);
				}
			}
            case 4:
            {
  				format(hudstring, sizeof(hudstring), "~w~TELSIZ BILGILERI:~n~%d ~n~slot: %d", channelnumara, slotnumara);
	            PlayerTextDrawSetString(playerid, HudTextDraw[playerid], hudstring);
            }
		}
    }
    else
    {
	    new aracmodel = GetVehicleModel(vehicleid), Float: kmh_speed = GetVehicleSpeed(vehicleid), Float: mph_speed = GetVehicleSpeed(vehicleid);

        switch(PlayerInfo[playerid][pHud])
        {
			case 0:
			{
		        if(!IsABicycle(vehicleid))
		        {
		            if(channelnumara > 99999)
		            {
		                format(hudstring, sizeof(hudstring), "~r~Km/h: ~r~%.0f~n~~r~Yakit: ~g~%d~n~ ~n~~b~TELSIZ BILGILERI~n~~b~Kanal: ~g~~n~%d~n~~b~Slot: ~g~%d", kmh_speed, floatround(VehicleInfo[vehicleid][carFuel]/GetVehicleFuelCapacity(GetVehicleModel(vehicleid)) * 100), channelnumara, slotnumara);
		                PlayerTextDrawSetString(playerid, HudTextDraw[playerid], hudstring);
		            }
		            else
		            {
		                format(hudstring, sizeof(hudstring), "~b~Km/h: ~g~%.0f~n~~b~Yakit: ~g~%d~n~ ~n~~b~TELSIZ BILGILERI~n~~b~Kanal: ~g~%d~n~~b~Slot: ~g~%d", kmh_speed, floatround(VehicleInfo[vehicleid][carFuel]/GetVehicleFuelCapacity(GetVehicleModel(vehicleid)) * 100), channelnumara, slotnumara);
		                PlayerTextDrawSetString(playerid, HudTextDraw[playerid], hudstring);
		            }
		        }
		        else
		        {
		            if(channelnumara > 99999)
		            {
		                format(hudstring, sizeof(hudstring), "~g~Km/h: ~g~%.0f~n~~g~Yakit: ~g~--~n~ ~n~~b~TELSIZ BILGILERI~n~~b~Kanal: ~g~~n~%d~n~~b~Slot: ~g~%d", kmh_speed, channelnumara, slotnumara);
		                PlayerTextDrawSetString(playerid, HudTextDraw[playerid], hudstring);
		            }
		            else
		            {
		                format(hudstring, sizeof(hudstring), "~g~Km/h: ~g~%.0f~n~~r~Yakit: ~g~--~n~ ~n~~b~TELSIZ BILGILERI~n~~b~Kanal: ~g~%d~n~~b~Slot: ~g~%d", kmh_speed, channelnumara, slotnumara);
		                PlayerTextDrawSetString(playerid, HudTextDraw[playerid], hudstring);
		            }
		        }
			}
			case 1:
			{
				if(!IsABicycle(vehicleid))
					format(hudstring, sizeof(hudstring), "~w~%s~r~ %d %.0f~y~KMH~w~/~y~%.0f~r~MPH", VehicleNames[aracmodel-400], floatround(VehicleInfo[vehicleid][carFuel]/GetVehicleFuelCapacity(GetVehicleModel(vehicleid)) * 100), kmh_speed, mph_speed);
				else
					format(hudstring, sizeof(hudstring), "~w~%s~r~ -- %.0f~y~KMH~w~/~y~%.0f~r~MPH", VehicleNames[aracmodel-400], kmh_speed, mph_speed);

				format(hudstring, sizeof(hudstring), "%s~n~~w~TELSIZ BILGILERI: ~y~%d~n~~w~Slot: ~y~%d", hudstring, channelnumara, slotnumara);

				PlayerTextDrawSetString(playerid, HudTextDraw[playerid], hudstring);
			}
			case 2:
			{
			    new Float:vehicleHealth;
			    GetVehicleHealth(vehicleid, vehicleHealth);

				if(!IsABicycle(vehicleid))
					format(hudstring, sizeof(hudstring), "~l~%s~n~ ~w~%.0f  ~l~%.0f ~w~%.0f ~l~%d", VehicleNames[aracmodel-400], mph_speed, kmh_speed, vehicleHealth, floatround(floatdiv(VehicleInfo[vehicleid][carFuel], GetVehicleFuelCapacity(aracmodel)) * 100, floatround_round));
				else
					format(hudstring, sizeof(hudstring), "~l~%s~n~ ~w~%.0f  ~l~%.0f ~w~%.0f ~l~--", VehicleNames[aracmodel-400], mph_speed, kmh_speed, vehicleHealth);

				PlayerTextDrawSetString(playerid, HudTextDraw[playerid], hudstring);
			}
			case 3:
			{
				if(!IsABicycle(vehicleid))
					format(hudstring, sizeof(hudstring), "~g~%d ~r~%d ~w~%d", floatround(VehicleInfo[vehicleid][carFuel]/GetVehicleFuelCapacity(GetVehicleModel(vehicleid)) * 100), floatround(mph_speed), floatround(kmh_speed));
				else
					format(hudstring, sizeof(hudstring), "~g~-- ~r~%d- ~w~%d", floatround(mph_speed), floatround(kmh_speed));

				PlayerTextDrawSetString(playerid, HudTextDraw[playerid], hudstring);
			}
			case 4:
			{
				new shortstr[128];

				if(!IsABicycle(vehicleid))
				{
					format(hudstring, sizeof(hudstring), "~w~TELSIZ BILGILERI:~n~%d ~n~slot: %d", channelnumara, slotnumara);

					switch(floatround(mph_speed))
					{
					    case 0..10: shortstr = "~n~~w~-";
					    case 11..20: shortstr = "~n~~w~--";
					    case 21..30: shortstr = "~n~~w~---";
					    case 31..40: shortstr = "~n~~w~---~g~-";
					    case 41..50: shortstr = "~n~~w~---~g~--";
					    case 51..60: shortstr = "~n~~w~---~g~---";
					    case 61..70: shortstr = "~n~~w~---~g~---~y~-";
					    case 71..80: shortstr = "~n~~w~---~g~---~y~--";
					    case 81..90: shortstr = "~n~~w~---~g~---~y~---";
					    case 91..100: shortstr = "~n~~w~---~g~---~y~---~r~-";
					    case 101..110: shortstr = "~n~~w~---~g~---~y~---~r~--";
					    case 111..400: shortstr = "~n~~w~---~g~---~y~---~r~---";
					}

					strcat(hudstring, shortstr);
				}
				else format(hudstring, sizeof(hudstring), "~w~TELSIZ BILGILERI:~n~%d ~n~slot: %d", channelnumara, slotnumara);

				PlayerTextDrawSetString(playerid, HudTextDraw[playerid], hudstring);
			}
		}
    }
    return true;
}

ToggleHudTextdraw(playerid, bool:status)
{
	HudStatus{playerid} = status;

	if(status)
	{
		PlayerTextDrawShow(playerid, HudTextDraw[playerid]);
	}
	else
	{
		PlayerTextDrawHide(playerid, HudTextDraw[playerid]);
	}

	return true;
}

CreatePlayerHUD(playerid)
{
    HUD_Created{playerid} = false;

    PlayerTextDrawDestroy(playerid, HudTextDraw[playerid]);

	switch(PlayerInfo[playerid][pHud])
	{
		case 0:
		{
			HudTextDraw[playerid] = CreatePlayerTextDraw(playerid, 545.000000, 110.000000, ""); //~b~RADIO INFO~n~~b~Kanal: ~g~0~n~~b~Slot: ~g~1
			PlayerTextDrawLetterSize(playerid, HudTextDraw[playerid], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, HudTextDraw[playerid], 60.000000, 100.000000);
			PlayerTextDrawAlignment(playerid, HudTextDraw[playerid], 2);
			PlayerTextDrawColor(playerid, HudTextDraw[playerid], -1);
			PlayerTextDrawSetShadow(playerid, HudTextDraw[playerid], 2);
			PlayerTextDrawSetOutline(playerid, HudTextDraw[playerid], 0);
			PlayerTextDrawBackgroundColor(playerid, HudTextDraw[playerid], 255);
			PlayerTextDrawFont(playerid, HudTextDraw[playerid], 3);
			PlayerTextDrawSetProportional(playerid, HudTextDraw[playerid], 1);
  		}
		case 1:
		{
			HudTextDraw[playerid] = CreatePlayerTextDraw(playerid, 12.999976, 125.288810, ""); //BMX -- 62KMH/39MPH~n~Radio Info: 0~n~Slot: 1
			PlayerTextDrawLetterSize(playerid, HudTextDraw[playerid], 0.297999, 1.550219);
			PlayerTextDrawTextSize(playerid, HudTextDraw[playerid], 1705.000000, 0.000000);
			PlayerTextDrawAlignment(playerid, HudTextDraw[playerid], 1);
			PlayerTextDrawColor(playerid, HudTextDraw[playerid], -1);
			PlayerTextDrawSetShadow(playerid, HudTextDraw[playerid], 0);
			PlayerTextDrawSetOutline(playerid, HudTextDraw[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, HudTextDraw[playerid], 0x000000AA);
			PlayerTextDrawFont(playerid, HudTextDraw[playerid], 1);
			PlayerTextDrawSetProportional(playerid, HudTextDraw[playerid], 1);
		}
		case 2:
		{
			HudTextDraw[playerid] = CreatePlayerTextDraw(playerid, 507.666748, 400.725708, "");
			PlayerTextDrawLetterSize(playerid, HudTextDraw[playerid], 0.601332, 2.392297);
			PlayerTextDrawTextSize(playerid, HudTextDraw[playerid], 0.000000, 2366.000000);
			PlayerTextDrawAlignment(playerid, HudTextDraw[playerid], 2);
			PlayerTextDrawColor(playerid, HudTextDraw[playerid], 255);
			PlayerTextDrawSetShadow(playerid, HudTextDraw[playerid], 0);
			PlayerTextDrawSetOutline(playerid, HudTextDraw[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, HudTextDraw[playerid], -1431655681);
			PlayerTextDrawFont(playerid, HudTextDraw[playerid], 2);
			PlayerTextDrawSetProportional(playerid, HudTextDraw[playerid], 1);
		}
		case 3:
		{
			HudTextDraw[playerid] = CreatePlayerTextDraw(playerid, 553.524169, 96.426689, ""); //~g~0 ~r~0 ~w~0
			PlayerTextDrawLetterSize(playerid, HudTextDraw[playerid], 0.571142, 2.406401);
			PlayerTextDrawAlignment(playerid, HudTextDraw[playerid], 2);
			PlayerTextDrawColor(playerid, HudTextDraw[playerid], -1);
			PlayerTextDrawSetShadow(playerid, HudTextDraw[playerid], 0);
			PlayerTextDrawSetOutline(playerid, HudTextDraw[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, HudTextDraw[playerid], 255);
			PlayerTextDrawFont(playerid, HudTextDraw[playerid], 3);
			PlayerTextDrawSetProportional(playerid, HudTextDraw[playerid], 1);
		}
		case 4:
		{
			HudTextDraw[playerid] = CreatePlayerTextDraw(playerid, 554.286499, 369.493011, ""); //~w~Radio Info:~n~911 ~n~slot: 1~n~~w~---~g~---~y~---~r~---
			PlayerTextDrawLetterSize(playerid, HudTextDraw[playerid], 0.366190, 1.190400);
			PlayerTextDrawAlignment(playerid, HudTextDraw[playerid], 1);
			PlayerTextDrawColor(playerid, HudTextDraw[playerid], -1);
			PlayerTextDrawSetShadow(playerid, HudTextDraw[playerid], 0);
			PlayerTextDrawSetOutline(playerid, HudTextDraw[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, HudTextDraw[playerid], 255);
			PlayerTextDrawFont(playerid, HudTextDraw[playerid], 3);
			PlayerTextDrawSetProportional(playerid, HudTextDraw[playerid], 1);
		}
	}

	HUD_Created{playerid} = true;
}*/

TD_OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if (pTemp[playerid][p3DMenu] != -1 && clickedid == Text:INVALID_TEXT_DRAW)
	{
    	Destroy3DMenu(pTemp[playerid][p3DMenu]);
		pTemp[playerid][p3DMenu] = -1;
		pc_cmd_dekorasyon(playerid, "");
		return 1;
	}

	if (GetPVarInt(playerid, #restaurant) == 1 && clickedid == Text:INVALID_TEXT_DRAW)	return RestaurantMenuHide(playerid);
    if (clickedid == TD_restaurant[3])													return RestaurantMenuHide(playerid);
	return 1;
}

/* Admin sistemi */

this::OfflineBlockPlayer (playerid, account [], reason [])
{
    if (cache_num_rows () == 0)
	return SendErrorMessage (playerid, "%s adlý karakter veritabanýnda bulunamadý.", account);

    new status;
	cache_get_value_int(0, "status", status);

	if (status == 3) return SendErrorMessage (playerid, "%s karakteri zaten engellenmiþ.", account);
    if (status != 1) return SendErrorMessage (playerid, "%s karakteri zaten aktif.", account);

	new query [256];
	mysql_format (dbHandle, query, sizeof (query), "UPDATE `users` SET `block_name`='%e', `block_reason`='%e', `status`='3' WHERE `name`='%e'", GetAccName(playerid), reason, account);
	mysql_tquery (dbHandle, query);

    format (query, sizeof (query), "[LOG] [OFFLINE] %s adlý karakter %s adlý yönetici tarafýndan engellendi. Sebep: %s", account, GetAccName (playerid), reason);
	SendClientMessageByAdmin (COLOUR_TOMATO, query);
	return 1;
}

this::UnBlockPlayer(playerid, account[])
{
	if (cache_num_rows() == 0) return SendErrorMessage(playerid, "%s adlý karakter veritabanýnda bulunamadý.", account);
	new status;
	cache_get_value_int(0, "status", status);
	if (status != 3) return SendErrorMessage(playerid, "%s karakteri yasaklý deðil.", account);

	SendAdmMessage("%s adlý kullanýcýnýn engeli %s adlý yetkili tarafýndan kaldýrýldý.", account, GetAccName(playerid));

	new query[256];

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `status`='1' WHERE `name`='%e'", account);
	mysql_tquery(dbHandle, query);
	return 1;
}

this::OfflineBanPlayer(playerid, account[], time, reason[])
{
    if (cache_num_rows() == 0) return SendErrorMessage(playerid, "%s adlý karakter veritabanýnda bulunamadý.", account);
	new banid;
	cache_get_value_int(0, "banid", banid);
	if (banid != 0) return SendErrorMessage(playerid, "%s adlý karakter yasaklý.", account);

	new admin;
	cache_get_value_int(0, "admin", admin);
	new accountid;
	cache_get_value_int(0, "forum_id", accountid);

	if (admin > PlayerInfo[playerid][pAdmin]) return SendAdmMessage("%s [ID: %i] adlý kiþi %s adlý kiþiyi offline olarak yasaklamaya çalýþtý. Sebep: %s.", GetAccName(playerid), account, reason);
    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `bans` (accountid,name,admin,reason,date) VALUES (%i,'%e','%s','%e','%s')", accountid, account, GetAccName(playerid), reason, GetFullDate());
	mysql_tquery(dbHandle, query);

    format(query, sizeof(query), "[/offban] %s adlý karakter %s adlý yönetici tarafýndan %i gün yasaklandý. Sebep: %s", account, GetAccName(playerid), time, reason);
	insert_log(query, ADMIN_LOG, 1, accountid, PlayerInfo[playerid][pAccID]);

    format(query, sizeof(query), "[LOG] %s adlý karakter %s adlý yönetici tarafýndan %i gün yasaklandý. Sebep: %s", account, GetAccName(playerid), time, reason);
	SendClientMessageByAdmin(COLOUR_TOMATO, query);
	return 1;
}

this::UnBanPlayer(playerid, account[])
{
	if (!cache_num_rows())	return SendErrorMessage(playerid, "%s adlý karakter veritabanýnda bulunamadý.", account);
    SendAdmMessage("%s adlý karakterin yasaklamasý %s adlý yetkili tarafýndan kaldýrýldý.", account, GetAccName(playerid));

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `bans` WHERE `name` = '%e'", account);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "SELECT accountid FROM `bans` WHERE `name` = '%e' LIMIT 1", account);
	new Cache:cache = mysql_query(dbHandle, query),
		accountid;

    cache_get_value_int(0, "accountid", accountid);

	format(query, sizeof(query), "[/unban] %s adlý karakterin yasaklamasý %s adlý yetkili tarafýndan kaldýrýldý.", account, GetAccName(playerid));
	insert_log(query, ADMIN_LOG, 12, accountid, PlayerInfo[playerid][pAccID]);

	cache_delete(cache);
	cache = MYSQL_INVALID_CACHE;
	return 1;
}

this::UnBanAnIP(playerid, ip[])
{
	if (!cache_num_rows())	return SendErrorMessage(playerid, "%s IP engelli deðil.", ip);

    SendAdmMessage("%s adlý yetkili tarafýndan %s IP engeli kaldýrýldý.", GetAccName(playerid), ip);

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `bans` WHERE `ip` = '%e'", ip);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "SELECT accountid FROM `bans` WHERE `ip` = '%e' LIMIT 1", ip);
	new Cache:cache = mysql_query(dbHandle, query),
		accountid;

    cache_get_value_int(0, "accountid", accountid);

	new mes[128];
	format(mes, sizeof(mes), "[/unbanip] IP: %s engeli %s adlý yetkili tarafýndan kaldýrýldý.", ip, GetAccName(playerid));
	insert_log(query, ADMIN_LOG, 12, accountid, PlayerInfo[playerid][pAccID]);

	cache_delete(cache);
	cache = MYSQL_INVALID_CACHE;
	return 1;
}

this::OnChangeName(playerid, userid, newname[])
{
	if (cache_num_rows())	return SendErrorMessage(playerid, "%s adlý karakter adý zaten kullanýlýyor.", newname);

	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || !CompareStrings(GetName(i), newname)) continue;

		SendErrorMessage(playerid, "%s adlý karakter adý zaten kullanýlýyor.", newname);
		return 1;
	}

	if (!PlayerInfo[userid][pNameChanges]) return SendErrorMessage(playerid, "Oyuncunun isim deðiþiklik hakký bulunmuyor.");

    PlayerInfo[userid][pNameChanges]--;
	SQL_SetStringAcc("accounts", "name_changes", PlayerInfo[userid][pNameChanges], PlayerInfo[userid][pAccID]);

	new oldname[MAX_PLAYER_NAME];
	GetPlayerName(userid, oldname, MAX_PLAYER_NAME);

	ChangeName(userid, newname);
	SendAdmMessage("%s adlý yetkili %s adlý karakterin isim deðiþikliðini onayladý. Yeni: %s.", GetAccName(playerid), oldname, newname);
	SendSyntaxMessage(userid, "%s adlý yetkili tarafýndan %s olan karakter adýnýz %s olarak deðiþtirildi.", GetAccName(playerid), oldname, newname);
	return 1;
}

this::OnAdminChangeNickName(playerid, userid, newname[])
{
	if (cache_num_rows())	return SendErrorMessage(playerid, "%s adlý forum adý zaten kullanýlýyor.", newname);

	SendAdmMessage("%s adlý yetkili tarafýndan %s olan hesap adý deðiþtirildi. Yeni: %s.", GetAccName(playerid), GetAccName(userid), newname);
	SendSyntaxMessage(userid, "%s adlý yetkili tarafýndan %s olan hesap adýnýz %s olarak deðiþtirildi.", GetAccName(playerid), GetAccName(userid), newname);

    format(PlayerInfo[userid][pAccname], 36, newname);
	return 1;
}


this::OnAdminChangeName(playerid, userid, newname[])
{
	if (cache_num_rows())	return SendErrorMessage(playerid, "%s adlý karakter adý zaten kullanýlýyor.", newname);

	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || !CompareStrings(GetName(i), newname)) continue;
		SendErrorMessage(playerid, "%s adlý karakter adý zaten kullanýlýyor.", newname);
		return 1;
	}

	new oldname[MAX_PLAYER_NAME];
	GetPlayerName(userid, oldname, MAX_PLAYER_NAME);

	ChangeName(userid, newname);
	SendAdmMessage("%s adlý yetkili tarafýndan %s adlý karakterin adýný deðiþtirildi. Yeni: %s.", GetAccName(playerid), oldname, newname);
	SendSyntaxMessage(userid, "%s adlý yetkili tarafýndan %s olan karakter adýnýz %s olarak deðiþtirildi.", GetAccName(playerid), oldname, newname);
	return 1;
}

this::OnAdminTraceNumber(playerid, number)
{
	new rows = cache_num_rows(), name[MAX_PLAYER_NAME];
	if(rows)
	{
		cache_get_value(0, "name", name);
		SendServerMessage(playerid, "%d numarasý %s adlý kiþiye ait.", number, name);
	}
	else return SendErrorMessage(playerid, "Bu numaraya ait bir kiþi bulunamadý.");
	return 1;
}

ChangeName(userid, newname[])
{
    new oldname[MAX_PLAYER_NAME];
	GetPlayerName(userid, oldname, MAX_PLAYER_NAME);

	format(PlayerInfo[userid][pUsername], MAX_PLAYER_NAME+1, newname);
    format(PlayerInfo[userid][pUsername_], MAX_PLAYER_NAME+1, newname);
    strreplace(PlayerInfo[userid][pUsername_], '_', ' ');

    if (!maskOn{userid})
	{
	    SetPlayerName(userid, newname);
    	format(PlayerInfo[userid][pMaskname], 32, PlayerInfo[userid][pUsername_]);
	}

	for(new i; i != MAX_HOUSES; i++)
	{
	    if (!HouseInfo[i][hID] || HouseInfo[i][hOwnerID] != PlayerInfo[userid][pID]) continue;

		format(HouseInfo[i][hOwner], MAX_PLAYER_NAME, GetNameEx(userid));
	}

	for(new i; i != MAX_BIZ; i++)
	{
	    if (!BizInfo[i][bizID] || BizInfo[i][bizOwnerID] != PlayerInfo[userid][pID]) continue;

		format(BizInfo[i][bizOwner], MAX_PLAYER_NAME, GetName(userid));
	}

	foreach(new i:Vehicle)
	{
		if (VehicleInfo[i][carOwnerID] != PlayerInfo[userid][pID]) continue;

		format(VehicleInfo[i][carOwner], MAX_PLAYER_NAME, GetNameEx(userid));
	}

	SQL_SetString("users", "name", newname, PlayerInfo[userid][pID]);

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `tickets` WHERE `userid`=%i", PlayerInfo[userid][pID]);
	mysql_tquery(dbHandle, query);

	DeletePlayerTickets(userid);
	return 1;
}

this::AdminSetPlate(playerid, vehicleid, plate[])
{
	if (cache_num_rows())	return SendErrorMessage(playerid, "Belirtilen plaka baþka bir araç tarafýndan kullanýlýyor.");

    format(VehicleInfo[vehicleid][carPlate], 24, "%s", plate);
	SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][carPlate]);
	RespawnVehicle(vehicleid, 1);
	Save_Car(vehicleid);

	SendSyntaxMessage(playerid, "%s olan plaka deðiþtirildi. Yeni plaka: %s.", VehicleNames[GetVehicleModel(vehicleid)-400], plate);

	SAMALL("%s adlý kiþi tarafýndan %s model aracýn [ID %i] plakasý deðiþtirildi. Yeni: %s.", GetAccName(playerid), VehicleNames[GetVehicleModel(vehicleid)-400], vehicleid, plate);

	new mes[128];
	format(mes, sizeof(mes), "[/aracplaka] %s adlý yetkili tarafýndan %s model aracýn plakasý deðiþtirildi. Plaka: %s.", GetAccName(playerid), VehicleNames[GetVehicleModel(vehicleid)-400], plate);
	insert_log(mes, ADMIN_LOG, 6, 0, PlayerInfo[playerid][pAccID]);
	return 1;
}

this::OnPlayerOfflineJail(playerid, name[32], time, reason[32])
{
    new rows, fields;

	rows = cache_num_rows();
	fields = cache_num_fields();

	if (rows)
	{
		new prefix[16] = "oyuncu";
		if (PlayerInfo[playerid][pAdmin] > 0) prefix = "yönetici";

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "SELECT accountid FROM `users` WHERE `name` = '%e' LIMIT 1", name);
		new Cache:cache = mysql_query(dbHandle, query),
			accountid;

		cache_get_value_int(0, "accountid", accountid);

		new mes[128];
		format(mes, sizeof(mes), "[LOG] %s adlý karakter %s %s tarafýndan %i dakika hapise gönderildi. Sebep: %s", name, prefix, GetAccName(playerid), time, reason);
		SendClientMessageByAdmin(COLOUR_TOMATO, mes);

		format(mes, sizeof(mes), "[/offjail] %s adlý karakter %s %s tarafýndan %i dakika hapise gönderildi. Sebep: %s", name, prefix, GetAccName(playerid), time, reason);
		insert_log(mes, ADMIN_LOG, 51, accountid, PlayerInfo[playerid][pAccID]);

	    mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `ajailed`='1',`ajailtime`='%d' WHERE `name`='%e'", time, name);
	    mysql_tquery(dbHandle, query);

		cache_delete(cache);
		cache = MYSQL_INVALID_CACHE;
	}
	else
	{
		SendErrorMessage(playerid, "%s adlý karakteri hapise gönderemediniz.", name);
	}
	return 1;
}

this::BanAnIP(playerid, ip[], reason[])
{
	if (cache_num_rows()) return SendErrorMessage(playerid, "Belirtilen IP (%s) zaten engellenmiþ.", ip);

    SendAdmMessage("%s tarafýndan IP engellendi. IP: %s.", GetAccName(playerid), ip);

	new pIP[24];
	foreach(new i : Player)
	{
		GetPlayerIp(i, pIP, sizeof(pIP));

		if (!IsPlayerLogged(i) || !CompareStrings(ip, pIP)) continue;

		SendErrorMessage(i, "IP\'niz bu sunucudan engelli. IP: %s", ip);
		KickEx(i);
	}

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `bans` (admin, reason, date, ip) VALUES ('%s', '%e', '%s', '%e')", GetAccName(playerid), reason, GetFullDate(), ip);
	mysql_tquery(dbHandle, query);
	return 1;
}

ClearKillFeed(playerid = INVALID_PLAYER_ID)
{
	if ((playerid != INVALID_PLAYER_ID) && (0 == IsPlayerConnected(playerid))) return 0;

	goto L_start;
	{
		new dummy[16/(cellbits/charbits)];
		#emit const.pri dummy
	}

	#if __Pawn < 0x030A
		SendDeathMessage(0, 0, 0),
		SendDeathMessageToPlayer(0, 0, 0, 0);
	#endif

	L_start:

	const SDM_MAGIC_ID = INVALID_PLAYER_ID-1;
	new i = 5;

	#emit    push.c    SDM_MAGIC_ID
	#emit    push.c    SDM_MAGIC_ID

	if (playerid == INVALID_PLAYER_ID)
	{
		#emit    push.c    12
		do
		{
			#emit    sysreq.c    SendDeathMessage
		}
		while(--i != 0);

		#emit    stack    12
	}
	else
	{
		#emit    push.s    playerid
		#emit    push.c    16
		do
		{
			#emit    sysreq.c    SendDeathMessageToPlayer
		}
		while(--i != 0);

		#emit    stack    16
	}
	return 1;
}

SendClientMessageByAdmin(color, string[])
{
    foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togAdmCmds)) continue;

		SendClientMessage(i, color, string);
	}
	return 1;
}


AMSG(color, const str[], {Float,_}:...)
{
    static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach(new i : Player)
		{
		    if (!IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togAdmCmds) || PlayerInfo[i][pAdmin] == 0) continue;

			SendClientMessage(i, color, string);
		}
		Log_Kaydet("adminuyari.txt", sprintf("[%s] %s", GetFullDate(), string));
		return 1;
	}

	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togAdmCmds)) continue;

		SendClientMessage(i, color, str);
	}
	Log_Kaydet("adminuyari.txt", sprintf("[%s] %s", GetFullDate(), string));
	return 1;
}

StaffMSG(color, const str[], {Float,_}:...)
{
    static args, start, end, string[144];

	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}

		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach(new i : Player)
		{
		    if (!IsPlayerLogged(i) || (!CheckAdmin(i, ADMIN_LEVEL_1) && !IsTester(i, 1))) continue;
		    SendClientMessage(i, color, string);
			Log_Kaydet("staffmessage.txt", sprintf("%s", string));
		}
		return 1;
	}
	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || (!CheckAdmin(i, ADMIN_LEVEL_1) && !IsTester(i, 1))) continue;
	    SendClientMessage(i, color, str);
		Log_Kaydet("staffmessage.txt", sprintf("%s", string));
	}
	return 1;
}

CheckAdmin(playerid, level)
{
	return PlayerInfo[playerid][pAdmin] >= level ? 1 : 0;
}

IsTester(playerid, level)
{
	return PlayerInfo[playerid][pHelper] >= level ? 1 : 0;
}

IsTesterLead(playerid)
{
	return PlayerInfo[playerid][pHelperLead] >= 1 ? 1 : 0;
}

IsAdminDuty(playerid)
{
	return pTemp[playerid][pAdminDuty] == 1 ? 1 : 0;
}

IsTesterDuty(playerid)
{
	return pTemp[playerid][pTesterDuty] == 1 ? 1 : 0;
}

/*
SendStaffMessage(color, string[])
{
	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || (!IsTester(i) && !CheckAdmin(i, ADMIN_LEVEL_1)) || (PlayerInfo[i][pSettings] & togTester)) continue;

        SCM(i, color, string);
	}
	return 1;
}*/

this::OnPlayerListSkins(playerid)
{
	new rows = cache_num_rows();

	if(rows)
	{
		new bincostr[5000];

		new skin_id;

		for(new i = 0; i < rows; i++)
		{
			cache_get_value_int(i, "model_id", skin_id);

			format(bincostr, sizeof(bincostr), "%s%d\n", bincostr, skin_id);
		}

		Dialog_Show(playerid, MODEL_SEL_BUYCLOTHES, DIALOG_STYLE_PREVIEW_MODEL, "Kiyafetler", bincostr, "Satin Al", "Kapat");
	}

	return 1;
}

this::OnStaffListSkins(playerid)
{
    new rows = cache_num_rows();

    if(rows)
    {
        new bigstr[4000];

        new model_id, id, gender, race;

        for(new i = 0; i < rows; i++)
        {
            cache_get_value_int(i, "id", id);
            cache_get_value_int(i, "gender", gender);
            cache_get_value_int(i, "model_id", model_id);
			cache_get_value_int(i, "race", race);

            format(bigstr, sizeof(bigstr), "%s%d\tID: %d~n~M: %d~n~C: %d~n~T: %d\n", bigstr, model_id, id, model_id, gender, race);
        }

        Dialog_Show(playerid, None, DIALOG_STYLE_PREVIEW_MODEL, "Kiyafetler", bigstr, "Sec", "Kapat");
    }

    else SendErrorMessage(playerid, "Listelenebilecek kýyafet verisi bulunamadý.");

    return 1;
}

this::OnStaffEditSkinGender(playerid, skin_id, gender)
{
    new rows = cache_affected_rows();

    if(rows)
    {
        SendAdmMessage("%s, %d numaralý skinin cinsiyetini düzenledi. (Cinsiyet: %s)", GetNameEx(playerid), skin_id, Gender(gender));
    }

    else SendErrorMessage(playerid, "Skin için deðiþiklik gerçekleþtirilmedi.");

    return 1;
}

this::OnStaffEditSkinRace(playerid, skin_id, race)
{
    new rows = cache_affected_rows();

    if(rows)
    {
        SendAdmMessage("%s, %d numaralý skinin tenini düzenledi. (Ten: %s)", GetNameEx(playerid), skin_id, Race(race));
    }

    else SendErrorMessage(playerid, "Skin için deðiþiklik gerçekleþtirilmedi.");

    return 1;
}

this::OnStaffEditSkinPrice(playerid, skin_id, price)
{
    new rows = cache_affected_rows();

    if(rows)
    {
        SendAdmMessage("%s, %d numaralý skinin fiyatýný düzenledi. (Fiyat: $%d)", GetNameEx(playerid), skin_id, price);
    }

    else SendErrorMessage(playerid, "Skin için deðiþiklik gerçekleþtirilmedi.");

    return 1;
}

this::OnStaffDeleteSkin(playerid, model_id)
{
    new rows = cache_num_rows();

    if(rows)
    {
        new skin_id, gender, race;

        cache_get_value_int(0, "id", skin_id);
        cache_get_value_int(0, "gender", gender);
		cache_get_value_int(0, "race", race);

        SendAdmMessage("%s, %d numaralý skini kaldýrdý. (Model: %d | Cinsiyet: %s | Ten: %s)", GetNameEx(playerid), skin_id, model_id, Gender(gender), Race(race));

        mysql_tquery(dbHandle, sprintf("DELETE FROM game_skins WHERE id = '%d'", skin_id));
    }

    else SendErrorMessage(playerid, "Geçersiz skin model numarasý girdiniz.");

    return 1;
}

this::OnStaffCreateSkinEnd(playerid, model_id, gender, race, price)
{
    new skin_id = cache_insert_id();

    SendAdmMessage("%s, %d numaralý skini ekledi. (Model: %d | Cinsiyet: %s | Ten: %s | Fiyat: $%d)", GetNameEx(playerid), skin_id, model_id, Gender(gender), Race(race), price);

    return 1;
}

this::OnStaffCreateSkin(playerid, model_id, gender, race, price)
{
    new rows = cache_num_rows();

    if(!rows)
    {
        mysql_tquery(dbHandle, EditSkin(0, model_id, gender, race, price), "OnStaffCreateSkinEnd", "ddddd", playerid, model_id, gender, race, price);
    }

    else SendErrorMessage(playerid, "%d model numarasýyla %s %s skini sunucuda zaten bulunuyor.", model_id, (race == RACE_WHITE) ? ("beyaz") : ("siyahi"), (gender == GENDER_MALE) ? ("erkek") : ("kadýn"));

    return 1;
}

stock Gender(type)
{
    new gender_name[6];

    switch(type)
    {
        case GENDER_MALE: gender_name = "Erkek";
        case GENDER_FEMALE: gender_name = "Kadýn";
    }

    return gender_name;
}

stock GenderAbbv(type)
{
    new gender_name[6];

    switch(type)
    {
        case GENDER_MALE: gender_name = "E";
        case GENDER_FEMALE: gender_name = "K";
    }

    return gender_name;
}

stock Race(type)
{
    new race_name[6];

    switch(type)
    {
        case RACE_WHITE: race_name = "Beyaz";
        case RACE_BLACK: race_name = "Siyah";
    }

    return race_name;
}

stock EditSkin(id = 0, model_id = -1, gender = -1, race = -1, price = -1)
{
    new query[96 + (11 * 5) + 1];

    if(id < 1)
    {
        mysql_format(dbHandle, query, sizeof(query), "INSERT INTO game_skins SET model_id = '%d', gender = '%d', race = '%d', price = '%d'", model_id, gender, race, price);
    }

    else
    {
        mysql_format(dbHandle, query, sizeof(query), "UPDATE game_skins SET");

        if(model_id != -1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, model_id = '%d'", query, model_id);
        }

        if(gender != -1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, gender = '%d'", query, gender);
        }

        if(race != -1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, race = '%d'", query, race);
        }

        if(price != -1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, price = '%d'", query, price);
        }

        if(strfind(query, ", ") != -1)
            strdel(query, strfind(query, ", "), strfind(query, ", ") + 1);

        mysql_format(dbHandle, query, sizeof(query), "%s WHERE id = '%d'", query, id);
    }

    return query;
}

stock SaveServer()
{
    new query[2048];

    mysql_format(dbHandle, query, sizeof(query), "UPDATE server_settings SET hostname = '%e', weburl = '%e', language = '%e', map = '%e', version = '%e', maintenance = '%d', password = '%e'",
        ServerInfo[sHostName],
        ServerInfo[sWebUrl],
        ServerInfo[sLanguage],
        ServerInfo[sMap],
        ServerInfo[sVersion],
        ServerInfo[sMaintenance],
        ServerInfo[sPassword]
    );

    mysql_format(dbHandle, query, sizeof(query), "%s, price_payday = '%d', price_park = '%d', dealership_percent = '%f'",
        query,
        ServerInfo[sPricePayday],
        ServerInfo[sPricePark],
        ServerInfo[sDealershipPercent]
    );

    mysql_format(dbHandle, query, sizeof(query), "%s, spawn_interior = '%d', spawn_world = '%d', spawn_x = '%f', spawn_y = '%f', spawn_z = '%f', spawn_a = '%f'",
        query,
        ServerInfo[sSpawnInterior],
        ServerInfo[sSpawnWorld],
        ServerInfo[sSpawnX],
        ServerInfo[sSpawnY],
        ServerInfo[sSpawnZ],
        ServerInfo[sSpawnA]
    );

    mysql_format(dbHandle, query, sizeof(query), "%s, locale_min_salary = '%d', locale_max_salary = '%d', price_taxi_license = '%d', price_taxi_ad = '%d', price_vehicle_register_percent = '%f', price_vehicle_weekly_tax_percent = '%f', price_driver_license = '%d', price_fuel = '%d', locale_sale_percent = '%f'",
        query,
        ServerInfo[lMinSalary],
        ServerInfo[lMaxSalary],
        ServerInfo[sPriceTaxiLicense],
        ServerInfo[sPriceTaxiAd],
        ServerInfo[sPriceVehRegisterPercent],
        ServerInfo[sPriceVehWeeklyTaxPercent],
        ServerInfo[sPriceDriverLicense],
        ServerInfo[sPriceFuel],
        ServerInfo[sLocaleSalePercent]
    );

    mysql_tquery(dbHandle, query);
}

stock SpectatorMessage(playerid, message[])
{
    foreach(new i : Player)
    {
        if(!StaffInfo[i][sSpec])
            continue;

        if(StaffInfo[i][sSpecType] != SPECTATE_TYPE_PLAYER)
            continue;

        if(StaffInfo[i][sSpecID] != playerid)
            continue;

        SendClientMessageEx(i, 0xFFFFFFFF, "{5681C0}[SPEC - %s (ID: %d)] {F1F1F1}%s", GetNameEx(playerid), playerid, message);
    }

    return 1;
}

stock MoveCamera(playerid)
{
	new Float:FV[3], Float:CP[3];
	GetPlayerCameraPos(playerid, CP[0], CP[1], CP[2]);
    GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);

	if(noclipdata[playerid][accelmul] <= 1) noclipdata[playerid][accelmul] += ACCEL_RATE;

	new Float:speed = MOVE_SPEED * noclipdata[playerid][accelmul];

	new Float:X, Float:Y, Float:Z;
	GetNextCameraPosition(noclipdata[playerid][mode], CP, FV, X, Y, Z);
	MovePlayerObject(playerid, noclipdata[playerid][flyobject], X, Y, Z, speed);

	noclipdata[playerid][lastmove] = GetTickCount();
	return 1;
}


stock GetNextCameraPosition(move_mode, const Float:CP[3], const Float:FV[3], &Float:X, &Float:Y, &Float:Z)
{
    #define OFFSET_X (FV[0]*6000.0)
	#define OFFSET_Y (FV[1]*6000.0)
	#define OFFSET_Z (FV[2]*6000.0)
	switch(move_mode)
	{
		case MOVE_FORWARD:
		{
			X = CP[0]+OFFSET_X;
			Y = CP[1]+OFFSET_Y;
			Z = CP[2]+OFFSET_Z;
		}
		case MOVE_BACK:
		{
			X = CP[0]-OFFSET_X;
			Y = CP[1]-OFFSET_Y;
			Z = CP[2]-OFFSET_Z;
		}
		case MOVE_LEFT:
		{
			X = CP[0]-OFFSET_Y;
			Y = CP[1]+OFFSET_X;
			Z = CP[2];
		}
		case MOVE_RIGHT:
		{
			X = CP[0]+OFFSET_Y;
			Y = CP[1]-OFFSET_X;
			Z = CP[2];
		}
		case MOVE_BACK_LEFT:
		{
			X = CP[0]+(-OFFSET_X - OFFSET_Y);
 			Y = CP[1]+(-OFFSET_Y + OFFSET_X);
		 	Z = CP[2]-OFFSET_Z;
		}
		case MOVE_BACK_RIGHT:
		{
			X = CP[0]+(-OFFSET_X + OFFSET_Y);
 			Y = CP[1]+(-OFFSET_Y - OFFSET_X);
		 	Z = CP[2]-OFFSET_Z;
		}
		case MOVE_FORWARD_LEFT:
		{
			X = CP[0]+(OFFSET_X  - OFFSET_Y);
			Y = CP[1]+(OFFSET_Y  + OFFSET_X);
			Z = CP[2]+OFFSET_Z;
		}
		case MOVE_FORWARD_RIGHT:
		{
			X = CP[0]+(OFFSET_X  + OFFSET_Y);
			Y = CP[1]+(OFFSET_Y  - OFFSET_X);
			Z = CP[2]+OFFSET_Z;
		}
	}
}

GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;

	if(lr < 0)
	{
		if(ud < 0) 		direction = MOVE_FORWARD_LEFT; 	// Up & Left key pressed
		else if(ud > 0) direction = MOVE_BACK_LEFT; 	// Back & Left key pressed
		else            direction = MOVE_LEFT;          // Left key pressed
	}
	else if(lr > 0) 	// Right pressed
	{
		if(ud < 0)      direction = MOVE_FORWARD_RIGHT;  // Up & Right key pressed
		else if(ud > 0) direction = MOVE_BACK_RIGHT;     // Back & Right key pressed
		else			direction = MOVE_RIGHT;          // Right key pressed
	}
	else if(ud < 0) 	direction = MOVE_FORWARD; 	// Up key pressed
	else if(ud > 0) 	direction = MOVE_BACK;		// Down key pressed

	return direction;
}

this::DelaySetPos(playerid, Float:x, Float:y, Float:z)
{
	SetPlayerPosEx(playerid, x, y, z);
	return 1;
}

stock SpectateCheck(playerid)
{
    foreach(new i : Player)
    {
        if(IsPlayerLogged(i))
            continue;

        if(StaffInfo[i][sSpec] == false)
            continue;

        if(StaffInfo[i][sSpecType] != SPECTATE_TYPE_PLAYER)
            continue;

        if(StaffInfo[i][sSpecID] != playerid)
            continue;

        Spectate(i, SPECTATE_TYPE_PLAYER, playerid);
    }

    return 1;
}

stock Spectate(playerid, type, targetid)
{
    TogglePlayerSpectating(playerid, true);

    StaffInfo[playerid][sSpecID] = targetid;
    StaffInfo[playerid][sSpecType] = type;
    StaffInfo[playerid][sSpec] = true;

    StaffInfo[playerid][sSpecInterior] = GetPlayerInterior(playerid);
    StaffInfo[playerid][sSpecWorld] = GetPlayerVirtualWorld(playerid);

    if(type == SPECTATE_TYPE_VEHICLE)
    {
        PlayerSpectateVehicle(playerid, targetid);
        SetPlayerInterior(playerid, VehicleInfo[targetid][carInt]);
        SetPlayerVirtualWorld(playerid, VehicleInfo[targetid][carVW]);
    }

    else
    {
        new interior, world;

        interior = GetPlayerInterior(targetid);
        world = GetPlayerVirtualWorld(targetid);

        SetPlayerInterior(playerid, interior);
        SetPlayerVirtualWorld(playerid, world);

        if(IsPlayerInAnyVehicle(targetid))
        {
            new vehicleid = GetPlayerVehicleID(targetid);

            PlayerSpectateVehicle(playerid, vehicleid);
        }

        else
        {
            PlayerSpectatePlayer(playerid, targetid);
        }
   	}
    return 1;
}

stock WeaponName(weaponid)
{
    new weapon[22];
    switch(weaponid)
    {
        case 0: weapon = "Yumruk";
        case 18: weapon = "Molotov Cocktail";
        case 44: weapon = "Night Vision Goggles";
        case 45: weapon = "Thermal Goggles";
        case 54: weapon = "Fall";
        default: GetWeaponName(weaponid, weapon, sizeof(weapon));
    }

    return weapon;
}


forward Float:GetSpeed(playerid);
stock Float:GetSpeed(playerid)
{
    static Float:velocity[3];

    if (IsPlayerInAnyVehicle(playerid))
        GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
    else
        GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);

    return floatsqroot((velocity[0] * velocity[0]) + (velocity[1] * velocity[1]) + (velocity[2] * velocity[2])) * 100.0;
}

this::SpectateOffTimer(playerid)
{
    SetPlayerPosEx(playerid, GetPVarFloat(playerid, "SpecX"), GetPVarFloat(playerid, "SpecY"), GetPVarFloat(playerid, "SpecZ"));
    SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "SpecA"));
    SetPlayerInterior(playerid, GetPVarInt(playerid, "SpecINT"));
    SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SpecVW"));
    DeletePVar(playerid, "SpecX");
    DeletePVar(playerid, "SpecY");
    DeletePVar(playerid, "SpecZ");
    DeletePVar(playerid, "SpecA");
    DeletePVar(playerid, "SpecINT");
    DeletePVar(playerid, "SpecVW");
	return 1;
}
stock SpectateOff(playerid)
{
    SetPlayerPosEx(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
    SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
    SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);
    SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pWorld]);
	SetTimerEx("SpectateOffTimer", 1000, false, "i", playerid);
	SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);
    TogglePlayerSpectating(playerid, false);
	ResetSpectateVariables(playerid);
    return 1;
}

stock SyncSpectatingPanel(playerid)
{
	if(StaffInfo[playerid][sSpecID] == INVALID_PLAYER_ID) return 0;
    if(StaffInfo[playerid][sSpec] == true)
    {
        new targetid;

        targetid = StaffInfo[playerid][sSpecID];

        switch(StaffInfo[playerid][sSpecType])
        {
            case SPECTATE_TYPE_PLAYER:
            {
                new Float:health, Float:armour;

                GetPlayerHealth(targetid, health);
                GetPlayerArmour(targetid, armour);

                new player_ip[16 + 1];

                GetPlayerIp(targetid, player_ip, sizeof(player_ip));

                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][SpectatingInfo][1], sprintf("~y~%s (ID: %d) - Hesap: %d - Karakter: %d - IP: %s", GetNameEx(targetid), targetid, PlayerInfo[targetid][pAccID], PlayerInfo[targetid][pID], player_ip));
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][SpectatingInfo][3], sprintf("Hiz: %.2f~n~Int/World: %d/%d~n~Ping: %d P/L: %.2f~n~Can CS: %.2f~n~Zirh: CS:%.2f/SS:%.2f", GetSpeed(targetid), GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), GetPlayerPing(targetid), NetStats_PacketLossPercent(targetid), health, armour, PlayerInfo[targetid][pArmour]));

                new vehicleid;

                vehicleid = GetPlayerVehicleID(targetid);

                if(IsValidVehicle(vehicleid))
                {
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][SpectatingInfo][4], sprintf("%s (ID: %d)~n~Benzin: %.2f~n~Sahip: %d Birlik: %d", GetVehicleModelName(GetVehicleModel(vehicleid)), vehicleid, VehicleInfo[vehicleid][carFuel], VehicleInfo[vehicleid][carOwnerID], VehicleInfo[vehicleid][carFaction]));
                }

                else PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][SpectatingInfo][4], "Aracta Degil");

                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][SpectatingInfo][5], sprintf("%s (%d mermi)~n~Yarali: %dsn~n~Skin: %d~n~Anim: %d", WeaponName(GetPlayerWeapon(targetid)), GetPlayerAmmo(targetid), pTemp[playerid][pInjuredTime], GetPlayerSkin(targetid), GetPlayerAnimationIndex(targetid)));
            }

            case SPECTATE_TYPE_VEHICLE:
            {
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][SpectatingInfo][1], "~y~Arac Izleniyor");
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][SpectatingInfo][3], "~r~Veri yok");
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][SpectatingInfo][5], "~r~Veri yok");

                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][SpectatingInfo][4], sprintf("%s (ID: %d)~n~Benzin: %.2f~n~Sahip: %d Birlik: %d", GetVehicleModelName(GetVehicleModel(targetid)), targetid, VehicleInfo[targetid][carFuel], VehicleInfo[targetid][carOwnerID], VehicleInfo[targetid][carFaction]));
            }
        }
    }
	return 1;
}

stock ToggleSpectatingPanel(playerid, bool:status)
{
    switch(status)
    {
        case false:
        {
            for(new i = 0; i < 6; i++)
            {
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][SpectatingInfo][i]);
            }
        }

        case true:
        {
            for(new i = 0; i < 6; i++)
            {
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][SpectatingInfo][i]);
            }
        }
    }

    return 1;
}

stock ResetSpectateVariables(playerid)
{
    StaffInfo[playerid][sSpecID] = INVALID_PLAYER_ID;
    StaffInfo[playerid][sSpecType] = INVALID_SPECTATE_TYPE;
    StaffInfo[playerid][sSpec] = false;
    StaffInfo[playerid][sSpecX] = 0.0;
    StaffInfo[playerid][sSpecY] = 0.0;
    StaffInfo[playerid][sSpecZ] = 0.0;
    StaffInfo[playerid][sSpecA] = 0.0;
    StaffInfo[playerid][sSpecInterior] = 0;
    StaffInfo[playerid][sSpecWorld] = 0;

    return 1;
}

stock GetVehicleModelName(model)
{
    static modelname[32] = "Yok";
    if(model < 400 || model > 611)
        return modelname;

    format(modelname, sizeof(modelname), VehicleNames[model - 400]);
    return modelname;
}

stock valstrEx(value)
{
	new string[8];
	format(string, sizeof string, "%d", value);
	return string;
}

PutPlayerInVeh(playerid, vehicleid, seat); public PutPlayerInVeh(playerid, vehicleid, seat)
{
	pTemp[playerid][AntiHileSistemi] = -1;
	PutPlayerInVehicle(playerid, vehicleid, seat);
	pTemp[playerid][AntiHileSistemi] = vehicleid;
	return 1;
}

this::LoadDynamicRentalPoint()
{
	new rows = cache_num_rows(), id;

	if (!rows)
	{
	    return 1;
	}

	for (new i = 0, jx = cache_num_rows(); i < jx; i ++) if (i < MAX_RENTAL)
	{
		id = i;
		Iter_Add(RentalPoints, id);
		cache_get_value_int(i, "id", RentalPoint[id][rentalID]);
		cache_get_value_int(i, "rental_type", RentalPoint[id][rentalType]);

		cache_get_value_float(i, "x", RentalPoint[id][rentalX]);
		cache_get_value_float(i, "y", RentalPoint[id][rentalY]);
		cache_get_value_float(i, "z", RentalPoint[id][rentalZ]);
		cache_get_value_int(i, "interior", RentalPoint[id][rentalInterior]);
		cache_get_value_int(i, "world", RentalPoint[id][rentalWorld]);
		cache_get_value_int(i, "job", RentalPoint[id][rentalJob]);

		new str[175];
        if (RentalPoint[id][rentalType] == 1) format(str, sizeof(str), "{EDEDED}Kiralama Noktasý{A9C4E4}[%d]\n{A9C4E4}Etkileþim: {EDEDED}/meslekarackirala", id);
		else if (RentalPoint[id][rentalType] == 2) format(str, sizeof(str), "{EDEDED}Kiralama Noktasý{A9C4E4}[%d]\n{A9C4E4}Etkileþim: {EDEDED}/arackirala", id);

		RentalPoint[id][rental3D] = CreateDynamic3DTextLabel(str, -1, RentalPoint[id][rentalX], RentalPoint[id][rentalY], RentalPoint[id][rentalZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, RentalPoint[id][rentalWorld], RentalPoint[id][rentalInterior]);
		RentalPoint[id][rentalPickup] = CreateDynamicPickup(1276, 1, RentalPoint[id][rentalX], RentalPoint[id][rentalY], RentalPoint[id][rentalZ], RentalPoint[id][rentalWorld], RentalPoint[id][rentalInterior], -1, 100.0);
	}

	return 1;
}


stock InsertRental(playerid, Float:x, Float:y, Float:z, rental_type)
{
	new nextid = Iter_Free(RentalPoints), query[333];

	if (nextid < 0)
	{
	    SendErrorMessage(playerid, "Bir hata oluþtu.");
	}
	else
	{
		RentalPoint[nextid][rentalID] = nextid;
		RentalPoint[nextid][rentalType] = rental_type;
		RentalPoint[nextid][rentalX] = x;
		RentalPoint[nextid][rentalY] = y;
		RentalPoint[nextid][rentalZ] = z;
		RentalPoint[nextid][rentalWorld] = GetPlayerVirtualWorld(playerid);
		RentalPoint[nextid][rentalInterior] = GetPlayerInterior(playerid);
		RentalPoint[nextid][rentalJob] = 0;

		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `rental_points` (`rental_type`, `x`, `y`, `z`, `interior`, `world`, `job`) VALUES ('%i', '%.4f', '%.4f', '%.4f', '%i', '%i', '%i')", RentalPoint[nextid][rentalType], RentalPoint[nextid][rentalX], RentalPoint[nextid][rentalY],RentalPoint[nextid][rentalZ], RentalPoint[nextid][rentalInterior], RentalPoint[nextid][rentalWorld], RentalPoint[nextid][rentalJob]);
		mysql_tquery(dbHandle, query);

		if (IsValidDynamic3DTextLabel(RentalPoint[nextid][rental3D]))
		{
			DestroyDynamic3DTextLabel(RentalPoint[nextid][rental3D]);
			RentalPoint[nextid][rental3D] = Text3D:INVALID_3DTEXT_ID;
		}

		if(IsValidDynamicPickup(RentalPoint[nextid][rentalPickup]))
			DestroyDynamicPickup(RentalPoint[nextid][rentalPickup]);

		new str[175];
        if (rental_type == 1) format(str, sizeof(str), "{EDEDED}Kiralama Noktasý{A9C4E4}[%d]\n{A9C4E4}Etkileþim: {EDEDED}/meslekarackirala", nextid);
		else if (rental_type == 2) format(str, sizeof(str), "{EDEDED}Kiralama Noktasý{A9C4E4}[%d]\n{A9C4E4}Etkileþim: {EDEDED}/arackirala", nextid);

		RentalPoint[nextid][rentalPickup] = CreateDynamicPickup(1276, 1, RentalPoint[nextid][rentalX], RentalPoint[nextid][rentalY], RentalPoint[nextid][rentalZ], RentalPoint[nextid][rentalWorld], RentalPoint[nextid][rentalInterior], -1, 100.0);
		RentalPoint[nextid][rental3D] = CreateDynamic3DTextLabel(str, -1, RentalPoint[nextid][rentalX], RentalPoint[nextid][rentalY], RentalPoint[nextid][rentalZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, RentalPoint[nextid][rentalWorld], RentalPoint[nextid][rentalInterior]);
		Iter_Add(RentalPoints, nextid);
	}
	return nextid;
}

stock Rental_Nearest(playerid)
{
	new id = -1;

	for(new i; i < MAX_RENTAL; i++)
	{
		if (RentalPoint[i][rentalID] > -1 && IsPlayerInRangeOfPoint(playerid, 6.0, RentalPoint[i][rentalX], RentalPoint[i][rentalY], RentalPoint[i][rentalZ]))
		{
		    if (id != -1) {
				new Float: x, Float: y, Float: z;

				GetPlayerPos(playerid, x, y, z);
				if (GetDistanceBetweenPoints(x, y, z, RentalPoint[i][rentalX], RentalPoint[i][rentalY], RentalPoint[i][rentalZ]) <
					GetDistanceBetweenPoints(x, y, z, RentalPoint[i][rentalX], RentalPoint[i][rentalY], RentalPoint[i][rentalZ])) id = i;
			}
			else id = i;
		}
	}
	return id;
}

stock Locker_RentalNearestType(playerid, type)
{
	new id = -1;

	for(new i; i < MAX_RENTAL; i++)
	{
		if (RentalPoint[i][rentalID] > -1 && IsPlayerInRangeOfPoint(playerid, 5.0, RentalPoint[i][rentalX], RentalPoint[i][rentalY], RentalPoint[i][rentalZ]) && RentalPoint[i][rentalType] == type)
		{
		    if (id != -1) {
				new Float: x, Float: y, Float: z;

				GetPlayerPos(playerid, x, y, z);
				if (GetDistanceBetweenPoints(x, y, z, RentalPoint[i][rentalX], RentalPoint[i][rentalY], RentalPoint[i][rentalZ]) <
					GetDistanceBetweenPoints(x, y, z, RentalPoint[i][rentalX], RentalPoint[i][rentalY], RentalPoint[i][rentalZ])) id = i;
			}
			else id = i;
		}
	}
	return id;
}

GetRandomCekilisPlayer()
{
    new count = 0, randomid = INVALID_PLAYER_ID;

    while(randomid == INVALID_PLAYER_ID || !IsPlayerConnected(randomid))
    {
        count++;
        randomid = random(MAX_PLAYERS);
        if (count > 200 || IsPlayerConnected(randomid)) break;
    }
    return randomid;
}

getRandomPlayer()
{
	new count = 0, randomid = INVALID_PLAYER_ID;

	while(randomid == INVALID_PLAYER_ID || !IsPlayerConnected(randomid))
	{
		count++;
		randomid = random(MAX_PLAYERS);
		if(count > 200 || IsPlayerConnected(randomid)) break;
	}
	return randomid;
}

CekilisMesafe(playerid, Float: menzil)
{
	new count = 0, randomid = INVALID_PLAYER_ID;
	new Float: x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new vw = GetPlayerVirtualWorld(playerid);

	while(randomid == INVALID_PLAYER_ID || GetPlayerVirtualWorld(randomid) != vw || !IsPlayerInRangeOfPoint(randomid, menzil, x, y, z) || !IsPlayerConnected(randomid) || !pTemp[randomid][pLogged])
	{
		count++;
		randomid = random(MAX_PLAYERS);
		if(count > 200 || IsPlayerConnected(randomid)) break;
	}
	return randomid;
}

stock GetPlayerNearestArrestPoint(playerid, Float:distance = 5.0)
{
    new arrestpoint_id;

    new interior, world, Float:x, Float:y, Float:z;

    interior = GetPlayerInterior(playerid);
    world = GetPlayerVirtualWorld(playerid);

    GetPlayerPos(playerid, x, y, z);

    new wheres[168 + (6 * 6) + 1];

    mysql_format(dbHandle, wheres, sizeof(wheres), "arrest_points.interior = '%d' AND arrest_points.world = '%d' AND POW(arrest_points.x - %f, 2) + POW(arrest_points.y - %f, 2) + POW(arrest_points.z - %f, 2) < POW(%f, 2)", interior, world, x, y, z, distance);

    new Cache:search = mysql_query(dbHandle, GetArrestPoint("arrest_points.id", "", wheres));

    if(cache_num_rows())
    {
        cache_get_value_index_int(0, 0, arrestpoint_id);
    }

    cache_delete(search);
    search = MYSQL_INVALID_CACHE;

    return arrestpoint_id;
}

stock GetPlayerNearestLocker(playerid, Float:distance = 5.0)
{
    new locker_id;

    new interior, world, Float:x, Float:y, Float:z;

    interior = GetPlayerInterior(playerid);
    world = GetPlayerVirtualWorld(playerid);

    GetPlayerPos(playerid, x, y, z);

    new wheres[216 + (7 * 6) + 1];

    mysql_format(dbHandle, wheres, sizeof(wheres), "faction_lockers.faction_id = '%d' AND faction_lockers.interior = '%d' AND faction_lockers.world = '%d' AND POW(faction_lockers.x - %f, 2) + POW(faction_lockers.y - %f, 2) + POW(faction_lockers.z - %f, 2) < POW(%f, 2)", PlayerInfo[playerid][pFaction], interior, world, x, y, z, distance);

    new Cache:search = mysql_query(dbHandle, GetLocker("faction_lockers.id", "", wheres));

    if(cache_num_rows())
    {
        cache_get_value_index_int(0, 0, locker_id);
    }

    cache_delete(search);
    search = MYSQL_INVALID_CACHE;

    return locker_id;
}

stock RefreshLocker(id, bool:forcedestroy = true)
{
    mysql_tquery(dbHandle, GetLocker("factions.name, faction_lockers.label_id, faction_lockers.interior, faction_lockers.world, faction_lockers.x, faction_lockers.y, faction_lockers.z", "LEFT JOIN factions ON factions.factionid = faction_lockers.faction_id", "", 1, -1, id), "OnLockerRefreshed", "dd", id, forcedestroy);

    return 1;
}

stock EditLocker(id, faction_id = -1, Text3D:label_id = Text3D:-1, interior = -1, world = -1, Float:x = 0.0, Float:y = 0.0, Float:z = 0.0)
{
    new query[138 + (11 * 7) + 1];

    if(id < 1)
    {
        mysql_format(dbHandle, query, sizeof(query), "INSERT INTO faction_lockers SET faction_id = '%d', label_id = '%d', interior = '%d', world = '%d', x = '%f', y = '%f', z = '%f'", faction_id, _:label_id, interior, world, x, y, z);
    }

    else
    {
        mysql_format(dbHandle, query, sizeof(query), "UPDATE faction_lockers SET");

        if(faction_id != -1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, faction_id = '%d'", query, faction_id);
        }

        if(Text3D:label_id != Text3D:-1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, label_id = '%d'", query, _:label_id);
        }

        if(interior != -1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, interior = '%d'", query, interior);
        }

        if(world != -1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, world = '%d'", query, world);
        }

        if(x != 0.0)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, x = '%f'", query, x);
        }

        if(y != 0.0)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, y = '%f'", query, y);
        }

        if(z != 0.0)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, z = '%f'", query, z);
        }

        if(strfind(query, ", ") != -1)
            strdel(query, strfind(query, ", "), strfind(query, ", ") + 1);

        mysql_format(dbHandle, query, sizeof(query), "%s WHERE id = '%d'", query, id);
    }

    return query;
}

stock GetLocker(const fields[] = "faction_lockers.*", const joins[] = "", const wheres[] = "", page = 1, limit = -1, sqlid = -1, faction_id = -1)
{
    new query[512];

    format(query, sizeof(query), "SELECT %s FROM faction_lockers", fields);

    if(!isnull(joins))
    {
        format(query, sizeof(query), "%s %s", query, joins);
    }

    format(query, sizeof(query), "%s WHERE 1", query);

    if(sqlid != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND faction_lockers.id = '%d'", query, sqlid);
    }

    if(faction_id != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND faction_lockers.faction_id = '%d'", query, faction_id);
    }

    if(!isnull(wheres))
    {
        format(query, sizeof(query), "%s AND %s", query, wheres);
    }

    mysql_format(dbHandle, query, sizeof(query), "%s ORDER BY faction_lockers.id DESC", query);

    if(limit == -1)
        mysql_format(dbHandle, query, sizeof(query), "%s LIMIT %d, 10000", query, ((page - 1) * ITEM_PER_PAGE));
    else
        mysql_format(dbHandle, query, sizeof(query), "%s LIMIT %d, 1", query, ((page - 1) * ITEM_PER_PAGE) + limit);

    return query;
}

this::OnStaffListLockers(playerid)
{
	new rows = cache_num_rows();

	if(rows)
	{
		new id, name[MAX_FACTION_LENGHT], faction_id;

		for(new i = 0; i < rows; i++)
		{
			cache_get_value_index_int(i, 0, id);
			cache_get_value_index(i, 1, name);
			cache_get_value_index_int(i, 2, faction_id);

			SendServerMessage(playerid, "#%d - %s (ID: %d)", id, name, faction_id);
		}

		SendServerMessage(playerid, "%d dolap verisi bulundu.", rows);
	}

	else SendErrorMessage(playerid, "Listelenebilecek dolap verisi bulunamadý.");

	return 1;
}

this::OnStaffEditLockerPos(playerid, locker_id)
{
	new rows = cache_affected_rows();

	if(rows)
	{
		SendAdmMessage("%s, %d numaralý dolabýn pozisyonunu deðiþtirdi.", GetNameEx(playerid), locker_id);
	}

	else SendErrorMessage(playerid, "Dolap için deðiþiklik gerçekleþtirilmedi.");

	return 1;
}

this::OnStaffEditLockerFaction(playerid, locker_id, faction_id)
{
	new rows = cache_affected_rows();

	if(rows)
	{
		SendAdmMessage("%s, %d numaralý dolabýn birliðini deðiþtirdi. (yeni: %d)", GetNameEx(playerid), locker_id, faction_id);
	}

	else SendErrorMessage(playerid, "Dolap için deðiþiklik gerçekleþtirilmedi.");

	return 1;
}

this::OnStaffDeleteLocker(playerid, locker_id)
{
	new rows = cache_num_rows();

	if(rows)
	{
		new name[MAX_FACTION_LENGHT], faction_id, Text3D:label_id;

		cache_get_value_index(0, 0, name);
		cache_get_value_index_int(0, 1, faction_id);
		cache_get_value_index_int(0, 2, _:label_id);

		if(IsValidDynamic3DTextLabel(Text3D:label_id))
		{
			DestroyDynamic3DTextLabel(Text3D:label_id);
		}

		SendAdmMessage("%s, %s (ID: %d) birliðinin %d numaralý dolabýný sildi.", GetNameEx(playerid), name, faction_id, locker_id);

		mysql_tquery(dbHandle, sprintf("DELETE FROM faction_lockers WHERE id = '%d'", locker_id));
	}

	else SendErrorMessage(playerid, "Geçersiz dolap numarasý girdiniz.");

	return 1;
}

this::OnStaffCreateLocker(playerid, faction_id)
{
	new rows = cache_num_rows();

	if(rows)
	{
		new name[MAX_FACTION_LENGHT];

		cache_get_value_index(0, 0, name);

		new interior, world, Float:x, Float:y, Float:z;

		interior = GetPlayerInterior(playerid);
		world = GetPlayerVirtualWorld(playerid);

		GetPlayerPos(playerid, x, y, z);

		mysql_tquery(dbHandle, EditLocker(0, faction_id, Text3D:-1, interior, world, x, y, z), "OnStaffCreateLockerEnd", "dds", playerid, faction_id, name);
	}

	else SendErrorMessage(playerid, "Geçersiz birlik numarasý girdiniz.");

	return 1;
}

this::OnStaffCreateLockerEnd(playerid, faction_id, name[])
{
	new id = cache_insert_id();

	SendAdmMessage("%s, %s (ID: %d) birlik için ekipman dolabý ekledi. (dolap id: %d)", GetNameEx(playerid), name, faction_id, id);

	RefreshLocker(id, false);

	return 1;
}

this::OnLockerRefreshed(id, bool:forcedestroy)
{
	new rows = cache_num_rows();

	if(rows)
	{
		new name[MAX_FACTION_LENGHT], Text3D:label_id, interior, world, Float:x, Float:y, Float:z;

		cache_get_value_index(0, 0, name);
		cache_get_value_index_int(0, 1, _:label_id);
		cache_get_value_index_int(0, 2, interior);
		cache_get_value_index_int(0, 3, world);
		cache_get_value_index_float(0, 4, x);
		cache_get_value_index_float(0, 5, y);
		cache_get_value_index_float(0, 6, z);

		if(forcedestroy == true)
		{
			if(IsValidDynamic3DTextLabel(Text3D:label_id))
			{
				DestroyDynamic3DTextLabel(Text3D:label_id);
			}
		}

		label_id = CreateDynamic3DTextLabel(sprintf(EMBED_ALTO "[" EMBED_SERVER2 "%s" EMBED_ALTO " #%d]\n/ekipman", name, id), -1, x, y, z, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, world, interior);

		mysql_tquery(dbHandle, EditLocker(id, -1, label_id));
	}

	return 1;
}

this::LoadLockers()
{
	new rows = cache_num_rows();

	if(rows)
	{
		new locker_id;

		for(new i = 0; i < rows; i++)
		{
			cache_get_value_index_int(i, 0, locker_id);

			RefreshLocker(locker_id, false);
		}

		printf("[!] Sunucudan %d dolap verisi alindi.", rows);
	}

	else printf("[!] Sunucudan dolap verisi alinamadi.");

	return 1;
}

/// arrest

this::LoadArrestPoints()
{
	new rows = cache_num_rows();

	if(rows)
	{
		new id;

		for(new i = 0; i < rows; i++)
		{
			cache_get_value_index_int(i, 0, id);

			RefreshArrestPoint(id, false);
		}

		printf("[!] Sunucudan %d hapis noktasi verisi alindi.", rows);
	}

	printf("[!] Sunucudan hapis noktasi verisi alinamadi.");

	return 1;
}

this::OnStaffEditArrestPointPos(playerid, id)
{
    new rows = cache_affected_rows();

    if(rows)
    {
        RefreshArrestPoint(id);

        SendAdmMessage("%s, %d numaralý hapis noktasýnýn pozisyonunu deðiþtirdi.", GetNameEx(playerid), id);
    }

    else SendErrorMessage(playerid, "Hapis noktasý için deðiþiklik gerçekleþtirilmedi.");

    return 1;
}

this::OnStaffDeleteArrestPoint(playerid, id)
{
    new rows = cache_num_rows();

    if(rows)
    {
        new pickup_id, Text3D:label_id;

        cache_get_value_index_int(0, 0, pickup_id);
        cache_get_value_index_int(0, 1, _:label_id);

        if(IsValidDynamicPickup(pickup_id))
            DestroyDynamicPickup(pickup_id);



        if(IsValidDynamic3DTextLabel(Text3D:label_id))
            DestroyDynamic3DTextLabel(Text3D:label_id);

        mysql_tquery(dbHandle, sprintf("DELETE FROM arrest_points WHERE id = '%d'", id));

        SendAdmMessage("%s, %d numaralý hapis noktasýný sildi.", GetNameEx(playerid), id);
    }

    else SendErrorMessage(playerid, "Geçersiz hapis noktasý numarasý girdiniz.");

    return 1;
}

this::OnStaffCreateArrestPoint(playerid)
{
    new id = cache_insert_id();



    RefreshArrestPoint(id, false);

    SendAdmMessage("%s, yeni hapis noktasý ekledi. (id: %d)", GetNameEx(playerid), id);

    return 1;
}

this::OnArrestPointRefreshed(id, bool:forcedestroy)
{
    new rows = cache_num_rows();

    if(rows)
    {
        new pickup_id, Text3D:label_id, interior, world, Float:x, Float:y, Float:z;

        cache_get_value_index_int(0, 0, pickup_id);
        cache_get_value_index_int(0, 1, _:label_id);
        cache_get_value_index_int(0, 2, interior);
        cache_get_value_index_int(0, 3, world);
        cache_get_value_index_float(0, 4, x);
        cache_get_value_index_float(0, 5, y);
        cache_get_value_index_float(0, 6, z);

        if(forcedestroy)
        {
            if(IsValidDynamic3DTextLabel(Text3D:label_id))
                DestroyDynamic3DTextLabel(Text3D:label_id);

            if(IsValidDynamicPickup(pickup_id))
                DestroyDynamicPickup(pickup_id);
        }

        label_id = CreateDynamic3DTextLabel(sprintf(EMBED_ALTO "[" EMBED_SERVER2 "Hapis Ýþlemleri Noktasý " EMBED_ALTO "(#%d)]\n/hapis", id), -1, x, y, z, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, world, interior);
        pickup_id = CreateDynamicPickup(1247, 23, x, y, z, world, interior);

        mysql_tquery(dbHandle, EditArrestPoint(id, pickup_id, label_id));
    }

    return 1;
}

stock RefreshArrestPoint(id, bool:forcedestroy = true)
{
    return mysql_tquery(dbHandle, GetArrestPoint("arrest_points.pickup_id, arrest_points.label_id, arrest_points.interior, arrest_points.world, arrest_points.x, arrest_points.y, arrest_points.z", "", "", 1, -1, id), "OnArrestPointRefreshed", "dd", id, forcedestroy);
}

stock EditArrestPoint(id = 0, pickup_id = -1, Text3D:label_id = Text3D:-1, interior = -1, world = -1, Float:x = 0.0, Float:y = 0.0, Float:z = 0.0)
{
    new query[100 + (11 * 5) + 1];

    if(id < 1)
    {
        mysql_format(dbHandle, query, sizeof(query), "INSERT INTO arrest_points SET interior = '%d', world = '%d', x = '%f', y = '%f', z = '%f'", interior, world, x, y, z);
    }

    else
    {
        mysql_format(dbHandle, query, sizeof(query), "UPDATE arrest_points SET");

        if(pickup_id != -1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, pickup_id = '%d'", query, pickup_id);
        }

        if(Text3D:label_id != Text3D:-1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, label_id = '%d'", query, _:label_id);
        }

        if(interior != -1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, interior = '%d'", query, interior);
        }

        if(world != -1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, world = '%d'", query, world);
        }

        if(x != 0.0)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, x = '%f'", query, x);
        }

        if(y != 0.0)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, y = '%f'", query, y);
        }

        if(z != 0.0)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, z = '%f'", query, z);
        }

        if(strfind(query, ", ") != -1)
            strdel(query, strfind(query, ", "), strfind(query, ", ") + 1);

        mysql_format(dbHandle, query, sizeof(query), "%s WHERE id = '%d'", query, id);
    }

    return query;
}

stock GetArrestPoint(const fields[] = "arrest_points.*", const joins[] = "", const wheres[] = "", page = 1, limit = -1, sqlid = -1)
{
    new query[600];

    format(query, sizeof(query), "SELECT %s FROM arrest_points", fields);

    if(!isnull(joins))
    {
        format(query, sizeof(query), "%s %s", query, joins);
    }

    format(query, sizeof(query), "%s WHERE 1", query);

    if(sqlid != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND arrest_points.id = '%d'", query, sqlid);
    }

    if(!isnull(wheres))
    {
        format(query, sizeof(query), "%s AND %s", query, wheres);
    }

    mysql_format(dbHandle, query, sizeof(query), "%s ORDER BY arrest_points.id DESC", query);

    if(limit == -1)
        mysql_format(dbHandle, query, sizeof(query), "%s LIMIT %d, 10000", query, ((page - 1) * ITEM_PER_PAGE));
    else
        mysql_format(dbHandle, query, sizeof(query), "%s LIMIT %d, 1", query, ((page - 1) * ITEM_PER_PAGE) + limit);

    return query;
}

Dialog:CreateArrestConfirmation(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new interior, world, Float:x, Float:y, Float:z;

        interior = GetPlayerInterior(playerid);
        world = GetPlayerVirtualWorld(playerid);

        GetPlayerPos(playerid, x, y, z);

        mysql_tquery(dbHandle, EditArrestPoint(0, -1, Text3D:-1, interior, world, x, y, z), "OnStaffCreateArrestPoint", "d", playerid);
    }

    return 1;
}

Dialog:TeleportInterior(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        SetPlayerInterior(playerid, g_arrInteriorData[listitem][e_InteriorID]);
        SetPlayerPos(playerid, g_arrInteriorData[listitem][e_InteriorX], g_arrInteriorData[listitem][e_InteriorY], g_arrInteriorData[listitem][e_InteriorZ]);
        SetPlayerVirtualWorld(playerid, 0);
    }
    return 1;
}

Admin_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if (pTemp[playerid][pAdminDuty] == 1 && GetInterior(playerid) == 0 || PlayerInfo[playerid][pFMAdmin] == 1)
	{
		//MapAndreas_FindZ_For2DCoord(fX, fY, fZ);
    	SetPlayerPosEx(playerid, fX, fY, fZ + 0.5);
		//SendSpecialMessage(playerid, "Ýþarete ýþýnlandýn.");
	}
    return 1;
}

Admin_OnPlayerKeyStateChange(playerid, newkeys)
{
	if (HOLDING(KEY_SPRINT) && pTemp[playerid][pSpecPlayer] != INVALID_PLAYER_ID)
 	{
		if (IsPlayerInAnyVehicle(pTemp[playerid][pSpecPlayer]))	PlayerSpectateVehicle(playerid, GetPlayerVehicleID(pTemp[playerid][pSpecPlayer]), 1);
		else													PlayerSpectatePlayer(playerid, pTemp[playerid][pSpecPlayer], 1);

		SetInterior(playerid,GetInterior(pTemp[playerid][pSpecPlayer]));
		SetWorld(playerid, GetWorld(pTemp[playerid][pSpecPlayer]));
	}

	if (HOLDING(KEY_ANALOG_LEFT) && pTemp[playerid][pSpecPlayer] != INVALID_PLAYER_ID)
	{
	    new maxplayers = GetMaxPlayers();
		for(new i = pTemp[playerid][pSpecPlayer]+1, bool:secondloop; i < maxplayers; i++)
		{
			if (i == maxplayers && !secondloop)
			{
				secondloop = true;
				i = 0;
				continue;
			}

			if (!IsPlayerLogged(i) || playerid == i) continue;

			new mes[4];
			format(mes, sizeof(mes), "%i", i);
			pc_cmd_spectate(playerid, mes);
			break;
		}
	    return 1;
	}

	else if (HOLDING(KEY_ANALOG_RIGHT) && pTemp[playerid][pSpecPlayer] != INVALID_PLAYER_ID)
	{
	    new maxplayers = GetMaxPlayers();

		for(new i = pTemp[playerid][pSpecPlayer]-1, bool:secondloop; i < maxplayers; i--)
		{
			if (i <= 0 && !secondloop)
			{
				secondloop = true;
				i = maxplayers;
				continue;
			}

			if (!IsPlayerLogged(i) || playerid == i) continue;

			new mes[4];
			format(mes, sizeof(mes), "%i", i);
			pc_cmd_spectate(playerid, mes);
			break;
		}
	}
	return 1;
}

Admin_PlayerTimer(playerid)
{
	if (pTemp[playerid][pSpecPlayer] != INVALID_PLAYER_ID)
	{
		new targetid = pTemp[playerid][pSpecPlayer], Float: x, Float: y, Float: z, Float: a, mes[128];

		if (!IsPlayerLogged(targetid))
		{
		    GameTextForPlayer(playerid,"~w~Oyuncu ~r~Cikis Yapti", 2000, 4);
			TogglePlayerSpectating(playerid, 0);
		}
		else
		{
			if (GetWorld(targetid) != GetWorld(playerid))		SetWorld(playerid, GetWorld(targetid));
			if (GetInterior(targetid) != GetInterior(playerid))	SetInterior(playerid, GetWorld(targetid));

			GetPlayerPos(targetid, x,y,z);
		    GetPlayerFacingAngle(targetid, a);

	       	new weap = AntiCheatGetWeapon(targetid),
			   ip[24],
			   Float: thealth,
			   Float: tarmour;

			GetPlayerIp(targetid, ip, sizeof(ip));
		    AntiCheatGetHealth(targetid, thealth);
		    AntiCheatGetArmour(targetid, tarmour);

		    format(mes, sizeof(mes), "XYZ: %.3f, %.3f, %.3f;  Angle: %.0f;  Interior: %i;  Virtual World: %i;", x, y, z, a, GetInterior(targetid),GetWorld(targetid));
		    PlayerTextDrawSetString(playerid, spectate_TD[playerid][0], mes);
		    PlayerTextDrawShow(playerid, spectate_TD[playerid][0]);

			format(mes, sizeof(mes), "%s[%i]; IP: %s; PING: %03i; CAN: %.0f; ZIRH: %.0f; SILAH: %s; MERMI: [Server: %i -- Deger: %i];",
			GetName(targetid), targetid, ip, GetPlayerPing(targetid), thealth, tarmour, inventory_items[weap][itemName], GetPlayerAmmo(targetid), PlayerInfo[targetid][pPlayerAmmo]);

		    PlayerTextDrawSetString(playerid, spectate_TD[playerid][1], mes);
		    PlayerTextDrawShow(playerid, spectate_TD[playerid][1]);
		}
	}
	return 1;
}

alias:ah("ahelp", "ayardim");
CMD:ah(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] == 0 && PlayerInfo[playerid][pFMAdmin] == 0) return SendNotAdmin(playerid);

	if (PlayerInfo[playerid][pFMAdmin] > 0)
	{
		SCM(playerid, COLOR_WHITE, "[FM Staff]: {C3C3C3}/ifmspec /gethere /getcar /changename /sendplayer");
	}

	if (CheckAdmin(playerid, ADMIN_LEVEL_1))
	{
		SCM(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/aduty /a(dminchat) /duyuru /setinterior(/setint) /setvw(/vw) /masked /afly");
		SCM(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/kick /skick /jail /unjail /warn /oban /mute /unmute /checkcars /hapisnoktalari");
		SCM(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/cc(clearchat) /gethere /goto /sendto /dondur /coz /slap /getip /getstats(/astats) /amulkler");
		SCM(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/gotocar, /gotopos /getcar /spec /specoff /resetweps(silahsifirla");
		SCM(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/icjail /dmlog /near /removebox /check /fixveh /d(elete)pame");
		SCM(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/labelsil /revive /reviveall");
	}
	if (CheckAdmin(playerid, ADMIN_LEVEL_2))
	{
		SCM(playerid, COLOR_WHITE, "[Level 2]: {C3C3C3}/respawnpolicecars /amotor /refuel /refuelall /respawncar /respawncars");
		SCM(playerid, COLOR_WHITE, "[Level 2]: {C3C3C3} /cezasil /acezasil /settime /havadurumu");
		SCM(playerid, COLOR_WHITE, "[Level 2]: {C3C3C3}/setskin /sethp /setarmour /aarac /label /x /y /z");
		SCM(playerid, COLOR_WHITE, "[Level 2]: {C3C3C3}/go /govw /oockanal /silahyasak /silahyasakkaldir /permaban /unpermaban /opermaban /banip");
	}
	if (CheckAdmin(playerid, ADMIN_LEVEL_3))
	{
		SCM(playerid, COLOR_WHITE, "[Level 3]: {C3C3C3}/giveitem /akilit /setname, /setadminname /isimkabul /chopshop /aracsil /dolapduzenle");
		SCM(playerid, COLOR_WHITE, "[Level 3]: {C3C3C3}/aarac /aracduzenle /agaraj /aev /aapartman /abina /abillboard(/abb) /unbanip");
		SCM(playerid, COLOR_WHITE, "[Level 3]: {C3C3C3}/telecmds /aunimpound /dolapekle /dolapliste /dolapsil /akiraliknokta /meslekdurum /aisyeri");
		SCM(playerid, COLOR_WHITE, "[Level 3]: {C3C3C3}/asilah /auver, /auyusturucu /hapisekle /hapissil /hapisduzenle /hapisnoktalari");
	}
	if (CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
	{
		SCM(playerid, COLOR_WHITE, "[Level 4]: {C3C3C3}/setadmin /sethelper /helperlead /fmadmin /dovusstili /copstocrime /departmansayi(LSFD)");
		SCM(playerid, COLOR_WHITE, "[Level 4]: {C3C3C3}/aracplaka /givemoney /ahide /setplayer /astreet /setdonatorskin");
		SCM(playerid, COLOR_WHITE, "[Level 4]: {C3C3C3}/aobject /astand /alabel /ahizkamerasi");
		SCM(playerid, COLOR_WHITE, "[Level 4]: {C3C3C3}/aatm /aistasyon /acctv /agate /ameslek /gmx /streamer");
		SCM(playerid, COLOR_WHITE, "[Level 4]: {C3C3C3}/showpm /showpmoff /showpms /nopms /abirlik");
	}
	if (CheckAdmin(playerid, DEVELOPER_LEVEL))
	{
		SCM(playerid, COLOR_WHITE, "[DEVELOPER CMD]: {C3C3C3}/payday /paydayall /kickall /anticheat_settings /createarrest");
	}
	return 1;
}

CMD:apm(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 1) return SendNotAdmin(playerid);
    static
	    userid,
	    text[128];
	if (sscanf(params, "us[128]", userid, text))
	    return SendHelpMessage(playerid, "/apm [ID/Isim] [mesaj]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Oyuncu oyunda deðil !");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kendine ozel mesaj yollayamazsin.");

	if (IsPlayerPause(userid)) SendServerMessage(playerid, "Bu oyuncu AFK, mesajýnýza yanit veremeyebilir.");
	GameTextForPlayer(userid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Yeni mesaj!", 3000, 3);
	PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);
	SendClientMessageEx(userid, COLOR_YELLOW, "[STAFF] «« %s: %s", GetAccName(playerid), text);
	SendClientMessageEx(playerid, 0xdede02FF, "[STAFF] »» %s (%d): %s", GetNameWithMask(userid), userid, text);
	return 1;
}

alias:awork("aduty");
CMD:awork(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 1) return SendNotAdmin(playerid);

	if (IsAdminDuty(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] == 1337) pTemp[playerid][pDebugMode] = 0;
		SendAdmMessage("%s adlý yetkili artýk müsait deðil.", GetAccName(playerid));
		TextDrawHideForPlayer(playerid, Admin);
		pTemp[playerid][pAdminDuty] = 0;

		SetPlayerColor(playerid, TEAM_HIT_COLOR);

		if (pTemp[playerid][pDMLog] == 1)
		{
			ClearKillFeed(playerid);
			pTemp[playerid][pDMLog] = 0;
		}
		server_admins--;
		return 1;
	}

	else
	{
		if(PlayerInfo[playerid][pAdmin] == 1337) pTemp[playerid][pDebugMode] = 1;
		SetPVarInt(playerid, "Admin:CodeInputted", 1);
		pTemp[playerid][pAdminDuty] = 1;
		pTemp[playerid][pDMLog] = 1;
		SendAdmMessage("%s adlý yetkili artýk müsait.", GetAccName(playerid));
		TextDrawShowForPlayer(playerid, Admin);

		SetPlayerColor(playerid, TEAM_ADMIN_COLOR);

		//SetPlayerColor(playerid,TEAM_ADMIN_COLOR);
		server_admins++;
	}
	return 1;
}

CMD:gotopos(playerid,params[])
{
	new intid,Float:pos[3];
	if (PlayerInfo[playerid][pAdmin] < 1)	return SendNotAdmin(playerid);
	if (sscanf(params, "ifff",intid,pos[0],pos[1],pos[2])) return SendSyntaxMessage(playerid, "/gotopos [INT ID] [X] [Y] [Z]");
	SetPlayerInterior(playerid,intid);
	SetPlayerPosEx(playerid,pos[0],pos[1],pos[2]);
	PlayerInfo[playerid][pCadir] = -1;
	return 1;
}

alias:adminchat("a");
CMD:adminchat(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 1)	return SendNotAdmin(playerid);
	//if (!pTemp[playerid][pAdminDuty])       return SendErrorMessage(playerid, "Admin iþbaþýnda olmalýsýnýz.");
	if (isnull(params)) 					return SendHelpMessage(playerid, "(/a)dminchat [mesaj ]");
	if (PlayerInfo[playerid][pSettings] & togAdmChat)					return SendErrorMessage(playerid, "Bu komutu kullanabilmek için admin sohbetini açmanýz gerekmektedir.");

	new prefix[32] = "Admin";
	if (PlayerInfo[playerid][pAdmin] == DEVELOPER_LEVEL)			prefix = "Geliþtirici";
	else if (PlayerInfo[playerid][pAdmin] == HIGH_ADMIN_LEVEL) 		prefix = "Genel Yetkili";
	else if (PlayerInfo[playerid][pAdmin] == 3)						prefix = "Oyun Yetkilisi III";
	else if (PlayerInfo[playerid][pAdmin] == 2)						prefix = "Oyun Yetkilisi II";
	else if (PlayerInfo[playerid][pAdmin] == 1)						prefix = "Oyun Yetkilisi";
	else if (PlayerInfo[playerid][pAdmin] == 1337)					prefix = "Yönetici";

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		foreach(new i : Player)
		{
		    //if (IsPlayerLogged(i) == 0 || !CheckAdmin(i, ADMIN_LEVEL_1)) continue;
			//if (!IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togAdmCmds)) continue;

		    if (IsPlayerLogged(i) == 0 || (PlayerInfo[i][pSettings] & togAdmChat) || PlayerInfo[i][pAdmin] < 1) continue;

			SendClientMessageEx(i, COLOR_YELLOWG, "** [AdmChat] %s %s(%d): %.*s ...", prefix, GetAccName(playerid), playerid, pos, params);
			SendClientMessageEx(i, COLOR_YELLOWG, "... %s", params[pos]);
		}
	}
	else
	{
		foreach(new i : Player)
		{
			if (IsPlayerLogged(i) == 0 || (PlayerInfo[i][pSettings] & togAdmChat) || PlayerInfo[i][pAdmin] < 1) continue;

			SendClientMessageEx(i, COLOR_YELLOWG, "** [AdmChat] %s %s(%d): %s", prefix, GetAccName(playerid), playerid, params);
		}
		//AMSG(COLOR_YELLOWG, "* [AC] %s (%s): %s", GetPlayerNameEx(playerid), GetAccName(playerid), params);
	}
	return 1;
}

/*alias:an("ans", "/answer");
CMD:an(playerid,params[])
{
	new userid, text[128];

	if (sscanf(params, "us[128]", userid, text))						return SendHelpMessage(playerid, "/an [ID / isim] [answer]");
	if (!IsTester(playerid) && !CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (!IsPlayerLogged(userid))										return SendNotConnected(playerid);
	if (userid == playerid)												return SendErrorMessage(playerid, "You cannot answer to yourself.");

    new mes[256];

	if (strlen(text) > MAXLEN)
	{
	    new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		format(mes, sizeof(mes), "%s answers you: %s", GetAccName(playerid), text);
		SendClientMessageEx(userid, 0x00CC99AA, "%.*s", pos, mes);
		SendClientMessageEx(userid, 0x00CC99AA, "... %s", mes[pos]);

		format(mes, sizeof(mes), "[ANSWER]: %s answered %s [ID: %i]: %s", GetAccName(playerid), GetNameEx(userid), userid, text);
		StaffMSG(0x00CC99AA, "%.*s", pos, mes);
		StaffMSG(0x00CC99AA, "... %s", mes[pos]);
	}
	else
	{
	    format(mes, sizeof(mes), "%s answers you: %s", GetAccName(playerid), text);
		SendClientMessage(userid, 0x00CC99AA, mes);
		StaffMSG(0x00CC99AA, "[ANSWER]: %s answered %s [ID: %i]: %s", GetAccName(playerid), GetNameEx(userid), userid, text);
	}
	return 1;
}*/

/*alias:aooc("ao");
CMD:aooc(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (isnull(params))							return SendHelpMessage(playerid, "(/ao)oc [text]");

	new mes[128];

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		format(mes, sizeof(mes), "[OOC] %s: %.*s ...", GetAccName(playerid), pos, params);
		SCMALL(0xF97804FF,mes);
		format(mes, sizeof(mes), "... %s", params[pos]);
		SCMALL(0xF97804FF,mes);
	}
	else
	{
		format(mes, sizeof(mes), "[OOC] %s: %s", GetAccName(playerid), params);
		SCMALL(0xF97804FF, mes);
	}
	return 1;
}*/

/*CMD:announce(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (isnull(params))							return SendHelpMessage(playerid, "/announce [text]");

    new mes[128];
    format(mes, sizeof(mes), "~y~%s: ~w~%s", GetNameEx(playerid), params);

    foreach (new i : Player)
	{
	    if (IsPlayerLogged(i) == 0 || GetWorld(playerid) != GetWorld(i)) continue;

		GameTextForPlayer(i, mes, 5000, 4);
	}
	return 1;
}*/

alias:sokaktansesler("sokses");
CMD:sokaktansesler(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (isnull(params))							return SendHelpMessage(playerid, "/sokaktansesler (yazý)");

	new mes[128];

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		format(mes, sizeof(mes), "(( Sokaktan Sesler: %.*s ...", pos, params);
		SCMALL(0xAAC4E5FF,mes);
		format(mes, sizeof(mes), "... %s ))", params[pos]);
		SCMALL(0xAAC4E5FF,mes);
	}
	else
	{
		format(mes, sizeof(mes), "(( Sokaktan Sesler: %s ))", params);
		SCMALL(0xAAC4E5FF, mes);
	}
	new newst[300];
	format(newst, sizeof(newst), "%s",params);

	new DCC_Embed:ixd = DCC_CreateEmbed();

    new ext[880];
    format(ext, sizeof(ext), "\n\n **Yetkili:**\t\t\t%s(%s) \n**Icerik:**\t\t\t %s \n\n**Tarih:**\t\t\t %s, %s", GetAccName(playerid), GetNameEx(playerid), trcar(newst), GetNOW(), GetTimeEx());

    DCC_SetEmbedColor(ixd, 7419530);
    DCC_SetEmbedDescription(ixd, ("## Sokaktan Sesler :gun: "));
    DCC_AddEmbedField(ixd, trcar(ext));
    DCC_SendChannelEmbedMessage(DCC_FindChannelByName(SES_LOG), ixd);
    DCC_SendWarning(DCC_FindChannelByName(SES_LOG), 0);
	return 1;
}


CMD:duyuru(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (isnull(params))							return SendHelpMessage(playerid, "/duyuru [Duyuru Yazýsý]");

	new mes[128];

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		format(mes, sizeof(mes), "[Duyuru] %s: %.*s ...", GetAccName(playerid), pos, params);
		SCMALL(0xF97804FF,mes);
		format(mes, sizeof(mes), "... %s", params[pos]);
		SCMALL(0xF97804FF,mes);
	}
	else
	{
		format(mes, sizeof(mes), "[Duyuru] %s: %s", GetAccName(playerid), params);
		SCMALL(0xF97804FF, mes);
	}
	return 1;
}

alias:setinterior("setint");
CMD:setinterior(playerid, params[])
{
	new userid, int;
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1)) 	return SendNotAdmin(playerid);
	if (sscanf(params, "ud", userid, int)) 		return SendHelpMessage(playerid, "/setinterior [id/karakter adý] [ID interior (0-255)");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (int < 0 || int > 255)					return SendErrorMessage(playerid, "Interior ID 0 ile 255 arasýnda olabilir");

	SetInterior(userid, int);
	SendServerMessage(userid, "%s adlý yetkili interiorunuzu deðiþtirdi. [ID: %i].", GetAccName(playerid), int);
	SendAdmMessageToPlayer(playerid, "%s adlý kiþinin interioru deðiþtirildi. Interior [ID: %i].", GetNameEx(userid), int);
	return 1;
}

alias:setworld("setvw");
CMD:setworld(playerid, params[])
{
	new userid, wid;
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1)) 	return SendNotAdmin(playerid);
	if (sscanf(params, "ud", userid, wid))		return SendHelpMessage(playerid, "/setworld [ID/karakter adý] [ID virtual world (65535)]");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);
	if (wid < 0 || wid > 65535)					return SendErrorMessage(playerid, "VW 0 ile 65535 arasýnda olabilir.");

	SetWorld(userid, wid);
	SendServerMessage(userid, "%s adlý yetkili dünyanýzý deðiþtirdi. [ID: %i].", GetAccName(playerid),  wid);
	SendAdmMessageToPlayer(playerid, "%s adlý kiþinin dünyasý deðiþtirildi. Dünya: [ID: %i].", GetNameEx(userid), wid);
	return 1;
}

CMD:getworld(playerid, params[])
{
	new userid;
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1)) 	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid)) 			return SendHelpMessage(playerid, "/getworld [ID / isim]");
	if (!IsPlayerLogged(userid)) 				return SendNotConnected(playerid);

	SendServerMessage(playerid, "%s [ID: %d] adlý oyuncu %i dünyasýnda.", GetNameEx(userid), userid, GetWorld(userid));
	return 1;
}

CMD:vw(playerid, params[])
{
	SendServerMessage(playerid, "%s [ID: %d] adlý oyuncu olarak %i numaralý dünyadasýnýz.", GetNameEx(playerid), playerid, GetWorld(playerid));
	return 1;
}

CMD:gonder(playerid, params[])
{
	new opt[12], userid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] < 3)		return SendNotAdmin(playerid);

	if (sscanf(params, "s[12]u", opt, userid)){
		SendHelpMessage(playerid, "/gonder [seçenek] [ID]");
		SendHelpMessage(playerid, "Seçenekler: lc, spawn");

		return 1;
	}
	if(!IsPlayerLogged(userid))						return SendNotConnected(playerid);

	/*if(!strcmp(opt, "lc", true)){
		SetPlayerPosEx(userid, 785.9385,-868.3475,35.3712);
		SetPlayerFacingAngle(userid, 180.0);
		SetInterior(userid, 0);
		SetWorld(userid, 0);
		SendServerMessage(playerid, "Belirtilen oyuncuyu Liberty City'e ýþýnladýnýz.");
		SendServerMessage(userid, "Yönetici tarafýndan Liberty City'e ýþýnlandýnýz.");
	} */
	if(!strcmp(opt, "spawn", true)){

		SetWorld(userid, 0);
		SetInterior(userid, 0);
		SetPlayerPosEx(userid,1127.9866,-1452.7633,15.7969);

		SendServerMessage(playerid, "Belirtilen oyuncuyu spawn bölgesine ýþýnladýnýz.");
		SendServerMessage(userid, "Yönetici tarafýndan spawn bölgesine ýþýnlandýnýz.");
	}
	return 1;
}

alias:masked("maskeliler");
CMD:masked(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);

	new mask_string[1024];
	mask_string[0] = EOS;

	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || !maskOn{i}) continue;
		//SendClientMessageEx(playerid, COLOUR_WHITE, "%s%s (%s, ID: %i)", mask_string, GetNameWithMask(i), GetNameEx(i), i);
		format(mask_string, sizeof(mask_string), "{FFFFFF}%s%s - %s [ID: %i]\n", mask_string, GetNameWithMask(i), GetNameEx(i), i);
	}

	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{FFFFFF}Maskeli Oyuncular", mask_string, ">>>", "");
	return 1;
}


CMD:kick(playerid, params[])
{
	new userid, reason[64];

    if (!CheckAdmin(playerid, ADMIN_LEVEL_1) && !IsTester(playerid, 5))		return SendNotAdmin(playerid);
	if (sscanf(params, "us[64]", userid, reason)) 	return SendHelpMessage(playerid, "/kick [ID/Karakter Adý] [Sebep]");
	if (!IsPlayerLogged(userid)) 					return SendNotConnected(playerid);
	if (pTemp[playerid][pBanTime] > gettime() && PlayerInfo[playerid][pAdmin] != 1337)      return SendErrorMessage(playerid, "Üst üste kickleyemezsin.");
	new mes[128];
	format(mes, sizeof(mes), "[/kick] %s adlý oyuncu %s adlý yönetici tarafýndan oyundan atýldý. Sebep: %s", GetNameEx(userid), GetAccName(playerid), reason);
	insert_log(mes, ADMIN_LOG, 2, PlayerInfo[userid][pAccID], PlayerInfo[playerid][pAccID]);
	format(mes, sizeof(mes), "(( %s adlý kullanýcý %s tarafýndan oyundan atýldý. Sebep: %s ))", GetNameEx(userid), GetAccName(playerid), reason);
	SendClientMessageByAdmin(COLOUR_TOMATO, mes);
	KickEx(userid);
	pTemp[playerid][pBanTime] = gettime() + 5;
	return 1;
}

CMD:skick(playerid, params[])
{
	new userid, reason[128], mes[64];
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1) && !IsTester(playerid, 5)) 		return SendNotAdmin(playerid);
	if (sscanf(params, "us[128]", userid, reason)) 	return SendHelpMessage(playerid, "/skick [ID/Karakter Adý] [Sebep]");
	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);

	if (PlayerInfo[userid][pAdmin] < PlayerInfo[playerid][pAdmin])
	{
		SendServerMessage(playerid, "%s adlý kiþiyi oyundan attýnýz.", GetNameEx(userid));
		format(mes, sizeof(mes), "[/skick] %s adlý oyuncu %s adlý yönetici tarafýndan sunucudan atýldý. Sebep: %s", GetNameEx(userid), GetAccName(playerid), reason);
		insert_log(mes, ADMIN_LOG, 2, PlayerInfo[userid][pAccID], PlayerInfo[playerid][pAccID]);

		KickEx(userid);
	}
	return 1;
}

alias:offjail("ojail");
CMD:offjail(playerid, params[])
{
	new username[MAX_PLAYER_NAME + 1], reason[32], time;

    if (!CheckAdmin(playerid, ADMIN_LEVEL_1)) 					return SendNotAdmin(playerid);
	if (sscanf(params,"s[32]ds[32]", username, time, reason)) 	return SendHelpMessage(playerid, "/offjail [karakter adý] [(1-2880) dakika] [sebep]");
	if (!IsValidPlayerName(username)) 							return SendErrorMessage(playerid, "Geçersiz karakter adý");
	if (time <= 0 || time > 2880) 								return SendErrorMessage(playerid, "Dakika 1 ile 2880 arasýnda olmalýdýr.");

    foreach (new i : Player)
	{
	    if (IsPlayerLogged(i) == 0 || !CompareStrings(username, GetNameEx(i))) continue;
	    SendErrorMessage(playerid, "Belirtilen oyuncu çevrimiçi: %s [ID: %i]", GetNameEx(i), i);
		return 1;
	}

	new query[256];
	mysql_format(dbHandle, query,sizeof(query),"SELECT * FROM users WHERE `name` = '%e'", username);
	mysql_tquery(dbHandle, query, "OnPlayerOfflineJail", "dsds", playerid, username, time, reason);
	return 1;
}

CMD:jail(playerid, params[])
{
	new userid, time, reason[128];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))				return SendNotAdmin(playerid);
	if (sscanf(params,"uds[128]", userid, time, reason)) 	return SendHelpMessage(playerid, "/ajail [ID/Karakter Adý] [(1-999999) dakika] [sebep]");
	if (!IsPlayerLogged(userid))							return SendNotConnected(playerid);
	if (time <= 0 || time > 999999)							return SendErrorMessage(playerid, "Dakika 1 ile 999999 arasýnda olmalýdýr.");

	PlayerInfo[userid][pAJailed] = 1;
	PlayerInfo[userid][pAJailTime] = time*60;
	SetWorld(userid, userid + 100);
	SetPlayerPosEx(userid, 10.1714, 2337.1333, 24.3034);
	SetSpawnInfoEx(userid, 10.1714, 2337.1333, 24.3034);
	for(new j; j < 12; j++)
	{
		AC_ResetPlayerWeapons(userid);

		PlayerInfo[userid][pWeapons][j] = 0;
		PlayerInfo[userid][pAmmo][j] = 0;
	}

	new mes[128];

	if(time > 10)
	{
	    format(mes, sizeof(mes), "(( %s adlý kiþi yönetici tarafýndan %i dakika hapise gönderildi. Sebep: %s ))", GetNameEx(userid), time, reason);
        SendClientMessageByAdmin(COLOUR_TOMATO, mes);
    }

	format(mes, sizeof(mes), "[AJAIL] %s adlý karakter %s adlý yönetici tarafýndan %i dakika hapise gönderildi. Sebep: %s", GetNameEx(userid), GetAccName(playerid), time, reason);
	insert_log(mes, ADMIN_LOG, 5, PlayerInfo[userid][pAccID], PlayerInfo[playerid][pAccID]);
	return 1;
}

CMD:unjail(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1)) 									return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))											return SendHelpMessage(playerid, "/unjail [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))												return SendNotConnected(playerid);
	if (PlayerInfo[userid][pJailed] == 0 && PlayerInfo[userid][pAJailed] == 0)	return SendErrorMessage(playerid, "Belirtilen oyuncu hapiste deðil");

	PlayerInfo[userid][pJailed] =
	PlayerInfo[userid][pIsolateTime] =
	PlayerInfo[userid][pJailTime] =
	PlayerInfo[userid][pAJailed] =
	PlayerInfo[userid][pAJailTime] = 0;

	if (IsValidDynamic3DTextLabel(PrisonLabel[userid]))
	{
		DestroyDynamic3DTextLabel(PrisonLabel[userid]);
  		PrisonLabel[userid] = Text3D:INVALID_3DTEXT_ID;
	}
 	
 	SetWorld(userid, 0);
	SetInterior(userid, 0);
	SetPlayerPosEx(userid,1127.9866,-1452.7633,15.7969);
	SetSpawnInfoEx(userid, 1127.9866,-1452.7633,15.7969);

	SendAdmMessageToPlayer(userid, "Yönetici tarafýndan hapisten çýkartýldýnýz.");
	SendAdmMessageToPlayer(playerid, "%s [ID: %i] adlý oyuncuyu hapisten çýkarttýnýz.", GetAccName(userid), userid);
	return 1;
}

CMD:labelsil(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))			return SendHelpMessage(playerid, "/labelsil [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);
    if (!GetPVarInt(userid, "3DLabel"))			return SendErrorMessage(playerid, "Oyuncu herhangi bir 3D yazý oluþturmamýþ.");

    DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "3DLabel"));
    DeletePVar(userid, "3DLabel");

	SendServerMessage(userid, "Ortam açýklamanýz %s adlý yönetici tarafýndan silindi.", GetAccName(playerid));
    AMSG(COLOR_LIGHTRED,"[LOG] %s adlý yönetici tarafýndan %s [ID:%i] adlý oyuncunun ortam açýklamalarý silindi.", GetAccName(playerid), GetNameEx(userid), userid);
    return 1;
}

CMD:warn(playerid, params[])
{
	new userid, reason[64];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1)) 		return SendNotAdmin(playerid);
	if (sscanf(params, "us[125]", userid, reason))	return SendHelpMessage(playerid, "/warn [ID/Karakter Adý] [Sebep]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (strlen(reason) > 63) 						return SendErrorMessage(playerid, "Sebep maksimum 63 karakter olabilir.");

    new mes[128], query[256];

	PlayerInfo[userid][pWarns]++;
	SQL_SetInteger("users", "warn", PlayerInfo[userid][pWarns], PlayerInfo[userid][pID]);

	if (PlayerInfo[userid][pWarns] >= 3)
	{
		format(mes,sizeof(mes),"(( %s adlý oyuncu yasaklandý. Sebep: %s (3 uyarý) ))", GetNameEx(userid), reason,PlayerInfo[userid][pWarns]);
		SendClientMessageByAdmin(COLOUR_TOMATO, mes);

		format(query, sizeof(query), "[/ban] %s adlý oyuncu %s adlý yönetici tarafýndan engellendi. Sebep: %s (3 uyarý)", GetAccName(userid), GetAccName(playerid), reason);
		insert_log(query, ADMIN_LOG, 1, PlayerInfo[userid][pAccID], PlayerInfo[playerid][pAccID]);

		new ip[24];
		GetPlayerIp(userid, ip, sizeof(ip));

		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `bans` (accountid, ip, name, admin, reason, date) VALUES (%i, '%e', '%e', '%e', '%e', '%e')", PlayerInfo[playerid][pAccID], ip, GetAccName(userid), GetAccName(playerid), reason, GetFullDate());
		mysql_tquery(dbHandle, query);

		KickEx(userid);
		return 1;
	}

	SendAdmMessageToPlayer(userid, "Bir uyarý aldýnýz. %s [%i/3].", GetAccName(playerid), PlayerInfo[userid][pWarns]);

    format(query, sizeof(query), "[/warn] %s adlý oyuncuya %s adlý yönetici tarafýndan bir uyarý verildi. Sebep: %s", GetAccName(userid), GetAccName(playerid), reason);
	insert_log(query, ADMIN_LOG, 4, PlayerInfo[userid][pAccID], PlayerInfo[playerid][pAccID]);

    format(mes, sizeof(mes), "(( %s adlý oyuncuya yönetici tarafýndan bir uyarý verildi. Sebep: %s [%i/3] ))", GetNameEx(userid), reason, PlayerInfo[userid][pWarns]);
	SendClientMessageByAdmin(COLOUR_TOMATO, mes);
	return 1;
}

CMD:ban(playerid, params[])
{
	new userid, reason[64];
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))		return SendNotAdmin(playerid);
	if (sscanf(params, "us[64]", userid, reason))	return SendHelpMessage(playerid, "/ban [ID/Karakter Adý] [Sebep]");
	if (!IsPlayerLogged(userid)) 					return SendNotConnected(playerid);
	if (strlen(reason) > 63)						return SendErrorMessage(playerid, "Sebep maksimum 63 karakter olmalýdýr.");
	if (pTemp[playerid][pBanTime] > gettime() && PlayerInfo[playerid][pAdmin] != 1337)      return SendErrorMessage(playerid, "Üst üste yasaklama yapamazsýnýz.");

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `block_name`='%e', `block_reason` ='%e', `status` = '3' WHERE `id` = '%i'", GetAccName(playerid), reason, PlayerInfo[userid][pID]);
	mysql_tquery(dbHandle, query);

	new mes[128];
    format(mes, sizeof(mes), "(( %s adlý karakter yönetici tarafýndan yasaklandý. Sebep: %s ))", GetNameEx(userid), reason);
	SendClientMessageByAdmin(COLOUR_TOMATO, mes);

	pTemp[playerid][pBanTime] = gettime() + 5;

    KickEx(userid);
	return 1;
}

alias:oban("offlineban");
CMD:oban(playerid, params[])
{
	new name[MAX_PLAYER_NAME], reason[64];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))		return SendNotAdmin(playerid);
	if (sscanf(params, "s[24]s[64]", name, reason))	return SendHelpMessage(playerid, "/oban [karakter adý] [sebep]");
    if (!IsValidPlayerName(name)) 					return SendErrorMessage(playerid, "Geçersiz karakter adý.");
	if (strlen(reason) > 63)						return SendErrorMessage(playerid, "Sebep maksimum 63 karakter olmalýdýr.");
	if (pTemp[playerid][pBanTime] > gettime() && PlayerInfo[playerid][pAdmin] != 1337)      return SendErrorMessage(playerid, "Üst üste yasaklama yapamazsýnýz.");

    foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || !CompareStrings(GetNameEx(i), name))	continue;

		SendErrorMessage(playerid, "Belirtilen karakter þu an oyunda. %s [ID: %i]", GetNameEx(i), i);
		return 1;
	}

    pTemp[playerid][pBanTime] = gettime() + 5;

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%e'", name);
	mysql_tquery(dbHandle, query, "OfflineBlockPlayer", "iss", playerid, name, reason);
	return 1;
}

CMD:unban(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params, "s[24]", name))			return SendHelpMessage(playerid, "/unban [karakter adý]");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%e'", name);
	mysql_tquery(dbHandle, query, "UnBlockPlayer", "is", playerid, name);
	return 1;
}

alias:opermaban("offpermaban");
CMD:opermaban(playerid, params[])
{
	new name[MAX_PLAYER_NAME], reason[64];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1)) 		return SendNotAdmin(playerid);
	if (sscanf(params, "s[24]s[64]", name, reason)) return SendHelpMessage(playerid, "/opermaban [hesap adý] [sebep]");
    if (!IsValidPlayerName(name)) 					return SendErrorMessage(playerid, "Geçersiz hesap adý.");
	if (strlen(reason) > 63)						return SendErrorMessage(playerid, "Sebep maksimum 63 karakter olmalýdýr.");

    foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || !CompareStrings(GetAccName(i), name)) continue;

		SendErrorMessage(playerid, "%s adlý hesap þu an aktif. %s [ID: %i]", name, GetNameEx(i), i);
		return 1;
	}

	new query[288];
	mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `id` FROM `bans` WHERE `name` = '%e') as banid FROM `accounts` WHERE `login` = '%e'", name, name);
	mysql_tquery(dbHandle, query, "OfflineBanPlayer", "iss", playerid, name, reason);
	return 1;
}

CMD:permaban(playerid, params[])
{
	new userid, reason[64];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))		return SendNotAdmin(playerid);
	if (sscanf(params, "us[64]", userid, reason))	return SendHelpMessage(playerid, "((hesabý tamamen yasaklar)) /permaban [ID/Karakter Adý] [sebep]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (strlen(reason) > 63)						return SendErrorMessage(playerid, "Sebep maksimum 63 karakter olmalýdýr.");
	if (pTemp[playerid][pBanTime] > gettime() && PlayerInfo[playerid][pAdmin] != 1337)      return SendErrorMessage(playerid, "Üst üste yasaklama yapamazsýnýz.");

	new mes[128];
    format(mes, sizeof(mes), "(( %s adlý oyuncu yönetici tarafýndan yasaklandý. Sebep: %s ))", GetNameEx(userid), reason);
	SendClientMessageByAdmin(COLOUR_TOMATO, mes);

	new ip[24], query[512];
	GetPlayerIp(userid, ip, sizeof(ip));

	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `bans` (accountid, ip, name, admin, reason, date) VALUES (%i, '%e', '%e', '%e', '%e', '%e')", PlayerInfo[userid][pAccID], ip, GetAccName(userid), GetAccName(playerid), reason, GetFullDate());
	mysql_tquery(dbHandle, query);

	format(query, sizeof(query), "[/ban] %s adlý kullanýcý %s adlý yönetici tarafýndan yasaklandý. Sebep: %s", GetAccName(userid), GetAccName(playerid), reason);
	insert_log(query, ADMIN_LOG, 1, PlayerInfo[userid][pAccID], PlayerInfo[playerid][pAccID]);

	pTemp[playerid][pBanTime] = gettime() + 5;

    KickEx(userid);
	return 1;
}

CMD:ck(playerid, params[])
{
	new userid, reason[64];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))		return SendNotAdmin(playerid);
	if (sscanf(params, "us[64]", userid, reason))	return SendHelpMessage(playerid, "/ck [ID/Karakter Adý] [sebep]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (strlen(reason) > 63)						return SendErrorMessage(playerid, "Sebep maksimum 63 karakter olmalýdýr.");
    if (pTemp[playerid][pBanTime] > gettime() && PlayerInfo[playerid][pAdmin] != 1337)      return SendErrorMessage(playerid, "Üst üste yasaklama yapamazsýnýz.");

	new mes[128];
    format(mes, sizeof(mes), "[Karakter Ölümü] %s adlý karakter hayatýný kaybetti. Sebep: %s", GetNameEx(userid), reason);
	SendClientMessageByAdmin(COLOUR_TOMATO, mes);

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `block_name`='%e', `block_reason` ='%e', `status` = '3' WHERE `id` = '%i'", GetAccName(playerid), reason, PlayerInfo[userid][pID]);
	mysql_tquery(dbHandle, query);

	format(query, sizeof(query), "[/ck] %s adlý kullanýcý %s adlý yönetici tarafýndan CK edildi. Sebep: %s", GetAccName(userid), GetAccName(playerid), reason);
	insert_log(query, ADMIN_LOG, 1, PlayerInfo[userid][pAccID], PlayerInfo[playerid][pAccID]);

	pTemp[playerid][pBanTime] = gettime() + 5;

    KickEx(userid);
	return 1;
}

CMD:unpermaban(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params, "s[24]", name))			return SendHelpMessage(playerid, "/unpermaban [hesap adý]");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `bans` WHERE `name` = '%e'", name);
	mysql_tquery(dbHandle, query, "UnBanPlayer", "is", playerid, name);
	return 1;
}

CMD:banip(playerid, params[])
{
	new ip[24], reason[64];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params, "s[24]s[64]", ip))		return SendHelpMessage(playerid, "/banip [IP] [sebep]");
	if (!IsAnIP(ip))							return SendErrorMessage(playerid, "Hatalý IP formatý.");
	if (strlen(reason) > 63)					return SendErrorMessage(playerid, "Sebep minimum 63 karakter olmalýdýr.");
	if (pTemp[playerid][pBanTime] > gettime() && PlayerInfo[playerid][pAdmin] != 1337)      return SendErrorMessage(playerid, "Üst üste yasaklama yapamazsýnýz.");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `bans` WHERE `ip` = '%e'", ip);
	mysql_tquery(dbHandle, query, "BanAnIP", "iss", playerid, ip, reason);

	pTemp[playerid][pBanTime] = gettime() + 5;
	return 1;
}

CMD:unbanip(playerid, params[])
{
	new ip[24];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
	if (sscanf(params, "s[24]", ip))				return SendHelpMessage(playerid, "/unbanip [IP]");
	if (!IsAnIP(ip))								return SendErrorMessage(playerid, "Hatalý IP formatý.");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `bans` WHERE `ip` = '%e'", ip);
	mysql_tquery(dbHandle, query, "UnBanAnIP", "is", playerid, ip);

	return 1;
}

CMD:mute(playerid, params[])
{
	new userid, time, mreason[64];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))				return SendNotAdmin(playerid);
	if (sscanf(params,"uds[128]", userid, time, mreason)) 	return SendHelpMessage(playerid, "/mute [ID/Karakter Adý] [(1-1440) dakika] [sebep]");
	if (!IsPlayerLogged(userid)) 							return SendNotConnected(playerid);
	if (time < 1 || time > 1440)							return SendErrorMessage(playerid, "Süre 1 ile 1440 dakika arasýnda olmalýdýr.");
	if (strlen(mreason) > 63)								return SendErrorMessage(playerid, "Sebep minimum 63 karakter olmalýdýr.");

	PlayerInfo[userid][pMutedTime] = time*60;

	new mes[128];
	format(mes, sizeof(mes), "(( %s adlý oyuncu yönetici tarafýndan %i dakika susturuldu. Sebep: %s ))", GetNameEx(userid), time, mreason);
	SendClientMessageByAdmin(COLOUR_TOMATO, mes);
	return 1;
}
CMD:unmute(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))				return SendHelpMessage(playerid, "/unmute [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (PlayerInfo[userid][pMutedTime] == 0)		return SendErrorMessage(playerid, "Belirtilen oyuncu susturulmuþ.");

	PlayerInfo[userid][pMutedTime] = 0;

	new mes[128];
	format(mes, sizeof(mes), "(( %s adlý oyuncunun susturulmasý yönetici tarafýndan kaldýrýldý. ))", GetNameEx(userid));
	SendClientMessageByAdmin(COLOUR_TOMATO, mes);
	return 1;
}
alias:clearchat("ccall");
CMD:clearchat(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);

	ClearChatboxForAll(50);
	SAMALL("%s adlý yönetici tarafýndan sohbet temizlendi.", GetAccName(playerid)); // AdmCmd
	return 1;
}

alias:sohbettemizle("sohbetsil", "sc", "ccmy", "cc");
CMD:sohbettemizle(playerid)
{
	ClearChatbox(playerid, 50);
	GameTextForPlayer(playerid, "~y~sohbet temizlendi", 1000, 5);
	return 1;
}

/*CMD:testmsg(playerid, params[])
{
	new Float:hp;
	AntiCheatGetHealth(playerid, hp);

	SM1(playerid, "%f", hp);
	return 1;
}*/


/*CMD:test(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))			return SendHelpMessage(playerid, "/gethere [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);

	SetPlayerMarkerForPlayer(playerid, userid, 0xA52A2AFF);
	return 1;
}*/

CMD:osilahkontrol(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return 0;

	new name[32];

	if(sscanf(params, "s[32]", name))
		return SendSyntaxMessage(playerid, "/osilahkontrol (Karakter Adý)");

	mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM users WHERE name = '%e' AND online = 0", name);
	new Cache:idveri = mysql_query(dbHandle, queryx, true);
	new rows;
	cache_get_row_count(rows);

	if(!rows)
	{
		SendErrorMessage(playerid, "%s adlý karakter bulunamadý. (%s)", name, ReturnDate());
		cache_delete(idveri);
	}
	else
	{
		new tmpID;
		cache_get_value_int(0, "id", tmpID);
		cache_delete(idveri);
		rows = 0;

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d'", tmpID);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		cache_get_row_count(rows);

		if(!rows)
		{
			SendErrorMessage(playerid, "%s adlý karaktere kayýtlý silah bulunamadý. (%s)", name, ReturnDate());
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "%s adlý karaktere baðlý silahlar %s tarihinde listelendi:", name, ReturnDate());

			new id, weaponid, ammo, status, house, vehicle, biz, olusumid, idstr[6], statusstr[24];

			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "id", id);
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);
				cache_get_value_int(j, "status", status);
				cache_get_value_int(j, "house", house);
				cache_get_value_int(j, "vehicle", vehicle);
				cache_get_value_int(j, "biz", biz);
				cache_get_value_int(j, "faction_id", olusumid);
				format(idstr, 6, "%d", id);

				if(id < 1000)
					format(idstr, 6, "0%d", id);

				if(id < 100)
					format(idstr, 6, "00%d", id);

				if(id < 10)
					format(idstr, 6, "000%d", id);

				switch(status)
				{
					case 0: format(statusstr, 24, "Üzerinizde");
					case 1: format(statusstr, 24, "Evde (%d)", house);
					case 2: format(statusstr, 24, "Araçta (%d)", vehicle);
					case 3: format(statusstr, 24, "Ýþletmede (%d)", biz);
					case 4: format(statusstr, 24, "Polis Zimmeti");
					case 5: format(statusstr, 24, "Yönetici Müdahalesi");
					case 6: format(statusstr, 24, "Geri Ödeme Yapýldý");
					case 7: format(statusstr, 24, "Birlik kasasýnda (%d)", olusumid);
				}
				SendClientMessageEx(playerid, COLOR_GREY, "Slot[%d] - ID[%s] - Silah[%s] - Mermi[%d] - Durum[%s]", j+1, idstr, GetWeaponNameEx(weaponid), ammo, statusstr);
			}
		}
		cache_delete(veri);
	}
	return 1;
}

CMD:gethere(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1 && !IsTester(playerid, 2)) && PlayerInfo[playerid][pEbc] < 1 && PlayerInfo[playerid][pFMAdmin] < 1)	return SendNotAdmin(playerid);

	if (sscanf(params, "u", userid))						return SendHelpMessage(playerid, "/gethere [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))							return SendNotConnected(playerid);
	if (GetPlayerState(userid) == PLAYER_STATE_SPECTATING)	return SendErrorMessage(playerid, "Belirtilen oyuncu izleme modunda.");

	GetPlayerPos(userid,playerEskiPos[userid][0],playerEskiPos[userid][1],playerEskiPos[userid][2]);
    SendPlayerToPlayer(userid, playerid);
	SendServerMessage(userid, "Yönetici tarafýndan çekildiniz.");
	PlayerInfo[userid][pCadir] = -1;
	return 1;
}

alias:ptp("p2p");
CMD:ptp(playerid, params[])
{
    if (!CheckAdmin(playerid, ADMIN_LEVEL_1 && !IsTester(playerid, 2)))	return SendNotAdmin(playerid);
    new gelen, id;
    if(sscanf(params, "uu", gelen, id)) return SendHelpMessage(playerid, "/ptp [kiþi id] [ýþýnlanacaðý kiþi id]");
    if (!IsPlayerLogged(gelen)) return SendErrorMessage(playerid, "Iþýnlatýlacaðý kiþi aktif deðil");
    if (!IsPlayerLogged(id)) return SendErrorMessage(playerid, "Iþýnlanan aktif degil.");
    SendPlayerToPlayer(gelen, id);
	GetPlayerPos(gelen,playerEskiPos[gelen][0],playerEskiPos[gelen][1],playerEskiPos[gelen][2]);
	SendServerMessage(playerid, "%s adlý kiþiyi %s adlý kiþiye ýþýnladýnýz.", GetNameEx(gelen), GetNameEx(id));
	PlayerInfo[gelen][pCadir] = -1;
    return 1;
}

CMD:goto(playerid, params[])
{
	static
	    id,
	    type[24],
		string[64];

	if (sscanf(params, "u", id))
 	{
	 	SendHelpMessage(playerid, "/goto [yer veya oyuncuid]");
		SCM(playerid, COLOR_YELLOW, "[Parametreler]:{FFFFFF} ls, lv, sf, interior");
		return 1;
	}
    if (id == INVALID_PLAYER_ID)
	{
	    if (sscanf(params, "s[24]S()[64]", type, string))
		{
		    SendHelpMessage(playerid, "/goto [yer veya oyuncuid]");
			SendClientMessage(playerid, COLOR_YELLOW, "[Parametreler]:{FFFFFF} ls, lv, sf, interior");
			return 1;
	    }
	    if (!strcmp(type, "ls", true)) {
	        SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);

	        return SendServerMessage(playerid, "Varsayilan LSPD noktasina gonderildin.");
		}
		if(!strcmp(type, "spawn", true))
		{
		    SetWorld(playerid, 0);
			SetInterior(playerid, 0);
			SetPlayerPosEx(playerid,1127.9866,-1452.7633,15.7969);
			return SendServerMessage(playerid, "Varsayilan spawn noktasina gonderildin.");
		}
		else if (!strcmp(type, "interior", true))
		{
		    static
		        str[1536];

			str[0] = '\0';

			for (new i = 0; i < sizeof(g_arrInteriorData); i ++) {
			    strcat(str, g_arrInteriorData[i][e_InteriorName]);
			    strcat(str, "\n");
		    }
		    Dialog_Show(playerid, TeleportInterior, DIALOG_STYLE_LIST, "Isinlan: Interior Listesi", str, "Seç", "Kapat");
		    return 1;
		}
		if (!strcmp(type, "lv", true)) {
	        SetPlayerPos(playerid, 1699.2,1435.1,10.7);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
	        return SendServerMessage(playerid, "Varsayilan LV noktasina gonderildin.");
		}
		if (!strcmp(type, "sf", true)) {
	        SetPlayerPos(playerid, -1417.0,-295.8,14.1);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
	        return SendServerMessage(playerid, "Varsayilan S.F. noktasina gonderildin.");
		}
	    else return SendErrorMessage(playerid, "Belirttiginiz oyuncu oyunda deðil !");
	}
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1 && !IsTester(playerid, 3)))	return SendNotAdmin(playerid);
	if (!IsPlayerLogged(id))							return SendNotConnected(playerid);
    if (GetPlayerState(id) == PLAYER_STATE_SPECTATING)	return SendErrorMessage(playerid, "Belirtilen oyuncu izleme modunda.");

    SendPlayerToPlayer(playerid, id);
	PlayerInfo[playerid][pCadir] = -1;
	SendServerMessage(playerid, "%s adlý kiþinin yanýna ýþýnlandýnýz.", GetNameEx(id));
	return 1;
}

CMD:sendto(playerid, params[])
{
	new userid, targetid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1 && !IsTester(playerid, 2)) && PlayerInfo[playerid][pFMAdmin] < 1)	return SendNotAdmin(playerid);
	if (sscanf(params, "uu", userid, targetid))						return SendHelpMessage(playerid, "/sendto [Gönderilen ID] [Yanýna göndereceðiniz kiþi ID]");
	if (!IsPlayerLogged(userid) && !IsPlayerLogged(targetid))							return SendNotConnected(playerid);
    if (GetPlayerState(userid) == PLAYER_STATE_SPECTATING && GetPlayerState(targetid) == PLAYER_STATE_SPECTATING)	return SendErrorMessage(playerid, "Belirtilen oyuncu izleme modunda.");

    SendPlayerToPlayer(userid, targetid);
	SendServerMessage(playerid, "%s, %s adlý kiþinin yanýna ýþýnladýnýz.", GetNameEx(userid), GetNameEx(targetid));
	return 1;
}
alias:freeze("dondur");
CMD:freeze(playerid, params[])
{
	new userid;

	if (!IsTester(playerid, 4) && !CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendNotAdmin(playerid);

	if (sscanf(params,"u", userid))
		return SendHelpMessage(playerid, "/freeze [ID/Karakter Adý]");

	if (!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	SendServerMessage(userid, "Yönetici tarafýndan donduruldunuz.");
	SendAdmMessageToPlayer(playerid, "%s [ID: %i] adlý oyuncuyu dondurdunuz.", GetNameEx(userid), userid);
	FreezePlayer(userid);

	return 1;
}
alias:unfreeze("coz");
CMD:unfreeze(playerid, params[])
{
	new userid;

	if (!IsTester(playerid, 4) && !CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendNotAdmin(playerid);

	if (sscanf(params,"u", userid))
		return SendHelpMessage(playerid, "/freeze [ID/Karakter Adý]");

	if (!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	SendServerMessage(userid, "Yönetici tarafýndan çözüldünüz.");
	SendAdmMessageToPlayer(playerid, "%s [ID: %i] adlý oyuncuyu çözdünüz.", GetNameEx(userid), userid);
	UnFreezePlayer(userid);
	return 1;
}

CMD:slap(playerid, params[])
{
	new userid, Float:slx, Float:sly, Float:slz;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1 && !IsTester(playerid, 4)))	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))				return SendHelpMessage(playerid, "/slap [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);

	AntiCheatGetPos(userid, slx, sly, slz);
	SetPlayerPosEx(userid, slx, sly, slz+10, 0);
	PlayerPlaySound(userid, 1130, slx, sly, slz+10);

	SendServerMessage(userid, "Yönetici sizi tokatladý.");
	SendAdmMessageToPlayer(playerid, "%s [ID: %i] adlý oyuncuyu tokatladýnýz.", GetNameEx(userid), userid);
	return 1;
}

CMD:getip(playerid, params[])
{
	new ip[24], userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))				return SendHelpMessage(playerid, "/getip [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);

	GetPlayerIp(userid, ip, sizeof(ip));
	SendAdmMessageToPlayer(playerid, "%s adlý kullanýcýnýn IP adresi: %s", GetNameEx(userid), ip);
	return 1;
}

alias:getstats("astats");
CMD:getstats(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))			return SendHelpMessage(playerid, "/getstats [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);

	ShowStats(playerid, userid);
	return 1;
}

CMD:amulkler(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))			return SendHelpMessage(playerid, "/amulkler [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);

	ShowProperty(playerid, userid);
	return 1;
}

CMD:reviveall(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	//if (pTemp[userid][pInvulnerable] != 0.0)	return SendErrorMessage(playerid, "Tekrar deneyin!");

	new count;

	foreach(new i : Player)
	{
		if(!IsPlayerLoggedIn(i))
			continue;

		if(PlayerInfo[playerid][pInjured] == 0)
			continue;

	    PlayerInfo[i][pHealth] = 100;
	    ResetDamages(i);
	    StopPlayerAnims(i);
	    UnFreezePlayer(i);
	    SetPlayerSkill(i);
		count++;
	}
	SendAdmMessage("%s adlý yönetici %i kiþiyi canlandýrdý. (/reviveall)", GetAccName(playerid), count);

	return 1;
}

CMD:revive(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] < 3)	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))			return SendHelpMessage(playerid, "/revive [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);
	if (PlayerInfo[userid][pInjured] == 0)		return SendErrorMessage(playerid, "Bu kiþi yaralý deðil.");
	//if (pTemp[userid][pInvulnerable] != 0.0)	return SendErrorMessage(playerid, "Tekrar deneyin!");

	PlayerInfo[userid][pHealth] = 100;
	ResetDamages(userid);
	StopPlayerAnims(userid);
	UnFreezePlayer(userid);
	SetPlayerSkill(userid);
	AC_ResetPlayerWeapons(userid);
	SetTimerEx("OnPlayerSetData", 1000, false, "d", userid);

	SendServerMessage(userid, "%s adlý yönetici tarafýndan iyileþtirildiniz.", GetAccName(playerid));
	SendAdmMessageToPlayer(playerid, "%s adlý oyuncuyu iyileþtirdiniz.", GetNameEx(userid));
	return 1;
}

CMD:gotocar(playerid, params[])
{
	new vehicle, Float:x, Float:y, Float:z;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1 && !IsTester(playerid, 3)))	return SendNotAdmin(playerid);
	if (sscanf(params, "d", vehicle))			return SendHelpMessage(playerid, "/gotocar [Araç ID]");
	if (!IsValidVehicle(vehicle))				return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");

	GetVehiclePos(vehicle, x, y, z);
	SetPlayerPosEx(playerid, x+1, y+1, z);
	SetWorld(playerid, GetVehicleVirtualWorldEx(vehicle));
	SetInterior(playerid, GetVehicleInteriorEx(vehicle));
	SendServerMessage(playerid, "%i ID'li araca ýþýnlandýnýz.", vehicle);
	PlayerInfo[playerid][pCadir] = -1;
	return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicle, Float:x, Float:y, Float:z, interior = GetInterior(playerid), vw = GetWorld(playerid);

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1) && !IsTester(playerid, 3) && PlayerInfo[playerid][pFMAdmin] < 1) 	return SendNotAdmin(playerid);
	if (sscanf(params, "d", vehicle)) 			return SendHelpMessage(playerid, "/getcar [Araç ID]");
	if (!IsValidVehicle(vehicle))				return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");
	if (IsPlayerInVehicle(playerid, vehicle))	return SendErrorMessage(playerid, "Belirtilen araçtasýnýz.");

    GetXYInFrontOfPlayer(playerid, x, y, z, 5.0);
	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || !IsPlayerInVehicle(i, vehicle))
	        continue;

		SetPlayerPosEx(i, x, y, z);
		SetInterior(i, interior);
		SetWorld(i, vw);
	}

	SetVehiclePos(vehicle, x, y, z);
	SetVehicleVirtualWorld(vehicle, vw);
	LinkVehicleToInterior(vehicle, interior);
	SendServerMessage(playerid, "%i ID'li aracý kendinize çektiniz.", vehicle);
	return 1;
}

alias:fixveh("carfix", "repaircar");
CMD:fixveh(playerid, params[])
{
	new vehicle;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params, "d", vehicle))			return SendHelpMessage(playerid, "/fixveh [Araç ID]");
	if (!IsValidVehicle(vehicle))				return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");

	FixVehicle(vehicle);
	SendServerMessage(playerid, "%i ID'li aracý tamir ettiniz.", vehicle);
	return 1;
}

alias:spectate("spec");
CMD:spectate(playerid, params[])
{
	/*new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))			return SendHelpMessage(playerid, "(/spec)tate [ID/Karakter Adý]");
	if (userid == playerid)						return SendErrorMessage(playerid, "Kendini izleyemezsin.");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);

	if (pTemp[playerid][pSpecPlayer] == INVALID_PLAYER_ID) SavePlayerPos(playerid);
	pTemp[playerid][pSpecPlayer] = userid;
    TogglePlayerSpectating(playerid, 1);

	if (IsPlayerInAnyVehicle(userid)) 	PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userid));
	else 								PlayerSpectatePlayer(playerid, userid);

	SetInterior(playerid, GetInterior(userid));
	SetWorld(playerid, GetWorld(userid));
	SendServerMessage(playerid, "%s adlý kiþiyi izlemeye baþladýnýz.", GetNameEx(userid));*/

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	new targetid;
	new weapons[12];
	new ammo[12];

	if(sscanf(params, "u", targetid))
		return SendHelpMessage(playerid, "/spec [karakter id/isim]");

	if(targetid == playerid)
		return SendErrorMessage(playerid, "Kendinizi izleyemezsiniz.");

	if(targetid == 65535)
		return SendErrorMessage(playerid, "Bir hata oluþtu, ID ile deneyin.");

	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[targetid][pAdmin])
		return SendErrorMessage(playerid, "Bu kiþi sizden daha yetkili, izlemeyezsin.");

	if(!IsPlayerLogged(targetid))
		return SendErrorMessage(playerid, "Karakter çevrimiçi deðil.");

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		for(new x; x < 12; x++)
		{
			BWH_GetPlayerWeaponData(playerid, x, weapons[x], ammo[x]);
			if(!AC_PlayerHasWeapon(playerid, weapons[x]) || !ammo[x])
			{
				weapons[x] = 0;
				ammo[x] = 0;
			}
			PlayerInfo[playerid][pWeapons][x] = weapons[x];
			PlayerInfo[playerid][pAmmo][x] = ammo[x];
		}
	}

	new Float:paX, Float:paY, Float:paZ, Float:paA;
	GetPlayerPos(playerid, paX, paY, paZ);
	GetPlayerFacingAngle(playerid, paA);

    StaffInfo[playerid][sSpecX] = paX;
	StaffInfo[playerid][sSpecY] = paY;
	StaffInfo[playerid][sSpecZ] = paZ;
	StaffInfo[playerid][sSpecA] = paA;

    new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	new int = GetPlayerInterior(playerid);
	new vw = GetPlayerVirtualWorld(playerid);
	SetPVarFloat(playerid, "SpecX", x);
	SetPVarFloat(playerid, "SpecY", y);
	SetPVarFloat(playerid, "SpecZ", z);
	SetPVarFloat(playerid, "SpecA", a);
	SetPVarInt(playerid, "SpecINT", int);
	SetPVarInt(playerid, "SpecVW", vw);
	DebugMessage(playerid, sprintf("%f, %f, %f", x, y, z));

	Spectate(playerid, SPECTATE_TYPE_PLAYER, targetid);
	SendServerMessage(playerid, "%s adlý kiþiyi izlemeye baþladýnýz.", GetNameEx(targetid));
	if(CheckAdmin(targetid, ADMIN_LEVEL_1)) SendServerMessage(targetid, "%s isimli yönetici seni izliyor.", GetNameEx(playerid));

	return 1;
}

CMD:ifmspec(playerid, params[])
{
	/*new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))			return SendHelpMessage(playerid, "(/spec)tate [ID/Karakter Adý]");
	if (userid == playerid)						return SendErrorMessage(playerid, "Kendini izleyemezsin.");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);

	if (pTemp[playerid][pSpecPlayer] == INVALID_PLAYER_ID) SavePlayerPos(playerid);
	pTemp[playerid][pSpecPlayer] = userid;
    TogglePlayerSpectating(playerid, 1);

	if (IsPlayerInAnyVehicle(userid)) 	PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userid));
	else 								PlayerSpectatePlayer(playerid, userid);

	SetInterior(playerid, GetInterior(userid));
	SetWorld(playerid, GetWorld(userid));
	SendServerMessage(playerid, "%s adlý kiþiyi izlemeye baþladýnýz.", GetNameEx(userid));*/

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pFMAdmin] == 0)	return SendNotAdmin(playerid);
	new targetid;

	if(sscanf(params, "u", targetid))
		return SendHelpMessage(playerid, "/ifmspec [karakter id/isim]");

	if(targetid == playerid)
		return SendErrorMessage(playerid, "Kendinizi izleyemezsiniz.");

	if(!IsPlayerFactionMafia(targetid) && !IsPlayerFactionGang(targetid))
		return SendErrorMessage(playerid, "Sadece illegal oyuncularý izleyebilirsin.");

	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[targetid][pAdmin])
		return SendErrorMessage(playerid, "Bu kiþi sizden daha yetkili, izlemeyezsin.");

	if(!IsPlayerLogged(targetid))
		return SendErrorMessage(playerid, "Karakter çevrimiçi deðil.");

	new Float:paX, Float:paY, Float:paZ, Float:paA;
	GetPlayerPos(playerid, paX, paY, paZ);
	GetPlayerFacingAngle(playerid, paA);

    StaffInfo[playerid][sSpecX] = paX;
	StaffInfo[playerid][sSpecY] = paY;
	StaffInfo[playerid][sSpecZ] = paZ;
	StaffInfo[playerid][sSpecA] = paA;

    new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	new int = GetPlayerInterior(playerid);
	new vw = GetPlayerVirtualWorld(playerid);
	SetPVarFloat(playerid, "SpecX", x);
	SetPVarFloat(playerid, "SpecY", y);
	SetPVarFloat(playerid, "SpecZ", z);
	SetPVarFloat(playerid, "SpecA", a);
	SetPVarInt(playerid, "SpecINT", int);
	SetPVarInt(playerid, "SpecVW", vw);
	DebugMessage(playerid, sprintf("%f, %f, %f", x, y, z));

	Spectate(playerid, SPECTATE_TYPE_PLAYER, targetid);
	SendServerMessage(playerid, "%s adlý kiþiyi izlemeye baþladýnýz.", GetNameEx(targetid));

	return 1;
}

CMD:speccar(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	new targetid;

	if(sscanf(params, "d", targetid))
		return SendHelpMessage(playerid, "/speccar [araç id]");

	if(!IsValidVehicle(targetid))
		return SendErrorMessage(playerid, "Geçersiz araç numarasý girdiniz.");

	Spectate(playerid, SPECTATE_TYPE_VEHICLE, targetid);

	if(!CheckAdmin(playerid, DEVELOPER_LEVEL)) SendAdmMessage("%s, %s (ID: %d) aracýný izlemeye baþladý.", GetNameEx(playerid), GetVehicleModelName(GetVehicleModel(targetid)), targetid);

	return 1;
}

CMD:specoff(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))				return SendNotAdmin(playerid);
	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING) return SendErrorMessage(playerid, "Þu anda spec modunda deðilsiniz.");

	SpectateOff(playerid);
	SendServerMessage(playerid, "Ýzleme modundan çýktý.", GetNameEx(playerid));

	return 1;
}


CMD:izlemeyibirak(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if (!IsFactionPolice(faction)) return SendErrorMessage(playerid, "Bu komutu kullanabilmek için polis olmalýsýn.");
	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING) return SendErrorMessage(playerid, "Þu anda kamera modunda deðilsiniz.");

	TogglePlayerSpectating(playerid, 0);
	if(GetPVarInt(playerid, #BODYCAM))	MDC_Show(playerid, PAGE_MEMBERS);

	return 1;
}

CMD:icjail(playerid, params[])
{
	//return SendErrorMessage(playerid, "The prison is still disabled!");
	new userid, time, reason[128];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1)) 			 return SendNotAdmin(playerid);
	if (sscanf(params,"uds[128]", userid, time, reason)) return SendHelpMessage(playerid, "/icjail [ID/Karakter Adý] [dakika] [sebep]");
	if (!IsPlayerLogged(userid))						 return SendNotConnected(playerid);
	if (time < 1 || time > 99999)						 return SendErrorMessage(playerid, "Süre 1 ile 99999 dakika arasýnda olmalýdýr.");

	new mes[128];
	format(mes, sizeof(mes), "(( %s adlý oyuncu %s adlý yönetici tarafýndan %s dakika IC hapise gönderildi, Sebep: %s", GetNameEx(userid), GetAccName(playerid), FormatNumber(time), reason);
    SendClientMessageByAdmin(COLOUR_TOMATO, mes);

	PlayerInfo[userid][pPrisoned] = random(sizeof(prison_sadoc));
	PlayerInfo[userid][pJailed] = PRISON_JAIL;
	PlayerInfo[userid][pJailTime] = time*60;

	if (PlayerInfo[userid][pDragged])
	{
	    PlayerInfo[userid][pDragged] = 0;
		PlayerInfo[userid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerInfo[userid][pDragTimer]);
	}

	SendHelpMessage(userid, "%s adlý yönetici tarafýndan %s dakika hapise gönderildiniz. Sebep: %s", GetAccName(playerid), FormatNumber(time), reason);
	SendHelpMessage(userid, "Mahkum numaranýz - A%i (/kogusnumaram)", PlayerInfo[playerid][pPrisoned]+100);

	SetPlayerSpawn(userid);
	return 1;
}

CMD:check(playerid, params[])
{
	new option[10], secoption[5];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1 && !PlayerInfo[playerid][pEbc]))	return SendNotAdmin(playerid);

	if (sscanf(params, "s[10]S()[5]", option, secoption))
	{
		SendHelpMessage(playerid, "/check [envanter / gb / bagaj / ev] [ID]");
		return 1;
	}
	if (CompareStrings(option, "envanter"))
	{
		new userid;
		if (sscanf(secoption,"u", userid))			return SendHelpMessage(playerid, "/check envanter [ID/Karakter Adý]");
		if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);

		PrintInvEx(userid, playerid);
	}
	else if (CompareStrings(option, "bagaj"))
	{
		new vehid;
		if (sscanf(secoption,"i", vehid))		return SendHelpMessage(playerid, "/check bagaj [Araç ID]");
		if (vehid < 1 || vehid >= MAX_VEHICLES)	return SendErrorMessage(playerid, "Geçersiz Araç ID");

		PrintVehInv(playerid, vehid, 1);
	}
	else if (CompareStrings(option, "gb"))
	{
		new vehid;
		if (sscanf(secoption,"i", vehid))		return SendHelpMessage(playerid, "/check gb [Araç ID]");
		if (vehid < 1 || vehid >= MAX_VEHICLES)	return SendErrorMessage(playerid, "Geçersiz Araç ID");

		PrintGBInv(playerid, vehid, 1);
	}
	else if (CompareStrings(option, "ev"))
	{
		new houseid;
		if (sscanf(secoption,"i", houseid))			return SendHelpMessage(playerid, "/check ev [Ev ID]");
		if (houseid < 1 || houseid >= MAX_HOUSES)	return SendErrorMessage(playerid, "Geçersiz Ev ID");
		if (!HouseInfo[houseid][hOwnerID])			return SendErrorMessage(playerid, "Bu evin sahibi yok!");

		PrintHouseInv(playerid, houseid, 1);
	}
	else
	{
		SendHelpMessage(playerid, "/check [envanter / gb / bagaj / ev] [ID]");
	}
	return 1;
}

/*
CMD:checkprop(playerid, params[])
{
	new house, mes[MAX_HOUSE_INVENTORY * 32] = "{ffffff}¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?\t{ffffff}¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?";

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))							return SendNotAdmin(playerid);
	if (sscanf(params,"d",house))										return SendHelpMessage(playerid, "/checkprop [ID ¯õ?¯õ?¯õ?¯õ?]");
    if (house < 0 || house > MAX_HOUSES || 0 == HouseInfo[house][hID])	return SendErrorMessage(playerid, "¯õ?¯õ?¯õ? ¯õ?¯õ? ¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?.");

	for(new i = 0; i < MAX_HOUSE_INVENTORY; i++)
	{
		if (HouseInfo[house][pInvItem][i] == 0)	format(mes, sizeof(mes), "%s\n{C3C3C3}¯õ?¯õ?¯õ?¯õ?¯õ?¯õ? ¯õ?¯õ?¯õ?¯õ?\t", mes);
		else								format(mes, sizeof(mes), "%s\n%s\t%i", mes, inventory_items[HouseInfo[house][pInvItem][i]][itemName], HouseInfo[house][hInvAmount][i]);
	}

	new housename[MAX_PLAYER_NAME + 24];
	format(housename, sizeof(housename), "{F5DEB3}¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ? ¯õ?¯õ?¯õ?¯õ?: %s", HouseInfo[house][hOwner]);
	Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, housename, mes, "¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?", "");
	return 1;
}


CMD:checkcar(playerid, params[])
{
	new title[56], vehicle, mes[MAX_TRUNK_INVENTORY * 32] = "{ffffff}¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?\t{ffffff}¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?";

    if (!CheckAdmin(playerid, ADMIN_LEVEL_1)) 																									return SendNotAdmin(playerid);
	if (sscanf(params,"d",vehicle))																												return SendHelpMessage(playerid, "/checkcar [id ¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?]");
    if (!IsValidVehicle(vehicle))																												return SendErrorMessage(playerid, "¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ? ¯õ?¯õ? ¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?.");
	if (IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))	return SendErrorMessage(playerid, "¯õ? ¯õ?¯õ?¯õ?¯õ?¯õ? ¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ? ¯õ?¯õ?¯õ? ¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?.");

	for(new i; i != MAX_TRUNK_INVENTORY; i++)
	{
	    if (VehicleInfo[vehicle][i][pInvItem] == 0)	format(mes, sizeof(mes), "%s\n{C3C3C3}¯õ?¯õ?¯õ?¯õ?¯õ?¯õ? ¯õ?¯õ?¯õ?¯õ?\t", mes);
		else										format(mes, sizeof(mes), "%s\n%s\t%i", mes, inventory_items[VehicleInfo[vehicle][i][pInvItem]][itemName], VehicleInfo[vehicle][carInvAmount][i]);
	}

	format(title, sizeof(title), "{F5DEB3}%s | ¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?: %s", VehicleNames[GetVehicleModel(vehicle)-400], VehicleInfo[vehicle][carOwner]);
    Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, title, mes, "¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?¯õ?", "");
	return 1;
}*/


CMD:dmlog(playerid,params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1)) return SendNotAdmin(playerid);

	if (pTemp[playerid][pDMLog] == 0)
	{
		SendServerMessage(playerid, "DM loglarýný aktif ettiniz.");
		pTemp[playerid][pDMLog] = 1;
	}
	else
	{
		SendServerMessage(playerid, "DM loglarýný deaktif ettiniz");
		ClearKillFeed(playerid);
		pTemp[playerid][pDMLog] = 0;
	}
	return 1;
}

alias:removevehicle("rveh", "dcar", "removecar", "dveh", "rcar");
CMD:aracsil(playerid,params[])
{
	new vehid = GetPlayerVehicleID(playerid);
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))				return SendNotAdmin(playerid);
	if (!IsValidVehicle(vehid) && sscanf(params,"d",vehid))	return SendHelpMessage(playerid, "/removevehicle [Araç ID]");
    if (!IsValidVehicle(vehid))								return SendErrorMessage(playerid, "Belirtilen araç bulunamadý");

    if (VehicleInfo[vehid][carAdmin] == 0)
	{
	    if (!CheckAdmin(playerid, ADMIN_LEVEL_3))			return SendErrorMessage(playerid, "Bu araç silinemez.");

        new query[256];
	    mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `cars` WHERE `id` = %i", VehicleInfo[vehid][carID]);
		mysql_tquery(dbHandle, query);
	}

	DestroyVehicleEx(vehid);
	SendServerMessage(playerid, "%i ID'li araç silindi.", vehid);
	return 1;
}

CMD:savepos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SendErrorMessage(playerid, "Yetkili deðilsiniz.");
	if(IsPlayerInAnyVehicle(playerid))
	{
	new vehicleid = GetPlayerVehicleID(playerid);
	GetVehiclePos(vehicleid, SAVEposX[playerid], SAVEposY[playerid], SAVEposZ[playerid]);
	GetVehicleZAngle(vehicleid, SAVEposA[playerid]);
	}
	else
	{
	GetPlayerPos(playerid, SAVEposX[playerid], SAVEposY[playerid], SAVEposZ[playerid]);
	GetPlayerFacingAngle(playerid, SAVEposA[playerid]);
	}
	SAVEInterior[playerid] = GetPlayerInterior(playerid);
	SAVEVirtualWorld[playerid] = GetPlayerVirtualWorld(playerid);
	SendSyntaxMessage(playerid, "Pozisyonunuzu kaydettiniz. (/loadpos)");
	Saved[playerid] = 1;
	return 1;
}

CMD:loadpos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SendErrorMessage(playerid, "Yetkili deðilsiniz.");
	if(Saved[playerid] == 1) {
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		SetVehiclePos(vehicleid, SAVEposX[playerid], SAVEposY[playerid], SAVEposZ[playerid]);
		SetVehicleZAngle(vehicleid, SAVEposA[playerid]);
		LinkVehicleToInterior(vehicleid, SAVEInterior[playerid]);
		SetVehicleVirtualWorld(vehicleid, SAVEVirtualWorld[playerid]);
	}
	else
	{
		SetPlayerPosEx(playerid, SAVEposX[playerid], SAVEposY[playerid], SAVEposZ[playerid]);
		SetPlayerFacingAngle(playerid, SAVEposA[playerid]);
		SetPlayerInterior(playerid, SAVEInterior[playerid]);
		SetPlayerVirtualWorld(playerid, SAVEVirtualWorld[playerid]);
		ClearAnimations(playerid);
	}
		SendSyntaxMessage(playerid, "Kayýtlý konuma döndünüz.");
	}
	else
	{
		SendErrorMessage(playerid, "Herhangi bir kayýtlý konumunuz yok. (/savepos)");
	}
	return 1;
}

CMD:toback(playerid, params[])
{
    static
        userid;

	if (PlayerInfo[playerid][pAdmin] < 1 )
	    return SendErrorMessage(playerid, "Yetkiniz yok!");

    if (sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/toback [id/isim]");

    if (!IsPlayerConnected(userid) || IsPlayerNPC(userid))
        return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda degil !");

	if(PlayerInfo[userid][pAdmin] > PlayerInfo[playerid][pAdmin])
		return SendErrorMessage(playerid, "Kendinizden yüksek seviye yetkililere karþý bu komutu kullanamazsýnýz.");

	SetPlayerPos(userid,playerEskiPos[userid][0],playerEskiPos[userid][1],playerEskiPos[userid][2]);
    AMSG(COLOR_LIGHTRED, "AdmCmd: %s adlý yetkili %s adlý kiþiyi eski konumuna geri gönderdi.", GetAccName(playerid), GetNameEx(userid), userid);
    SendAdmMessageToPlayer(playerid, "%s adlý oyuncuyu eski konumuna geri gönderdin.", GetNameEx(userid));
    SendAdmMessageToPlayer(userid, "%s adlý yetkili seni eski konumuna geri gönderdi.", GetAccName(playerid));
    return 1;
}

alias:removebox("rbox");
CMD:removebox(playerid, params[])
{
	new id = -1;

    if (!CheckAdmin(playerid, ADMIN_LEVEL_1)) return SendNotAdmin(playerid);

	for(new i; i != MAX_CARGO_OBJ; i++)
	{
		if (CargoObject[i][oOn] == 0 || !IsPlayerInRangeOfPoint(playerid,2.0,CargoObject[i][oX],CargoObject[i][oY],CargoObject[i][oZ]) || GetWorld(playerid) != CargoObject[i][oVW] || CargoObject[i][oInt] != GetInterior(playerid)) continue;

		id = i;
		break;
	}

	if (id == -1)	return SendErrorMessage(playerid, "Yakýnýnýzda kutu yok.");

	CargoObject[id][oOn] = 0;
 	if (IsValidDynamicObject(CargoObject[id][oObj]))	DestroyDynamicObject(CargoObject[id][oObj]);
	if (IsValidDynamic3DTextLabel(CargoObject[id][oLabel]))
	{
		DestroyDynamic3DTextLabel(CargoObject[id][oLabel]);
	    CargoObject[id][oLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	SendAdmMessageToPlayer(playerid, "Kutu [ID: %i] silindi.", id);
	return 1;
}

CMD:near(playerid, params[])
{
	new id = -1;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1 && !IsTester(playerid, 4)))			return SendNotAdmin(playerid);
	if ((id = Gate_Nearest(playerid)) == -1 && (id = GetNearHouse(playerid)) == -1 && (id = ATM_Nearest(playerid)) == -1 && (id = GetNearGarage(playerid)) == -1 && (id = GetNearApartment(playerid)) == -1 && (id = GetNearBiz(playerid)) == -1 && (id = TruckCargo_Nearest(playerid, 2.0)) == -1 && (id = Object_Nearest(playerid)) == -1 && (id = Job_Nearest(playerid)) == -1 && (id = GetNearestCamera(playerid)) == -1 && (id = Payphone_Nearest(playerid)) == -1 && (id = ParkMeter_Nearest(playerid)) == -1 && (id = GetStreetID(playerid)) == -1 && (id = GetClosestBillBoard(playerid,9.0)) == -1 && (id = Trash_Nearest(playerid, 9.0)) == -1 && (id = Factory_Nearest(playerid, 9.0)) == -1) SendErrorMessage(playerid, "Yakýnýnýzda herhangi bir þey yok.");

	if ((id = Gate_Nearest(playerid)) != -1)			SendSyntaxMessage(playerid, "[GATE] Yakýnýnda bulunan: [ID: %i | Model: %i].", id, Gates[id][gateModel]);
    if ((id = GetNearHouse(playerid)) != -1)			SendSyntaxMessage(playerid, "[EV] Yakýnýnda bulunan: [ID: %i].", id);
    if ((id = ATM_Nearest(playerid)) != -1)				SendSyntaxMessage(playerid, "[ATM] Yakýnýnda bulunan: [ID: %i].", id);
	if ((id = GetNearGarage(playerid)) != -1)			SendSyntaxMessage(playerid, "[GARAJ] Yakýnýnda bulunan: [ID: %i].", id);
    if ((id = GetNearApartment(playerid)) != -1)		SendSyntaxMessage(playerid, "[APARTMAN] Yakýnýnda bulunan: [ID: %i].", id);
    if ((id = GetNearBiz(playerid)) != -1)				SendSyntaxMessage(playerid, "[ISLETME] Yakýnýnda bulunan: [ID: %i].", id);
    if ((id = TruckCargo_Nearest(playerid, 2.0)) != -1) SendSyntaxMessage(playerid, "[ENDUSTRI] Yakýnýnda bulunan: [ID: %i].", id);
    if ((id = Object_Nearest(playerid)) != -1)			SendSyntaxMessage(playerid, "[OBJE] Yakýnýnda bulunan: [ID: %i | Model: %i].", id, ObjectsInfo[id][oModel]);
	if ((id = Job_Nearest(playerid)) != -1)				SendSyntaxMessage(playerid, "[JOB] Yakýnýnda bulunan: [ID: %i].", id);
	if ((id = GetNearestCamera(playerid)) != -1)		SendSyntaxMessage(playerid, "[SPEEDCAMERA] Yakýnýnda bulunan: [ID: %i].", id);
	if ((id = Payphone_Nearest(playerid)) != -1)		SendSyntaxMessage(playerid, "[PAYPHONE] Yakýnýnda bulunan: [ID: %i].", id);
	if ((id = ParkMeter_Nearest(playerid)) != -1)		SendSyntaxMessage(playerid, "[PARKMETRE] Yakýnýnda bulunan: [ID: %i].", id);
	if ((id = GetStreetID(playerid)) != -1)				SendSyntaxMessage(playerid, "[SOKAK] Yakýnýnda bulunan: [ID: %i].", id);
	if ((id = GetClosestBillBoard(playerid,9.0)) != -1)	SendSyntaxMessage(playerid, "[BILLBOARD] Yakýnýnda bulunan: [ID: %i].", id);
	if ((id = Trash_Nearest(playerid, 9.0)) != -1)		SendSyntaxMessage(playerid, "[ÇÖP KONTEYNERI] Yakýnýnda bulunan: [ID: %i].", id);
	if ((id = Factory_Nearest(playerid, 9.0)) != -1)	SendSyntaxMessage(playerid, "[GERI DONUSUM FABRIKASI] Yakýnýnda bulunan: [ID: %i].", id);

    for(new i; i != MAX_ENTRANCE; i++)
	{
	    if (EntranceInfo[i][entranceOn] == 0)
			continue;

		if (IsPlayerEntranceOutside(playerid, i))	SendSyntaxMessage(playerid, "Giriþe yakýnsýn: [ID: %i].", i);
		if (IsPlayerEntranceInside(playerid, i))	SendSyntaxMessage(playerid, "Çýkýþa yakýnsýn: [ID: %i].", i);
	}

	for(new i = 0; i != MAX_LABELS; i++)
	{
	    if (LabelsInfo[i][tLabelOn] != 1 || !PlayerToPoint(3,playerid,LabelsInfo[i][tPosX],LabelsInfo[i][tPosY],LabelsInfo[i][tPosZ]) || LabelsInfo[i][tVW] != GetWorld(playerid) || LabelsInfo[i][tInt] != GetInterior(playerid)) continue;

		SendSyntaxMessage(playerid, "Belirtilen labela yakýnsýn [ID: %i].", i);
	}

	//SendSyntaxMessage(playerid, "There is nothing near you.");
	return 1;
}

alias:resetweps("silahsifirla");
CMD:resetweps(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params,"u", userid))				return SendSyntaxMessage(playerid, "/resetweps [ID/Ýsim]");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);

	AC_ResetPlayerWeapons(userid);
	SetTimerEx("OnPlayerSetData", 1000, false, "d", userid);
	SendServerMessage(userid, "Yönetici üstündeki silahlarýnýzý sýfýrladý.");
	SendAdmMessageToPlayer(playerid, "%s adlý karakterin üstündeki silahlarýný sýfýrladýnýz.", GetNameEx(userid));
	return 1;
}

CMD:checkcars(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params,"u", userid))				return SendHelpMessage(playerid, "/checkcars [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);

	new query[256];
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cars` WHERE `owner` = '%i'", PlayerInfo[userid][pID]);
	mysql_tquery(dbHandle, query, "ShowCarsForPlayer", "ii", playerid, userid);
	return 1;
}

CMD:silahyasak(playerid, params[])
{
	new userid,
		hr;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params,"ui", userid, hr))		return SendHelpMessage(playerid, "/forbid [ID/Karakter Adý] [saat]");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);
	if (hr > 10 && hr < 1)						return SendHelpMessage(playerid, "/forbid [ID/Karakter adý] [(1-10) saat]");

	PlayerInfo[userid][pForbid] = hr;
	SQL_SetInteger("users", "Forbid", hr, PlayerInfo[userid][pID]);

	SendServerMessage(userid, "Yönetici %i dakika boyunca silah kullanmanýzý yasakladý. (%i saat).", hr*60, hr);
	SendAdmMessageToPlayer(playerid, "%s adlý oyuncunun %i dakika boyunca silah kullanýmýný yasakladýnýz. (%i saat).", GetNameEx(userid), hr*60, hr);

	return 1;
}

CMD:silahyasakkaldir(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid)) 			return SendHelpMessage(playerid, "/unforbid [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (!PlayerInfo[userid][pForbid])			return SendErrorMessage(playerid, "Belirtilen oyuncunun silah kullaným yasaðý yok.");

	PlayerInfo[userid][pForbid] = 0;
	SQL_SetInteger("users", "Forbid", 0, PlayerInfo[userid][pID]);

	SendServerMessage(userid, "Yönetici silah kullaným yasaðýnýzý kaldýrdý");
	SendAdmMessageToPlayer(playerid, "%s adlý kullanýcýnýn silah kullaným yasaðýný kaldýrdýnýz.", GetNameEx(userid));
	return 1;
}

alias:deletepame("dpame");
CMD:deletepame(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	if (sscanf(params,"i",userid)) 	return SendHelpMessage(playerid, "/deletepame [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))		return SendNotConnected(playerid);

	format(PlayerInfo[userid][pDescribe], PAME_MAX_LEN, "NULL");
	format(PlayerInfo[userid][pDescribe2], PAME_MAX_LEN, "NULL");

	SQL_SetString("users", "Desc1", "NULL", PlayerInfo[userid][pID]);
	SQL_SetString("users", "Desc1", "NULL", PlayerInfo[userid][pID]);

	SendAdmMessageToPlayer(playerid, "%s adlý karakterin karakter açýklamasýný sildiniz.", GetNameEx(userid));
	SendServerMessage(userid, "Yönetici karakter açýklamanýzý sildi!");

	return 1;
}

/*CMD:up(playerid, params[])
{
	new amount, Float:x, Float:y, Float:z;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) 	return SendNotAdmin(playerid);
	if (sscanf(params,"d", amount)) 			return SendHelpMessage(playerid, "/up [blok]");

	GetPlayerPos(playerid, x, y ,z);
	SetPlayerPosEx(playerid, x, y, z+amount);
	return 1;
}

CMD:down(playerid, params[])
{
	new amount, Float:x, Float:y, Float:z;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) 	return SendNotAdmin(playerid);
	if (sscanf(params,"d", amount)) 			return SendHelpMessage(playerid, "/down [blok]");

	GetPlayerPos(playerid, x, y ,z);
	SetPlayerPosEx(playerid, x, y, z-amount);
	return 1;
}*/

CMD:respawnpolicecars(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))
		return SendErrorMessage(playerid, "Komutu kullanmak için yeterli yetkiniz bulunmuyor.");

	//SCMALL(COLOR_LIGHTBLUE, "<< THE ADMINISTRATOR PRODUCED RESPAVN OF POLICE TS >>");
	AMSG(COLOR_LIGHTRED, "%s adlý yetkili polis araçlarýný spawnladý.", GetAccName(playerid));

	new vehicle,
	    occupied[MAX_VEHICLES char];

    foreach(new i : Player)
	{
	    if ((vehicle = GetPlayerVehicleID(i)) == 0 || !IsFactionPolice(VehicleInfo[vehicle][carFaction]))
	        continue;

		occupied{vehicle} = 1;
	}

	foreach(new i:Vehicle)
	{
		if (!IsFactionPolice(VehicleInfo[vehicle][carFaction]) || occupied{i} == 1)
			continue;

		RespawnVehicle(i);
	}
	return 1;
}

CMD:entercar(playerid, params[])
{
	new vehicle;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params,"d",vehicle))				return SendHelpMessage(playerid, "/entercar [Araç ID]");
	if (!IsValidVehicle(vehicle))				return SendErrorMessage(playerid, "Bu ID'ye sahip araç bulunamadý.");
	new seatid;
    seatid = GetAvailableSeat(vehicle, 0);

    if (seatid == -1)
        return SendErrorMessage(playerid, "Araçta boþ koltuk yok.");

	PutPlayerInVeh(playerid, vehicle, seatid);
	SendAdmMessage("%s adlý yönetici araca ýþýnlandý. [ID: %i]", GetAccName(playerid), vehicle);
	return 1;
}

alias:aengine("amotor");
CMD:aengine(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (!IsPlayerInAnyVehicle(playerid))			return SendNotInVehicle(playerid);

	new vehicleid = GetPlayerVehicleID(playerid);

	ToggleVehicleEngine(vehicleid, playerid);
	return 1;
}

CMD:refuel(playerid, params[])
{
	new vehicle;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params,"d",vehicle))				return SendHelpMessage(playerid, "/refuel [Araç ID]");
	if (!IsValidVehicle(vehicle))				return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");

    VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(vehicle));
	SendServerMessage(playerid, "%i ID'li aracýn yakýtýný dolduruldunuz.", vehicle);
	return 1;
}

CMD:refuelall(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendNotAdmin(playerid);

	foreach(new i:Vehicle)
	{
        VehicleInfo[i][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(i));
	}

	SendAdmMessageToAll("%s adlý yönetici tarafýndan sunucudaki tüm araçlarýn yakýtý dolduruldu.", GetAccName(playerid));
	return 1;
}

CMD:battery(playerid, params[])
{
	new vehicle;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params,"d",vehicle))				return SendHelpMessage(playerid, "/battery [Araç ID]");
	if (!IsValidVehicle(vehicle))				return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");

    VehicleInfo[vehicle][carBattery] = 100.00;
	SendServerMessage(playerid, "%i ID'li aracýn aküsünü deðiþtirdiniz.", vehicle);
	return 1;
}

CMD:batteryall(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendNotAdmin(playerid);

	foreach(new i:Vehicle)
	{
        VehicleInfo[i][carBattery] = 100.00;
	}

	SendAdmMessageToAll("%s adlý yönetici tarafýndan sunucudaki tüm araçlarýn aküsü deðiþtirildi.", GetAccName(playerid));
	return 1;
}

CMD:fillengine(playerid, params[])
{
	new vehicle;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params,"d",vehicle))				return SendHelpMessage(playerid, "/fillengine [Araç ID]");
	if (!IsValidVehicle(vehicle))				return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");

    VehicleInfo[vehicle][carBattery] = 100.00;
	SendServerMessage(playerid, "%i ID'li aracýn motorunu deðiþtirdiniz.", vehicle);
	return 1;
}

CMD:engineall(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendNotAdmin(playerid);

	foreach(new i:Vehicle)
	{
        VehicleInfo[i][carEngine] = 100.00;
	}

	SendAdmMessageToAll("%s adlý yönetici tarafýndan sunucudaki tüm araçlarýn motorunu deðiþtirdi.", GetAccName(playerid));
	return 1;
}


alias:respawncar("spawnveh", "vehspawn", "aracspawn");
CMD:respawncar(playerid, params[])
{
	new vehicle;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] < 4)	return SendNotAdmin(playerid);
	if (sscanf(params,"d",vehicle))				return SendHelpMessage(playerid, "/rtc [Araç ID]");
    if (!IsValidVehicle(vehicle))				return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");
	if (!VehicleEmpty(vehicle))					return SendErrorMessage(playerid, "Bu araç þu an kullanýlýyor.");

	if (VehicleInfo[vehicle][carOwnerID] > 0 && VehicleInfo[vehicle][carOwnerID] != INVALID_PLAYER_ID)
	{
	    new userid = GetVehicleOwner(vehicle);

	    if (userid != INVALID_PLAYER_ID)
	    {
	    	SendServerMessage(userid, "%s adlý yönetici %s aracýný park etti.", GetAccName(playerid), VehicleNames[GetVehicleModel(vehicle)-400]);
			PlayerInfo[userid][pCarKey] = 0;
			VehicleInfo[vehicle][carOwnerPlayer] = INVALID_PLAYER_ID;
		}
		ResetVehicleStuff(vehicle, 1);
		DestroyVehicleEx(vehicle, 1);
	}
    else
	{
		SendServerMessage(playerid, "%s [ID: %i] aracýný spawnladýnýz.", VehicleNames[GetVehicleModel(vehicle)-400], vehicle);
		RespawnVehicle(vehicle);
	}
	return 1;
}

alias:respawncars("spawnvehall", "vehspawnall");
CMD:respawncars(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);

	SendAdmMessage("%s adlý yönetici kullanýlmayan tüm araçlarý respawnladý.", GetAccName(playerid));

    new vehicle, occupied[MAX_VEHICLES char];

    foreach(new i : Player)
	{
	    if ((vehicle = GetPlayerVehicleID(i)) == 0) continue;

		occupied{vehicle} = 1;
	}

	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		if (!IsValidVehicle(i) || occupied{i} == 1) continue;

		if (VehicleInfo[i][carOwnerID] > 0 && VehicleInfo[i][carOwnerID] != INVALID_PLAYER_ID)
		{
		    new userid = GetVehicleOwner(i);
		    if (userid != INVALID_PLAYER_ID)
		    {
		    	SendServerMessage(userid, "%s adlý yönetici %s model aracýný park etti.", GetAccName(playerid), VehicleNames[GetVehicleModel(i)-400]);
				PlayerInfo[userid][pCarKey] = 0;
				VehicleInfo[i][carOwnerPlayer] = INVALID_PLAYER_ID;
			}
			ResetVehicleStuff(i, 1);
			DestroyVehicleEx(i, 1);
		}
	    else RespawnVehicle(i);
	}
	return 1;
}

CMD:amark(playerid, params[])
{
	new option[16], string[145];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz");
	if (sscanf(params, "s[16]S()[144]", option, string))
	{
		SendHelpMessage(playerid, "/amark [destroy/info/goto]");
		return 1;
	}

	if (CompareStrings(option, "destroy"))
	{
		new markid;
		if (sscanf(string, "i", markid))								return SendHelpMessage(playerid, "/amark destroy [ID]");
		if (markid < 0 || markid >= MAX_MARKS || !E_MARKS[markid][mON])	return SendErrorMessage(playerid, "Bu ID'ye sahip iþaret mevcut deðil.");

		DestroyDynamicMark(markid);
		SendServerMessage(playerid, "Ýþareti baþarýlý þekilde kaldýrdýnýz. [ID: %i].", markid);
		return 1;
	}
	else if (CompareStrings(option, "info"))
	{
		new markid = Mark_Nearest(playerid);

		if (markid == -1) return SendErrorMessage(playerid, "Belirtilen ID'ye sahip iþaret bulunmuyor.");

		new mark_info[512];
		mark_info[0] = EOS;

		format(mark_info, sizeof(mark_info), "ID\t%i\nOlusturan\t%s\nOlusturma Tarihi\t%s", markid, E_MARKS[markid][mCreator], E_MARKS[markid][mCreateDate]);
		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST, "{FFFFFF}Isaret Bilgisi", mark_info, "Kapat", "");
		return 1;
	}
	else if (CompareStrings(option, "goto"))
	{
		new markid;
		if (sscanf(string, "i", markid))								return SendHelpMessage(playerid, "/amark goto [ID]");
		if (markid < 0 || markid > MAX_MARKS || !E_MARKS[markid][mON])	return SendErrorMessage(playerid, "Bu ID'ye sahip iþaret mevcut deðil.");

		SetPlayerPosEx(playerid, E_MARKS[markid][mPosX], E_MARKS[markid][mPosY], E_MARKS[markid][mPosZ]);
		SetInterior(playerid, E_MARKS[markid][mInt]);
		SetWorld(playerid, E_MARKS[markid][mVW]);
	}
	else
	{
		SendHelpMessage(playerid, "/amark [destroy/info/goto]");
	}
	return 1;
}

CMD:sethp(playerid, params[])
{
	new userid, hp;
	//if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL && !IsTesterLead(playerid) && !PlayerInfo[playerid][pEbc]))	return SendNotAdmin(playerid);
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL && !IsTesterLead(playerid)) && PlayerInfo[playerid][pEbc] < 1 && PlayerInfo[playerid][pFMAdmin] < 1)	return SendNotAdmin(playerid);
	if (sscanf(params,"ud", userid, hp))		return SendHelpMessage(playerid, "/sethp [ID/Karakter Adý] [1-300]");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);
    if (PlayerInfo[playerid][pInjured]) 		return SendErrorMessage(playerid, "Belirtilen oyuncu yaralý veya ölüm aþamasýnda. /aheal kullanýn.");
	if (hp < 1 || hp > 300)						return SendErrorMessage(playerid, "Belirtilen deðer 1 ile 300 arasýnda olmalýdýr.");

	SendServerMessage(userid, "%s adlý yönetici canýnýzý düzenledi: %i HP.", GetAccName(playerid), hp);
	SendServerMessage(playerid, "%s adlý oyuncunun canýný düzenlediniz: %i HP.", GetNameEx(userid), hp);
	PlayerInfo[userid][pHealth] = hp;
	return 1;
}

alias:setarmour("setarmor");
CMD:setarmour(playerid, params[])
{
	new userid, armour;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params,"ud", userid, armour))	return SendHelpMessage(playerid, "/setarmour [ID/Karakter Adý] [1-300]");
	if (armour < 1 || armour > 300)				return SendErrorMessage(playerid, "Belirtilen deðer 1 ile 300 arasýnda olmalýdýr.");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);

	SendServerMessage(userid, "Yönetici zýrhýnýzý düzenledi: %i zýrh", armour);
	SendServerMessage(playerid, "%s adlý oyuncunun zýrhýný düzenlediniz: %i zýrh", GetNameEx(userid), armour);
    SetPlayerArmour(userid, armour);
	return 1;
}

CMD:setskin(playerid, params[])
{
	new targetid, skinid;

	//if (!CheckAdmin(playerid, ADMIN_LEVEL_1 && !PlayerInfo[playerid][pEbc]))	return SendNotAdmin(playerid);
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pEbc] < 1 && PlayerInfo[playerid][pFMAdmin] < 1)	return SendNotAdmin(playerid);
	if (sscanf(params,"ui", targetid, skinid))		return SendHelpMessage(playerid, "/setskin [ID/Karakter Adý] [ID]");
	if (!IsPlayerLogged(targetid))					return SendNotConnected(playerid);
	if (skinid < 1 || skinid == 74)					return SendErrorMessage(playerid, "Geçersiz skin id girdiniz.");

	SetPlayerSkinEx(targetid, skinid);
	SendServerMessage(targetid, "Yönetici kýyafetinizi deðiþtirdi. [ID: %i].", skinid);
	SendServerMessage(playerid, "%s adlý oyuncunun kýyafetini deðiþtirdiniz. [ID: %i].", GetNameEx(targetid), skinid);
	return 1;
}

CMD:showpm(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);
	if (sscanf(params,"u", userid))				return SendHelpMessage(playerid, "/showpm [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);

    pTemp[playerid][pPMPlayer] = userid;
	SendServerMessage(playerid, "%s adlý oyuncunun PM'lerini görüntülemeye baþladýnýz. Kapatmak için /showpmoff", GetNameEx(userid));
	return 1;
}

CMD:showpmoff(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))				return SendNotAdmin(playerid);
	if (pTemp[playerid][pPMPlayer] == INVALID_PLAYER_ID)	return SendErrorMessage(playerid, "Herhangi bir PM'e bakmýyorsunuz.");

	SendServerMessage(playerid, "%s adlý oyuncunun PM izlemesini kapattýnýz.", GetNameEx(pTemp[playerid][pPMPlayer]));
	pTemp[playerid][pPMPlayer] = INVALID_PLAYER_ID;
	return 1;
}

CMD:showpms(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);

	SendServerMessage(playerid, "Tüm sunucunun PM'lerini görüntülüyorsunuz. Kapatmak için /nopms");
	SetPVarInt(playerid, #spypm_all, 1);
	return 1;
}

CMD:nopms(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendNotAdmin(playerid);

	if (GetPVarInt(playerid, #spypm_all) == 0)
		return SendErrorMessage(playerid, "Herhangi birini izlemiyorsunuz.");

	SendServerMessage(playerid, "PM izlemesini kapattýnýz.");
	DeletePVar(playerid, #spypm_all);
	return 1;
}

CMD:telecmds(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3)) return SendNotAdmin(playerid);

	SCM(playerid, COLOR_WHITE, "[Level 3]: {C3C3C3}/maketele /makehouseint /removetele");
	return 1;
}

alias:makehouseint("mhouseint");
CMD:makehouseint(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendNotAdmin(playerid);

	new mapname[32],
		type;

	if (sscanf(params,"is[32]", type, mapname))
		return SendHelpMessage(playerid, "/makehouseint [1-küçük, 2-orta, 3-büyük] [interior ismi]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Ev tipi: 1-küçük, 2-orta, 3-büyük.");

    if (strlen(mapname) < 1 || strlen(mapname) > 32)
	    return SendErrorMessage(playerid, "Interior ismi 1 ile 32 karakter arasýnda olmalýdýr..");

	new id = -1;
	for(new i = 0; i < MAX_INTERIORS; i++)
	{
	    if (0 != AdminTeles[i][telesOn])
			continue;

		id = i;
		break;
	}

	if (id == -1)
	    return SendErrorMessage(playerid, "Iþýnlanma sýnýrýna ulaþýldý.");

	GetPlayerPos(playerid, AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ]);
	AdminTeles[id][telesInt] = GetInterior(playerid);
	AdminTeles[id][telesType] = type-1;
	format(AdminTeles[id][telesMapName], 32, "%s", mapname);
    AdminTeles[id][telesOn] = 1;

	AddTeleToFile(playerid, id, mapname, AdminTeles[id][telesInt], AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ], type-1);
 	SendClientMessageEx(playerid,COLOR_SERVER2,"Yeni interior oluþturuldu. (%s) ID: %i", AdminTeles[id][telesMapName], id);
	return 1;
}

CMD:cezasil(playerid, params[])
{
	new userid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params,"u", userid))				return SendHelpMessage(playerid, "/cezasil [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);

	DeletePlayerTickets(userid);

	SendServerMessage(playerid, "%s adlý oyuncunun cezalarý silindi.", GetNameEx(userid));
	SendServerMessage(userid, "Yönetici tüm cezalarýnýzý sildi.");

	return 1;
}

CMD:acezasil(playerid, params[])
{
	new vehid;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params,"i", vehid))				return SendHelpMessage(playerid, "/acezasil [Araç ID]");
	if (VehicleInfo[vehid][carModel] < 400 && VehicleInfo[vehid][carModel] > 600) return SendErrorMessage(playerid, "Bu araç yönetici aracý olduðu için iþlem yapýlamaz.");

	DeleteVehicleTickets(vehid);

	SendServerMessage(playerid, "%s [ID: %i] belirtilen aracýnýn tüm cezalarýný kaldýrdýnýz.", VehicleNames[VehicleInfo[vehid][carModel]-400], vehid);

	return 1;
}

CMD:aunimpound(playerid, params[])
{
	new vehicle;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
	if (sscanf(params,"i", vehicle))			return SendHelpMessage(playerid, "/aunimpound [Araç ID]");

	if (!IsValidVehicle(vehicle))			return SendErrorMessage(playerid, "Belirtilen araç spawnlanmamýþ.");
	if (!VehicleInfo[vehicle][Impounded])	return SendErrorMessage(playerid, "Araç baðlanmamýþ.");

	VehicleInfo[vehicle][Impounded] = 0;
	Save_Car(vehicle);

	SendServerMessage(playerid, "%i ID'li, sahibi %s olan, araç artýk baðlanmamýþ halde.", vehicle, GetNameEx(VehicleInfo[vehicle][carOwnerID]));
	SendServerMessage(VehicleInfo[vehicle][carOwnerID], "Yönetici %s model aracýnýzýný ceza durumundan kurtardý.", VehicleNames[VehicleInfo[vehicle][carModel]-400]);
	return 1;
}

alias:makebizint("mbizint");
CMD:makebizint(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendNotAdmin(playerid);

	new mapname[32];

	if (sscanf(params,"s[32]", mapname))
		return SendHelpMessage(playerid, "/makebizint [interior adý]");

	if (strlen(mapname) < 1 || strlen(mapname) > 32)
	    return SendErrorMessage(playerid, "Belirtilen isim minimum 1, maksimum 32 karakter olmalýdýr.");

	new id = -1;
	for(new i = 0; i < MAX_INTERIORS; i++)
	{
	    if (0 != AdminTeles[i][telesOn])
			continue;

		id = i;
		break;
	}

	if (id == -1)
	    return SendErrorMessage(playerid, "Iþýnlanma sýnýrýna ulaþýldý.");

	GetPlayerPos(playerid, AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ]);
	AdminTeles[id][telesInt] = GetInterior(playerid);
	AdminTeles[id][telesType] = BUSSINESS_INT_TYPE;
	format(AdminTeles[id][telesMapName], 32, "%s", mapname);
    AdminTeles[id][telesOn] = 1;

	AddTeleToFile(playerid, id, mapname, AdminTeles[id][telesInt], AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ], 4);
 	SendClientMessageEx(playerid,COLOR_SERVER2, "Yeni interior (%s) ID: %i eklendi.", AdminTeles[id][telesMapName], id); //íîâûé èíò
	return 1;
}

alias:maketele("mtele");
CMD:maketele(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	new mapname[32];

	if (sscanf(params,"s[32]", mapname))				return SendHelpMessage(playerid, "/maketele [Name int]");
	if (strlen(mapname) < 1 || strlen(mapname) > 32)	return SendErrorMessage(playerid, "Characters 1-32.");

	new id = -1;

	for(new i = 0; i < MAX_INTERIORS; i++)
	{
	    if (AdminTeles[i][telesOn]) continue;

		id = i;
		break;
	}

	if (id == -1)	 return SendErrorMessage(playerid, "Teleport limit reached.");

	format(AdminTeles[id][telesMapName], 32, "%s", mapname);
	GetPlayerPos(playerid, AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ]);
	AdminTeles[id][telesInt] = GetInterior(playerid);
	AdminTeles[id][telesType] = 3;
	AdminTeles[id][telesOn] = 1;

	AddTeleToFile(playerid, id, mapname, AdminTeles[id][telesInt], AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ], 3);
 	SendServerMessage(playerid, "Yeni teleport noktasý oluþturuldu. (%s) ID: %i", AdminTeles[id][telesMapName], id);
	return 1;
}

alias:makegps("mgps");
CMD:makegps(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	new mapname[32];

	if (sscanf(params,"s[32]", mapname))				return SendHelpMessage(playerid, "/makegps [görünecek ad]");
	if (strlen(mapname) < 1 || strlen(mapname) > 32)	return SendErrorMessage(playerid, "1-32 karakter olmalý isim.");

	new id = -1;

	for(new i = 0; i < MAX_INTERIORS; i++)
	{
	    if (AdminTeles[i][telesOn]) continue;

		id = i;
		break;
	}

	if (id == -1)	 return SendErrorMessage(playerid, "Limite ulaþýldý.");

	format(AdminTeles[id][telesMapName], 32, "%s", mapname);
	GetPlayerPos(playerid, AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ]);
	AdminTeles[id][telesInt] = GetInterior(playerid);
	AdminTeles[id][telesType] = GPS_TELE_TYPE;
	AdminTeles[id][telesOn] = 1;

	AddTeleToFile(playerid, id, mapname, AdminTeles[id][telesInt], AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ], GPS_TELE_TYPE);
 	SendServerMessage(playerid, "Yeni GPS noktasý oluþturuldu. (%s) ID: %i", AdminTeles[id][telesMapName], id);
	return 1;
}

alias:removetele("rtele");
CMD:removetele(playerid,params[])
{
	new teleid;
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendNotAdmin(playerid);

	if (sscanf(params,"d",teleid))
		return SendHelpMessage(playerid, "/removetele [ID Teleport]");

	if (AdminTeles[teleid][telesOn] == 0)
	    return SendErrorMessage(playerid, "Belirtilen ID geçersiz.");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `ateles` WHERE `id` = %i", AdminTeles[teleid][aID]);
	mysql_tquery(dbHandle, query);

	SendServerMessage(playerid, "Belirtilen teleport noktasý silindi. ID %i.", teleid);

	AdminTeles[teleid][telesOn] = 0;
	AdminTeles[teleid][telesType] = 0;
	return 1;
}

/*
CMD:aveh(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendNotAdmin(playerid);

	new model, color1, color2, Float:x, Float:y, Float:z, Float:a, Float: distance = 5.0;

	if (sscanf(params, "iI(0)I(0)", model, color1, color2))								return SendHelpMessage(playerid, "/aveh [model] {c7c7c7}[color1] [color2]");
	if (model == 520 || model == 425 || model == 432 || model == 447 || model == 476)	return SendErrorMessage(playerid, "Bu tür modeller sunucuda yasaktýr.");
	if (model < 400 || model > 611) 													return SendErrorMessage(playerid, "Araç modelleri 400 ile 611 arasýnda olmalýdýr.");
	if (color1 > 255 || color1 < 0 || color2 > 255 || color2 < 0)						return SendErrorMessage(playerid, "Renk 0 ile 255 arasýnda olmalýdýr.");

	GetPlayerPos(playerid, x, y ,z);
	GetPlayerFacingAngle(playerid, a);
  	x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
	a += 90.0;

	if (a > 360.0) a -= 360.0;

	new vehicle = CreateVehicle(model, x, y, z, a, color1, color2, -1);

	if (vehicle == INVALID_VEHICLE_ID)	return SendErrorMessage(playerid, "Araç oluþturulamadý.");

	SetVehicleHealth(vehicle, 1000.0);
	SetVehicleNumberPlate(vehicle, GetVehicleNumber());
	SetVehicleVirtualWorld(vehicle, GetWorld(playerid));
	LinkVehicleToInterior(vehicle, GetInterior(playerid));
    VehicleInfo[vehicle][carDriver] = INVALID_PLAYER_ID;
	VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(vehicle));
	VehicleInfo[vehicle][carAdmin] = 1;
	VehicleInfo[vehicle][carColor1] = color1;
	VehicleInfo[vehicle][carColor2] = color2;
	VehicleInfo[vehicle][carType] = 0;

	SendAdmMessageToPlayer(playerid, "Araç Oluþturuldu: %s [ID: %i | MODEL: %i].", VehicleNames[model-400], vehicle, model);
	return 1;
}
*/

CMD:settime(playerid, params[])
{
	new time;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params, "d", time))				return SendHelpMessage(playerid, "/settime [0-23]");
	if (time < 0 || time > 23)					return SendErrorMessage(playerid, "Zaman 0 ile 23 arasýnda olmalýdýr.");

	SetWorldTime(time);
	SAMALL("%s adlý yönetici sunucu saatini deðiþtirdi. Saat: %i:00.", GetAccName(playerid), time);
	return 1;
}

CMD:havadurumu(playerid, params[])
{
	new weather;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) 	return SendNotAdmin(playerid);
	if (sscanf(params, "d", weather))			return SendHelpMessage(playerid, "/havadurumu [hava durumu]");
	if (weather < 0||weather > 45)				return SendErrorMessage(playerid, "Hava durumu 0 ile 45 arasýnda olmalýdýr.");

    server_weather = weather;
	SetWeather(server_weather);

	SAMALL("%s adlý yönetici hava durumunu deðiþtirdi. [ID %i].", GetAccName(playerid), weather);
	return 1;
}

CMD:govw(playerid, params[])
{
	new vw;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) 	return SendNotAdmin(playerid);
	if (sscanf(params, "i", vw))				return SendHelpMessage(playerid, "/govw [0-65535]");
	if (vw < 0 || vw > 65535)					return SendErrorMessage(playerid, "Belirtilen deðer 0 ile 65535 arasýnda olmalýdýr.");

	SetWorld(playerid, vw);
	SendServerMessage(playerid, "Dünyanýzý deðiþtirdiniz: %i.", vw);
	return 1;
}

CMD:goint(playerid, params[])
{
	new interior;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params, "i", interior)) 			return SendHelpMessage(playerid, "/goint [0-255]");
	if (interior < 0 || interior > 255)			return SendErrorMessage(playerid, "Belirtilen deðer 0 ile 255 arasýnda olmalýdýr.");

	SetInterior(playerid, interior);
	SendServerMessage(playerid, "Interiorunuzu deðiþtirdiniz: %i.", interior);
	return 1;
}

CMD:go(playerid, params[])
{
	new Float:x, Float:y, Float:z, interior, vw;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) 				 return SendNotAdmin(playerid);
	if (sscanf(params,"fffI(0)I(0)", x, y ,z, interior, vw)) return SendHelpMessage(playerid, "/go [x] [y] [z] {c7c7c7}[interior (0-255)] [vw (0-65535)]");
	if (interior < 0 || interior > 255)						 return SendErrorMessage(playerid, "Interior 0 ile 255 arasýnda olmalýdýr.");
	if (vw < 0 || vw > 65535)								 return SendErrorMessage(playerid, "VW 0 ile 65535 arasýnda olmalýdýr.");

	SetPlayerPosEx(playerid, x, y, z);
	SetInterior(playerid, interior);
 	SetWorld(playerid, vw);
	return 1;
}

CMD:x(playerid, params[])
{
	new Float: coord;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params,"f", coord))				return SendHelpMessage(playerid, "/x [+x koordinat]");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	SetPlayerPosEx(playerid, x + coord, y, z);
	return 1;
}

CMD:y(playerid, params[])
{
	new Float: coord;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params,"f", coord))				return SendHelpMessage(playerid, "/y [+y koordinat]");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	SetPlayerPosEx(playerid, x, y + coord, z);
	return 1;
}

CMD:z(playerid, params[])
{
	new Float: coord;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);
	if (sscanf(params,"f", coord))				return SendHelpMessage(playerid, "/z  [+z koordinat]");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	SetPlayerPosEx(playerid, x, y, z + coord);
	return 1;
}

CMD:oockanal(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendNotAdmin(playerid);

	noooc = !noooc;
	if (noooc == false) SCMALL(COLOR_GRAD2, "OOC sohbet yönetici tarafýndan aktif edildi.");
	else				SCMALL(COLOR_GRAD2, "OOC sohbet yönetici tarafýndan deaktif edildi.");
	return 1;
}

CMD:abirlik(playerid, params[])
{
	new option[16], secoption[128];

	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/abirlik [olustur / sil / duzenle / liste / lider / tip]");
		return 1;
	}

	else if (CompareStrings(option, "tip"))
	{
		new dialog_header[64] = "{FFFFFF}Tip\t{FFFFFF}Ýsim\n", dialog_body[256];
		dialog_body[0] = EOS;

		format(dialog_body, sizeof(dialog_body), "%s1\tCity\n2\tPolis\n3\tMedikal Departman\n4\tYangýn Departmaný\n5\tHapishane(DoC)\n6\tHaberci\n7\tÇete\n8\tMafya\n9\tLegal\n10\tHaberci\n11\tState Bar\n12\tMotor Kulübü\n13\tYarýþ Birliði", dialog_header);
		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Birlik Tipi", dialog_body, "Kapat", "");
	}

	if (CompareStrings(option, "olustur"))
	{
		new factionid = 0, name[32], shortname[8], type;

		if (sscanf(secoption, "is[8]S()[32]", type, shortname, name))
		{
			SendHelpMessage(playerid, "/abirlik olustur [tip] [kýsaltma] [isim]");
			SendHelpMessage(playerid, "Tip: [1] GOV | [2] Polis | [3] Medikal | [4] Yangýn Departmaný | [5] Hapishane | [6] Haber Birliði | [7] Çete | [8] Mafya | [9] Sivil");
			return 1;
		}

		for(new i = 1; i < MAX_FACTIONS; i++)
		{
			if (Factions[i][fON] != 0) continue;

			factionid = i;
			break;
		}

		if (factionid == -1) 						return SendErrorMessage(playerid, "Maksimum birlik sayýsýna ulaþýldý.");
		if (strlen(name) < 1 || strlen(name) > 30)	return SendErrorMessage(playerid, "Birlik adý 30 karakterden fazla olamaz.");
		if (type < 1 || type > 13)					return SendErrorMessage(playerid, "Birlik tipi 1 ile 13 arasýnda olmalýdýr.");
		if (strfind(name, "'", true) != -1) 	return SendErrorMessage(playerid, "Birlik adýnda týrnak iþareti kullanamazsýn.");

		format(Factions[factionid][fName], 32, "%s", name);
		format(Factions[factionid][fShortName], 8, "%s", shortname);
		Factions[factionid][fColor] = 0xFFFFFF00;
		Factions[factionid][fType] = type;
		Factions[factionid][fRanks] = 20;
		Factions[factionid][fChatON] = 1;
		Factions[factionid][fON] = 1;
		Factions[factionid][fJoinRank] = 1;
		Factions[factionid][fPointTime] = 604800 + gettime();

		FRank[factionid][19][rInvite] = 1;
		FRank[factionid][19][rUninvite] = 1;
		FRank[factionid][19][rRank] = 1;
		FRank[factionid][19][r_eRank] = 1;
		FRank[factionid][19][rSpawn] = 1;
		FRank[factionid][19][rChat] = 1;
		FRank[factionid][19][rTow] = 1;
		FRank[factionid][19][rBodyCam] = 1;
		FRank[factionid][19][r_eRights] = 1;

	    UpdateFactionRankLeader(factionid);

		if (type == FACTION_MAFIA)	Factions[factionid][fPoint] = 50;
		else 						Factions[factionid][fPoint] = 30;

		for(new i; i != 20; i++)
		{
			FactionRanks[factionid][i] = "Belirsiz";
		}

		AddFactionToFile(factionid, shortname, name, Factions[factionid][fColor], type, Factions[factionid][fRanks], Factions[factionid][fPointTime], Factions[factionid][fJoinRank]);
		SendAdmMessage("%s adlý yönetici birlik oluþturdu: %s [ID: %i].", GetAccName(playerid), name, factionid);
		SendHelpMessage(playerid, "Birliði düzenlemek için '/abirlik duzenle' komutunu kullanýnýz.");

		return 1;
	}

	else if (CompareStrings(option, "sil"))
	{
		new id;

		if (sscanf(secoption, "i", id))							 return SendHelpMessage(playerid, "/abirlik sil [ID]");
		if (id < 1 || id > MAX_FACTIONS-1 || !Factions[id][fON]) return SendErrorMessage(playerid, "Belirtilen birlik bulunamadý.");
		//if (IsFactionLegal(id))									return SendErrorMessage(playerid, "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½.");

		if (IsValidDynamicPickup(Factions[id][fPickUp])) DestroyDynamicPickup(Factions[id][fPickUp]);

		new query[256];

		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `factions` WHERE `id` = %i", Factions[id][fID]);
		mysql_tquery(dbHandle, query);
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `char`='0',`swat`='0',`swat_duty`='0',`duty`='0',`faction`='0',`rank`='0',`sidejob`='0' WHERE `faction`=%i", id);
		mysql_tquery(dbHandle, query);

		foreach(new i : Player)
		{
			if (!IsPlayerLogged(i) || PlayerInfo[i][pFaction] != id) continue;

			RemovePlayerFaction(i);
		}

		SendServerMessage(playerid, "Belirtilen birliði baþarýyla sildiniz. %s [ID: %i].", Factions[id][fName], id);
		Factions[id][fON] = 0;
		Factions[id][fID] = 0;
	}

	else if (CompareStrings(option, "duzenle"))
	{
		new id, parameters[12], arg[36];

		if (sscanf(secoption, "is[12]S()[36]", id, parameters, arg))
		{
			SendHelpMessage(playerid, "/abirlik duzenle [ID] [seçenekler] [parametre]");
			SendSyntaxMessage(playerid, "spawn / renk / isim / rutbe / girisrutbe / rutbeisim / tip / uniforma / aractamir");
			return 1;
		}
		if (id < 1 || id > MAX_FACTIONS-1 || !Factions[id][fON]) return SendErrorMessage(playerid, "Belirtilen birlik bulunamadý.");

		if (CompareStrings(parameters, "spawn"))
		{
			GetPlayerPos(playerid, Factions[id][fPosX], Factions[id][fPosY], Factions[id][fPosZ]);
			Factions[id][fSpawnInt] = GetInterior(playerid);
			Factions[id][fSpawnVW] = GetWorld(playerid);

			new query[128 + 56];

			mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `spawnx` = %f, `spawny` = %f, `spawnz` = %f, `spawnint` = %i, `spawnvw` = %i WHERE `id` = %i",
			Factions[id][fPosX], Factions[id][fPosY], Factions[id][fPosZ], Factions[id][fSpawnInt], Factions[id][fSpawnVW], Factions[id][fID]);
			mysql_tquery(dbHandle, query);

			SendServerMessage(playerid, "Belirtilen birliðin spawn noktasýný ayarladýnýz %s [ID: %i].", Factions[id][fName], id);
			return 1;
		}

		else if (CompareStrings(parameters, "renk"))
		{
			new color;
			if (sscanf(arg, "h", color)) return SendHelpMessage(playerid, "/abirlik duzenle [ID] renk [HEX]");

			Factions[id][fColor] = color;
			SQL_SetInteger("factions", "color", Factions[id][fColor], Factions[id][fID]);
			SendServerMessage(playerid, "Belirtilen birliðin rengini deðiþtirdiniz {%06x}%s{FF6347} [ID: %i].", color >>> 8, Factions[id][fName], Factions[id][fID]);
			return 1;
		}

		else if (CompareStrings(parameters, "isim"))
		{
			new factioname[32], shortname[8];

			if (sscanf(arg, "s[8]S()[32]", shortname, factioname)) 	return SendHelpMessage(playerid, "//abirlik duzenle [ID] isim [yeni kýsaltma] [yeni isim]");
			if (isnull(factioname) || strlen(factioname) > 32) 		return SendErrorMessage(playerid, "Birlik adý maksimum 32 karakter olabilir.");

			SendServerMessage(playerid, "Belirtilen birliðin isimi deðiþtirildi. Eski: %s [ID: %i] Yeni: %s [%s].", Factions[id][fName], id, factioname, shortname);

			format(Factions[id][fName], 32, "%s", factioname);
			format(Factions[id][fShortName], 8, "%s", shortname);

			SQL_SetString("factions", "name", Factions[id][fName], Factions[id][fID]);
			SQL_SetString("factions", "shortname", Factions[id][fShortName], Factions[id][fID]);
			return 1;
		}

		else if (CompareStrings(parameters, "rutbe"))
		{
			new ranks;
			if (sscanf(arg, "i", ranks)) 	return SendHelpMessage(playerid, "//abirlik duzenle [ID] rutbe [rank sayýsý]");
			if (ranks < 1 || ranks > 20)	return SendErrorMessage(playerid, "Rütbe sayýsý 1 ile 20 arasýnda olmalýdýr.");

			Factions[id][fRanks] = ranks;
			SQL_SetInteger("factions", "ranks", Factions[id][fRanks], Factions[id][fID]);
			SendServerMessage(playerid, "Belirtilen birliðin rütbe sayýsýný deðiþtirdiniz: %s [ID: %i] Yeni: %i.", Factions[id][fName], id, ranks);
			return 1;
		}

		else if (CompareStrings(parameters, "tip"))
		{
			if (isnull(arg) ||  strval(arg) < 1 || strval(arg) > 10)
			{
				SendHelpMessage(playerid, "//abirlik duzenle [ID] tip [tip]");
				SendHelpMessage(playerid, "Tip: [1] GOV | [2] Polis | [3] Medikal | [4] Yangýn Departmaný | [5] Hapishane | [6] Haber Birliði | -->");
				SendHelpMessage(playerid,"[7] Çete | [8] Mafya | [9] Sivil | [10] Haber Birliði | [11] State Bar | [12] Motor Kulübü (MC) | [13] Yarýþçý Birliði ");
				return 1;
			}

			new type_fr[][] = {"GOV", "Polis", "Medikal", "Yangýn Departmaný", "Hapishane", "Haber Birliði", "Çete", "Mafya", "Sivil", "Haber Birliði (Yönetim)", "State Bar","Motor Kulübü", "Yarýþçý Birliði"};

			Factions[id][fType] = strval(arg);
			SQL_SetInteger("factions", "type", Factions[id][fType], Factions[id][fID]);
			SendServerMessage(playerid, "Belirtilen birliðin tipi deðiþtirildi. %s [ID: %i] Yeni: %s [%i].", Factions[id][fName], id, type_fr[strval(arg)-1], strval(arg));

			if (IsFactionLegal(id))
			{
				Factions[id][fPickUp] = CreateDynamicPickup(1239, 1, Factions[id][fUniformX], Factions[id][fUniformY], Factions[id][fUniformZ], Factions[id][fUniformVW], Factions[id][fUniformInt], -1, 100.0);
			}
			else
			{
				if (IsValidDynamicPickup(Factions[id][fPickUp])) DestroyDynamicPickup(Factions[id][fPickUp]);
			}
			return 1;
		}

		else if (CompareStrings(parameters, "girisrutbe"))
		{
			if (isnull(arg))												return SendHelpMessage(playerid, "/abirlik duzenle [ID] girisrutbe [rütbe]");
			if (strval(arg) < 1 || strval(arg) > Factions[id][fRanks]-1)	return SendErrorMessage(playerid, "Rütbe 1 ile %i arasýnda olmalýdýr.", Factions[id][fRanks]-1);

			Factions[id][fJoinRank] = strval(arg);
			SQL_SetInteger("factions", "joinrank", Factions[id][fJoinRank], Factions[id][fID]);
			SendServerMessage(playerid, "%s [ID: %i] adlý birliðe giren kiþiler %i rütbesiyle katýlacak.", Factions[id][fName], id, strval(arg));
			return 1;
		}
		else if (CompareStrings(parameters, "carfix"))
		{
			if (!IsFactionLegal(id)) return SendErrorMessage(playerid, "Bu deðer sadece devlet kurumlarý için kullanýlabilir.");

			GetPlayerPos(playerid, Factions[id][Carfix][fixX], Factions[id][Carfix][fixY], Factions[id][Carfix][fixZ]);
			Factions[id][Carfix][fixInt] = GetInterior(playerid);
			Factions[id][Carfix][fixVW] = GetWorld(playerid);

			SQL_SetFloat("factions", "fix_X", Factions[id][Carfix][fixX], Factions[id][fID]);
			SQL_SetFloat("factions", "fix_Y", Factions[id][Carfix][fixY], Factions[id][fID]);
			SQL_SetFloat("factions", "fix_Z", Factions[id][Carfix][fixZ], Factions[id][fID]);
			SQL_SetInteger("factions", "fix_Int", Factions[id][Carfix][fixInt], Factions[id][fID]);
			SQL_SetInteger("factions", "fix_VW", Factions[id][Carfix][fixVW], Factions[id][fID]);

			if (IsValidDynamicPickup(Factions[id][Carfix][fixPickUp])) DestroyDynamicPickup(Factions[id][Carfix][fixPickUp]);

			Factions[id][Carfix][fixPickUp] = CreateDynamicPickup(1650, 1, Factions[id][Carfix][fixX], Factions[id][Carfix][fixY], Factions[id][Carfix][fixZ], Factions[id][Carfix][fixVW], Factions[id][Carfix][fixInt], -1, 20.0);
			SendServerMessage(playerid, "%s [ID: %i] adlý birliðin araç tamir pozisyonunu ayarladýnýz.", Factions[id][fName], id);
			return 1;
		}

		else if (CompareStrings(parameters, "rutbeisim"))
		{
			new rank, name[32];

			if (sscanf(arg, "is[32]", rank, name)) 			return SendHelpMessage(playerid, "/abirlik duzenle [ID] rutbeisim [rütbe] [isim]");
			if (rank < 1 || rank > Factions[id][fRanks])	return SendSyntaxMessage(playerid, "Rütbe 1 ile %i arasýnda olmalýdýr.", Factions[id][fRanks]);
			if (strlen(name) > 30)							return SendSyntaxMessage(playerid, "Rütbe isimi maksimum 30 karakter olmalýdýr.");

			format(FactionRanks[id][rank-1], 32, "%s", name);
			UpdateFactionRank(id, rank);
			SendServerMessage(playerid, "%s [ID: %i] adlý birliðin %i rütbesinin adýný deðiþtirdiniz. Yeni: %s.", Factions[id][fName], id, rank, name);
			return 1;
		}

		else
		{
			SendHelpMessage(playerid, "//abirlik duzenle[ID] [spawn/renk/isim/rutbe/girisrutbe/rutbeisim/tip/liste/uniforma/aractamir] [parametre]");
			return 1;
		}
	}

	else if (CompareStrings(option, "liste"))
	{
		new faction_type[][] = {"GOV", "Polis", "Medikal", "Yangýn Departmaný", "Hapishane", "Haber Birliði", "Çete", "Mafya", "Sivil", "Haber Birliði (Yönetim)", "State Bar"},
			faction_body[4096] = "ID\tÝsim [Kýsaltma]\tTip",
			count;

		for(new i = 1; i != MAX_FACTIONS; i++)
		{
		    if (!Factions[i][fON]) continue;
			format(faction_body, sizeof(faction_body), "%s\n%i\t%s [%s]\t%s", faction_body, i, Factions[i][fName], Factions[i][fShortName], faction_type[Factions[i][fType]-1]);
			count++;
		}

		if (!count)	return Dialog_Show(playerid, None, DIALOG_STYLE_LIST, "{FFFFFF}Birlik Listesi", "Birlik listesi boþ...", "Kapat", "");

		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Birlik Listesi", faction_body, "Kapat", "");
		return 1;
	}

	else if (CompareStrings(option, "lider"))
	{
		new paramx[8], idx[64];

		if (sscanf(secoption, "s[8]S()[64]", paramx, idx))
		{
			SendHelpMessage(playerid, "/abirlik lider [yap / kaldir]");
			return 1;
		}

		if (CompareStrings(paramx, "yap"))
		{
			new userid, faction;

			if (sscanf(idx, "iu", faction, userid)) 									return SendHelpMessage(playerid, "/abirlik lider yap [ID] [ID/Karakter Adý]");
			if (!IsPlayerLogged(userid))												return SendNotConnected(playerid);
			if (faction < 1 || faction > MAX_FACTIONS - 1 || !Factions[faction][fON])	return SendErrorMessage(playerid, "Birlik bulunamadý");

			RemovePlayerFaction(userid);

			PlayerInfo[userid][pFaction] = faction;
			SQL_SetInteger("users", "faction", PlayerInfo[userid][pFaction], PlayerInfo[userid][pID]);

			PlayerInfo[userid][pRank] = Factions[faction][fRanks];
			SQL_SetInteger("users", "rank", PlayerInfo[userid][pRank], PlayerInfo[userid][pID]);

			PlayerInfo[userid][pBadgeNumber] = randomEx(23456, 99999);
			SQL_SetInteger("users", "badgenumber", PlayerInfo[userid][pBadgeNumber], PlayerInfo[userid][pID]);

			SendServerMessage(playerid, "%s adlý oyuncuyu %s  [ID: %i] adlý birliðin lideri olarak tanýmladýnýz.", GetNameEx(userid), Factions[faction][fName], faction);
			SendServerMessage(userid, "%s adlý yönetici sizi %s [ID: %i] adlý birliðin yöneticisi olarak tanýmladý.", GetAccName(playerid), Factions[faction][fName], faction);
			SendAdmMessage("%s adlý yönetici %s adlý oyuncuyu %s [ID: %i] adlý birliðin lideri olarak tanýmladý.", GetAccName(playerid), GetNameEx(userid), Factions[faction][fName], faction);
			return 1;

		}

		else if (CompareStrings(paramx, "kaldir"))
		{
			new userid;

			if (sscanf(idx, "u", userid))	return SendHelpMessage(playerid, "/abirlik sahip kaldir [ID/Karakter Adý]");
			if (!IsPlayerLogged(userid))	return SendNotConnected(playerid);
			if (!isLeader(userid))			return SendErrorMessage(playerid, "Bu oyuncu lider deðil.");

			new faction = PlayerInfo[userid][pFaction];

			SendServerMessage(playerid, "%s adlý oyuncu %s [ID: %i] adlý birliðin liderliðinden çýkartýldý.", GetNameEx(userid), Factions[faction][fName], faction);
			SendServerMessage(userid, "%s adlý yönetici %s [ID: %i] adlý birliðin liderliðini sizden aldý.", GetAccName(playerid), Factions[faction][fName], faction);
			SendAdmMessage("%s adlý yönetici %s [ID: %i] adlý oyuncunun %s [ID: %i] birliðindeki liderliðini aldý.", GetAccName(playerid), GetNameEx(userid), Factions[faction][fName], faction);

			RemovePlayerFaction(userid);
			return 1;
		}

		else
		{
			SendHelpMessage(playerid, "/abirlik sahip [yap / kaldir]");
			return 1;
		}
	}

	else
	{
		SendHelpMessage(playerid, "/abirlik [olustur / sil / duzenle / liste / sahip]");
	}
	return 1;
}

CMD:aracduzenle(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3)) return SendNotAdmin(playerid);

	new option[48], secoption[128];

	if (sscanf(params, "s[48]S()[128]", option, secoption)) return SendHelpMessage(playerid, "/aracduzenle [kilitseviye / renk / alarmseviye / birlik / immobilizer / gps / radyo / plaka / park / sil]");

	else if (CompareStrings(option, "sil"))
	{
		new vehid;

		if (sscanf(secoption, "i", vehid))		 return SendHelpMessage(playerid, "/editvehicle sil [Araç ID]");
    	if (!IsValidVehicle(vehid))				 return SendErrorMessage(playerid, "Araç bulunamadý.");

        new query[256];
	    mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `cars` WHERE `id` = %i", VehicleInfo[vehid][carID]);
		mysql_tquery(dbHandle, query);

		DestroyVehicleEx(vehid);
	}

	if (CompareStrings(option, "birlik"))
	{
		new vehid, birlik;

		if (sscanf(secoption, "ii", vehid, birlik))		 return SendHelpMessage(playerid, "/editvehicle birlik [Araç ID] [birlik ID]");
    	if (!IsValidVehicle(vehid))				 return SendErrorMessage(playerid, "Araç bulunamadý.");

        VehicleInfo[vehid][carFaction] = birlik;
		SendAdmMessage("%s adlý yönetici ID %d aracýn birliðini %d olarak belirledi.", GetAccName(playerid), vehid, birlik);
		Save_Car(vehid);
	}

	if (CompareStrings(option, "alarmseviye"))
	{
		new vehid, level;

		if (sscanf(secoption, "ii", vehid, level))		 return SendHelpMessage(playerid, "/editvehicle alarmseviye [Araç ID] [alarm seviyesi]");
    	if (!IsValidVehicle(vehid))				 return SendErrorMessage(playerid, "Araç bulunamadý.");

        VehicleInfo[vehid][carAlarm] = level;
		SendAdmMessage("%s adlý yönetici ID %d aracýn alarm seviyesini %d olarak belirledi.", GetAccName(playerid), vehid, level);
		Save_Car(vehid);
	}

	if (CompareStrings(option, "kilitseviye"))
	{
		new vehid, level;

		if (sscanf(secoption, "ii", vehid, level))		 return SendHelpMessage(playerid, "/editvehicle kilitseviye [Araç ID] [kilit seviyesi]");
    	if (!IsValidVehicle(vehid))				 return SendErrorMessage(playerid, "Araç bulunamadý.");
		if (level < 0 || level > 5)              return SendErrorMessage(playerid, "Seviye 1 ile 5 arasýnda olmalý.");

        VehicleInfo[vehid][carLock] = level;
		SendAdmMessage("%s adlý yönetici ID %d aracýn kilit seviyesini %d olarak belirledi.", GetAccName(playerid), vehid, level);
		Save_Car(vehid);
	}

	if (CompareStrings(option, "renk"))
	{
		new vehid, renk1, renk2;

		if (sscanf(secoption, "iii", vehid, renk1, renk2))		 return SendHelpMessage(playerid, "/editvehicle renk [Araç ID] [renk1] [renk2] (/renkler)");
    	if (!IsValidVehicle(vehid))				 return SendErrorMessage(playerid, "Araç bulunamadý.");

        VehicleInfo[vehid][carColor1] = renk1;
		VehicleInfo[vehid][carColor2] = renk2;
		ChangeVehicleColor(vehid, renk1, renk2);
		SendAdmMessage("%s adlý yönetici ID %d aracýn rengini %d - %d olarak belirledi.", GetAccName(playerid), vehid, renk1, renk2);
		Save_Car(vehid);
	}

	if (CompareStrings(option, "immobilizer"))
	{
		new vehid, level;

		if (sscanf(secoption, "ii", vehid, level))		 return SendHelpMessage(playerid, "/editvehicle immobilizer [Araç ID] [immobilizer seviyesi]");
    	if (!IsValidVehicle(vehid))				 return SendErrorMessage(playerid, "Araç bulunamadý.");
		if (level < 0 || level > 5)              return SendErrorMessage(playerid, "Seviye 1 ile 5 arasýnda olmalý.");

        VehicleInfo[vehid][carImmob] = level;
		SendAdmMessage("%s adlý yönetici ID %d aracýn immobilizer seviyesini %d olarak belirledi.", GetAccName(playerid), vehid, level);
		Save_Car(vehid);
	}

    if (CompareStrings(option, "gps"))
	{
		new vehid, level;

		if (sscanf(secoption, "ii", vehid, level))		 return SendHelpMessage(playerid, "/editvehicle gps [Araç ID] [0 yok | 1 var]");
    	if (!IsValidVehicle(vehid))				 return SendErrorMessage(playerid, "Araç bulunamadý.");
		if (level < 0 || level > 1)              return SendErrorMessage(playerid, "Seviye 0 veya 1 olmalýdýr.");

        VehicleInfo[vehid][carGps] = level;
		SendAdmMessage("%s adlý yönetici ID %d aracýn GPS durumunu %d olarak belirledi.", GetAccName(playerid), vehid, level);
		Save_Car(vehid);
	}

	if (CompareStrings(option, "radyo"))
	{
		new vehid, level;

		if (sscanf(secoption, "ii", vehid, level))		 return SendHelpMessage(playerid, "/editvehicle radyo [Araç ID] [0 yok | 1 var]");
    	if (!IsValidVehicle(vehid))				 return SendErrorMessage(playerid, "Araç bulunamadý.");
		if (level < 0 || level > 1)              return SendErrorMessage(playerid, "Seviye 0 veya 1 olmalýdýr.");

        VehicleInfo[vehid][carRadio] = level;
		SendAdmMessage("%s adlý yönetici ID %d aracýn radyo durumunu %d olarak belirledi.", GetAccName(playerid), vehid, level);
		Save_Car(vehid);
	}

	if (CompareStrings(option, "plaka"))
	{
		new vehid, plate;

		if (sscanf(secoption, "is[24]", vehid, plate))		 return SendHelpMessage(playerid, "/editvehicle plaka [Araç ID] [plaka]");
    	if (!IsValidVehicle(vehid))				 return SendErrorMessage(playerid, "Araç bulunamadý.");

        format(VehicleInfo[vehid][carPlate], 24, "%s", plate);
		SendAdmMessage("%s adlý yönetici ID %d aracýn plakasýný %s olarak belirledi.", GetAccName(playerid), vehid, plate);
		Save_Car(vehid);
	}

	if (CompareStrings(option, "tip"))
	{
		new vehid, type;

		if (sscanf(secoption, "is[24]", vehid, type))		 return SendHelpMessage(playerid, "/editvehicle tip [Araç ID] [tip(/avehicle types)]");
    	if (!IsValidVehicle(vehid))				return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");
		if (type < 1 || type > 12)               return SendErrorMessage(playerid, "Tip 1 ile 12 arasýnda olmalýdýr. /avehicle types");

        VehicleInfo[vehid][carType] = type;
		SendAdmMessage("%s adlý yönetici ID %d aracýn tipini %d olarak belirledi.", GetAccName(playerid), vehid, type);
		Save_Car(vehid);
	}

	if (CompareStrings(option, "park"))
	{
		new vehid;

		if (sscanf(secoption, "i", vehid))		return SendHelpMessage(playerid, "/editvehicle park [Araç ID]");
		if (!IsValidVehicle(vehid))				return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");
		if (VehicleInfo[vehid][carOwnerID])		return SendErrorMessage(playerid, "Sahibi olan araçlarý park edemezsiniz.");

		GetVehiclePos(vehid, VehicleInfo[vehid][carParkX], VehicleInfo[vehid][carParkY], VehicleInfo[vehid][carParkZ]);
		GetVehicleZAngle(vehid, VehicleInfo[vehid][carParkA]);

		SQL_SetFloat("cars", "x", VehicleInfo[vehid][carParkX], VehicleInfo[vehid][carID]);
		SQL_SetFloat("cars", "y", VehicleInfo[vehid][carParkY], VehicleInfo[vehid][carID]);
		SQL_SetFloat("cars", "z", VehicleInfo[vehid][carParkZ], VehicleInfo[vehid][carID]);
		SQL_SetFloat("cars", "fa", VehicleInfo[vehid][carParkA], VehicleInfo[vehid][carID]);

		new vehicle = CreateFactionVehicle(false, VehicleInfo[vehid][carModel], VehicleInfo[vehid][carParkX], VehicleInfo[vehid][carParkY], VehicleInfo[vehid][carParkZ], VehicleInfo[vehid][carParkA], VehicleInfo[vehid][carColor1],
		VehicleInfo[vehid][carColor2], VehicleInfo[vehid][carType], VehicleInfo[vehid][carFaction], VehicleInfo[vehid][carPlate], VehicleInfo[vehid][carVW], VehicleInfo[vehid][carInt], VehicleInfo[vehid][carID]);

		if (!vehicle) return SendErrorMessage(playerid, "Araç oluþturulamadý.");

		DestroyVehicleEx(vehid, 1);
		SendServerMessage(playerid, "Araç [ID: %i | NID: %i] park edildi ve belirtilen yerde doðacak", vehid, vehicle);
	}

	else return SendHelpMessage(playerid, "/editvehicle [kilitseviye / alarmseviye / immobilizer / gps / radyo / plaka / park / sil]");
	return 1;
}

CMD:itemlist(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3)) return SendNotAdmin(playerid);

	new dialog_header[64] = "{FFFFFF}Ýtem Adý\t{FFFFFF}Ýtem Numarasý(ID)\n", dialog_body[3072];
	dialog_body[0] = EOS;

	format(dialog_body, sizeof(dialog_body), "%s", dialog_header);

	for(new i = 1; i != sizeof(inventory_items); i++)
	{
		format(dialog_body, sizeof(dialog_body), "%s%s\t%i\n", dialog_body, inventory_items[i][itemName], i);
	}

	Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Ýtemler", dialog_body, "Kapat", "");
	return 1;
}

CMD:giveitem(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3)) return SendNotAdmin(playerid);

	new userid, item, amount;

	if (sscanf(params, "udd", userid, item, amount))	return SendHelpMessage(playerid, "/giveitem [ID/Ýsim] [Ýtem ID(/itemlist)] [Adet]");
	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (item < 1 || item >= sizeof(inventory_items)) 	return SendErrorMessage(playerid, "Geçersiz item id (/itemlist).");
	if (amount < 1 || amount > 10)					return SendErrorMessage(playerid, "Miktarý 1 ile 10 olabilir maksimum.");

	switch(item)
	{
		case 22..34: return SendErrorMessage(playerid, "Silah vermek için /asilah komutunu kullanýn.");
		case INV_DRUG: return SendErrorMessage(playerid, "Uyuþturucu vermek için /auver komutunu kontrol etmek için /auyusturucu kullanýn.");
		case INV_GANJA, INV_MED_GANJA, 103 .. 118:
		{
			if (GiveFloatInvItem(userid, item, float(amount)) == -1)	return SendErrorMessage(playerid, "Inventory is full.");

			SendAdmMessageToPlayer(userid, "%s adlý yetkili sana %s isimli eþyayý verdi [%i Gram].", GetAccName(playerid), inventory_items[item][itemName], amount);
			SendAdmMessage("%s adlý yetkili %s adlý kiþiye %s isimli uyuþturucudan %i adet(GR.) verdi.", GetAccName(playerid), GetNameEx(userid), inventory_items[item][itemName], amount);
		}
		default:
		{
			if (GiveInvItem(userid, item, amount) == -1) return SendErrorMessage(playerid, "Inventory is full.");

			SendAdmMessageToPlayer(userid, "%s adlý yetkili sana %s(Adet: %i) verdi.", GetAccName(playerid), inventory_items[item][itemName], amount);
			SendAdmMessage("%s adlý yetkili %s adlý kiþiye %s isimli eþyayý verdi. (Adet: %i)", GetAccName(playerid), GetNameEx(userid), inventory_items[item][itemName], amount);
		}
	}

	return 1;
}

alias:aarac("aracolustur");
CMD:aarac(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3)) return SendNotAdmin(playerid);

	new option[16], secoption[128];
	new mes[300];

	if (sscanf(params, "s[16]S()[128]", option, secoption)) return SendHelpMessage(playerid, "/aarac [olustur / sahipliolustur / / sil / park / tip]");
	if(CompareStrings(option, "sahipliolustur"))
	{
 		new model, ownerid, color1, color2, Float:x, Float:y, Float:z, Float:a;
		new lock = 0, alarm = 0, immobilizer = 0, insurance = 0, radio = 0, gps = 0, registered = 1, query[512];
		if (sscanf(secoption, "iiii", ownerid, model, color1, color2)) {
				return SendHelpMessage(playerid, "/aarac sahipliolustur [ID / isim] [model] [renk 1] [renk 2]");
			}
		if(!IsPlayerLogged(ownerid)) return SendNotConnected(playerid);
		if (model < 400 || model > 611) 													return SendErrorMessage(playerid, "Araç modelleri 400 ile 611 arasýnda olmalýdýr.");
		if (color1 > 255 || color1 < 0 || color2 > 255 || color2 < 0)						return SendErrorMessage(playerid, "Renk 0 ile 255 arasýnda olmalýdýr");
		if (model == 520 || model == 425 || model == 432 || model == 447 || model == 476)	return SendErrorMessage(playerid, "Belirtilen araç modeli sunucuda yasaklanmýþtýr.");
		GetPlayerPos(ownerid, x, y, z);
		GetPlayerFacingAngle(ownerid, a);
		SendServerMessage(ownerid, "%s adlý yönetici size %s model araç verdi. (/araclarim)", GetAccName(playerid), VehicleNames[model-400]);
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `cars` (date,model,color1,color2,x,y,z,fa,plate,owner,registered,alarm,locks,immob,insurances,radio,gps,health,fuel) VALUES ('%s',%i,%i,%i,%.1f,%.1f,%.1f,%.1f,'%s',%i,%i,%i,%i,%i,%i,%i,%i,%.1f,%.1f)",
		GetFullDate(), model, color1, color2, x, y, z, a, GetVehicleNumber(), PlayerInfo[ownerid][pID], registered, alarm, lock, immobilizer, insurance, radio, gps, GetVehicleMaxHealth(model), GetVehicleFuelCapacity(model)/2);
		mysql_tquery(dbHandle, query);
	}
	if (CompareStrings(option, "olustur"))
	{
		new model, type, faction, plate[24], color1, color2, Float:x, Float:y, Float:z, Float:a, vw, interior;

		if (sscanf(secoption, "iiiiI(0)S()[24]", model, type, color1, color2, faction, plate)) {
			return SendHelpMessage(playerid, "/aarac olustur [model] [tür (0 - birlikler için)] [renk 1] [renk 2] {c7c7c7}[birlik] [plaka]");
		}

		if (model < 400 || model > 611) 													return SendErrorMessage(playerid, "Girilen model deðeri 400 ile 611 arasý olmalýdýr.");
		if (color1 > 255 || color1 < 0 || color2 > 255 || color2 < 0)						return SendErrorMessage(playerid, "Girilen renk deðeri 0 ve 255 arasý olmalýdýr.");
		if (model == 425 || model == 432 || model == 447 || model == 476)	return SendErrorMessage(playerid, "Belirtilen model sunucuda yasak.");

		if (isempty(plate)) format(plate, 24, "%s", GetVehicleNumber());

		GetXYInFrontOfPlayer(playerid, x, y, z, 5.0);
		GetPlayerFacingAngle(playerid, a);
		vw = GetWorld(playerid);
		interior = GetInterior(playerid);

		if (!CreateFactionVehicle(true, model, x, y, z, a, color1, color2, type, faction, plate, vw, interior)) return SendErrorMessage(playerid, "Araç oluþturulamadý.");
		SendAdmMessageToPlayer(playerid, "Araç oluþturuldu. [Model %d - Plaka %s - Tür %d - Birlik %d - VW %d - Interior %d]", model, plate, type, faction, vw, interior);
		format(mes, sizeof(mes), "(( %s adli admin %d model bir arac olusturdu. ))", GetNameEx(playerid), model);
		SendClientMessageByAdmin(COLOUR_TOMATO, mes);
	}

	else if (CompareStrings(option, "sil"))
	{
		new vehid;

		if (sscanf(secoption, "i", vehid))		 return SendHelpMessage(playerid, "/aarac sil [Araç ID]");
    	if (!IsValidVehicle(vehid))				 return SendErrorMessage(playerid, "Araç bulunamadý.");

	    if (VehicleInfo[vehid][carAdmin] == 0)
		{
        	new query[256];
	    	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `cars` WHERE `id` = %i", VehicleInfo[vehid][carID]);
			mysql_tquery(dbHandle, query);
		}
		new mes[300];
		format(mes, sizeof(mes), "(( %s adli admin %d id'li araci sildi. ))", GetNameEx(playerid), vehid);
		SendClientMessageByAdmin(COLOUR_TOMATO, mes);
		DestroyVehicleEx(vehid);
	}

	else if (CompareStrings(option, "park"))
	{
		new vehid;

		if (sscanf(secoption, "i", vehid))		return SendHelpMessage(playerid, "/aarac park [Araç ID]");
		if (!IsValidVehicle(vehid))				return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");
		//if (VehicleInfo[vehid][carOwnerID])		return SendErrorMessage(playerid, "Belirtilen araç park edilemez.");

		GetVehiclePos(vehid, VehicleInfo[vehid][carParkX], VehicleInfo[vehid][carParkY], VehicleInfo[vehid][carParkZ]);
		GetVehicleZAngle(vehid, VehicleInfo[vehid][carParkA]);

		SQL_SetFloat("cars", "x", VehicleInfo[vehid][carParkX], VehicleInfo[vehid][carID]);
		SQL_SetFloat("cars", "y", VehicleInfo[vehid][carParkY], VehicleInfo[vehid][carID]);
		SQL_SetFloat("cars", "z", VehicleInfo[vehid][carParkZ], VehicleInfo[vehid][carID]);
		SQL_SetFloat("cars", "fa", VehicleInfo[vehid][carParkA], VehicleInfo[vehid][carID]);

		new vehicle = CreateFactionVehicle(false, VehicleInfo[vehid][carModel], VehicleInfo[vehid][carParkX], VehicleInfo[vehid][carParkY], VehicleInfo[vehid][carParkZ], VehicleInfo[vehid][carParkA], VehicleInfo[vehid][carColor1],
		VehicleInfo[vehid][carColor2], VehicleInfo[vehid][carType], VehicleInfo[vehid][carFaction], VehicleInfo[vehid][carPlate], VehicleInfo[vehid][carVW], VehicleInfo[vehid][carInt], VehicleInfo[vehid][carID]);

		if (!vehicle) return SendErrorMessage(playerid, "Araç oluþturulamadý.");

		DestroyVehicleEx(vehid, 1);
		SendServerMessage(playerid, "Araç [ID: %i | NID: %i] park edildi ve belirtilen yerde doðacak", vehid, vehicle);
	}

	else if (CompareStrings(option, "tip"))
	{
	    SendHelpMessage(playerid, "Tip: 0: Birlik, 1: Ehliyet (Arac), 2: Ehliyet (Heli), 3: Siren");
	    SendHelpMessage(playerid, "4: Ehliyet (Taksi), 5: Kiralik Arac, 6: Taksi, 7: Pizzaci, 8: Kamyon, 8: Mekanik");

		new dialog_header[64] = "{FFFFFF}Tip\t{FFFFFF}Ýsim\n", dialog_body[256];
		dialog_body[0] = EOS;

		format(dialog_body, sizeof(dialog_body), "%s0\tBirlik\n1\tEhliyet (Arac)\n2\tEhliyet (Helikopter)\n3\tSirenli\n4\tEhliyet (Taksi)\n5\tKiralik\n6\tTaksi\n7\tPizzaci\n8\tKamyon\n9\tMekanik", dialog_header);
		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Araç Tipi", dialog_body, "Kapat", "");
	}

	else return SendHelpMessage(playerid, "/aarac [olustur / sil / park / tip]");
	return 1;
}

alias:apayphone("app");
CMD:apayphone(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption)) return SendHelpMessage(playerid, "/apayphone [create / remove / edit / goto]");

	if (CompareStrings(option, "create"))
	{
		new number, type;
		if (sscanf(secoption,"iI(0)", number, type)) return SendHelpMessage(playerid, "/apayphone create [numara] {c7c7c7}[model id]");

		if (!type) type = 1216;

		new Float:x, Float:y, Float:z, Float:a, vw, interior;
		GetXYInFrontOfPlayer(playerid, x, y, z, 2.0);
		GetPlayerFacingAngle(playerid, a);
		vw = GetWorld(playerid);
		interior = GetInterior(playerid);

		new id;
		if ((id = CreatePayphone(true, type, number, x, y, z, 0.0, 0.0, 0.0, vw, interior)) == -1) return SendErrorMessage(playerid, "Maksimum ankesörlü telefon sayýsýna ulaþýldý.");

		SetPVarInt(playerid, #edit_pp, id + 1);
		EditDynamicObject(playerid, PayphoneInfo[id][phObj]);

		SendServerMessage(playerid, "Ankesörlü telefon oluþturuldu: %i [ID: %i].", number, id);
		return 1;
	}

	else if (CompareStrings(option, "remove"))
	{
		new id;

		if (sscanf(secoption, "i", id))									return SendHelpMessage(playerid, "/apayphone remove [ID]");
		if (id < 0 || id >= MAX_PAYPHONES || !PayphoneInfo[id][phID])	return SendErrorMessage(playerid, "Ankesörlü telefon bulunamadý.");

		if (IsValidDynamicObject(PayphoneInfo[id][phObj])) 			DestroyDynamicObject(PayphoneInfo[id][phObj]);
		if (IsValidDynamic3DTextLabel(PayphoneInfo[id][phLabel])) 	DestroyDynamic3DTextLabel(PayphoneInfo[id][phLabel]);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `payphones` WHERE `id` = %i", PayphoneInfo[id][phID]);
		mysql_tquery(dbHandle, query);

		PayphoneInfo[id][phID] = 0;
		SendAdmMessageToPlayer(playerid, "Belirtilen ankesörlü telefon kaldýrýldý. [ID: %i].", id);
		return 1;
	}

	else if (CompareStrings(option, "edit"))
	{
		new id;

		if (sscanf(secoption, "d", id))								 return SendHelpMessage(playerid, "/apayphone edit [ID]");
		if (id < 0 || id > MAX_PAYPHONES || !PayphoneInfo[id][phID]) return SendErrorMessage(playerid, "Ankesörlü telefon bulunamadý.");
		if (Payphone_Nearest(playerid) != id)						 return SendErrorMessage(playerid, "Ankesörlü telefonun yanýnda olmalýsýn.");

		SetPVarInt(playerid, #edit_pp, id + 1);
		EditDynamicObject(playerid, PayphoneInfo[id][phObj]);
		return 1;
	}

	else if (CompareStrings(option, "goto"))
	{
		new id;

		if (sscanf(secoption, "i", id))								return SendHelpMessage(playerid, "/apayphone goto [ID]");
		if (id < 0 || id > MAX_PAYPHONES || !PayphoneInfo[id][phID])	return SendErrorMessage(playerid, "Ankesörlü telefon bulunamadý.");

		SetPlayerPosEx(playerid, PayphoneInfo[id][phX], PayphoneInfo[id][phY], PayphoneInfo[id][phZ]);
		SetWorld(playerid, PayphoneInfo[id][phVW]);
		SetInterior(playerid, PayphoneInfo[id][phInt]);
		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "/apayphone [create / remove / edit / goto]");
	}
	return 1;
}

alias:aparkmeter("aparkm");
CMD:aparkmeter(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
	if (CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption)) return SendHelpMessage(playerid, "/aparkm [create / remove / edit / goto]");

	if (CompareStrings(option, "create"))
	{
		if (ParkMeter_Nearest(playerid) != -1) return SendErrorMessage(playerid, "Herhangi bir parkmetreye çok yakýnsýnýz.");

		new Float:x, Float:y, Float:z, Float:a;
		GetXYInFrontOfPlayer(playerid, x, y, z, 2.0);
		GetPlayerFacingAngle(playerid, a);

    	new id;
		if ((id = InsertParkMeters(playerid, x, y, z, a)) == -1) return SendErrorMessage(playerid, "Sýnýra ulaþýldýðýndan ötürü ("#MAX_METERS") yeni parkmetre ekleyemezsiniz.");

		SetPVarInt(playerid, #edit_pm, id + 1);
		EditDynamicObject(playerid, pMeter[id][parkObject]);

		SendAdmMessageToPlayer(playerid, "Parkmetre oluþturuldu [ID: %i].", id);
		return 1;
	}

	else if (CompareStrings(option, "remove"))
	{
		new id;

		if (sscanf(secoption, "i", id))							return SendHelpMessage(playerid, "/aparkm remove [ID Parking meter]");
		if (id < 0 || !pMeter[id][parkID] || id >= MAX_METERS)	return SendErrorMessage(playerid, "Parkmetre bulunamadý.");

		SendAdmMessageToPlayer(playerid, "Belirtilen parkmetre baþarýlý þekilde kaldýrýldý [ID:%d].", id);
    	EraseParkMeter(id);
		return 1;
	}

	else if (CompareStrings(option, "edit"))
	{
		new id;

		if (sscanf(secoption, "d", id))							return SendHelpMessage(playerid, "/aparkm edit [ID]");
		if (id < 0 || !pMeter[id][parkID] || id >= MAX_METERS)	return SendErrorMessage(playerid, "Parkmetre bulunamadý.");
		if (ParkMeter_Nearest(playerid) != id)					return SendErrorMessage(playerid, "Parkmetreye yakýn olmalýsýnýz.");

		SetPVarInt(playerid, #edit_pm, id + 1);
		EditDynamicObject(playerid, pMeter[id][parkObject]);
		return 1;
	}

	else if (CompareStrings(option, "goto"))
	{
		new id;

		if (sscanf(secoption, "i", id))							return SendHelpMessage(playerid, "/aparkm goto [ID]");
		if (id < 0 || !pMeter[id][parkID] || id >= MAX_METERS)	return SendErrorMessage(playerid, "Parkmetre bulunamadý.");

		SetPlayerPosEx(playerid, pMeter[id][parkX], pMeter[id][parkY], pMeter[id][parkZ]);
		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "/aparkm [create / remove / edit / goto]");
	}
	return 1;
}

CMD:isimkabul(playerid, params[])
{
	new userid;

    if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))				return SendHelpMessage(playerid, "/isimkabul [ID/Karakter Adý]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (!strlen(pTemp[userid][pChangeNick]))		return SendErrorMessage(playerid, "Belirtilen oyuncu isim deðiþikliði için talepte bulunmamýþ.");

    new query[256];
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%e'", pTemp[userid][pChangeNick]);
	mysql_tquery(dbHandle, query, "OnChangeName", "iis", playerid, userid, pTemp[userid][pChangeNick]);
	return 1;
}

CMD:auver(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);

	new hedefid, tip, kalite, gram;
	if(sscanf(params, "uddd", hedefid, tip, gram, kalite))
	{
		SendHelpMessage(playerid, "/auver [oyuncu isim yada ID] [uyuþturucu (sayýlarý kullanýn)] [gram] [kalite]");
		SendServerMessage(playerid, "UYUÞTURUCULAR: [LSD 0] - [Kokain 1] - [Eroin 2] - [Amfetamin 3] - [Metamfetamin 4]");
		SendServerMessage(playerid, "UYUÞTURUCULAR: [Ekstazi 5] - [PCP 6] - [Ketamin 7] - [Marijuana 8] - [Haþhaþ 9] - [Aþk Suyu 10]");
		return 1;
	}
	if(!(0 <= tip <= 10)) return SendErrorMessage(playerid, "Uyuþturucu tipi 0 ve 10 arasýnda olmalýdýr.");
	if(!(0 <= kalite <= 100)) return SendErrorMessage(playerid, "Uyuþturucu kalitesi 0 ve 100 arasýnda olmalýdýr.");
	if(!IsPlayerConnected(hedefid) || !pTemp[hedefid][pLogged]) return SendErrorMessage(playerid, "Geçersiz oyuncu.");

	if(OyuncuUyusturucuSayi(PlayerInfo[hedefid][pID]) >= MAX_OYUNCU_UYUSTURUCU_SAYI)
		return SendErrorMessage(playerid, "Bu oyuncunun boþ slotu yok. Uyuþturucu düzenlemek istersen /auyusturucu komutunu kullan.");

	OyuncuUyusturucuVer(PlayerInfo[hedefid][pID], tip, gram, kalite);
	SendServerMessage(hedefid, "%s tarafýndan %s türünde %d gram ve %d kalite uyuþturucu aldýn.", GetAccName(playerid), UyusTipleri[tip][Ad], gram, kalite);
	SendServerMessage(playerid, "%s adlý oyuncuya %s türünde %d gram ve %d kalite uyuþturucu verdin.", GetNameEx(hedefid), UyusTipleri[tip][Ad], gram, kalite);
	return 1;
}

CMD:auyusturucu(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);

	new sqlid;
	if(!isnull(params) && !sscanf(params, "u", sqlid)) {
		if(!IsPlayerConnected(sqlid)) return SendErrorMessage(playerid, "Oyuncu bulunamadý.");
		if(!pTemp[sqlid][pLogged]) return pc_cmd_auyusturucu(playerid, Oyuncu_Isim(sqlid));
		sqlid = PlayerInfo[sqlid][pID];
	}
	else if(!isnull(params) && !isNumeric(params)) {
		mysql_format(dbHandle, queryx, sizeof queryx, "SELECT id FROM users WHERE name = '%s'", params);
		new Cache:char_check = mysql_query(dbHandle, queryx);

		if(!cache_num_rows()) {
			cache_delete(char_check);
			return SendErrorMessage(playerid, "Veri tabanýnda '%s' isminde bir karakter bulunamadý.", params);
		}

		cache_get_value_int(0, "id", sqlid);
	}
	else return SendHelpMessage(playerid, "/auyusturucu [Oyuncu isim/ID]");

	OyuncuUyusturucuGoster(playerid, sqlid, 1);
	return 1;
}

CMD:meslekdurum(playerid)
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3)) return SendNotAdmin(playerid);
	MeslekSistemleri = !MeslekSistemleri;
	SendServerMessage(playerid, "Meslek sistemleri %s.", !MeslekSistemleri ? "pasife çekildi" : "aktif edildi");

	new mes[128];
	format(mes, sizeof(mes), "[Duyuru] Meslek sistemleri %s.", !MeslekSistemleri ? "pasife çekildi" : "aktif edildi");
	SCMALL(0xF97804FF,mes);
	return 1;
}

CMD:akilit(playerid, params[])
{
    if (!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendNotAdmin(playerid);

	for(new i; i != MAX_HOUSES; i++)
	{
	    if (HouseInfo[i][hID] == 0 || (0 == IsPlayerInsideHouse(playerid, i) && 0 == IsPlayerOutsideHouse(playerid, i))) continue;

        HouseInfo[i][hLocked] = !HouseInfo[i][hLocked];
		SQL_SetInteger("houses", "locked", HouseInfo[i][hLocked], HouseInfo[i][hID]);

        if (HouseInfo[i][hLocked] == 0)
        {
			SendAdmMessage("%s adlý yönetici evin kilidini açtý [ID: %i].", GetAccName(playerid), i);
			GameTextForPlayer(playerid, "~w~KAPI ~g~KILIDI ACILDI", 5000, 6);
			DestroyDynamicPickup(HouseInfo[i][hPickup]);
			CreateDynamicPickup(1273, 1, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ], HouseInfo[i][hPosVW], HouseInfo[i][hPosInt], -1, 100.0);

        }
        else
        {
			SendAdmMessage("%s adý yönetici evi kilitledi [ID: %i].", GetAccName(playerid), i);
			GameTextForPlayer(playerid, "~w~KAPI ~r~KILITLENDI", 5000, 6);
			DestroyDynamicPickup(HouseInfo[i][hPickup]);
			CreateDynamicPickup(19522, 1, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ], HouseInfo[i][hPosVW], HouseInfo[i][hPosInt], -1, 100.0);
        }
        return 1;
	}

	for(new i = 0; i != MAX_BIZ; i++)
	{
	    if (BizInfo[i][bizID] == 0 || (0 == IsPlayerBizOutside(playerid, i) && 0 == IsPlayerBizInside(playerid, i)))	continue;

        BizInfo[i][bizLocked] = !BizInfo[i][bizLocked];
		SQL_SetInteger("business", "locked", BizInfo[i][bizLocked], BizInfo[i][bizID]);

		if (BizInfo[i][bizLocked] == 0)
		{
			SendAdmMessage("%s adlý yönetici iþletmenin kilidini açtý [ID: %i].", GetAccName(playerid), i);
			GameTextForPlayer(playerid, "~w~KAPI ~g~KILIDI ACILDI", 5000, 6);
		}
		else
		{
			SendAdmMessage("%s adlý yönetici iþletmenin kilidini açtý [ID: %i].", GetAccName(playerid), i);
			GameTextForPlayer(playerid, "~w~KAPI ~r~KILITLENDI", 5000, 6);
		}
		return 1;
	}

	for(new i = 0; i != MAX_ENTRANCE; i++)
	{
	    if (EntranceInfo[i][eFaction] == 0 || EntranceInfo[i][entranceOn] == 0 || (IsPlayerEntranceOutside(playerid, i) == 0 && IsPlayerEntranceInside(playerid, i) == 0)) continue;

        EntranceInfo[i][eLocked] = !EntranceInfo[i][eLocked];
        PlaySound(playerid, 1145);

        if (EntranceInfo[i][eLocked])
        {
			SendAdmMessage("%s adlý yönetici birlik kapýsýný kilitledi [ID: %i].", GetAccName(playerid), i);
            GameTextForPlayer(playerid, "~w~KAPI ~g~KILIDI ACILDI", 5000, 6);
		}
		else
		{
			SendAdmMessage("%s adlý yönetici birlik kapýsýnýn kilidini açtý [ID: %i].", GetAccName(playerid), i);
		    GameTextForPlayer(playerid, "~w~KAPI ~r~KILITLENDI", 5000, 6);
		}
		break;
	}

	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		if (!IsValidVehicle(i)) continue;
		new vehicle = GetNearVehicle(playerid, 5.0, i), mes[128];

		if(!vehicle) return SendErrorMessage(playerid, "Herhangi bir aracýn yanýnda deðilsiniz.");

		if (VehicleInfo[vehicle][carLocked]) format(mes, sizeof(mes), "KILIT ~g~ACILDI");
		else format(mes, sizeof(mes), "ARAC ~r~KILITLENDI");
		GameTextForPlayer(playerid, mes, 2500, 4);

		ToggleVehicleLock(vehicle, (VehicleInfo[vehicle][carLocked]) ? (false): (true));
		return 1;
	}
	SendErrorMessage(playerid, "Evinizin/iþ yerinizin/giriþinizin yakýnýnda olmalýsýnýz.");
	return 1;
}

CMD:aev(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3)) return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/aev [olustur / sil / duzenle / sat / goto / arkakapi]");
		return 1;
	}

	new houseid,
		level,
		price,
		clases,
		classes_name[3][10] = {"Küçük", "Orta", "Büyük"};

	if (CompareStrings(option, "olustur"))
	{
		new Float:x, Float:y, Float:z, Float:newZ;

		if (sscanf(secoption, "iiF(0.0)", clases, price, newZ)) 	return SendHelpMessage(playerid, "/aev olustur [tip (1 - deneme | 2 - küçük | 3 - orta | 4 - büyük] [fiyat]");
		if (clases < 1 || clases > 4)				return SendErrorMessage(playerid, "Ev tipi 1 ile 4 arasýnda olmalýdýr.");
		if (price < 1 || price > 200000000)			return SendErrorMessage(playerid, "Ev fiyatý $1 ile $20.000.000 arasýnda olmalýdýr.");
		if ((houseid = GetNextHouseID()) == -1)		return SendErrorMessage(playerid, "Maksimum ev miktarýna ulaþtýnýz.");

		new vw, interior;

		if (clases > 2) 	level = 1;
		else 			level = 0;

		GetPlayerPos(playerid, x, y, z);
		vw = GetWorld(playerid);
		interior = GetInterior(playerid);

		if (vw != 0 || interior != 0) HouseInfo[houseid][hApart] = GetNearApartmentInside(playerid);
		else 						 HouseInfo[houseid][hApart] = 0;

		HouseInfo[houseid][hPosX] = x;
		HouseInfo[houseid][hPosY] = y;
		HouseInfo[houseid][hPosZ] = z+newZ;
		HouseInfo[houseid][hPosVW] = vw;
		HouseInfo[houseid][hPosInt] = interior;

		HouseInfo[houseid][hExitX] =
		HouseInfo[houseid][hExitY] =
		HouseInfo[houseid][hExitZ] = 0.0;
		HouseInfo[houseid][hExitVW] = 5000 + houseid;

		if (clases == 1) 		SetHouseInterior(houseid, 0);
		else if (clases == 2)	SetHouseInteriorEx(houseid, 0);
		else if (clases == 3)	SetHouseInteriorEx(houseid, 1);
		else if (clases == 4)	SetHouseInteriorEx(houseid, 2);

		switch(clases)
		{
			case 1: clases = 0;
			case 2: clases = 0;
			case 3: clases = 1;
			case 4: clases = 2;
		}

		HouseInfo[houseid][hClass] = clases;

		for(new i = 0; i < 2; i++) {
			HouseInfo[houseid][hExtX][i] =
			HouseInfo[houseid][hExtY][i] =
			HouseInfo[houseid][hExtZ][i] = 0.0;
			HouseInfo[houseid][hExtVW][i] =
			HouseInfo[houseid][hExtInt][i] = 0;
		}

		HouseInfo[houseid][hCheckPosX] =
		HouseInfo[houseid][hCheckPosY] =
		HouseInfo[houseid][hCheckPosZ] = 0.0;
		HouseInfo[houseid][hLevelbuy] = level;
		HouseInfo[houseid][hPrice] = price;
		HouseInfo[houseid][hLocked] = 1;
		HouseInfo[houseid][hFurnitureRadius] = 7.0;
		HouseInfo[houseid][hOwnerID] =
		HouseInfo[houseid][hCash] =
		HouseInfo[houseid][hRadio] =
		HouseInfo[houseid][hHeal] =
		HouseInfo[houseid][hHealAmount] =
		HouseInfo[houseid][hCupboard] = 0;

		new door[11];
		HouseInfo[houseid][hPickup] = CreateDynamicPickup(19471, 1, x, y, z, HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 100.0);

		switch(HouseInfo[houseid][hDoor])
		{
			case 0: door = "Normal";
			case 1: door = "Ahþap";
			case 2: door = "Demir";
		}
		AddHouseToFile(houseid, HouseInfo[houseid][hClass], level, price, HouseInfo[houseid][hApart], x, y, z+newZ, 5000 + houseid, vw, interior);
		SendAdmMessageToPlayer(playerid, "Ev oluþturuldu [ID: %i | Level: %i | Fiyat: %i | Tip: %s [%i] ].", houseid, level, price, classes_name[clases], clases);
		return 1;
	}
	else if (CompareStrings(option, "sil"))
	{
		if (sscanf(secoption, "i", houseid))
			return SendHelpMessage(playerid, "/aev remove [ID]");

		if (houseid < 0 || houseid >= MAX_HOUSES || !HouseInfo[houseid][hID])
			return SendErrorMessage(playerid, "Ev bulunamadý.");

		if(IsValidDynamicPickup(HouseInfo[houseid][hPickup])) DestroyDynamicPickup(HouseInfo[houseid][hPickup]);

		if (IsValidDynamic3DTextLabel(HouseInfo[houseid][hLabelDDoor]))
		{
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hLabelDDoor]);
			HouseInfo[houseid][hLabelDDoor] = Text3D:INVALID_3DTEXT_ID;
		}

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `houses` WHERE `id` = %i", HouseInfo[houseid][hID]);
		mysql_tquery(dbHandle, query);

		HouseInfo[houseid][hID] = 0;
		SendAdmMessageToPlayer(playerid, "Ev [ID: %i] silindi.", houseid);
	}

	else if (CompareStrings(option, "duzenle"))
	{
		new parameters[12], arg[12];

		if (sscanf(secoption,"is[12]S()[12]", houseid, parameters, arg))
		{
			SendHelpMessage(playerid, "/aev duzenle [ID] [ayar] [deðer]");
			SendSyntaxMessage(playerid, "fiyat / seviye / tip / yaricap / int / exterior / interior / extenter / extexit");
			return 1;
		}

		if (houseid < 0 || houseid > MAX_HOUSES || !HouseInfo[houseid][hID]) return SendErrorMessage(playerid, "Ev bulunamadý.");

		if (CompareStrings(parameters, "fiyat"))
		{
			if (sscanf(arg, "i", price))		return SendHelpMessage(playerid, "/aev duzenle [ID] price [fiyat]");
			//if (price < 1 || price > 2000000)	return SendErrorMessage(playerid, "Ev fiyatý $1 ile $2000000 arasýnda olmalýdýr.");

			HouseInfo[houseid][hPrice] = price;
			SQL_SetInteger("houses", "price", HouseInfo[houseid][hPrice], HouseInfo[houseid][hID]);
			SendAdmMessageToPlayer(playerid, "Belirtilen evin [ID: %i] fiyatý deðiþtirildi: $%i.", houseid, HouseInfo[houseid][hPrice]);
		}

		else if (CompareStrings(parameters, "seviye"))
		{
			if (sscanf(arg, "i", level))	return SendHelpMessage(playerid, "/aev duzenle [ID] seviye [seviye]");
			if (level < 0 || level > 35)	return SendErrorMessage(playerid, "Ev seviyesi 0 ile 35 arasýnda olmalýdýr.");

			HouseInfo[houseid][hLevelbuy] = level;
			SQL_SetInteger("houses", "levelbuy", HouseInfo[houseid][hLevelbuy], HouseInfo[houseid][hID]);
			SendAdmMessageToPlayer(playerid, "Belirlenen evin [ID: %i] seviyesi deðiþtirildi: %i.", houseid, HouseInfo[houseid][hLevelbuy]);
		}

		else if (CompareStrings(parameters, "tip"))
		{
			if (sscanf(arg, "i", clases))	return SendHelpMessage(playerid, "/aev duzenle [ID] tip [tip]");
			if (clases < 1 || clases > 3)	return SendErrorMessage(playerid, "Tip [1 - küçük | 2 - orta | 3 - büyük.");

			HouseInfo[houseid][hClass] = clases - 1;
			SQL_SetInteger("houses", "class", HouseInfo[houseid][hClass], HouseInfo[houseid][hID]);
			SendAdmMessageToPlayer(playerid, "Belirlenen evin [ID: %i] tipi deðiþtirildi: %s [%i].", houseid, classes_name[clases-1], HouseInfo[houseid][hClass]);
		}

		else if (CompareStrings(parameters, "yaricap"))
		{
			new Float:radius;

			if (sscanf(arg, "f", radius))		return SendHelpMessage(playerid, "/aev duzenle [ID] yaricap [obje yerleþtirmek için yarýçap].");
			if (radius < 0.0 || radius > 30.0)	return SendErrorMessage(playerid, "Yarýçap 0.0 ile 30.0 arasýnda olmalýdýr.");

			HouseInfo[houseid][hFurnitureRadius] = radius;
			SQL_SetFloat("houses", "furniture_radius", HouseInfo[houseid][hFurnitureRadius], HouseInfo[houseid][hID]);
			SendAdmMessageToPlayer(playerid, "Belirlenen evin [ID: %i] radiusu deðiþtirildi: %.2f", houseid, HouseInfo[houseid][hFurnitureRadius]);
		}

		else if (CompareStrings(parameters, "int"))
		{
			new string[2048];

			for(new i = 0; i < MAX_INTERIORS; i++)
			{
				if (!AdminTeles[i][telesOn] || HouseInfo[houseid][hClass] != AdminTeles[i][telesType]) continue;
				format(string, sizeof(string), "%s\n<%i> {66FF66}%s", string, i, AdminTeles[i][telesMapName]);
			}

			if (isempty(string)) return SendErrorMessage(playerid, "Bu sýnýftaki evler için interior bulunamadý");

			SetPVarInt(playerid, "house_change", houseid);
			Dialog_Show(playerid, ChangeHouseInterior, DIALOG_STYLE_LIST, "{FFFFFF}Ev interioru", string, "Seç", "Ýptal");
		}

		else if (CompareStrings(parameters, "exterior"))
		{
			if (IsValidDynamicPickup(HouseInfo[houseid][hPickup])) DestroyDynamicPickup(HouseInfo[houseid][hPickup]);

			GetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
			HouseInfo[houseid][hPosVW] = GetWorld(playerid);
			HouseInfo[houseid][hPosInt] = GetInterior(playerid);

			SQL_SetFloat("houses", "posx", HouseInfo[houseid][hPosX], HouseInfo[houseid][hID]);
			SQL_SetFloat("houses", "posy", HouseInfo[houseid][hPosY], HouseInfo[houseid][hID]);
			SQL_SetFloat("houses", "posz", HouseInfo[houseid][hPosZ], HouseInfo[houseid][hID]);
			SQL_SetInteger("houses", "posint", HouseInfo[houseid][hPosInt], HouseInfo[houseid][hID]);
			SQL_SetInteger("houses", "posvw", HouseInfo[houseid][hPosVW], HouseInfo[houseid][hID]);

			if(!HouseInfo[houseid][hOwnerID]) {
				HouseInfo[houseid][hPickup] = CreateDynamicPickup(19471, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 100.0);
			}
			else if (HouseInfo[houseid][hLocked] == 1)
			{
				HouseInfo[houseid][hPickup] = CreateDynamicPickup(19522, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 100.0);
			}
			else if (HouseInfo[houseid][hLocked] == 0)
			{
				HouseInfo[houseid][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 100.0);
			}
			SendAdmMessageToPlayer(playerid, "Evin giriþini düzenlediniz [ID: %i].", houseid);
		}

		else if (CompareStrings(parameters, "interior"))
		{
			GetPlayerPos(playerid, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]);
			HouseInfo[houseid][hExitInt] = GetInterior(playerid);

			SQL_SetFloat("houses", "exitx", HouseInfo[houseid][hExitX], HouseInfo[houseid][hID]);
			SQL_SetFloat("houses", "exity", HouseInfo[houseid][hExitY], HouseInfo[houseid][hID]);
			SQL_SetFloat("houses", "exitz", HouseInfo[houseid][hExitZ], HouseInfo[houseid][hID]);
			SQL_SetInteger("houses", "exitint", HouseInfo[houseid][hExitInt], HouseInfo[houseid][hID]);
			SQL_SetInteger("houses", "exitvw", HouseInfo[houseid][hExitVW], HouseInfo[houseid][hID]);

			SendAdmMessageToPlayer(playerid, "Evin çýkýþýný düzenlediniz [ID: %i].", houseid);
		}

		else if (CompareStrings(parameters, "extenter"))
		{
			if (IsValidDynamicPickup(HouseInfo[houseid][hExtPickup])) DestroyDynamicPickup(HouseInfo[houseid][hExtPickup]);

			GetPlayerPos(playerid, HouseInfo[houseid][hExtX][0], HouseInfo[houseid][hExtY][0], HouseInfo[houseid][hExtZ][0]);
			HouseInfo[houseid][hExtVW][0] = GetWorld(playerid);
			HouseInfo[houseid][hExtInt][0] = GetInterior(playerid);

			SQL_SetFloat("houses", "ext_ENposX", HouseInfo[houseid][hExtX][0], HouseInfo[houseid][hID]);
			SQL_SetFloat("houses", "ext_ENposY", HouseInfo[houseid][hExtY][0], HouseInfo[houseid][hID]);
			SQL_SetFloat("houses", "ext_ENposZ", HouseInfo[houseid][hExtZ][0], HouseInfo[houseid][hID]);
			SQL_SetInteger("houses", "ext_ENint", HouseInfo[houseid][hExtInt][0], HouseInfo[houseid][hID]);
			SQL_SetInteger("houses", "ext_ENvw", HouseInfo[houseid][hExtVW][0], HouseInfo[houseid][hID]);

			HouseInfo[houseid][hExtPickup] = CreateDynamicPickup(19523, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 100.0);
			SendAdmMessageToPlayer(playerid, "Evin ek giriþini taþýdýnýz [ID: %i].", houseid);
		}

		else if (CompareStrings(parameters, "extexit"))
		{
			GetPlayerPos(playerid, HouseInfo[houseid][hExtX][1], HouseInfo[houseid][hExtY][1], HouseInfo[houseid][hExtZ][1]);
			HouseInfo[houseid][hExtInt][1] = GetInterior(playerid);

			SQL_SetFloat("houses", "ext_EXposX", HouseInfo[houseid][hExtX][1], HouseInfo[houseid][hID]);
			SQL_SetFloat("houses", "ext_EXposY", HouseInfo[houseid][hExtY][1], HouseInfo[houseid][hID]);
			SQL_SetFloat("houses", "ext_EXposZ", HouseInfo[houseid][hExtZ][1], HouseInfo[houseid][hID]);
			SQL_SetInteger("houses", "ext_EXint", HouseInfo[houseid][hExtInt][1], HouseInfo[houseid][hID]);
			SQL_SetInteger("houses", "ext_EXvw", HouseInfo[houseid][hExtVW][1], HouseInfo[houseid][hID]);

			SendAdmMessageToPlayer(playerid, "Evin ek çýkýþýný taþýdýnýz. [ID: %i].", houseid);
		}

		else
		{
			SendHelpMessage(playerid, "/aev duzenle [ID] [ayar] [deðer]");
			SendSyntaxMessage(playerid, "fiyat / seviye / tip / yaricap / int / enter / exit / extenter / extexit");
			return 1;
		}
	}

	else if (CompareStrings(option, "sat"))
	{
		if (sscanf(secoption, "i", houseid)) 									 return SendHelpMessage(playerid, "/aev sat [ID]");
		if (houseid < 0 || houseid > MAX_HOUSES - 1 || !HouseInfo[houseid][hID]) return SendErrorMessage(playerid, "Belirtilen ev bulunamadý");
		if (!HouseInfo[houseid][hOwnerID])										 return SendErrorMessage(playerid, "Bu ev satýþa çýkartýlamaz.");

		new userid = GetIDByID(HouseInfo[houseid][hOwnerID]);

		if (IsPlayerLogged(userid)) {
			GiveCash(playerid, HouseInfo[houseid][hPrice]/2/* + GetFurniturePrice(0, houseid)*/);
			if (HouseInfo[houseid][hCash] > 0) GiveCash(playerid, HouseInfo[houseid][hCash]);

			SendAdmMessageToPlayer(userid, "%s adlý yönetici evinizi sattý. Geri ödenen: $%i Ev fiyatý: $%i.", GetAccName(playerid), HouseInfo[houseid][hPrice]/2/* + GetFurniturePrice(0, houseid)*/, HouseInfo[houseid][hCash]);
		} else {
			new query[256];
			mysql_format(dbHandle, query, sizeof(query), "SELECT cash FROM `users` WHERE id=%i LIMIT 1", HouseInfo[houseid][hOwnerID]);
			new Cache:cache = mysql_query(dbHandle, query),
				money;

            cache_get_value_int(0, "cash", money);
			money += HouseInfo[houseid][hPrice]/2/*+ GetFurniturePrice(0, houseid)*/ + HouseInfo[houseid][hCash];

			mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `cash`=%i WHERE id=%i LIMIT 1", money, HouseInfo[houseid][hOwnerID]);
			mysql_query(dbHandle, query);
			cache_delete(cache);
			cache = MYSQL_INVALID_CACHE;
		}

		Sell_House(houseid);
		SendAdmMessageToPlayer(playerid, "Evi [%i] satýþa çýkardýnýz.", houseid);
	}

	else if (CompareStrings(option, "goto"))
	{
		if (!PlayerInfo[playerid][pEbc] && !CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);

		if (sscanf(secoption, "i", houseid)) 									 return SendHelpMessage(playerid, "/aev goto [ID]");
		if (houseid < 0 || houseid > MAX_HOUSES - 1 || !HouseInfo[houseid][hID]) return SendErrorMessage(playerid, "Belirtilen ev bulunamadý");

		SetPlayerPosEx(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
		SetInterior(playerid, HouseInfo[houseid][hPosInt]);
		SetWorld(playerid, HouseInfo[houseid][hPosVW]);
		SendSpecialMessage(playerid, "Eve ýþýnlandýnýz [ID: %i].", houseid);
	}

	else if (CompareStrings(option, "arkakapi")) {
		if (sscanf(secoption, "i", houseid))									 return SendHelpMessage(playerid, "/aev arkakapi [ID]");
		if (houseid < 0 || houseid > MAX_HOUSES - 1 || !HouseInfo[houseid][hID]) return SendErrorMessage(playerid, "Belirtilen ev bulunamadý.");
		if (HouseInfo[houseid][hApart])											 return SendErrorMessage(playerid, "Bu ev için arka giriþ/çýkýþ oluþturulamýyor.");

		if (pTemp[playerid][pHouseEntered] == houseid) {
			new Float: posX, Float: posY, Float: posZ;
			GetPlayerPos(playerid, posX, posY, posZ);

			HouseInfo[houseid][hExtX][0] = posX;
			HouseInfo[houseid][hExtY][0] = posY;
			HouseInfo[houseid][hExtZ][0] = posZ;

			Save_House(houseid);

			HouseInfo[houseid][hExtVW][0] = GetPlayerVirtualWorld(playerid);
			HouseInfo[houseid][hExtInt][0] = GetPlayerInterior(playerid);

			return SendAdmMessageToPlayer(playerid, "Belirtilen ev [ID: %i] için ek bir çýkýþ ayarladýnýz.", houseid);
		} else {
			new garageid = GetNearInsideGarage(playerid);
			if (garageid != -1) {
				if (HouseInfo[houseid][hID] == GarageInfo[garageid][garageHouse]) {
					if (IsValidDynamicPickup(HouseInfo[houseid][hExtPickup])) DestroyDynamicPickup(HouseInfo[houseid][hExtPickup]);

					new Float: posX, Float: posY, Float: posZ;
					GetPlayerPos(playerid, posX, posY, posZ);

					HouseInfo[houseid][hExtX][0] = posX;
					HouseInfo[houseid][hExtY][0] = posY;
					HouseInfo[houseid][hExtZ][0] = posZ;

					HouseInfo[houseid][hExtVW][0] = GetPlayerVirtualWorld(playerid);
					HouseInfo[houseid][hExtInt][0] = GetPlayerInterior(playerid);

					Save_House(houseid);

					HouseInfo[houseid][hExtPickup] = CreateDynamicPickup(19523, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 100.0);
					return SendAdmMessageToPlayer(playerid, "Belirtilen ev [ID: %i] için ek bir giriþ ayarladýnýz.", houseid);
				}
				else return SendErrorMessage(playerid, "Burada ek bir giriþ/çýkýþ oluþturamazsýnýz.");
			}
			else if (GetNearOutsideHouse(playerid, 30)) {
				if (IsValidDynamicPickup(HouseInfo[houseid][hExtPickup])) DestroyDynamicCP(HouseInfo[houseid][hExtPickup]);

				new Float: posX, Float: posY, Float: posZ;
				GetPlayerPos(playerid, posX, posY, posZ);

				HouseInfo[houseid][hExtX][0] = posX;
				HouseInfo[houseid][hExtY][0] = posY;
				HouseInfo[houseid][hExtZ][0] = posZ;

				HouseInfo[houseid][hExtVW][0] = GetPlayerVirtualWorld(playerid);
				HouseInfo[houseid][hExtInt][0] = GetPlayerInterior(playerid);

				Save_House(houseid);

				HouseInfo[houseid][hExtPickup] = CreateDynamicPickup(19523, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 100.0);
				return SendAdmMessageToPlayer(playerid, "Belirtilen ev [ID: %i] için ek bir giriþ oluþturdunuz.", houseid);
			}
			else return SendErrorMessage(playerid, "Burada ek bir giriþ/çýkýþ oluþturamazsýnýz.");
		}
	}

	else
	{
		SendHelpMessage(playerid, "/aev [ayar]");
		SendSyntaxMessage(playerid, "olustur / sil / duzenle / sat / goto / arkakapi");
	}

	return 1;
}


alias:aisyeri("abusiness");
CMD:aisyeri(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
 	{
		SendHelpMessage(playerid, "/aisyeri [olustur / sil / duzenle / goto / sat / tip / liste]");
		return 1;
	}


	if (!strcmp(option, "olustur", true))
	{
		if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
		new bizid = -1, level, price, freeze, type, name[32];

		if (sscanf(secoption, "iI(0)I(0)S()[32]",type,freeze,price,name)) return SendHelpMessage(playerid, "/aisyeri olustur [tip] {c7c7c7}[0 - satýn alýnabilir | 1 - satýn alýnamaz] [fiyat] [isim]");
		if (freeze < 0 || freeze > 1)					  	 return SendErrorMessage(playerid, "Freezing 0 ile 1 arasýnda olmalýdýr.");
		if (type > sizeof(biz_types) - 1 || type < 0) 	  	 return SendErrorMessage(playerid, "Ýþyeri tipi 0 ile %i arasýnda olmalýdýr.", sizeof(biz_types) - 1);
		if ((bizid = GetNextBizID()) == -1)				 	 return SendErrorMessage(playerid, "Maksimum iþletme sayýsýna ulaþýldý.");
		if (strfind(name, "'", true) != -1) 	return SendErrorMessage(playerid, "Ýþyeri adýnda týrnak iþareti kullanamazsýn.");

		if (!price) {
			switch(type) {
				case 0:							 price = 10000;
				case 1,2,4,5,15..19,21,22,23,24: price = 15000;
				case 3,6,7,12,20: 				 price = 25000;
				case 8,9,10,11,13: 				 price = 45000;
				case 14: 						 price = 100000;
			}
		}

		if (price < 0) return SendErrorMessage(playerid, "Ýþletme fiyatý sýfýrdan küçük olamaz.");

		level = 1;
		SetBizInterior(playerid, bizid, 12);
		
		new string[3072];
		for(new i = 0; i < MAX_INTERIORS; i++)
		{
			if (!AdminTeles[i][telesOn] || BUSSINESS_INT_TYPE != AdminTeles[i][telesType]) continue;
			format(string, sizeof(string), "%s\n<%i> {66FF66}%s", string, i, AdminTeles[i][telesMapName]);
		}
		if (isempty(string)) SendErrorMessage(playerid, "Ýþletmeler için interior bulunamadý.");

		SetPVarInt(playerid, "biz_change", 14);
		Dialog_Show(playerid, ChangeBizInterior, DIALOG_STYLE_LIST, "{FFFFFF}Ýþletme Interiorlarý", string, "Seç", "Ýptal");

		GetPlayerPos(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
		BizInfo[bizid][bizPosInt] = GetInterior(playerid);
		BizInfo[bizid][bizPosVW] = GetWorld(playerid);

		GetPlayerPos(playerid, BizInfo[bizid][bizExitX], BizInfo[bizid][bizExitY], BizInfo[bizid][bizExitZ]);
		BizInfo[bizid][bizExitInt] = GetInterior(playerid);
		BizInfo[bizid][bizExitVW] = 6000 + bizid;

		BizInfo[bizid][bizMes] = EOS;
		BizInfo[bizid][bizType] = type;
		BizInfo[bizid][bizLevelbuy] = level;
		BizInfo[bizid][bizPrice] = price;
		BizInfo[bizid][bizFreeze] = freeze;
		BizInfo[bizid][bizOwnerID] =
		BizInfo[bizid][bizLocked] =
		BizInfo[bizid][bizCash] =
		BizInfo[bizid][bizEntrance] =
		BizInfo[bizid][bizRadioOn] =
		BizInfo[bizid][bizRadio] = 0;
		BizInfo[bizid][bFurnitureRadius] = 10.0;
		

		new biztype = -1;

		switch(type)
		{
			case BIZ_PIZZA:		biztype = 0;
			case BIZ_CLUCKIN:	biztype = 1;
			case BIZ_BURGER:	biztype = 2;
			case BIZ_DONUT:		biztype = 3;
			case BIZ_STORE:		biztype = 4;
			case BIZ_BAR:		biztype = 5;
			case BIZ_PHARMACY:	biztype = 6;
			case BIZ_PAWN:	biztype = 7;
		}

		if (biztype != -1) {
			for (new i = 0; i < max_product[biztype]; i++) {
				BizInfo[bizid][bizProductPrice][i] = biz_prices[biztype][i];
			}
		}

		DebugMessage(playerid, sprintf("bizpricetype: %d", biztype));

		new modelid;
		switch(BizInfo[bizid][bizType])
		{
			case BIZ_PIZZA:			modelid = 1582;
			case BIZ_BAR:       	modelid = 1669;
			case BIZ_ATTACH:    	modelid = 19026;
			case BIZ_PHARMACY:		modelid = 11738;
			case BIZ_CLOTHES:   	modelid = 1275;
			case BIZ_LICENSE:  		modelid = 19792;
			case BIZ_GAS_STATION: 	modelid = 1650;
			case BIZ_TUNING: 		modelid = 19921;
			case BIZ_PAYNSPRAY: 	modelid = 19921;
			default:      		 	modelid = 1239;
		}

		if (BizInfo[bizid][bizOwnerID] == 0 && BizInfo[bizid][bizFreeze] == 0)
		{
			modelid = 19471;
		}

		BizInfo[bizid][bizProduct] = 400;
		BizInfo[bizid][bizBuyPrice] = price;

		format(BizInfo[bizid][bizOwner], MAX_PLAYER_NAME, "Sahipsiz");

		if (isempty(name))	format(BizInfo[bizid][bizName], 32, "%s", biz_types[type]);
		else				format(BizInfo[bizid][bizName], 32, "%s", name);

		BizInfo[bizid][bizPickUp] = CreateDynamicPickup(modelid, 1, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ], BizInfo[bizid][bizPosVW], BizInfo[bizid][bizPosInt], -1, 100.0);
		AddBizToFile(bizid, level, price, freeze, type, BizInfo[bizid][bizName], BizInfo[bizid][bizMes], BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ], BizInfo[bizid][bizExitX], BizInfo[bizid][bizExitY],
		BizInfo[bizid][bizExitZ], BizInfo[bizid][bizPosInt], BizInfo[bizid][bizPosVW], BizInfo[bizid][bizExitInt], BizInfo[bizid][bizExitVW]);
		SendSyntaxMessage(playerid, "Ýþletme oluþturuldu [ID: %i | Level: %i | Fiyat: %i | Satýn Alma: %s | Tip: %s].", bizid, level, price, (freeze) ? ("Hayýr") : ("Evet"), biz_types[BizInfo[bizid][bizType]]);

		if(BizInfo[bizid][bizType] == BIZ_AUTOSALON || BizInfo[bizid][bizType] == BIZ_BOATSALON || BizInfo[bizid][bizType] == BIZ_FLYSALON)  {
			SendHelpMessage(playerid, "Ýþletmede araç spawnlanma noktasýný belirlemek için: '/aisyeri duzenle %i aracspawn'", bizid);
		}

		Save_Business(bizid);
	}

	else if (CompareStrings(option, "sil"))
	{
		if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
		new bizid;

		if (sscanf(secoption, "i", bizid))							 return SendHelpMessage(playerid, "/aisyeri sil [ID]");
		if (bizid < 0 || bizid >= MAX_BIZ || !BizInfo[bizid][bizID]) return SendErrorMessage(playerid, "Belirtilen iþletme bulunamadý.");

		if (IsValidDynamicPickup(BizInfo[bizid][bizPickUp]))	DestroyDynamicPickup(BizInfo[bizid][bizPickUp]);

		new ownerid = GetIDByID(BizInfo[bizid][bizOwnerID]), query[256];

		if (IsPlayerLogged(ownerid))
		{
			SendSyntaxMessage(ownerid, "%s adlý yönetici iþletmenizi sildi.", GetAccName(playerid));
			SendSyntaxMessage(ownerid, "Ýþletmenizin silinmesinden kaynaklý olarak size geri ödeme yapýldý. Geri ödeme: [$%i] Ýþletme fiyatý: [$%i].", BizInfo[bizid][bizPrice], BizInfo[bizid][bizCash]);
			GiveCash(ownerid, BizInfo[bizid][bizPrice]);

			if (BizInfo[bizid][bizCash] > 0) GiveCash(ownerid, BizInfo[bizid][bizCash]);
		}
		else
		{
			new biz_cost = BizInfo[bizid][bizPrice];

			if (BizInfo[bizid][bizCash] > 0) biz_cost += BizInfo[bizid][bizCash];

			mysql_format(dbHandle, query, sizeof(query), "SELECT `cash` FROM `users` WHERE `id` = %i", BizInfo[bizid][bizOwnerID]);
			mysql_tquery(dbHandle, query, "GivePlayerBizMoney", "ii", biz_cost, BizInfo[bizid][bizOwnerID]);
		}

		RemoveAllWorkers(bizid);

		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `business` WHERE `id` = %i", BizInfo[bizid][bizID]);
		mysql_tquery(dbHandle, query);

		BizInfo[bizid][bizID] =
		BizInfo[bizid][bizOwnerID] = 0;
		SendSyntaxMessage(playerid, "Belirtilen iþletme silindi [ID: %i].", bizid);
	}

	else if (CompareStrings(option, "duzenle"))
	{
		if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
		new id, parameters[16], arg[64];

		if (sscanf(secoption, "is[16]S()[64]", id, parameters, arg))
		{
			SendHelpMessage(playerid, "/aisyeri duzenle [ID] [ayarlar] [deðer]");
			SendSyntaxMessage(playerid, "fiyat / urun / seviye / tip / isim / sahip / girisfiyati / kasa / durum / exterior / interior / int / aracspawn");
			return 1;
		}

		if (id < 0 || id >= MAX_BIZ || !BizInfo[id][bizID]) return SendErrorMessage(playerid, "Ýþletme bulunamadý.");

		if (CompareStrings(parameters, "fiyat"))
		{
			new price;

			if (sscanf(arg, "i", price)) 		return SendHelpMessage(playerid, "/aisyeri duzenle [ID] fiyat [fiyat]");
			//if (price < 2 || price > 5000000)	return SendErrorMessage(playerid, "Ýþletme fiyatý $2 ile $5000000 arasýnda olmalýdýr.");

			BizInfo[id][bizPrice] = price;
			SQL_SetInteger("business", "price", BizInfo[id][bizPrice], BizInfo[id][bizID]);
			SendSyntaxMessage(playerid, "Ýþletmenin satýþ fiyatý deðiþtirildi [ID: %i] Yeni fiyat: $%i.", id, BizInfo[id][bizPrice]);
		}
		else if (CompareStrings(parameters, "aracspawn"))
		{
			new Float: posX, Float: posY, Float: posZ, Float: posR;
			GetPlayerPos(playerid, posX, posY, posZ);
			GetPlayerFacingAngle(playerid, posR);

			if (GetDistanceBetweenPoints(posX, posY, posZ, BizInfo[id][bizPosX], BizInfo[id][bizPosY], BizInfo[id][bizPosZ]) > 30.0)
				return SendErrorMessage(playerid, "Belirlenen nokta iþletmeden çok uzak!");

			GetPlayerPos(playerid, BizInfo[id][bizSpawn][0], BizInfo[id][bizSpawn][1], BizInfo[id][bizSpawn][2]);
			BizInfo[id][bizSpawnInt] = GetInterior(playerid);
			BizInfo[id][bizSpawnVW] = GetWorld(playerid);
			BizInfo[id][bizSpawn][3] = posR;

			SQL_SetFloat("business", "spawnX", BizInfo[id][bizSpawn][0], BizInfo[id][bizID]);
			SQL_SetFloat("business", "spawnY", BizInfo[id][bizSpawn][1], BizInfo[id][bizID]);
			SQL_SetFloat("business", "spawnZ", BizInfo[id][bizSpawn][2], BizInfo[id][bizID]);
			SQL_SetFloat("business", "spawnR", BizInfo[id][bizSpawn][3], BizInfo[id][bizID]);
			SQL_SetInteger("business", "spawnInt", BizInfo[id][bizSpawnInt], BizInfo[id][bizID]);
			SQL_SetInteger("business", "spawnVW", BizInfo[id][bizSpawnVW], BizInfo[id][bizID]);

			SendSyntaxMessage(playerid, "Ýþletmedeki satýn alýmdan sonra aracýn spawnlanacaðý noktayý deðiþtirdiniz [ID: %i].", id);
		}

		else if (CompareStrings(parameters, "urun"))
		{
			if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
			new products;

			if (sscanf(arg, "i", products)) 	return SendHelpMessage(playerid, "/aisyeri duzenle [ID] urun [miktar]");
			if (products < 1 || products > 500)	return SendErrorMessage(playerid, "Ýþletme ürünleri 1 ile 500 arasýnda olabilir.");

			BizInfo[id][bizProduct] = products;
			SQL_SetInteger("business", "product", BizInfo[id][bizProduct], BizInfo[id][bizID]);
			SendSyntaxMessage(playerid, "Belirtilen iþletmenin ürün miktarý deðiþtirildi. [ID: %i] %i.", id, BizInfo[id][bizProduct]);
		}

		else if (CompareStrings(parameters, "sahip"))
		{
			if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
			new userid;

			if (sscanf(arg, "i", userid)) 	return SendHelpMessage(playerid, "/aisyeri duzenle[ID] sahip [yeni sahip]");
			if (!IsPlayerLoggedIn(userid))   return SendErrorMessage(playerid, "Kiþi oyunda deðil.");

			BizInfo[id][bizOwnerID] = PlayerInfo[userid][pID];

            format(BizInfo[id][bizOwner], MAX_PLAYER_NAME, GetName(userid));

			SQL_SetInteger("business", "owner", BizInfo[id][bizOwnerID], BizInfo[id][bizID]);
			SendSyntaxMessage(playerid, "Belirtilen iþletmenin sahibi deðiþtirildi. [ID: %i] %i.", id, BizInfo[id][bizOwnerID]);
		}

		else if (CompareStrings(parameters, "seviye"))
		{
			if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
			new level;

			if (sscanf(arg, "i", level))	return SendHelpMessage(playerid, "/aisyeri duzenle [ID] seviye [seviye]");
			if (level < 0 || level > 35)	return SendErrorMessage(playerid, "Seviye 0 ile 35 arasýnda olmalýdýr.");

			BizInfo[id][bizLevelbuy] = level;
			SQL_SetInteger("business", "levelbuy", BizInfo[id][bizLevelbuy], BizInfo[id][bizID]);
			SendSyntaxMessage(playerid, "Belirtilen iþletmenin satýn alma seviyesi deðiþtirildi [ID: %i]. Seviye: %i.", id, BizInfo[id][bizLevelbuy]);
		}

		else if (CompareStrings(parameters, "tip"))
		{
			if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
			new type;

			if (sscanf(arg, "i", type)) 					return SendHelpMessage(playerid, "/aisyeri duzenle [ID] tip [tip]");
			if (type < 0 || type > sizeof(biz_types))	return SendErrorMessage(playerid, "Ýþletme tipi 0 ile %i arasýnda olmalýdýr.", sizeof(biz_types));

		    new biztype = -1;

		    switch(type)
		    {
			    case BIZ_PIZZA:		biztype = 0;
			    case BIZ_CLUCKIN:	biztype = 1;
			    case BIZ_BURGER:	biztype = 2;
			    case BIZ_DONUT:		biztype = 3;
			    case BIZ_STORE:		biztype = 4;
			    case BIZ_BAR:		biztype = 5;
			    case BIZ_PHARMACY:	biztype = 6;
			    case BIZ_PAWN:	biztype = 7;
		    }

		    if (biztype != -1) {
			    for (new i = 0; i < max_product[biztype]; i++) {
				    BizInfo[id][bizProductPrice][i] = biz_prices[biztype][i];
			    }
		    }

			BizInfo[id][bizType] = type;
			SQL_SetInteger("business", "type", BizInfo[id][bizType], BizInfo[id][bizID]);
			SendSyntaxMessage(playerid, "Ýþletmenin tipini deðiþtirdiniz [ID: %i]. Yeni Tip: %s.", id, biz_types[BizInfo[id][bizType]]);
		}

		else if (CompareStrings(parameters, "isim"))
		{
			if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
			new name[32];

			if (sscanf(arg, "s[32]", name))	return SendHelpMessage(playerid, "/aisyeri duzenle [ID] isim [yazý]");
			if (strlen(name) > 30)			return SendErrorMessage(playerid, "Ýþletme adý maksimum 30 karakter olmalýdýr.");
			if (CheckTextDrawString(name))	return SendErrorMessage(playerid, "Ýþletme adýnda geçersiz karakterler olmamalýdýr. '~'.");

			format(BizInfo[id][bizName], 32, "%s", name);
			SQL_SetString("business", "name", BizInfo[id][bizName], BizInfo[id][bizID]);
			SendSyntaxMessage(playerid, "Ýþletmenin adýný deðiþtirdiniz [ID: %i]. Yeni Ad: %s.", id, BizInfo[id][bizName]);
		}

		else if (CompareStrings(parameters, "girisfiyati"))
		{
			if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
			new fee;

			if (sscanf(arg, "i", fee))		return SendHelpMessage(playerid, "/aisyeri duzenle [ID] girisfiyati [fiyat]");
			if (fee < 0 || fee > 100)		return SendErrorMessage(playerid, "Giriþ fiyatý 0 ile 100 arasýnda olmalýdýr.");

			BizInfo[id][bizEntrance] = fee;
			SQL_SetInteger("business", "entrance", BizInfo[id][bizEntrance], BizInfo[id][bizID]);
			SendSyntaxMessage(playerid, "Ýþletmenin giriþ fiyatýný deðiþtirdiniz [ID: %i]. Yeni Fiyat: $%i.", id, BizInfo[id][bizEntrance]);
		}

		else if (CompareStrings(parameters, "kasa"))
		{
			if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
			new cash;

			if (sscanf(arg, "i", cash))		return SendHelpMessage(playerid, "/aisyeri duzenle [ID] kasa [para]");
			if (cash < 0 || cash > 5000000)	return SendErrorMessage(playerid, "Para miktarý $0 ile $5000000 arasýnda olmalýdýr.");

			BizInfo[id][bizCash] = cash;
			SQL_SetInteger("business", "cash", BizInfo[id][bizCash], BizInfo[id][bizID]);
			SendSyntaxMessage(playerid, "Ýþletmenin kasasýnda bulunan parayý düzenlediniz. [ID: %i] Yeni Miktar: $%i.", id, BizInfo[id][bizCash]);
		}

		else if (CompareStrings(parameters, "durum"))
		{
			if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
			new freeze;

			if (sscanf(arg, "i", freeze))	return SendHelpMessage(playerid, "/aisyeri duzenle [ID] durum [durum]");
			if (freeze < 0 || freeze > 1)	return SendErrorMessage(playerid, "Satýþ durumu 0 ile 1 olmalýdýr.");

			BizInfo[id][bizFreeze] = freeze;
			SQL_SetInteger("business", "freeze", BizInfo[id][bizFreeze], BizInfo[id][bizID]);

			new freeze_naming[4];

			if (BizInfo[id][bizFreeze]) format(freeze_naming, sizeof(freeze_naming), "Hayýr");
			else 						format(freeze_naming, sizeof(freeze_naming), "Evet");

			SendSyntaxMessage(playerid, "Ýþletmenin satýn alýnma durumunu deðiþtirdiniz. [ID: %i] Yeni: %s.", id, freeze_naming);
		}

		else if (CompareStrings(parameters, "exterior"))
		{
			if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
			if (IsValidDynamicPickup(BizInfo[id][bizPickUp])) DestroyDynamicPickup(BizInfo[id][bizPickUp]);

			GetPlayerPos(playerid, BizInfo[id][bizPosX], BizInfo[id][bizPosY], BizInfo[id][bizPosZ]);
			BizInfo[id][bizPosInt] = GetInterior(playerid);
			BizInfo[id][bizPosVW] = GetWorld(playerid);

			UpdateBusinessDoor(id);

		    new modelid;
		    switch(BizInfo[id][bizType])
		    {
			    case BIZ_PIZZA:		modelid = 1582;
			    case BIZ_BAR:       modelid = 1484;
			    case BIZ_ATTACH:    modelid = 2710;
			    case BIZ_PHARMACY:	modelid = 1241;
			    case BIZ_CLOTHES:   modelid = 1275;
			    case BIZ_LICENSE:   modelid = 1581;
			    case BIZ_GAS_STATION: modelid = 1650;
			    case BIZ_TUNING: modelid = 3096;
			    case BIZ_PAYNSPRAY: modelid = 3096;
			    default:       modelid = 1272;
		    }

		    if (BizInfo[id][bizOwnerID] == 0 && BizInfo[id][bizFreeze] == 0)
		    {
			modelid = 19471;
		    }

			BizInfo[id][bizPickUp] = CreateDynamicPickup(modelid, 1, BizInfo[id][bizPosX], BizInfo[id][bizPosY], BizInfo[id][bizPosZ], BizInfo[id][bizPosVW], BizInfo[id][bizPosInt], -1, 100.0);

			SQL_SetFloat("business", "posx", BizInfo[id][bizPosX], BizInfo[id][bizID]);
			SQL_SetFloat("business", "posy", BizInfo[id][bizPosY], BizInfo[id][bizID]);
			SQL_SetFloat("business", "posz", BizInfo[id][bizPosZ], BizInfo[id][bizID]);
			SQL_SetInteger("business", "posvw", BizInfo[id][bizPosVW], BizInfo[id][bizID]);
			SQL_SetInteger("business", "posint", BizInfo[id][bizPosInt], BizInfo[id][bizID]);

			SendSyntaxMessage(playerid, "Ýþletmenin exterior noktasýný deðiþtirdiniz [ID: %i].", id);
		}

		else if (CompareStrings(parameters, "interior"))
		{
			if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
			GetPlayerPos(playerid, BizInfo[id][bizExitX], BizInfo[id][bizExitY], BizInfo[id][bizExitZ]);
			BizInfo[id][bizExitInt] = GetInterior(playerid);
			//BizInfo[id][bizExitVW] = GetWorld(playerid);

			SQL_SetFloat("business", "exitx", BizInfo[id][bizExitX], BizInfo[id][bizID]);
			SQL_SetFloat("business", "exity", BizInfo[id][bizExitY], BizInfo[id][bizID]);
			SQL_SetFloat("business", "exitz", BizInfo[id][bizExitZ], BizInfo[id][bizID]);
			SQL_SetInteger("business", "exitint", BizInfo[id][bizExitInt], BizInfo[id][bizID]);
			SQL_SetInteger("business", "exitvw", BizInfo[id][bizExitVW], BizInfo[id][bizID]);

			SendSyntaxMessage(playerid, "Ýþletmenin interior noktasýný deðiþtirdiniz [ID: %i].", id);
		}

		else if (CompareStrings(parameters, "int"))
		{
			if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
			new string[3072];

			for(new i = 0; i < MAX_INTERIORS; i++)
			{
				if (!AdminTeles[i][telesOn] || BUSSINESS_INT_TYPE != AdminTeles[i][telesType]) continue;
				format(string, sizeof(string), "%s\n<%i> {66FF66}%s", string, i, AdminTeles[i][telesMapName]);
			}

			if (isempty(string)) SendErrorMessage(playerid, "Ýþletmeler için interior bulunamadý.");

			SetPVarInt(playerid, "biz_change", id);
			Dialog_Show(playerid, ChangeBizInterior, DIALOG_STYLE_LIST, "{FFFFFF}Ýþletme Interiorlarý", string, "Seç", "Ýptal");
		}

		else
		{
			SendHelpMessage(playerid, "/aisyeri duzenle [ID] [ayar] [deðer]");
			SendSyntaxMessage(playerid, "fiyat / urun / seviye / tip / isim / girisfiyati / kasa / durum / interior / exterior / int");
			return 1;
		}
	}

	else if (CompareStrings(option, "sat"))
	{
		if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
		new bizid;

		if (sscanf(secoption, "i", bizid))								return SendHelpMessage(playerid, "/aisyeri sat [ID]");
		if (bizid < 0 || bizid > MAX_BIZ - 1 || !BizInfo[bizid][bizID])	return SendErrorMessage(playerid, "Belirtilen iþletme bulunamadý.");
		if (!BizInfo[bizid][bizOwnerID])								return SendErrorMessage(playerid, "Bu iþletme zaten satýlýk.");

		new ownerid = GetIDByID(BizInfo[bizid][bizOwnerID]);

		if (IsPlayerLogged(ownerid))
		{
			SendSyntaxMessage(ownerid, "%s adlý yönetici iþletmenizi sattý.", GetAccName(playerid));
			SendSyntaxMessage(ownerid, "Ýþletmenizin satýþýyla birlikte tarafýnýza geri ödeme yapýldý. Geri ödeme: [$%i] Ýþletme fiyatý: [$%i].", BizInfo[bizid][bizPrice], BizInfo[bizid][bizCash]);

			GiveCash(ownerid, BizInfo[bizid][bizPrice]);
			if (BizInfo[bizid][bizCash] > 0) GiveCash(ownerid, BizInfo[bizid][bizCash]);
		}
		else
		{
			new biz_cost = BizInfo[bizid][bizPrice];

			if (BizInfo[bizid][bizCash] > 0) biz_cost += BizInfo[bizid][bizCash];

			new query[256];
			mysql_format(dbHandle, query, sizeof(query), "SELECT `cash` FROM `users` WHERE `id` = %i", BizInfo[bizid][bizOwnerID]);
			mysql_tquery(dbHandle, query, "GivePlayerBizMoney", "ii", biz_cost, BizInfo[bizid][bizOwnerID]);
		}

		Sell_Business(bizid);
		SendSyntaxMessage(playerid, "Belirtilen iþletme satýldý [ID: %i].", bizid);
	}

	else if (CompareStrings(option, "goto"))
	{
		new bizid;

		if (sscanf(secoption, "i", bizid))								return SendHelpMessage(playerid, "/aisyeri goto [ID]");
		if (bizid < 0 || bizid > MAX_BIZ - 1 || !BizInfo[bizid][bizID])	return SendErrorMessage(playerid, "Belirtilen iþletme bulunamadý.");

		SetPlayerPosEx(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
		SetInterior(playerid, BizInfo[bizid][bizPosInt]);
		SetWorld(playerid, BizInfo[bizid][bizPosVW]);
		SendSpecialMessage(playerid, "Belirtilen iþletmeye ýþýnlandýnýz [ID: %i].", bizid);
	}

	else if (CompareStrings(option, "tip"))
	{
		new dialog_header[64] = "{FFFFFF}Ýsim\t{FFFFFF}ID\n", dialog_body[1024];

		format(dialog_body, sizeof(dialog_body), "%s", dialog_header);

		for(new i = 0; i != sizeof(biz_types); i++)
		{
			format(dialog_body, sizeof(dialog_body), "%s%s\t%i\n", dialog_body, biz_types[i], i);
		}

		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Ýþletme Tipleri", dialog_body, "Kapat", "");
	}

	else if (CompareStrings(option, "liste"))
	{
		pTemp[playerid][pDialogList] = 0;
		DisplayBizList(playerid);
	}

	else
	{
		SendHelpMessage(playerid, "/aisyeri [olustur / sil / duzenle / goto / sat / tip / liste]");
	}
	return 1;
}

CMD:aapartman(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/aapartman [olustur / sil / int / giris / cikis / goto]");
		return 1;
	}

	if (CompareStrings(option, "olustur"))
	{
		new apart;

		if ((apart = GetNextApartID()) == -1)	return SendErrorMessage(playerid, "Maksimum apartman sayýsýna ulaþýldý.");

		GetPlayerPos(playerid, ApartInfo[apart][aPosX], ApartInfo[apart][aPosY], ApartInfo[apart][aPosZ]);
		ApartInfo[apart][aPosInt] = GetInterior(playerid);
		ApartInfo[apart][aPosVW] = GetWorld(playerid);
		ApartInfo[apart][aApartOn] = 1;
		ApartInfo[apart][aExitVW] = apart + 1000;

		AddApartToFile(apart, ApartInfo[apart][aPosX], ApartInfo[apart][aPosY], ApartInfo[apart][aPosZ], ApartInfo[apart][aPosInt], ApartInfo[apart][aPosVW]);
		SetAparmentInterior(playerid, apart, 1);

        ApartInfo[apart][aPickup] = CreateDynamicPickup(1314, 1, ApartInfo[apart][aPosX], ApartInfo[apart][aPosY], ApartInfo[apart][aPosZ], ApartInfo[apart][aPosVW], ApartInfo[apart][aPosInt], -1, 50.0);
	}

	else if (CompareStrings(option, "sil"))
	{
		new id;

		if ((id = GetNearApartmentOutside(playerid)) == -1)	return SendErrorMessage(playerid, "Yakýnýnýzda apartman bulunmuyor.");

		DestroyDynamicPickup(ApartInfo[id][aPickup]);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `apartment` WHERE `id` = %i", ApartInfo[id][aID]);
		mysql_tquery(dbHandle, query, "OnApartRemove", "i", id);

		SendSyntaxMessage(playerid, "Apartman [ID: %i] silindi.", id);
	}

	else if (CompareStrings(option, "int"))
	{
		new id, interior;

		if ((id = GetNearApartmentOutside(playerid)) == -1)	return SendErrorMessage(playerid, "Yakýnýnýzda apartman bulunmuyor.");
		if (sscanf(secoption, "i", interior))
		{
			SendHelpMessage(playerid, "/abina int [1-17]");
			SendSyntaxMessage(playerid, "[1] Ghetto Hotel | [2] Ghetto Hotel(2) | [3] Hotel | [4] Hotel(2) | [5] Apartment 1");
			SendSyntaxMessage(playerid, "[6] Apartment 2 | [7] Apartment 3 | [8] Apartment 4");
			SendSyntaxMessage(playerid, "[9] Apartment 5 | [10] Apartment 6 | [11] Apartment 7 | [12] Apartment 8");
			SendSyntaxMessage(playerid, "[13] Apartment 9 | [14] Apartment 10 | [15] Entrance | [16] Motel | [17] Motel (2)");
			return 1;
		}
		if (interior < 1 || interior > 17) return SendErrorMessage(playerid, "Interior ID 1 ile 17 arasýnda olmalýdýr.");

		SetAparmentInterior(playerid, id, interior);
	}

	else if (CompareStrings(option, "giris"))
	{
		new apartid;

		if (sscanf(secoption, "i", apartid))											return SendHelpMessage(playerid, "/aapartman giris [ID]");
		if (apartid < 0 || apartid > MAX_APART - 1 || !ApartInfo[apartid][aApartOn])	return SendErrorMessage(playerid, "Apartman bulunamadý.");

		if (IsValidDynamicCP(ApartInfo[apartid][aPickup]))	DestroyDynamicCP(ApartInfo[apartid][aPickup]);

		GetPlayerPos(playerid, ApartInfo[apartid][aPosX], ApartInfo[apartid][aPosY], ApartInfo[apartid][aPosZ]);
		ApartInfo[apartid][aPosInt] = GetInterior(playerid);
		ApartInfo[apartid][aPosVW] = GetWorld(playerid);

		SQL_SetFloat("apartment", "posx", ApartInfo[apartid][aPosX], ApartInfo[apartid][aID]);
		SQL_SetFloat("apartment", "posy", ApartInfo[apartid][aPosY], ApartInfo[apartid][aID]);
		SQL_SetFloat("apartment", "posz", ApartInfo[apartid][aPosZ], ApartInfo[apartid][aID]);
		SQL_SetInteger("apartment", "posint", ApartInfo[apartid][aPosInt], ApartInfo[apartid][aID]);
		SQL_SetInteger("apartment", "posvw", ApartInfo[apartid][aPosVW], ApartInfo[apartid][aID]);

		ApartInfo[apartid][aPickup] = ApartInfo[apartid][aPickup] = CreateDynamicPickup(1314, 1, ApartInfo[apartid][aPosX], ApartInfo[apartid][aPosY], ApartInfo[apartid][aPosZ], ApartInfo[apartid][aPosVW], ApartInfo[apartid][aPosInt], -1, 50.0);
		SendSyntaxMessage(playerid, "Apartman giriþi deðiþtirildi [ID: %i].", apartid);
	}

	else if (CompareStrings(option, "cikis"))
	{
		new apartid;

		if (sscanf(secoption, "i", apartid)) 											return SendHelpMessage(playerid, "/aapartman cikis [ID]");
		if (apartid < 0 || apartid > MAX_APART - 1 || !ApartInfo[apartid][aApartOn])	return SendErrorMessage(playerid, "Apartman bulunamadý.");

		GetPlayerPos(playerid, ApartInfo[apartid][aExitX], ApartInfo[apartid][aExitY], ApartInfo[apartid][aExitZ]);
		ApartInfo[apartid][aExitInt] = GetInterior(playerid);
		//ApartInfo[apartid][aExitVW] = GetWorld(playerid);

		SQL_SetFloat("apartment", "exitx", ApartInfo[apartid][aExitX], ApartInfo[apartid][aID]);
		SQL_SetFloat("apartment", "exity", ApartInfo[apartid][aExitY], ApartInfo[apartid][aID]);
		SQL_SetFloat("apartment", "exitz", ApartInfo[apartid][aExitZ], ApartInfo[apartid][aID]);
		SQL_SetInteger("apartment", "exitint", ApartInfo[apartid][aExitInt], ApartInfo[apartid][aID]);
		SQL_SetInteger("apartment", "exitvw", ApartInfo[apartid][aExitVW], ApartInfo[apartid][aID]);

		SendSyntaxMessage(playerid, "Apartman giriþi deðiþtirildi [ID: %i].", apartid);
	}

	else if (CompareStrings(option, "goto"))
	{
		new apartid;

		if (sscanf(secoption, "i", apartid))										 return SendHelpMessage(playerid, "/aapartman goto [ID]");
		if (apartid < 0 || apartid > MAX_APART - 1 || !ApartInfo[apartid][aApartOn]) return SendErrorMessage(playerid, "Apartman bulunamadý");

		SetPlayerPosEx(playerid, ApartInfo[apartid][aPosX], ApartInfo[apartid][aPosY], ApartInfo[apartid][aPosZ]);
		SetInterior(playerid, ApartInfo[apartid][aPosInt]);
		SetWorld(playerid, ApartInfo[apartid][aPosVW]);
		SendSpecialMessage(playerid, "Belirtilen apartmana ýþýnlandýnýz [ID: %i].", apartid);
	}

	else
	{
		SendHelpMessage(playerid, "/aapartman [olustur/sil/int/giris/cikis/goto]");
	}

	return 1;
}

CMD:jetpack(playerid, params[])
{
    if (!CheckAdmin(playerid, ADMIN_LEVEL_3)) 			return SendNotAdmin(playerid);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	return 1;
}

alias:setadminname("setstaffname", "adminisimdegistir");
CMD:setadminname(playerid, params[])
{
	new userid, newname[MAX_PLAYER_NAME];

    if (!CheckAdmin(playerid, ADMIN_LEVEL_3)) 			return SendNotAdmin(playerid);
	if (sscanf(params,"us[36]", userid, newname))		return SendHelpMessage(playerid, "/setname [ID/Karakter Adý] [Yeni Admin Adý]");
	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
    if (!IsValidPlayerName(newname))					return SendErrorMessage(playerid, "Geçersiz isim formatý.");
	if (strlen(newname) < 4 || strlen(newname) > 36)	return SendErrorMessage(playerid, "Belirtilen ad minimum 4, maksimum 36 karakter olmalýdýr.");

	new query[256];
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `accounts` WHERE `login` = '%e'", newname);
	mysql_tquery(dbHandle, query, "OnAdminChangeNickName", "iis", playerid, userid, newname);
	return 1;
}

alias:setname("isimdegistir");
CMD:setname(playerid, params[])
{
	new userid, newname[MAX_PLAYER_NAME];

    if (!CheckAdmin(playerid, ADMIN_LEVEL_3) && PlayerInfo[playerid][pFMAdmin] < 1) 			return SendNotAdmin(playerid);
	if (sscanf(params,"us[24]", userid, newname))		return SendHelpMessage(playerid, "/setname [ID/Karakter Adý] [Yeni Ad]");
	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
    if (!IsValidPlayerName(newname))					return SendErrorMessage(playerid, "Geçersiz isim formatý.");
	if (strlen(newname) < 4 || strlen(newname) > 24)	return SendErrorMessage(playerid, "Belirtilen ad minimum 4, maksimum 24 karakter olmalýdýr.");

	new query[256];
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%e'", newname);
	mysql_tquery(dbHandle, query, "OnAdminChangeName", "iis", playerid, userid, newname);
	return 1;
}

alias:tracenumber("numarasorgu");
CMD:tracenumber(playerid, params[])
{
	new number;

    if (!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pFMAdmin] < 1) 			return SendNotAdmin(playerid);
	if (sscanf(params,"i", number))		return SendHelpMessage(playerid, "/tracenumber [numara]");

	new query[256];
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `number` = '%i'", number);
	mysql_tquery(dbHandle, query, "OnAdminTraceNumber", "ii", playerid, number);
	return 1;
}

CMD:abina(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/abina [olustur / sil / birlik / arac / yazi / giris / cikis / goto / gps]");
		return 1;
	}

	if (CompareStrings(option, "olustur"))
	{
		new enterid = -1;

		for(new i = 0; i < MAX_ENTRANCE; i++)
		{
			if (EntranceInfo[i][entranceOn])	continue;

			enterid = i;
			break;
		}

		if (enterid == -1)	return SendErrorMessage(playerid, "Maksimum giriþ/çýkýþ sayýsýna ulaþtýnýz.");

		GetPlayerPos(playerid, EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ]);
		GetPlayerFacingAngle(playerid, EntranceInfo[enterid][eEnterA]);

	    EntranceInfo[enterid][eEnterInt] = GetInterior(playerid);
	    EntranceInfo[enterid][eEnterVW] = GetWorld(playerid);

	    GetPlayerPos(playerid, EntranceInfo[enterid][eExitX], EntranceInfo[enterid][eExitY], EntranceInfo[enterid][eExitZ]);
		GetPlayerFacingAngle(playerid, EntranceInfo[enterid][eExitA]);

	    EntranceInfo[enterid][eExitInt] = GetInterior(playerid);
	    EntranceInfo[enterid][eExitVW] = 1000 + enterid;
   		EntranceInfo[enterid][eEnterPickup] = CreateDynamicPickup(1239, 1, EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ], EntranceInfo[enterid][eEnterVW], EntranceInfo[enterid][eEnterInt], -1, 100.0);
		EntranceInfo[enterid][eExitPickup] = CreateDynamicPickup(1239, 1, EntranceInfo[enterid][eExitX], EntranceInfo[enterid][eExitY], EntranceInfo[enterid][eExitZ], EntranceInfo[enterid][eExitVW], EntranceInfo[enterid][eExitInt], -1, 100.0);
		EntranceInfo[enterid][entranceOn] = 1;
		EntranceInfo[enterid][eLocked] = 0;

    	new query[156];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `entrance` (`enterx`,`entery`,`enterz`,`entera`,`entervw`,`enterint`) VALUES (%f,%f,%f,%f,%i,%i)", EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ], EntranceInfo[enterid][eEnterA], EntranceInfo[enterid][eEnterVW], EntranceInfo[enterid][eEnterInt]);
		mysql_tquery(dbHandle, query, "OnInsertEntrance", "i", enterid);

    	SendSyntaxMessage(playerid, "Yeni giriþ/çýkýþ oluþturuldu [ID: %i].", enterid);
		return 1;
	}

	else if (CompareStrings(option, "sil"))
	{
		new enterid;

		if (sscanf(secoption, "i", enterid))	return SendHelpMessage(playerid, "/abina sil [ID]");
		if (!EntranceInfo[enterid][entranceOn])	return SendErrorMessage(playerid, "Belirtilen giriþ/çýkýþ bulunamadý.");

		if (IsValidDynamicPickup(EntranceInfo[enterid][eEnterPickup]))	DestroyDynamicPickup(EntranceInfo[enterid][eEnterPickup]);
		if (IsValidDynamicPickup(EntranceInfo[enterid][eExitPickup]))	DestroyDynamicPickup(EntranceInfo[enterid][eExitPickup]);

		EntranceInfo[enterid][entranceOn] = 0;

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `entrance` WHERE `id` = %i", EntranceInfo[enterid][eID]);
		mysql_tquery(dbHandle, query);

		SendSyntaxMessage(playerid, "Belirtilen giriþ/çýkýþ [ID: %i] silindi.", enterid);
		return 1;
	}

	else if (CompareStrings(option, "birlik"))
	{
		new enterid, faction = 0;

		if (sscanf(secoption, "iI(0)", enterid, faction))										 return SendHelpMessage(playerid, "/abina birlik [ID giriþ/çýkýþ] {c7c7c7}[Birlik ID]");
		if (faction < 0 || faction >= MAX_FACTIONS || (faction != 0 && !Factions[faction][fON])) return SendErrorMessage(playerid, "Birlik bulunamadý.");
		if (!EntranceInfo[enterid][entranceOn])													 return SendErrorMessage(playerid, "Giriþ/çýkýþ bulunamadý.");

		EntranceInfo[enterid][eFaction] = faction;
		SQL_SetInteger("entrance", "faction", EntranceInfo[enterid][eFaction], EntranceInfo[enterid][eID]);
		SendSyntaxMessage(playerid, "Birlik giriþ/çýkýþýný deðiþtirdiniz [ID: %i]. Yeni Deðer: %i.", enterid, EntranceInfo[enterid][eFaction]);
		return 1;
	}

	else if (CompareStrings(option, "arac"))
	{
		new enterid, vehicle;

		if (sscanf(secoption, "ii", enterid, vehicle))	return SendHelpMessage(playerid, "/abina arac [ID giriþ/çýkýþ] [araç geçiþi (0 - kapalý | 1 - açýk)]");
		if (vehicle < 0 || vehicle > 1)					return SendErrorMessage(playerid, "Deðer 0 veya 1 olmalýdýr.");
		if (!EntranceInfo[enterid][entranceOn])			return SendErrorMessage(playerid, "Belirtilen giriþ/çýkýþ bulunamadý");

		EntranceInfo[enterid][eVehicle] = vehicle;
		SQL_SetInteger("entrance", "vehicle", EntranceInfo[enterid][eVehicle], EntranceInfo[enterid][eID]);

		new entrance_state[16];

		if (EntranceInfo[enterid][eVehicle])	format(entrance_state, sizeof(entrance_state), "izin verildi");
		else									format(entrance_state, sizeof(entrance_state), "yasaklandý");

		SendSyntaxMessage(playerid, "Belirtilen iþletmenin araç giriþ/çýkýþ yetkisi düzenlendi. [ID: %i] Yeni Deðer: %s.", enterid, entrance_state);
		return 1;
	}

	else if (CompareStrings(option, "yazi"))
	{
		new enterid, text[128];

		if (sscanf(secoption, "is[128]", enterid, text)) return SendHelpMessage(playerid, "/abina yazi [ID giriþ/çýkýþ] [yazý]");
		if (!EntranceInfo[enterid][entranceOn])			 return SendErrorMessage(playerid, "Belirtilen giriþ/çýkýþ bulunamadý.");
		if (strlen(text) < 1 || strlen(text) > 127)		 return SendErrorMessage(playerid, "Belirtilen yazý minimum 1, maksimum 127 karakter olmalýdýr.");

		format(EntranceInfo[enterid][eText], 128, "%s", text);
		SQL_SetString("entrance", "text", EntranceInfo[enterid][eText], EntranceInfo[enterid][eID]);
		SendSyntaxMessage(playerid, "Belirtilen giriþ/çýkýþýn yazýsý deðiþtirildi [ID: %i]. Yeni deðer: %s.", enterid, EntranceInfo[enterid][eText]);
		return 1;
	}

	else if (CompareStrings(option, "giris"))
	{
		new enterid;

		if (sscanf(secoption, "i", enterid))	return SendHelpMessage(playerid, "/abina giris [ID giriþ/çýkýþ]");
		if (!EntranceInfo[enterid][entranceOn])	return SendErrorMessage(playerid, "Belirtilen giriþ/çýkýþ bulunamadý.");

		GetPlayerPos(playerid, EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ]);
		GetPlayerFacingAngle(playerid, EntranceInfo[enterid][eEnterA]);

		EntranceInfo[enterid][eEnterInt] = GetInterior(playerid);
		EntranceInfo[enterid][eEnterVW] = GetWorld(playerid);

		if (IsValidDynamicPickup(EntranceInfo[enterid][eEnterPickup]))	DestroyDynamicPickup(EntranceInfo[enterid][eEnterPickup]);

		EntranceInfo[enterid][eEnterPickup] = CreateDynamicPickup(1239, 1, EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ], EntranceInfo[enterid][eEnterVW], EntranceInfo[enterid][eEnterInt], -1, 100.0);

		SQL_SetFloat("entrance", "enterx", EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eID]);
		SQL_SetFloat("entrance", "entery", EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eID]);
		SQL_SetFloat("entrance", "enterz", EntranceInfo[enterid][eEnterZ], EntranceInfo[enterid][eID]);
		SQL_SetFloat("entrance", "entera", EntranceInfo[enterid][eEnterA], EntranceInfo[enterid][eID]);
		SQL_SetInteger("entrance", "entervw", EntranceInfo[enterid][eEnterVW], EntranceInfo[enterid][eID]);
		SQL_SetInteger("entrance", "enterint", EntranceInfo[enterid][eEnterInt], EntranceInfo[enterid][eID]);

		SendSyntaxMessage(playerid, "Belirtilen yerin giriþ pozisyonu deðiþtirildi. [ID: %i].", enterid);
		return 1;
	}

	else if (CompareStrings(option, "cikis"))
	{
		new enterid;

		if (sscanf(secoption, "i", enterid))	return SendHelpMessage(playerid, "/abina cikis [ID giriþ/çýkýþ]");
		if (!EntranceInfo[enterid][entranceOn])	return SendErrorMessage(playerid, "Belirtilen giriþ/çýkýþ bulunamadý.");

		GetPlayerPos(playerid, EntranceInfo[enterid][eExitX], EntranceInfo[enterid][eExitY], EntranceInfo[enterid][eExitZ]);
		GetPlayerFacingAngle(playerid, EntranceInfo[enterid][eExitA]);

		EntranceInfo[enterid][eExitInt] = GetInterior(playerid);
		EntranceInfo[enterid][eExitVW] = GetWorld(playerid);

		if (IsValidDynamicPickup(EntranceInfo[enterid][eExitPickup]))	DestroyDynamicPickup(EntranceInfo[enterid][eExitPickup]);

		EntranceInfo[enterid][eExitPickup] = CreateDynamicPickup(1239, 1, EntranceInfo[enterid][eExitX], EntranceInfo[enterid][eExitY], EntranceInfo[enterid][eExitZ], EntranceInfo[enterid][eExitVW], EntranceInfo[enterid][eExitInt], -1, 100.0);

		SQL_SetFloat("entrance", "exitx", EntranceInfo[enterid][eExitX], EntranceInfo[enterid][eID]);
		SQL_SetFloat("entrance", "exity", EntranceInfo[enterid][eExitY], EntranceInfo[enterid][eID]);
		SQL_SetFloat("entrance", "exitz", EntranceInfo[enterid][eExitZ], EntranceInfo[enterid][eID]);
		SQL_SetFloat("entrance", "exita", EntranceInfo[enterid][eExitA], EntranceInfo[enterid][eID]);
		SQL_SetInteger("entrance", "exitvw", EntranceInfo[enterid][eExitVW], EntranceInfo[enterid][eID]);
		SQL_SetInteger("entrance", "exitint", EntranceInfo[enterid][eExitInt], EntranceInfo[enterid][eID]);

		SendSyntaxMessage(playerid, "Belirtilen yerin çýkýþ pozisyonu deðiþtirildi [ID: %i].", enterid);
		return 1;
	}

	else if (CompareStrings(option, "goto"))
	{
		new enterid;

		if (sscanf(secoption, "i", enterid))		return SendHelpMessage(playerid, "/abina goto [ID giriþ/çýkýþ]");
		if (!EntranceInfo[enterid][entranceOn])		return SendErrorMessage(playerid, "Belirtilen giriþ/çýkýþ bulunamadý.");
		if (enterid >= MAX_ENTRANCE || enterid < 0)	return SendErrorMessage(playerid, "Belirtilen deðer 0 ile %i arasýnda olmalýdýr.", MAX_ENTRANCE);

		SetPlayerPosEx(playerid, EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ]);
		SetInterior(playerid, EntranceInfo[enterid][eEnterInt]);
		SetWorld(playerid, EntranceInfo[enterid][eEnterVW]);
	}

	else if (CompareStrings(option, "gps"))
	{
		new enterid, text[128];

		if (sscanf(secoption, "is[128]", enterid, text)) return SendHelpMessage(playerid, "/abina gps [ID giriþ/çýkýþ] [yazý]");
		if (!EntranceInfo[enterid][entranceOn])			 return SendErrorMessage(playerid, "Belirtilen giriþ/çýkýþ bulunamadý.");
		if (strlen(text) < 1 || strlen(text) > 127)		 return SendErrorMessage(playerid, "Yazý deðeri minimum 1, maksimum 127 karakter olmalýdýr.");

		format(EntranceInfo[enterid][gpsText], 128, "%s", text);
		SQL_SetString("entrance", "gpsname", EntranceInfo[enterid][gpsText], EntranceInfo[enterid][eID]);
		SendSyntaxMessage(playerid, "Belirtilen giriþ/çýkýþýn GPS adý deðiþtirildi [ID: %i]. Yeni deðer: %s.", enterid, EntranceInfo[enterid][gpsText]);
		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "/abina [olustur / sil / birlik / arac / yazi / giris / cikis / goto / gps]");
	}
	return 1;
}

CMD:akiraliknokta(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption)) return SendHelpMessage(playerid, "/akiraliknokta [olustur / sil / goto / meslek]");

	if (CompareStrings(option, "olustur"))
	{
		new rental_type;

		if (sscanf(secoption, "d", rental_type))
		{
			SendHelpMessage(playerid, "/akiraliknokta [kiralama türü] [1- meslek, 2- normal araç kiralama]");
			return 1;
		}
		if (rental_type < 1 || rental_type > 2) return SendErrorMessage(playerid, "Geçersiz bir deðer girdiniz.");

		if (Rental_Nearest(playerid) != -1) return SendErrorMessage(playerid, "Baþka bir noktaya yakýnsýnýz.");

		new id = Iter_Free(RentalPoints);
		if (id == -1)
			return SendErrorMessage(playerid, "Maksimum eklenebilecek dolap sýnýrýna ulaþýlmýþ.");

		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
    	InsertRental(playerid, x, y, z, rental_type);

		SendAdmMessageToPlayer(playerid, "Kiralama noktasý oluþturuldu. [ID: %d].", id);
		return 1;
	}

	else if (CompareStrings(option, "sil"))
	{
		new id;

		if (sscanf(secoption, "i", id))							return SendHelpMessage(playerid, "/akiraliknokta sil [Rental ID]");
		if(!Iter_Contains(RentalPoints, id)) return SendErrorMessage(playerid, "Hatalý nokta ID girdin.");

		if (IsValidDynamic3DTextLabel(RentalPoint[id][rental3D]))
		{
			DestroyDynamic3DTextLabel(RentalPoint[id][rental3D]);
			RentalPoint[id][rental3D] = Text3D:INVALID_3DTEXT_ID;
		}

		if(IsValidDynamicPickup(RentalPoint[id][rentalPickup]))
			DestroyDynamicPickup(RentalPoint[id][rentalPickup]);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `rental_points` WHERE `id` = %d", RentalPoint[id][rentalID]);
		mysql_tquery(dbHandle, query);

		RentalPoint[id][rentalID] = 0;
		RentalPoint[id][rentalX] = 0.0;
		RentalPoint[id][rentalY] = 00.0;
		RentalPoint[id][rentalZ] = -500.0;
		Iter_Remove(RentalPoints, id);

		SendAdmMessageToPlayer(playerid, "Kiralama noktasi kaldýrýldý. [ID:%d]", id);
		return 1;
	}

	else if (CompareStrings(option, "goto"))
	{
		new id;

		if (sscanf(secoption, "i", id))							return SendHelpMessage(playerid, "/akiraliknokta goto [ID]");
		if(!Iter_Contains(RentalPoints, id)) return SendErrorMessage(playerid, "Hatalý nokta ID girdin.");

		SetPlayerPosEx(playerid, RentalPoint[id][rentalX], RentalPoint[id][rentalY], RentalPoint[id][rentalZ]);
		return 1;
	}

	else if (CompareStrings(option, "meslek"))
	{
		new id, job;

		if (sscanf(secoption, "ii", id, job))	return SendHelpMessage(playerid, "/akiraliknokta meslek [id] [meslek id]"), SendHelpMessage(playerid, "0: Mesleksiz, 1: Kamyon Soforu, 2: Mekanik, 3: Taksi, 4: Pizza, 6: Tasimacilik, 7: Hirsiz, 8: Oduncu, 9: Copcu, 10: Madenci ");
		if(!Iter_Contains(RentalPoints, id)) return SendErrorMessage(playerid, "Hatalý nokta ID girdin.");

		RentalPoint[id][rentalJob] = job;
		SendServerMessage(playerid, "Noktanýn ID'si %d olarak deðiþtirildi.", job);

        SQL_SetInteger("rental_points", "job", RentalPoint[id][rentalJob], RentalPoint[id][rentalID]);
		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "/akiraliknokta [olustur / sil / goto]");
	}
	return 1;
}

CMD:setfaction(playerid, params[])
{
	new userid, faction, rank;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
	if (sscanf(params,"udd", userid, faction, rank))		return SendHelpMessage(playerid, "/setfaction [ID/Karakter Adý] [faction id] [rütbe]");
	if (!IsPlayerLogged(userid))				return SendNotConnected(playerid);
	if (rank < 1 || rank > 20)                  return SendErrorMessage(playerid, "Rütbe 1 ile 20 arasýnda olmalýdýr.");
    if (faction < 1 || faction > MAX_FACTIONS-1 || !Factions[faction][fON]) return SendErrorMessage(playerid, "Belirtilen birlik bulunamadý.");

    RemovePlayerFaction(userid);

	PlayerInfo[userid][pFaction] = faction;
	SQL_SetInteger("users", "faction", PlayerInfo[userid][pFaction], PlayerInfo[userid][pID]);

	PlayerInfo[userid][pRank] = rank;
	SQL_SetInteger("users", "rank", PlayerInfo[userid][pRank], PlayerInfo[userid][pID]);

	SendServerMessage(playerid, "%s adlý kiþinin birliði deðiþtirildi. Birlik: %s Rütbe: %s", GetNameEx(userid), Factions[faction][fName], GetRankName(userid));
	SendServerMessage(playerid, "%s adlý yönetici birliðinizi deðiþtirdi. Birlik: %s Rütbe: %s", GetNameEx(playerid), Factions[faction][fName], GetRankName(userid));
	return 1;
}

CMD:dolapekle(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
	new faction_id;

	if(sscanf(params, "d", faction_id))
		return SendHelpMessage(playerid, "/dolapekle [birlik numarasý]");

	if(faction_id < 1)
		return SendErrorMessage(playerid, "Geçersiz birlik numarasý girdiniz.");

	mysql_tquery(dbHandle, sprintf("SELECT name FROM factions WHERE factionid = %i", faction_id), "OnStaffCreateLocker", "dd", playerid, faction_id);

	return 1;
}

CMD:dolapsil(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
	new locker_id;

	if(sscanf(params, "d", locker_id))
		return SendHelpMessage(playerid, "/dolapsil [dolap numarasý (/dolapliste)]");

	if(locker_id < 1)
		return SendErrorMessage(playerid, "Geçersiz dolap numarasý girdiniz.");

	mysql_tquery(dbHandle, GetLocker("factions.name, faction_lockers.faction_id, faction_lockers.label_id", "LEFT JOIN factions ON factions.factionid = faction_lockers.faction_id", "", 1, -1, locker_id), "OnStaffDeleteLocker", "dd", playerid, locker_id);

	return 1;
}

CMD:dolapduzenle(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
	new locker_id, opt[9], str[32];

	if(sscanf(params, "ds[9]S()[32]", locker_id, opt, str))
	{
		SendHelpMessage(playerid, "/dolapduzenle [dolap numarasý] [seçenek]");
		SendSyntaxMessage(playerid, "birlikid, pozisyon");
		return 1;
	}

	if(locker_id < 1)
		return SendErrorMessage(playerid, "Geçersiz dolap numarasý girdiniz.");

	if(!strcmp(opt, "birlikid", true) || !strcmp(opt, "birlik", true))
	{
		new faction_id;

		if(sscanf(str, "d", faction_id))
			return SendHelpMessage(playerid, "/editlocker <dolap numarasý> <birlikid> [birlik numarasý]");

		mysql_tquery(dbHandle, EditLocker(locker_id, faction_id), "OnStaffEditLockerFaction", "ddd", playerid, locker_id, faction_id);
	}

	else if(!strcmp(opt, "pozisyon", true) || !strcmp(opt, "pos", true))
	{
		new interior, world, Float:x, Float:y, Float:z;

		interior = GetPlayerInterior(playerid);
		world = GetPlayerVirtualWorld(playerid);

		GetPlayerPos(playerid, x, y, z);

		mysql_tquery(dbHandle, EditLocker(locker_id, -1, Text3D:-1, interior, world, x, y, z), "OnStaffEditLockerPos", "dd", playerid, locker_id);
	}

	else SendErrorMessage(playerid, "Geçersiz seçenek girdiniz.");

	return 1;
}

CMD:dolapliste(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
	mysql_tquery(dbHandle, GetLocker("faction_lockers.id, factions.name, faction_lockers.faction_id", "LEFT JOIN factions ON factions.factionid = faction_lockers.faction_id"), "OnStaffListLockers", "d", playerid);

	return 1;
}

// arrest

CMD:createarrestpoint(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
    Dialog_Show(playerid, CreateArrestConfirmation, DIALOG_STYLE_MSGBOX, "Hapis Noktasý Eklenmesi", EMBED_WHITE "Bulunduðunuz noktaya hapis noktasý eklenecektir. Emin misiniz?", "Ekle", "Ýptal");
    return 1;
}
alias:createarrestpoint("hapisekle");

CMD:deletearrestpoint(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
    new id;

    if(sscanf(params, "d", id))
        return SendHelpMessage(playerid, "/deletarrestpoint [hapis noktasý numarasý]");

    if(id < 1)
        return SendErrorMessage(playerid, "Geçersiz hapis noktasý numarasý girdiniz.");

    mysql_tquery(dbHandle, GetArrestPoint("arrest_points.pickup_id, arrest_points.label_id", "", "", 1, -1, id), "OnStaffDeleteArrestPoint", "dd", playerid, id);

    return 1;
}
alias:deletearrestpoint("hapissil", "hapiskaldir");

CMD:editarrestpoint(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
    new id, opt[9];

    if(sscanf(params, "ds[9]", id, opt))
    {
        SendHelpMessage(playerid, "/editarrestpoint [hapis noktasý numarasý] [seçenek]");
        SendSyntaxMessage(playerid, "pozisyon");

        return 1;
    }

    if(id < 1)
        return SendErrorMessage(playerid, "Geçersiz hapis noktasý numarasý girdiniz.");

    if(!strcmp(opt, "pozisyon", true))
    {
        new interior, world, Float:x, Float:y, Float:z;

        interior = GetPlayerInterior(playerid);
        world = GetPlayerVirtualWorld(playerid);

        GetPlayerPos(playerid, x, y, z);

        mysql_tquery(dbHandle, EditArrestPoint(id, -1, Text3D:-1, interior, world, x, y, z), "OnStaffEditArrestPointPos", "dd", playerid, id);
    }

    else SendErrorMessage(playerid, "Geçersiz seçenek girdiniz.");

    return 1;
}
alias:editarrestpoint("hapisduzenle", "hapisduzen");

alias:listarrestpoints("arrestpoints", "hapisnoktalari", "hapisler");
CMD:listarrestpoints(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);
    mysql_tquery(dbHandle, GetArrestPoint("arrest_points.id"), "OnStaffListArrestPoints", "d", playerid);
    return 1;
}

CMD:streamer(playerid, params[])
{
	new objects;

	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return	SendNotAdmin(playerid);

	if (sscanf(params, "i", objects))
	{
		SendHelpMessage(playerid, "/streamer [obje sayýsý]");
		SendSyntaxMessage(playerid, "Geçerli nesne sayýsý: %i", Streamer_GetVisibleItems(STREAMER_TYPE_OBJECT));
		return 1;
	}
	if (objects < 1 || objects > 1499)	return SendErrorMessage(playerid, "Obje sayýsý 1 ile 1499 arasýnda olmalýdýr.");

	new Float:x, Float:y, Float:z;

    Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, objects);

    foreach(new i : Player)
	{
		if (!IsPlayerLogged(i))	continue;

		GetPlayerPos(i, x, y, z);
		Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_OBJECT);
		Streamer_UpdateEx(i, x, y, z, -1, -1, STREAMER_TYPE_OBJECT);
	}
	return 1;
}

alias:cekilisyap("cekilis");
CMD:cekilisyap(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Bu iþlem için yetkiniz yetersiz.");

    new cekilis = GetRandomCekilisPlayer();

    if (isnull(params)) return SendSyntaxMessage(playerid, "/cekilisyap [Tür]");
    foreach(new j : Player)
    {
        if(!IsPlayerConnected(j))continue;
        SendClientMessageEx(j, 0x6583a8AA, "{6785ab}(( %s adlý yetkili tarafýndan %s çekiliþi yapýldý. %s adlý kiþi kazandý! ))", GetAccName(playerid), params, GetNameEx(j));
    }
    return 1;
}

CMD:setprobation(playerid, params[])
{
	new id,gun;
    if (!IsPlayerConnected(playerid)) return 1;
    if (PlayerInfo[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Yetkiniz yok!");
    if (sscanf(params, "ud",id,gun)) return SendSyntaxMessage(playerid, "/setprobation [ID/Isim] [Süre(gün)]");
    if (PlayerInfo[id][pProbation] == 0)
    {
        if(gun < 0) return SendErrorMessage(playerid,"Gün sayýsý 0'dan aþaðýda olamaz.");
        if(gun > 45) return SendErrorMessage(playerid,"Gün sayýsý 45'den yukarý olamaz.");

	    PlayerInfo[id][pProbationSure] = gettime()+gun*86400;
        PlayerInfo[id][pProbation] = 1;
        new baslik2[150], string[600];
		SendClientMessage(playerid, COLOR_ORANGE, "PROBATÝON: {F5F5F5}Sunucuda þartlý tahliye sürecindesiniz, sunucuda oynarken hareketlerinize dikkat etmelisiniz!");
		format(baslik2, sizeof baslik2, "{ffffff}Probation Bilgilendirme - %s", GetNameEx(playerid));
		format(string,sizeof(string),"{FFFFFF}Merhabalar {898989}%s!\n{d6d6d6}Probation dahilinde kullanamayacaðýn sunucu özellikleri aþþaðýda yer almaktadýr: \n\n{b51414}[+] {d6d6d6}Probationda araç kullanamazsýnýz\n{b51414}[+] {d6d6d6}Probationda zarar verici silahlar/eþyalar kullanamazsýnýz\n{b51414}[+] {d6d6d6}Probationda banka hizmetlerinden yararlanamazsýnýz.\n{b51414}[+] {d6d6d6}Probationda illegal meslekleri yapamazsýnýz\n\n{d6d6d6}Probation süreciniz: %d gün.",GetNameEx(playerid), gun);
		ShowPlayerDialog(playerid,22140,DIALOG_STYLE_MSGBOX,baslik2,string,"Tamam","");

	    SendAdmMessage("%s adlý yetkili %s adlý oyuncuyu %i günlüðüne Probation sürecine dahil etti. (/problist)", GetAccName(playerid), GetNameEx(id), gun);
        SendServerMessage(playerid, "%s(%s) adlý kiþiyi probationa soktunuz.", GetNameEx(id), GetAccName(id));
        SendServerMessage(id, "%s adlý yetkili sizi probationa soktu. (Kalan Zaman: %i Gün)", GetAccName(playerid), gun);
    }
    else
    {
    	SendAdmMessage("%s adlý yetkili %s adlý oyuncuyu Probation sürecinden çýkarttý. (/problist)", GetAccName(playerid), GetNameEx(id), gun);

	    PlayerInfo[id][pProbation] = 0;
        PlayerInfo[id][pProbationSure] = 0;

        SendServerMessage(playerid, "%s(%s) adlý kiþiyi probationdan çýkarttýn.", GetNameEx(id), GetAccName(id));
        SendServerMessage(id, "%s adlý yetkili tarafýndan probationdan çýkartýldýnýz.", GetAccName(playerid));
	}
	return 1;
}

alias:karakterduzenle("setplayer");
CMD:karakterduzenle(playerid, params[])
{
	new userid, option[16], secoption[64];

	if (!CheckAdmin(playerid, ADMIN_LEVEL_3)) return	SendNotAdmin(playerid);

	if (sscanf(params, "us[16]s[10]", userid, option, secoption))
	{
		SendHelpMessage(playerid, "/karakterduzenle [ID/Karakter Adý] [ayarlar] [deðer]");
		SendSyntaxMessage(playerid, "level/cinsiyet/bank/oynamasaati/uyusturucuizni/exp"); //exp
		SendSyntaxMessage(playerid, "araclisans/silahlisans/ucuslisans/taksilisans/mesleksaati/avukat");
		SendSyntaxMessage(playerid, "ten/koken/meslek/yas");
		return 1;
	}

	if (!IsPlayerLogged(userid)) return SendNotConnected(playerid);

	if (CompareStrings(option, "level"))
	{
		new level;

		if (sscanf(secoption, "i", level))	return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] level [seviye]");
		if (level <= 1 || level > 100)		return SendErrorMessage(playerid, "Seviye 1 ve 100 arasýnda olmalýdýr.");

		PlayerInfo[userid][pLevel] = level;
		SQL_SetInteger("users", "level", PlayerInfo[userid][pLevel], PlayerInfo[userid][pID]);
		SetPlayerScore(userid, PlayerInfo[userid][pLevel]);
		SendAdmMessage("%s adlý yönetici %s adlý kiþinin seviyesini deðiþtirdi [ID: %i] -> %i.", GetNameEx(playerid), GetNameEx(userid), userid, level);
		SendAdmMessageToPlayer(userid, "%s adlý yönetici, seviyenizi %i olarak deðiþtirdi.", GetAccName(playerid), level);
		return 1;
	}

	if (CompareStrings(option, "uyusturucuizni"))
	{
		new level;

		if (sscanf(secoption, "i", level))	return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] uyusturucuizni [0/1]");
		if (level <= -1 || level > 1)		return SendErrorMessage(playerid, "Eriþim seviyesi 0 veya 1 olmalýdýr.");

		PlayerInfo[userid][pDrugLabAccess] = level;
		SQL_SetInteger("users", "drugaccess", PlayerInfo[userid][pDrugLabAccess], PlayerInfo[userid][pID]);
		SendAdmMessage("%s adlý yönetici %s [ID: %i] adlý oyuncunun uyuþturucu laboratuvarýna eriþim düzeyini deðiþtirdi. Yeni deðer: %i.", GetNameEx(playerid), GetNameEx(userid), userid, level);
		SendAdmMessageToPlayer(userid, "%s adlý yönetici uyuþturucu laboratuvarýna eriþim düzeyinizi deðiþtirdi. Yeni deðer: %i.", GetAccName(playerid), level);
		return 1;
	}

	else if (CompareStrings(option, "exp"))
	{
		new exp;

		if (sscanf(secoption, "i", exp))	return SendHelpMessage(playerid, "/setstat [ID / isim] exp [Experience points]");
		if (exp < 0 || exp > 8192)		return SendErrorMessage(playerid, "0 ile 8192 arasý olmalýdýr.");

		PlayerInfo[userid][pExp] = exp;
		SQL_SetInteger("users", "exp", PlayerInfo[userid][pExp], PlayerInfo[userid][pID]);
		SendAdmMessage("%s adlý yönetici %s adlý oyuncunun EXP deðerini deðiþtirdi: [ID: %i] - %i.", GetNameEx(playerid), GetNameEx(userid), userid, exp);
		SendSyntaxMessage(userid, "%s adlý yönetici EXP deðerinizi %i olarak belirledi.", GetAccName(playerid), exp);
		return 1;
	}

	else if (CompareStrings(option, "meslek"))
	{
		new job;

		if (sscanf(secoption, "i", job))	return SendHelpMessage(playerid, "/setstat [ID / isim] meslek [job id]");
		if (job < -1 || job > MAX_JOBS_TYPES)		return SendErrorMessage(playerid, "0 ile %d arasý olmalýdýr.", MAX_JOBS_TYPES);

		PlayerInfo[userid][pJob] = job;
		PlayerInfo[userid][pCareer] = 0;
		SQL_SetInteger("users", "job", PlayerInfo[userid][pJob], PlayerInfo[userid][pID]);
		SendAdmMessage("%s adlý yönetici %s adlý oyuncunun meslek deðerini deðiþtirdi: [ID: %i] - %i.", GetNameEx(playerid), GetNameEx(userid), userid, job);
		SendSyntaxMessage(userid, "%s adlý yönetici meslek deðerinizi %i olarak belirledi.", GetAccName(playerid), job);
		return 1;
	}

	else if (CompareStrings(option, "yas"))
	{
		new age;

		if (sscanf(secoption, "i", age))	return SendHelpMessage(playerid, "/setstat [ID / isim] yas [yaþ]");
		if (age < 15 || age > 80)		return SendErrorMessage(playerid, "Yaþ 15 ile 80 arasýnda olmalý.");

		PlayerInfo[userid][pAge] = age;
		SQL_SetInteger("users", "age", PlayerInfo[userid][pAge], PlayerInfo[userid][pID]);
		SendAdmMessage("%s adlý yönetici %s adlý oyuncunun yaþýný deðiþtirdi: [ID: %i] - %i.", GetNameEx(playerid), GetNameEx(userid), userid, age);
		SendSyntaxMessage(userid, "%s adlý yönetici yaþýnýzý %i olarak belirledi.", GetAccName(playerid), age);
		return 1;
	}

	else if (CompareStrings(option, "cinsiyet"))
	{
		new sex;

		if (sscanf(secoption, "i", sex))	return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] cinsiyet [1 - erkek | 2 - kadýn]");
		if (sex < 1 || sex > 2) 			return SendErrorMessage(playerid, "Cinsiyet 1 veya 2 olmalýdýr.");

		PlayerInfo[userid][pSex] = sex;
		SQL_SetInteger("users", "sex", PlayerInfo[userid][pSex], PlayerInfo[userid][pID]);

		new sex_naming[16];

		if (sex == 1)	format(sex_naming, sizeof(sex_naming), "Erkek");
		else 			format(sex_naming, sizeof(sex_naming), "Kadýn");

		SendAdmMessage("%s adlý yönetici %s [ID: %i] adlý karakterin cinsiyetini deðiþtirdi. Yeni cinsiyet: %s.", GetNameEx(playerid), GetNameEx(userid), userid, sex_naming);
		SendAdmMessageToPlayer(userid, "%s adlý yönetici cinsiyetinizi deðiþtirdi. Yeni cinsiyet: %s.", GetAccName(playerid), sex_naming);
		return 1;
	}

	else if (CompareStrings(option, "ten"))
	{
		new race;

		if (sscanf(secoption, "i", race))	return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] ten [1 - beyaz | 2 - siyah]");
		if (race < 1 || race > 2) 			return SendErrorMessage(playerid, "Seçenek 1 veya 2 olmalýdýr.");

		PlayerInfo[userid][pRace] = race;
		SQL_SetInteger("users", "race", PlayerInfo[userid][pRace], PlayerInfo[userid][pID]);

		new race_naming[16];

		if (race == 1)	format(race_naming, sizeof(race_naming), "Beyaz");
		else 			format(race_naming, sizeof(race_naming), "Siyahi");

		SendAdmMessage("%s adlý yönetici %s [ID: %i] adlý karakterin ten rengini deðiþtirdi. Yeni cinsiyet: %s.", GetNameEx(playerid), GetNameEx(userid), userid, race_naming);
		SendAdmMessageToPlayer(userid, "%s adlý yönetici ten renginizi deðiþtirdi. Yeni cinsiyet: %s.", GetAccName(playerid), race_naming);
		return 1;
	}

	else if (CompareStrings(option, "koken"))
	{
		new origin;

		if (sscanf(secoption, "i", origin))	return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] origin [Origin ID]");

		PlayerInfo[userid][pOrigin] = origin;
		SQL_SetInteger("users", "origin", PlayerInfo[userid][pOrigin], PlayerInfo[userid][pID]);

		new origin_naming[32];

		if (origin > 0)	format(origin_naming, sizeof(origin_naming), "%s", GetOriginName(origin));

		SendAdmMessage("%s adlý yönetici %s [ID: %i] adlý karakterin kökenini deðiþtirdi. Yeni köken: %i.", GetNameEx(playerid), GetNameEx(userid), userid, origin_naming);
		SendAdmMessageToPlayer(userid, "%s adlý yönetici kökeninizi deðiþtirdi. Yeni köken: %i.", GetAccName(playerid), origin_naming);
		return 1;
	}

	else if (CompareStrings(option, "bank"))
	{
		new abank;

		if (sscanf(secoption, "i", abank))	return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] bank [miktar]");
		if (abank < 0 || abank > 50000000)	return SendErrorMessage(playerid, "Miktar $0 ile $50.000.000 arasýnda olmalýdýr.");

		PlayerInfo[userid][pBank] = abank;
		SQL_SetInteger("users", "bank", PlayerInfo[userid][pBank], PlayerInfo[userid][pID]);
		SendAdmMessage("%s adlý yönetici %s [ID: %i] adlý karakterin banka hesabýný düzenledi. Yeni deðer: $%i.", GetNameEx(playerid), GetNameEx(userid), userid, abank);
		SendAdmMessageToPlayer(userid, "%s adlý yönetici banka paranýzý deðiþtirdi. Yeni miktar: $%i.", GetAccName(playerid), abank);

		new mes[128];
		format(mes, sizeof(mes), "[/givemoney] %s adlý yönetici %s adlý oyuncunun banka parasýný deðiþtirdi: $%i.", GetAccName(playerid), GetNameEx(userid), abank);
		insert_log(mes, ADMIN_LOG, 8, PlayerInfo[userid][pAccID], PlayerInfo[playerid][pAccID]);
		return 1;
	}

	else if (CompareStrings(option, "oynamasaati"))
	{
		new hor;

		if (sscanf(secoption, "i", hor))	return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] oynamasaati [oynama saati]");
		if (hor < 0 || hor > 8192)			return SendErrorMessage(playerid, "Belirtilen saat 0 ile 8192 arasýnda olmalýdýr.");

		PlayerInfo[userid][pHours] = hor;
		SQL_SetInteger("users", "hours", PlayerInfo[userid][pHours], PlayerInfo[userid][pID]);
		SendAdmMessage("%s adlý yönetici %s [ID: %i] adlý oyuncunun oynama saatini deðiþtirdi. Yeni deðer: %i.", GetNameEx(playerid), GetNameEx(userid), userid, hor);
		SendAdmMessageToPlayer(userid, "%s adlý yönetici oynama saatinizi deðiþtirdi. Yeni deðer: %i.", GetAccName(playerid), hor);
		return 1;
	}

	else if (CompareStrings(option, "araclisans"))
	{
		new lic;

		if (sscanf(secoption, "i", lic)) return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] carlic [0 - geri al | 1 - ver]");
		if (lic < 0 || lic > 1)			 return SendErrorMessage(playerid, "Deðer 0 ile 1 arasýnda olmalýdýr.");

		PlayerInfo[userid][pCarLic] = lic;
		SQL_SetInteger("users", "carlic", PlayerInfo[userid][pCarLic], PlayerInfo[userid][pID]);

		new lic_name[16];

		if (PlayerInfo[userid][pCarLic])	format(lic_name, sizeof(lic_name), "El Koydu");
		else 								format(lic_name, sizeof(lic_name), "Verdi");

		SendAdmMessage("%s adlý yetkili %s adlý kiþinin lisans durumunu deðiþtirdi.", GetNameEx(playerid), GetNameEx(userid), userid);
		SendAdmMessageToPlayer(userid, "%s adlý kiþinin sürücü lisans durumunu deðiþtirdiniz", GetAccName(playerid), (PlayerInfo[userid][pCarLic]) ? ("Your") : ("You"));
		return 1;
	}

	else if (CompareStrings(option, "ucuslisans"))
	{
		new lic;

		if (sscanf(secoption, "i", lic)) return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] flylic [0 - geri al | 1 - ver | 2 - blacklist]");
		if (lic < 0 || lic > 2)			 return SendSyntaxMessage(playerid, "Deðer 0 ile 2 arasýnda olmalýdýr.");

		PlayerInfo[userid][pFlyLic] = lic;
		SQL_SetInteger("users", "flylic", PlayerInfo[userid][pFlyLic], PlayerInfo[userid][pID]);

		new lic_name[20];

		switch(PlayerInfo[userid][pFlyLic])
		{
			case 0: format(lic_name, sizeof(lic_name), "took away");
			case 1: format(lic_name, sizeof(lic_name), "issued");
			case 2: format(lic_name, sizeof(lic_name), "added to blacklist");
		}

		SendAdmMessage("%s adlý yetkili %s adlý kiþinin pilot lisansý durumunu deðiþtirdi", GetNameEx(playerid), GetNameEx(userid), userid);
		SendAdmMessageToPlayer(userid, "%s adlý kiþinin pilot lisansý durumunu deðiþtirdiniz.", GetAccName(playerid), (PlayerInfo[userid][pFlyLic]) ? ("Your") : ("You"));
		return 1;
	}

	else if (CompareStrings(option, "taksilisans"))
	{
		new lic;

		if (sscanf(secoption, "i", lic))	return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] taxilic [0 - geri al | 1 - ver | 2 - blacklist]");
		if (lic < 0 || lic > 2)			return SendSyntaxMessage(playerid, "Deðer 0 ile 2 arasýnda olmalýdýr.");

		PlayerInfo[userid][pTaxiLic] = lic;
		SQL_SetInteger("users", "taxilic", PlayerInfo[userid][pTaxiLic], PlayerInfo[userid][pID]);

		new lic_name[20];

		switch(PlayerInfo[userid][pTaxiLic])
		{
			case 0: format(lic_name, sizeof(lic_name), "geri aldý");
			case 1: format(lic_name, sizeof(lic_name), "verdi");
			case 2: format(lic_name, sizeof(lic_name), "karalisteye ekledi");
		}

		SendAdmMessage("%s kiþinin lisansýný %s: %s [ID: %i].", GetNameEx(playerid), lic_name, GetNameEx(userid), userid);
		SendAdmMessageToPlayer(userid, "%s adlý yönetici taksi lisansýný %s.", GetAccName(playerid), lic_name);
		return 1;
	}

	else if (CompareStrings(option, "avukat"))
	{
		new lic;

		if (sscanf(secoption, "i", lic)) return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] avukat [0 - avukat yap | 1 - avukat çýkart ]");
		if (lic < 0 || lic > 1)			 return SendSyntaxMessage(playerid, "Deðer 0 ile 1 arasýnda olmalýdýr.");

		PlayerInfo[userid][pLawyer] = lic;
		SQL_SetInteger("users", "lawyer", PlayerInfo[userid][pLawyer], PlayerInfo[userid][pID]);

		new lic_name[20];

		switch(PlayerInfo[userid][pLawyer])
		{
			case 0: format(lic_name, sizeof(lic_name), "aldý");
			case 1: format(lic_name, sizeof(lic_name), "verdi");
		}

		SendAdmMessage("%s adlý yönetici %s(%d) adlý kiþiye avukat lisansýný %s.", GetNameEx(playerid), GetNameEx(userid), userid, lic_name);
		SendAdmMessageToPlayer(userid, "Yönetici %s, %s %s.", GetAccName(playerid), (PlayerInfo[userid][pFlyLic]) ? ("Senin") : ("Sen"), lic_name);
		return 1;
	}

	else if (CompareStrings(option, "weplic"))
	{
		new lic;

		if (sscanf(secoption, "i", lic))	return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] weplic [0 - geri aldý | 1 - verdi]");
		if (lic < 0 || lic > 1)			return SendSyntaxMessage(playerid, "Deðer 0 ile 1 arasýnda olmalýdýr.");

		PlayerInfo[userid][pWepLic] = lic;
		SQL_SetInteger("users", "weplic", PlayerInfo[userid][pWepLic], PlayerInfo[userid][pID]);

		new lic_name[16];

		if (PlayerInfo[userid][pWepLic])	format(lic_name, sizeof(lic_name), "verdi");
		else							format(lic_name, sizeof(lic_name), "geri aldý");

		SendAdmMessage("%s silah lisansýný %s: %s [ID: %i].", GetNameEx(playerid), lic_name, GetNameEx(userid), userid);
		SendAdmMessageToPlayer(userid, "%s adlý yetkili silah lisansýnýzý %s.", GetAccName(playerid), lic_name);
		return 1;
	}

	else if (CompareStrings(option, "mesleksaati"))
	{
		new whours;

		if (sscanf(secoption, "i", whours))	return SendHelpMessage(playerid, "/setstat [ID/Karakter Adý] whours [deðer]");
		if (whours < 0 || whours > 256)		return SendErrorMessage(playerid, "Kariyer saati deðeri 0 ile 256 arasýnda olmalýdýr.");

		PlayerInfo[userid][pCareer] = whours;
		SQL_SetInteger("users", "career", PlayerInfo[userid][pCareer], PlayerInfo[userid][pID]);
		SendAdmMessage("%s adlý yönetici %s [ID: %i] adlý kiþinin meslek saatini deðiþtirdi. Yeni Deðer: %i.", GetNameEx(playerid), GetNameEx(userid), userid, whours);
		SendAdmMessageToPlayer(playerid, "%s adlý yönetici meslek saatini deðiþtir. Yeni Saat: %i.", GetAccName(playerid), whours);
	}
	return 1;
}

CMD:gmx(playerid, params[])
{
	new time;

	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);
	if (restart_time)
	{
		SAMALL("%s adlý yönetici tarafýndan sunucu restartý iptal edildi.", GetAccName(playerid));

		restart_time = 0;
	    return 1;
	}

	if (sscanf(params, "i", time)) 	return SendHelpMessage(playerid, "/gmx [saniye]");
	if (time < 10 || time > 300)	return SendErrorMessage(playerid, "Restart saniyesi 0 ile 300 arasýnda bir deðer olmalýdýr.");

    restart_time = time;

	SAMALL("%s adlý yönetici tarafýndan restart planlandý. %i saniye içinde restart atýlacak.", GetAccName(playerid), time);
	return 1;
}

CMD:copstocrime(playerid, params[])
{
	new amount;
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);
	if (sscanf(params, "d", amount))			return SendHelpMessage(playerid, "/copstocrime [deðer]");
	if (amount < 0)								return SendErrorMessage(playerid, "Negatif bir deðer giremezsiniz!");

	NEED_COPS_TO_CRIME = amount;
	SendAdmMessage("%s adlý yönetici polis sayý durumunu deðiþtirdi. Yeni Deðer: %i.", GetAccName(playerid), amount);
	return 1;
}

CMD:departmansayi(playerid, params[])
{
	new amount;
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);
	if (sscanf(params, "d", amount))			return SendHelpMessage(playerid, "/departmansayi [miktar]");
	if (amount < 0)								return SendErrorMessage(playerid, "Negatif bir deðer giremezsiniz!");

	NEED_FIRE_TO_CRIME = amount;
	SendAdmMessage("%s adlý yönetici yangýn departmaný sayý durumunu deðiþtirdi. Yeni Deðer: %i.", GetAccName(playerid), amount);
	return 1;
}

alias:setadmin("yoneticiyap");
CMD:setadmin(playerid, params[])
{
	new userid, level;
	if (PlayerInfo[playerid][pAdmin] < 5)			return SendNotAdmin(playerid);
	//if (!CheckAdmin(playerid, DEVELOPER_LEVEL))	return SendNotAdmin(playerid);
	if (sscanf(params, "ud", userid, level))		return SendHelpMessage(playerid, "/setadmin [ID/Karakter Adý] [seviye]");
	if(level > 5 || level < 0)						return SendErrorMessage(playerid, "Yönetim seviyesi 0 ile 5 arasýnda olmalýdýr.");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	//if (userid == playerid)							return 1;
	if (!level && !PlayerInfo[userid][pAdmin])		return SendErrorMessage(playerid, "Belirtilen kullanýcý için bu iþlemi uygulayamazsýnýz.");

	/*if (PlayerInfo[userid][pAdmin] == HIGH_ADMIN_LEVEL) {
		if (level < 0 || level > HIGH_ADMIN_LEVEL-1)	return SendErrorMessage(playerid, "Yönetim seviyesi 0 ile 3 arasýnda olmalýdýr.");
	} else if (PlayerInfo[userid][pAdmin] == DEVELOPER_LEVEL) {
		if (level < 0 || level > HIGH_ADMIN_LEVEL)		return SendErrorMessage(playerid, "Yönetim seviyesi 0 ile 4 arasýnda olmalýdýr.");
	}*/

	if (!level)
	{
		if (IsAdminDuty(userid)) pc_cmd_awork(userid, "");

		SendAdmMessage("%s adlý yönetici %s adlý kiþinin yetkilerini aldý.", GetAccName(playerid), GetAccName(userid));
		SendServerMessage(userid, "%s adlý yönetici yetkilerinizi aldý.", GetAccName(playerid));
		PlayerInfo[userid][pAdmin] = 0;
		SQL_SetIntegerAcc("accounts", "admin", PlayerInfo[userid][pAdmin], PlayerInfo[userid][pAccID]);
		return 1;
	}

	PlayerInfo[userid][pAdmin] = level;
	SQL_SetIntegerAcc("accounts", "admin", PlayerInfo[userid][pAdmin], PlayerInfo[userid][pAccID]);
	SendAdmMessage("%s adlý yönetici %s adlý kiþinin yetkisi güncellendi. Yeni Seviye: %i", GetAccName(playerid), GetNameEx(userid), level);
	SendServerMessage(userid, "%s adlý yönetici yetkinizi güncellendi. Yeni Seviye: %i", GetAccName(playerid), level);
	return 1;
}

CMD:helperlead(playerid, params[]){
	new userid;
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))  return SendHelpMessage(playerid, "/helperlead [ID/Karakter]");
	if (!IsPlayerLogged(userid)) return SendNotConnected(playerid);

	if(PlayerInfo[userid][pHelperLead]){
		PlayerInfo[userid][pHelperLead] = 0;
		SQL_SetIntegerAcc("accounts", "helperlead", PlayerInfo[userid][pHelperLead], PlayerInfo[userid][pAccID]);
		SendAdmMessage("%s adlý yönetici %s adlý kiþiyi Head Of Supporter yetkilerini aldý.", GetAccName(playerid), GetNameEx(userid));
		SendServerMessage(userid, "%s adlý yönetici sizin Head Of Supporter yetkilerini aldý.", GetAccName(playerid));
		return 1;
	}

	PlayerInfo[userid][pHelperLead] = 1;
	SQL_SetIntegerAcc("accounts", "helperlead", PlayerInfo[userid][pHelperLead], PlayerInfo[userid][pAccID]);
	SendAdmMessage("%s adlý yönetici %s adlý kiþiyi Head Of Supporter yaptý.", GetAccName(playerid), GetNameEx(userid));
	SendServerMessage(userid, "%s adlý yönetici sizi Head Of Supporter yaptý.", GetAccName(playerid));

	return 1;
}

CMD:fmadmin(playerid, params[]){
	new userid;
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))  return SendHelpMessage(playerid, "/fmadmin [ID/Karakter]");
	if (!IsPlayerLogged(userid)) return SendNotConnected(playerid);

	if(PlayerInfo[userid][pFMAdmin]){
		PlayerInfo[userid][pFMAdmin] = 0;
		SQL_SetIntegerAcc("accounts", "fmadmin", PlayerInfo[userid][pFMAdmin], PlayerInfo[userid][pAccID]);
		SendAdmMessage("%s adlý yönetici %s adlý kiþiyi FM Admin yetkilerini aldý.", GetAccName(playerid), GetNameEx(userid));
		SendServerMessage(userid, "%s adlý yönetici sizin FM Admin Supporter yetkilerini aldý.", GetAccName(playerid));
		return 1;
	}

	PlayerInfo[userid][pFMAdmin] = 1;
	SQL_SetIntegerAcc("accounts", "fmadmin", PlayerInfo[userid][pFMAdmin], PlayerInfo[userid][pAccID]);
	SendAdmMessage("%s adlý yönetici %s adlý kiþiyi FM Admin yaptý.", GetAccName(playerid), GetNameEx(userid));
	SendServerMessage(userid, "%s adlý yönetici sizi FM Admin yaptý.", GetAccName(playerid));

	return 1;
}

CMD:setmapper(playerid, params[]){
	new userid;
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))  return SendHelpMessage(playerid, "/setmapper [ID/Karakter]");
	if (!IsPlayerLogged(userid)) return SendNotConnected(playerid);

	if(PlayerInfo[userid][pMapper]){
		PlayerInfo[userid][pMapper] = 0;
		SQL_SetIntegerAcc("accounts", "mapper", PlayerInfo[userid][pMapper], PlayerInfo[userid][pAccID]);
		SendAdmMessage("%s adlý yönetici %s adlý kiþiden mapper yetkisini aldý.", GetAccName(playerid), GetNameEx(userid));
		SendServerMessage(userid, "%s adlý yönetici sizin mapper yetkilerinizi aldý.", GetAccName(playerid));
		return 1;
	}

	PlayerInfo[userid][pMapper] = 1;
	SQL_SetIntegerAcc("accounts", "mapper", PlayerInfo[userid][pMapper], PlayerInfo[userid][pAccID]);
	SendAdmMessage("%s adlý yönetici %s adlý kiþiyi mapper yaptý.", GetAccName(playerid), GetNameEx(userid));
	SendServerMessage(userid, "%s adlý yönetici sizi mapper yaptý.", GetAccName(playerid));

	return 1;
}

CMD:set3rdscripter(playerid, params[]){
	new userid;
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))  return SendHelpMessage(playerid, "/set3rdscripter [ID/Karakter]");
	if (!IsPlayerLogged(userid)) return SendNotConnected(playerid);

	if(PlayerInfo[userid][pRdscripter]){
		PlayerInfo[userid][pRdscripter] = 0;
		SQL_SetIntegerAcc("accounts", "rdscripter", PlayerInfo[userid][pRdscripter], PlayerInfo[userid][pAccID]);
		SendAdmMessage("%s adlý yönetici %s adlý kiþiden 3RD Party Scripter yetkisini aldý.", GetAccName(playerid), GetNameEx(userid));
		SendServerMessage(userid, "%s adlý yönetici sizin 3RD Party Scripter yetkilerinizi aldý.", GetAccName(playerid));
		return 1;
	}

	PlayerInfo[userid][pRdscripter] = 1;
	SQL_SetIntegerAcc("accounts", "rdscripter", PlayerInfo[userid][pRdscripter], PlayerInfo[userid][pAccID]);
	SendAdmMessage("%s adlý yönetici %s adlý kiþiyi 3RD Party Scripter yaptý.", GetAccName(playerid), GetNameEx(userid));
	SendServerMessage(userid, "%s adlý yönetici sizi 3RD Party Scripter yaptý.", GetAccName(playerid));

	return 1;
}

CMD:setebc(playerid, params[]){
	new userid;
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))  return SendHelpMessage(playerid, "/setebc [ID/Karakter]");
	if (!IsPlayerLogged(userid)) return SendNotConnected(playerid);

	if(PlayerInfo[userid][pEbc]){
		PlayerInfo[userid][pEbc] = 0;
		SQL_SetIntegerAcc("accounts", "ebc", PlayerInfo[userid][pEbc], PlayerInfo[userid][pAccID]);
		SendAdmMessage("%s adlý yönetici %s adlý kiþiden mapper yetkisini aldý.", GetAccName(playerid), GetNameEx(userid));
		SendServerMessage(userid, "%s adlý yönetici sizin mapper yetkilerinizi aldý.", GetAccName(playerid));
		return 1;
	}

	PlayerInfo[userid][pEbc] = 1;
	SQL_SetIntegerAcc("accounts", "ebc", PlayerInfo[userid][pEbc], PlayerInfo[userid][pAccID]);
	SendAdmMessage("%s adlý yönetici %s adlý kiþiyi mapper yaptý.", GetAccName(playerid), GetNameEx(userid));
	SendServerMessage(userid, "%s adlý yönetici sizi mapper yaptý.", GetAccName(playerid));

	return 1;
}

CMD:setskinyetki(playerid, params[]){
	new userid;
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))  return SendHelpMessage(playerid, "/setskinyetki [ID/Karakter]");
	if (!IsPlayerLogged(userid)) return SendNotConnected(playerid);

	if(PlayerInfo[userid][pSkinYetki]){
		PlayerInfo[userid][pSkinYetki] = 0;
		SQL_SetIntegerAcc("accounts", "skinyetki", PlayerInfo[userid][pSkinYetki], PlayerInfo[userid][pAccID]);
		SendAdmMessage("%s adlý yönetici %s adlý kiþiden mapper yetkisini aldý.", GetAccName(playerid), GetNameEx(userid));
		SendServerMessage(userid, "%s adlý yönetici sizin mapper yetkilerinizi aldý.", GetAccName(playerid));
		return 1;
	}

	PlayerInfo[userid][pSkinYetki] = 1;
	SQL_SetIntegerAcc("accounts", "skinyetki", PlayerInfo[userid][pSkinYetki], PlayerInfo[userid][pAccID]);
	SendAdmMessage("%s adlý yönetici %s adlý kiþiyi mapper yaptý.", GetAccName(playerid), GetNameEx(userid));
	SendServerMessage(userid, "%s adlý yönetici sizi mapper yaptý.", GetAccName(playerid));

	return 1;
}

CMD:aracplaka(playerid, params[])
{
	new vehid, plate;

    if (!CheckAdmin(playerid, ADMIN_LEVEL_3)) 			return SendNotAdmin(playerid);
	if (sscanf(params,"is[7]", vehid, plate))		return SendHelpMessage(playerid, "/aracplaka [Car ID] [Yeni Plate(7)]");
	if (plate > 7) return SendErrorMessage(playerid, "Maksimum 7 haneli bir plaka oluþturabilirsiniz.");
	if (!IsValidVehicle(vehid))				return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");
	if (IsPlayerInVehicle(playerid, vehid))	return SendErrorMessage(playerid, "Belirtilen araçtasýnýz.");

	format(VehicleInfo[vehid][carPlate], 7, "%s", plate);
	SendAdmMessage("%s adlý yönetici ID %d aracýn plakasýný %s olarak belirledi.", GetAccName(playerid), vehid, plate);
	Save_Car(vehid);
	return 1;
}

CMD:sethelper(playerid, params[])
{
	new userid, level;

	if (PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pHelperLead] < 1)	return SendNotAdmin(playerid);
	if (sscanf(params, "ud", userid, level))		return SendHelpMessage(playerid, "/sethelper [ID/Karakter] [0 - helper deðil | 1-2-3-4-5 seviye]");
	if (!IsPlayerLogged(playerid))					return SendNotConnected(playerid);
	if (level < 0 || level > 5)						return SendErrorMessage(playerid, "Deðer 0 veya 5 olmalýdýr");

	if (!level)
	{
		if (IsTesterDuty(userid)) pc_cmd_hduty(userid, "");

		SendAdmMessage("%s adlý yönetici %s adlý kiþinin helper yetkilerini aldý.", GetAccName(playerid), GetAccName(userid));
		SendServerMessage(userid, "%s adlý helper yetkilerinizi aldý.", GetAccName(playerid));
		PlayerInfo[userid][pHelper] = 0;
		SQL_SetIntegerAcc("accounts", "helper", PlayerInfo[userid][pHelper], PlayerInfo[userid][pAccID]);
		return 1;
	}

	PlayerInfo[userid][pHelper] = level;
	SQL_SetIntegerAcc("accounts", "helper", PlayerInfo[userid][pHelper], PlayerInfo[userid][pAccID]);
	SendAdmMessage("%s adlý yönetici %s adlý kullanýcýnýn helper durumunu güncelledi.", GetAccName(playerid), GetNameEx(userid));
	SendServerMessage(userid, "%s adlý yönetici helper statünüzü güncelledi.", GetAccName(playerid));
	return 1;
}

alias:giveskin("ozelmodelver");
CMD:setdonatorskin(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

    new owner[MAX_PLAYER_NAME], model, query[256];

	if (sscanf(params, "s[64]d", owner, model))
		return SendHelpMessage(playerid, "[özel model] /giveskin [Ýsim_Soyisim] [verilecek özel skin id]");

	if(GetAccountByName(owner) == -1) return SendErrorMessage(playerid, "Böyle bir karakter yok.");
	if (model < 0 || model > 40000) 													return SendErrorMessage(playerid, "Skin ID 0'dan küçük 40000'den büyük olamaz.");

	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `donator_skinler` (sahip,skinid,yetkili,tarih) VALUES (%i, %i, '%s', '%s')",
	GetAccountByName(owner), model, GetAccName(playerid), GetFullDate());
	mysql_tquery(dbHandle, query);

	SendServerMessage(playerid, "%s(SQLID: %d) adlý karakterin hesabýna %d ID'li özel modeli tanýmladýn.", owner, GetAccountByName(owner), model);

	return 1;
}

alias:givemoney("aparaver");
CMD:givemoney(playerid, params[])
{
	new userid, amount;

	if (!CheckAdmin(playerid, ADMIN_LEVEL_3))	return SendNotAdmin(playerid);
	if (sscanf(params, "ui", userid, amount))	return SendHelpMessage(playerid, "/givemoney [ID/Karakter Adý] [miktar]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (amount > 100000)			return SendErrorMessage(playerid, "Miktar $0 ile $500000 arasýnda olmalýdýr.");

	GiveCash(userid, amount);

	new mes[128];
	format(mes, sizeof(mes), "[/givemoney] %s adlý yönetici %s adlý oyuncuya para verdi: $%i.", GetAccName(playerid), GetNameEx(userid), amount);
	insert_log(mes, ADMIN_LOG, 8, PlayerInfo[userid][pAccID], PlayerInfo[playerid][pAccID]);

	if (amount < 0)
	{
		SendAdmMessage("%s adlý yönetici %s adlý yöneticiden $%i para aldý.", GetAccName(playerid), GetNameEx(userid), amount);
		SendServerMessage(userid, "Yönetici sizden $%i deðerinde para aldý.", amount);
		return 1;
	}
	else
	{
		SendAdmMessage("%s adlý yönetici %s adlý oyuncuya para verdi: $%i.", GetAccName(playerid), GetNameEx(userid), amount);
		SendServerMessage(userid, "Yönetici size para verdi: $%i.", amount);
	}
	return 1;
}

alias:aobject("aobj");
CMD:aobject(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL && !PlayerInfo[playerid][pMapper]))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "(/aobj)ect [ayar]");
		SendSyntaxMessage(playerid, "olustur/sil/duzenle/sec/goto");
		return 1;
	}

	if (CompareStrings(option, "olustur"))
	{
		new modelid;

		if (sscanf(secoption, "d", modelid))	return SendHelpMessage(playerid, "(/aobj)ect olustur [ID]");

		new objectid = -1;

		for(new i = 0; i < MAX_OBJECTS; i++)
		{
			if (ObjectsInfo[i][oID] || ObjectsInfo[i][oObjectOn]) continue;

			objectid = i;
			break;
		}

		if (objectid == -1)	return SendErrorMessage(playerid, "Oluþturulacak maksimum nesne sayýsýna ulaþýldý.");

		GetPlayerPos(playerid, ObjectsInfo[objectid][oPosX], ObjectsInfo[objectid][oPosY], ObjectsInfo[objectid][oPosZ]);

		ObjectsInfo[objectid][oModel] = modelid;
		ObjectsInfo[objectid][oPosRX] =
		ObjectsInfo[objectid][oPosRY] =
		ObjectsInfo[objectid][oPosRZ] = 0.0;
		ObjectsInfo[objectid][oInt] = GetInterior(playerid);
		ObjectsInfo[objectid][oVW] = GetWorld(playerid);
		ObjectsInfo[objectid][oObject] = CreateDynamicObject(modelid, ObjectsInfo[objectid][oPosX], ObjectsInfo[objectid][oPosY], ObjectsInfo[objectid][oPosZ], 0.0, 0.0, 0.0, ObjectsInfo[objectid][oVW], ObjectsInfo[objectid][oInt], -1, 200.0);

		if (ObjectsInfo[objectid][oObject] == INVALID_OBJECT_ID)	return SendErrorMessage(playerid, "Obje oluþturulamadý.");

		ObjectsInfo[objectid][oObjectOn] = 1;

		AddObjectToFile(objectid, modelid, ObjectsInfo[objectid][oInt], ObjectsInfo[objectid][oVW], ObjectsInfo[objectid][oPosX], ObjectsInfo[objectid][oPosY], ObjectsInfo[objectid][oPosZ]);
		SendServerMessage(playerid, "Obje oluþturuldu. [ID: %i | MODEL: %i].", objectid, modelid);
		return 1;
	}

	else if (CompareStrings(option, "sil"))
	{
		new objectid;

		if (sscanf(secoption, "i", objectid))		return SendHelpMessage(playerid, "(/aobj)ect sil [ID]");
		if (ObjectsInfo[objectid][oObjectOn] != 1)	return SendErrorMessage(playerid, "Obje bulunamadý.");

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `objects` WHERE `id` = %i", ObjectsInfo[objectid][oID]);
		mysql_tquery(dbHandle, query);

		if (IsValidDynamicObject(ObjectsInfo[objectid][oObject]))	DestroyDynamicObject(ObjectsInfo[objectid][oObject]);

		ObjectsInfo[objectid][oPosX] =
		ObjectsInfo[objectid][oPosY] =
		ObjectsInfo[objectid][oPosZ] =
		ObjectsInfo[objectid][oPosRX] =
		ObjectsInfo[objectid][oPosRY] =
		ObjectsInfo[objectid][oPosRZ] = 0.0;
		ObjectsInfo[objectid][oObjectOn] =
		ObjectsInfo[objectid][oID] = 0;

		SendServerMessage(playerid, "Obje silindi. [ID: %i]", objectid);
		return 1;
	}

	else if (CompareStrings(option, "duzenle"))
	{
		new id, parameters[16], arg[112];

		if (sscanf(secoption, "is[12]S()[112]", id, parameters, arg))
		{
			SendHelpMessage(playerid, "(/aobj)ect edit [ID] [ayar]");
			SendSyntaxMessage(playerid, "pos/texture/texturesil");
			return 1;
		}

		if (id < 0 || id > MAX_OBJECTS - 1 || ObjectsInfo[id][oObjectOn] != 1)	return SendErrorMessage(playerid, "Obje bulunamadý.");

		if (CompareStrings(parameters, "pos"))
		{
			SetPVarInt(playerid, #edit_object, id + 1);
			EditDynamicObject(playerid, ObjectsInfo[id][oObject]);
			return 1;
		}

		else if (CompareStrings(parameters, "texture"))
		{
			new slot, model, txdname[32], texturename[32];

			if (sscanf(arg, "iis[32]s[32]", slot, model, txdname, texturename))
			{
				SendHelpMessage (playerid, "(/aobj)ect duzenle [obje ID] texture [slot (0-15)] [model ID] [TXD isim] [texture isim]");
				return 1;
			}

			if (slot <0 || slot> 15) return SendErrorMessage (playerid, "Slot deðeri 0 ile 15 arasýnda bir deðer olmalýdýr.");
			if (model <0) return SendErrorMessage (playerid, "Model ID 0 deðerinden küçük olamaz.");
			if (strlen (txdname)>= 32) return SendErrorMessage (playerid, "TXD ismi maksimum 32 karakter olmalýdýr.");
			if (strlen (texturename)>= 32) return SendErrorMessage (playerid, "Texture adý maksimum 32 karakter olmalýdýr.");

			if (!SetDynamicObjectMaterial(ObjectsInfo[id][oObject], slot, model, txdname, texturename, 0))	return SendErrorMessage(playerid, "Belirtilen objenin texturesi deðiþtirilemedi.");

			new query[256];
			mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `objects_texture` WHERE `objectid` = %i AND `slot` = %i", ObjectsInfo[id][oID], slot);
			mysql_tquery(dbHandle, query, "OnObjectTextureInsert", "iiiiss", playerid, id, slot, model, txdname, texturename);
			return 1;
		}

		else if (CompareStrings(parameters, "texturesil"))
		{
			if (isnull(arg))	return SendHelpMessage(playerid, "(/aobj)ect duzenle [ID] deltexture [slot (0-15)]");

			new slot = strval(arg);

			if (slot < 0 || slot > 15)	return SendErrorMessage(playerid,"Slot deðeri 0 ile 15 arasýnda bir deðer olmalýdýr.");

			if (!SetDynamicObjectMaterial(ObjectsInfo[id][oObject], slot, -1, "none", "none", 0))	return SendErrorMessage(playerid, "Belirtilen objenin texturesi deðiþtirilemedi.");

			new query[256];
			mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `objects_texture` WHERE `objectid` = %i AND `slot` = %i", ObjectsInfo[id][oID], slot);
			mysql_tquery(dbHandle, query);

			SendServerMessage(playerid,"Belirtilen objenin [ID: %i] texture'u baþarýyla silindi [SLOT: %i].", id, slot);
			return 1;
		}
	}

	else if (CompareStrings(option, "goto"))
	{
		new objectid;

		if (sscanf(secoption, "i", objectid))													return SendHelpMessage(playerid, "(/aobj)ect goto [ID]");
		if (objectid < 0 || objectid > MAX_OBJECTS || ObjectsInfo[objectid][oObjectOn] != 1)	return SendErrorMessage(playerid, "Obje bulunamadý.");

		SetPlayerPosEx(playerid, ObjectsInfo[objectid][oPosX], ObjectsInfo[objectid][oPosY], ObjectsInfo[objectid][oPosZ]);
		SetInterior(playerid, ObjectsInfo[objectid][oInt]);
		SetWorld(playerid, ObjectsInfo[objectid][oVW]);
		SendServerMessage(playerid, "Belirtilen objeye ýþýnlandýnýz [ID: %i].", objectid);
		return 1;
	}

	else if (CompareStrings(option, "sec"))
	{
		SetPVarInt(playerid, #edit_objects, 1);
		SelectObject(playerid);
		SendServerMessage(playerid, "Üzerine týklayarak objelerden birini seçiniz.");
		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "(/aobj)ect [seçenekler]");
		SendHelpMessage(playerid, "olustur/sil/duzenle/sec/goto");
	}
	return 1;
}

CMD:aistasyon(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/aistasyon [ayar]");
		SendHelpMessage(playerid, "olustur/sil/duzenle/goto");
		return 1;
	}

	if (CompareStrings(option, "create"))
	{
		if (GetWorld(playerid) || GetInterior(playerid))	return SendErrorMessage(playerid, "Bir interior içerisinde baz istasyonu oluþturamazsýnýz.");

		new type;

		if (sscanf(secoption, "i", type))	return SendHelpMessage(playerid, "/aistasyon olustur [0 - küçük | 1 - büyük] ");
		if (type < 0 || type > 1)			return SendErrorMessage(playerid, "Baz istasyonu tipi 0 veya 1 olmalýdýr.");
		new towerid = -1;

		for(new i; i < MAX_TOWERS; i++)
		{
			if (TowerInfo[i][towerOn]) continue;

			towerid = i;
			break;
		}

		if (towerid == -1)	return SendErrorMessage(playerid, "Maksimum baz istasyonu sayýsýna ulaþýldý.");

		new Float:x, Float:y, Float:z, Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);
		x += 1.0 * floatsin(-angle, degrees);
		y += 1.0 * floatsin(-angle, degrees);
		z -= 1.6;

		TowerInfo[towerid][towerModel] = (type) ? (3763) : (3030);
		TowerInfo[towerid][towerPosX] = x;
		TowerInfo[towerid][towerPosY] = y;
		TowerInfo[towerid][towerPosZ] = z;
		TowerInfo[towerid][towerPosRX] = 0;
		TowerInfo[towerid][towerPosRY] = 0;
		TowerInfo[towerid][towerPosRZ] = angle;
		TowerInfo[towerid][towerOn] = 1;
		TowerInfo[towerid][towerObject] = CreateDynamicObject(TowerInfo[towerid][towerModel], x, y, z, 0.0, 0.0, angle, 0, 0);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `towers` (`model`, `x`, `y`, `z`, `rz`) VALUES (%i, %f, %f, %f, %f)", type, x, y, z, angle);
		mysql_tquery(dbHandle, query, "OnTowerInsert", "i", towerid);

		new tower_name[16];

		if (!type)	format(tower_name, sizeof(tower_name), "küçük");
		else 		format(tower_name, sizeof(tower_name), "büyük");

		SendServerMessage(playerid, "Baþarýlý þekilde baz istasyonu oluþturuldu: %s [ID: %i].", tower_name, towerid);
		return 1;
	}

	else if (CompareStrings(option, "sil"))
	{
		new towerid;

		if (sscanf(secoption, "d", towerid))										return SendHelpMessage(playerid, "/aistasyon remove [ID]");
		if (towerid < 0 || towerid > MAX_TOWERS || !TowerInfo[towerid][towerOn])	return SendErrorMessage(playerid, "Baz istasyonu bulunamadý.");

		if (IsValidDynamicObject(TowerInfo[towerid][towerObject])) DestroyDynamicObject(TowerInfo[towerid][towerObject]);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `towers` WHERE `id` = %i", TowerInfo[towerid][towerID]);
		mysql_tquery(dbHandle, query);

		TowerInfo[towerid][towerOn] =
		TowerInfo[towerid][towerID] = 0;
		SendServerMessage(playerid, "Baþarýlý þekilde baz istasyonu kaldýrýldý: [ID: %i]", towerid);
		return 1;
	}

	else if (CompareStrings(option, "duzenle"))
	{
		new towerid, parameters[16], arg[112];

		if (sscanf(secoption, "d", towerid))
		{
			SendHelpMessage(playerid, "/aistasyon duzenle [ID] [parametre] ");
			SendHelpMessage(playerid, "Parametre: pos, type");
			return 1;
		}

		if (towerid < 0 || towerid > MAX_TOWERS || !TowerInfo[towerid][towerID])	return SendErrorMessage (playerid, "Baz istasyonu bulunamadý.");

		if (CompareStrings(parameters, "pos"))
		{
			if (GetWorld(playerid) || GetInterior(playerid))																							return SendErrorMessage (playerid, "Baz istasyonunu bir interiorda düzenleyemezsiniz.");
			if (!IsPlayerInRangeOfPoint(playerid, 10.0, TowerInfo[towerid][towerPosX], TowerInfo[towerid][towerPosY], TowerInfo[towerid][towerPosZ]))	return SendErrorMessage (playerid, "Baz istasyonunun yakýnýnda olmalýsýnýz.");
			if (GetPVarInt(playerid, #edit_tower) != 0)																									return SendErrorMessage (playerid, "Baz istasyonunu zaten düzenliyorsunuz.");

			SetPVarInt(playerid, #edit_tower, towerid + 1);
			EditDynamicObject(playerid, TowerInfo[towerid][towerObject]);
			return 1;
		}
		else if (CompareStrings(parameters, "tip"))
		{
			new type;
			if (sscanf (arg, "i", type)) return SendHelpMessage (playerid, "/aistasyon duzenle [ID] tip [0 - küçük | 1 - büyük]");
			if (type <0 || type> 1) return SendErrorMessage (playerid, "Baz istasyonu tipi 0 veya 1 olmalýdýr.");

			TowerInfo[towerid][towerModel] = (type) ? (3763) : (3030);
			SQL_SetInteger("towers", "model", TowerInfo[towerid][towerModel], TowerInfo[towerid][towerID]);

			if (IsValidDynamicObject(TowerInfo[towerid][towerObject])) DestroyDynamicObject(TowerInfo[towerid][towerObject]);

			TowerInfo[towerid][towerObject] = CreateDynamicObject(TowerInfo[towerid][towerModel], TowerInfo[towerid][towerPosX], TowerInfo[towerid][towerPosY], TowerInfo[towerid][towerPosZ], TowerInfo[towerid][towerPosRX],
			TowerInfo[towerid][towerPosRY], TowerInfo[towerid][towerPosRZ], 0, 0);
			SendServerMessage(playerid,"Baz istasyonu tipi deðiþtirildi: [ID:%i]", towerid);
			return 1;
		}
	}

	else if (CompareStrings(option, "goto"))
	{
		new towerid;

		if (sscanf(secoption, "d", towerid))										return SendHelpMessage(playerid, "/atower goto [ID] ");
		if (towerid < 0 || towerid > MAX_TOWERS || !TowerInfo[towerid][towerID])	return SendErrorMessage(playerid, "Baz istasyonu bulunamadý.");

		SetWorld(playerid, 0);
		SetInterior(playerid, 0);
		SetPlayerPosEx(playerid, TowerInfo[towerid][towerPosX], TowerInfo[towerid][towerPosY], TowerInfo[towerid][towerPosZ]);
		SendServerMessage (playerid, "Belirtilen baz istasyonuna ýþýnlandýnýz. [ID: %i]", towerid);
	}
	return 1;
}

CMD:departship(playerid, params[])
{
    if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);

	new depart;

	if (sscanf(params,"i", depart))	return SendHelpMessage(playerid, "/departship [saniye] ");

	ship_depart = gettime() + depart;
	return 1;
}

CMD:timetruck(playerid, params[])
{
    if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);

	new depart;

	if (sscanf(params,"i", depart))	return SendHelpMessage(playerid, "/timetruck [saniye] ");

	time_truck = depart;
	return 1;
}

CMD:nexttship(playerid, params[])
{
    if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);

	new depart;

	if (sscanf(params,"i", depart))	return SendHelpMessage(playerid, "/nexttship [saniye] ");

	ship_next = gettime() + depart;
	return 1;
}

CMD:koprukaldir(playerid)
{
    if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);

	new Float: ox, Float: oy, Float: oz;

	GetPlayerPos(playerid, ox, oy, oz);
	MoveDynamicObject(-22399, ox, oy, oz+60, 2.0);

	return 1;
}

CMD:agaraj(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/agaraj [ayarlar]");
		SendHelpMessage(playerid, "olustur/sil/duzenle/goto/isyeri/ev");
		return 1;
	}

	if (CompareStrings(option, "olustur"))
	{
		new type, price;

		if (sscanf (secoption, "ii", type, price)) return SendHelpMessage (playerid, "/agaraj olustur [tip] [fiyat]");
		if (type <1 || type> 9) return SendErrorMessage (playerid, "Tip 1 ile 9 arasýnda olmalýdýr.");
		if (price <= 0 || price> 1000000) return SendErrorMessage (playerid, "Fiyat $1 ile $ 1,000,000 arasýnda olmalýdýr.");
		if (GetInterior (playerid) || GetWorld (playerid)) return SendErrorMessage (playerid, "Bu komutu normal dünyada kullanmalýsýn.");
		if (IsPlayerInAnyVehicle (playerid)) return SendErrorMessage (playerid, "Herhangi bir araçta olmamalýsýn.");
		if (Garage_Create (playerid, type, price) == -1) return SendErrorMessage (playerid, "Maksimum garaj sayýsýna ulaþýldý.");

		return 1;
	}

	else if (CompareStrings(option, "sil"))
	{
		new id;

		if (sscanf(secoption, "i", id))								return SendHelpMessage(playerid, "/agaraj sil [ID]");
		if (id < 0 || id > MAX_GARAGES || !GarageInfo[id][garageID])	return SendErrorMessage (playerid, "Garaj bulunamadý.");

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `garage` WHERE `id` = %i", GarageInfo[id][garageID]);
		mysql_tquery(dbHandle, query);

		if (IsValidDynamicCP(GarageInfo[id][garageCP]))	DestroyDynamicCP(GarageInfo[id][garageCP]);

		GarageInfo[id][garageID] = 0;
		SendServerMessage (playerid, "Baþarýlý þekilde garaj silindi [ID:%i].", id);
		return 1;
	}

	else if (CompareStrings(option, "duzenle"))
	{
		new id, parameters[16], arg[112];

		if (sscanf(secoption, "is[12]S()[112]", id, parameters, arg))
		{
			SendHelpMessage(playerid, "/agaraj duzenle [ID] [ayarlar]");
			SendHelpMessage(playerid, "pos/aracpos/int/fiyat/kilit");
			return 1;
		}

		if (id < 0 || id >= MAX_GARAGES || !GarageInfo[id][garageID])	return SendErrorMessage (playerid, "Garaj bulunamadý.");

		if (CompareStrings(parameters, "pos"))
		{
			if (IsPlayerInAnyVehicle (playerid)) return SendErrorMessage (playerid, "Herhangi bir araçta olmamalýsýn.");
			if (GetInterior (playerid) || GetWorld (playerid)) return SendErrorMessage (playerid, "Bu komutu normal dünyada kullanmalýsýn.");

			GetPlayerPos(playerid, GarageInfo[id][garagePlayer_Enter][0], GarageInfo[id][garagePlayer_Enter][1], GarageInfo[id][garagePlayer_Enter][2]);
			GarageInfo[id][garageEnterInt] =
			GarageInfo[id][garageEnterVW] = 0;

			if (IsValidDynamicCP(GarageInfo[id][garageCP]))	DestroyDynamicCP(GarageInfo[id][garageCP]);

			GarageInfo[id][garageCP] = CreateDynamicCP(GarageInfo[id][garagePlayer_Enter][0], GarageInfo[id][garagePlayer_Enter][1], GarageInfo[id][garagePlayer_Enter][2], 0.9, 0, 0, -1, 3.0);
			SendServerMessage (playerid, "Belirtilen garajýn giriþi deðiþtirildi [ID:%i].", id);

			SQL_SetFloat("garage", "player_enter_x", GarageInfo[id][garagePlayer_Enter][0], GarageInfo[id][garageID]);
			SQL_SetFloat("garage", "player_enter_y", GarageInfo[id][garagePlayer_Enter][1], GarageInfo[id][garageID]);
			SQL_SetFloat("garage", "player_enter_z", GarageInfo[id][garagePlayer_Enter][2], GarageInfo[id][garageID]);
			SQL_SetInteger("garage", "enter_int", 0, GarageInfo[id][garageID]);
			SQL_SetInteger("garage", "enter_vw", 0, GarageInfo[id][garageID]);
			return 1;
		}

		else if (CompareStrings(parameters, "aracpos"))
		{
			if (!IsPlayerInAnyVehicle(playerid))				return SendErrorMessage (playerid, "Araçta olmalýsýnýz.");
			if (GetInterior (playerid) || GetWorld (playerid)) return SendErrorMessage (playerid, "Bu komutu normal dünyada kullanmalýsýn.");

			GetVehiclePos(GetPlayerVehicleID(playerid), GarageInfo[id][garageVeh_Enter][0], GarageInfo[id][garageVeh_Enter][1], GarageInfo[id][garageVeh_Enter][2]);
			GetVehicleZAngle(GetPlayerVehicleID(playerid), GarageInfo[id][garageVeh_Enter][3]);
			SendServerMessage (playerid, "Belirtilen garajýn araç giriþi deðiþtirildi [ID:%i].", id);

			SQL_SetFloat("garage", "veh_enter_x", GarageInfo[id][garageVeh_Enter][0], GarageInfo[id][garageID]);
			SQL_SetFloat("garage", "veh_enter_y", GarageInfo[id][garageVeh_Enter][1], GarageInfo[id][garageID]);
			SQL_SetFloat("garage", "veh_enter_z", GarageInfo[id][garageVeh_Enter][2], GarageInfo[id][garageID]);
			SQL_SetFloat("garage", "veh_enter_fa", GarageInfo[id][garageVeh_Enter][3], GarageInfo[id][garageID]);
			return 1;
		}

		else if (CompareStrings(parameters, "int"))
		{
			new type;

			if (sscanf(arg, "i", type))						return SendHelpMessage(playerid, "/agaraj duzenle [ID] int [tip] ");
			if (type <1 || type> 9) return SendErrorMessage (playerid, "Tip 1 ile 9 arasýnda olmalýdýr.");
			if (GetInterior(playerid) || GetWorld(playerid))	return SendErrorMessage(playerid, "Bu komutu normal dünyada kullanmalýsýn.");

			GarageInfo[id][garagePlayer_Exit][0] = garage_player_pos[type-1][0];
			GarageInfo[id][garagePlayer_Exit][1] = garage_player_pos[type-1][1];
			GarageInfo[id][garagePlayer_Exit][2] = garage_player_pos[type-1][2];
			GarageInfo[id][garageVeh_Exit][0] = garage_veh_pos[type-1][0];
			GarageInfo[id][garageVeh_Exit][1] = garage_veh_pos[type-1][1];
			GarageInfo[id][garageVeh_Exit][2] = garage_veh_pos[type-1][2];
			GarageInfo[id][garageVeh_Exit][3] = garage_veh_pos[type-1][3];
			GarageInfo[id][garageExitInt] = garage_int[type-1];
			SendServerMessage(playerid, "Belirtilen garajýn interioru deðiþtirildi [ID: %i]. Yeni Deðer: %i.", id, type);

			SQL_SetFloat("garage", "player_exit_x", GarageInfo[id][garagePlayer_Exit][0], GarageInfo[id][garageID]);
			SQL_SetFloat("garage", "player_exit_y", GarageInfo[id][garagePlayer_Exit][1], GarageInfo[id][garageID]);
			SQL_SetFloat("garage", "player_exit_z", GarageInfo[id][garagePlayer_Exit][2], GarageInfo[id][garageID]);
			SQL_SetFloat("garage", "veh_exit_x", GarageInfo[id][garageVeh_Exit][0], GarageInfo[id][garageID]);
			SQL_SetFloat("garage", "veh_exit_y", GarageInfo[id][garageVeh_Exit][1], GarageInfo[id][garageID]);
			SQL_SetFloat("garage", "veh_exit_z", GarageInfo[id][garageVeh_Exit][2], GarageInfo[id][garageID]);
			SQL_SetFloat("garage", "veh_exit_fa", GarageInfo[id][garageVeh_Exit][3], GarageInfo[id][garageID]);
			SQL_SetInteger("garage", "exit_int", GarageInfo[id][garageExitInt], GarageInfo[id][garageID]);
			return 1;
		}

		else if (CompareStrings(parameters, "fiyat"))
		{
			new price;

			if (sscanf(arg, "i", price))			return SendHelpMessage(playerid, "/agaraj duzenle [ID] price [fiyat]");
			if (price <= 0 || price > 1000000)	return SendErrorMessage(playerid, "Fiyat deðer $1 ile $1000000 arasýnda olmalýdýr.");

			GarageInfo[id][garagePrice] = price;
			SQL_SetInteger("garage", "price", GarageInfo[id][garagePrice], GarageInfo[id][garageID]);
			SendServerMessage(playerid, "Belirtilen garajýn fiyatý deðiþtirildi [ID: %i]. Yeni Fiyat: $%i.", id, price);
			return 1;
		}

		else if (CompareStrings(parameters, "kilit"))
		{
			new locked;

			if (sscanf(arg, "i", locked))	return SendHelpMessage(playerid, "/agaraj duzenle [ID] locked [0 - açýk | 1 - kapalý]");
			if (locked < 0 || locked > 1)	return SendErrorMessage(playerid, "Deðer 0 veya 1 olmalýdýr.");

			GarageInfo[id][garageLocked] = locked;
			SQL_SetInteger("garage", "locked", GarageInfo[id][garageLocked], GarageInfo[id][garageID]);
			SendServerMessage(playerid, "Garaj %s [ID: %i].", (locked) ? ("kilitli") : ("kilitli deðil"));
			return 1;
		}

		else
		{
			SendHelpMessage(playerid, "/agaraj duzenle [ID] [ayarlar]");
			SendHelpMessage(playerid, "pos/aracpos/int/fiyat/kilit");
		}
	}

	else if (CompareStrings(option, "goto"))
	{
		new id;

		if (sscanf(secoption, "i", id))									return SendHelpMessage(playerid, "/agaraj goto [ID]");
		if (id < 0 || id >= MAX_GARAGES || !GarageInfo[id][garageID])	return SendErrorMessage(playerid, "Garaj bulunamadý.");

		SetPlayerPosEx(playerid, GarageInfo[id][garagePlayer_Enter][0], GarageInfo[id][garagePlayer_Enter][1], GarageInfo[id][garagePlayer_Enter][2]);
		SetInterior(playerid, GarageInfo[id][garageEnterInt]);
		SetWorld(playerid, GarageInfo[id][garageEnterVW]);
		return 1;
	}

	else if (CompareStrings(option, "isyeri"))
	{
		new type, id, price;

		if (sscanf(secoption, "iii", type, price, id))			return SendHelpMessage(playerid, "/agaraj createbiz [tip] [fiyat] [iþletme ID] ");
		if (type <1 || type> 9) return SendErrorMessage (playerid, "Tip 1 ile 9 arasýnda olmalýdýr.");
		if (price <= 0 || price> 1000000) return SendErrorMessage (playerid, "Fiyat $1 ile $1000000 arasýnda olmalýdýr.");
		if (id <0 || id>= MAX_BIZ ||! BizInfo [id] [bizID]) return SendErrorMessage (playerid, "Belirtilen iþletme bulunamadý.");
		if (Garage_Create(playerid, type, price, 2, id) == -1)	return SendErrorMessage(playerid, "Maksimum garaj sayýsýna ulaþýldý.");

		return 1;
	}

	else if (CompareStrings(option, "ev"))
	{
		new type, id, price;

		if (sscanf(secoption, "iii", type, price, id))			return SendHelpMessage(playerid, "/agarage createhouse [tip] [fiyat] [ev ID]");
		if (type < 1 || type > 9)								return SendErrorMessage(playerid, "Tip 1 ile 9 arasýnda olmalýdýr.");
		if (price <= 0 || price > 1000000)						return SendErrorMessage(playerid, "Fiyat $1 ile $1000000 arasýnda olmalýdýr.");
		if (id < 0 || id >= MAX_HOUSES || !HouseInfo[id][hID])	return SendErrorMessage(playerid, "Ev bulunamadý.");
		if (Garage_Create(playerid, type, price, 1, id) == -1)	return SendErrorMessage(playerid, "Maksimum garaj sayýsýna ulaþýldý.");

		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "/agaraj [ayarlar]");
		SendHelpMessage(playerid, "olustur/sil/duzenle/goto/isyeri/ev");
	}
	return 1;
}

CMD:dovusstili(playerid, params[]) //TO DO MOVE TO SETSTAT
{
	new pid;

	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);
	if (sscanf(params, "u", pid)) 				return SendHelpMessage(playerid, "/changefight [ID/Karakter Adý]");
	if (!IsPlayerLogged(pid)) 					return SendNotConnected(playerid);

	SetPVarInt(playerid, "ChangeFightTo", pid);
	Dialog_Show(playerid, ChangeFight, DIALOG_STYLE_LIST, "{FFFFFF}Dövüþ stili deðiþtir","Normal\nBox\nKungFu\n-\nGrabKick","Deðiþtir","Ýptal");
	return 1;
}

alias:adminhide("ahide");
CMD:adminhide(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);

    PlayerInfo[playerid][pAdminHide] = (PlayerInfo[playerid][pAdminHide]) ? (0) : (1);
    SendServerMessage(playerid, "Yönetici gizlilik durumunuz deðiþtirildi. [%s]", (PlayerInfo[playerid][pAdminHide]) ? ("gizli") : ("görünür"));

	if (PlayerInfo[playerid][pAdminHide] && IsAdminDuty(playerid))		SetPlayerColor(playerid, TEAM_HIT_COLOR);
	else if (!PlayerInfo[playerid][pAdminHide] && IsAdminDuty(playerid))	SetPlayerColor(playerid, TEAM_ADMIN_COLOR);

	return 1;
}

CMD:astand(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/astand [ayarlar]");
		SendHelpMessage(playerid, "olustur/sil/goto");
		return 1;
	}

	if (CompareStrings(option, "olustur"))
	{
		new type;

		if (sscanf (secoption, "i", type)) return SendHelpMessage (playerid, "/astand olustur [0 - nesnesiz | 1 - nesneli]");
		if (type <0 || type> 1) return SendErrorMessage (playerid, "Tip 0 veya 1 olmalýdýr.");
		if (IsPlayerInAnyVehicle (playerid)) return SendErrorMessage (playerid, "Bu komutu herhangi bir araçtayken kullanamazsýnýz.");

		new standid = -1;

		for(new i; i < MAX_FOOD_STAND; i++)
		{
			if (FoodStand[i][fStandOn]) continue;

			standid = i;
			break;
		}

		if (standid == -1)	return SendErrorMessage(playerid, "Maksimum tezgah sayýsýna ulaþýldý.");

		GetPlayerPos(playerid, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ]);

		FoodStand[standid][fPosRX] =
		FoodStand[standid][fPosRY] =
		FoodStand[standid][fPosRZ] = 0.0;
		FoodStand[standid][fVW] = GetWorld(playerid);
		FoodStand[standid][fInt] = GetInterior(playerid);
		FoodStand[standid][fType] = type;

		if (type)
		{
			FoodStand[standid][fObject] = CreateDynamicObject(1340, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ], 0.0, 0.0, 0.0, FoodStand[standid][fVW], FoodStand[standid][fInt], -1, 200.0);
		}

		//FoodStand[standid][fLabel] = CreateDynamic3DTextLabel(""EMBED_CYAN"/yemekal", -1, FoodStand[standid][fPosX] + 1.5, FoodStand[standid][fPosY], FoodStand[standid][fPosZ], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, FoodStand[standid][fVW], FoodStand[standid][fInt], -1, 100.0);
		FoodStand[standid][fPickUp] = CreateDynamicPickup(1239, 1, FoodStand[standid][fPosX] + 1.5, FoodStand[standid][fPosY], FoodStand[standid][fPosZ], FoodStand[standid][fVW], FoodStand[standid][fInt], -1, 100.0);
		FoodStand[standid][fStandOn] = 1;
		AddFoodStandToFile(standid, FoodStand[standid][fType], FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ], FoodStand[standid][fVW], FoodStand[standid][fInt]);
		SendServerMessage(playerid, "Tezgah oluþturuldu [ID: %i].", standid);
		return 1;
	}

	else if (CompareStrings(option, "sil"))
	{
		new standid;

		if (sscanf(secoption, "i", standid))											return SendHelpMessage(playerid, "/astand sil [ID]");
		if (standid < 0 || standid >= MAX_FOOD_STAND || !FoodStand[standid][fStandOn])	return SendErrorMessage(playerid, "Tezgah bulunamadý.");

		if (FoodStand[standid][fType] && IsValidDynamicObject(FoodStand[standid][fObject]))
		{
			DestroyDynamicObject(FoodStand[standid][fObject]);
			FoodStand[standid][fObject] = INVALID_OBJECT_ID;
		}

		/*if (IsValidDynamic3DTextLabel(FoodStand[standid][fLabel]))
		{
			DestroyDynamic3DTextLabel(FoodStand[standid][fLabel]);
			FoodStand[standid][fLabel] = Text3D:INVALID_3DTEXT_ID;
		}*/

		if (IsValidDynamicPickup(FoodStand[standid][fPickUp]))	DestroyDynamicPickup(FoodStand[standid][fPickUp]);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `foodstand` WHERE `id` = %i", FoodStand[standid][fID]);
		mysql_tquery(dbHandle, query);

		FoodStand[standid][fStandOn] =
		FoodStand[standid][fID] = 0;
		SendServerMessage(playerid, "Tezgah kaldýrýldý [ID: %i].", standid);
		return 1;
	}

	else if (CompareStrings(option, "goto"))
	{
		new standid;

		if (sscanf(secoption, "i", standid))											return SendHelpMessage(playerid, "(/food)stand goto [ID]");
		if (standid < 0 || standid >= MAX_FOOD_STAND || !FoodStand[standid][fStandOn])	return SendErrorMessage(playerid, "Tezgah bulunamadý.");

		SetPlayerPosEx(playerid, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ]);
		SetWorld(playerid, FoodStand[standid][fVW]);
		SetInterior(playerid, FoodStand[standid][fInt]);
	}

	else
	{
		SendHelpMessage(playerid, "/astand[ayarlar]");
		SendHelpMessage(playerid, "olustur/sil/goto");
	}
	return 1;
}

CMD:ameslek(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/ameslek [ayarlar]");
		SendHelpMessage(playerid, "olustur/sil/goto");
	}

	if (CompareStrings(option, "olustur"))
	{
		new type;

		if (sscanf(secoption, "i", type))
		{
			SendHelpMessage(playerid, "/ameslek olustur [meslek tipi]");
			SendHelpMessage(playerid, "[1] Kamyon Þoförü | [2] Tamirci | [3] Taksicilik | [4] Pizza Teslimatçýsý | [5] Balýkçý ");
			SendHelpMessage(playerid, "[6] Elektronik Taþýmacýlýk | [7] Araç Hýrsýzý | [8] Oduncu | [9] Çöpçü | [10] Madenci");
			return 1;
		}
		if (type < 0 || type > 10)			return SendErrorMessage(playerid, "Geçersiz meslek tipi seçtiniz.");
		if (IsPlayerInAnyVehicle (playerid)) return SendErrorMessage (playerid, "Bu komutu araçtayken kullanamazsýnýz.");

		new jobid = -1;

		for(new i = 0; i < MAX_JOBS; i++)
		{
			if (JobsInfo[i][jobOn])	continue;

			jobid = i;
			continue;
		}

		if (jobid == -1)	return SendErrorMessage(playerid, "Maksimum meslek limitine ulaþýldý.");

		GetPlayerPos(playerid, JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ]);

		JobsInfo[jobid][jobVW] = GetWorld(playerid);
		JobsInfo[jobid][jobInt] = GetInterior(playerid);
		JobsInfo[jobid][jobType] = type;
		JobsInfo[jobid][jobOn] = 1;

		JobsInfo[jobid][jobPickUp] = CreateDynamicPickup(1210, 1, JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ], JobsInfo[jobid][jobVW], JobsInfo[jobid][jobInt], -1, 100.0);

		new jobtext[32];

		switch(type)
		{
			case JOB_MECHANIC:	jobtext = "Tamirci";
			case JOB_TRUCKER:	jobtext = "Kamyon Þoförü";
			case JOB_TAXI:		jobtext = "Taksici";
			case JOB_PIZZA:		jobtext = "Pizzacý";
			case JOB_CARJACKER: jobtext = "Araç Hýrsýzý";
			case JOB_BALIKCI: 	jobtext = "Balýkçý";
			case JOB_TASIMACILIK: jobtext = "Tasimacilik";
		}

		AddJobToFile(jobid, JobsInfo[jobid][jobType], JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ], JobsInfo[jobid][jobInt], JobsInfo[jobid][jobVW]);
		SendServerMessage(playerid, "Meslek oluþturuldu: %s [ID: %i].", jobtext, jobid);
		
		if (type == JOB_TASIMACILIK)
		{
		    jobCreateStage[playerid] = 1;
		    currentJobID[playerid] = jobid;
		    SendClientMessage(playerid, -1, "{00ff00}Meslek oluþturma aþamasýna baþladýn. {ffffff}(/mesleknokta) ile noktalarý belirleyin.");
		}
		return 1;
	}

	else if (CompareStrings(option, "sil"))
	{
		new jobid;

		if (sscanf(secoption, "i", jobid))								return SendHelpMessage(playerid, "/ameslek sil [ID]");
		if (jobid < 0 || jobid >= MAX_JOBS || !JobsInfo[jobid][jobOn])	return SendErrorMessage(playerid, "Meslek bulunamadý.");

		if (IsValidDynamicPickup(JobsInfo[jobid][jobPickUp]))		DestroyDynamicPickup(JobsInfo[jobid][jobPickUp]);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `jobs` WHERE `id` = %i", JobsInfo[jobid][jobID]);
		mysql_tquery(dbHandle, query);

		JobsInfo[jobid][jobID] =
		JobsInfo[jobid][jobOn] = 0;
		SendServerMessage(playerid, "Meslek silindi: [ID: %i].", jobid);
		return 1;
	}

	else if (CompareStrings(option, "goto"))
	{
		new jobid;

		if (sscanf(secoption, "i", jobid))								return SendHelpMessage(playerid, "/ajob goto [ID] ");
		if (jobid <0 || jobid>= MAX_JOBS ||! JobsInfo [jobid] [jobOn]) return SendErrorMessage (playerid, "Meslek bulunamadý.");

		SetPlayerPosEx(playerid, JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ]);
		SetInterior(playerid, JobsInfo[jobid][jobInt]);
		SetWorld(playerid, JobsInfo[jobid][jobVW]);
	}

	else
	{
		SendHelpMessage(playerid, "/ameslek [ayarlar]");
		SendHelpMessage(playerid, "olustur/sil/goto");
	}
	return 1;
}

CMD:ahizkamerasi(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/hizkamerasi [ayarlar]");
		SendHelpMessage(playerid, "olustur/sil/duzenle/liste");
	}

	if (CompareStrings(option, "olustur"))
	{
		new sp_limit, sp_zone[64], id = SC_GetFreeID();
		if (id == -1)									return SendErrorMessage (playerid, "Tüm kamera slotlarý dolu");
		if (sscanf(secoption, "d", sp_limit))			return SendHelpMessage (playerid, "/hizkamerasi olustur [hýz limiti] / sil / duzenle / liste");
		if (sp_limit <= 0 || sp_limit > SC_MAX_SPEED)	return SendErrorMessage (playerid, "Hýz limiti 1 ile %d arasýnda olmalýdýr.", SC_MAX_SPEED);

        GetPlayerPos(playerid, speedcam[id][sc_x], speedcam[id][sc_y], speedcam[id][sc_z]);
        GetPlayer2DZone(playerid, sp_zone, sizeof(sp_zone));

		format(speedcam[id][sc_name], 64, "%s 12%i", sp_zone, id);

		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

        speedcam[id][sc_speed] = sp_limit;
        speedcam[id][sc_x] = x;
        speedcam[id][sc_y] = y+1;
        speedcam[id][sc_z] = z;
		speedcam[id][sc_rx] = 0;
        speedcam[id][sc_ry] = 0;
        speedcam[id][sc_rz] = 0;
        speedcam[id][sc_int] = GetPlayerInterior(playerid);
        speedcam[id][sc_vw] = GetPlayerVirtualWorld(playerid);
        speedcam[id][sc_object] = CreateDynamicObject(18880, speedcam[id][sc_x], speedcam[id][sc_y], speedcam[id][sc_z], speedcam[id][sc_rx], speedcam[id][sc_ry], speedcam[id][sc_rz], speedcam[id][sc_vw], speedcam[id][sc_int]);
		Iter_Add(speedcamObjects, id);

		speedcam[id][sc_areaid] = CreateDynamicSphere(speedcam[id][sc_x], speedcam[id][sc_y], speedcam[id][sc_z], SC_DEF_RADIUS, speedcam[id][sc_vw], speedcam[id][sc_int]);

		AddSpeedcamToFile(id, sp_limit, speedcam[id][sc_name], speedcam[id][sc_x], speedcam[id][sc_y], speedcam[id][sc_z], 0.0, 0.0, 0.0, speedcam[id][sc_int], speedcam[id][sc_vw]);
        SendServerMessage(playerid, "Yeni bir hýz kamerasý eklendi: [ID: %i] %s | Hýz limiti: %d.", id, speedcam[id][sc_name], sp_limit);
		return 1;
	}

	else if (CompareStrings(option, "sil"))
	{
		new scid;
        if (sscanf(secoption, "i", scid))  return  SendHelpMessage(playerid, "/hizkamerasi sil [id]");
		if(!Iter_Contains(speedcamObjects, scid)) return SendErrorMessage(playerid, "Hatalý dolap ID girdin.");

        if (IsValidDynamicObject(speedcam[scid][sc_object]))
        {
            DestroyDynamicObject(speedcam[scid][sc_object]);
            speedcam[scid][sc_object] = INVALID_OBJECT_ID;
        }

        new sql_query[256];

        SendServerMessage(playerid, "Belirtilen hýz kamerasý kaldýrýldý: [ID: %i | %s].", scid, speedcam[scid][sc_name]);

        speedcam[scid][sc_name] = EOS;
        Iter_Remove(speedcamObjects, scid);

        mysql_format(dbHandle, sql_query, sizeof(sql_query), "DELETE FROM `speedcams` WHERE `id` = %i", scid);
        mysql_tquery(dbHandle, sql_query);
        return 1;
	}

	else if (CompareStrings(option, "duzenle"))
    {
        new sp_near = GetNearestSpeed(playerid, 15.0), thirdoption[64], fouroption[64];

        if (sp_near == -1)	return SendErrorMessage(playerid, "Yakýnýnýzda hýz kamerasý yok.");

        if (sscanf(secoption, "s[64]S()[64]", thirdoption, fouroption))
        {
            SendHelpMessage(playerid, "/hizkamerasi duzenle [ayarlar]");
            SendHelpMessage(playerid, "pos/limit");
            return 1;
        }
        else if (CompareStrings(thirdoption, "limit"))
        {
            new sp_limit;

            if (sscanf(fouroption, "d", sp_limit))          return SendHelpMessage(playerid, "/hizkamerasi duzenle limit [hýz limiti]");
            if (sp_limit <= 0 || sp_limit > SC_MAX_SPEED) 	return SendErrorMessage(playerid, "Hýz limiti 1 ile %d arasýnda olmalýdýr..", SC_MAX_SPEED);

            speedcam[sp_near][sc_speed] = sp_limit;
            SQL_SetInteger("speedcams", "speed", speedcam[sp_near][sc_speed], speedcam[sp_near][sc_id]);
            SendServerMessage(playerid, "Belirtilen hýz kamerasýnýn hýz limiti deðiþtirildi: [ID: %i] %s | Yeni Limit: %d.", sp_near, speedcam[sp_near][sc_name], sp_limit);
            return 1;
        }

        else if (CompareStrings(thirdoption, "pos"))
        {
            SetPVarInt(playerid, "SC:ID", sp_near + 1);
            SetPVarInt(playerid, "SC:Edit", 1);
            EditDynamicObject(playerid, speedcam[sp_near][sc_object]);
            return 1;
        }
    }

    else if (CompareStrings(option, "liste"))
    {
		new dialog_header[96] = "{FFFFFF}Hýz Kamerasý\t{FFFFFF}Hýz Kamerasý ID\t{FFFFFF}Hýz Limiti\n", dialog_body[3072];

		format(dialog_body, sizeof(dialog_body), "%s", dialog_header);

		for(new i = 0; i < Iter_Count(speedcamObjects); i++)
		{
			format(dialog_body, sizeof(dialog_body), "%s%s\t%i\t%d\n", dialog_body, speedcam[i][sc_name], i, speedcam[i][sc_speed]);
		}

		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Hýz Kamerasý Listesi", dialog_body, "Kapat", "");
    }
	return 1;
}

CMD:acctv(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption)) return SendHelpMessage(playerid, "/acctv [olustur/sil/duzenle/liste/tamir/goto]");

	if (CompareStrings(option, "create"))
	{
		new name[32];

		if (sscanf(secoption, "s[32]", name))			return SendHelpMessage(playerid, "/acctv olustur [isim]");
		if (strlen (name) < 4 || strlen (name) > 30) 	return SendErrorMessage (playerid, "Kamera adý minimum 4, maksimum 30 karakter olmalýdýr.");
		if (!CheckCCTVEquals(name)) 					return SendErrorMessage (playerid, "Bu kamera adý kullanýlýyor.");

		new nearcam = GetNearestCamera(playerid, 40.0);

		if (nearcam!= -1) return SendErrorMessage (playerid, "Yakýnýnýzda zaten bir kamera çalýþýyor.");

		new id = -1;

		for(new i = 0; i < MAX_CCTV; i++)
		{
			if (CCTVInfo[i][tvObjectOn])	continue;

			id = i;
			break;
		}

		if (id == -1)	return SendErrorMessage(playerid, "Maksimum CCTV sayýsýna ulaþýldý.");
		format(CCTVInfo[id][tvName], 32, "%s", name);
		GetPlayerPos(playerid, CCTVInfo[id][tvPosX], CCTVInfo[id][tvPosY], CCTVInfo[id][tvPosZ]);

		CCTVInfo[id][tvPosRX] =
		CCTVInfo[id][tvPosRY] =
		CCTVInfo[id][tvPosRZ] = 0.0;
		CCTVInfo[id][tvInt] = GetInterior(playerid);
		CCTVInfo[id][tvVW] = GetWorld(playerid);
		CCTVInfo[id][tvObject] = CreateDynamicObject(1886, CCTVInfo[id][tvPosX], CCTVInfo[id][tvPosY], CCTVInfo[id][tvPosZ], 0.0, 0.0, 0.0, CCTVInfo[id][tvVW], CCTVInfo[id][tvInt]);
		CCTVInfo[id][tvCollision] = CreateDynamicObject(3800, CCTVInfo[id][tvPosX], CCTVInfo[id][tvPosY], CCTVInfo[id][tvPosZ]-1.0, CCTVInfo[id][tvPosRX], CCTVInfo[id][tvPosRY], CCTVInfo[id][tvPosRZ], CCTVInfo[id][tvVW], CCTVInfo[id][tvInt]);
		SetDynamicObjectMaterial(CCTVInfo[id][tvCollision], 0, 16644, "a51_detailstuff", "roucghstonebrtb", 0x00000000);
		CCTVInfo[id][tvObjectOn] = 1;
		AddCameraToFile(id, CCTVInfo[id][tvInt], CCTVInfo[id][tvVW], CCTVInfo[id][tvPosX], CCTVInfo[id][tvPosY], CCTVInfo[id][tvPosZ], 0.0, 0.0, 0.0, name);
		SendServerMessage(playerid, "Yeni CCTV kamerasý eklendi: %s [ID: %i].", CCTVInfo[id][tvName], id);
		return 1;
	}

	else if (CompareStrings(option, "sil"))
	{
		new id;

		if (sscanf(secoption, "i", id))								return SendHelpMessage(playerid, "/acctv sil [ID]");
		if (id < 0 || id >= MAX_CCTV || !CCTVInfo[id][tvObjectOn])	return SendErrorMessage(playerid, "CCTV bulunamadý.");

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `cctvs` WHERE `id` = %i", CCTVInfo[id][tvID]);
		mysql_tquery(dbHandle, query);

		if (IsValidDynamicObject(CCTVInfo[id][tvObject]))
		{
			DestroyDynamicObject(CCTVInfo[id][tvObject]);
			DestroyDynamicObject(CCTVInfo[id][tvCollision]);
			CCTVInfo[id][tvObject] = INVALID_OBJECT_ID;
			CCTVInfo[id][tvCollision] = INVALID_OBJECT_ID;
		}

		CCTVInfo[id][tvID] =
		CCTVInfo[id][tvObjectOn] = 0;
		SendAdmMessageToPlayer(playerid, "CCTV kaldýrýldý: [ID: %i]", id);
		return 1;
	}

	else if (CompareStrings(option, "duzenle"))
	{
		new id, parameters[16], arg[112];

		if (sscanf(secoption, "is[16]S()[112]", id, parameters, arg)) return SendHelpMessage(playerid, "/acctv duzenle [ID] [pos/isim]");

		if (id < 0 || id >= MAX_CCTV || !CCTVInfo[id][tvObjectOn] || !IsValidDynamicObject(CCTVInfo[id][tvObjectOn]))	return SendErrorMessage (playerid, "CCTV bulunamadý");

		if (CompareStrings(parameters, "pos"))
		{
			if (GetPVarInt(playerid, #edit_cctv))																			return SendErrorMessage(playerid, "Þu an zaten CCTV editliyorsunuz.");
			if (!IsPlayerInRangeOfPoint(playerid, 5.0, CCTVInfo[id][tvPosX], CCTVInfo[id][tvPosY], CCTVInfo[id][tvPosZ]))	return SendErrorMessage(playerid, "CCTV yakýnýnýzda deðil.");

			SetPVarInt(playerid, #edit_cctv, id + 1);
			EditDynamicObject(playerid, CCTVInfo[id][tvObject]);
			return 1;
		}

		else if (CompareStrings(parameters, "isim"))
		{
			new name[32];

			if (sscanf(arg, "s[32]", name))				return SendHelpMessage(playerid, "/acctv duzenle [ID] isim [yeni isim]");
			if (strlen(name) < 4 || strlen(name) > 30)	return SendErrorMessage(playerid, "CCTV adý minimum 4, maksimum 30 karakter olmalýdýr.");
			if (!CheckCCTVEquals(name))					return SendErrorMessage(playerid, "Belirtilen CCTV adý kullanýlýyor.");

			format(CCTVInfo[id][tvName], 32, "%s", name);
			SQL_SetString("cctvs", "info", CCTVInfo[id][tvName], CCTVInfo[id][tvID]);
			SendAdmMessageToPlayer(playerid, "Belirtilen CCTV'nin adý deðiþtirildi: [ID: %i] Yeni Ad: %s.", id, CCTVInfo[id][tvName]);
			return 1;
		}
	}

	else if (CompareStrings(option, "liste"))
	{
		new dialog_header[96] = "{FFFFFF}CCTV Adý\t{FFFFFF}ID\tDurum\n", dialog_body[3072];

		format(dialog_body, sizeof(dialog_body), "%s", dialog_header);

		for(new i = 0; i < MAX_CCTV; i++)
		{
			if (!CCTVInfo[i][tvObjectOn]) continue;

			new break_str[24];

            if (CCTVInfo[i][tvBreak])    format(break_str, sizeof(break_str), "{CC0000}DEAKTIF");
            else                        format(break_str, sizeof(break_str), "{00B200}AKTIF");

			format(dialog_body, sizeof(dialog_body), "%s%s\t%i\t%s\n", dialog_body, CCTVInfo[i][tvName], i, break_str);
		}

		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF} CCTV Listesi", dialog_body, "Kapat", "");
		return 1;
	}

	else if (CompareStrings(option, "tamir"))
	{
		for(new i = 0; i < MAX_CCTV; i++)
		{
			if (!CCTVInfo[i][tvObjectOn])                        continue;
        	if (!IsValidDynamicObject(CCTVInfo[i][tvObject])) continue;
			if (!CCTVInfo[i][tvBreak])							continue;

			SetCameraBreakState(i, 0);
		}

		SendServerMessage(playerid,"Tüm CCTV'ler tamir edildi.");
	}

	else if (CompareStrings(option, "goto"))
	{
		new id;

		if (sscanf(secoption, "i", id))								return SendHelpMessage(playerid, "/acctv goto [ID]");
		if (id < 0 || id > MAX_CCTV || !CCTVInfo[id][tvObjectOn])	return SendErrorMessage(playerid, "Belirtilen CCTV bulunamadý.");

		SetPlayerPosEx(playerid, CCTVInfo[id][tvPosX], CCTVInfo[id][tvPosY], CCTVInfo[id][tvPosZ]);
		SetWorld(playerid, CCTVInfo[id][tvVW]);
		SetInterior(playerid, CCTVInfo[id][tvInt]);
		return 1;
	}

	else SendHelpMessage(playerid, "/acctv [olustur/sil/duzenle/liste/tamir/goto]");

	return 1;
}

CMD:aatm(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption)) return SendHelpMessage(playerid, "/aatm [create/remove/edit/goto]");

	if (CompareStrings(option, "create"))
	{
		new id = -1;

		for(new i; i < MAX_ATMS; i++)
		{
			if (ATMInfo[i][atmID]) continue;

			id = i;
			break;
		}

		if (id == -1)	return SendErrorMessage (playerid, "Maksimum ATM sayýsýna ulaþýldý.");

		new Float:x, Float:y, Float:z, Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 1.0 * floatsin(-angle, degrees);
		y += 1.0 * floatcos(-angle, degrees);

		ATMInfo[id][atmPosX] = x;
		ATMInfo[id][atmPosY] = y;
		ATMInfo[id][atmPosZ] = z - 0.4;
		ATMInfo[id][atmPosRZ] = angle;
		ATMInfo[id][atmInt] = GetInterior(playerid);
		ATMInfo[id][atmVW] = GetWorld(playerid);
		ATMInfo[id][atmObject] = CreateDynamicObject(19324, ATMInfo[id][atmPosX], ATMInfo[id][atmPosY], ATMInfo[id][atmPosZ], 0.0, 0.0, ATMInfo[id][atmPosRZ], ATMInfo[id][atmVW], ATMInfo[id][atmInt]);

		SetPVarInt(playerid, #edit_atm, id + 1);
		EditDynamicObject(playerid, ATMInfo[id][atmObject]);

		AddATMToFile(id, ATMInfo[id][atmPosX], ATMInfo[id][atmPosY], ATMInfo[id][atmPosZ], ATMInfo[id][atmPosRZ], ATMInfo[id][atmInt], ATMInfo[id][atmVW]);
		SendServerMessage(playerid, "ATM oluþturuldu: [ID: %i].", id);
		return 1;
	}

	else if (CompareStrings(option, "remove"))
	{
		new id;

		if (sscanf(secoption, "i", id))							return SendHelpMessage(playerid, "/aatm remove [ID]");
		if (id < 0 || id >= MAX_ATMS || !ATMInfo[id][atmID])	return SendErrorMessage(playerid, "ATM bulunamadý.");

		if (IsValidDynamicObject(ATMInfo[id][atmObject]))
		{
			DestroyDynamicObject(ATMInfo[id][atmObject]);
			ATMInfo[id][atmObject] = INVALID_OBJECT_ID;
		}

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `atms` WHERE `id` = %i", ATMInfo[id][atmID]);
		mysql_tquery(dbHandle, query);

		ATMInfo[id][atmID] = 0;
		SendServerMessage(playerid, "ATM kaldýrýldý: [ID: %i].", id);
		return 1;
	}

	else if (CompareStrings(option, "edit"))
	{
		new id;

		if (sscanf(secoption, "d", id))						return SendHelpMessage(playerid, "/aatm edit [ID]");
		if (id < 0 || id > MAX_ATMS || !ATMInfo[id][atmID])	return SendErrorMessage (playerid, "ATM bulunamadý.");
		if (ATM_Nearest (playerid)!= id) 					return SendErrorMessage (playerid, "Yakýnýnýzda ATM bulunmuyor.");

		SetPVarInt(playerid, #edit_atm, id + 1);
		EditDynamicObject(playerid, ATMInfo[id][atmObject]);
		return 1;
	}

	else if (CompareStrings(option, "goto"))
	{
		new id;

		if (sscanf(secoption, "i", id))						return SendHelpMessage(playerid, "/aatm goto [ID] ");
		if (id < 0 || id > MAX_ATMS || !ATMInfo[id][atmID])	return SendErrorMessage(playerid, "ATM bulunamadý.");

		SetPlayerPosEx(playerid, ATMInfo[id][atmPosX], ATMInfo[id][atmPosY], ATMInfo[id][atmPosZ]);
		SetWorld(playerid, ATMInfo[id][atmVW]);
		SetInterior(playerid, ATMInfo[id][atmInt]);
		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "/aatm [create/remove/edit/goto]");
	}
	return 1;
}

CMD:agate(playerid, params[])
{
	new option[16], secoption[128], modelid, faction, gateid, Float:o_rad, toption;

	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);
	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/agate [olustur/sil/duzenle/goto]");
		return 1;
	}

	if (CompareStrings(option, "olustur"))
	{
		if (sscanf(secoption, "ii", modelid, faction)) 	return SendHelpMessage(playerid, "/agate olustur [obje ID] [Birlik ID (/abirlik list)]");
		if (faction < 0 || faction > MAX_FACTIONS-1) 	return SendErrorMessage(playerid, "Belirtilen birlik ID'si geçersiz.");

		new gate = -1;
		for(new i; i < MAX_GATES; i++)
		{
			if (Gates[i][gateID] != 0 || Gates[i][gateObjectOn] != 0) continue;
			gate = i;
			break;
		}

		if (gate == -1) return SendErrorMessage(playerid, "Maksimum gate sayýsýna ulaþýldý.");

		GetPlayerPos(playerid, Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
		GetPlayerPos(playerid, Gates[gate][gateMoveX], Gates[gate][gateMoveY], Gates[gate][gateMoveZ]);

		Gates[gate][gateObject] = CreateDynamicObject(modelid, Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ], 0.0, 0.0, 0.0, GetWorld(playerid), GetInterior(playerid), -1, 200.0);

		if (Gates[gate][gateObject] == INVALID_OBJECT_ID) return SendErrorMessage(playerid, "Obje oluþturulamadý.");

		Gates[gate][gateSpeed] = 0.5;
		Gates[gate][gateRadius] = 5.0;
		Gates[gate][gateModel] = modelid;
		Gates[gate][gateMoveRX] =
		Gates[gate][gateMoveRY] =
		Gates[gate][gateMoveRZ] =
		Gates[gate][gatePosRX] =
		Gates[gate][gatePosRY] =
		Gates[gate][gatePosRZ] = 0.0;
		Gates[gate][gateInt] = GetInterior(playerid);
		Gates[gate][gateVW] = GetWorld(playerid);
		Gates[gate][gateSound] = 0;
		Gates[gate][gateFaction] = faction;
		Gates[gate][gateOpened] = 0;
		Gates[gate][gateObjectOn] = 1;

		AddGateToFile(gate, modelid, faction, GetInterior(playerid), GetWorld(playerid), Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
		SendServerMessage(playerid, "Gate oluþturuldu: [ID: %i]", gate);
		return 1;
	}

	else if (CompareStrings(option, "sil"))
	{
		if (sscanf(secoption, "i", gateid)) return SendHelpMessage(playerid, "/agate sil [ID]");
		if (!Gates[gateid][gateObjectOn])	return SendErrorMessage(playerid, "Belirtilen gate bulunamadý.");

		new query[256];

		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `gates` WHERE `id`= %i", Gates[gateid][gateID]);
		mysql_tquery(dbHandle, query, "OnGateRemove", "i", gateid);

		if (IsValidDynamicObject(Gates[gateid][gateObject])) DestroyDynamicObject(Gates[gateid][gateObject]);

		Gates[gateid][gatePosX] =
		Gates[gateid][gatePosY] =
		Gates[gateid][gatePosZ] =
		Gates[gateid][gatePosRX] =
		Gates[gateid][gatePosRY] =
		Gates[gateid][gatePosRZ] =
		Gates[gateid][gateSpeed] =
		Gates[gateid][gateRadius] =
		Gates[gateid][gateMoveX] =
		Gates[gateid][gateMoveY] =
		Gates[gateid][gateMoveZ] =
		Gates[gateid][gateMoveRX] =
		Gates[gateid][gateMoveRY] =
		Gates[gateid][gateMoveRZ] = 0.0;
		Gates[gateid][gateObjectOn] =
		Gates[gateid][gateInt] =
		Gates[gateid][gateFaction] =
		Gates[gateid][gateOpened] =
		Gates[gateid][gateVW] =
		Gates[gateid][gateID] = 0;

		SendServerMessage(playerid, "Gate kaldýrýldý: [ID: %i]", gateid);
		return 1;
	}

	else if (CompareStrings(option, "duzenle"))
	{
		new parameters[16], arg[112];

		if (sscanf(secoption, "s[16]S()[5]", parameters, arg))
		{
			SendHelpMessage(playerid, "/agate duzenle [pos/hareket/hiz/radius/ses]");
			return 1;
		}

		if (CompareStrings(parameters, "pos"))
		{
			if (sscanf(arg, "i", gateid)) 															return SendHelpMessage(playerid, "/agate duzenle pos [ID]");
			if (gateid < 0 || gateid >= MAX_GATES || !Gates[gateid][gateObjectOn]) 					return SendErrorMessage(playerid, "Gate bulunamadý.");
			if (GetPVarInt(playerid, #2_edit_gate) != 0 || GetPVarInt(playerid, #edit_gate) != 0) 	return SendErrorMessage(playerid, "Þu an obje düzenliyorsunuz.");

			SetPVarInt(playerid, #edit_gate, gateid+1);
			EditDynamicObject(playerid, Gates[gateid][gateObject]);
			return 1;

		}

		else if (CompareStrings(parameters, "hareket"))
		{
			if (sscanf(arg, "i", gateid)) 															return SendHelpMessage(playerid, "/agate duzenle hareket [ID]");
			if (gateid < 0 || gateid >= MAX_GATES || !Gates[gateid][gateObjectOn])					return SendErrorMessage(playerid, "Gate bulunamadý.");
			if (GetPVarInt(playerid, #2_edit_gate) != 0 || GetPVarInt(playerid, #edit_gate) != 0) 	return SendErrorMessage(playerid, "Þu an obje düzenliyorsunuz.");

			SetPVarInt(playerid, #2_edit_gate, gateid+1);
			EditDynamicObject(playerid, Gates[gateid][gateObject]);
			return 1;
		}

		else if (CompareStrings(parameters, "hiz"))
		{
			if (sscanf(arg, "if", gateid, o_rad)) 									return SendHelpMessage(playerid, "/agate duzenle hiz [Gate ID] [hýz (0.1 - 255.0)]");
			if (gateid < 0 || gateid >= MAX_GATES || !Gates[gateid][gateObjectOn]) 	return SendErrorMessage(playerid, "Gate bulunamadý.");
			if (o_rad < 0.1 || o_rad > 255.0) 										return SendErrorMessage(playerid, "Hareket hýzý 0.1 ile 255.0 arasýnda olmalýdýr.");

			Gates[gateid][gateSpeed] = o_rad;
			SQL_SetFloat("gates", "speed", Gates[gateid][gateSpeed], Gates[gateid][gateID]);
			SendServerMessage(playerid, "Gate hareket hýzýný ayarladýnýz: [ID: %i] | Yeni Hýz: %.2f", gateid, o_rad);
			return 1;
		}

		else if (CompareStrings(parameters, "radius"))
		{
			if (sscanf(arg, "if", gateid, o_rad)) 									return SendHelpMessage(playerid, "/agate duzenle radius [ID] [yarýçap (0.1 - 30.0)] ");
			if (gateid < 0 || gateid >= MAX_GATES || !Gates[gateid][gateObjectOn])	return SendErrorMessage(playerid, "Gate bulunamadý.");
			if (o_rad < 0.1 || o_rad > 30.0)										return SendErrorMessage (playerid, "Yarýçap 0.1 ile 30.0 arasýnda olmalýdýr.");

			Gates[gateid][gateRadius] = o_rad;
			SQL_SetFloat("gates", "radius", Gates[gateid][gateRadius], Gates[gateid][gateID]);
			SendServerMessage(playerid, "Gate yarýçapýný ayarladýnýz: [ID: %i] | Yeni Yarýçap: %.2f", gateid, o_rad);
			return 1;
		}

		else if (CompareStrings(parameters, "ses"))
		{
			if (sscanf(arg, "ii", gateid, toption))									return SendHelpMessage(playerid, "/agate duzenle ses [ID] [Ses ID | 0 - sessiz] ");
			if (gateid < 0 || gateid >= MAX_GATES || !Gates[gateid][gateObjectOn]) 	return SendErrorMessage(playerid, "Gate bulunamadý.");
			if (toption < 0)														return SendErrorMessage(playerid, "Ses bulunamadý.");

			Gates[gateid][gateSound] = toption;
			SQL_SetInteger("gates", "sound", Gates[gateid][gateSound], Gates[gateid][gateID]);
			SendServerMessage(playerid, "Gate sesini ayarladýnýz: [ID: %i] | Yeni Ses: %d.", gateid, toption);
			return 1;
		}

		else
		{
			SendHelpMessage(playerid, "/agate duzenle [pos/hareket/hiz/radius/ses]");
		}
		return 1;
	}

	else if (CompareStrings(option, "goto"))
	{
		if (sscanf(secoption, "i", gateid)) 									return SendHelpMessage(playerid, "/agate goto [ID]");
		if (gateid < 0 || gateid >= MAX_GATES || !Gates[gateid][gateObjectOn])	return SendErrorMessage(playerid, "Gate bulunamadý.");

		SetPlayerPosEx(playerid, Gates[gateid][gatePosX], Gates[gateid][gatePosY], Gates[gateid][gatePosZ]);
		SetWorld(playerid, Gates[gateid][gateVW]);
		SetInterior(playerid, Gates[gateid][gateInt]);
		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "/agate [ayarlar]");
		SendHelpMessage(playerid, "olustur/sil/duzenle/goto");
	}
	return 1;
}

CMD:astreet(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

	new option[5], secoption[5];
	if (sscanf(params, "s[7]S()[5]", option, secoption)) return SendHelpMessage(playerid, "/astreet [add/edit/remove/goto]");

	if (CompareStrings(option, "add")) {
		if (!GetPlayerVirtualWorld(playerid) && !GetPlayerInterior(playerid)) {
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);

			x += 1.0;

			/*pTemp[playerid][editPos][0] = x;
			pTemp[playerid][editPos][1] = y;
			pTemp[playerid][editPos][2] = z;

			pTemp[playerid][editPos][3] = x;
			pTemp[playerid][editPos][4] = y;
			pTemp[playerid][editPos][5] = z;*/

			//GetGroupCenter(pTemp[playerid][editPos][3], pTemp[playerid][editPos][4], pTemp[playerid][editPos][5]);
			SetPVarInt(playerid, #edit_street, 1);

			new Street_Sign = CreateDynamicObject(19981, x, y, z, 0.0, 0.0, 0.0, -1, -1, -1, 300.00, 300.00);
			EditDynamicObject(playerid, Street_Sign);
		}
	}
	else if (CompareStrings(option, "edit")) {
		new id;
		if (sscanf(secoption,"i", id)) 	return SendHelpMessage(playerid, "/astreet edit [id]");
		if (!street_data[id][street_id])	return SendErrorMessage(playerid, "Geçersiz ID. (( /near ))");
		if (GetPlayerDistanceFromPoint(playerid, street_data[id][sSign][0], street_data[id][sSign][1], street_data[id][sSign][2]) > 5.0)
			return SendErrorMessage(playerid, "Sokaktan çok uzaksýn!");

		SetPVarInt(playerid, #edit_street, 2);
		SetPVarInt(playerid, #id_street, id);

		EditDynamicObject(playerid, street_data[id][street_object][0]);
	}
	else if (CompareStrings(option, "remove")) {
		new id;
		if (sscanf(secoption,"i", id))	return SendHelpMessage(playerid, "/astreet remove [id]");
		if (!street_data[id][street_id])	return SendErrorMessage(playerid, "Geçersiz ID. (( /near ))");

		DeleteStreet(playerid, id);
	}
	else if (CompareStrings(option, "goto")) {
		new id;
		if (sscanf(secoption,"i", id))	return SendHelpMessage(playerid, "/astreet goto [id]");
		if (!street_data[id][street_id])	return SendErrorMessage(playerid, "Geçersiz ID. (( /near ))");

		SetPlayerPosEx(playerid, street_data[id][sSign][0],street_data[id][sSign][1],street_data[id][sSign][2]);
	}
	return 1;
}

CMD:stname(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

	new id;
	if (sscanf(params,"i", id)) 		return SendHelpMessage(playerid, "/stname [id]");
	if (!street_data[id][street_id])	return SendErrorMessage(playerid, "Geçersiz ID. (( /near ))");
	if (GetPlayerDistanceFromPoint(playerid, street_data[id][sSign][0], street_data[id][sSign][1], street_data[id][sSign][2]) > 5.0)
		return SendErrorMessage(playerid, "Çok uzaktasýnýz!");

	SetPVarInt(playerid, #edit_street, 3);
	EditDynamicObject(playerid, street_data[id][street_object][1]); //Name
	return 1;
}

CMD:stdir(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

	new id;
	if (sscanf(params,"i", id)) 		return SendHelpMessage(playerid, "/stdir [id]");
	if (!street_data[id][street_id])	return SendErrorMessage(playerid, "Geçersiz ID. (( /near ))");
	if (GetPlayerDistanceFromPoint(playerid, street_data[id][sSign][0], street_data[id][sSign][1], street_data[id][sSign][2]) > 5.0)
		return SendErrorMessage(playerid, "Çok uzaktasýnýz!");

	SetPVarInt(playerid, #edit_street, 3);
	EditDynamicObject(playerid, street_data[id][street_object][2]); //sDirection
	return 1;
}

CMD:getareas(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

	new areas[10], j = GetPlayerNumberDynamicAreas(playerid);
	GetPlayerDynamicAreas(playerid, areas, sizeof(areas));
	SM2(playerid, "[_________ TOPLAM: %i _________]", j);
	for(new s; s < 10; s ++) {
		for(new i; i < sizeof(street_names); i++) {
			if (IsValidDynamicArea(areas[s]) && areas[s] == street_zones[i]) {
				SM1(playerid, "[%i] %i. %s", s, i, street_names[i]);
			}
		}
	}


	return 1;
}

alias:abillboard("abb");
CMD:abillboard(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[7]", option, secoption))
	{
		SendHelpMessage(playerid, "/abillboard [olustur/sil/duzenle/goto]");
		return 1;
	}

	if (CompareStrings(option, "olustur"))
	{
        new bb = GetUnusedBillBoard();
	    if (bb == -1) return SendErrorMessage(playerid, "Billboard sýnýrý aþýldý!");

		if (strval(secoption) <= 0) return SendHelpMessage(playerid, "/abb create [fiyat]");

		SetPVarInt(playerid, #BB_COST, strval(secoption));
        ShowModelSelectionMenu(playerid, "Billboards", MODEL_SELECTION_BB, billboard_obj, sizeof(billboard_obj));
	}
	if (CompareStrings(option, "sil"))
	{
		new id;
		if (sscanf(secoption, "I(-1)", id)) return SendHelpMessage(playerid, "/abb remove {c7c7c7}[ID]");

		if (id == -1) {
			if ((id = GetClosestBillBoard(playerid, 15.0)) == -1) return SendErrorMessage(playerid, "Yanýnda billboard yok!");
		}

		if (id >= MAX_BILLBOARDS || id < 0)	return SendErrorMessage(playerid, "Geçersiz ID.");
		if (!BillboardInfo[id][bbActive])	return SendErrorMessage(playerid, "Geçersiz ID.");

		SendServerMessage(playerid, "Billboard baþarýlý þekilde kaldýrýldý. [#%i]", id+1);
		DeleteBillBoard(id);
	}
	if (CompareStrings(option, "duzenle"))
	{
		new id;
		if (sscanf(secoption, "I(-1)", id)) return SendHelpMessage(playerid, "/abb edit {c7c7c7}[ID]");

		if (id == -1) {
			if ((id = GetClosestBillBoard(playerid, 25.0)) == -1) return SendErrorMessage(playerid, "Yakýnýnýzda billboard yok!");
		}

		if (id >= MAX_BILLBOARDS || id < 0)	return SendErrorMessage(playerid, "Geçersiz ID.");
		if (!BillboardInfo[id][bbActive])	return SendErrorMessage(playerid, "Geçersiz ID.");

		SetPVarInt(playerid, "BB:Edit", id+1);
		EditDynamicObject(playerid, BillboardInfo[id][bbObject]);
	}
	if (CompareStrings(option, "goto"))
	{
		new id;
		if (sscanf(secoption, "i", id)) return SendHelpMessage(playerid, "/abb goto {c7c7c7}[ID]");

		if (id >= MAX_BILLBOARDS || id < 0)	return SendErrorMessage(playerid, "Geçersiz ID.");
		if (!BillboardInfo[id][bbActive])	return SendErrorMessage(playerid, "Geçersiz ID.");

		SetPlayerPosEx(playerid, BillboardInfo[id][bbPosX], BillboardInfo[id][bbPosY], BillboardInfo[id][bbPosZ]);
		SetInterior(playerid, BillboardInfo[id][bbInt]);
		SetWorld(playerid, BillboardInfo[id][bbVW]);
	}
	else SendHelpMessage(playerid, "/abillboard [olustur/sil/duzenle/goto]");

	return 1;
}

CMD:atrash(playerid, params[])
{
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/atrash [create / remove / edit / goto]");
		return 1;
	}

	if (CompareStrings(option, "create"))
	{
		new type;

		if (sscanf(secoption, "i", type))    return SendHelpMessage(playerid, "/atrash create [1 - çöp tenekesi | 2 - çöp konteynýrý]");
		if (type < 1 || type > 2)		    return SendErrorMessage(playerid, "Tip 1 veya 2 olmalýdýr.");

        if (GetPlayerInterior(playerid) != 0 ||
            GetPlayerVirtualWorld(playerid) != 0) return SendErrorMessage(playerid, "Dünyanýz 0 olmalýdýr.");

        new id = Trash_CheckFreeSlot();
		if (id == -1) return SendErrorMessage(playerid, "Maksimum çöp kutusu sayýsýna ulaþýldý.");

		GetPlayerPos(playerid, TrashData[id][TrashX], TrashData[id][TrashY], TrashData[id][TrashZ]);
		TrashData[id][TrashX] += 0.5;

        TrashData[id][TrashType] = (type == 1) ? (TYPE_BIN) : (TYPE_DUMPSTER);
       	TrashData[id][TrashLevel] = (TrashData[id][TrashType] == TYPE_BIN) ? 1 : 2;

		new label[64];
        format(label, sizeof(label), "%s", (TrashData[id][TrashType] == TYPE_BIN) ? ("Çöp Tenekesi") : ("Çöp Konteynýrý"));
		TrashData[id][TrashLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, TrashData[id][TrashX], TrashData[id][TrashY], TrashData[id][TrashZ]+1.25, 15.0, .testlos = 1);

        new trashModel = (TrashData[id][TrashType] == TYPE_DUMPSTER) ? 1344 : 1328;
        TrashData[id][TrashObject] = CreateDynamicObject(trashModel, TrashData[id][TrashX], TrashData[id][TrashY], TrashData[id][TrashZ], 0.0, 0.0, TrashData[id][TrashRZ], 0, 0);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `trashes` (type,x,y,z,rz) VALUES (%i,%f,%f,%f,%f)",
            TrashData[id][TrashType],
            TrashData[id][TrashX], TrashData[id][TrashY], TrashData[id][TrashZ], TrashData[id][TrashRZ]
        );
		mysql_tquery(dbHandle, query, "OnTrashInsert", "d", id);

        SetPVarInt(playerid, #edit_trash, id + 1);
		EditDynamicObject(playerid, TrashData[id][TrashObject]);

		SendServerMessage(playerid, "Baþarýlý þekilde çöp %s oluþturuldu: [ID: %i].", (TrashData[id][TrashType] == TYPE_BIN) ? ("tenekesi"):("konteynýrý"), id);
		return 1;
	}

	else if (CompareStrings(option, "remove"))
	{
		new id;

		if (sscanf(secoption, "i", id))						        return SendHelpMessage(playerid, "/atrash remove [ID]");
		if (id < 0 || id >= MAX_TRASHES || !TrashData[id][TrashID])	return SendErrorMessage(playerid, "Çöp Tenekesi/Konteynýrý bulunamadý.");

		if (IsValidDynamicObject(TrashData[id][TrashObject]))
		{
			DestroyDynamicObject(TrashData[id][TrashObject]);
			TrashData[id][TrashObject] = INVALID_OBJECT_ID;
		}

        if (IsValidDynamic3DTextLabel(TrashData[id][TrashLabel]))
		{
			DestroyDynamic3DTextLabel(TrashData[id][TrashLabel]);
			TrashData[id][TrashLabel] = Text3D:INVALID_3DTEXT_ID;
		}

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `trashes` WHERE `id` = %i", TrashData[id][TrashID]);
		mysql_tquery(dbHandle, query);

		TrashData[id][TrashID] = 0;
		SendServerMessage(playerid, "Çöp tenekesi/konteynýrý kaldýrýldý: [ID: %i]", id);
		return 1;
	}

	else if (CompareStrings(option, "edit"))
	{
		new id;

		if (sscanf(secoption, "d", id))						        return SendHelpMessage(playerid, "/atrash edit [ID]");
		if (id < 0 || id > MAX_TRASHES || !TrashData[id][TrashID])	return SendErrorMessage(playerid, "Çöp Tenekesi/Konteynýrý bulunamadý.");
		if (Trash_Nearest(playerid) != id)						    return SendErrorMessage(playerid, "Yakýnýnýzda çöp tenekesi/konteynýrý bulunmuyor.");

		SetPVarInt(playerid, #edit_trash, id + 1);
		EditDynamicObject(playerid, TrashData[id][TrashObject]);
		return 1;
	}

	else if (CompareStrings(option, "goto"))
	{
		new id;

		if (sscanf(secoption, "i", id))						        return SendHelpMessage(playerid, "/atrash goto [ID]");
		if (id < 0 || id > MAX_TRASHES || !TrashData[id][TrashID])	return SendErrorMessage(playerid, "Çöp Tenekesi/Konteynýrý bulunamadý.");

		SetPlayerPosEx(playerid, TrashData[id][TrashX], TrashData[id][TrashY], TrashData[id][TrashZ]);
		SetWorld(playerid, 0);
		SetInterior(playerid, 0);
		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "/atrash [create / remove / edit / goto]");
	}
	return 1;
}

CMD:serverinfo(playerid, params[])
{
	new developer[64];
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))	return SendNotAdmin(playerid);
	format(developer, sizeof(developer), "~r~~h~%i~g~~h~ 0~b~~h~~h~~h~ 65535", GetServerTickRate());
	TextDrawSetString(Developer, developer);
	TextDrawShowForPlayer(playerid, Developer);
	return 1;
}

alias:saveall("saveserver");
CMD:saveall(playerid, params[])
{
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);

	for(new i; i < MAX_BIZ; i++) Save_Business(i);
	for(new i; i < MAX_HOUSES; i++) Save_House(i);
	for(new i; i < MAX_VEHICLES; i++) Save_Car(i);
	for(new i; i < MAX_PLAYERS; i++) Save_User(i);
	for(new i; i < MAX_APART; i++) Save_Apart(i);

	SaveServer();

	SendServerMessage(playerid, "Tüm sunucu verileri kaydedildi.");
	return 1;
}

CMD:afactory(playerid, params[])
{
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/afactory [create / remove / goto]");
		return 1;
	}

	if (CompareStrings(option, "create"))
	{
		new name[32];

		if (sscanf(secoption, "S()[32]", name))     return SendHelpMessage(playerid, "/afactory create [isim]");
		if (strlen(name) < 4 || strlen(name) > 32)	return SendErrorMessage(playerid, "Belirtilen isim minimum 4, maksimum 32 karakter olmalýdýr.");

        if (GetPlayerInterior(playerid) != 0 ||
            GetPlayerVirtualWorld(playerid) != 0) return SendErrorMessage(playerid, "Dünyanýz 0 olmalýdýr.");

        new id = Factory_CheckFreeSlot();
		if (id == -1) return SendErrorMessage(playerid, "Maksimum geri dönüþüm tesisi sayýsýna ulaþýldý.");

		GetPlayerPos(playerid, FactoryData[id][FactoryX], FactoryData[id][FactoryY], FactoryData[id][FactoryZ]);
		format(FactoryData[id][FactoryName], 32, "%s", name);

		new label[128];
        format(label, sizeof(label), "Geri Dönüþüm Tesisi - %s\n\n{FFFFFF}Geri Dönüþtürülmüþ Atýk Miktarý: {F39C12}0", FactoryData[id][FactoryName]);
		FactoryData[id][FactoryLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, FactoryData[id][FactoryX], FactoryData[id][FactoryY], FactoryData[id][FactoryZ] + 0.5, 15.0, .testlos = 1);
		//FactoryData[id][FactoryCP] = CreateDynamicCP(FactoryData[id][FactoryX], FactoryData[id][FactoryY], FactoryData[id][FactoryZ], 6.0);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `factories` (name,x,y,z) VALUES ('%e',%f,%f,%f)",
            FactoryData[id][FactoryName],
            FactoryData[id][FactoryX], FactoryData[id][FactoryY], FactoryData[id][FactoryZ]
        );
		mysql_tquery(dbHandle, query, "OnFactoryInsert", "d", id);

		SendServerMessage(playerid, "Geri dönüþüm tesisi oluþturdunuz: %s [ID: %i]", FactoryData[id][FactoryName], id);
		return 1;
	}

	else if (CompareStrings(option, "remove"))
	{
		new id;

		if (sscanf(secoption, "i", id))						                return SendHelpMessage(playerid, "/afactory remove [ID]");
		if (id < 0 || id >= MAX_FACTORIES || !FactoryData[id][FactoryID])	return SendErrorMessage(playerid, "Geçersiz ID.");

		if (IsValidDynamicCP(FactoryData[id][FactoryCP]))
		{
			DestroyDynamicCP(FactoryData[id][FactoryCP]);
			FactoryData[id][FactoryCP] = INVALID_OBJECT_ID;
		}

        if (IsValidDynamic3DTextLabel(FactoryData[id][FactoryLabel]))
		{
			DestroyDynamic3DTextLabel(FactoryData[id][FactoryLabel]);
			FactoryData[id][FactoryLabel] = Text3D:INVALID_3DTEXT_ID;
		}

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `factories` WHERE `id` = %i", TrashData[id][TrashID]);
		mysql_tquery(dbHandle, query);

        FactoryData[id][FactoryCurrent] = 0;
        FactoryData[id][FactoryID] = 0;

        SendServerMessage(playerid, "Geri dönüþüm tesisi silindi: [ID: %i]", id);
		return 1;
	}

	else if (CompareStrings(option, "goto"))
	{
		new id;

		if (sscanf(secoption, "i", id))						                return SendHelpMessage(playerid, "/afactory goto [ID]");
		if (id < 0 || id >= MAX_FACTORIES || !FactoryData[id][FactoryID])	return SendErrorMessage(playerid, "Geçersiz ID.");

		SetPlayerPosEx(playerid, FactoryData[id][FactoryX], FactoryData[id][FactoryY], FactoryData[id][FactoryZ]);
		SetWorld(playerid, 0);
		SetInterior(playerid, 0);
		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "/afactory [create / remove / goto]");
	}
	return 1;
}

CMD:aindustry(playerid, params[])
{
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))	return SendNotAdmin(playerid);

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/aindustry [create / remove / edit / goto / list]");
		return 1;
	}

	if (CompareStrings(option, "create"))
	{
		new type, name[64];

		if (sscanf(secoption, "is[64]", type, name)) return SendHelpMessage(playerid, "/aindustry create [0 - Hammadde | 1 - Üretim | 2 - Gemi | 3 - Üretim Gereksinimi] [Endüstri Ýsmi]");
		if (type < 0 || type > 3)					 return SendErrorMessage(playerid, "Taþýmacýlýk tipi 0 ile 3 arasýnda olmalýdýr.");
		if (strlen(name) < 4 || strlen(name) > 63)	 return SendErrorMessage(playerid, "Taþýmacýlýk ismi minimum 4, maksimum 63 karakter olmalýdýr.");

		new cargoid = -1;

		for(new i = 0; i < MAX_TRUCK_CARGO; i++)
		{
			if (TruckCargo[i][tOn]) continue;

			cargoid = i;
			break;
		}

		if (cargoid == -1) return SendErrorMessage(playerid, "Maksimum taþýmacýlýk sayýsýna ulaþýldý.");

		GetPlayerPos(playerid, TruckCargo[cargoid][tPosX], TruckCargo[cargoid][tPosY], TruckCargo[cargoid][tPosZ]);

		TruckCargo[cargoid][tType] = type;
		TruckCargo[cargoid][tStorageSize] = 200;
		TruckCargo[cargoid][tProductID] =
		TruckCargo[cargoid][tProductAmount] =
		TruckCargo[cargoid][tPrice] =
		TruckCargo[cargoid][tStorage] =
		TruckCargo[cargoid][tPack] =
		TruckCargo[cargoid][tGps] =
		TruckCargo[cargoid][tLocked] = 0;
		format(TruckCargo[cargoid][tName], 64, "%s", name);

		new mes[128];

		format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\n%i/%i\nFiyat: $%i/miktar.", truckcargo_product[TruckCargo[cargoid][tProductID]], TruckCargo[cargoid][tStorage], TruckCargo[cargoid][tStorageSize], TruckCargo[cargoid][tPrice]);
		TruckCargo[cargoid][tLabel] = CreateDynamic3DTextLabel(mes, 0xFFFFFFFF, TruckCargo[cargoid][tPosX], TruckCargo[cargoid][tPosY], TruckCargo[cargoid][tPosZ]+0.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 100.0);
		TruckCargo[cargoid][tPickup] = CreateDynamicPickup(1318, 1, TruckCargo[cargoid][tPosX], TruckCargo[cargoid][tPosY], TruckCargo[cargoid][tPosZ], 0, 0, -1, 100.0);
		TruckCargo[cargoid][tOn] = 1;

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `truck_cargo` (x, y, z, type, name, storage_size) VALUES (%f, %f, %f, %i, '%e', 200)", TruckCargo[cargoid][tPosX], TruckCargo[cargoid][tPosY], TruckCargo[cargoid][tPosZ],
		type, name);
		mysql_tquery(dbHandle, query, "OnTruckCargoInsert", "d", cargoid);

		SendServerMessage(playerid, "Bir taþýmacýlýk oluþturdunuz: [Ýsim: %s | ID: %i | Tip: %s]", TruckCargo[cargoid][tName], cargoid, TruckCargo[cargoid][tPack]);
		return 1;
	}

	else if (CompareStrings(option, "remove"))
	{
		new cargoid, query[256];

		if (sscanf(secoption, "i", cargoid))										return SendHelpMessage(playerid, "/aindustry remove [ID]");
		if (cargoid < 0 || cargoid >= MAX_TRUCK_CARGO || !TruckCargo[cargoid][tOn])	return SendErrorMessage(playerid, "Belirtilen þirket bulunamadý.");

		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `truck_cargo` WHERE `id` = %i", TruckCargo[cargoid][tID]);
		mysql_tquery(dbHandle, query);

		if (IsValidDynamic3DTextLabel(TruckCargo[cargoid][tLabel]))
		{
			DestroyDynamic3DTextLabel(TruckCargo[cargoid][tLabel]);
			TruckCargo[cargoid][tLabel] = Text3D:INVALID_3DTEXT_ID;
		}
		if (IsValidDynamicPickup(TruckCargo[cargoid][tPickup]))	DestroyDynamicPickup(TruckCargo[cargoid][tPickup]);

		TruckCargo[cargoid][tOn] =
		TruckCargo[cargoid][tID] = 0;
		SendServerMessage(playerid, "Taþýmacýlýk silindi: [ID: %i]", cargoid);
		return 1;
	}

	else if (CompareStrings(option, "edit"))
	{
		new id, parameters[16], arg[112];

		if (sscanf(secoption, "is[12]S()[112]", id, parameters, arg))
		{
			SendHelpMessage(playerid, "/aindustry edit [ID] [storage / size / price / unit / group / locked / gps]");
			return 1;
		}

		if (id < 0 || id >= MAX_TRUCK_CARGO || !TruckCargo[id][tOn])	return SendErrorMessage(playerid, "Belirtilen þirket bulunamadý.");

		new mes[128];

		if (CompareStrings(parameters, "storage"))
		{
			new storage;

			if (sscanf(arg, "i", storage))								return SendHelpMessage(playerid, "/aindustry edit [ID] storage [stok limiti] ");
			if (storage < 0 || storage > TruckCargo[id][tStorageSize])	return SendErrorMessage(playerid, "Stok limiti 0 ile %i arasýnda olmalýdýr.", TruckCargo[id][tStorageSize]);

			TruckCargo[id][tStorage] = storage;
			SQL_SetInteger("truck_cargo", "storage", TruckCargo[id][tStorage], TruckCargo[id][tID]);
			format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\nDepo %i/%i\nFiyat $%i/miktar.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
			UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
			SendServerMessage(playerid, "Belirtilen iþletmenin stok durumu güncellendi: [ID: %i] | Yeni: %i.", id, TruckCargo[id][tStorage]);
			return 1;
		}

		else if (CompareStrings(parameters, "locked"))
		{
			new locked;

			if (sscanf(arg, "i", locked))	return SendHelpMessage(playerid, "/aindustry edit [ID] locked [0 - açýk | 1 - kapalý] ");
			if (locked < 0 || locked > 1)	return SendErrorMessage (playerid, "Deðer 0 veya 1 olmalýdýr.");

			TruckCargo[id][tLocked] = locked;
			SQL_SetInteger("truck_cargo", "locked", TruckCargo[id][tLocked], TruckCargo[id][tID]);
			SendServerMessage(playerid, "Taþýmacýlýk durumu deðiþtirildi: %s [ID: %i].", (!locked) ? ("açýk") : ("kapalý"), id);
			return 1;
		}

		else if (CompareStrings(parameters, "type"))
		{
			new type;

			if (sscanf(arg, "i", type))	return SendHelpMessage(playerid, "/aindustry edit [ID] type [0 - Hammadde | 1 - Üretim | 2 - Gemi | 3 - Üretim Gereksinimi]");
			if (type < 0 || type > 3)	return SendErrorMessage(playerid, "Tip 0 ile 3 arasýnda olmalýdýr.");

			TruckCargo[id][tType] = type;
			SQL_SetInteger("truck_cargo", "type", TruckCargo[id][tType], TruckCargo[id][tID]);
			SendServerMessage(playerid, "Taþýmacýlýk tipi deðiþtirildi: [ID: %i] | Yeni Tip: %i.", id, type);
			return 1;
		}

		else if (CompareStrings(parameters, "gps"))
		{
			new locked;

			if (sscanf(arg, "i", locked))	return SendHelpMessage(playerid, "/aindustry edit [ID] gps [0 - gizli / 1 - görünür]");
			if (locked < 0 || locked > 1)	return SendErrorMessage(playerid, "Deðer 0 veya 1 olmalýdýr.");

			TruckCargo[id][tGps] = locked;
			SQL_SetInteger("truck_cargo", "gps", TruckCargo[id][tGps], TruckCargo[id][tID]);
			SendServerMessage(playerid, "Taþýmacýlýk GPS görünürlüðü deðiþtirildi: %s [ID: %i]", (!locked) ? ("Görünür") : ("Gizli"), id);
			return 1;
		}

		else if (CompareStrings(parameters, "size"))
		{
			new size;

			if (sscanf(arg, "i", size))		return SendHelpMessage(playerid, "/aindustry edit [ID] size [büyüklük]");
			if (size <= 0 || size > 10000)	return SendErrorMessage(playerid, "Büyüklük 1 ile 10000 arasýnda bir deðer olmalýdýr.");

			TruckCargo[id][tStorageSize] = size;
			SQL_SetInteger("truck_cargo", "storage_size", TruckCargo[id][tStorageSize], TruckCargo[id][tID]);
			format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\nDepo %i/%i\nFiyat $%i/miktar.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
        	UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
			SendServerMessage(playerid, "Deponun boyutunu deðiþtirdiniz: [ID: %i] | Yeni Deðer: %i.", id, TruckCargo[id][tStorageSize]);
			return 1;
		}

		else if (CompareStrings(parameters, "price"))
		{
			new price;

			if (sscanf(arg, "i", price))		return SendHelpMessage(playerid, "/aindustry edit [ID] price [fiyat]");
			if (price < 1 || price > 10000)	return SendErrorMessage(playerid, "Fiyat $1 ile $10000 arasýnda olmalýdýr.");

			TruckCargo[id][tPrice] = price;
			SQL_SetInteger("truck_cargo", "price", TruckCargo[id][tPrice], TruckCargo[id][tID]);
			format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\nDepo %i/%i\nFiyat $%i/miktar.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
        	UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
			SendServerMessage(playerid, "Deponun birim fiyatýný deðiþtirdiniz: [ID: %i] | Yeni Deðer: $%i.", id, TruckCargo[id][tPrice]);
			return 1;
		}

		else if (CompareStrings(parameters, "unit"))
		{
			new unit;

			if (sscanf(arg, "i", unit))		return SendHelpMessage(playerid, "/aindustry edit [ID] unit [saat baþýna birim]");
			if (unit < -100 || unit > 100)	return SendErrorMessage(playerid, "Birim deðeri -100 ile 100 arasýnda olmalýdýr.");

			TruckCargo[id][tProductAmount] = unit;
			SQL_SetInteger("truck_cargo", "product_amount", TruckCargo[id][tProductAmount], TruckCargo[id][tID]);
			format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\nDepo %i/%i\nFiyat $%i/miktar.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
        	UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
			SendServerMessage(playerid, "Depodaki saat baþýna mal ilave durumun deðiþtirdiniz: [ID: %i] | Yeni Deðer: %i", id, TruckCargo[id][tProductAmount]);
			return 1;
		}

		else if (CompareStrings(parameters, "group"))
		{
			new pack;

			if (sscanf(arg, "i", pack))
			{
				SendHelpMessage(playerid, "/aindustry edit [ID] group [grup]");
				SendServerMessage(playerid, "Mevcut taþýmacýlýk grubu: %i.", TruckCargo[id][tPack]);
				return 1;
			}	//î
			if (pack < 0 || pack > MAX_TRUCK_PACK)	return SendErrorMessage(playerid, "Taþýmacýlýk grubu 0 ile %i arasýnda bir deðer olmalýdýr.", MAX_TRUCK_PACK);

			TruckCargo[id][tPack] = pack;
			SQL_SetInteger("truck_cargo", "pack", TruckCargo[id][tPack], TruckCargo[id][tID]);
			SendServerMessage(playerid, "Taþýmacýlýk grubu deðiþtirildi: [ID: %i] | Yeni Deðer: %i.", id, TruckCargo[id][tPack]);
			return 1;
		}

		else
		{
			SendHelpMessage(playerid, "/aindustry edit [ID] [storage / size / price / unit / group / locked / gps]");
			return 1;
		}
	}

	else if (CompareStrings(option, "goto"))
	{
		new cargoid;

		if (sscanf(secoption, "i", cargoid))										return SendHelpMessage(playerid, "/aindustry goto [ID]");
		if (cargoid < 0 || cargoid >= MAX_TRUCK_CARGO || !TruckCargo[cargoid][tOn])	return SendErrorMessage(playerid, "Endüstri bulunamadý.");

		SetPlayerPosEx(playerid, TruckCargo[cargoid][tPosX], TruckCargo[cargoid][tPosY], TruckCargo[cargoid][tPosZ]);
		SetInterior(playerid, 0);
		SetWorld(playerid, 0);
		SendServerMessage(playerid, "Belirtilen yere ýþýnlandýnýz: %s [ID: %i].", TruckCargo[cargoid][tName], cargoid);
		return 1;
	}

	else if (CompareStrings(option, "list"))
	{
		pTemp[playerid][pDialogList] = 0;
		DisplayCargoGroups(playerid);
	}
	return 1;
}

CMD:payday(playerid, params[])
{
	new userid;
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))		return SendNotAdmin(playerid);
	if (sscanf(params, "u", userid))		return SendHelpMessage(playerid, "/payday [ID/Karakter Adý]");
	if (userid == INVALID_PLAYER_ID)		return SendErrorMessage(playerid, "Belirtilen oyuncu bulunamadý.");

	PayDay(userid);

	SendServerMessage(userid, "Yönetici size payday verdi.");
	SendServerMessage(playerid, "%s adlý oyuncuya payday verdiniz.", GetNameEx(userid));
	return 1;
}

CMD:paydayall(playerid, params[])
{
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))		return SendNotAdmin(playerid);

	for(new i = 0; i < MAX_PLAYERS; i++)
		PayDay(i);

	SendAdmMessageToAll("%s adlý yönetici tüm aktif oyunculara payday verdi.", GetAccName(playerid));
	return 1;
}

CMD:testmsgs(playerid, params[])
{
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))		return SendNotAdmin(playerid);

	new type, str[64];
	if (sscanf(params, "is[64]", type, str))		return SendHelpMessage(playerid, "/testmsgs [tip] [yazý]");
	if (type < 0 || type > 1)					return 1;

	switch(type)
	{
		case 0: JobMessage(playerid, str, 10);
		case 1: InfoMSG(playerid, str, 10);
	}

	return 1;
}

///////////////////////////////////
CMD:server(playerid, params[])
{
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))		return SendNotAdmin(playerid);

	new opt[19], str[64];

	if(sscanf(params, "s[19]S()[64]", opt, str))
	{
		SendHelpMessage(playerid, "/server [seçenek]");
		SM1(playerid, "isim, url, dil, harita, versiyon, bakim, hava, paydayfiyati, parkfiyati, 2xpayday");
		SM1(playerid, "galerisatisyuzdesi, minimummaas, maksimummaas, spawnbolgesi, isyerisistemesatisyuzdesi");
		SM1(playerid, "taksilisansucret, taksireklamucret, arackayityuzdesi, arachaftalik, suruculisansucreti");

		return 1;
	}

	if(!strcmp(opt, "isim", true))
	{
		new name[124];

		if(sscanf(str, "s[124]", name))
			return SendHelpMessage(playerid, "/server <isim> [sunucu ismi]");

		format(ServerInfo[sHostName], sizeof(ServerInfo[sHostName]), name);
		SaveServer();

		SendRconCommand(sprintf("hostname %s%s", (ServerInfo[sMaintenance]) ? ("[BAKIM] ") : (""), name));

		SendAdmMessage("%s, sunucu adýný \"%s\" olarak deðiþtirdi.", GetNameEx(playerid), name);
	}

	else if(!strcmp(opt, "url", true))
	{
		new url[64];

		if(sscanf(str, "s[64]", url))
			return SendHelpMessage(playerid, "/server <url> [site url]");

		format(ServerInfo[sWebUrl], sizeof(ServerInfo[sWebUrl]), url);
		SaveServer();

		SendRconCommand(sprintf("weburl %s", url));

		SendAdmMessage("%s, sunucu urlsini \"%s\" olarak deðiþtirdi.", GetNameEx(playerid), url);
	}

	else if(!strcmp(opt, "dil", true))
	{
		new language[32];

		if(sscanf(str, "s[32]", language))
			return SendHelpMessage(playerid, "/server <dil> [sunucu dili]");

		format(ServerInfo[sLanguage], sizeof(ServerInfo[sLanguage]), language);
		SaveServer();

		SendRconCommand(sprintf("language %s", language));

		SendAdmMessage("%s, sunucu dilini \"%s\" olarak deðiþtirdi.", GetNameEx(playerid), language);
	}

	else if(!strcmp(opt, "harita", true))
	{
		new map[32];

		if(sscanf(str, "s[32]", map))
			return SendHelpMessage(playerid, "/server <harita> [sunucu haritasý]");

		format(ServerInfo[sMap], sizeof(ServerInfo[sMap]), map);
		SaveServer();

		SendRconCommand(sprintf("mapname %s", map));

		SendAdmMessage("%s, sunucu haritasýný \"%s\" olarak deðiþtirdi.", GetNameEx(playerid), map);
	}

	else if(!strcmp(opt, "versiyon", true))
	{
		new version[32];

		if(sscanf(str, "s[32]", version))
			return SendHelpMessage(playerid, "/server <versiyon> [sunucu versiyonu]");

		format(ServerInfo[sVersion], sizeof(ServerInfo[sVersion]), version);
		SaveServer();

		SetGameModeText(version);

		SendAdmMessage("%s, sunucu versiyonunu \"%s\" olarak deðiþtirdi.", GetNameEx(playerid), version);
	}

	else if(!strcmp(opt, "bakim", true))
	{
		switch(ServerInfo[sMaintenance])
		{
			case false:
			{
				new password[64];

				if(sscanf(str, "s[64]", password))
					return SendHelpMessage(playerid, "/server <bakim> [bakým modu þifresi]");

				if(!strcmp(password, "0", true))
					return SendErrorMessage(playerid, "Geçersiz þifre girdiniz.");

				ServerInfo[sMaintenance] = true;
				format(ServerInfo[sPassword], sizeof(ServerInfo[sPassword]), password);

				SaveServer();

				SendRconCommand(sprintf("hostname [BAKIM] %s", ServerInfo[sHostName]));
				SendRconCommand(sprintf("password %s", password));

				SendAdmMessage("%s, sunucu bakým modu þifresini \"%s\" olarak deðiþtirdi.", GetNameEx(playerid), password);

			}

			case true:
			{
				ServerInfo[sMaintenance] = false;
				format(ServerInfo[sPassword], sizeof(ServerInfo[sPassword]), "0");

				SaveServer();

				SendRconCommand(sprintf("hostname %s", ServerInfo[sHostName]));
				SendRconCommand("password 0");

				SendAdmMessage("%s, sunucuyu bakým modundan çýkarttý.", GetNameEx(playerid));
			}
		}
	}

	else if(!strcmp(opt, "2xpayday", true))
	{
		switch(ServerInfo[sDoublePayday])
		{
			case false:
			{
				ServerInfo[sDoublePayday] = true;

				SaveServer();

				SendRconCommand(sprintf("hostname [2x PayDay] %s", ServerInfo[sHostName]));

	            new mes[128];
	            format(mes, sizeof(mes), "[Duyuru] Çift maaþ(2x PayDay) aktif edildi.");
	            SCMALL(0xF97804FF,mes);
			}

			case true:
			{
				ServerInfo[sDoublePayday] = false;

                SaveServer();

				SendRconCommand(sprintf("hostname %s", ServerInfo[sHostName]));

	            new mes[128];
	            format(mes, sizeof(mes), "[Duyuru] Çift maaþ(2x PayDay) pasife çekildi.");
	            SCMALL(0xF97804FF,mes);
			}
		}
	}

	else if(!strcmp(opt, "hava", true))
	{
		new weather;

		if(sscanf(str, "d", weather))
			return SendHelpMessage(playerid, "/server <hava> [hava numarasý]");

		pc_cmd_havadurumu(playerid, sprintf("%d", weather));
	}

	else if(!strcmp(opt, "paydayfiyati", true))
	{
		new price;

		if(sscanf(str, "d", price))
			return SendHelpMessage(playerid, "/server <paydayfiyati> [fiyat]");

		if(price < 1 || price > 5000)
			return SendErrorMessage(playerid, "Geçersiz payday fiyatý girdiniz.");

		SendAdmMessage("%s, paydayi $%d olarak deðiþtirdi. (eski: $%d)", GetNameEx(playerid), price, ServerInfo[sPricePayday]);

		ServerInfo[sPricePayday] = price;
		SaveServer();
	}

	else if(!strcmp(opt, "parkfiyati", true))
	{
		new price;

		if(sscanf(str, "d", price))
			return SendHelpMessage(playerid, "/server <parkfiyati> [fiyat]");

		if(price < 1 || price > 1000)
			return SendErrorMessage(playerid, "Geçersiz payday fiyatý girdiniz.");

		SendAdmMessage("%s, park fiyatýný $%d olarak deðiþtirdi. (eski: $%d)", GetNameEx(playerid), price, ServerInfo[sPricePark]);

		ServerInfo[sPricePark] = price;
		SaveServer();
	}

	else if(!strcmp(opt, "galerisatisyuzdesi", true))
	{
		new Float:percent;

		if(sscanf(str, "f", percent))
			return SendHelpMessage(playerid, "/server <galerisatisyuzdesi> [yüzde]");

		if(percent < 1.0 || percent > 100.0)
			return SendErrorMessage(playerid, "Geçersiz galeri satýþ yüzdesi girdiniz.");

		SendAdmMessage("%s, galeri satýþ yüzdesini %.2f olarak deðiþtirdi. (eski: %.2f)", GetNameEx(playerid), percent, ServerInfo[sDealershipPercent]);

		ServerInfo[sDealershipPercent] = percent;
		SaveServer();
	}

	else if(!strcmp(opt, "minimummaas", true))
	{
		new price;

		if(sscanf(str, "d", price))
			return SendHelpMessage(playerid, "/server <minimummaas> [fiyat]");

		if(price < 1 || price > 2500)
			return SendErrorMessage(playerid, "Geçersiz minimum maaþ fiyatý girdiniz.");

		SendAdmMessage("%s, iþyerleri için minimum maaþý $%d olarak deðiþtirdi. (eski: $%d)", GetNameEx(playerid), price, ServerInfo[lMinSalary]);

		ServerInfo[lMinSalary] = price;
		SaveServer();
	}

	else if(!strcmp(opt, "maksimummaas", true))
	{
		new price;

		if(sscanf(str, "d", price))
			return SendHelpMessage(playerid, "/server <maksimummaas> [fiyat]");

		if(price < 1 || price > 2500)
			return SendErrorMessage(playerid, "Geçersiz maksimum maaþ fiyatý girdiniz.");

		SendAdmMessage("%s, iþyerleri için maksimum maaþý $%d olarak deðiþtirdi. (eski: $%d)", GetNameEx(playerid), price, ServerInfo[lMaxSalary]);

		ServerInfo[lMaxSalary] = price;
		SaveServer();
	}

	else if(!strcmp(opt, "spawnbolgesi", true))
	{
		ServerInfo[sSpawnInterior] = GetPlayerInterior(playerid);
		ServerInfo[sSpawnWorld] = GetPlayerVirtualWorld(playerid);

		GetPlayerPos(playerid, ServerInfo[sSpawnX], ServerInfo[sSpawnY], ServerInfo[sSpawnZ]);
		GetPlayerFacingAngle(playerid, ServerInfo[sSpawnA]);

		SendAdmMessage("%s, sunucunun spawn bölgesini deðiþtirdi.", GetNameEx(playerid));
	}

	else if(!strcmp(opt, "isyerisistemesatisyuzdesi", true))
	{
		new Float:percent;

		if(sscanf(str, "f", percent))
			return SendHelpMessage(playerid, "/server <isyerisistemesatisyuzdesi> [yüzde]");

		if(percent < 1.0 || percent > 100.0)
			return SendErrorMessage(playerid, "Geçersiz iþyeri sisteme satýþ yüzdesi girdiniz.");

		SendAdmMessage("%s, iþyeri sisteme satýþ yüzdesini %.2f olarak deðiþtirdi. (eski: %.2f)", GetNameEx(playerid), percent, ServerInfo[sLocaleSalePercent]);

		ServerInfo[sLocaleSalePercent] = percent;
		SaveServer();
	}

	else if(!strcmp(opt, "taksilisansucret", true))
	{
		new price;

		if(sscanf(str, "d", price))
			return SendHelpMessage(playerid, "/server <taksilisansucret> [ücret]");

		if(price < 0)
			return SendErrorMessage(playerid, "Geçersiz ücret girdiniz.");

		SendAdmMessage("%s, taksi lisans ücretini $%d olarak deðiþtirdi. (eski: $%d)", GetNameEx(playerid), price);

		ServerInfo[sPriceTaxiLicense] = price;
	}

	else if(!strcmp(opt, "taksireklamucret", true))
	{
		new price;

		if(sscanf(str, "d", price))
			return SendHelpMessage(playerid, "/server <taksireklamucret> [ücret]");

		if(price < 0)
			return SendErrorMessage(playerid, "Geçersiz ücret girdiniz.");

		SendAdmMessage("%s, taksi reklam ücretini $%d olarak deðiþtirdi. (eski: $%d)", GetNameEx(playerid), price, ServerInfo[sPriceTaxiAd]);

		ServerInfo[sPriceTaxiAd] = price;
	}

	else if(!strcmp(opt, "arackayityuzdesi", true))
	{
		new Float:percent;

		if(sscanf(str, "f", percent))
			return SendHelpMessage(playerid, "/server <arackayityuzdesi> [yüzde deðeri]");

		if(percent < 1)
			return SendErrorMessage(playerid, "Geçersiz yüzde deðeri girdiniz.");

		SendAdmMessage("%s, araç kayýt ücretinin yüzdesini aracýn %.2f deðeri olarak deðiþtirdi. (eski: %.2f)", GetNameEx(playerid), percent, ServerInfo[sPriceVehRegisterPercent]);

		ServerInfo[sPriceVehRegisterPercent] = percent;
	}

	else if(!strcmp(opt, "arachaftalikvergi", true))
	{
		new Float:percent;

		if(sscanf(str, "f", percent))
			return SendHelpMessage(playerid, "/server <arachaftalikvergi> [yüzde deðeri]");

		if(percent < 1)
			return SendErrorMessage(playerid, "Geçersiz yüzde deðeri girdiniz.");

		SendAdmMessage("%s, araç haftalýk vergi yüzdesini %.2f deðeri olarak deðiþtirdi. (eski: %.2f)", GetNameEx(playerid), percent, ServerInfo[sPriceVehWeeklyTaxPercent]);

		ServerInfo[sPriceVehWeeklyTaxPercent] = percent;
	}

	else if(!strcmp(opt, "suruculisansucreti", true))
	{
		new price;

		if(sscanf(str, "d", price))
			return SendHelpMessage(playerid, "/server <suruculisansucreti> [ücret]");

		if(price < 1)
			return SendErrorMessage(playerid, "Geçersiz ücret girdiniz.");

		SendAdmMessage("%s, sürücü lisans ücretini $%d olarak deðiþtirdi. (eski: $%d)", GetNameEx(playerid), price, ServerInfo[sPriceDriverLicense]);

		ServerInfo[sPriceDriverLicense] = price;
	}

	else SendErrorMessage(playerid, "Geçersiz seçenek girdiniz.");

	return 1;
}

CMD:createskin(playerid, params[])
{
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))		return SendNotAdmin(playerid);
    new model_id, gender, race, price;

    if(sscanf(params, "dddd", model_id, gender, race, price))
        return SendHelpMessage(playerid, "/createskin [model id] [cinsiyet (1: Erkek, 2: Kadýn)] [ten rengi (1: Beyaz, 2: Siyah)] [fiyat]");

    if(model_id < 1 || model_id == 74)
        return SendErrorMessage(playerid, "Geçersiz model numarasý girdiniz.");

    if(gender != GENDER_MALE && gender != GENDER_FEMALE)
        return SendErrorMessage(playerid, "Geçersiz cinsiyet girdiniz.");

    if(price < 1)
        return SendErrorMessage(playerid, "Geçersiz fiyat girdiniz.");

    mysql_tquery(dbHandle, GetSkin("game_skins.id", "", "", 1, -1, -1, model_id, gender, race), "OnStaffCreateSkin", "ddddd", playerid, model_id, gender, race, price);

    return 1;
}

CMD:deleteskin(playerid, params[])
{
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))		return SendNotAdmin(playerid);
    new model_id;

    if(sscanf(params, "d", model_id))
        return SendHelpMessage(playerid, "/deleteskin [model id]");

    if(model_id < 1 || model_id == 74)
        return SendErrorMessage(playerid, "Geçersiz model numarasý girdiniz.");

    mysql_tquery(dbHandle, GetSkin("game_skins.id, game_skins.gender, game_skins.race", "", "", 1, -1, -1, model_id), "OnStaffDeleteSkin", "dd", playerid, model_id);

    return 1;
}

CMD:editskin(playerid, params[])
{
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))		return SendNotAdmin(playerid);
    new skin_id, opt[12], str[32];

    if(sscanf(params, "ds[12]S()[32]", skin_id, opt, str))
    {
        SendHelpMessage(playerid, "/editskin [skin veritabaný numarasý] [seçenek]");
        SM1(playerid, "cinsiyet, ten, fiyat");
        return 1;
    }

    if(skin_id < 1)
        return SendErrorMessage(playerid, "Geçersiz skin numarasý girdiniz.");

    if(!strcmp(opt, "cinsiyet", true))
    {
        new gender;

        if(sscanf(str, "d", gender))
            return SendHelpMessage(playerid, "/editskin <skin veritabaný numarasý> <cinsiyet> [cinsiyet (1: Erkek, 2: Kadýn)]");

        if(gender != GENDER_MALE && gender != GENDER_FEMALE)
            return SendErrorMessage(playerid, "Geçersiz seçenek girdiniz.");

        mysql_tquery(dbHandle, EditSkin(skin_id, -1, gender), "OnStaffEditSkinGender", "ddd", playerid, skin_id, gender);
    }

    else if(!strcmp(opt, "ten", true))
    {
        new race;

        if(sscanf(str, "d", race))
            return SendHelpMessage(playerid, "/editskin <skin veritabaný numarasý> <ten> [ten (1: Beyaz, 2: Siyah)]");

        if(race != RACE_WHITE && race != RACE_BLACK && race != 3)
            return SendErrorMessage(playerid, "Geçersiz ten rengi girdiniz.");

        mysql_tquery(dbHandle, EditSkin(skin_id, -1, -1, race), "OnStaffEditSkinRace", "ddd", playerid, skin_id, race);
    }

    else if(!strcmp(opt, "fiyat", true))
    {
        new price;

        if(sscanf(str, "d", price))
            return SendHelpMessage(playerid, "/editskin <skin veritabaný numarasý> <fiyat> [fiyat]");

        if(price < 1)
            return SendErrorMessage(playerid, "Geçersiz fiyat girdiniz.");

        mysql_tquery(dbHandle, EditSkin(skin_id, -1, -1, -1, price), "OnStaffEditSkinPrice", "ddd", playerid, skin_id, price);
    }

    else SendErrorMessage(playerid, "Geçersiz seçenek girdiniz.");

    return 1;
}

CMD:listskins(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))		return SendNotAdmin(playerid);
    new opt[9], str[32];

    if(sscanf(params, "s[9]S()[32]", opt, str))
    {
        SendHelpMessage(playerid, "/listskins [seçenek]");
        SM1(playerid, "hepsi, cinsiyet, ten");
        return 1;
    }

    if(!strcmp(opt, "hepsi", true))
    {
        mysql_tquery(dbHandle, GetSkin("game_skins.model_id, game_skins.id, game_skins.gender, game_skins.race"), "OnStaffListSkins", "d", playerid);
    }

    else if(!strcmp(opt, "cinsiyet", true))
    {
        new gender;

        if(sscanf(str, "d", gender))
            return SendHelpMessage(playerid, "/listskins <cinsiyet> [cinsiyet (1: Erkek, 2: Kadýn)]");

        if(gender != GENDER_MALE && gender != GENDER_FEMALE)
            return SendErrorMessage(playerid, "Geçersiz cinsiyet girdiniz.");

        mysql_tquery(dbHandle, GetSkin("game_skins.model_id, game_skins.id, game_skins.gender, game_skins.race", "", "", 1, -1, -1, -1, gender), "OnStaffListSkins", "d", playerid);
    }

    else if(!strcmp(opt, "ten", true))
    {
        new race;

        if(sscanf(str, "d", race))
            return SendHelpMessage(playerid, "/listskins <ten> [ten (1: Beyaz, 2: Siyahi)]");

        if(race != RACE_WHITE && race != RACE_BLACK)
            return SendErrorMessage(playerid, "Geçersiz ten girdiniz.");

        mysql_tquery(dbHandle, GetSkin("game_skins.model_id, game_skins.id, game_skins.gender, game_skins.race", "", "", 1, -1, -1, -1, -1, race), "OnStaffListSkins", "d", playerid);
    }

    else SendErrorMessage(playerid, "Geçersiz seçenek girdiniz.");

    return 1;
}

////////////////////////////////////////

CMD:createfactionskin(playerid, params[])
{
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))		return SendNotAdmin(playerid);
    new faction_id, model_id;

    if(sscanf(params, "dd", faction_id, model_id))
        return SendHelpMessage(playerid, "/createfactionskin [birlik id] [model id]");

    if(faction_id < 1)
        return SendErrorMessage(playerid, "Geçersiz birlik numarasý girdiniz.");

    if(model_id < 1 || model_id == 74)
        return SendErrorMessage(playerid, "Geçersiz model numarasý girdiniz.");

    mysql_tquery(dbHandle, EditFactionSkin(0, faction_id, model_id), "OnStaffCreateFactionSkin", "ddd", playerid, faction_id, model_id);

    return 1;
}
CMD:deletefactionskin(playerid, params[])
{
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))		return SendNotAdmin(playerid);
    new faction_id, model_id;

    if(sscanf(params, "dd", faction_id, model_id))
        return SendHelpMessage(playerid, "/deletefactionskin [birlik id] [model id]");

    if(faction_id < 1)
        return SendErrorMessage(playerid, "Geçersiz birlik numarasý girdiniz.");

    if(model_id < 1 || model_id == 74)
        return SendErrorMessage(playerid, "Geçersiz model numarasý girdiniz.");

    mysql_tquery(dbHandle, sprintf("DELETE FROM faction_skins WHERE faction_id = '%d' AND model_id = '%d'", faction_id, model_id), "OnStaffDeleteFactionSkin", "ddd", playerid, faction_id, model_id);

    return 1;
}

CMD:editfactionskin(playerid, params[])
{
	if (!CheckAdmin(playerid, DEVELOPER_LEVEL))		return SendNotAdmin(playerid);
    new skin_id, opt[7], str[32];

    if(sscanf(params, "ds[7]S()[32]", skin_id, opt, str))
    {
        SendHelpMessage(playerid, "/editfactionskin [skin veritabaný id] [seçenek]");
        SM1(playerid, "birlik, model");
        return 1;
    }

    if(skin_id < 1)
        return SendErrorMessage(playerid, "Geçersiz skin veritabaný numarasý girdiniz. (/listfactionskins)");

    if(!strcmp(opt, "birlik", true))
    {
        new faction_id;

        if(sscanf(str, "d", faction_id))
            return SendHelpMessage(playerid, "/editfactionskin <skin veritabaný id> <birlik> [birlik id]");

        if(faction_id < 1)
            return SendErrorMessage(playerid, "Geçersiz birlik numarasý girdiniz.");

        mysql_tquery(dbHandle, EditFactionSkin(skin_id, faction_id), "OnStaffEditFactionSkinFaction", "ddd", playerid, skin_id, faction_id);
    }

    else if(!strcmp(opt, "model", true))
    {
        new model_id;

        if(sscanf(str, "d", model_id))
            return SendHelpMessage(playerid, "/editfactionskin <skin veritabaný id> <model> [model id]");

        if(model_id < 1 || model_id == 74)
            return SendErrorMessage(playerid, "Geçersiz model numarasý girdiniz.");

        mysql_tquery(dbHandle, EditFactionSkin(skin_id, -1, model_id), "OnStaffEditFactionSkinModel", "ddd", playerid, skin_id, model_id);
    }

    else SendErrorMessage(playerid, "Geçersiz seçenek girdiniz.");

    return 1;
}

CMD:listfactionskins(playerid, params[])
{
    new opt[7], str[32];
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))		return SendNotAdmin(playerid);

    if(sscanf(params, "s[7]S()[32]", opt, str))
    {
        SendHelpMessage(playerid, "/listfactionskins [seçenek]");
        SM1(playerid, "hepsi, birlik, model");
        return 1;
    }

    if(!strcmp(opt, "hepsi", true))
    {
        mysql_tquery(dbHandle, GetFactionSkin("faction_skins.id, faction_skins.faction_id, faction_skins.model_id"), "OnStaffListFactionSkins", "d", playerid);
    }

    else if(!strcmp(opt, "birlik", true))
    {
        new faction_id;

        if(sscanf(str, "d", faction_id))
            return SendHelpMessage(playerid, "/listfactionskins <birlik> [birlik id]");

        if(faction_id < 1)
            return SendErrorMessage(playerid, "Geçersiz birlik numarasý girdiniz.");

        mysql_tquery(dbHandle, GetFactionSkin("faction_skins.id, faction_skins.faction_id, faction_skins.model_id", "", "", 1, -1, -1, faction_id), "OnStaffListFactionSkins", "d", playerid);
    }

    else if(!strcmp(opt, "model", true))
    {
        new model_id;

        if(sscanf(str, "d", model_id))
            return SendHelpMessage(playerid, "/listfactionskins <model> [model id]");

        if(model_id < 1 || model_id == 74)
            return SendErrorMessage(playerid, "Geçersiz model numarasý girdiniz.");

        mysql_tquery(dbHandle, GetFactionSkin("faction_skins.id, faction_skins.faction_id, faction_skins.model_id", "", "", 1, -1, -1, -1, model_id), "OnStaffListFactionSkins", "d", playerid);
    }

    else SendErrorMessage(playerid, "Geçersiz seçenek girdiniz.");

    return 1;
}


alias:givemoneyall("herkeseparaver");
CMD:givemoneyall(playerid, params[])
{
	new amount, count;

	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);
	if (sscanf(params, "i", amount))	return SendHelpMessage(playerid, "/givemoneyall [miktar]");
	if (amount > 50000000)			return SendErrorMessage(playerid, "Miktar $-55555550 ile $50000000 arasýnda olmalýdýr.");

	new mes[128];
	format(mes, sizeof(mes), "[/givemoneyall] %s adlý yönetici herkese para verdi: $%i.", GetAccName(playerid), amount);
	insert_log(mes, ADMIN_LOG, 8, -1, PlayerInfo[playerid][pAccID]);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(!IsPlayerLoggedIn(i))
			continue;

	    GiveCash(i, amount);
		count++;
	}
	SAMALL("%s adlý yönetici bir sürpriz yaparak %d kiþiye %d$ para verdi.", GetAccName(playerid), count, amount);
	return 1;
}

CMD:kickall(playerid, params[])
{
	new reason[32];
	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))	return SendNotAdmin(playerid);
	if (sscanf(params, "s[32]", reason)) return SendSyntaxMessage(playerid, "/kickall [Sebep]");
	if(strlen(reason) > 32) return SendErrorMessage(playerid, "32 karakterden fazla giremezsin.");

	//if (pTemp[userid][pInvulnerable] != 0.0)	return SendErrorMessage(playerid, "Tekrar deneyin!");

	new count;

	foreach(new i : Player)
	{
		if(PlayerInfo[i][pAdmin] != 0) continue;

		KickLine(i, sprintf("%s sebebiyle oyundan atýldýnýz.", reason));
		count++;
	}
	SAMALL("%s adlý yönetici %s sebebi ile herkesi oyundan attý.", GetAccName(playerid), reason);
	SendAdmMessage("%s adlý yönetici %i kiþiyi oyundan attý. (/kickall)", GetAccName(playerid), count);

	return 1;
}

CMD:ozeltassaklikomut(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendNotAdmin(playerid);
    new vehicleid, derece;

    if (sscanf(params, "dd", vehicleid, derece))
        return SendSyntaxMessage(playerid, "/ozeltassaklikomut [Araç ID] [derece]");

    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
        return SendErrorMessage(playerid, "Geçersiz araç ID'si belirttin.");

    SetVehicleZAngle(vehicleid, derece);
    return 1;
}

alias:testerhelp("helperhelp", "hhelp", "helperyardim");
CMD:testerhelp(playerid, params[])
{
	if (PlayerInfo[playerid][pHelper] == 0) return SendNotAdmin(playerid);

	if (PlayerInfo[playerid][pHelper] >= 1)
	{
		SCM(playerid, COLOR_WHITE, "[Lv.1]: {C3C3C3}/hduty, /hchat, /sorular");
		SCM(playerid, COLOR_WHITE, "[Lv.1]: {C3C3C3}/s(oru)k(abul), /s(oru)r(eddet)");
	}
	if (PlayerInfo[playerid][pHelper] >= 2)
	{
		SCM(playerid, COLOR_WHITE, "[Lv.2]: {C3C3C3}/goto, /gethere, /getcar, /gotocar, /gonder");
	}
	if (PlayerInfo[playerid][pHelper] >= 3)
	{
		SCM(playerid, COLOR_WHITE, "[Lv.3]: {C3C3C3}/goto, /gethere, /getcar, /gotocar, /gonder, /revive");
	}
	if (PlayerInfo[playerid][pHelper] >= 4)
	{
		SCM(playerid, COLOR_WHITE, "[Lv.4]: {C3C3C3}/slap, /near, /rtc");
	}
		if (PlayerInfo[playerid][pHelper] >= 5)
	{
		SCM(playerid, COLOR_WHITE, "[Lv.5]: {C3C3C3}/kick, /skick, /micperm");
		SCM(playerid, COLOR_WHITE, "UYARI: /Kick ve /skick komutlarýný yetkili söylemedikçe KULLANMAYIN.");
	}
	return 1;
}

CMD:hduty(playerid, params[])
{
	if (PlayerInfo[playerid][pHelper] < 1)	return SendNotAdmin(playerid);
    if (IsAdminDuty(playerid))				return SendErrorMessage(playerid, "Þu an yetkili iþbaþýndasýnýz.");

	if (IsTesterDuty(playerid) == 1)
	{
	    StaffMSG(COLOR_LIGHTRED, "AdmCmd: %s adlý kullanýcý helper iþbaþýndan çýktý.", GetAccName(playerid));
	    pTemp[playerid][pTesterDuty] = 0;
		//SetPlayerColor(playerid, TEAM_HIT_COLOR);
	}
	else
	{
		pTemp[playerid][pTesterDuty] = 1;
		StaffMSG(COLOR_LIGHTRED, "AdmCmd: %s adlý kullanýcý helper iþbaþýna girdi.", GetAccName(playerid));
		//SetPlayerColor(playerid, HELPER_DUTY);
	}
	return 1;
}

alias:micperm("mikrofonizni");
CMD:micperm(playerid, params[])
{
	new targetid;

	if (PlayerInfo[playerid][pHelper] < 5 && PlayerInfo[playerid][pAdmin] < 1)	return SendNotAdmin(playerid);

	if(sscanf(params, "u", targetid))
		return SendHelpMessage(playerid, "/micperm [karakter id/isim]");

	if(!IsPlayerConnected(targetid))
		return SendErrorMessage(playerid, "Karakter çevrimiçi deðil.");

	new perm_status = pTemp[targetid][pMicPerm];

	switch(perm_status)
	{
		case false: StaffMSG(HELPER_DUTY, "%s, %s karakterine mikrofon izni verdi.", GetNameEx(playerid), GetNameEx(targetid));
		case true: StaffMSG(HELPER_DUTY, "%s, %s karakterinin mikrofon iznini aldý.", GetNameEx(playerid), GetNameEx(targetid));
	}

    switch(perm_status)
	{
		case false: pTemp[targetid][pMicPerm] = true;
		case true:  pTemp[targetid][pMicPerm] = false;
	}
	return 1;
}

alias:tchat("h", "/hchat", "/hc");
CMD:tchat(playerid, params[])
{
	if (PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 1)	return SendNotAdmin(playerid);
    if (PlayerInfo[playerid][pSettings] & togTester)					return SendErrorMessage(playerid, "Bu komutu kullanabilmek için helper sohbetini açmanýz gerekmektedir.");
	if (isnull(params))													return SendHelpMessage(playerid, "/(h)chat [yazý]");

	new prefix[32] = "Supporter";
	if (PlayerInfo[playerid][pAdmin] > 0) prefix = "Admin";

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		foreach(new i : Player)
		{
			if (!IsPlayerLogged(i) || (!IsTester(i, 1) && !CheckAdmin(i, ADMIN_LEVEL_1)) || (PlayerInfo[i][pSettings] & togTester)) continue;

			SendClientMessageEx(i, COLOR_ORANGE, "** HChat: (%s) %s (%s): %.*s ...", prefix, GetPlayerNameEx(playerid), GetAccName(playerid), pos, params);
			SendClientMessageEx(i, COLOR_ORANGE, "... %s", params[pos]);
		}
		/*format(mes, sizeof(mes), "[HELPER] [%s] %s(%i): %.*s ...", prefix, GetAccName(playerid), playerid, pos, params);
		SendStaffMessage(COLOR_LIGHTGREEN, mes);
		format(mes, sizeof(mes), "... %s", params[pos]);
		SendStaffMessage(COLOR_LIGHTGREEN, mes);*/
	}
	else
	{
		foreach(new i : Player)
		{
			if (!IsPlayerLogged(i) || (!IsTester(i, 1) && !CheckAdmin(i, ADMIN_LEVEL_1)) || (PlayerInfo[i][pSettings] & togTester)) continue;

			SendClientMessageEx(i, COLOR_ORANGE, "** HChat: (%s) %s (%s): %s", prefix, GetPlayerNameEx(playerid), GetAccName(playerid), params);
		}
		/*format(mes, sizeof(mes), "[HELPER] [%s] %s(%i): %s", prefix, GetAccName(playerid), playerid, params);
		SendStaffMessage(COLOR_LIGHTGREEN, mes);*/
	}
	return 1;
}
/*alias:togtchat("toghchat");
CMD:togtchat(playerid, params[])
{
	if (!IsTester(playerid, 1) && !CheckAdmin(playerid, ADMIN_LEVEL_1)) return SendNotAdmin(playerid);

    if (PlayerInfo[playerid][pSettings] & togTester)
	{
		PlayerInfo[playerid][pSettings] &= ~togTester;
    	SendServerMessage(playerid, "Helper sohbeti þu anda aktif.");
	}
	else
	{
		PlayerInfo[playerid][pSettings] |= togTester;
		SendServerMessage(playerid, "Helper sohbeti þu anda deaktif.");
	}
	return 1;
}*/

CMD:talepkontrol(playerid)
{
	if(PlayerInfo[playerid][pHelperLead] != 1) return SendErrorMessage(playerid, "Bu komuta sadece Lead Helper yetkilileri yetiþebilir.");

	new Cache:veri = mysql_query(dbHandle, "SELECT login, talepsayi FROM accounts WHERE helper > 0");
	new rows = cache_num_rows(), adminUser[MAX_PLAYER_NAME], adminPuan, adminPuanString[2048];
	if(!rows) return SendErrorMessage(playerid, "Veri bulunamadý.");
	for(new i; i < rows; i++) {
		cache_get_value_int(i, "talepsayi", adminPuan);
		cache_get_value(i, "login", adminUser, 36);
		format(adminPuanString, sizeof adminPuanString, "%s%s\t%d\n", adminPuanString, adminUser, adminPuan);
	}
	Dialog_Show(playerid, DialogAdminPuanKontrol, DIALOG_STYLE_TABLIST_HEADERS, "Supporter Skor Tablosu", "Supporter Adý\tSupporter Puaný\n%s", "Tamam", "", adminPuanString);
	cache_delete(veri);
	veri = MYSQL_INVALID_CACHE;
	return 1;
}

CMD:raporbakanlar(playerid)
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Bu komuta sadece helper yetkilileri yetiþebilir.");

	new Cache:veri = mysql_query(dbHandle, "SELECT login, raporsayi FROM accounts WHERE admin > 0");
	new rows = cache_num_rows(), adminUser[MAX_PLAYER_NAME], adminPuan, adminPuanString[2048];
	if(!rows) return SendErrorMessage(playerid, "Veri bulunamadý.");
	for(new i; i < rows; i++) {
		cache_get_value_int(i, "raporsayi", adminPuan);
		cache_get_value(i, "login", adminUser, 36);
		format(adminPuanString, sizeof adminPuanString, "%s%s\t%d\n", adminPuanString, adminUser, adminPuan);
	}
	Dialog_Show(playerid, DialogAdminPuanKontrol, DIALOG_STYLE_TABLIST_HEADERS, "Admin Skor Tablosu", "Admin Adý\tAdmin Puaný\n%s", "Tamam", "", adminPuanString);
	cache_delete(veri);
	veri = MYSQL_INVALID_CACHE;
	return 1;
}

/* Anticheat sistemi */

stock UploadAntiCheatSettings()
{
    mysql_tquery(dbHandle, "SELECT * FROM `anticheat_settings`", "UploadAntiCheat");
}

this::UploadAntiCheat()
{
    new rows = cache_num_rows(), tick = GetTickCount();

	if (!rows) {
        print("[MySQL]: Anti-cheat ayarlari veritabaninda bulunamadi. Modun yüklenmesi durduruldu, lütfen anti-cheati yapilandirin.");
        return GameModeExit();
    }

    for(new i = 0; i < AC_MAX_CODES; i++)
    {
        cache_get_value_int(i, "ac_code_trigger_type", AC_CODE_TRIGGER_TYPE[i]);

        if (AC_CODE_TRIGGER_TYPE[i] == AC_CODE_TRIGGER_TYPE_DISABLED) {
            EnableAntiCheat(i, 0);
        }
    }

    new mes[128];
    format(mes, sizeof(mes), "[AntiCheat] Anti-cheat ayarlari basarili sekilde yüklendi. (yuklenen: %i). Sure: %i ms.", rows, GetTickCount() - tick);
    print(mes);

    return 1;
}

stock Anticheat_OnPlayerConnect(playerid)
{

    for(new i = 0; i < AC_MAX_CODES; i++)
        pAntiCheatLastCodeTriggerTime[playerid][i] = -1;

    pAntiCheatSettingsPage{playerid} = 0;
    pAntiCheatSettingsEditCodeId[playerid] = -1;
    return 1;
}

this::OnCheatDetected(playerid, ip_address[], type, code, code2)
{
    if (PlayerInfo[playerid][pAdmin] >= 1) return 0;

    if (type == AC_GLOBAL_TRIGGER_TYPE_PLAYER)
    {
        switch(code)
        {
            case 5, 6, 11, 22:
            {
                return 1;
            }
            case 32: // CarJack
            {
                new
                    Float:x,
                    Float:y,
                    Float:z;

                AntiCheatGetPos(playerid, x, y, z);
                return SetPlayerPos(playerid, x, y, z);
            }
            case 40: // Sandbox
            {
                SendClientMessage(playerid, -1, MAX_CONNECTS_MSG);
                return AntiCheatKickWithDesync(playerid, code);
            }
            case 41: // Invalid Version
            {
                SendClientMessage(playerid, -1, UNKNOWN_CLIENT_MSG);
                return AntiCheatKickWithDesync(playerid, code);
            }
            default:
            {
                if (gettime() - pAntiCheatLastCodeTriggerTime[playerid][code] < AC_TRIGGER_ANTIFLOOD_TIME)
                    return 1;

                pAntiCheatLastCodeTriggerTime[playerid][code] = gettime();
                AC_CODE_TRIGGERED_COUNT[code]++;

                new
                    string[88 - 10 + MAX_PLAYER_NAME + 5 + AC_MAX_CODE_NAME_LENGTH + AC_MAX_CODE_LENGTH],
                    trigger_type = AC_CODE_TRIGGER_TYPE[code];

                switch(trigger_type)
                {
                    case AC_CODE_TRIGGER_TYPE_DISABLED: return 1;
                    case AC_CODE_TRIGGER_TYPE_WARNING:  SendAdmMessage("%s [%d] adlý oyuncunun hile olduðundan þüpheleniliyor: %s [KOD: %03d].", GetNameEx(playerid), playerid, AC_CODE_NAME[code], code);
                    case AC_CODE_TRIGGER_TYPE_KICK: {
                        SendAdmMessage("%s [%d] adlý oyuncu hile programlarý kullandýðý þüphesiyle sunucudan atýldý: %s [KOD: %03d].", GetNameEx(playerid), playerid, AC_CODE_NAME[code], code);

                        format(string, sizeof(string), "Hile programlarý kullandýðýnýz þüphesiyle sunucudan atýldýnýz: %s [KOD: %03d].", AC_CODE_NAME[code], code);
                        SendClientMessage(playerid, COLOUR_TOMATO, string);

                        AntiCheatKickWithDesync(playerid, code);
                    }
                }
            }
        }
    }
    else // AC_GLOBAL_TRIGGER_TYPE_IP
    {
        AC_CODE_TRIGGERED_COUNT[code]++;

        SendAdmMessage("[LG-BAN-IP] IP adresiniz (%s) engellendi: %s [KOD: %03d].", ip_address, AC_CODE_NAME[code], code);

        BlockIpAddress(ip_address, 0);
    }
    return 1;
}

public OnPlayerAirbreak(playerid) return KickLine(playerid, "Airbreak hilesi.");

stock Oyuncu_IP(playerid)
{
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

forward OnClientCheckResponseFix(playerid, actionid, memaddr, retndata);
public OnClientCheckResponseFix(playerid, actionid, memaddr, retndata)
{
	printf("Sobeit Kontrol = isim: %s(%d) data degeri: %d", GetNameEx(playerid), playerid, retndata);

	if(retndata != 192)
	{
		SendAdmMessage("%s(%d) (IP: %s) adlý karakterden sobeit giriþi denemesi yapýldý. Oyuna girerse takibe alýn.", GetNameEx(playerid), playerid, Oyuncu_IP(playerid));
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "> LOSWORLD Guard", "{B70000}[!] {FFFFFF}Hile tespit edildiði için oyundan atýldýnýz.\n\n{FF7E00}NOT: {FFFFFF}Hile kullanmamanýza raðmen atýlýyorsanýz eðer, oyun dosyalarýnýzý deðiþtirmeden panel üzerinden\n{FFFFFF}Bug Bildirimleri kategorisinde ticket oluþturun.", "Kapat", "");

		KickEx(playerid);
	}
	return 1;
}

/*
public OnPlayerSuspectedForAimbot(playerid,hitid,weaponid,warnings)
{
	new str[144],nme[MAX_PLAYER_NAME],wname[32],Float:Wstats[BUSTAIM_WSTATS_SHOTS];

	GetPlayerName(playerid,nme,sizeof(nme));
	GetWeaponName(weaponid,wname,sizeof(wname));
	if(warnings & WARNING_OUT_OF_RANGE_SHOT)
	{
	    format(str,256,"%s(%d) fired shots from a distance greater than the %s's fire range(Normal Range:%d)",nme,playerid,wname,BustAim::GetNormalWeaponRange(weaponid));
		SendClientMessageToAll(-1,str);
		BustAim::GetRangeStats(playerid,Wstats);
		format(str,256,"Shooter to Victim Distance(SA Units): 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		SendClientMessageToAll(-1,str);
	}
	if(warnings & WARNING_PROAIM_TELEPORT)
	{
	    format(str,256,"%s(%d) is using proaim (Teleport Detected)",nme,playerid);
		SendClientMessageToAll(-1,str);
		BustAim::GetTeleportStats(playerid,Wstats);
		format(str,256,"Bullet to Victim Distance(SA Units): 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		SendClientMessageToAll(-1,str);
	}
	if(warnings & WARNING_RANDOM_AIM)
	{
	    format(str,256,"%s(%d) is suspected to be using aimbot(Hit with Random Aim with %s)",nme,playerid,wname);
		SendClientMessageToAll(-1,str);
		BustAim::GetRandomAimStats(playerid,Wstats);
		format(str,256,"Random Aim Offsets: 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		SendClientMessageToAll(-1,str);
	}
	if(warnings & WARNING_CONTINOUS_SHOTS)
	{
	    format(str,256,"%s(%d) has fired 10 shots continously with %s(%d)",nme,playerid,wname,weaponid);
		SendClientMessageToAll(-1,str);
	}
	return 0;
}*/

Dialog:ANTICHEAT_SETTINGS(playerid, response, listitem, inputtext[])
{
    if (!response)
    {
        pAntiCheatSettingsPage{playerid} = 0;
        return 1;
    }

    if (!strcmp(inputtext, AC_DIALOG_NEXT_PAGE_TEXT))
    {
        pAntiCheatSettingsPage{playerid}++;
    }
    else if (!strcmp(inputtext, AC_DIALOG_PREVIOUS_PAGE_TEXT))
    {
        pAntiCheatSettingsPage{playerid}--;
    }
    else
    {
        pAntiCheatSettingsEditCodeId[playerid] = pAntiCheatSettingsMenuListData[playerid][listitem];
        return ShowPlayer_AntiCheatEditCode(playerid, pAntiCheatSettingsEditCodeId[playerid]);
    }
    return ShowPlayer_AntiCheatSettings(playerid);
}

Dialog:ANTICHEAT_EDIT_CODE(playerid, response, listitem, inputtext[])
{
    if (!response)
    {
        pAntiCheatSettingsEditCodeId[playerid] = -1;
        return ShowPlayer_AntiCheatSettings(playerid);
    }

    new
        item = pAntiCheatSettingsEditCodeId[playerid];

    if (AC_CODE_TRIGGER_TYPE[item] == listitem)
        return ShowPlayer_AntiCheatSettings(playerid);

    if (AC_CODE_TRIGGER_TYPE[item] == AC_CODE_TRIGGER_TYPE_DISABLED && listitem != AC_CODE_TRIGGER_TYPE_DISABLED)
        EnableAntiCheat(item, 1);

    AC_CODE_TRIGGER_TYPE[item] = listitem;

    new
        sql_query[101 - 4 + 1 + 2];

    format(sql_query, sizeof(sql_query), "UPDATE "AC_TABLE_SETTINGS" SET `"AC_TABLE_FIELD_TRIGGER"` = '%d' WHERE `"AC_TABLE_FIELD_CODE"` = '%d'",
        listitem,
        item);

    mysql_query(dbHandle, sql_query, false);
    return ShowPlayer_AntiCheatSettings(playerid);
}

CMD:anticheat_settings(playerid, params[])
{
    if (!CheckAdmin(playerid, DEVELOPER_LEVEL))	return SendNotAdmin(playerid);

    pAntiCheatSettingsPage{playerid} = 1; // Set the variable that stores the page number the player is on to the value 1 (that is, now the player is on page 1)
    return ShowPlayer_AntiCheatSettings(playerid); // Show the player the main anti-cheat settings dialog
}

//The function of showing the main menu of anti-cheat settings
stock ShowPlayer_AntiCheatSettings(playerid)
{
    static
        dialog_string[42 + 19 - 8 + (AC_MAX_CODE_LENGTH + AC_MAX_CODE_NAME_LENGTH + AC_MAX_TRIGGER_TYPE_NAME_LENGTH + 10)*AC_MAX_CODES_ON_PAGE] = EOS;

    new
        triggeredCount = 0,
        page = pAntiCheatSettingsPage{playerid},
        next = 0,
        index = 0;

    dialog_string = "Ýsim\tCeza\tPozitif sayýsý\n";

    for(new i = 0; i < AC_MAX_CODES; i++)
    {
        if (i >= (page * AC_MAX_CODES_ON_PAGE) && i < (page * AC_MAX_CODES_ON_PAGE) + AC_MAX_CODES_ON_PAGE)
            next++;

        if (i >= (page - 1) * AC_MAX_CODES_ON_PAGE && i < ((page - 1) * AC_MAX_CODES_ON_PAGE) + AC_MAX_CODES_ON_PAGE)
        {
            triggeredCount = AC_CODE_TRIGGERED_COUNT[i];

            format(dialog_string, sizeof(dialog_string), "%s[%s] %s\t%s\t%d\n",
                dialog_string,
                AC_CODE[i],
                AC_CODE_NAME[i],
                AC_TRIGGER_TYPE_NAME[AC_CODE_TRIGGER_TYPE[i]],
                triggeredCount);

            pAntiCheatSettingsMenuListData[playerid][index++] = i;
        }
    }

    if (next)
        strcat(dialog_string, ""AC_DIALOG_NEXT_PAGE_TEXT"\n");

    if (page > 1)
        strcat(dialog_string, AC_DIALOG_PREVIOUS_PAGE_TEXT);

    return Dialog_Show(playerid, ANTICHEAT_SETTINGS, DIALOG_STYLE_TABLIST_HEADERS, "Anti-cheat ayarlarý", dialog_string, "Seç", "Ýptal");
}

//The function of showing the menu for editing the type of triggering of a certain code in anti-cheat
stock ShowPlayer_AntiCheatEditCode(playerid, code)
{
    new
        dialog_header[22 - 4 + AC_MAX_CODE_LENGTH + AC_MAX_CODE_NAME_LENGTH],
        dialog_string[AC_MAX_TRIGGER_TYPE_NAME_LENGTH*AC_MAX_TRIGGER_TYPES];

    format(dialog_header, sizeof(dialog_header), "Kod: %s | Ýsim: %s", AC_CODE[code], AC_CODE_NAME[code]);

    for(new i = 0; i < AC_MAX_TRIGGER_TYPES; i++)
    {
        strcat(dialog_string, AC_TRIGGER_TYPE_NAME[i]);

        if (i + 1 != AC_MAX_TRIGGER_TYPES)
            strcat(dialog_string, "\n");
    }

    return Dialog_Show(playerid, ANTICHEAT_EDIT_CODE, DIALOG_STYLE_LIST, dialog_header, dialog_string, "Seç", "Geri Dön");
}

/* Otobüs */
forward OtobusDurak(playerid); public OtobusDurak(playerid)
{
	TogglePlayerControllable(playerid, true);
	InfoMSG(playerid, "~g~Devam edebilirsin!", 5);
	SetPlayerCheckpoint(playerid, OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosX], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosY], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosZ], 5.0);
	return 1;
}

CMD:otobusbasla(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sefere baslamak için bir otobüs aracina binin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 431) return SendErrorMessage(playerid, "Bu araç ile otobüs soförlügü yapamazsiniz.");
	if(OtobusAracCP[GetPlayerVehicleID(playerid)] == 1) return SendErrorMessage(playerid, "Bu araç zaten seferde.");

	OtobusAracCP[GetPlayerVehicleID(playerid)] = 1;
	AracCP[GetPlayerVehicleID(playerid)] = 0;

	SetPlayerCheckpoint(playerid, OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosX], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosY], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosZ], 5.0);
	SendSyntaxMessage(playerid, "Sefer baþladý. Checkpointleri takip edin.");
	return 1;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CMD:tircilik(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sefere baslamak için bir týra binin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515) return SendErrorMessage(playerid, "Bu mesleði sadece Roadtrain ve Linerunner ismili araçlarla yapýlabilir");

	if(TircilikMeslekDogrulama[playerid] == 7) {
		SetPVarInt(playerid, "TircilikOnayKOD", randomEx(1111111, 9999999));
		PlayerInfo[playerid][pMKoduGosteriliyor] = true;
		TogglePlayerControllable(playerid, 0);
	    Dialog_Show(playerid, TircilikDogrula, DIALOG_STYLE_INPUT, "Týrcýlýk Mesleði", "{dadada}Týrcýlýk mesleðine devam edebilmek için {d04f61}%i{dadada} kodunu aþaðýdaki kutucuða girmelisin", "Devam", "-", GetPVarInt(playerid, "TircilikOnayKOD"));
		return 1;
	}

	new string[2024];
	if (IsPlayerInRangeOfPoint(playerid, 5.0, 2289.317626, -2353.620849, 13.546875 )) { // Ýnþaat Malzemesi alýndý ve baþlandý
	    format(string, sizeof(string), "Seçenek\tAçýklama\n");
		format(string, sizeof(string), "%s{A9C4E4}Meslek Durumu:\tYapýlabilir\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Baþlanan Nokta:\tLos Santos, Ocean Docks\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Gideceðiniz Nokta:\tLas Venturas, Rockshore East\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Taþýnacak Yük:\tÝnþaat Malzemesi\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Alacaðýnýz Kazanç:\t200$-350$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Kesilecek Kazanç Vergisi:\t8$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Toplam yaptýðýnýz sefer:\t%s\n", string, FormatNumber(PlayerInfo[playerid][pTircilikSefer]));
		format(string, sizeof(string), "%s{A9C4E4}\t\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Yük Al\t\n", string);

	    Dialog_Show(playerid, TircilikO1, DIALOG_STYLE_TABLIST_HEADERS, "{A9C4E4}Týrcýlýk Mesleði - Los Santos", string, "{70c75b}Seç", "Kapat");
	}
	if (IsPlayerInRangeOfPoint(playerid, 5.0, 2638.6077,857.0383,6.0938)) { // Ýnþaat Malzemesi býrakýldý = Araç Yedek Parçasý alýndý
	    format(string, sizeof(string), "Seçenek\tAçýklama\n");
		format(string, sizeof(string), "%s{A9C4E4}Meslek Durumu:\tYapýlabilir\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Baþlanan Nokta:\tLas Venturas, Rockshore East\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Gideceðiniz Nokta:\tLas Venturas, Redsands East\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Taþýnacak Yük:\tAraç Yedek Parçasý\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Alacaðýnýz Kazanç:\t200$-350$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Kesilecek Kazanç Vergisi:\t8$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Toplam yaptýðýnýz sefer:\t%s\n", string, FormatNumber(PlayerInfo[playerid][pTircilikSefer]));
		format(string, sizeof(string), "%s{A9C4E4}\t\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Yük Al\t\n", string);

	    Dialog_Show(playerid, TircilikO2, DIALOG_STYLE_TABLIST_HEADERS, "{A9C4E4}Týrcýlýk Mesleði - Las Venturas", string, "{70c75b}Seç", "Kapat");
	}
	if (IsPlayerInRangeOfPoint(playerid, 5.0, 2041.7294,2039.7290,10.8203)) { // Araç yedek parçasý býrakýldý = Hurda metal alýndý
	    format(string, sizeof(string), "Seçenek\tAçýklama\n");
		format(string, sizeof(string), "%s{A9C4E4}Meslek Durumu:\tYapýlabilir\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Baþlanan Nokta:\tLas Venturas, Redsands East\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Gideceðiniz Nokta:\tLos Santos, Blueberry\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Taþýnacak Yük:\tHurda Metal\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Alacaðýnýz Kazanç:\t200$-350$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Kesilecek Kazanç Vergisi:\t8$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Toplam yaptýðýnýz sefer:\t%s\n", string, FormatNumber(PlayerInfo[playerid][pTircilikSefer]));
		format(string, sizeof(string), "%s{A9C4E4}\t\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Yük Al\t\n", string);

	    Dialog_Show(playerid, TircilikO3, DIALOG_STYLE_TABLIST_HEADERS, "{A9C4E4}Týrcýlýk Mesleði - Blueberry", string, "{70c75b}Seç", "Kapat");
	}
	if (IsPlayerInRangeOfPoint(playerid, 5.0, 74.7177,-253.5841,1.5781)) { // Hurda metal býrakýldý = Plastik Malzeme alýndý
	    format(string, sizeof(string), "Seçenek\tAçýklama\n");
		format(string, sizeof(string), "%s{A9C4E4}Meslek Durumu:\tYapýlabilir\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Baþlanan Nokta:\tLos Santos, Blueberry\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Gideceðiniz Nokta:\tSan Fierro, Easter Bay Chemicals\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Taþýnacak Yük:\tPlastik Malzeme\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Alacaðýnýz Kazanç:\t200$-350$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Kesilecek Kazanç Vergisi:\t8$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Toplam yaptýðýnýz sefer:\t%s\n", string, FormatNumber(PlayerInfo[playerid][pTircilikSefer]));
		format(string, sizeof(string), "%s{A9C4E4}\t\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Yük Al\t\n", string);

	    Dialog_Show(playerid, TircilikO4, DIALOG_STYLE_TABLIST_HEADERS, "{A9C4E4}Týrcýlýk Mesleði - Los Santos", string, "{70c75b}Seç", "Kapat");
	}
	if (IsPlayerInRangeOfPoint(playerid, 5.0, -1046.8080,-658.3515,32.0126)) { // Plasatik Malzeme býrakýldý = Cam Panel alýndý
	    format(string, sizeof(string), "Seçenek\tAçýklama\n");
		format(string, sizeof(string), "%s{A9C4E4}Meslek Durumu:\tYapýlabilir\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Baþlanan Nokta:\tSan Fierro, Chemicals\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Gideceðiniz Nokta:\tSan Fierro, LOSWORLD\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Taþýnacak Yük:\tCam Panel\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Alacaðýnýz Kazanç:\t200$-350$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Kesilecek Kazanç Vergisi:\t8$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Toplam yaptýðýnýz sefer:\t%s\n", string, FormatNumber(PlayerInfo[playerid][pTircilikSefer]));
		format(string, sizeof(string), "%s{A9C4E4}\t\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Yük Al\t\n", string);

	    Dialog_Show(playerid, TircilikO5, DIALOG_STYLE_TABLIST_HEADERS, "{A9C4E4}Týrcýlýk Mesleði - San Fierro", string, "{70c75b}Seç", "Kapat");
	}
	if (IsPlayerInRangeOfPoint(playerid, 5.0, -1978.9320,477.3718,29.0156)) { // Cam panel býrakýldý = Boþ tahta palet alýndý
	    format(string, sizeof(string), "Seçenek\tAçýklama\n");
		format(string, sizeof(string), "%s{A9C4E4}Meslek Durumu:\tYapýlabilir\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Baþlanan Nokta:\tSan Fierro, LOSWORLD\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Gideceðiniz Nokta:\tSan Fierro, Bayside\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Taþýnacak Yük:\tBoþ Tahta Palet\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Alacaðýnýz Kazanç:\t200$-350$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Kesilecek Kazanç Vergisi:\t8$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Toplam yaptýðýnýz sefer:\t%s\n", string, FormatNumber(PlayerInfo[playerid][pTircilikSefer]));
		format(string, sizeof(string), "%s{A9C4E4}\t\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Yük Al\t\n", string);

	    Dialog_Show(playerid, TircilikO6, DIALOG_STYLE_TABLIST_HEADERS, "{A9C4E4}Týrcýlýk Mesleði - San Fierro", string, "{70c75b}Seç", "Kapat");
	}
	if (IsPlayerInRangeOfPoint(playerid, 5.0, -2457.4937,2292.7139,4.9844)) { // Tathta palet býrakýldý = Gemi parçalarý alýndý
	    format(string, sizeof(string), "Seçenek\tAçýklama\n");
		format(string, sizeof(string), "%s{A9C4E4}Meslek Durumu:\tYapýlabilir\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Baþlanan Nokta:\tSan Fierro, Bayside\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Gideceðiniz Nokta:\tLas Venturas, Whitewood Estates\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Taþýnacak Yük:\tGemi parçalarý\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Alacaðýnýz Kazanç:\t200$-350$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Kesilecek Kazanç Vergisi:\t8$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Toplam yaptýðýnýz sefer:\t%s\n", string, FormatNumber(PlayerInfo[playerid][pTircilikSefer]));
		format(string, sizeof(string), "%s{A9C4E4}\t\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Yük Al\t\n", string);

	    Dialog_Show(playerid, TircilikO7, DIALOG_STYLE_TABLIST_HEADERS, "{A9C4E4}Týrcýlýk Mesleði - Bayside", string, "{70c75b}Seç", "Kapat");
	}
	if (IsPlayerInRangeOfPoint(playerid, 5.0, 1045.2523,2134.1365,10.8203)) { // Gemi parçalarý býrakýldý = Dizel benzin alýndý.
	    format(string, sizeof(string), "Seçenek\tAçýklama\n");
		format(string, sizeof(string), "%s{A9C4E4}Meslek Durumu:\tYapýlabilir\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Baþlanan Nokta:\tLas Venturas, Whitewood Estates\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Gideceðiniz Nokta:\tLos Santos, Flint County\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Taþýnacak Yük:\tDizel yakýt\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Alacaðýnýz Kazanç:\t200$-350$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Kesilecek Kazanç Vergisi:\t8$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Toplam yaptýðýnýz sefer:\t%s\n", string, FormatNumber(PlayerInfo[playerid][pTircilikSefer]));
		format(string, sizeof(string), "%s{A9C4E4}\t\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Yük Al\t\n", string);

	    Dialog_Show(playerid, TircilikO8, DIALOG_STYLE_TABLIST_HEADERS, "{A9C4E4}Týrcýlýk Mesleði - Las Venturas", string, "{70c75b}Seç", "Kapat");
	}
	if (IsPlayerInRangeOfPoint(playerid, 5.0, -85.9225,-1189.7953,1.7500)) { // Dizel benzin býrakýldý = Metal parçalar alýndý
	    format(string, sizeof(string), "Seçenek\tAçýklama\n");
		format(string, sizeof(string), "%s{A9C4E4}Meslek Durumu:\tYapýlabilir\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Baþlanan Nokta:\tLos Santos, Flint County\n", string);
	    format(string, sizeof(string), "%s{A9C4E4}Gideceðiniz Nokta:\tLos Santos, Ocean Docks\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Taþýnacak Yük:\tMetal Parça\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Alacaðýnýz Kazanç:\t200$-350$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Kesilecek Kazanç Vergisi:\t8$\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Toplam yaptýðýnýz sefer:\t%s\n", string, FormatNumber(PlayerInfo[playerid][pTircilikSefer]));
		format(string, sizeof(string), "%s{A9C4E4}\t\n", string);
		format(string, sizeof(string), "%s{A9C4E4}Yük Al\t\n", string);

	    Dialog_Show(playerid, TircilikO9, DIALOG_STYLE_TABLIST_HEADERS, "{A9C4E4}Týrcýlýk Mesleði - Los Santos", string, "{70c75b}Seç", "Kapat");
	}
	return 1;
}
CMD:teslimet(playerid)
{
    if(PlayerInfo[playerid][pTircilikSeferde] == 0) return SendErrorMessage(playerid, "Su anda herhangi bir seferde degilsiniz.");

    new vehicleid = GetPlayerVehicleID(playerid);
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Yükü teslim etmek için bir araç kullaniyor olmalisiniz.");
    if(GetVehicleModel(vehicleid) != 515) return SendErrorMessage(playerid, "Bu meslegi sadece Roadtrain ve Linerunner ile yapabilirsiniz.");

    new Float:x, Float:y, Float:z;
    GetVehiclePos(vehicleid, x, y, z);

    switch(PlayerInfo[playerid][pTircilikSeferde])
    {
        case 1:
        {
            if(IsPlayerInRangeOfPoint(playerid, 10.0, 2638.6077,857.0383,6.0938))
            {
                new kazanc = random(200, 350);
                new vergi = 8;
                new netKazanc = kazanc - vergi;

                GivePlayerMoney(playerid, netKazanc);
                SendSyntaxMessage(playerid, "Yükü basariyla teslim ettiniz! Kazanç: $%d (Vergi: $%d)", netKazanc, vergi);
                PlayerInfo[playerid][pTircilikSeferde] = 0;
                DestroyVehicle(tircilikDorse[playerid]);
                tircilikDorse[playerid] = INVALID_VEHICLE_ID;
                PlayerInfo[playerid][pTircilikSefer]++;
            }
            else
            {
                SendErrorMessage(playerid, "Yükü teslim etmek için dogru noktada degilsiniz.");
            }
        }
        case 2:
        {
            if(IsPlayerInRangeOfPoint(playerid, 10.0, 2041.7294,2039.7290,10.8203))
            {
                new kazanc = random(200, 350);
                new vergi = 8;
                new netKazanc = kazanc - vergi;

                GivePlayerMoney(playerid, netKazanc);
                SendSyntaxMessage(playerid, "Yükü basariyla teslim ettiniz! Kazanç: $%d (Vergi: $%d)", netKazanc, vergi);
                PlayerInfo[playerid][pTircilikSeferde] = 0;
                DestroyVehicle(tircilikDorse[playerid]);
                tircilikDorse[playerid] = INVALID_VEHICLE_ID;
                PlayerInfo[playerid][pTircilikSefer]++;
            }
            else
            {
                SendErrorMessage(playerid, "Yükü teslim etmek için dogru noktada degilsiniz.");
            }
        }
        case 3:
        {
            if(IsPlayerInRangeOfPoint(playerid, 10.0, 74.7177,-253.5841,1.5781))
            {
                new kazanc = random(200, 350);
                new vergi = 8;
                new netKazanc = kazanc - vergi;

                GivePlayerMoney(playerid, netKazanc);
                SendSyntaxMessage(playerid, "Yükü basariyla teslim ettiniz! Kazanç: $%d (Vergi: $%d)", netKazanc, vergi);
                PlayerInfo[playerid][pTircilikSeferde] = 0;
                DestroyVehicle(tircilikDorse[playerid]);
                tircilikDorse[playerid] = INVALID_VEHICLE_ID;
                PlayerInfo[playerid][pTircilikSefer]++;
            }
            else
            {
                SendErrorMessage(playerid, "Yükü teslim etmek için dogru noktada degilsiniz.");
            }
        }
        case 4:
        {
            if(IsPlayerInRangeOfPoint(playerid, 10.0, -1046.8080,-658.3515,32.0126))
            {
                new kazanc = random(200, 350);
                new vergi = 8;
                new netKazanc = kazanc - vergi;

                GivePlayerMoney(playerid, netKazanc);
                SendSyntaxMessage(playerid, "Yükü basariyla teslim ettiniz! Kazanç: $%d (Vergi: $%d)", netKazanc, vergi);
                PlayerInfo[playerid][pTircilikSeferde] = 0;
                DestroyVehicle(tircilikDorse[playerid]);
                tircilikDorse[playerid] = INVALID_VEHICLE_ID;
                PlayerInfo[playerid][pTircilikSefer]++;
            }
            else
            {
                SendErrorMessage(playerid, "Yükü teslim etmek için dogru noktada degilsiniz.");
            }
        }
        case 5:
        {
            if(IsPlayerInRangeOfPoint(playerid, 10.0, -1978.9320,477.3718,29.0156))
            {
                new kazanc = random(200, 350);
                new vergi = 8;
                new netKazanc = kazanc - vergi;

                GivePlayerMoney(playerid, netKazanc);
                SendSyntaxMessage(playerid, "Yükü basariyla teslim ettiniz! Kazanç: $%d (Vergi: $%d)", netKazanc, vergi);
                PlayerInfo[playerid][pTircilikSeferde] = 0;
                DestroyVehicle(tircilikDorse[playerid]);
                tircilikDorse[playerid] = INVALID_VEHICLE_ID;
                PlayerInfo[playerid][pTircilikSefer]++;
            }
            else
            {
                SendErrorMessage(playerid, "Yükü teslim etmek için dogru noktada degilsiniz.");
            }
        }
        case 6:
        {
            if(IsPlayerInRangeOfPoint(playerid, 10.0, -2457.4937,2292.7139,4.9844))
            {
                new kazanc = random(200, 350);
                new vergi = 8;
                new netKazanc = kazanc - vergi;

                GivePlayerMoney(playerid, netKazanc);
                SendSyntaxMessage(playerid, "Yükü basariyla teslim ettiniz! Kazanç: $%d (Vergi: $%d)", netKazanc, vergi);
                PlayerInfo[playerid][pTircilikSeferde] = 0;
                DestroyVehicle(tircilikDorse[playerid]);
                tircilikDorse[playerid] = INVALID_VEHICLE_ID;
                PlayerInfo[playerid][pTircilikSefer]++;
            }
            else
            {
                SendErrorMessage(playerid, "Yükü teslim etmek için dogru noktada degilsiniz.");
            }
        }
        case 7:
        {
            if(IsPlayerInRangeOfPoint(playerid, 10.0, 1045.2523,2134.1365,10.8203))
            {
                new kazanc = random(200, 350);
                new vergi = 8;
                new netKazanc = kazanc - vergi;

                GivePlayerMoney(playerid, netKazanc);
                SendSyntaxMessage(playerid, "Yükü basariyla teslim ettiniz! Kazanç: $%d (Vergi: $%d)", netKazanc, vergi);
                PlayerInfo[playerid][pTircilikSeferde] = 0;
                DestroyVehicle(tircilikDorse[playerid]);
                tircilikDorse[playerid] = INVALID_VEHICLE_ID;
                PlayerInfo[playerid][pTircilikSefer]++;
            }
            else
            {
                SendErrorMessage(playerid, "Yükü teslim etmek için dogru noktada degilsiniz.");
            }
        }
        case 8:
        {
            if(IsPlayerInRangeOfPoint(playerid, 10.0, -85.9225,-1189.7953,1.7500))
            {
                new kazanc = random(200, 350);
                new vergi = 8;
                new netKazanc = kazanc - vergi;

                GivePlayerMoney(playerid, netKazanc);
                SendSyntaxMessage(playerid, "Yükü basariyla teslim ettiniz! Kazanç: $%d (Vergi: $%d)", netKazanc, vergi);
                PlayerInfo[playerid][pTircilikSeferde] = 0;
                DestroyVehicle(tircilikDorse[playerid]);
                tircilikDorse[playerid] = INVALID_VEHICLE_ID;
                PlayerInfo[playerid][pTircilikSefer]++;
            }
            else
            {
                SendErrorMessage(playerid, "Yükü teslim etmek için dogru noktada degilsiniz.");
            }
        }
        case 9:
        {
            if(IsPlayerInRangeOfPoint(playerid, 10.0, 2289.317626, -2353.620849, 13.546875 ))
            {
                new kazanc = random(200, 350);
                new vergi = 8;
                new netKazanc = kazanc - vergi;

                GivePlayerMoney(playerid, netKazanc);
                SendSyntaxMessage(playerid, "Yükü basariyla teslim ettiniz! Kazanç: $%d (Vergi: $%d)", netKazanc, vergi);
                PlayerInfo[playerid][pTircilikSeferde] = 0;
                DestroyVehicle(tircilikDorse[playerid]);
                tircilikDorse[playerid] = INVALID_VEHICLE_ID;
                PlayerInfo[playerid][pTircilikSefer]++;
            }
            else
            {
                SendErrorMessage(playerid, "Yükü teslim etmek için dogru noktada degilsiniz.");
            }
        }
        default:
        {
            SendErrorMessage(playerid, "Geçersiz sefer durumu.");
        }
    }
    return 1;
}
Dialog:TircilikDogrula(playerid, response, listitem, inputtext[])
{
	new onaykodu = GetPVarInt(playerid, "TircilikOnayKOD");
	if (!response) {
		if(MeslekDogrulama[playerid] == 5) {
			SetPVarInt(playerid, "TircilikOnayKOD", randomEx(1111111, 9999999));
			TogglePlayerControllable(playerid, 1);
	   	    Dialog_Show(playerid, TircilikDogrula, DIALOG_STYLE_INPUT, "Týrcýlýk Mesleði", "{dadada}Týrcýlýk mesleðine devam edebilmek için {d04f61}%i{dadada} kodunu aþaðýdaki kutucuða girmelisin", "Devam", "-", GetPVarInt(playerid, "TircilikOnayKOD"));
			return 1;
		}
	}
	if (response)
	{
		if(strval(inputtext) == onaykodu)
	    {
			SendSyntaxMessage(playerid, "Meslek kodunu doðru girdiniz, mesleðinize kaldýðýnýz yerden devam edebilirsiniz.");
			TircilikMeslekDogrulama[playerid] = 0;
			PlayerInfo[playerid][pMKoduGosteriliyor] = false;
			return 1;
		}
	    if(strval(inputtext) != onaykodu)
	    {
			SendErrorMessage(playerid, "Meslek kodunu yanlýþ girdiniz!");

			SetPVarInt(playerid, "TircilikOnayKOD", randomEx(1111111, 9999999));
	   	    Dialog_Show(playerid, TircilikDogrula, DIALOG_STYLE_INPUT, "Týrcýlýk Mesleði", "{dadada}Týrcýlýk mesleðine devam edebilmek için {d04f61}%i{dadada} kodunu aþaðýdaki kutucuða girmelisin", "Devam", "-", GetPVarInt(playerid, "TircilikOnayKOD"));
			return 1;
		}
	}
	return 1;
}

Dialog:TircilikO1(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(response) {
		new tircilikArac = GetPlayerVehicleID(playerid);
		switch(listitem) // 2289.317626, -2353.620849, 13.546875
		{
			case 0..7: return SendErrorMessage(playerid,"Bu bölüme eriþim yetkiniz bulunmamaktadýr.");
			case 8: {
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sefere baslamak için bir týra binin.");
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515) return SendErrorMessage(playerid, "Bu mesleði sadece Roadtrain ve Linerunner ismili araçlarla yapýlabilir");

				// Týrcý Pos
				SetVehiclePos(tircilikArac, 2452.8181,-2241.5305,14.54690);
				SetVehicleZAngle(tircilikArac, 87.7153);
				tircilikDorse[playerid] = CreateVehicle(591, 2468.9600,-2241.8801,13.5469,89.0470, 35, 35, 5600);
				AttachTrailerToVehicle(tircilikDorse[playerid], GetPlayerVehicleID(playerid));
				Waypoint_Set(playerid, 2638.6077,857.0383,6.0938,10.0);
				RepairVehicle(tircilikArac);

				// Sefer Kontrolü
				PlayerInfo[playerid][pTircilikSeferde] = 1;

				// Diðer
				SendSyntaxMessage(playerid,"Yük Alýndý, haritanýzda çýkan kýrmýzý checkpoint'i takip ederek yükünüzü teslim edebilirsiniz.");
				SendSyntaxMessage(playerid,"Yükünüzü teslim ettiðinizde 'Alacaðýnýz Kazanç' kýsmýnda ne yazýyorsa o miktarý alacaksýnýz.");
				return 1;
			}
		}
	}
	return 1;
}

Dialog:TircilikO2(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(response) {
		new tircilikArac = GetPlayerVehicleID(playerid);
		switch(listitem) // 2638.6077,857.0383,6.0938
		{
			case 0..7: return SendErrorMessage(playerid,"Bu bölüme eriþim yetkiniz bulunmamaktadýr.");
			case 8: {
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sefere baslamak için bir týra binin.");
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515) return SendErrorMessage(playerid, "Bu mesleði sadece Roadtrain ve Linerunner ismili araçlarla yapýlabilir");

				// Týrcý Pos
				SetVehiclePos(tircilikArac, 2617.9460,836.0540,7.3158);
				SetVehicleZAngle(tircilikArac, 291.1759);
				tircilikDorse[playerid] = CreateVehicle(591, 2605.7971,831.5189,5.2031,291.8358, 35, 35, 5600);
				AttachTrailerToVehicle(tircilikDorse[playerid], GetPlayerVehicleID(playerid));
				Waypoint_Set(playerid, 2041.7294,2039.7290,10.8203,10.0);
				RepairVehicle(tircilikArac);

				// Sefer Kontrolü
				PlayerInfo[playerid][pTircilikSeferde] = 2;

				// Diðer
				SendSyntaxMessage(playerid,"Yük Alýndý, haritanýzda çýkan kýrmýzý checkpoint'i takip ederek yükünüzü teslim edebilirsiniz.");
				SendSyntaxMessage(playerid,"Yükünüzü teslim ettiðinizde 'Alacaðýnýz Kazanç' kýsmýnda ne yazýyorsa o miktarý alacaksýnýz.");
				return 1;
			}
		}
	}
	return 1;
}


Dialog:TircilikO3(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(response) {
		new tircilikArac = GetPlayerVehicleID(playerid);
		switch(listitem) // 2638.6077,857.0383,6.0938
		{
			case 0..7: return SendErrorMessage(playerid,"Bu bölüme eriþim yetkiniz bulunmamaktadýr.");
			case 8: {
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sefere baslamak için bir týra binin.");
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515) return SendErrorMessage(playerid, "Bu mesleði sadece Roadtrain ve Linerunner ismili araçlarla yapýlabilir");

				// Týrcý Pos
				SetVehiclePos(tircilikArac, 2001.7445,2064.7209,11.8203);
				SetVehicleZAngle(tircilikArac, 1.4043);
				tircilikDorse[playerid] = CreateVehicle(591, 2001.5729,2053.3198,10.8203,1.4043, 35, 35, 5600);
				AttachTrailerToVehicle(tircilikDorse[playerid], GetPlayerVehicleID(playerid));
				Waypoint_Set(playerid, 74.7177,-253.5841,1.5781, 10.0);
				RepairVehicle(tircilikArac);

				// Sefer Kontrolü
				PlayerInfo[playerid][pTircilikSeferde] = 3;

				// Diðer
				SendSyntaxMessage(playerid,"Yük Alýndý, haritanýzda çýkan kýrmýzý checkpoint'i takip ederek yükünüzü teslim edebilirsiniz.");
				SendSyntaxMessage(playerid,"Yükünüzü teslim ettiðinizde 'Alacaðýnýz Kazanç' kýsmýnda ne yazýyorsa o miktarý alacaksýnýz.");
				return 1;
			}
		}
	}
	return 1;
}

Dialog:TircilikO4(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(response) {
		new tircilikArac = GetPlayerVehicleID(playerid);
		switch(listitem) // 2638.6077,857.0383,6.0938
		{
			case 0..7: return SendErrorMessage(playerid,"Bu bölüme eriþim yetkiniz bulunmamaktadýr.");
			case 8: {
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sefere baslamak için bir týra binin.");
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515) return SendErrorMessage(playerid, "Bu mesleði sadece Roadtrain ve Linerunner ismili araçlarla yapýlabilir");

				// Týrcý Pos
				SetVehiclePos(tircilikArac, 52.8383,-268.7483,2.6735);
				SetVehicleZAngle(tircilikArac, 359.7867);
				tircilikDorse[playerid] = CreateVehicle(591, 52.3846,-281.9156,1.6928,359.2776, 35, 35, 5600);
				AttachTrailerToVehicle(tircilikDorse[playerid], GetPlayerVehicleID(playerid));
				Waypoint_Set(playerid, -1046.8080,-658.3515,32.0126,10.0);
				RepairVehicle(tircilikArac);

				// Sefer Kontrolü
				PlayerInfo[playerid][pTircilikSeferde] = 4;

				// Diðer
				SendSyntaxMessage(playerid,"Yük Alýndý, haritanýzda çýkan kýrmýzý checkpoint'i takip ederek yükünüzü teslim edebilirsiniz.");
				SendSyntaxMessage(playerid,"Yükünüzü teslim ettiðinizde 'Alacaðýnýz Kazanç' kýsmýnda ne yazýyorsa o miktarý alacaksýnýz.");
				return 1;
			}
		}
	}
	return 1;
}

Dialog:TircilikO5(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(response) {
		new tircilikArac = GetPlayerVehicleID(playerid);
		switch(listitem) // 2638.6077,857.0383,6.0938
		{
			case 0..7: return SendErrorMessage(playerid,"Bu bölüme eriþim yetkiniz bulunmamaktadýr.");
			case 8: {
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sefere baslamak için bir týra binin.");
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515) return SendErrorMessage(playerid, "Bu mesleði sadece Roadtrain ve Linerunner ismili araçlarla yapýlabilir");

				// Týrcý Pos
				SetVehiclePos(tircilikArac, -1006.1572,-671.4103,33.0078);
				SetVehicleZAngle(tircilikArac, 90.1176);
				tircilikDorse[playerid] = CreateVehicle(591, -991.9940,-671.7813,32.0078,90.8342, 35, 35, 5600);
				AttachTrailerToVehicle(tircilikDorse[playerid], GetPlayerVehicleID(playerid));
				Waypoint_Set(playerid, -1978.9320,477.3718,29.0156,10.0);
				RepairVehicle(tircilikArac);

				// Sefer Kontrolü
				PlayerInfo[playerid][pTircilikSeferde] = 5;

				// Diðer
				SendSyntaxMessage(playerid,"Yük Alýndý, haritanýzda çýkan kýrmýzý checkpoint'i takip ederek yükünüzü teslim edebilirsiniz.");
				SendSyntaxMessage(playerid,"Yükünüzü teslim ettiðinizde 'Alacaðýnýz Kazanç' kýsmýnda ne yazýyorsa o miktarý alacaksýnýz.");
				return 1;
			}
		}
	}
	return 1;
}

Dialog:TircilikO6(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(response) {
		new tircilikArac = GetPlayerVehicleID(playerid);
		switch(listitem) // 2638.6077,857.0383,6.0938
		{
			case 0..7: return SendErrorMessage(playerid,"Bu bölüme eriþim yetkiniz bulunmamaktadýr.");
			case 8: {
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sefere baslamak için bir týra binin.");
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515) return SendErrorMessage(playerid, "Bu mesleði sadece Roadtrain ve Linerunner ismili araçlarla yapýlabilir");

				// Týrcý Pos
				SetVehiclePos(tircilikArac, -1974.0968,456.6853,36.1719);
				SetVehicleZAngle(tircilikArac, 0.7777);
				tircilikDorse[playerid] = CreateVehicle(591, -1973.9904,442.8313,35.1719,0.2293, 35, 35, 5600);
				AttachTrailerToVehicle(tircilikDorse[playerid], GetPlayerVehicleID(playerid));
				Waypoint_Set(playerid,-2457.4937,2292.7139,4.9844,10.0);
				RepairVehicle(tircilikArac);

				// Sefer Kontrolü
				PlayerInfo[playerid][pTircilikSeferde] = 6;

				// Diðer
				SendSyntaxMessage(playerid,"Yük Alýndý, haritanýzda çýkan kýrmýzý checkpoint'i takip ederek yükünüzü teslim edebilirsiniz.");
				SendSyntaxMessage(playerid,"Yükünüzü teslim ettiðinizde 'Alacaðýnýz Kazanç' kýsmýnda ne yazýyorsa o miktarý alacaksýnýz.");
				return 1;
			}
		}
	}
	return 1;
}

Dialog:TircilikO7(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(response) {
		new tircilikArac = GetPlayerVehicleID(playerid);
		switch(listitem) // 2638.6077,857.0383,6.0938
		{
			case 0..7: return SendErrorMessage(playerid,"Bu bölüme eriþim yetkiniz bulunmamaktadýr.");
			case 8: {
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sefere baslamak için bir týra binin.");
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515) return SendErrorMessage(playerid, "Bu mesleði sadece Roadtrain ve Linerunner ismili araçlarla yapýlabilir");

				// Týrcý Pos
				SetVehiclePos(tircilikArac, -2463.7144,2239.2202,5.7881);
				SetVehicleZAngle(tircilikArac, 0.1857);
				tircilikDorse[playerid] = CreateVehicle(591, -2464.0334,2228.1582,4.8438,359.5865, 35, 35, 5600);
				AttachTrailerToVehicle(tircilikDorse[playerid], GetPlayerVehicleID(playerid));
				Waypoint_Set(playerid, 1045.2523,2134.1365,10.8203,10.0);
				RepairVehicle(tircilikArac);

				// Sefer Kontrolü
				PlayerInfo[playerid][pTircilikSeferde] = 7;

				// Diðer
				SendSyntaxMessage(playerid,"Yük Alýndý, haritanýzda çýkan kýrmýzý checkpoint'i takip ederek yükünüzü teslim edebilirsiniz.");
				SendSyntaxMessage(playerid,"Yükünüzü teslim ettiðinizde 'Alacaðýnýz Kazanç' kýsmýnda ne yazýyorsa o miktarý alacaksýnýz.");
				return 1;
			}
		}
	}
	return 1;
}

Dialog:TircilikO8(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(response) {
		new tircilikArac = GetPlayerVehicleID(playerid);
		switch(listitem) // 2638.6077,857.0383,6.0938
		{
			case 0..7: return SendErrorMessage(playerid,"Bu bölüme eriþim yetkiniz bulunmamaktadýr.");
			case 8: {
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sefere baslamak için bir týra binin.");
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515) return SendErrorMessage(playerid, "Bu mesleði sadece Roadtrain ve Linerunner ismili araçlarla yapýlabilir");

				// Týrcý Pos
				SetVehiclePos(tircilikArac, 1024.3365,2125.9883,11.8203);
				SetVehicleZAngle(tircilikArac, 358.7756);
				tircilikDorse[playerid] = CreateVehicle(591, 1024.1471,2112.9583,10.8203,359.9115, 35, 35, 5600);
				AttachTrailerToVehicle(tircilikDorse[playerid], GetPlayerVehicleID(playerid));
				Waypoint_Set(playerid, -85.9225,-1189.7953,1.7500, 10.0);
				RepairVehicle(tircilikArac);

				// Sefer Kontrolü
				PlayerInfo[playerid][pTircilikSeferde] = 8;

				// Diðer
				SendSyntaxMessage(playerid,"Yük Alýndý, haritanýzda çýkan kýrmýzý checkpoint'i takip ederek yükünüzü teslim edebilirsiniz.");
				SendSyntaxMessage(playerid,"Yükünüzü teslim ettiðinizde 'Alacaðýnýz Kazanç' kýsmýnda ne yazýyorsa o miktarý alacaksýnýz.");
				return 1;
			}
		}
	}
	return 1;
}

Dialog:TircilikO9(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(response) {
		new tircilikArac = GetPlayerVehicleID(playerid);
		switch(listitem) // 2638.6077,857.0383,6.0938
		{
			case 0..7: return SendErrorMessage(playerid,"Bu bölüme eriþim yetkiniz bulunmamaktadýr.");
			case 8: {
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sefere baslamak için bir týra binin.");
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515) return SendErrorMessage(playerid, "Bu mesleði sadece Roadtrain ve Linerunner ismili araçlarla yapýlabilir");

				// Týrcý Pos
				SetVehiclePos(tircilikArac, -81.3688,-1152.4808,2.7500);
				SetVehicleZAngle(tircilikArac, 63.7146);
				tircilikDorse[playerid] = CreateVehicle(591, -70.1670,-1158.5942,1.7500,64.4197, 35, 35, 5600);
				AttachTrailerToVehicle(tircilikDorse[playerid], GetPlayerVehicleID(playerid));
				Waypoint_Set(playerid, 2289.317626, -2353.620849, 13.546875 ,10.0);
				RepairVehicle(tircilikArac);

				// Sefer Kontrolü
				PlayerInfo[playerid][pTircilikSeferde] = 9;

				// Diðer
				SendSyntaxMessage(playerid,"Yük Alýndý, haritanýzda çýkan kýrmýzý checkpoint'i takip ederek yükünüzü teslim edebilirsiniz.");
				SendSyntaxMessage(playerid,"Yükünüzü teslim ettiðinizde 'Alacaðýnýz Kazanç' kýsmýnda ne yazýyorsa o miktarý alacaksýnýz.");
				return 1;
			}
		}
	}
	return 1;
}

/* Mysql database fonksiyonlarý */
stock LoadMySQLSettings()
{
	new mysqlSettings = ini_openFile("mysql_settings.ini"),
		errCode;

	if(mysqlSettings < 0) {
		printf("[scriptfiles/mysql_settings.ini]: MySQL ayarlari acilirken hata olustu. Hata kodu: %d",mysqlSettings);
		return 0;
	}

	errCode = ini_getString(mysqlSettings,"host", sqlData[SQL_HOST]);
	if(errCode < 0) printf("[scriptfiles/mysql_settings.ini]: MySQL ayarlar dosyasi (ana bilgisayar) okunurken hata olustu. Hata kodu: %d",errCode);

	errCode = ini_getString(mysqlSettings,"user", sqlData[SQL_USER]);
	if(errCode < 0) printf("[scriptfiles/mysql_settings.ini]: MySQL ayarlar dosyasi (kullanici adi) okunurken hata olustu. Hata kodu: %d",errCode);

	errCode = ini_getString(mysqlSettings,"password", sqlData[SQL_PASS]);
	if(errCode < 0) printf("[scriptfiles/mysql_settings.ini]: MySQL ayarlar dosyasi (sifre) okunurken hata olustu. Hata kodu: %d",errCode);

	errCode = ini_getString(mysqlSettings,"database", sqlData[SQL_DB]);
	if(errCode < 0) printf("[scriptfiles/mysql_settings.ini]: MySQL ayarlar dosyasi (veritabanir) okunurken hata olustu. Hata kodu: %d",errCode);

	ini_closeFile(mysqlSettings);
	return 1;
}

stock SQL_OnQueryError(errorid, error[], callback[], query[])
{
    if (errorid == CR_SERVER_LOST)
	{
		if(!LoadMySQLSettings()) return 0;

	    dbHandle = mysql_connect(sqlData[SQL_HOST], sqlData[SQL_USER], sqlData[SQL_DB], sqlData[SQL_PASS]);
		mysql_log();
		if (mysql_errno() != 0) printf("[MySQL]: Yeniden baglanilamadi: %s", sqlData[SQL_HOST]);
		else
		{
			printf("[MySQL]: Yeniden baglanildi: %s | Kullanici Adi: %s", sqlData[SQL_HOST], sqlData[SQL_USER]);

            new infoLog[144];

            mysql_get_charset(infoLog);

            printf("[?] MySQL charset: %s", infoLog);

            mysql_set_charset("latin5");
            mysql_get_charset(infoLog);

		    new name[32];
			mysql_get_charset(name, 32);
			printf("[MySQL]: Encoding: %s", name);
		}
	}
	printf("[MySQL]: <|| error: %s | callback: %s | query: %s ||>", error, callback, query);
    return 1;
}

stock SQL_OnGameModeInit()
{
	if(!LoadMySQLSettings()) return 0;

    dbHandle = mysql_connect("localhost", "root", "", "gamemode");

    if(dbHandle == MYSQL_INVALID_HANDLE)
    {
        print("[!] Oyun MySQL sunucusuna baglanti basarisiz.");
        SendRconCommand("exit");
    }

    else
    {
		mysql_query(dbHandle, "set names utf8mb4");
        new infoLog[144];

        mysql_get_charset(infoLog);

        printf("[?] MySQL charset: %s", infoLog);

	    mysql_set_charset("latin5", dbHandle);
	    mysql_query(dbHandle, "SET NAMES latin5");
        mysql_get_charset(infoLog);

        printf("[?] MySQL ayarlari uygulandiktan sonra charset: %s", infoLog);
        printf("[+] Oyun MYSQL sunucusuna baglanti basarili.");
    }
	return 1;
}//??

stock SQL_SetInteger(sql_table[], sql_field[], sql_integer, sql_id)
{
    new sql_query[256];
    mysql_format(dbHandle, sql_query, sizeof(sql_query), "UPDATE `%s` SET `%s`=%i WHERE `id`=%i", sql_table, sql_field, sql_integer, sql_id);
    return mysql_tquery(dbHandle, sql_query);
}

stock SQL_SetIntegerAcc(sql_table[], sql_field[], sql_integer, sql_id)
{
    new sql_query[256];
    mysql_format(dbHandle, sql_query, sizeof(sql_query), "UPDATE `%s` SET `%s`=%i WHERE `forum_id`=%i", sql_table, sql_field, sql_integer, sql_id);
    return mysql_tquery(dbHandle, sql_query);
}

stock SQL_SetFloat(sql_table[], sql_field[], Float:sql_float, sql_id)
{
    new sql_query[256];
    mysql_format(dbHandle, sql_query, sizeof(sql_query), "UPDATE `%s` SET `%s`=%f WHERE `id`=%i", sql_table, sql_field, sql_float, sql_id);
    return mysql_tquery(dbHandle, sql_query);
}

stock SQL_SetString(sql_table[], sql_field[], sql_string[], sql_id)
{
    new sql_query[256];
    mysql_format(dbHandle, sql_query, sizeof(sql_query), "UPDATE `%s` SET `%s`='%e' WHERE `id`=%i", sql_table, sql_field, sql_string, sql_id);
    return mysql_tquery(dbHandle, sql_query);
}

stock SQL_SetStringAcc(sql_table[], sql_field[], sql_string[], sql_id)
{
    new sql_query[256];
    mysql_format(dbHandle, sql_query, sizeof(sql_query), "UPDATE `%s` SET `%s`='%e' WHERE `forum_id`=%i", sql_table, sql_field, sql_string, sql_id);
    return mysql_tquery(dbHandle, sql_query);
}

/* Teleport scripti */
this::LoadDynamicTeles()
{
    new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows)
	{
	    print("[Isinlanma] Kayit bulunamadi.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "id", AdminTeles[i][aID]);
		cache_get_value(i, "mapname", AdminTeles[i][telesMapName], 32);
		cache_get_value_float(i, "posx", AdminTeles[i][telesPosX]);
		cache_get_value_float(i, "posy", AdminTeles[i][telesPosY]);
		cache_get_value_float(i, "posz", AdminTeles[i][telesPosZ]);
		cache_get_value_int(i, "interior", AdminTeles[i][telesInt]);
		cache_get_value_int(i, "type", AdminTeles[i][telesType]);

		AdminTeles[i][telesOn] = 1;
        total++;
	}
	printf("[Isinlanma] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public OnTeleportInsert(playerid, teleid)
{
	AdminTeles[teleid][aID] = cache_insert_id();
	return 1;
}

AddTeleToFile(playerid, teleid, mapname[], interior, Float:x, Float:y, Float:z, type)
{
    new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `ateles` (mapname, posx, posy, posz, interior, type) VALUES ('%e', %f, %f, %f, %i, %i)", mapname, x, y, z, interior, type);
	mysql_tquery(dbHandle, query, "OnTeleportInsert", "dd", playerid, teleid);
	return 1;
}

/* Meslek sistemi */

CMD:pizza(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

	if (!pTemp[playerid][pPizzaBoy])								return SendErrorMessage(playerid, "Þu an teslimat sürecinde deðilsiniz. (/kurye)");
    if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))		return SendWarningMessage(playerid, "Elleriniz dolu.");

	new vehicle = GetPlayerVehicleID(playerid);

	if (vehicle != 0)																		return SendErrorMessage(playerid, "Herhangi bir araçta deðilsin.");
    if ((vehicle = GetNearVehicle(playerid, 3.0)) == 0 || GetVehicleModel(vehicle) != 448)	return SendErrorMessage(playerid, "Kurye motorunun yanýnda olmalýsýnýz.");

    SetPlayerAttachedObject(playerid, ATTACH_HANDS, 19571, 6, -0.157999, -0.002000, -0.169000, -21.999990, 87.000022, 0.000000, 1.186000, 1.000000, 1.170000);
  	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
  	InfoMSG(playerid, "Pizzayi birakmak icin \" ~r~ENTER ~w~\" tusuna basin.", 5);
	return 1;
}

CMD:kurye(playerid, params[])
{
	if(!MeslekSistemleri) return SendErrorMessage(playerid, "Meslek sistemleri pasife çekildi. Rol modu aktif edildi. (PayDay yükseltildi)");
	if (pTemp[playerid][pPizzaBoy])
	{
	    pTemp[playerid][pPizzaBoy] = 0;
	    SendSyntaxMessage(playerid, "Sipariþinizi teslim etmeyi reddettiniz. Yeni sipariþ iki dakika içinde hazýr olacak.");
	    DisableWaypoint(playerid);
	    SetPVarInt(playerid, #pizza_time, gettime() + 120);
	    return 1;
	}

	if (GetPVarInt(playerid, #pizza_time) > gettime())									return SendErrorMessage(playerid, "Sipariþ yok, lütfen daha sonra iletiþime geçin.");
	if (!IsDriver(playerid) || GetVehicleModel(GetPlayerVehicleID(playerid)) != 448)	return SendErrorMessage(playerid, "Kurye motoru kullanýyor olmalýsýnýz.");

	new i, apartid = random(MAX_APART);

	while(i == 0)
	{
	    if (!ApartInfo[apartid][aID])
		{
			apartid = random(MAX_APART);
		}
		else
		{
		    i = 1;
		    pTemp[playerid][pPizzaBoy] = apartid+1;
		    SendClientMessageEx(playerid, COLOR_SERVER2, "Yeni Sipariþ! Haritanýzda konum kýrýmzý nokta ile iþaretlendi", GetApartmentZone(ApartInfo[apartid][aID]));
            SendHelpMessage(playerid, "Haritanýzda belirtilen konuma gittikten sonra /pizza komutunu kullanarak pizza alýn ve kýrmýzý noktaya yürüyün.");

			Waypoint_Set(playerid, ApartInfo[apartid][aPosX], ApartInfo[apartid][aPosY], ApartInfo[apartid][aPosZ]);

		    return 1;
		}
	}
	return 1;
}

Taxi_OnPlayerStateChange(playerid, newstate)
{
    if (newstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicle = GetPlayerVehicleID(playerid), driver = VehicleInfo[vehicle][carDriver];
        if (IsPlayerLogged(driver) && TaxiDuty[driver] && TaxiPassenger[driver] == INVALID_PLAYER_ID)
        {
            if (GetCash(playerid) < TaxiFare[driver])
			{
		 		SendErrorMessage(playerid, "Yeterli paranýz bulunmuyor.");
		 		SendErrorMessage(driver, "Yolcunun yeterli parasý yok.");
		 		return 1;
			}
			TaxiPassenger[driver] = playerid;
            SendClientMessageEx(playerid, COLOR_YELLOWG, "[TAKSI] %s kiþisinin taksisini tuttunuz. Ücretlendirme: $%i/5 saniye.", GetNameEx(driver), TaxiFare[driver]);
		}
	}
    return 1;
}

SendTaxiRequest(playerid, location[])
{
    foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || !TaxiDuty[i] || PlayerInfo[i][pJob] != JOB_TAXI) continue;

        SendClientMessage(i, COLOR_SERVER2, "|___________Taksi Çaðrýsý___________|");
		if (pTemp[playerid][pPayphone] == -1)
			SendClientMessageEx(i, COLOR_WHITE, "Arayan: %s Telefon: %i", GetNameEx(playerid), PlayerInfo[playerid][pNumber]);
		else
			SendClientMessageEx(i, COLOR_WHITE, "Arayan: Ankesörlü Telefon, Telefon: %i", PayphoneInfo[pTemp[playerid][pPayphone]][phNumber]);
		SendClientMessageEx(i, COLOR_WHITE, "Lokasyon: %s", location);
		SendClientMessageEx(i, COLOR_SERVER2, "(( Çaðrýyý kabul etmek için: /taksi kabul %i ))", playerid);
	}
	return 1;
}

Taxi_OnGameModeInit()
{
    return SetTimer("Taxi_FiveSecTimer", 5000, false);
}

forward Taxi_FiveSecTimer();
public Taxi_FiveSecTimer()
{
    foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || !TaxiDuty[i] || TaxiPassenger[i] == INVALID_PLAYER_ID)     continue;

		new targetid = TaxiPassenger[i], vehicle = GetPlayerVehicleID(i);

		new location[MAX_ZONE_NAME],
		Float:x, Float:y, Float:z;

	    GetPlayerPos(i, x, y, z);
	    GetZone(x, y, location, MAX_ZONE_NAME);

		if (!IsDriver(i))
		{
		    new mes[32];
   			format(mes, sizeof(mes),"~r~+$%i TOPLAM: $%i", TaxiMoney[i], TaxiMade[i]);
	    	GameTextForPlayer(i, mes, 2000, 1);

        	TaxiPassenger[i] = INVALID_PLAYER_ID;
        	TaxiMoney[i] = 0;
        	continue;
		}

		if (!IsPlayerLogged(targetid) || !IsPlayerInVehicle(targetid, vehicle))
		{
		    new mes[32];
   			format(mes, sizeof(mes),"~r~+$%i TOPLAM: $%i", TaxiMoney[i], TaxiMade[i]);
	    	GameTextForPlayer(i, mes, 2000, 1);

        	TaxiPassenger[i] = INVALID_PLAYER_ID;
        	TaxiMoney[i] = 0;
        	continue;
		}

        if(strfind(location, "Portland View", true) != -1 || strfind(location, "Little Italy", true) != -1 || strfind(location, "Chinatown", true) != -1 && GetVehicleSpeed(vehicle) > 15)
		{
			TaxiMade[i] += 3;
		}

		if (GetCash(targetid) >= TaxiFare[i])
		{
		    GiveCash(targetid, -TaxiFare[i]);
		    TaxiMade[i] += TaxiFare[i];
			TaxiMoney[i] += TaxiFare[i];

			new mes[32];
   			format(mes, sizeof(mes),"~y~UCRET: $%i", TaxiMoney[i]);
	    	GameTextForPlayer(i, mes, 5050, 1);
	    	GameTextForPlayer(targetid, mes, 5050, 1);
		}
		else
		{
		    new mes[32];
   			format(mes, sizeof(mes),"~r~+$%i TOPLAM: $%i", TaxiMoney[i], TaxiMade[i]);
	    	GameTextForPlayer(i, mes, 2000, 1);
		    SendSyntaxMessage(i, "Yolcunun parasý bitti, bedavaya taþýyorsun.");
		    TaxiPassenger[i] = INVALID_PLAYER_ID;
		    TaxiMoney[i] = 0;
		}
	}
	SetTimer("Taxi_FiveSecTimer", 5000, false);
	return 1;
}

CMD:taksi(playerid, params[])
{
	new option[11], secoption, vehicle = GetPlayerVehicleID(playerid);

	if (PlayerInfo[playerid][pJob] != JOB_TAXI)	return SendErrorMessage(playerid, "Taksi þoförü deðilsiniz.");
	if (sscanf(params,"s[11]D(-1)", option, secoption))
	{
		SendHelpMessage(playerid, "/taksi [ayarlar]"); //äîñòóïíûå
		SendSyntaxMessage(playerid, "isbasi / ucret / kabul");
		return 1;
	}

	if (!IsDriver(playerid))	return SendErrorMessage(playerid, "Bir taksi veya cabbie aracýnda olmalýsýnýz.");
	if (!IsATaxi(vehicle))	return SendErrorMessage(playerid, "Bir taksi veya cabbie aracýnda olmalýsýnýz.");

	if (CompareStrings(option, "isbasi"))
	{
		if (TaxiDuty[playerid])
		{
			SCM(playerid, COLOR_YELLOWG, "[TAKSÝ] Ýþbaþýndan çýktýnýz, artýk sizin için aramalar aktif deðil. ");
			SendClientMessageEx(playerid, COLOR_YELLOWG, "[TAKSÝ] $%i tutarýnda ödeme aldýnýz.", TaxiMade[playerid]);
			GiveCash(playerid, TaxiMade[playerid]);
			SetPlayerColor(playerid, TEAM_HIT_COLOR);
			TaxiDuty[playerid] = false;
			TaxiMade[playerid] = 0;
			TaxiMoney[playerid] = 0;
			TaxiPassenger[playerid] = INVALID_PLAYER_ID;
			return 1;
		}

		SendClientMessageEx(playerid, COLOR_YELLOWG, "[TAKSÝ] Ýþbaþýna girdiniz ve çaðrýlarý alabilirsiniz. Ücret: $%i/5 saniye.", TaxiFare[playerid]);
		SendClientMessageEx(playerid, COLOR_YELLOWG, "[TAKSÝ] Eðer Portland'in merkez sahalarýnda dolaþýrsanýz ekstra ücret alacaksýnýz.");
		SendClientMessageEx(playerid, COLOR_YELLOWG, "[TAKSÝ] Ücretinizi iþiniz bittikten sonra iþbaþýnýzý kapatarak alabilirsiniz.");
		TaxiDuty[playerid] = true;
		TaxiMoney[playerid] = 0;
		TaxiMade[playerid] = 0;
		TaxiPassenger[playerid] = INVALID_PLAYER_ID;

		foreach(new i : Player)
		{
		    if (!IsPlayerLogged(i) || !IsPlayerInVehicle(i, vehicle) || GetPlayerState(i) != PLAYER_STATE_PASSENGER)	continue;

			TaxiPassenger[playerid] = i;
			SendClientMessageEx(i, COLOR_YELLOWG, "[TAKSÝ] %s taksi tuttu. Ücret: $%i/5 saniye.", GetNameEx(playerid), TaxiFare[playerid]);
			break;
		}

		return 1;
	}

	else if (CompareStrings(option, "ucret"))
	{
		new fare;

		if (sscanf(params,"{s[11]}d",fare))			return SendHelpMessage(playerid, "/taksi ucret [taksimetre ücreti]");
		if (fare < 1 || fare > 25)					return SendErrorMessage(playerid, "Ücret $1 ile $25 arasýnda olmalýdýr.");
		if (IsPlayerLogged(TaxiPassenger[playerid]))	return SendErrorMessage(playerid, "Ücretlendirmeyi deðiþtirmeden önce müþteriyi býrakmalýsýnýz.");

		SendClientMessageEx(playerid,COLOR_YELLOWG,"[TAKSÝ] Ücretlendirme deðiþtirildi: $%i/5 saniye", fare);
		TaxiFare[playerid] = fare;
	}

	else if (CompareStrings(option, "kabul"))
	{
		new id, Float:x, Float:y, Float:z;

		if (sscanf(params,"{s[11]}u",id))	return SendHelpMessage(playerid, "/taksi kabul [ID / isim]");
		if (!TaxiDuty[playerid])				return SendErrorMessage(playerid, "Çaðrýyý kabul etmek için iþbaþýnda olmalýsýnýz. /taksi isbasi");
		if (!IsPlayerLogged(id))				return SendNotConnected(playerid);
		if (GetPVarInt(id, "NeedTaxi") == 0)	return SendErrorMessage(playerid, "Bu oyuncu bir taksi çaðýrmadý veya birisi aramayý kabul etti.");

		SendSyntaxMessage(id, "%s çaðrýyý kabul etti. Ücretlendirme: $%i/5 saniye.", GetNameEx(playerid), TaxiFare[playerid]);
		SendSyntaxMessage(playerid, "%s adlý kiþinin çaðrýsýný kabul ettiniz, Telefon: %i", GetNameEx(id), PlayerInfo[id][pNumber]);
		GetPlayerPos(id, x, y, z);
		Waypoint_Set(playerid, x, y, z, 3.0);
		DeletePVar(id, "NeedTaxi");
	}
	return 1;
}

this::LoadDynamicTrashes()
{
    new rows = cache_num_rows(), time = GetTickCount(), total, label[64];

	if (!rows)	return print("[Trash Bins] Kayit bulunamadi.");

	for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "id", TrashData[i][TrashID]);
		cache_get_value_float(i, "x", TrashData[i][TrashX]);
		cache_get_value_float(i, "y", TrashData[i][TrashY]);
		cache_get_value_float(i, "z", TrashData[i][TrashZ]);
		cache_get_value_float(i, "rz", TrashData[i][TrashRZ]);
		cache_get_value_int(i, "type", TrashData[i][TrashType]);

		TrashData[i][TrashLevel] = (TrashData[i][TrashType] == TYPE_BIN) ? 1 : 2;

        format(label, sizeof(label), "%s", (TrashData[i][TrashType] == TYPE_BIN) ? ("Çöp Tenekesi") : ("Çöp Konteynýrý"));
		TrashData[i][TrashLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, TrashData[i][TrashX], TrashData[i][TrashY], TrashData[i][TrashZ]+1.25, 15.0, .testlos = 1);

        new trashModel = (TrashData[i][TrashType] == TYPE_DUMPSTER) ? 1344 : 1328;
        TrashData[i][TrashObject] = CreateDynamicObject(trashModel, TrashData[i][TrashX], TrashData[i][TrashY], TrashData[i][TrashZ], 0.0, 0.0, TrashData[i][TrashRZ], 0, 0);

		total++;
	}
	printf("[Trash Bins] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

this::OnTrashInsert(id)
{
	return TrashData[id][TrashID] = cache_insert_id();
}

this::LoadDynamicFactories()
{
    new rows = cache_num_rows(), time = GetTickCount(), total, label[128];

	if (!rows)	return print("[Trash Factories] Kayit bulunamadi.");

	for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "id", FactoryData[i][FactoryID]);
		cache_get_value(0, "name", FactoryData[i][FactoryName], 32);
		cache_get_value_float(i, "x", FactoryData[i][FactoryX]);
		cache_get_value_float(i, "y", FactoryData[i][FactoryY]);
		cache_get_value_float(i, "z", FactoryData[i][FactoryZ]);

	    format(label, sizeof(label), "Geri Dönüþüm Tesisi - %s\n\n{FFFFFF}Mevcut Geri Dönüþüm Tesisi: {F39C12}0", FactoryData[i][FactoryName]);
		FactoryData[i][FactoryLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ] + 0.5, 15.0, .testlos = 1);
		//FactoryData[i][FactoryCP] = CreateDynamicCP(FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ], 6.0);

		total++;
	}
	printf("[Trash Factories] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

this::OnFactoryInsert(id)
{
	return FactoryData[id][FactoryID] = cache_insert_id();
}

Trash_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rz)
{
    new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;

    GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

    if (GetPVarInt(playerid, #edit_trash) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
	    new id = GetPVarInt(playerid, #edit_trash)-1;

		DeletePVar(playerid, #edit_trash);
	    if (id < 0 || id >= MAX_TRASHES || !TrashData[id][TrashID])	return SendErrorMessage(playerid, "Çöp bulunamadý.");
	    if (objectid != TrashData[id][TrashObject])					return SendErrorMessage(playerid, "Çöp düzenlemedi.");

		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, 0.0, 0.0, rz);

        GetDynamicObjectPos(objectid, TrashData[id][TrashX], TrashData[id][TrashY], TrashData[id][TrashZ]);
        TrashData[id][TrashRZ] = rz;

		if (IsValidDynamic3DTextLabel(TrashData[id][TrashLabel])) DestroyDynamic3DTextLabel(TrashData[id][TrashLabel]);

		new label[64];
        format(label, sizeof(label), "%s", (TrashData[id][TrashType] == TYPE_BIN) ? ("Çöp Tenekesi") : ("Çöp Konteynýrý"));
		TrashData[id][TrashLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, TrashData[id][TrashX], TrashData[id][TrashY], TrashData[id][TrashZ]+1.25, 15.0, .testlos = 1);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `trashes` SET `x`=%f,`y`=%f,`z`=%f,`rz`=%f WHERE `id`=%i", x, y, z, rz, TrashData[id][TrashID]);
		mysql_tquery(dbHandle, query);

		SendAdmMessageToPlayer(playerid, "Çöp pozisyonu düzenlendi: [ID: %i]", id);
	}
    return 1;
}

Trash_InitPlayer(playerid)
{
    HasTrash[playerid] = false;
    TrashCP[playerid] = -1;

    for(new i; i < sizeof(FactoryData); i++)
	{
		TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 0);
		FactoryIcons[playerid][i] = -1;
	}

	/*CapacityText[playerid] = CreatePlayerTextDraw(playerid, 32.000000, 290.000000, "ÒÐÀÍÑÏÎÐÒ ÇÀÏÎËÍÅÍ ÍÀ 0/10");
	PlayerTextDrawBackgroundColor(playerid, CapacityText[playerid], 255);
	PlayerTextDrawFont(playerid, CapacityText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, CapacityText[playerid], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid, CapacityText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, CapacityText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, CapacityText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, CapacityText[playerid], 0);*/


	CapacityText[playerid] = CreatePlayerTextDraw(playerid, 15.416525, 171.518585, "COP__~w~IIIIIIIIII~n~DOLULUK 0 / 10");
	PlayerTextDrawLetterSize(playerid, CapacityText[playerid], 0.164166, 0.951852);
	PlayerTextDrawAlignment(playerid, CapacityText[playerid], 1);
	PlayerTextDrawColor(playerid, CapacityText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, CapacityText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, CapacityText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, CapacityText[playerid], 255);
	PlayerTextDrawFont(playerid, CapacityText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, CapacityText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, CapacityText[playerid], 0);

	//CapacityBar[playerid] = CreatePlayerProgressBar(playerid, 30.000000, 304.000000, 118.500000, 6.199999, -1429936641, TRASH_LIMIT, 0);
	return 1;
}

Trash_ResetPlayer(playerid, removeUI = 0)
{
	if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACHMENT_INDEX)) RemovePlayerAttachedObject(playerid, ATTACHMENT_INDEX);
	if (IsValidDynamicCP(TrashCP[playerid])) DestroyDynamicCP(TrashCP[playerid]);
	HasTrash[playerid] = false;
	TrashCP[playerid] = -1;

	if (removeUI)
	{
	    PlayerTextDrawDestroy(playerid, CapacityText[playerid]);
	    //DestroyPlayerProgressBar(playerid, CapacityBar[playerid]);
	}

	return 1;
}

Trash_ShowCapacity(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);

	static const capacity_string[] = "COP__~y~%s~n~DOLULUK %d / %d";
	new progress[TRASH_LIMIT+3], mes[sizeof(capacity_string)+sizeof(progress)+10];

	for (new i = 1; i <= TRASH_LIMIT; i++) {
		format(progress, sizeof(progress), "%sI", progress);
		if (LoadedTrash[vehicleid] == i) {
			format(progress, sizeof(progress), "%s~w~", progress);
		}
	}

	format(mes, sizeof(mes), capacity_string, progress, LoadedTrash[vehicleid], TRASH_LIMIT);

	if (LoadedTrash[vehicleid] == TRASH_LIMIT) {
		format(mes, sizeof(mes), "COP__~r~IIIIIIIIII~n~~w~DOLU!");
	}

    PlayerTextDrawSetString(playerid, CapacityText[playerid], mes);
    PlayerTextDrawShow(playerid, CapacityText[playerid]);

	//SetPlayerProgressBarValue(playerid, CapacityBar[playerid], LoadedTrash[vehicleid]);
	//ShowPlayerProgressBar(playerid, CapacityBar[playerid]);
	return 1;
}

Trash_Nearest(playerid, Float: dist = 3.0)
{
	new closest_id = -1, Float: tempdist;
    for(new i; i < sizeof(TrashData); i++)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, TrashData[i][TrashX], TrashData[i][TrashY], TrashData[i][TrashZ]);
		if (tempdist > dist) continue;
		if (tempdist <= dist)
		{
		    dist = tempdist;
		    closest_id = i;
		}
	}

	return closest_id;
}

Trash_CheckFreeSlot()
{
	new id = -1;
	for(new i = 0; i < MAX_TRASHES; i++)
	{
		if (TrashData[i][TrashID]) continue;

		id = i;
		break;
	}
	return id;
}

Factory_Nearest(playerid, Float: dist = 3.0)
{
	new closest_id = -1, Float: tempdist;
    for(new i; i < MAX_FACTORIES; i++)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ]);
		if (tempdist > dist) continue;
		if (tempdist <= dist)
		{
		    dist = tempdist;
		    closest_id = i;
		}
	}

	return closest_id;
}

Factory_CheckFreeSlot()
{
	new id = -1;
	for(new i = 0; i < MAX_FACTORIES; i++)
	{
		if (FactoryData[i][FactoryID]) continue;

		id = i;
		break;
	}
	return id;
}

EndTrashJob(playerid)
{
	for(new i; i < sizeof(FactoryData); i++)
	{
		if (IsValidDynamicMapIcon(FactoryIcons[playerid][i]))
		{
			DestroyDynamicMapIcon(FactoryIcons[playerid][i]);
			FactoryIcons[playerid][i] = -1;
		}

		TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 0);
	}

	Trash_ResetPlayer(playerid);
	PlayerTextDrawHide(playerid, CapacityText[playerid]);
	//HidePlayerProgressBar(playerid, CapacityBar[playerid]);
	return 1;
}

Trash_OnPlayerStateChange(playerid, newstate, oldstate)
{
	if (newstate == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if (IsTrashMasterCar(vehicleid) && pTemp[playerid][pRentveh] == vehicleid && pTemp[playerid][pJob])
	    {
		    if (LoadedTrash[vehicleid] > 0) {
				SendHelpMessage(playerid, "Çöp kamyonunda bulunan çöplerden (%d) kazanýlacak tutar: {2ECC71}$%d.", LoadedTrash[vehicleid], LoadedTrash[vehicleid] * TRASH_BAG_VALUE);
				SendHelpMessage(playerid, "Çöp kamyonunu çöp sahasýnda (haritada iþaretli) boþaltabilir ve bunun için ödeme alabilirsiniz.");

				for(new i; i < sizeof(FactoryData); i++)
				{
					if (!FactoryData[i][FactoryID]) continue;
				    FactoryIcons[playerid][i] = CreateDynamicMapIcon(FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ], 51, 0, _, _, playerid, 8000.0, MAPICON_GLOBAL);
					TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 1);
				}
		    } else {
		        SendHelpMessage(playerid, "Para kazanabilmek için çöp kutularýndan ve çöp konteynýrlarýndan çöp toplamanýz gerekmektedir.");
		    }
			Trash_ResetPlayer(playerid);
			Trash_ShowCapacity(playerid);
		}
	}

	if (oldstate == PLAYER_STATE_DRIVER)
	{
		if (PlayerInfo[playerid][pJob] == JOB_TRASHMASTER && pTemp[playerid][pJob])
		{
			EndTrashJob(playerid);
		}
	}
	return 1;
}

Trash_OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if (checkpointid == TrashCP[playerid])
	{
	    if (!HasTrash[playerid]) return SendErrorMessage(playerid, "Çöp poþetin yok.");

	    new vehicleid = pTemp[playerid][pRentveh];
	    if (LoadedTrash[vehicleid] >= TRASH_LIMIT) return SendErrorMessage(playerid, "Çöp kamyonu tamamen çöple týkanmýþ, çöplükte boþaltýn!");

		LoadedTrash[vehicleid]++;
		ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0);
		InfoMSG(playerid, "~w~Cop kamyonuna cop ~y~koydun~w~", 3);

		if (TRASH_LIMIT - LoadedTrash[vehicleid] == 0)
		{
			SendSyntaxMessage(playerid, "Çöp kamyonu tamamen çöple týkanmýþ, çöplükte boþaltýn! ");
		}

		new driver = GetVehicleDriver(vehicleid);
		if (IsPlayerConnected(driver)) Trash_ShowCapacity(driver);
		Trash_ResetPlayer(playerid);
		return 1;
	}

    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new i; i < sizeof(FactoryData); i++)
		{
		    if (checkpointid == FactoryData[i][FactoryCP])
		    {
		        new vehicleid = GetPlayerVehicleID(playerid), cash = LoadedTrash[vehicleid] * TRASH_BAG_VALUE;

		        SendSyntaxMessage(playerid, "Çöp kamyonunda bulunan çöplerden (%d) kazanýlacak tutar: {2ECC71}$%d..", LoadedTrash[vehicleid], cash);
		        GiveCash(playerid, cash);

		        FactoryData[i][FactoryCurrent] += LoadedTrash[vehicleid];
		        LoadedTrash[vehicleid] = 0;
                Trash_ShowCapacity(playerid);

				new string[128];
                format(string, sizeof(string), "Geri Dönüþüm Tesisi - %s\n\n{FFFFFF}Geri dönüþtürülmüþ atýk miktarý: {F39C12}%d", FactoryData[i][FactoryName], FactoryData[i][FactoryCurrent]);
                UpdateDynamic3DTextLabelText(FactoryData[i][FactoryLabel], 0x2ECC71FF, string);

		        for(new x; x < sizeof(FactoryData); x++)
				{
				    if (IsValidDynamicMapIcon(FactoryIcons[playerid][x]))
				    {
				        DestroyDynamicMapIcon(FactoryIcons[playerid][x]);
				        FactoryIcons[playerid][x] = -1;
				    }

					TogglePlayerDynamicCP(playerid, FactoryData[x][FactoryCP], 0);
				}

		        break;
		    }
		}
	}

	return 1;
}

this::FillTrash(id)
{
	TrashData[id][TrashLevel]++;
	if (TrashData[id][TrashType] == TYPE_BIN && TrashData[id][TrashLevel] > 1) TrashData[id][TrashLevel] = 1;

	if (TrashData[id][TrashType] == TYPE_DUMPSTER) {
		if (TrashData[id][TrashLevel] == 1) TrashData[id][TrashTimer] = SetTimerEx("FillTrash", REFILL_TIME * 1000, false, "i", id);
		if (TrashData[id][TrashLevel] >= 2)
		{
			TrashData[id][TrashLevel] = 2;
			KillTimer(TrashData[id][TrashTimer]);
			TrashData[id][TrashTimer] = -1;
		}

		Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TrashData[id][TrashLabel], E_STREAMER_COLOR, (TrashData[id][TrashLevel] == 1) ? 0xF39C12FF : 0x2ECC71FF);
		return 1;
	}

	Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TrashData[id][TrashLabel], E_STREAMER_COLOR, 0x2ECC71FF);
	return 1;
}

alias:copculuk("copkutusu");
CMD:copculuk(playerid, params[])
{
    if (PlayerInfo[playerid][pJob] != JOB_TRASHMASTER)	return SendErrorMessage(playerid, "Ýþbaþýnda deðilsiniz.");
	if (IsPlayerInAnyVehicle(playerid))                  return SendErrorMessage(playerid, "Bu komutu bir araçtayken kullanamazsýnýz!");
    if (HasTrash[playerid])                              return SendErrorMessage(playerid, "Elinizde zaten bir çöp torbasý var!");

	if (!pTemp[playerid][pRentveh])  return SendErrorMessage(playerid, "Öncelikle bir araç kiralamanýz gerekiyor! (/mak)");
    if (!pTemp[playerid][pJob])      return SendErrorMessage(playerid, "Öncelikle çalýþýlabilecek bir araç kiralamanýz gerekiyor! (/mak)");

    new vehicleid = pTemp[playerid][pRentveh];
    if (!IsTrashMasterCar(vehicleid) || !IsATrashTruck(vehicleid)) return SendErrorMessage(playerid, "Bir çöp kamyonuyla gelmediniz!");

    new id = Trash_Nearest(playerid);
	if (id == -1)                      return SendErrorMessage(playerid, "Yanýnda çöp kutusu yok!");
	if (TrashData[id][TrashLevel] < 1) return SendErrorMessage(playerid, "Çöp kutusu boþ!");

    new Float: x, Float: y, Float: z;
    GetVehicleBoot(vehicleid, x, y, z);
    if (GetPlayerDistanceFromPoint(playerid, x, y, z) >= 30.0) return SendErrorMessage(playerid, "Yakýnýnýzda çöp kamyonu yok!");

    TrashData[id][TrashLevel]--;
	KillTimer(TrashData[id][TrashTimer]);

    TrashData[id][TrashTimer] = SetTimerEx("FillTrash", REFILL_TIME * 1000, false, "i", id);

    TrashCP[playerid] = CreateDynamicCP(x, y, z, 3.0, .playerid = playerid);
	HasTrash[playerid] = true;

    ApplyAnimation(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0);
	SetPlayerAttachedObject(playerid, ATTACHMENT_INDEX, 1264, 6, 0.222, 0.024, 0.128, 1.90, -90.0, 0.0, 0.5,0.5, 0.5);

    Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TrashData[id][TrashLabel], E_STREAMER_COLOR, (TrashData[id][TrashLevel] == 0) ? 0xE74C3CFF : 0xF39C12FF);

    InfoMSG(playerid, "Cop torbasini ~h~~g~cop kamyonuna ~w~goturun.~n~ Torbayi atabilmek icin - ~r~~k~~CONVERSATION_NO~ tusuna basiniz.", 5);
	return 1;
}

Trucker_OnGameModeInit()
{
    return mysql_tquery(dbHandle, "SELECT * FROM `truck_cargo`", "LoadDynamicTruckCargo");
}

Ship_Init()
{
    ship_docked = 1;
    ship_arrived = gettime();
	ship_depart = gettime() + 2400;
	ship_next = gettime() + 2400 + 340;

    obj_lamp[0] = CreateDynamicObject(19123, 2810.646240, -2390.074218, 13.175701, 0.000000, 0.000000, 0.000000, 0, 0);
	obj_lamp[1] = CreateDynamicObject(19123, 2810.652832, -2381.859375, 13.175693, 0.000000, 0.000000, 0.000000, 0, 0);
	obj_lamp[2] = CreateDynamicObject(19123, 2810.635986, -2394.476562, 13.195693, 0.000000, 0.000000, 0.000000, 0, 0);
	obj_lamp[3] = CreateDynamicObject(19123, 2810.634765, -2386.070800, 13.185685, 0.000000, 0.000000, 0.000000, 0, 0);
	obj_lamp[4] = CreateDynamicObject(19123, 2810.649414, -2431.452880, 13.195693, 0.000000, 0.000007, 0.000000, 0, 0);
	obj_lamp[5] = CreateDynamicObject(19123, 2810.649414, -2444.330322, 13.195693, 0.000000, 0.000007, 0.000000, 0, 0);
	obj_lamp[6] = CreateDynamicObject(19123, 2810.649414, -2439.667724, 13.195693, 0.000000, 0.000007, 0.000000, 0, 0);
	obj_lamp[7] = CreateDynamicObject(19123, 2810.649414, -2435.664306, 13.195693, 0.000000, 0.000007, 0.000000, 0, 0);

	obj_gate[0] = CreateDynamicObject(3069, 2811.04248, -2391.13989, 12.62090,   -15.00000, 0.00000, -90.00000, 0, 0);
	obj_gate[1] = CreateDynamicObject(3069, 2811.04248, -2385.13550, 12.62090,   -15.00000, 0.00000, -90.00000, 0, 0);
	obj_gate[2] = CreateDynamicObject(3069, 2811.04248, -2441.09058, 12.62090,   -15.00000, 0.00000, -90.00000, 0, 0);
	obj_gate[3] = CreateDynamicObject(3069, 2811.04248, -2435.13501, 12.62090,   -15.00000, 0.00000, -90.00000, 0, 0);


    obj_ship[0] = CreateDynamicObject(-21954, 1162.099975, -1135.086059, 40.820243, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    obj_ship[1]= CreateDynamicObject(2939, 1210.698730, -1099.750610, 30.940843, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    obj_ship[2] = CreateDynamicObject(2939, 1210.698730, -1105.350463, 33.412845, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    obj_ship[3] = CreateDynamicObject(2939, 1210.698730, -1110.950561, 35.852832, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	obj_ship[4] = CreateDynamicObject(5155, 2838.02344, -2358.47656, 21.31250,   0.00000, 0.00000, 270.00000, 0, 0);
	obj_ship[5] = CreateDynamicObject(5158, 2837.77344, -2334.47656, 11.99220,   0.00000, 0.00000, 0.00000, 0, 0);
	obj_ship[6] = CreateDynamicObject(3724, 2838.19531, -2407.14063, 29.31250,   0.00000, 0.00000, 270.00000, 0, 0);
	obj_ship[7] = CreateDynamicObject(3724, 2838.19531, -2488.66406, 29.31250,   0.00000, 0.00000, 270.00000, 0, 0);
	obj_ship[8] = CreateDynamicObject(5336, 2829.95313, -2479.57031, 5.26560,   0.00000, 0.00000, 0.00000, 0, 0);
	obj_ship[9] = CreateDynamicObject(5156, 2838.03906, -2423.88281, 10.96094,   0.00000, 0.00000, 270.00000, 0, 0);
	obj_ship[10] = CreateDynamicObject(5154, 2838.14063, -2447.84375, 15.75000,   0.00000, 0.00000, 270.00000, 0, 0);

	time_truck = 3600;
	return 1;
}

Ship_OnDynamicObjectMoved(objectid)
{
	if (objectid == obj_ship[0] && ship_docked == 3)
    {
	    ship_docked = 1;

		new Float: ox, Float: oy, Float: oz;

		for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
	        if (i < 8)	Streamer_SetIntData(STREAMER_TYPE_OBJECT, obj_lamp[i], E_STREAMER_MODEL_ID, 19123);

	        if (i < 4)
	        {
	            GetDynamicObjectPos(obj_gate[i], ox, oy, oz);
	        	MoveDynamicObject(obj_gate[i], ox + 10.0, oy, oz, 1.5);
	        }

	        if (TruckCargo[i][tOn] == 0 || TruckCargo[i][tType] != 2) continue;

			Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TruckCargo[i][tLabel], E_STREAMER_INTERIOR_ID, 0);
       		Streamer_SetIntData(STREAMER_TYPE_PICKUP, TruckCargo[i][tPickup], E_STREAMER_INTERIOR_ID, 0);
		}
	}

	if (objectid == obj_ship[0] && ship_docked == 2) ship_docked = 0;

	return 1;
}

forward OnTruckCargoInsert(cargoid);
forward LoadDynamicTruckCargo();

public OnTruckCargoInsert(cargoid)
{
	TruckCargo[cargoid][tID] = cache_insert_id();
	return 1;
}

public LoadDynamicTruckCargo()
{
	new rows = cache_num_rows(), time = GetTickCount(), total, mes[128];

	if (!rows)
	{
	    print("[Truck Cargo] Kayit bulunamadi.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "id", TruckCargo[i][tID]);
	    cache_get_value_int(i, "type", TruckCargo[i][tType]);
		cache_get_value(i, "name", TruckCargo[i][tName], 64);
		cache_get_value_int(i, "storage", TruckCargo[i][tStorage]);
	    cache_get_value_int(i, "storage_size", TruckCargo[i][tStorageSize]);
		cache_get_value_int(i, "price", TruckCargo[i][tPrice]);
		cache_get_value_int(i, "product_id", TruckCargo[i][tProductID]);
		cache_get_value_int(i, "product_amount", TruckCargo[i][tProductAmount]);
		cache_get_value_int(i, "pack", TruckCargo[i][tPack]);
		cache_get_value_int(i, "gps", TruckCargo[i][tGps]);
		cache_get_value_int(i, "locked", TruckCargo[i][tLocked]);
		cache_get_value_float(i, "x", TruckCargo[i][tPosX]);
		cache_get_value_float(i, "y", TruckCargo[i][tPosY]);
		cache_get_value_float(i, "z", TruckCargo[i][tPosZ]);
		TruckCargo[i][tResult] = 0;

		format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\nStok: %i / %i\nFiyat: $%i / adet", truckcargo_product[TruckCargo[i][tProductID]], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize], TruckCargo[i][tPrice]);

		TruckCargo[i][tLabel] = CreateDynamic3DTextLabel(mes, 0xFFFFFFFF, TruckCargo[i][tPosX], TruckCargo[i][tPosY], TruckCargo[i][tPosZ]+0.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 100.0);
		TruckCargo[i][tPickup] = CreateDynamicPickup(1318, 1, TruckCargo[i][tPosX], TruckCargo[i][tPosY], TruckCargo[i][tPosZ], 0, 0, -1, 100.0);
		TruckCargo[i][tOn] = 1;
        total++;
	}
	printf("[Truck Cargo] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

Show_Industry(playerid, id, gps = 0)
{
	new mes[1024], title[64 + 9], str_len;

	SetPVarInt(playerid, #select_industry, id);

	if (TruckCargo[id][tType] == 0)
	{
	    format(title, sizeof(title), "{9ACD32}%s", TruckCargo[id][tName]);
	    format(mes, sizeof(mes), "{9ACD32}%s {FFFFFF}adlý yere hoþ geldiniz!\n\n\
								{FFFFFF}Burasý þu anda {9ACD32}%s.\n\n\
								{9ACD32}Satýþ:\n\
								{808080}Ürün\t\t\tFiyat\t\tÜretim\t\tStok{FFFFFF}",
		TruckCargo[id][tName], (TruckCargo[id][tLocked] == 0)?("açýk"):("kapalý"));

        for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
			if (!TruckCargo[i][tOn] || (!TruckCargo[id][tPack] && id != i) || TruckCargo[i][tType] || TruckCargo[i][tPack] != TruckCargo[id][tPack]) continue;

            str_len = strlen(truckcargo_product[TruckCargo[i][tProductID]]);
            format(mes, sizeof(mes), "%s\n%s%s\t\t$%i\t\t%s%i {808080}Stok / saat baþý{FFFFFF}\t%i adet {808080}(%i){FFFFFF}", mes, truckcargo_product[TruckCargo[i][tProductID]], (str_len < 6 || TruckCargo[i][tProductID] == 15 || TruckCargo[i][tProductID] == 17 || TruckCargo[i][tProductID] == 10)?("\t"):(""), TruckCargo[i][tPrice],
			(TruckCargo[i][tProductAmount] > 0) ? ("+") : (""), TruckCargo[i][tProductAmount], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize]);
	    }
	    strcat(mes, "\n\n{9ACD32}Bilgi:\n{808080}Bu iþletme depodur, mal almamaktadýr.");
	}

	else if (TruckCargo[id][tType] == 1 || TruckCargo[id][tType] == 3)
	{
	    format(title, sizeof(title), "{9ACD32}%s", TruckCargo[id][tName]);
	    format(mes, sizeof(mes), "{9ACD32}%s {FFFFFF}adlý yere hoþ geldiniz!\n\n\
								{FFFFFF}Burasý þu anda {9ACD32}%s.\n\n\
								{9ACD32}Satýþ:\n\
								{808080}Ürün\t\t\tFiyat\t\tÜretim\t\tStok{FFFFFF}",
		TruckCargo[id][tName], (TruckCargo[id][tLocked] == 0)?("açýk"):("kapalý"));

        for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
			if (!TruckCargo[i][tOn] || (!TruckCargo[id][tPack] && id != i) || TruckCargo[i][tType] != 1 || TruckCargo[i][tPack] != TruckCargo[id][tPack]) continue;

            str_len = strlen(truckcargo_product[TruckCargo[i][tProductID]]);
            format(mes, sizeof(mes), "%s\n%s%s\t\t$%i\t\t%s%i {808080}Stok / saat baþý{FFFFFF}\t%%i adet {808080}(%i){FFFFFF}", mes, truckcargo_product[TruckCargo[i][tProductID]], (str_len < 6 || TruckCargo[i][tProductID] == 15 || TruckCargo[i][tProductID] == 17 || TruckCargo[i][tProductID] == 10)?("\t"):(""), TruckCargo[i][tPrice],
			(TruckCargo[i][tProductAmount] > 0)?("+"):(""), TruckCargo[i][tProductAmount], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize]);
	    }

	    strcat(mes, "\n\n{9ACD32}Gereken:\n{808080}Ürün\t\t\tFiyat\t\tStok durumu\t\tStok{FFFFFF}");

	    for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
			if (!TruckCargo[i][tOn] || (!TruckCargo[id][tPack] && id != i) || TruckCargo[i][tType] != 3 || TruckCargo[i][tPack] != TruckCargo[id][tPack]) continue;

            str_len = strlen(truckcargo_product[TruckCargo[i][tProductID]]);
            format(mes, sizeof(mes), "%s\n%s%s\t\t$%i\t\t%s%i {808080}Stok / saat baþý{FFFFFF}\t%%i adet {808080}(%i){FFFFFF}", mes, truckcargo_product[TruckCargo[i][tProductID]], (str_len < 6 || TruckCargo[i][tProductID] == 15 || TruckCargo[i][tProductID] == 17 || TruckCargo[i][tProductID] == 10)?("\t"):(""), TruckCargo[i][tPrice],
		    (TruckCargo[i][tProductAmount] > 0)?("+"):(""), TruckCargo[i][tProductAmount], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize]);
	    }
	}

	else if (TruckCargo[id][tType] == 2)
	{
	    format(title, sizeof(title), "{9ACD32}Taþýmacýlýk - Gemi");
	    str_len = strlen(truckcargo_product[TruckCargo[id][tProductID]]);
	    format(mes, sizeof(mes), "{9ACD32}Gemi paneline{FFFFFF}hoþgeldin!\n\n\
									{FFFFFF}Gemi þu anda {9ACD32}%s{FFFFFF}.\n\n\
									{9ACD32}Gemi hakkýnda bilgi:{FFFFFF}\n\
									Gemi Varýþ Saati:\t\t\t\t%s\n\
									Gemi Kalkýþ Saati:\t\t\t\t%s\n\
									Sonraki Geliþ Saati:\t\t\t%s\n\
									{808080}* Yukarýda belirtilen zamanlar doðru olmayabilir.\n\n",
		(ship_docked == 1)?("demirlenmiþ"):("denize açýlmýþ"),
		get_date("%hh:%ii", ship_arrived),
		get_date("%hh:%ii", ship_depart),
		get_date("%hh:%ii", ship_next));

		format(mes, sizeof(mes), "%s{9ACD32}Satýþ:\n\
									{808080}Gemi hiçbir þey satmýyor, sadece getirilen kargolarý alýyor.\n\n{9ACD32}Arananlar:\n\
									{808080}Ürün\t\t\tFiyat\t\tStok{FFFFFF}", mes);

		for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
			if (!TruckCargo[i][tOn] || TruckCargo[i][tType] != 2) continue;

            str_len = strlen(truckcargo_product[TruckCargo[i][tProductID]]);
            format(mes, sizeof(mes), "%s\n%s%s\t\t$%i\t\t%i adet {808080}(%i){FFFFFF}", mes, truckcargo_product[TruckCargo[i][tProductID]], (str_len < 6 || TruckCargo[i][tProductID] == 15 || TruckCargo[i][tProductID] == 17 || TruckCargo[i][tProductID] == 10)?("\t"):(""), TruckCargo[i][tPrice], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize]);
	    }
	}

	if (gps == 1)	Dialog_Show(playerid, SelectIndustry, DIALOG_STYLE_MSGBOX, title, mes, ">>>", "Geri Dön");
	else			Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, title, mes, "Kapat", "");

	return 1;
}

CheckIndustries()
{
    static const str_storage[] = "[{FFFF00}%s{FFFFFF}]\nStok: %i / %i\nFiyat: $%i / adet";
	new mes[sizeof(str_storage) - 8 + 32 + 12 + 12];

	new
		industires_prods[MAX_TRUCK_PACK char];

	for(new i; i != MAX_TRUCK_CARGO; i++)
	{
	    if (TruckCargo[i][tOn] == 0)
	        continue;

		if (TruckCargo[i][tType] == 0)
		{
		    TruckCargo[i][tStorage] += TruckCargo[i][tProductAmount];

		    if (TruckCargo[i][tStorage] > TruckCargo[i][tStorageSize])
		        TruckCargo[i][tStorage] = TruckCargo[i][tStorageSize];

		    else if (TruckCargo[i][tStorage] < 0)
		        TruckCargo[i][tStorage] = 0;

		    format(mes, sizeof(mes), str_storage, truckcargo_product[TruckCargo[i][tProductID]], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize], TruckCargo[i][tPrice]);
        	UpdateDynamic3DTextLabelText(TruckCargo[i][tLabel], 0xFFFFFFFF, mes);
		}
		else if (TruckCargo[i][tType] == 3)
		{
			if (TruckCargo[i][tStorage] >= (-TruckCargo[i][tProductAmount]))
			{
		    	TruckCargo[i][tStorage] -= (-TruckCargo[i][tProductAmount]);
				industires_prods{TruckCargo[i][tPack]} += (-TruckCargo[i][tProductAmount]);
			}
			format(mes, sizeof(mes), str_storage, truckcargo_product[TruckCargo[i][tProductID]], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize], TruckCargo[i][tPrice]);
        	UpdateDynamic3DTextLabelText(TruckCargo[i][tLabel], 0xFFFFFFFF, mes);
		}
	}

	for(new i; i != MAX_TRUCK_CARGO; i++)
	{
	    if (TruckCargo[i][tOn] == 0 || TruckCargo[i][tType] != 1 || TruckCargo[i][tPack] == 0 || TruckCargo[i][tStorage] >= TruckCargo[i][tStorageSize])
	        continue;

		if (industires_prods{TruckCargo[i][tPack]} >= TruckCargo[i][tProductAmount])
			TruckCargo[i][tStorage] += TruckCargo[i][tProductAmount];

        if (TruckCargo[i][tStorage] > TruckCargo[i][tStorageSize])
        	TruckCargo[i][tStorage] = TruckCargo[i][tStorageSize];

        format(mes, sizeof(mes), str_storage, truckcargo_product[TruckCargo[i][tProductID]], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize], TruckCargo[i][tPrice]);
       	UpdateDynamic3DTextLabelText(TruckCargo[i][tLabel], 0xFFFFFFFF, mes);
	}
	return 1;
}

TruckRank1(mv)
{
	return (mv == 600 || mv == 605 || mv == 543 || mv == 422 || mv == 478 || mv == 554) ? (1):(0);
}

TruckRank2(mv)
{
	return (TruckRank1(mv) == 1 || mv == 413 || mv == 459 || mv == 482) ? (1):(0);
}

TruckRank3(mv)
{
	return (TruckRank1(mv) == 1 || TruckRank2(mv) == 1 || mv == 440 || mv == 498) ? (1):(0);
}

TruckRank4(mv)
{
	return (TruckRank1(mv) == 1 || TruckRank2(mv) == 1 || TruckRank3(mv) == 1 || mv == 499 || mv == 414 || mv == 578 || mv == 443 || mv == 428) ? (1):(0);
}

TruckRank5(mv)
{
	return (TruckRank1(mv) == 1 || TruckRank2(mv) == 1 || TruckRank3(mv) == 1 || TruckRank4(mv) == 1 || mv == 456 || mv == 455) ? (1):(0);
}

TruckRank6(mv)
{
	return (TruckRank1(mv) == 1 || TruckRank2(mv) == 1 || TruckRank3(mv) == 1 || TruckRank4(mv) == 1 || TruckRank5(mv) == 1 || mv == 584 || mv == 591 || mv == 435 || mv == 450) ? (1):(0);
}

IsTruckerJob(vehicle)
{
    new mv = GetVehicleModel(vehicle);
	return (TruckRank6(mv) == 0)?(0):(1);
}

ValidTruckForPlayer(playerid, vehicle)
{
	new mv = GetVehicleModel(vehicle);
	switch(PlayerInfo[playerid][pCareer])
	{
	    case 0..11: if (TruckRank1(mv) == 0) return 0;
		case 12..23: if (TruckRank2(mv) == 0) return 0;
	    case 24..31: if (TruckRank3(mv) == 0) return 0;
	    case 32..47: if (TruckRank4(mv) == 0) return 0;
	    case 48..58: if (TruckRank5(mv) == 0) return 0;
	    default: if (TruckRank6(mv) == 0) return 0;
	}
	return 1;
}

GetMaxCargoVehicle(vehicle)
{
	switch(GetVehicleModel(vehicle))
	{
	    case 600, 543, 605, 443: return 2;
	    case 422: return 3;
	    case 478: return 4;
		case 554: return 6;
		case 413, 459, 482: return 10;
	    case 440, 498: return 12;
	    case 499: return 14;
	    case 414, 455, 428: return 16;
	    case 578: return 18;
		case 456: return 24;
		case 450: return 30;
		case 435, 591: return 36;
		case 584: return 40;
	}
	return 0;
}

IsValidProductVehicle(vehicle, prod)
{
	switch(GetVehicleModel(vehicle))
	{
	    case 600, 543, 605, 422, 478, 413, 459, 482, 440, 498:
		{
			switch(prod)
			{
			    case 1, 2, 3, 5, 6, 7, 12, 15, 18, 19, 20, 23, 24: return 1;
			}
		}

		case 554, 499, 414, 456, 435, 591:
		{
			switch(prod)
			{
			    case 1, 2, 3, 5, 6, 7, 12, 15, 18, 19, 20, 23, 24, TRUCKER_BRICKS: return 1;
			}
		}

        case 584:
		{
			switch(prod)
			{
			    case 0, 8, 11, 19: return 1;
			}
		}

		case 450, 455:
        {
			switch(prod)
			{
			    case 9, 10, 13, 16, TRUCKER_SCRAP: return 1;
			}
		}

		case 578:
		{
			switch(prod)
			{
			    case TRUCKER_WOODS, TRUCKER_BRICKS: return 1;
			}
		}
		case 443:
		{
			switch(prod)
			{
			    case 4: return 1;
			}
		}
		case 428:
		{
			switch(prod)
			{
			    case 14, 21: return 1;
			}
		}
	}
	return 0;
}

IsTakeProduct(prod)
{
	switch(prod)
	{
	    case TRUCKER_FUEL, TRUCKER_CARS, TRUCKER_MILK, TRUCKER_CEREAL, TRUCKER_COTTON, TRUCKER_DYES, TRUCKER_MALT, TRUCKER_AGGREGATE, TRUCKER_WOODS, TRUCKER_SCRAP, TRUCKER_BRICKS: return 0;
	}
	return 1;
}


NullPagesVar(playerid)
{
	DeletePVar(playerid, "Trucker:BizLastNext");
	DeletePVar(playerid, "Trucker:BizLastPrev");
	return 1;
}

ShowBizMenuPDA(playerid, list = 0, page_type = PAGE_NEXT)
{
	new mes[1024] = "{9ACD32}Ürün\t{9ACD32}Fiyat / adet\t{9ACD32}Ýþletme\n";

	new bnext = GetPVarInt(playerid, "Trucker:BizLastNext"), bprev = GetPVarInt(playerid, "Trucker:BizLastPrev"), count = 0, id;

	if (list < 0 || list > 30) list = 0;

	if (list) strcat(mes, "{9ACD32}[Geri]\n");

	for(new i; i < MAX_TRUCK_PRODUCT; i++) pTemp[playerid][pCargoListed][i] = -1;

	if (page_type == PAGE_NEXT)
	{
		for(new i = bnext; i < MAX_BIZ; i++)
		{
			id = biz_prod_types[BizInfo[i][bizType]];

			if (!BizInfo[i][bizID] || id == -1 || BizInfo[i][bizProduct] >= 400) continue;

			format(mes, sizeof(mes), "%s\n%s\t$%i\t%s", mes, truckcargo_product[id], BizInfo[i][bizBuyPrice], BizInfo[i][bizName]);
			pTemp[playerid][pCargoListed][count+1] = i;
			count++;

			if (count + 1 == 11)
			{
				if (!list)
				{
					SetPVarInt(playerid, "Trucker:BizLastNext", i + 1);
				}
				else
				{
					SetPVarInt(playerid, "Trucker:BizLastPrev", bnext);
					SetPVarInt(playerid, "Trucker:BizLastNext", i + 1);
				}
				break;
			}
		}
	}
	else if (page_type == PAGE_PREV)
	{
		for(new i = bprev; i > 0; i--)
		{
			id = biz_prod_types[BizInfo[i][bizType]];

			if (!BizInfo[i][bizID] || id == -1 || BizInfo[i][bizProduct] >= 400) continue;

			format(mes, sizeof(mes), "%s\n%s\t$%i\t%s", mes, truckcargo_product[id], BizInfo[i][bizBuyPrice], BizInfo[i][bizName]);
			pTemp[playerid][pCargoListed][count+1] = i;
			count++;

			if (count == 1)
			{
				SetPVarInt(playerid, "Trucker:BizLastNext", i + 1);
			}

			if (count + 1 == 11)
			{
				SetPVarInt(playerid, "Trucker:BizLastPrev", i - 1);
				break;
			}
		}
	}

	if (count == 0) return SendErrorMessage(playerid, "Aktif sipariþ bulunmuyor!");
	if (count == 10) strcat(mes, "\n{9ACD32}[Ýleri]");

	Dialog_Show(playerid, PDABiz, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Taþýmacýlýk - Ýþletme", mes, "GPS", "Geri Dön");
	SetPVarInt(playerid, #pda_list, list);
	return 1;
}

TruckCargo_Nearest(playerid, Float: radius = 10.0)
{
	for(new i; i != MAX_TRUCK_CARGO; i++)
	{
	    if (TruckCargo[i][tOn] == 0)	continue;

        if (IsPlayerInRangeOfPoint(playerid, radius, TruckCargo[i][tPosX], TruckCargo[i][tPosY], TruckCargo[i][tPosZ]) && 0 == GetInterior(playerid) && 0 == GetWorld(playerid)) return i;
	}
	return -1;
}

IsPlayerNearCargo(playerid)
{
	new id = -1;

	for(new i; i != MAX_CARGO_OBJ; i++)
	{
		if (CargoObject[i][oOn] == 0 || !IsPlayerInRangeOfPoint(playerid, 2.0, CargoObject[i][oX], CargoObject[i][oY], CargoObject[i][oZ]) || GetWorld(playerid) != CargoObject[i][oVW] || CargoObject[i][oInt] != GetInterior(playerid)) continue;
		return i;
	}

	return id;
}

GetAvailableTruck(playerid, vehicle)
{
	switch(PlayerInfo[playerid][pCareer])
	{
		case 0..11: {
			switch(vehicle) {
				case 600: return true;
				case 605: return true;
				case 422: return true;
				case 478: return true;
				case 554: return true;
				case 543: return true;
				case 413: return true;
				default: return false;
			}
		}
		case 12..23: {
			switch(vehicle) {
				case 600: return true;
				case 605: return true;
				case 422: return true;
				case 478: return true;
				case 554: return true;
				case 413: return true;
				case 459: return true;
				case 482: return true;
				case 543: return true;
				default: return false;
			}
		}
		case 24..31: {
			switch(vehicle) {
				case 600: return true;
				case 605: return true;
				case 422: return true;
				case 478: return true;
				case 554: return true;
				case 413: return true;
				case 459: return true;
				case 482: return true;
				case 440: return true;
				case 609: return true;
				case 498: return true;
				case 543: return true;
				default: return false;
			}
		}
		case 32..47: {
			switch(vehicle) {
				case 600: return true;
				case 605: return true;
				case 422: return true;
				case 478: return true;
				case 554: return true;
				case 413: return true;
				case 459: return true;
				case 482: return true;
				case 440: return true;
				case 609: return true;
				case 498: return true;
				case 499: return true;
				case 414: return true;
				case 578: return true;
				case 514: return true;
				case 428: return true;
				case 543: return true;
				default: return false;
			}
		}
		case 48..58: {
			switch(vehicle) {
				case 600: return true;
				case 605: return true;
				case 422: return true;
				case 478: return true;
				case 554: return true;
				case 413: return true;
				case 459: return true;
				case 482: return true;
				case 440: return true;
				case 609: return true;
				case 498: return true;
				case 499: return true;
				case 414: return true;
				case 578: return true;
				case 514: return true;
				case 428: return true;
				case 456: return true;
				case 455: return true;
				case 543: return true;
				default: return false;
			}
		}
		default: {
			switch(vehicle) {
				case 600: return true;
				case 605: return true;
				case 422: return true;
				case 478: return true;
				case 554: return true;
				case 413: return true;
				case 459: return true;
				case 482: return true;
				case 440: return true;
				case 609: return true;
				case 498: return true;
				case 499: return true;
				case 414: return true;
				case 578: return true;
				case 514: return true;
				case 428: return true;
				case 456: return true;
				case 455: return true;
				case 543: return true;
				default: return false;
			}
		}
	}
	return 0;
}

/*
SendTruckerRequest(playerid, bizid)
{
    foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || !TaxiDuty[i] || PlayerInfo[i][pJob] != JOB_TAXI) continue;

        SendClientMessage(i, COLOR_GREEN, "|___________Çâîíîê â òàêñè___________|");
		if (pTemp[playerid][pPayphone] == -1)
			SendClientMessageEx(i, COLOR_WHITE, "Call from: %s Ph: %i", GetNameEx(playerid), PlayerInfo[playerid][pNumber]);
		else
			SendClientMessageEx(i, COLOR_WHITE, "Call from: Òàêñîôîí, Ph: %i", PayphoneInfo[pTemp[playerid][pPayphone]][phNumber]);
		SendClientMessageEx(i, COLOR_WHITE, "Ìåñòîïîëîæåíèå: %s", location);
		SendClientMessageEx(i, COLOR_WHITE, "*taxi accept %i ÷òîáû ïðèíÿòü âûçîâ **", playerid);
	}
	return 1;
}*/

/*// 0..11
Picador 	600
Sadler		605
Bobcat		422
Walton		478
Yosemite	554
//2
Pony		413
topfun van  459
Burrito		482
// 3
Rumpo		440
Boxville	609/498
// 4
Benson		499
Mule		414
DFT-30		578
Tanker		514
Securicar	428
//5 and 6
Yankee		456
Flatbed		455*/

DisplayCargoGroups(playerid) //ðàáîòà äàëüíîáîéùèêà
{
	new maxpages = floatround(MAX_TRUCK_CARGO/MAX_DIALOG_LIST,floatround_ceil);
	if (pTemp[playerid][pDialogList] < 0 || (maxpages < pTemp[playerid][pDialogList]+1)) return 1;

	new
		start_itter = MAX_DIALOG_LIST * pTemp[playerid][pDialogList],
		end_itter = (maxpages == pTemp[playerid][pDialogList]+1) ? (MAX_TRUCK_CARGO) : (start_itter+MAX_DIALOG_LIST+1),
		count,
		str[64+(64+2+2+2+2+2)*MAX_DIALOG_LIST+(35+26)] = "{FFFFFF}Endüstri\t{FFFFFF}ID\t{FFFFFF}Gup\n"
	;

	if (pTemp[playerid][pDialogList]) format(str, sizeof(str), "%s{bccd32}Önceki Sayfa{FFFFFF}\n", str);

	for(new i = start_itter; i < end_itter; i++)
	{
	    if (!TruckCargo[i][tOn]) continue;

		if (count == MAX_DIALOG_LIST) {
			strcat(str, "{bccd32}Next page");
		} else {
			format(str, sizeof(str), "%s%s\t%i\t%i\n", str, TruckCargo[i][tName], i, TruckCargo[i][tPack]);
			count++;
		}
	}

	if (!count) return Dialog_Show(playerid, None, DIALOG_STYLE_LIST, "{FFFFFF}Endüstri Gruplarýnýn Listesi", "Gösterilebilecek endüstri yok ...", ">>>", "");

    Dialog_Show(playerid, CargoGroupsDialog, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Endüstri Gruplarýnýn Listesi", str, ">>>", "");
	return 1;
}

Dialog:CargoGroupsDialog(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	if (pTemp[playerid][pDialogList]) {		//if not first page
		if (listitem == 0) {
			pTemp[playerid][pDialogList]--;
			return DisplayCargoGroups(playerid);
		} else if (listitem == MAX_DIALOG_LIST+1) {
			pTemp[playerid][pDialogList]++;
			return DisplayCargoGroups(playerid);
		}
	} else { 								//if it's a first page
		if (listitem == MAX_DIALOG_LIST) {
			pTemp[playerid][pDialogList]++;
			return DisplayCargoGroups(playerid);
		}
	}

	return 1;
}

Dialog:CargoList(playerid, response, listitem, inputtext[])
{
	if (!response)						return 1;
	if (IsPlayerInAnyVehicle(playerid))	return SendErrorMessage(playerid, "Herhangi bir araçta deðilsin.");

    new vehicle = GetPVarInt(playerid, #cargo_vehicle);

	if (vehicle == 0)								return SendErrorMessage(playerid, "Yakýnýnýzda araç bulunmuyor.");
	if (!IsNearTrunk(vehicle, playerid, 2.0))		return SendErrorMessage(playerid, "Aracýn bagajýna yakýn olmalýsýnýz.");
    if (VehicleInfo[vehicle][carLocked] == 1)		return SendErrorMessage(playerid, "Bu araç kilitli.");
    if (VehicleInfo[vehicle][carTrunkLock] == 0)	return SendErrorMessage(playerid, "Bu aracýn bagajý kapalý.");

	listitem = pTemp[playerid][pCargoListed][listitem];

	if (VehicleInfo[vehicle][carCargoAmount][listitem] == 0)										return SendErrorMessage(playerid, "Bu ürün araçta bulunmamaktadýr.");
    if (!IsTakeProduct(listitem))																	return SendErrorMessage(playerid, "Bu ürün iþlenemez.");
    if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) || pTemp[playerid][pCargoID] != 0)	return SendErrorMessage(playerid, "Elinizde baþka bir þey bulunuyor.");

	pc_cmd_liftup(playerid, "");

	InfoMSG(playerid, "~w~Kutuyu ~y~satmak ~w~icin secmis oldugunuz urunun adinin yazili oldugu~n~teslim noktasina gidin ve ~w~~h~~r~~k~~VEHICLE_ENTER_EXIT~~w~ tusuna basin.", 10);

 	SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2912, 5, 0.102000, 0.306000, -0.228999, -1.100001, 14.499999, -1.300000, 1.000000, 1.000000, 1.000000);
  	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	pTemp[playerid][pCargoID] = listitem+1;
	VehicleInfo[vehicle][carCargoAmount][listitem]--;

	new amount;

	for(new i; i != MAX_TRUCK_PRODUCT; i++)
	{
		amount += VehicleInfo[vehicle][carCargoAmount][i];
	}

    switch(GetVehicleModel(vehicle))
 	{
  		case 600, 543, 605, 422, 478, 554: DestroyDynamicObject(VehicleInfo[vehicle][carCargoObj][amount]);
	}

	Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
	return 1;
}

Dialog:SelectIndustry(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_tasimacilik(playerid, "");

    listitem = GetPVarInt(playerid, #select_industry);

    if (listitem < 0 || listitem > MAX_TRUCK_CARGO || TruckCargo[listitem][tOn] == 0) return 1;

	if (TruckCargo[listitem][tPack] == 0)
	{
	    Waypoint_Set(playerid, TruckCargo[listitem][tPosX], TruckCargo[listitem][tPosY], TruckCargo[listitem][tPosZ]);
    	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	    return 1;
	}

	new count, mes[512];

	for(new i; i != MAX_TRUCK_CARGO; i++)
 	{
		pTemp[playerid][pPDAListed][i] = -1;

		if (TruckCargo[i][tOn] == 0 || TruckCargo[i][tPack] == 0 || TruckCargo[i][tPack] != TruckCargo[listitem][tPack])	continue;

		pTemp[playerid][pPDAListed][count] = i;
		format(mes, sizeof(mes), "%s\n{9ACD32}- %s {808080}(%s $%i / adet, %i / %i)", mes, (TruckCargo[i][tType] == 3)?("satýn al"):("sat"),truckcargo_product[TruckCargo[i][tProductID]], TruckCargo[i][tPrice], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize]);
		count++;
	}

	Dialog_Show(playerid, SelectIndustry3, DIALOG_STYLE_LIST, TruckCargo[listitem][tName], mes, "GPS", "Ýptal");
	return 1;
}

Dialog:SelectIndustry2(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_tasimacilik(playerid, "");

	listitem = pTemp[playerid][pPDAListed][listitem];

    if (listitem == -1 || TruckCargo[listitem][tOn] == 0) return 1;

    Show_Industry(playerid, listitem, 1);
	return 1;
}

Dialog:SelectIndustry3(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_tasimacilik(playerid, "");

    listitem = pTemp[playerid][pPDAListed][listitem];

    if (listitem < 0 || listitem > MAX_TRUCK_CARGO || TruckCargo[listitem][tOn] == 0) return 1;

	Waypoint_Set(playerid, TruckCargo[listitem][tPosX], TruckCargo[listitem][tPosY], TruckCargo[listitem][tPosZ]);
   	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:PDABiz(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		NullPagesVar(playerid);
		return pc_cmd_tasimacilik(playerid, "");
	}
	if (listitem == 0 && GetPVarInt(playerid, #pda_list))			return ShowBizMenuPDA(playerid, GetPVarInt(playerid, #pda_list)-1, PAGE_PREV);
    else if (listitem == 10 && !GetPVarInt(playerid, #pda_list))	return ShowBizMenuPDA(playerid, GetPVarInt(playerid, #pda_list)+1, PAGE_NEXT);
	else if (listitem == 11 && GetPVarInt(playerid, #pda_list))		return ShowBizMenuPDA(playerid, GetPVarInt(playerid, #pda_list)+1, PAGE_NEXT);

	if (pTemp[playerid][pCargoListed][listitem-1] == -1) return 1;

	new bizid = pTemp[playerid][pCargoListed][listitem-1];

	if (BizInfo[bizid][bizID] == 0) return 1;

	NullPagesVar(playerid);
	Waypoint_Set(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	SendSyntaxMessage(playerid, "Ýþletme GPS'inize iþaretlendi. (/cpsifirla)");
	return 1;
}

Dialog:PDAMenu(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	switch(listitem)
	{
	    case 0:
	    {
			new count, mes[1512];

	        for(new i; i != MAX_TRUCK_CARGO; i++)
		    {
      			pTemp[playerid][pPDAListed][i] = -1;

				if (TruckCargo[i][tOn] == 0 || TruckCargo[i][tType] == 2 || TruckCargo[i][tType] == 3 || TruckCargo[i][tGps] == 0) continue;

                pTemp[playerid][pPDAListed][count] = i;
				format(mes, sizeof(mes), "%s\n%s (%s, {9ACD32}%s)", mes, TruckCargo[i][tName], truckcargo_type[TruckCargo[i][tType]], (TruckCargo[i][tLocked] == 0)?("Açýk"):("Kapalý"));
				count++;
			}

			if (count) 	Dialog_Show(playerid, SelectIndustry2, DIALOG_STYLE_LIST, "{FFFFFF}Taþýmacýlýk - Endüstri", mes, "Seç", "Geri Dön");
			else 		Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{FFFFFF}Taþýmacýlýk - Endüstri", "Endüstri bulunamadý.", "Kapat", "");
		}
	    case 1: NullPagesVar(playerid), ShowBizMenuPDA(playerid, 0, PAGE_NEXT);
	    case 2:
	    {
	        new mes[1024], str_len;

			format(mes, sizeof(mes), "{9ACD32}Gemi paneline {FFFFFF}hoþ geldiniz!\n\n\
									{FFFFFF}Gemi þu anda {9ACD32}%s{FFFFFF}.\n\n\
									{9ACD32}Gemi hakkýnda bilgi:{FFFFFF}\n\
									Gemi Varýþ Saati:\t\t\t\t%s\n\
									Gemi Kalkýþ Saati:\t\t\t\t%s\n\
									Bir sonraki geliþ saati:\t\t\t%s\n\
									{808080}* Yukarýda belirtilen zamanlar doðru olmayabilir.\n\n",
			(ship_docked == 1)?("demirlemiþ"):("denize açýlmýþ"),
			get_date("%hh:%ii", ship_arrived),
			get_date("%hh:%ii", ship_depart),
			get_date("%hh:%ii", ship_next));

			format(mes, sizeof(mes), "%s{9ACD32}Satýþ:\n\
									{808080}Bu gemi herhangi bir ürün satmýyor, sadece gelen kargolarý kabul ediyor.\n\n{9ACD32}Arananlar:\n\
									{808080}Ürün\t\t\tFiyat\t\tStok{FFFFFF}", mes);


			for(new i; i != MAX_TRUCK_CARGO; i++)
		    {
				if (TruckCargo[i][tOn] == 0 || TruckCargo[i][tType] != 2) continue;

	            str_len = strlen(truckcargo_product[TruckCargo[i][tProductID]]);
	            format(mes, sizeof(mes), "%s\n%s%s\t\t$%i\t\t%i adet {808080}(%i){FFFFFF}",
					mes,
					truckcargo_product[TruckCargo[i][tProductID]],
					(str_len < 6 || TruckCargo[i][tProductID] == 15 || TruckCargo[i][tProductID] == 17 || TruckCargo[i][tProductID] == 10)?("\t"):(""),
					TruckCargo[i][tPrice],
					TruckCargo[i][tStorage],
					TruckCargo[i][tStorageSize]);
		    }
		    Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{FFFFFF}Taþýmacýlýk - Gemi", mes, "X", "");
	    }
	}
	return 1;
}

alias:tasimacilik("teslimat");
CMD:tasimacilik(playerid, params[])
{
    if (PlayerInfo[playerid][pJob] == JOB_TRUCKER)
    {
		if(!MeslekSistemleri) return SendErrorMessage(playerid, "Meslek sistemleri pasife çekildi. Rol modu aktif edildi. (PayDay yükseltildi)");
		if (pTemp[playerid][pTruckerOn])
		{
		    pTemp[playerid][pTruckerOn] = 0;
		    SendSyntaxMessage(playerid, "Teslimatý reddettiniz. Yeni teslimat iki dakika sonra hazýr olacak.");
		    DisableWaypoint(playerid);
		    SetPVarInt(playerid, #pizza_time, gettime() + 120);
		    return 1;
		}

		if (GetPVarInt(playerid, #pizza_time) > gettime())	return SendErrorMessage(playerid, "Sipariþ yok, lütfen daha sonra iletiþime geçin.");
	    if (PlayerInfo[playerid][pJob] != JOB_TRUCKER) 	    return 1;
		if (!IsPlayerInAnyVehicle(playerid))		        return SendErrorMessage(playerid, "Araçta olmalýsýnýz.");
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sürücü olmalýsýnýz.");

		new vehicle = GetPlayerVehicleID(playerid);
		if (!GetAvailableTruck(playerid, GetVehicleModel(vehicle))) return SendErrorMessage(playerid, "Bu araç bu mesleðe uygun deðil.");

		new i, bizid = randomEx(1, 150), location[MAX_ZONE_NAME];

		while(i == 0)
		{
		    if (!BizInfo[bizid][bizID])
			{
				bizid = randomEx(1, 150);
			}
			else
			{
				GetZone(BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], location, MAX_ZONE_NAME);
				new deliveryPrice = floatround(GetPlayerDistanceFromPoint(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]) * 0.16);
			    i = 1;
			    pTemp[playerid][pTruckerOn] = bizid+1;
				pTemp[playerid][pTruckerPrice] = deliveryPrice;
				pTemp[playerid][pTruckerTime] = gettime();

	            SendClientMessageEx(playerid, COLOR_SERVER2, sprintf("Angeles Taþýmacýlýk Þirketi " EMBED_ALTO "sana yeni bir " EMBED_SERVER2 "%s teslimatý " EMBED_ALTO "iþi verdi.", trucker_teslimat[BizInfo[bizid][bizType]]));
	            SendClientMessageEx(playerid, COLOR_SERVER2, sprintf("Bölge: " EMBED_ALTO "%s " EMBED_SERVER2 "Ýþyeri: " EMBED_ALTO "%s " EMBED_SERVER2 "Açýklama: " EMBED_ALTO "%s", location, BizInfo[bizid][bizName], biz_types[BizInfo[bizid][bizType]]));
				SendClientMessageEx(playerid, COLOR_SERVER2, sprintf("Ýpucu: " EMBED_ALTO "Teslimat noktasýna gittikten sonra /koli yazarak koliyi elinize alýn. "));

				Waypoint_Set(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
			    return 1;
			}
		}
	}
	if (PlayerInfo[playerid][pJob] == JOB_TASIMACILIK)
    {
		if(!MeslekSistemleri) return SendErrorMessage(playerid, "Meslek sistemleri pasife çekildi. Rol modu aktif edildi. (PayDay yükseltildi)");
		if (pTemp[playerid][pTruckerOn])
		{
		    pTemp[playerid][pTruckerOn] = 0;
		    SendSyntaxMessage(playerid, "Teslimatý reddettiniz. Yeni teslimat iki dakika sonra hazýr olacak.");
		    DisableWaypoint(playerid);
		    SetPVarInt(playerid, #pizza_time, gettime() + 120);
		    return 1;
		}

		if (GetPVarInt(playerid, #pizza_time) > gettime())	return SendErrorMessage(playerid, "Sipariþ yok, lütfen daha sonra iletiþime geçin.");
	    if (PlayerInfo[playerid][pJob] != JOB_TRUCKER) 	    return 1;
		if (!IsPlayerInAnyVehicle(playerid))		        return SendErrorMessage(playerid, "Araçta olmalýsýnýz.");
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sürücü olmalýsýnýz.");

		new vehicle = GetPlayerVehicleID(playerid);
		if (!GetAvailableTruck(playerid, GetVehicleModel(vehicle))) return SendErrorMessage(playerid, "Bu araç bu mesleðe uygun deðil.");

		new i, bizid = randomEx(1, 150), location[MAX_ZONE_NAME];

		while(i == 0)
		{
		    new query[350];
			GetZone(BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], location, MAX_ZONE_NAME);
			new deliveryPrice = floatround(GetPlayerDistanceFromPoint(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]) * 0.16);
   			i = 1;
		    pTemp[playerid][pTruckerOn] = playerid+1;
			pTemp[playerid][pTruckerTime] = gettime();
			SendClientMessageEx(playerid, COLOR_SERVER2, sprintf("Ýpucu: " EMBED_ALTO "Teslimat noktasýna ulaþtýktan sonra yük otomatik teslim edilecek. "));
    		new columnName[32];
	    	format(columnName, sizeof(columnName), "jobCheckpoint1");
	    	mysql_format(dbHandle, query, sizeof(query), "SELECT jobCheckpoint1 FROM jobs WHERE jobid = 6");
	    	mysql_tquery(dbHandle, query, "TasimacilikCheckpoint", "ds", playerid, columnName);
   			return 1;
		}
	}
	//Dialog_Show(playerid, PDAMenu, DIALOG_STYLE_LIST, "{FFFFFF}Taþýmacýlýk Menüsü", "{FFFFFF}Ýþletmeleri görüntüle\nTüm iþletme sipariþlerini görüntüle\nGemi hakkýnda bilgi göster", "Seç", "Ýptal");
	return 1;
}

forward TasimacilikCheckpoint(playerid, columnName[]);
public TasimacilikCheckpoint(playerid, columnName[])
{
    if(!IsPlayerConnected(playerid)) return 0;

    new checkpointData[64];
    cache_get_value_name(0, columnName, checkpointData);

    new Float:x, Float:y, Float:z;
    sscanf(checkpointData, "p<,>fff", x, y, z);

    SetPlayerCheckpoint(playerid, x, y, z, 3.0);
    return 1;
}

alias:koli("cuval");
CMD:koli(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

	if (!pTemp[playerid][pTruckerOn])								return SendErrorMessage(playerid, "Þu an teslimat sürecinde deðilsiniz veya elinizde koli yok. (/tasimacilik)");
	if (IsPlayerInAnyVehicle(playerid))                             return SendWarningMessage(playerid, "Araçta bu iþlemi yapamazsýn.");
    if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))		return RemovePlayerAttachedObject(playerid, ATTACH_HANDS), SendServerMessage(playerid, "Koliyi/çuvalý araca býraktýnýz.");

	new vehicle;
    if ((vehicle = Arac_Yakin(playerid, 5.0)) == -1 || !GetAvailableTruck(playerid, GetVehicleModel(vehicle)))	return SendErrorMessage(playerid, "Kamyonun yanýnda olmalýsýnýz.");

	pc_cmd_liftup(playerid, "");
    SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2912, 5, 0.102000, 0.306000, -0.228999, -1.100001, 14.499999, -1.300000, 1.000000, 1.000000, 1.000000);
  	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
  	InfoMSG(playerid, "Belirlenen noktaya ilerleyin.", 5);
	return 1;
}

alias:aracteslim("aracparcala");
CMD:aracteslim(playerid, params[])
{
	if (IsPoliceNear(playerid))	return InfoMSG(playerid, "Yakinlarda ~p~~b~polis memurlari ~w~var!", 4);
	if (!PoliceOnline())		return SendErrorMessage(playerid, "Bu iþlemi gerçekleþtirebilmen için oyunda %i polis olmasý gerekiyor", NEED_COPS_TO_CRIME);

	new
		id = GetChopshopID(playerid),
		vehID = GetPlayerVehicleID(playerid)
	;

	if (id == -1 || !IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Yakýnlarýnýzda araç parçalama istasyonu yok veya araç kullanmýyorsunuz.");

	if (VehicleInfo[vehID][carOwnerID] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pSpareKey] == VehicleInfo[vehID][carID])
		return SendErrorMessage(playerid, "Bu aracý parçalatamazsýn.");

	if (VehicleInfo[vehID][carOwnerID] == INVALID_PLAYER_ID) 			return SendErrorMessage(playerid, "Yalnýzca kiþisel araçlar çalýnabilir.");
	if (PlayerInfo[playerid][InMission]) 				return SendErrorMessage(playerid,"Zaten bir görevdesiniz.");
	if (!CheckWantedModel(id, GetVehicleModel(vehID))) 	return SendErrorMessage(playerid, "Bu araç aranan bir araç deðil.");

	new count, time[64];
	for(new i; i < 14; i++) if (VehicleInfo[vehID][carComponent][i] > 0) count++;

	if (VehicleInfo[vehID][carEngineOn]) ToggleVehicleEngine(vehID, playerid);

	PlayerInfo[playerid][InMission] = CARJACKER_DELIVER;
	PlayerInfo[playerid][MissionTime] = 15 + count;
	PlayerInfo[playerid][MissionTarget][0] = vehID;
	PlayerInfo[playerid][MissionTarget][1] = id;

	format(time, sizeof(time), "~r~ARAC PARCALARI SOKULUYOR~n~~w~KALAN ~y~%d ~w~SANIYE", PlayerInfo[playerid][MissionTime]);
	InfoMSG(playerid, time, 2);

	return 1;
}

CMD:gorevibitir(playerid, params[])
{
	if (!PlayerInfo[playerid][InMission]) return SendErrorMessage(playerid, "Bir görevde deðilsiniz.");
	LeaveMission(playerid);
	return 1;
}

CMD:aracibirak(playerid, params[])
{
	if (IsPoliceNear(playerid))	return InfoMSG(playerid, "Yakinlarda ~p~~b~polis memurlari ~w~var!", 4);

	new vehID = PlayerInfo[playerid][MissionTarget][0],
		id = PlayerInfo[playerid][MissionTarget][1],
		Float: playerPos[3];

	GetPlayerPos(playerid, playerPos[0], playerPos[1], playerPos[2]);

	if (!PlayerInfo[playerid][InMission]) 				return SendErrorMessage(playerid, "Bir görevde deðilsiniz.");

	if (PlayerInfo[playerid][InMission] != CARJACKER_DROPOFF) 				   	return SendErrorMessage(playerid, "Herhangi bir aracý parçalatmamýþsýnýz.");
	if (GetPlayerVehicleID(playerid) != PlayerInfo[playerid][MissionTarget][0]) return SendErrorMessage(playerid, "Bu doðru araç deðil!");

	if (!IsPlayerInRangeOfPoint(playerid, 50.0, chopshop_data[id][chopshop_pos][0], chopshop_data[id][chopshop_pos][1], chopshop_data[id][chopshop_pos][2]))
	{
	    new Float: distance_reward = XB_GetDistanceBetweenTPoints(playerPos[0], playerPos[1], playerPos[2], chopshop_data[id][chopshop_pos][0], chopshop_data[id][chopshop_pos][1], chopshop_data[id][chopshop_pos][2]);

	    if (distance_reward > 200.0) PlayerInfo[playerid][MissionReward] += 400;
	    else 						PlayerInfo[playerid][MissionReward] += floatround(distance_reward) * 2;

	    new money[32];
	    format(money, 32, "~g~GOREV TAMAMLANDI~n~~w~KAZANILAN TUTAR ~y~$%s", FormatNumber(PlayerInfo[playerid][MissionReward]));
		InfoMSG(playerid, money, 5);

		GiveCash(playerid, PlayerInfo[playerid][MissionReward]);

		//GetPlayerPos(playerid, VehicleInfo[vehID][eVehicleStolenPos][0], VehicleInfo[vehID][eVehicleStolenPos][1], VehicleInfo[vehID][eVehicleStolenPos][2]);
		//VehicleInfo[vehID][eVehicleStolen] = true;

		new userid;
		foreach(new i : Player) {
			if (PlayerInfo[i][pID] == VehicleInfo[vehID][carOwnerID]) {
				userid = i;
				break;
			}
		}

		SendClientMessageEx(userid, COLOR_LIGHTRED, "Araç: %s model aracýnýz çalýndý! (/araclarim)", VehicleNames[GetVehicleModel(vehID)-400]);

		VehicleInfo[vehID][carDestroyed]++;

		SQL_SetInteger("cars", "jacking", 1, VehicleInfo[vehID][carID]);
		SQL_SetInteger("cars", "destroys", VehicleInfo[vehID][carDestroyed], VehicleInfo[vehID][carID]);

		new money_str[70];
		format(money_str, sizeof(money_str), "BASARIYLA ARACTAN ~g~KURTULDUN ~w~KAZANILAN TUTAR ~g~$%i", PlayerInfo[playerid][MissionReward]);
		InfoMSG(playerid, money_str, 5);
		RemovePlayerFromVehicle(playerid);

		ResetVehicleStuff(vehID);
		DestroyVehicleEx(vehID, 1);

		PlayerInfo[playerid][MissionReward] = 0;
		PlayerInfo[playerid][InMission] = MISSION_NONE;
		PlayerInfo[playerid][MissionTime] = 0;
		PlayerInfo[playerid][MissionTarget][0] = 0;
		PlayerInfo[playerid][MissionTarget][1] = 0;
	}
	else return SendErrorMessage(playerid, "Parçalama istasyonuna çok yakýnsýnýz.");

	return 1;
}


this::VehicleUpgrade(playerid, cost, level, color2, upgrade)
{
	new
		uptime = 1000,
		vehicleid = GetPlayerVehicleID(playerid),
		string[256],
		model = GetVehicleModel(vehicleid)
	;

	if(vehicleid == 0 || vehicleid == -1 || vehicleid == INVALID_PLAYER_ID) vehicleid = pTemp[playerid][pRentveh];

	if (!IsValidVehicle(vehicleid) && VehicleInfo[vehicleid][carEngineOn] && !IsPlayerLoggedIn(playerid))
	{
		SendErrorMessage(playerid, "Araç yükseltilirken bir hata oluþtu.");
		return 1;
	}

	if (upgrade == 0) return SendErrorMessage(playerid, "Bir hata oluþtu.");

	new dealer = -1;

	if (upgrade != 13 && upgrade != 12 && upgrade != 1 && upgrade != 7 && (dealer = ModShop_Nearest(playerid)) == -1)
		return SendErrorMessage(playerid, "Modifiye dükkanýna yakýn olmalýsýn. ");
	if (upgrade == 12 && AZC_Nearest(playerid) == -1)
		return SendErrorMessage(playerid, "Benzinlik istasyonuna yakýn olmalýsýnýz.");
	if (upgrade == 13 && PAS_Nearest(playerid) == -1)
		return SendErrorMessage(playerid, "Araç tamircisine yakýn olmalýsýnz. ");

	if (upgrade == 1)
	{
	    if (GetCash(playerid) < cost)	return SendNotCash(playerid);

		GiveCash(playerid, -cost);
		RespawnVehicle(vehicleid);
		return SendSyntaxMessage(playerid, "%s aracýnýz baþarýyla park bölgesine çekildi.", VehicleNames[model-400]);
	}
	else if (upgrade == 2)
	{
		if (GetCash(playerid) < cost)	return SendNotCash(playerid);

		GiveCash(playerid, -cost);
		SendSyntaxMessage(playerid, "%i seviye araç kilidi $%i karþýlýðýnda aracýnýza takýldý.", level, cost);
        UnFreezePlayer(playerid);
		VehicleInfo[vehicleid][carLock] = level;
		Save_Car(vehicleid);
		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	else if (upgrade == 3)
	{
		if (GetCash(playerid) < cost)	return SendNotCash(playerid);

		GiveCash(playerid, -cost);
		SendSyntaxMessage(playerid, "%i seviye araç alarmý $%i karþýlýðýnda aracýnýza takýldý.", level, cost);
        UnFreezePlayer(playerid);
		VehicleInfo[vehicleid][carAlarm] = level;
		Save_Car(vehicleid);
		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	else if (upgrade == 4)
	{
	    if (GetCash(playerid) < cost)	return SendNotCash(playerid);

		GiveCash(playerid, -cost);
		SendSyntaxMessage(playerid, "%i seviye araç immobilizer $%i karþýlýðýnda aracýnýza takýldý.", level, cost);
        UnFreezePlayer(playerid);
		VehicleInfo[vehicleid][carImmob] = level;
		Save_Car(vehicleid);
		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	else if (upgrade == 5)
	{
        if (GetCash(playerid) < cost)	return SendNotCash(playerid);

		GiveCash(playerid, -cost);
		SendSyntaxMessage(playerid, "%i seviye araç sigortasý $%i karþýlýðýnda aracýnýza yapýldý.", level, cost);
        UnFreezePlayer(playerid);
		VehicleInfo[vehicleid][carInsurance] = level;
		Save_Car(vehicleid);
		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	else if (upgrade == 6)
	{
	  /*  if (GetCash(playerid) < cost)	return SendNotCash(playerid);

		GiveCash(playerid, -cost);
		SendSyntaxMessage(playerid, "%i miktarýnda araç zýrhý $%i karþýlýðýnda aracýnýza eklendi.", level, cost);
		TogglePlayerControllable(playerid, true);
		VehicleInfo[vehicleid][carArmour] += float(level);

		if (VehicleInfo[vehicleid][carArmour] > 250.0)	VehicleInfo[vehicleid][carArmour] = 250.0;

		SetVehicleHealth(vehicleid, GetVehicleMaxHealth(GetVehicleModel(vehicleid)) + VehicleInfo[vehicleid][carArmour]);
		UpdateVehicleDamageStatus(vehicleid, 0, 0, 0, 0);
		Save_Car(vehicleid);
		GiveBizCash(dealer, cost / 100 * 80);
		TogglePlayerControllable(playerid, true);*/
		return 1;
	}
	else if (upgrade == 7)
	{
		if (GetCash(playerid) < cost)	return SendNotCash(playerid);

		format(VehicleInfo[vehicleid][carPlate], 24, "%s", GetVehicleNumber());
		VehicleInfo[vehicleid][carRegistered] = 1;
		SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][carPlate]);
		RespawnVehicle(vehicleid, 1);
		GiveCash(playerid, -cost);
		SendSyntaxMessage(playerid, "Araç $%i karþýlýðýnda DMV sistemine kayýt ettirildi. Yeni plakanýz: %s", cost, VehicleInfo[vehicleid][carPlate]);
		UnFreezePlayer(playerid);

		new mes[128];
		format(mes, sizeof(mes), "~w~Aracin yeni plakasi~n~~y~%s oldu ve $%i odedin.", VehicleInfo[vehicleid][carPlate], cost);
		JobMessage(playerid, mes, 6);

		Save_Car(vehicleid);
		GiveBizCash(dealer, cost / 100 * 80);
        return 1;
	}
	else if (upgrade == 8)
	{
	    if (GetCash(playerid) < cost)	return SendNotCash(playerid);

		format(VehicleInfo[vehicleid][carPlate], 24, "_");
		VehicleInfo[vehicleid][carRegistered] = 0;
		SetVehicleNumberPlate(vehicleid, "_");
		RespawnVehicle(vehicleid, 1);
		Save_Car(vehicleid);

		SendSyntaxMessage(playerid, "Aracýn kaydý silindi. ");
		JobMessage(playerid, "~w~Arac artik kaytili degil.", 2);
		UnFreezePlayer(playerid);
		return 1;
	}
	else if (upgrade == 9)
	{
		if (GetCash(playerid) < cost)	return SendNotCash(playerid);

		format(string, sizeof(string), "~w~Motor degistirildi (100.00) ve $%i odedin.", cost);
		JobMessage(playerid, string, 6);
        SendSyntaxMessage(playerid, "Aracýn motoru $%i karþýlýðýnda deðiþtirildi.", cost);
		GiveCash(playerid, -cost);
		UnFreezePlayer(playerid);
		VehicleInfo[vehicleid][carEngine] = 100.00;
		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	else if (upgrade == 10)
	{
	    if (GetCash(playerid) < cost)	return SendNotCash(playerid);

		SendSyntaxMessage(playerid, "$%i karþýlýðýnda aracý boyadýnýz.", cost);
		GiveCash(playerid, -cost);
		UnFreezePlayer(playerid);
		ChangeVehicleColor(vehicleid, level, color2);
		VehicleInfo[vehicleid][carColor1] = level;
		VehicleInfo[vehicleid][carColor2] = color2;
		Save_Car(vehicleid);
		GiveBizCash(dealer, cost / 100 * 80);
	    return 1;
	}
	else if (upgrade == 11)
	{
		if (GetCash(playerid) < cost)	return SendNotCash(playerid);

		format(string, sizeof(string), "~w~Aku degistirildi (100.00) ve $%i odedin.", cost);
		JobMessage(playerid, string, 6);
        SendSyntaxMessage(playerid, "Aracýn aküsü deðiþtirildi. Ücret: $%i.", cost);
		GiveCash(playerid, -cost);
		UnFreezePlayer(playerid);
		VehicleInfo[vehicleid][carBattery] = 100.00;
		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	else if (upgrade == 12)
	{
		if (GetCash(playerid) < cost)	return SendNotCash(playerid);
		/*GiveCash(playerid, -cost);

		new Float:toFill = GetVehicleFuelCapacity(GetVehicleModel(vehicleid)) - VehicleInfo[vehicleid][carFuel];
		VehicleInfo[vehicleid][carFuel] += toFill;

		if (BizInfo[GetPVarInt(playerid, #bizid)][bizOwnerID] != 0)
		{
			if (BizInfo[GetPVarInt(playerid, #bizid)][bizProduct] > 10) BizInfo[GetPVarInt(playerid, #bizid)][bizProduct]--;
			GiveBizCash(GetPVarInt(playerid, #bizid), cost);
		}

		format(string, sizeof(string), "~w~Âû óñïåøíî çàïðàâèëèñü çà ~h~~g~$%i.", cost);
		InfoMSG(playerid, string, 5);
		SM2(playerid,"Âàøå òðàíñïîðòíîå ñðåäñòâî áûëî çàïðàâëåíî çà $%i.", cost);*/

		return 1;
	}
	else if (upgrade == 13) //all
	{
		if (GetCash(playerid) < cost)	return SendNotCash(playerid);
		GiveCash(playerid, -cost);

		FixVehicle(vehicleid);

		if (BizInfo[GetPVarInt(playerid, #bizid)][bizOwnerID] != 0)
		{
			if (BizInfo[GetPVarInt(playerid, #bizid)][bizProduct] > 10) BizInfo[GetPVarInt(playerid, #bizid)][bizProduct]--;
			GiveBizCash(GetPVarInt(playerid, #bizid), cost);
		}

		format(string, sizeof(string), "~w~Basariyla araci\ntamir ettiniz\nucret: ~h~~g~$%i.", cost);
		InfoMSG(playerid, string, 5);
		SM2(playerid,"Aracý $%i karþýlýðýnda tamir ettirdin.", cost);

		return 1;
	}
	else if (upgrade == 14) //list
	{
		if (GetCash(playerid) < cost)	return SendNotCash(playerid);
		GiveCash(playerid, -cost);

		UpdateVehicleDamageStatus(vehicleid, pTemp[playerid][pListed][0], pTemp[playerid][pListed][1], pTemp[playerid][pListed][2], pTemp[playerid][pListed][3]);
		for(new i; i < 4; i++) pTemp[playerid][pListed][i] = 0;

		if (BizInfo[GetPVarInt(playerid, #bizid)][bizOwnerID] != 0)
		{
			if (BizInfo[GetPVarInt(playerid, #bizid)][bizProduct] > 10) BizInfo[GetPVarInt(playerid, #bizid)][bizProduct]--;
			GiveBizCash(GetPVarInt(playerid, #bizid), cost);
		}

		format(string, sizeof(string), "~w~Arac tamir eidldi\nUcret: ~h~~g~$%i.", cost);
		InfoMSG(playerid, string, 5);
		SM2(playerid,"Ýþlemi $%i karþýlýðýnda bitirdiniz.", cost);

		return 1;
	}
	else if (upgrade == 15)//HP
	{
		if (GetCash(playerid) < cost)	return SendNotCash(playerid);
		GiveCash(playerid, -cost);

		SetVehicleHealth(vehicleid, GetVehicleMaxHealth(GetVehicleModel(vehicleid)));

		if (BizInfo[GetPVarInt(playerid, #bizid)][bizOwnerID] != 0)
		{
			if (BizInfo[GetPVarInt(playerid, #bizid)][bizProduct] > 10) BizInfo[GetPVarInt(playerid, #bizid)][bizProduct]--;
			GiveBizCash(GetPVarInt(playerid, #bizid), cost);
		}

		format(string, sizeof(string), "~w~Arac tamir edildi\nUcret: ~h~~g~$%i.", cost);
		InfoMSG(playerid, string, 5);
		SM2(playerid,"Ýþlemi $%i karþýlýðýnda bitirdiniz.", cost);

		return 1;
	}
	return 1;
}

SendMechanicHelp(playerid, location[])
{
	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || PlayerInfo[i][pJob] != JOB_MECHANIC) continue;

       	SendClientMessage(i, COLOR_SERVER2, "|_________Acil tamirci çaðrýsý_________|");
		if (pTemp[playerid][pPayphone] == -1) 	SendClientMessageEx(i, COLOR_WHITE, "Arayan: %s No: %i", GetNameEx(playerid), PlayerInfo[playerid][pNumber]);
		else 									SendClientMessageEx(i, COLOR_WHITE, "Arayan: Ankesörlü Telefon, No: %i", PayphoneInfo[pTemp[playerid][pPayphone]][phNumber]);
		SendClientMessageEx(i, COLOR_WHITE, "Lokasyon: %s", location);
 	}
	return 1;
}

Mechanic_OnPlayerExitVehicle(playerid)
{
    if (RepairService[playerid] != 0)
	{
		ShowJobMessage(playerid, "~h~~p~ARACI BOYAMAYA BASLADINIZ");
		AC_GivePlayerWeapon(playerid, 41, 999);
	}
    return 1;
}

StartVehicleUpgrade(playerid, vehicleid, type, cost, level = 0, color2 = 0)
{
	if (type != 12 && type != 13 && type != 14 && VehicleInfo[vehicleid][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu araç size ait deðil. ");
	VehicleUpgrade(playerid, cost, level, color2, type);
	return 1;
}

Mechanic_SecondTimer(playerid)
{
		if (RepairTime[playerid] > 0 && RepairService[playerid] != 0)
		{
			new Float:x, Float:y, Float:z;
			GetVehiclePos(RepairToVehicle[playerid], x, y, z);
			if (RepairTime[playerid] == 1)
			{
				if (RepairService[playerid] == 1)
				{
					JobMessage(playerid, "~h~~p~TAMIR EDILIYOR..", 6);
					VehicleInfo[RepairToVehicle[playerid]][carDeath] = 0;
					if (VehicleInfo[RepairToVehicle[playerid]][carOwnerID] > 0 && VehicleInfo[RepairToVehicle[playerid]][carOwnerID] != INVALID_PLAYER_ID)     SetVehicleHealth(RepairToVehicle[playerid], GetVehicleMaxHealth(GetVehicleModel(RepairToVehicle[playerid])) + VehicleInfo[RepairToVehicle[playerid]][carArmour]);
					else                                                            SetVehicleHealth(RepairToVehicle[playerid], 1000.0);
				}
				else if (RepairService[playerid] == 2)
				{
					JobMessage(playerid, "~h~~p~KAPORTA TAMIRINI BITIRDIN!", 6);
					RepairVehicleBody(RepairToVehicle[playerid]);
				}
				else if (RepairService[playerid] == 3)
				{
					JobMessage(playerid, "~h~~p~MOTORU TAMIR ETTIN!", 6);
					VehicleInfo[RepairToVehicle[playerid]][carEngine] = 20.0;
				}
				else if (RepairService[playerid] == 4)
				{
					JobMessage(playerid, "~h~~p~ARACI BASARIYLA BOYADIN ", 6);
					ChangeVehicleColor(RepairToVehicle[playerid], GetPVarInt(playerid, "color1"), GetPVarInt(playerid, "color2"));
					VehicleInfo[RepairToVehicle[playerid]][carColor1] = GetPVarInt(playerid, "color1");
					VehicleInfo[RepairToVehicle[playerid]][carColor2] = GetPVarInt(playerid, "color2");
					DeletePVar(playerid, "color1");
					DeletePVar(playerid, "color2");
				}

				ResetPlayerWeapons(playerid);
				RepairService[playerid] = 0;
				RepairTowTruck[playerid] = INVALID_VEHICLE_ID;
				RepairTime[playerid] = 0;
				RepairOffer[playerid] = INVALID_PLAYER_ID;
				RepairToVehicle[playerid] = INVALID_VEHICLE_ID;
			}
			else if (IsPlayerInRangeOfPoint(playerid, 4.2, x, y, z))
			{
				if (HoldingKey(playerid, KEY_FIRE) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerWeapon(playerid) == 41)
				{
					new veh = RepairTowTruck[playerid], mes[128];

					if (RepairService[playerid] == 1)
					{
						format(mes, sizeof(mes), "~h~~p~MOTOR TAMIRI~n~~w~KALAN PARCA ~b~%i", VehicleInfo[veh][carComps]);
						ShowJobMessage(playerid, mes);
						VehicleInfo[veh][carComps] -= 4;
					}
					if (RepairService[playerid] == 2)
					{
						format(mes, sizeof(mes), "~h~~p~KAPORTA TAMIRI~n~~w~KALAN PARCA ~b~%i", VehicleInfo[veh][carComps]);
						ShowJobMessage(playerid, mes);
						VehicleInfo[veh][carComps] -= 5;
					}
					if (RepairService[playerid] == 3)
					{
						format(mes, sizeof(mes), "~h~~p~MOTOR TAMIRI~n~~w~KALAN PARCA ~b~%i~n~~y~SURE %i", VehicleInfo[veh][carComps], RepairTime[playerid]);
						ShowJobMessage(playerid, mes);
						VehicleInfo[veh][carComps] -= 5;
					}
					if (RepairService[playerid] == 5)
					{
						format(mes, sizeof(mes), "~h~~p~ARAC BOYANIYOR~n~~w~KALAN PARCA ~b~%i~n~~y~SURE %i", VehicleInfo[veh][carComps], RepairTime[playerid]);
						ShowJobMessage(playerid, mes);
						VehicleInfo[veh][carComps] -= 3;
					}
					RepairTime[playerid]--;
				}
			}
			else
			{
				ShowJobMessage(playerid, "~h~~p~ARACIN YAKININDA KALMALISIN! ");
			}
		}

		if (GetCash(playerid) > PlayerInfo[playerid][pCash])  SetCash(playerid, PlayerInfo[playerid][pCash]);

        return 1;
}

CMD:tamir(playerid, params[])
{
	new userid, type, vehid = GetPlayerVehicleID(playerid);

	if (PlayerInfo[playerid][pJob] != JOB_MECHANIC) 	return SendErrorMessage(playerid, "Tamirci mesleðinde deðilsiniz.");
	if (!IsDriver(playerid) || !IsATowTruck(vehid))		return SendErrorMessage(playerid, "Çekici aracýnýn içerisinde olmalýsýnýz.");

	if (sscanf(params,"ui",userid, type))
	{
		SendHelpMessage(playerid, "/tamir [ID / isim] [tip]");
		SendSyntaxMessage(playerid, "tip 1: Motor saðlýðýný düzeltme (Araç caný yükselir) ");
		SendSyntaxMessage(playerid, "tip 2: Kaporta tamiri (kýrýk parçalarý yeniler) ");
		SendSyntaxMessage(playerid, "tip 3: Motor tamiri (Tükenmiþ motoru yeniler) ");
		return 1;
	}

	if (type < 1 || type > 3)
	{
	    SendSyntaxMessage(playerid, "tip 1: Motor saðlýðýný düzeltme (Araç caný yükselir) ");
		SendSyntaxMessage(playerid, "tip 2: Kaporta tamiri (kýrýk parçalarý yeniler) ");
		SendSyntaxMessage(playerid, "tip 3: Motor tamiri (Tükenmiþ motoru yeniler) ");
	    return 1;
	}

	if (userid == playerid)								return SendErrorMessage(playerid, "Bu iþlemi kendinize uygulayamazsýnýz. ");
	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (!PlayerNearPlayer(6.0, playerid, userid))		return SendNotNearPlayer(playerid);
	if (!IsDriver(userid))								return SendErrorMessage(playerid, "Belirttiðiniz kiþi araçta olmalý.");

	new vehicle = GetPlayerVehicleID(userid);

	if (VehicleInfo[vehicle][carFaction] != 0 && type != 1 && type != 2)												return SendErrorMessage(playerid, "Birlik araçlarýna bu iþlemi uygulayamazsýn.");
    if (pTemp[userid][pServePlayer] == playerid && (pTemp[userid][pServeType] > 0 && pTemp[userid][pServeType] < 4))	return SendErrorMessage(playerid, "%s adlý kiþiye zaten bir teklif göndermiþsiniz.", GetNameEx(userid));

	if (type == 1)
	{
		if (VehicleInfo[vehid][carComps] < 75)	return SendErrorMessage(playerid, "Bu iþlem için yeterli materyaliniz yok.");

		new mes[128];
    	format(mes, sizeof(mes), "%s adlý kiþinin %s model aracýna tamir teklifi verir.", GetNameWithMask(userid), VehicleNames[GetVehicleModel(vehicle)-400]);
		pc_cmd_me(playerid, mes);
		SendSyntaxMessage(userid, "%s size tamir isteði gönderdi. (Y tuþuna basarak teklifi kabul edebilirsin)", GetNameWithMask(playerid));
	}
	else if (type == 2)
	{
	    if (VehicleInfo[vehid][carComps] < 75)	return SendErrorMessage(playerid, "Bu iþlem için yeterli materyaliniz yok.");

		new mes[128];
    	format(mes, sizeof(mes), "%s adlý kiþiye %s model aracýna kaporta tamiri teklifi gönderir.", GetNameWithMask(userid), VehicleNames[GetVehicleModel(vehicle)-400]);
		pc_cmd_me(playerid, mes);
		SendSyntaxMessage(userid, "%s size tamir teklifi gönderdi. (Y tuþuna basarak teklifi kabul edebilirsin)", GetNameWithMask(playerid));
	}
	else if (type == 3)
	{
		if (VehicleInfo[vehid][carComps] < 75)		return SendErrorMessage(playerid, "Bu iþlem için 75 adet materyale ihtiyacýnýz var.");
		if (VehicleInfo[vehicle][carEngine] >= 20.0)	return SendErrorMessage(playerid, "Bu araç motorunun revizyona ihtiyacý yok ( > 20%%).");

        new mes[128];
    	format(mes, sizeof(mes), "%s adlý kiþinin %s model aracýna motor revizyon teklifi verir.", GetNameWithMask(userid), VehicleNames[GetVehicleModel(vehicle)-400]);
		pc_cmd_me(playerid, mes);
		SendSyntaxMessage(userid, "%s size araç motoru için revizyon teklifi gönderdi. (Y tuþuna basarak teklifi kabul edebilirsin)", GetNameWithMask(playerid));
	}

	pTemp[userid][pServePlayer] = playerid;
	pTemp[userid][pServeType] = type;
	SetPVarInt(userid, #accept_time, gettime() + 30);
	return 1;
}

CMD:materyalal(playerid, params[]) //êîìï
{
	new amount;

	if (PlayerInfo[playerid][pJob] != JOB_MECHANIC)		return SendErrorMessage(playerid, "Tamirci mesleðinde deðilsiniz.");
	if (!IsDriver(playerid))								return SendErrorMessage(playerid, "Çekici aracýnýn içerisinde olmalýsýnýz.");
	if (!IsATowTruck(GetPlayerVehicleID(playerid)))	return SendErrorMessage(playerid, "Çekici aracýnýn içerisinde olmalýsýnýz.");
	if (!PlayerToPoint(6.0, playerid, 2024.764526, -1871.692382, 13.588704 ))
	{
		Waypoint_Set(playerid, 2024.764526, -1871.692382, 13.588704 , 8.0);
		return SendSyntaxMessage(playerid, "Yedek parça satýlan yer haritanýzda iþaretlendi. (/cpsifirla)");
	}

	if (sscanf(params,"d",amount))
	{
		SendHelpMessage(playerid, "/materyalal [miktar]");
		SendSyntaxMessage(playerid, "Materyalýn 1 adeti 1 dolara eþittir.");
		return 1;
	}

	if (amount < 1 || amount > 300)											return SendErrorMessage(playerid, "1 ile 300 arasýnda bir seçim yapýn.");
    if (VehicleInfo[GetPlayerVehicleID(playerid)][carComps] >= 300)			return SendErrorMessage(playerid, "Bulunduðunuz tamir aracýnda zaten yeterince materyal var. ");
	if (VehicleInfo[GetPlayerVehicleID(playerid)][carComps] + amount > 300)	return SendErrorMessage(playerid, "Sadece %i adet parça alma hakkýnýz kaldý.", 300 - VehicleInfo[GetPlayerVehicleID(playerid)][carComps]);
	if (GetCash(playerid) < amount)											return SendErrorMessage(playerid, "%i adet materyal için yeterli paranýz yok.", amount);

	GiveCash(playerid, -amount);
	SendSyntaxMessage(playerid, "%i adet materyali $%i karþýlýðýnda satýn aldýn.", amount, amount);
	JobMessage(playerid, "~w~ARACA PARCALARI YERLESTIRDIN.", 6);
	VehicleInfo[GetPlayerVehicleID(playerid)][carComps] += amount;
	return 1;
}

CMD:materyallerim(playerid, params[])
{
	if (PlayerInfo[playerid][pJob] != JOB_MECHANIC)		return SendErrorMessage(playerid, "Tamirci mesleðinde deðilsiniz.");
	if (!IsDriver(playerid))							return SendErrorMessage(playerid, "Çekici aracýnýn içerisinde olmalýsýnýz.");
	if (!IsATowTruck(GetPlayerVehicleID(playerid)))		return SendErrorMessage(playerid, "Çekici aracýnýn içerisinde olmalýsýnýz.");

    SendSyntaxMessage(playerid, "Tamir aracýnda %i adet parça bulunuyor.", VehicleInfo[GetPlayerVehicleID(playerid)][carComps]);
	return 1;
}

CMD:benzindoldur(playerid, params[])
{
	new userid, price;

	if (PlayerInfo[playerid][pJob] != JOB_MECHANIC)			return SendErrorMessage(playerid, "Tamirci mesleðinde deðilsiniz.");
	if (!IsDriver(playerid))								return SendErrorMessage(playerid, "Çekici aracýnýn içerisinde olmalýsýnýz.");
	if (!IsATowTruck(GetPlayerVehicleID(playerid)))			return SendErrorMessage(playerid, "Çekici aracýnýn içerisinde olmalýsýnýz.");
	if (sscanf(params,"ud",userid,price))					return SendHelpMessage(playerid, "/benzindoldur [ID / isim] [ücret]");
	if (userid == playerid)									return SendErrorMessage(playerid, "Bu iþlemi kendine uygulayamazsýn.");
	if (!IsPlayerLogged(userid))							return SendNotConnected(playerid);
	if (!PlayerNearPlayer(6.0, playerid, userid))			return SendNotNearPlayer(playerid);
	if (!IsDriver(userid))									return SendErrorMessage(playerid, "Belirttiðiniz kiþi araçta olmalý.");

    new vehicle = GetPlayerVehicleID(userid);

    if (VehicleInfo[vehicle][carFuel] >= GetVehicleFuelCapacity(GetVehicleModel(vehicle)))
		return SendErrorMessage(playerid, "Aracýn deposu tamamen dolu.");
	if (price < 1 || price > 500)
		return SendErrorMessage(playerid, "$1 ile $500 dolar arasýnda bir teklif sunabilirsin.");

    new mes[128];
    format(mes, sizeof(mes), "%s adlý kiþinin aracýna $%i karþýlýðýnda yakýt doldurmayý teklif eder.", GetNameWithMask(userid), price);
	pc_cmd_me(playerid, mes);

	SendClientMessageEx(userid, COLOR_INFO, "%s adlý tamirci $%i karþýlýðýnda araca yakýt koymayý teklif etti. (Y tuþuna basarak kabul edebilirsin)", GetNameWithMask(playerid), price);
	RefillPrice[userid] = price;
	RefillOffer[userid] = playerid;
	return 1;
}

CMD:aracboya(playerid, params[])
{
	new userid, color1, color2;

	if (PlayerInfo[playerid][pJob] != JOB_MECHANIC)						return SendErrorMessage(playerid, "Tamirci mesleðinde deðilsiniz.");
	if (!IsDriver(playerid))											return SendErrorMessage(playerid, "Çekici aracýnýn içerisinde olmalýsýnýz.");
	if (!IsATowTruck(GetPlayerVehicleID(playerid)))						return SendErrorMessage(playerid, "Çekici aracýnýn içerisinde olmalýsýnýz.");
	if (sscanf(params,"udd", userid, color1, color2))					return SendHelpMessage(playerid, "/aracboya [ID / isim] [renk 1] [renk 2](/renkler)");
	if (color1 > 255 || color2 > 255 || color1 < 0 || color2 < 0)		return SendErrorMessage(playerid, "Renk numarasý 0 ile 255 arasýnda olmalý. /renkler");
	if (userid == playerid)												return SendErrorMessage(playerid, "Bu iþlemi kendine uygulayamazsýn.");
	if (!IsPlayerLogged(userid))										return SendNotConnected(playerid);
	if (!PlayerNearPlayer(6.0, playerid, userid))						return SendNotNearPlayer(playerid);
	if (!IsDriver(userid))												return SendErrorMessage(playerid, "Belirttiðiniz kiþi araçta olmalý.");

	new vehicle = GetPlayerVehicleID(userid);

	if (VehicleInfo[vehicle][carFaction] != 0)										return SendErrorMessage(playerid, "Birlik araçlarýna bu iþlemi uygulayamazsýn. ");
	if (VehicleInfo[GetPlayerVehicleID(playerid)][carComps] < 45)					return SendErrorMessage(playerid, "Araç boyamak için 45 materyale ihtiyacýnýz var. ");
    if (pTemp[userid][pServePlayer] == playerid && pTemp[userid][pServeType] == 4)	return SendErrorMessage(playerid, "%s adlý kiþiye zaten bir teklif göndermiþsiniz.", GetNameEx(userid));

	new mes[128];
    format(mes, sizeof(mes), "%s adlý kiþinin %s model aracýna boyama teklifi gönderir.", GetNameWithMask(userid), VehicleNames[GetVehicleModel(vehicle)-400]);
	pc_cmd_me(playerid, mes);

	SendClientMessageEx(userid, COLOR_INFO, "%s aracýnýza boyama teklifi gönderdi. (Y tuþuna basarak teklifi kabul edebilirsin)", GetNameWithMask(playerid));

	SetPVarInt(playerid, "color1", color1);
	SetPVarInt(playerid, "color2", color2);
	pTemp[userid][pServePlayer] = playerid;
 	pTemp[userid][pServeType] = 4;
 	SetPVarInt(userid, #accept_time, gettime() + 30);
	return 1;
}

CMD:aracicek(playerid, params[])
{
	new userid, vehicle = GetPlayerVehicleID(playerid);

	if (PlayerInfo[playerid][pJob] != JOB_MECHANIC)		return SendErrorMessage(playerid, "Tamirci mesleðinde deðilsiniz.");
	if (!IsDriver(playerid) || !IsATowTruck(vehicle))	return SendErrorMessage(playerid, "Çekici aracýnýn içerisinde olmalýsýnýz.");
	if (IsTrailerAttachedToVehicle(vehicle))
	{
		DetachTrailerFromVehicle(vehicle);
		return SendErrorMessage(playerid, "Çektiðiniz aracýn kancasýný çýkardýnýz.");
	}

	if (sscanf(params,"u", userid))						return SendHelpMessage(playerid, "/aracicek [ID / isim]");
	if (userid == playerid)								return SendErrorMessage(playerid, "Bu iþlemi kendine uygulayamazsýn.");
	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (!PlayerNearPlayer(8.0, playerid, userid))		return SendNotNearPlayer(playerid);
	if (!IsPlayerInAnyVehicle(userid))					return SendErrorMessage(playerid, "Belirttiðiniz kiþi araçta olmalý.");

	if (pTemp[userid][pServePlayer] == playerid && pTemp[userid][pServeType] == 5) 	return SendErrorMessage(playerid, "%s adlý kiþiye zaten bir teklif göndermiþsiniz.", GetNameEx(userid));

	new vehid = GetPlayerVehicleID(userid);

    if (IsABoat(vehid) || IsAPlane(vehid) || IsAHelicopter(vehid) || IsABiker(vehid))	return SCM(playerid, COLOR_GREY,"Bu araç çekilemez.");

    new mes[128];
    format(mes, sizeof(mes), "%s adlý kiþinin %s model aracýný çekme teklifi gönderir.", GetNameWithMask(userid), VehicleNames[GetVehicleModel(vehid)-400]);
	pc_cmd_me(playerid, mes);

	SendClientMessageEx(userid, COLOR_INFO, "* %s aracýnýza çekme teklifi gönderdi. (Araçtan inip Y tuþuna basarak teklifi kabul edebilirsin)", GetNameWithMask(playerid));
	SetPVarInt(userid, #tow_car, vehid);
	pTemp[userid][pServePlayer] = playerid;
	pTemp[userid][pServeType] = 5;
	SetPVarInt(userid, #accept_time, gettime() + 30);
	return 1;
}

Job_OnGameModeInit()
{
    mysql_tquery(dbHandle, "SELECT * FROM `jobs` ORDER BY `jobid`", "LoadDynamicJobs");
	mysql_tquery(dbHandle, "SELECT * FROM `trashes` ORDER BY `id`", "LoadDynamicTrashes");
	mysql_tquery(dbHandle, "SELECT * FROM `factories` ORDER BY `id`", "LoadDynamicFactories");
	return 1;
}

Job_OnPlayerDisconnect(playerid)
{
 	RefillPrice[playerid] = 0;
 	RefillOffer[playerid] = INVALID_PLAYER_ID;
	RepairOffer[playerid] = INVALID_PLAYER_ID;
	RepairToVehicle[playerid] = INVALID_VEHICLE_ID;
	RepairTowTruck[playerid] = INVALID_VEHICLE_ID;
	RepairTime[playerid] = 0;
    RepairService[playerid] = 0;

	if (TaxiDuty[playerid] && TaxiMade[playerid] > 0) GiveCash(playerid, TaxiMade[playerid]);

	TaxiDuty[playerid] = false;
	TaxiFare[playerid] = 0;
	TaxiMoney[playerid] = 0;
	TaxiMade[playerid] = 0;
	TaxiPassenger[playerid] = INVALID_PLAYER_ID;
    return 1;
}

Job_SecondTimer(playerid)
{
    if (GetPVarInt(playerid, #hide_job_message) > 0 && GetPVarInt(playerid, #hide_job_message) < gettime())
	{
		PlayerTextDrawHide(playerid, TD_job_message[playerid][0]);
		DeletePVar(playerid, #hide_job_message);
	}
	else return 0;
    return 1;
}
forward LoadDynamicJobs();
forward OnJobInsert(JobID);

public OnJobInsert(JobID)
{
	JobsInfo[JobID][jobID] = cache_insert_id();
	return 1;
}

public LoadDynamicJobs()
{
	new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows) return print("[Jobs] Herhangi bir kayýt bulunamadý.");


	for(new i; i < rows; i++)
	{
		cache_get_value_int(i, "id", JobsInfo[i][jobID]);
		cache_get_value_int(i, "jobid", JobsInfo[i][jobType]);
		cache_get_value_float(i, "posx", JobsInfo[i][jobX]);
		cache_get_value_float(i, "posy", JobsInfo[i][jobY]);
		cache_get_value_float(i, "posz", JobsInfo[i][jobZ]);
		cache_get_value_int(i, "interior", JobsInfo[i][jobInt]);
		cache_get_value_int(i, "vw", JobsInfo[i][jobVW]);
		JobsInfo[i][jobOn] = 1;

		JobsInfo[i][jobPickUp] = CreateDynamicPickup(1210, 1, JobsInfo[i][jobX], JobsInfo[i][jobY], JobsInfo[i][jobZ], JobsInfo[i][jobVW], JobsInfo[i][jobInt], -1, 100.0);

		total++;
	}

	printf("[Jobs] Rows - %i. Load - %i. Time: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

AddJobToFile(jobid, type, Float:x, Float:y, Float:z, interior, vw)
{
    new query[128 + 128];

	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `jobs` (jobid,posx,posy,posz,interior,vw) VALUES (%i,%f,%f,%f,%i,%i)", type, x, y, z, interior, vw);
	mysql_tquery(dbHandle, query, "OnJobInsert", "d", jobid);
	return 1;
}

JobMessage(playerid, string[], length = 5)
{
	PlayerTextDrawShow(playerid, TD_job_message[playerid][0]);
	PlayerTextDrawSetString(playerid, TD_job_message[playerid][0], string);
	SetPVarInt(playerid, #hide_job_message, gettime() + length);
	return 1;
}

ShowJobMessage(playerid, message[])
{
	PlayerTextDrawShow(playerid, TD_job_message[playerid][0]);
	PlayerTextDrawSetString(playerid, TD_job_message[playerid][0], message);
	SetPVarInt(playerid, #hide_job_message, gettime() + 5);
	return 1;
}

Job_Nearest(playerid)
{
	for(new i = 0; i != MAX_JOBS; i++)
	{
		if (JobsInfo[i][jobOn] != 1 || !PlayerToPoint(2.0, playerid, JobsInfo[i][jobX], JobsInfo[i][jobY], JobsInfo[i][jobZ]) || GetWorld(playerid) != JobsInfo[i][jobVW] || GetInterior(playerid) != JobsInfo[i][jobInt]) continue;
		return i;
	}
	return -1;
}


stock GetClosestTypeJob(playerid, type, &Float:radius)
{
	new cl_ID = -1, Float:cl_Dist;
	radius = 9999.0;

	for(new i = 0; i < MAX_JOBS; i++)
	{
	    if ( !JobsInfo[i][jobOn] || JobsInfo[i][jobType] != type ) continue;
		if ( (cl_Dist = GetPlayerDistanceToPointEx(playerid, JobsInfo[i][jobX], JobsInfo[i][jobY], JobsInfo[i][jobZ])) < radius )
		{
		    cl_ID = i;
		    radius = cl_Dist;
		}
	}
	return cl_ID;
}
Dialog:BuyDrugs(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;

    new drug_list_name[][] = {"Marijuana yapraklari "," LSD "," Eroin "," Kokain "," Efedrin"};
    new drug_list_price[] = {50, 150, 100, 200, 50};

    static const str_size[] = "{FFFFFF}1 gram için %s $%i satin almak istiyorsunuz.\nSatin almak için mevcut miktar: 1 - 1000:";
    new mes[sizeof(str_size) - 4 + 7 + 3 + 1];

    format(mes, sizeof(mes), str_size, drug_list_name[listitem], drug_list_price[listitem]);

    // Satin alma miktarini girmek için diyalog göster
    Dialog_Show(playerid, BuyDrugsAccept, DIALOG_STYLE_INPUT,
                "{FFFFFF}Uyusturucu Satin Al",
                mes, "Seç", "Iptal");

    // Seçilen uyusturucu türünü sakla
    SetPVarInt(playerid, #select_law, listitem);
    return 1;
}

Dialog:BuyDrugsAccept(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;

    new amount = strval(inputtext);
    listitem = GetPVarInt(playerid, #select_law);

    // Miktar geçerli degilse hata mesaji gönder
    if (amount < 0 || amount > 1000)
        return SendErrorMessage(playerid, "Yanlis uyusturucu miktari: 1 - 1000.");

    new faction = PlayerInfo[playerid][pFaction];

    // Çete veya mafya üyesi degilse islem yapma
    if (Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)
        return 1;

    // Siyah pazara yakin degilse, yol göster
    if (!PlayerToPoint(2.0, playerid, BLACKMARKET_X, BLACKMARKET_Y, BLACKMARKET_Z))
    {
        Waypoint_Set(playerid, BLACKMARKET_X, BLACKMARKET_Y, BLACKMARKET_Z);
        return SendErrorMessage(playerid, "Rihtimda olmalisiniz.");
    }

    new drug_list[] = {INV_SEED_GANJA, INV_LSD, INV_HEROIN, INV_COCAINE, INV_EPHEDRINE};
    new drug_price[] = {50, 150, 100, 200, 50};

    // Yeterli para yoksa hata mesaji gönder
    if (GetCash(playerid) < drug_price[listitem] * amount)
        return SendNotCash(playerid);

    // Envanter doluysa islem yapma
    if (GiveInvItem(playerid, drug_list[listitem], amount) == -1)
        return SendSyntaxMessage(playerid, "Envanteriniz tamamen dolu.");

    // Satin alma islemi basariliysa, oyuncuya mesaj göster ve para düsür


    GiveCash(playerid, -drug_price[listitem] * amount);
    return 1;
}


/*
Dialog:BuyAmmoLaw(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_buygun(playerid, "");

    new faction = PlayerInfo[playerid][pFaction], ammo = 1;

	new gun_list[][20] = {"M1911","M1911","Desert Eagle","Desert Eagle","Shotgun","Shotgun","Shotgun","Tec-9 / MP5 / Uzi", "Tec-9 / MP5 / Uzi","Country Rifle"},
		ammo_list[] = {82, 83, 84, 85, 86, 87, 88, 90, 91, 96},
		ammo_pr[] = {35, 80, 60, 130, 300, 200, 100, 200, 450, 400};

	if (!PlayerInfo[playerid][pFaction])															return SendErrorMessage(playerid, "Onaylý bir birlikte deðilsiniz. ");
										return SendErrorMessage(playerid, "Silah satýn almak için eriþiminiz yok. ");
	if (Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)		return 1;
    if (!PlayerToPoint(2.0, playerid, BLACKMARKET_X, BLACKMARKET_Y, BLACKMARKET_Z))
	{
	    Waypoint_Set(playerid, BLACKMARKET_X, BLACKMARKET_Y, BLACKMARKET_Z);
	    return SendErrorMessage(playerid, "Rýhtýmda olmalýsýnýz.");
	}

	if (!CheckInv(playerid)) 					return SendErrorMessage(playerid, "Envanterinizde yeterli alan yok.");
	if (GetCash(playerid) < ammo_pr[listitem])	return SendNotCash(playerid);
	if (Factions[faction][fPoint]- ammo < 0)	return SendErrorMessage(playerid, "Birliðinizin satýn almak için yeterli puaný yok.");

	GiveCash(playerid, -ammo_pr[listitem]);
	GiveInvItem(playerid, ammo_list[listitem], CheckAmmo(ammo_list[listitem]));

	Factions[faction][fPoint] -= 1;
	SQL_SetInteger("factions", "point", Factions[faction][fPoint], Factions[faction][fID]);

	SendBlackMarketMessage(playerid, "$%i ve 1 exp karþýlýðýnda %s için bir maðaza %s [%i mermi] satýn aldýnýz.", inventory_items[ammo_list[listitem]][itemName], CheckAmmo(ammo_list[listitem]), gun_list[listitem], ammo_pr[listitem]);
	return 1;
}

Dialog:BuyGunLaw(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_buygun(playerid, "");

    new faction = PlayerInfo[playerid][pFaction];

	if (!PlayerInfo[playerid][pFaction])														return SendErrorMessage(playerid, "Onaylý bir birlikte deðilsiniz.");
										return SendErrorMessage(playerid, "Silah satýn almak için eriþiminiz yok.");
	if (Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)	return 1;

	if (Factions[faction][fType] == FACTION_MAFIA)
	{
		new gun_list[] = {24, 22, 23, 25, 26, 27, 28, 32, 29, 30, 31, 33, 16, 18, INV_OPTICS, INV_SILENCER, INV_TOOLS},
			gun_point[] = {3, 3, 3, 4, 4, 4, 5, 5, 5, 7, 7, 10, 10, 4, 2, 2, 1},
			gun_price[] = {1800, 1000, 1500, 2400, 2100, 4000, 2000, 2500, 2800, 3500, 4300, 3800, 1000, 300, 1700, 500, 300},
			gun_ammo[] = {50, 50, 50, 30, 30, 30, 120, 120, 120, 150, 150, 15, 1, 1, 1, 1, 1};

        if (Factions[faction][fPoint]-gun_point[listitem] < 0)																	return SendErrorMessage(playerid, "Birliðinizin satýn almak için yeterli puaný yok.");
        //if (ValidWeaponForInventory(gun_list[listitem]) && PlayerInfo[playerid][pWeap][GetWeapSlot(gun_list[listitem])] != 0)	return SendErrorMessage(playerid, "Ó âàñ óæå åñòü îðóæèå â äàííîì ñëîòå.");

		new mes[256];
		if (ValidWeaponForInventory(gun_list[listitem]))
		{
			format(mes, sizeof(mes), "{FFFFFF}Are you sure you want to buy %s and %i ammo for %i exp and $%i?\nYour faction will have %i exp.",
			inventory_items[gun_list[listitem]][itemName], gun_ammo[listitem], gun_point[listitem], gun_price[listitem], Factions[faction][fPoint]-gun_point[listitem]);
		}
		else
		{
			format(mes, sizeof(mes), "{FFFFFF}Are you sure you want to buy %s for %i exp and $%i?\nYour faction will have %i exp.",
			inventory_items[gun_list[listitem]][itemName], gun_point[listitem], gun_price[listitem], Factions[faction][fPoint]-gun_point[listitem]);
		}
    	Dialog_Show(playerid, BuyGunAccept, DIALOG_STYLE_MSGBOX, "{FFFFFF}Silah Satýn Al", mes, "Satýn Al", "Geri");
	}

	else if (Factions[faction][fType] == FACTION_GANG)
	{
		new gun_list[] = {24, 22, 25, 26, 28, 32, 18, INV_TOOLS}, gun_point[] = {3, 3, 4, 4, 5, 5, 4, 1}, gun_price[] = {1800, 1000, 2400, 2100, 2000, 2500, 300, 300}, gun_ammo[] = {50, 50, 30, 30, 120, 120, 1, 1};

        if (Factions[faction][fPoint]-gun_point[listitem] < 0)																	return SendErrorMessage(playerid, "Birliðinizin satýn almak için yeterli puaný yok.");
        //if (ValidWeaponForInventory(gun_list[listitem]) && PlayerInfo[playerid][pWeap][GetWeapSlot(gun_list[listitem])] != 0)	return SendErrorMessage(playerid, "Ó Âàñ óæå åñòü îðóæèå â äàííîì ñëîòå.");

		new mes[256];

		if (ValidWeaponForInventory(gun_list[listitem]))
		{
			format(mes, sizeof(mes), "{FFFFFF}Are you sure you want to buy %s and %i rounds for %i exp and $%i?\nYour faction will have %i exp.",
			inventory_items[gun_list[listitem]][itemName], gun_ammo[listitem], gun_point[listitem], gun_price[listitem], Factions[faction][fPoint]-gun_point[listitem]);
		}
		else
		{
			format(mes, sizeof(mes), "{FFFFFF}Are you sure you want to buy %s for %i exp and $%i?\nYour faction will have %i exp.",
			inventory_items[gun_list[listitem]][itemName], gun_point[listitem], gun_price[listitem], Factions[faction][fPoint]-gun_point[listitem]);
		}
    	Dialog_Show(playerid, BuyGunAccept, DIALOG_STYLE_MSGBOX, "Silah Satýn Al", mes, "Satýn Al", "Geri");
	}
	SetPVarInt(playerid, #select_law, listitem);
	return 1;
}

Dialog:BuyGunAccept(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_buygun(playerid, "");

	listitem = GetPVarInt(playerid, #select_law);

    new faction = PlayerInfo[playerid][pFaction];

	if (!PlayerInfo[playerid][pFaction])															return SendErrorMessage(playerid, "Onaylý bir birlikte deðilsiniz.");
											return SendErrorMessage(playerid, "Silah satýn almak için eriþiminiz yok.");
	if (Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)	return 1;
    if (!PlayerToPoint(2.0, playerid, BLACKMARKET_X, BLACKMARKET_Y, BLACKMARKET_Z))
	{
	    Waypoint_Set(playerid, BLACKMARKET_X, BLACKMARKET_Y, BLACKMARKET_Z);
	    return SendErrorMessage(playerid, "Rýhtýmda olmalýsýnýz.");
	}

	if (Factions[faction][fType] == FACTION_MAFIA)
	{
		new gun_list[] = {24, 22, 23, 25, 26, 27, 28, 32, 29, 30, 31, 33, 16, 18, INV_OPTICS, INV_SILENCER, INV_TOOLS}, gun_point[] = {3, 3, 3, 4, 4, 4, 5, 5, 5, 7, 7, 10, 10, 4, 2, 2, 1},
	    	gun_price[] = {1800, 1000, 1500, 2400, 2100, 4000, 2000, 2500, 2800, 3500, 4300, 3800, 1000, 300, 1700, 500, 300}, gun_ammo[] = {50, 50, 50, 30, 30, 30, 120, 120, 120, 150, 150, 15, 1, 1, 1, 1, 1};

		if (Factions[faction][fPoint]-gun_point[listitem] < 0)																	return SendErrorMessage(playerid, "Birliðinizin satýn almak için yeterli puaný yok.");
		if (GetCash(playerid) < gun_price[listitem])																				return SendNotCash(playerid);
        //if (ValidWeaponForInventory(gun_list[listitem]) && PlayerInfo[playerid][pWeap][GetWeapSlot(gun_list[listitem])] != 0)	return SendErrorMessage(playerid, "Ó Âàñ óæå åñòü îðóæèå â äàííîì ñëîòå.");

		if (ValidWeaponForInventory(gun_list[listitem]))
		{
		    GivePlayerWeaponEx(playerid, gun_list[listitem], gun_ammo[listitem]);
		    SendSyntaxMessage(playerid, "%s ve %i mermi satýn aldýnýz.", inventory_items[gun_list[listitem]][itemName], gun_ammo[listitem]);
		}
		else
		{
        	if (GiveInvItem(playerid, gun_list[listitem], gun_ammo[listitem]) == -1)	return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");

			SendSyntaxMessage(playerid, "%s satýn aldýnýz.", inventory_items[gun_list[listitem]][itemName], gun_ammo[listitem]);
		}

        Factions[faction][fPoint] -= gun_point[listitem];
        SQL_SetInteger("factions", "point", Factions[faction][fPoint], Factions[faction][fID]);
		GiveCash(playerid, -gun_price[listitem]);
	}

	else if (Factions[faction][fType] == FACTION_GANG)
	{
  		new gun_list[] = {24, 22, 25, 26, 28, 32, 18, INV_TOOLS}, gun_point[] = {3, 3, 4, 4, 5, 5, 4, 1}, gun_price[] = {1800, 1000, 2400, 2100, 2000, 2500, 300, 300}, gun_ammo[] = {50, 50, 30, 30, 120, 120, 1, 1};

		if (Factions[faction][fPoint]-gun_point[listitem] < 0)	return SendErrorMessage(playerid, "Birliðinizin satýn almak için yeterli puaný yok");
		if (GetCash(playerid) < gun_price[listitem])	return SendNotCash(playerid);
        //if (ValidWeaponForInventory(gun_list[listitem]) && PlayerInfo[playerid][pWeap][GetWeapSlot(gun_list[listitem])] != 0)	return SendErrorMessage(playerid, "Ó Âàñ óæå åñòü îðóæèå â äàííîì ñëîòå.");

		if (ValidWeaponForInventory(gun_list[listitem]))
		{
		    GivePlayerWeaponEx(playerid, gun_list[listitem], gun_ammo[listitem]);
		    SendSyntaxMessage(playerid, "%s ve %i mermi satýn aldýnýz.", inventory_items[gun_list[listitem]][itemName], gun_ammo[listitem]);
		}
		else
		{
        	if (GiveInvItem(playerid, gun_list[listitem], gun_ammo[listitem]) == -1)	return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");

			SendSyntaxMessage(playerid, "%s satýn aldýnýz.", inventory_items[gun_list[listitem]][itemName], gun_ammo[listitem]);
		}

        Factions[faction][fPoint] -= gun_point[listitem];
		SQL_SetInteger("factions", "point", Factions[faction][fPoint], Factions[faction][fID]);
		GiveCash(playerid, -gun_price[listitem]);
	}
	return 1;
}

Dialog:BuyGunMain(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

    new faction = PlayerInfo[playerid][pFaction];

	if (!PlayerInfo[playerid][pFaction])	return SendErrorMessage(playerid, "Onaylý bir birlikte deðilsiniz.");
	if (Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)	return 1;

    new title[56];

	format(title, sizeof(title), "{FFFFFF}On the account of your faction - %i exp.", Factions[faction][fPoint]);

	if (listitem == 0)
	{
	    if (Factions[faction][fType] == FACTION_MAFIA)
		{
			new mes[1024] = "Desert Eagle\t-3 exp\t$1.800\n\
							COLT45\t-3 exp\t$1.000\n\
							COLT45(silencer)\t-3 exp\t$1.500\n\
							Shotgun\t-4 exp\t$2.400\n\
							Sawn-off Shotgun\t-4 exp\t$2.100\n\
							Combat Shotgun\t-4 exp\t$4.000\n\
							UZI\t-5 exp\t$2.000\n\
							Tec-9\t-5 exp\t$2.500\n\
							MP5\t-5 exp\t$2.800\n\
							M4\t-7 exp\t$4.300\n\
							Rifle\t-10 exp\t$3.800\n\
							Grenade\t-10 exp\t$1000\n\
							Molotov cocktail\t-4 exp\t$300\n\
							Optical sight\t-2 exp\t$1700\n\
							Ûilencer\t-2 exp\t$500\n\
							Lock pick\t-1 exp\t$300";

			Dialog_Show(playerid, BuyGunLaw, DIALOG_STYLE_TABLIST, title, mes, "Satýn Al", "Ýptal");
		}
		else
		{
		    Dialog_Show(playerid, BuyGunLaw, DIALOG_STYLE_TABLIST, title, "Desert Eagle\t-3 exp\t$1.800\n\
																			COLT45\t-3 exp\t$1.000\n\
																			Shotgun\t-4 exp\t$2.400\n\
																			Sawn-off Shotgun\t-4 exp\t$2.100\n\
																			UZI\t-5 exp\t$2.000\n\
																			Tec-9\t-5 exp\t$2.500\n\
																			Molotov cocktail\t-4 exp\t$300\n\
																			Lock pick\t-1 exp\t$300", "Buy", "Ýptal");
		}
	}

	else if (listitem == 1)
	{
	    Dialog_Show(playerid, BuyAmmoLaw, DIALOG_STYLE_TABLIST, title, "100 units.\t-1 exp\t$400\n200 units.\t-2 exp\t$800\n300 units.\t-3 exp\t$1.200\n400 units.\t-4 exp\t$1.600\n500 units.\t-5 exp\t$2.000\n600 units.\t-6 exp\t$2.400", "Buy", "Ýptal");
	}
	return 1;
}
*/
Dialog:TakeJobMenu(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	switch(listitem) {
		case 0: {
			new i = Job_Nearest(playerid);
			if (i == -1) return 1;

			if (JobsInfo[i][jobType] == JOB_PIZZA)
			{
				if (PlayerInfo[playerid][pSideJob] != JOBLESS) return SendSyntaxMessage(playerid, "Ýkinci bir mesleðiniz var zaten /imeslekayril komutunu kullanarak ikinci mesleðinizden ayrýlýn.");

				PlayerInfo[playerid][pSideJob] = JobsInfo[i][jobType];
				SQL_SetInteger("users", "sidejob", JobsInfo[i][jobType], PlayerInfo[playerid][pID]);

				return 1;
			}

			if (PlayerInfo[playerid][pJob] != JOBLESS)									return SendErrorMessage(playerid, "Zaten bir mesleðin var, önce bulunduðun iþten ayrýl.");
			if (JobsInfo[i][jobType] == JOB_TAXI && !PlayerInfo[playerid][pTaxiLic])	return SendErrorMessage(playerid, "Taksi lisansýnýz olmadan bu sistemi kullanamazsýnýz ");

			PlayerInfo[playerid][pJob] = JobsInfo[i][jobType];
			PlayerInfo[playerid][pCareer] = 0;

			SQL_SetInteger("users", "job", JobsInfo[i][jobType], PlayerInfo[playerid][pID]);

			SendSyntaxMessage(playerid, "%s isimli iþtesiniz, bilgi almak için - /meslekyardim", jobs_names[JobsInfo[i][jobType]]);
			return 1;
		}
		case 1: {
			new i = Job_Nearest(playerid);
			if (i == -1) return 1;

			new mes[512];
			format(mes, sizeof(mes), "/mak(/makirala) - Komutunu kullanarak meslek aracý kiralayabilirsiniz\n/makb - Kiraladýðýnýz aracýn kirasýný bitirebilirsiniz\n");

			if (JobsInfo[i][jobType] == JOB_PIZZA) {
				format(mes, sizeof(mes), "%sPizzacý Kuryesi\n\
											/pizza - Motordan pizza alýrsýnýz.\n\
											/kurye - Kurye motoru kiralayýp iþe baþlayabilirsiniz.", mes);
			} else if (JobsInfo[i][jobType] == JOB_CARJACKER) {
				format(mes, sizeof(mes), "/aracteslim - Çaldýðýnýz araç(larý) teslim edersiniz.\n\
										/aracbirak - Görev için çaldýðýnýz aracý býrakýrsýnýz.\n\
										/gorevayril - Görevden ayrýlýrsýnýz.\n\n\
										/arackilitkir sessiz - Sessiz bir þekilde aracý çalarsýnýz.\n\
										/arackilitkir sesli - Sesli bir þekilde aracý çalarsýnýz.");
            } else if (JobsInfo[i][jobType] == JOB_BALIKCI) {
				format(mes, sizeof(mes), "/baliktut - Ýskelede balýk tutarsýnýz.");
			} else if (JobsInfo[i][jobType] == JOB_TAXI) {
				format(mes, sizeof(mes), "%s/taksi isbasi - Ýþbaþýna girebilir/çýkabilirsiniz\n\
											/taksi ucret - Taksimetrenin KM baþý alacaðý ücreti deðiþtirirsiniz\n\
											/taksi kabul - Taksi isteðini kabul edersiniz", mes);
			} else if (JobsInfo[i][jobType] == JOB_MECHANIC) {
				format(mes, sizeof(mes), "%s/benzindoldur - Aracýn yakýtýný doldurursunuz, belirlediðiniz fiyat üzerinden.\n\
											/tamir - Aracý tamir edersiniz, bilgiler komutu kullandýðýnýzda görünecektir.\n\
											/aracboya - Aracý belirlediðiniz sayýya(lara) boyarsýnýz.\n\n\
											/mekanikacek - Çekici ile araç çekersiniz.\n\
											/materyalal - Tamir, boya ve diðer þeyler için materyal alýrsýnýz.\n\
											/materyallerim - Üstünüzdeki materyalleri görüntülersiniz.", mes);
            } else if (JobsInfo[i][jobType] == JOB_TASIMACILIK) {
				format(mes, sizeof(mes), "%s/tasimacilik - Genel komutlarý listeler.\n\
											/tasimacilik nokta - Yükü alacaðýnýz kýsmý haritanýzda iþaretler.\n\
											/tasimacilik basla - Taþýmacýlýk mesleðine baþlarsýnýz.", mes);
			} else if (JobsInfo[i][jobType] == JOB_TRUCKER) {
				format(mes, sizeof(mes), "%s/koli - Araçtan Koli alýrsýnýz.\n\
											/tasimacilik - Komutu kullandýðýnýzda bilgi seçenekleri karþýnýza çýkacaktýr.\n", mes);
				switch(PlayerInfo[playerid][pCareer]) {
					case 0..11: strcat(mes, "Kullanabileceðiniz araçlar: Picador, Sadler, Bobcat, Walton, Yosemite.");
					case 12..23: strcat(mes, "Kullanabileceðiniz araçlar: Picador, Sadler, Bobcat, Walton, Yosemite,\n Pony, Berkley's RC Van, Burrito.");
					case 24..31: strcat(mes, "Kullanabileceðiniz araçlar: Picador, Sadler, Bobcat, Walton, Yosemite,\n Pony, Berkley's RC Van, Burrito, Rumpo, Boxville.");
					case 32..47:
					{
						strcat(mes, "Kullanabileceðiniz araçlar: Picador, Sadler, Bobcat, Walton, Yosemite,\n Pony, Berkley's RC Van, Burrito, Rumpo, Boxville.\n");
						strcat(mes, "Benson, Mule, DFT-30, Tanker, Securicar.");
					}
					case 48..58:
					{
						strcat(mes, "Kullanabileceðiniz araçlar: Picador, Sadler, Bobcat, Walton, Yosemite,\n Pony, Berkley's RC Van, Burrito, Rumpo, Boxville.\n");
						strcat(mes, "Benson, Mule, DFT-30, Tanker, Securicar, Yankee, Flatbed.");
					}
					default:
					{
						strcat(mes, "Kullanabileceðiniz araçlar: Picador, Sadler, Bobcat, Walton, Yosemite,\n Pony, Berkley's RC Van, Burrito, Rumpo, Boxville.\n");
						strcat(mes, "Benson, Mule, DFT-30, Tanker, Securicar, Yankee, Flatbed.");
					}
				}
			} else if (JobsInfo[i][jobType] == JOB_TRASHMASTER) {
				format(mes, sizeof(mes), "%s\nÇöpleri konteynýrlardan toplayýp tesise götürmeniz gerekiyor!", mes);
			} else return pc_cmd_meslekyardim(playerid, "");

			Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{FFFFFF}Meslek Komutlarý", mes, "Geri", "Kapat");
			return 1;
		}
		case 2: pc_cmd_isegir(playerid, "");
		case 3: pc_cmd_istencik(playerid, "");
	}

	return 1;
}
CMD:isegir(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
		return 1;

	new i = Job_Nearest(playerid);
	if (i == -1) return 1;

	new title[32+22];
	format(title, sizeof(title), "%s", GetJobName(JobsInfo[i][jobType]));

	static const strdlg[] = "%s\nÝþe Gir\nKomutlar\n	\n{FFC46A}Ýþten Çýk ";
	new mes[sizeof(strdlg) + 36];

	if (JobsInfo[i][jobType] == JOB_PIZZA) {
		format(mes, sizeof(mes), strdlg, "Ýkincil bir iþiniz olabilir");
		format(title, sizeof(title), "%s - Yan meslek", title);
	} else {
		format(mes, sizeof(mes), strdlg, "Baþka bir meslek yapamazsýn");
		format(title, sizeof(title), "%s - Ana meslek", title);
	}

	Dialog_Show(playerid, TakeJobMenu, DIALOG_STYLE_TABLIST_HEADERS, title, mes, "Seç", "Ýptal");
	return 1;
}

alias:istencik("istenayril");
CMD:istencik(playerid, params[])
{
	new job = PlayerInfo[playerid][pJob];

	if (job == JOBLESS)																return SendErrorMessage(playerid, "Artýk iþsizsin.");
	if (pTemp[playerid][pJob])														return SendErrorMessage(playerid, "Önce iþinizi bitiriniz ve aracýnýzý teslim ediniz. (/makb)");

	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pCareer] = 0;

	pTemp[playerid][pJob] = 0;
	pTemp[playerid][pJobTime] = 0;

	SQL_SetInteger("users", "job", 0, PlayerInfo[playerid][pID]);
	SQL_SetInteger("users", "career", 0, PlayerInfo[playerid][pID]);

	SendSyntaxMessage(playerid, "%s%s iþinden ayrýldýnýz", GetJobName(job), (job == JOB_TRUCKER)?(". Trucker seviyeniz sýfýrlandý."):(","));
	return 1;
}

alias:yanmeslektencik("imeslekayril");
CMD:yanmeslektencik(playerid, params[])
{
	new job = PlayerInfo[playerid][pSideJob];

	if (job == JOBLESS)	return SendErrorMessage(playerid, "Ýkinci bir iþiniz yok.");

	SendSyntaxMessage(playerid, "%s adlý meslekten ayrýldýn.", GetJobName(job));
	PlayerInfo[playerid][pSideJob] = 0;
	return 1;
}

alias:rentcarjob("meslekarackirala", "mak");
CMD:rentcarjob(playerid, params[])
{
	if(!MeslekSistemleri) return SendErrorMessage(playerid, "Meslek sistemleri pasife çekildi. Rol modu aktif edildi. (PayDay yükseltildi)");
	new rentalid = Locker_RentalNearestType(playerid, 1);
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli]) return 1;
	if (Locker_RentalNearestType(playerid, 1) == -1) return SendErrorMessage(playerid, "Herhangi bir meslek aracý kiralama noktasýna yakýn deðilsin.");

	if (pTemp[playerid][pJob])					return SendErrorMessage(playerid, "Halihazýrda bir iþ aracýnýz var. Geri dönmek için /meslekarackirabitir(/makb) komutunu kullanýn. ");

	new kiraucret = 100;

	if (PlayerInfo[playerid][pJob] == JOBLESS && PlayerInfo[playerid][pSideJob] == 0) return SendErrorMessage(playerid,"Mesleðin yok.");
	if (GetCash(playerid) < kiraucret) return SendErrorMessage(playerid, "Aracýn kiralama ücretine yetecek kadar paranýz yok. Ücret: %d", kiraucret);
	if (pTemp[playerid][pRentveh])				return SendErrorMessage(playerid, "Zaten kiralýk aracýnýz var. /meslekarackirabitir(/makb) komutunu kullanýnýz!");

	if (RentalPoint[rentalid][rentalJob] != PlayerInfo[playerid][pJob] && RentalPoint[rentalid][rentalJob] != PlayerInfo[playerid][pSideJob]) return SendErrorMessage(playerid, "Bu nokta sizin mesleðiniz için araç kiralamýyor.");

    new Float:x, Float:y, Float:z, Float:a, model;
    GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

    switch (RentalPoint[rentalid][rentalJob])
	{
	    case JOBLESS:
		{
		    SendHelpMessage(playerid, "Bu kiralama noktasinin meslegi belirlenmemis.");
		}
		case JOB_MECHANIC:
		{
		    new vehicle = CreateFactionVehicle(false, 525, x, y, z, a, 1, 1, 9, 0, GetVehicleNumber(), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

		    if(!vehicle) return SendErrorMessage(playerid, "Bir sorun oluþtu. Kod: 1055");

	        GiveCash(playerid, -kiraucret);
	        pTemp[playerid][pRentveh] = vehicle;
            VehicleInfo[vehicle][carRent] = PlayerInfo[playerid][pID];

	        FixVehicle(vehicle);
	        VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(vehicle));

			pTemp[playerid][pJob] = 1;
		    pTemp[playerid][pJobTime] = gettime();

		    PutPlayerInVeh(playerid, vehicle, 0);
	        SendHelpMessage(playerid, "Kullanýlabilir komutlarýn listesi için /meslekyardim komutunu kullanabilirsiniz. ");
	        SendSyntaxMessage(playerid, "%s adlý iþ aracýný aldýnýz. Kullanabildiðiniz komutlar: /makb(kirayý bitirir), /kilit.", VehicleNames[GetVehicleModel(vehicle)-400]);
	        SendSyntaxMessage(playerid, "Dikkat! Aracý 5 dakika kullanmazsanýz araç silenecektir! ");
		}
		case JOB_TAXI:
		{
		    new vehicle = CreateFactionVehicle(false, 420, x, y, z, a, 1, 1, 7, 0, GetVehicleNumber(), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

		    if(!vehicle) return SendErrorMessage(playerid, "Bir sorun oluþtu. Kod: 1055");

	        GiveCash(playerid, -kiraucret);
	        pTemp[playerid][pRentveh] = vehicle;
            VehicleInfo[vehicle][carRent] = PlayerInfo[playerid][pID];

	        FixVehicle(vehicle);
	        VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(vehicle));

			pTemp[playerid][pJob] = 1;
		    pTemp[playerid][pJobTime] = gettime();

		    PutPlayerInVeh(playerid, vehicle, 0);
	        SendHelpMessage(playerid, "Kullanýlabilir komutlarýn listesi için /meslekyardim komutunu kullanabilirsiniz. ");
	        SendSyntaxMessage(playerid, "%s adlý iþ aracýný aldýnýz. Kullanabildiðiniz komutlar: /makb(kirayý bitirir), /kilit.", VehicleNames[GetVehicleModel(vehicle)-400]);
	        SendSyntaxMessage(playerid, "Dikkat! Aracý 5 dakika kullanmazsanýz araç silenecektir! ");
		}
		case JOB_TASIMACILIK:
		{
		    new vehicle = CreateFactionVehicle(false, 459, x, y, z, a, 1, 1, 7, 0, GetVehicleNumber(), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

		    if(!vehicle) return SendErrorMessage(playerid, "Bir sorun oluþtu. Kod: 1055");

	        GiveCash(playerid, -kiraucret);
	        pTemp[playerid][pRentveh] = vehicle;
            VehicleInfo[vehicle][carRent] = PlayerInfo[playerid][pID];

	        FixVehicle(vehicle);
	        VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(vehicle));

			pTemp[playerid][pJob] = 1;
		    pTemp[playerid][pJobTime] = gettime();

		    PutPlayerInVeh(playerid, vehicle, 0);
	        SendHelpMessage(playerid, "Kullanýlabilir komutlarýn listesi için /meslekyardim komutunu kullanabilirsiniz. ");
	        SendSyntaxMessage(playerid, "%s adlý iþ aracýný aldýnýz. Kullanabildiðiniz komutlar: /makb(kirayý bitirir), /kilit.", VehicleNames[GetVehicleModel(vehicle)-400]);
	        SendSyntaxMessage(playerid, "Dikkat! Aracý 5 dakika kullanmazsanýz araç silenecektir! ");
		}
		case JOB_TRUCKER:
		{
		    new vehicle = CreateFactionVehicle(false, 543, x, y, z, a, 1, 1, 8, 0, GetVehicleNumber(), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

		    if(!vehicle) return SendErrorMessage(playerid, "Bir sorun oluþtu. Kod: 1055");

	        GiveCash(playerid, -kiraucret);
	        pTemp[playerid][pRentveh] = vehicle;
            VehicleInfo[vehicle][carRent] = PlayerInfo[playerid][pID];

	        FixVehicle(vehicle);
	        VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(vehicle));

			pTemp[playerid][pJob] = 1;
		    pTemp[playerid][pJobTime] = gettime();

		    PutPlayerInVeh(playerid, vehicle, 0);
	        SendHelpMessage(playerid, "Kullanýlabilir komutlarýn listesi için /meslekyardim komutunu kullanabilirsiniz. ");
	        SendSyntaxMessage(playerid, "%s adlý iþ aracýný aldýnýz. Kullanabildiðiniz komutlar: /makb(kirayý bitirir), /kilit.", VehicleNames[GetVehicleModel(vehicle)-400]);
	        SendSyntaxMessage(playerid, "Dikkat! Aracý 5 dakika kullanmazsanýz araç silenecektir! ");
		}
		case JOB_PIZZA:
		{
		    new vehicle = CreateFactionVehicle(false, 448, x, y, z, a, 1, 1, 6, 0, GetVehicleNumber(), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

		    if(!vehicle) return SendErrorMessage(playerid, "Bir sorun oluþtu. Kod: 1055");

	        GiveCash(playerid, -kiraucret);
	        pTemp[playerid][pRentveh] = vehicle;
            VehicleInfo[vehicle][carRent] = PlayerInfo[playerid][pID];

	        FixVehicle(vehicle);
	        VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(vehicle));

		    pTemp[playerid][pJob] = 1;
		    pTemp[playerid][pJobTime] = gettime();

		    PutPlayerInVeh(playerid, vehicle, 0);
	        SendHelpMessage(playerid, "Kullanýlabilir komutlarýn listesi için /meslekyardim komutunu kullanabilirsiniz. ");
	        SendSyntaxMessage(playerid, "%s adlý iþ aracýný aldýnýz. Kullanabildiðiniz komutlar: /makb(kirayý bitirir), /kilit.", VehicleNames[GetVehicleModel(vehicle)-400]);
	        SendSyntaxMessage(playerid, "Dikkat! Aracý 5 dakika kullanmazsanýz araç silenecektir! ");
		}
	}
/*
	if (IsTruckCar(vehicle) && PlayerInfo[playerid][pJob] == JOB_TRUCKER && GetAvailableTruck(playerid, GetVehicleModel(vehicle)))
	{
		pTemp[playerid][pJob] = 1;
		pTemp[playerid][pJobTime] = gettime();
	}
	else if (IsTaxiCar(vehicle) && PlayerInfo[playerid][pJob] == JOB_TAXI) {
		pTemp[playerid][pJob] = 1;
		pTemp[playerid][pJobTime] = gettime();
	}
	else if (IsMechanicCar(vehicle) && PlayerInfo[playerid][pJob] == JOB_MECHANIC) {
		pTemp[playerid][pJob] = 1;
	}
	else if (IsTrashMasterCar(vehicle) && PlayerInfo[playerid][pJob] == JOB_TRASHMASTER) {
		pTemp[playerid][pJob] = 1;
		Trash_InitPlayer(playerid);
	}
	else if (IsPizzaCar(vehicle) && PlayerInfo[playerid][pSideJob] == JOB_PIZZA) {
		pTemp[playerid][pJob] = 1;
	}
	else {
		SendErrorMessage(playerid, "Geçersiz araç tipi!");
		if (PlayerInfo[playerid][pJob] == JOB_TRUCKER) SendSyntaxMessage(playerid, "Kullanabileceðiniz araçlarý /meslekyardim komutuyla öðrenebilirsiniz!");
		return 1;
	}

	pTemp[playerid][pRentveh] = vehicle;
	VehicleInfo[vehicle][carRent] = PlayerInfo[playerid][pID];

	GiveCash(playerid, -kiraucret);

	SendHelpMessage(playerid, "Kullanýlabilir komutlarýn listesi için /meslekyardim komutunu kullanabilirsiniz. ");
	SendSyntaxMessage(playerid, "%s adlý iþ aracýný aldýnýz. Kullanabildiðiniz komutlar: /makb(kirayý bitirir), /kilit.", VehicleNames[GetVehicleModel(vehicle)-400]);
	SendSyntaxMessage(playerid, "Dikkat! Aracý 10 dakika kullanmazsanýz araç silenecektir! ");
	*/

	return 1;
}

alias:unrentcarjob("unrcj", "meslekarackirabitir", "makb");
CMD:unrentcarjob(playerid, params[])
{
	if (!pTemp[playerid][pRentveh]) return 1;

    SendSyntaxMessage(playerid, "Bir iþ aracýný iade ettiniz.");
	EndJob(playerid);
	return 1;
}

EndJob(playerid) {
	//Ñäåëàòü òàê, ÷òîáû íå âûãîíÿëî è íåëüçÿ áûëî çàâåñòè äâèãàòåëü
	new vehicle = pTemp[playerid][pRentveh];

	if (PlayerInfo[playerid][pJob] == JOB_TRASHMASTER && pTemp[playerid][pJob])
	{
		Trash_ResetPlayer(playerid, 1);
		EndTrashJob(playerid);
	}

	pTemp[playerid][pRentveh] = 0;
    VehicleInfo[vehicle][carRent] = 0;

	pTemp[playerid][pTruckerOn] = 0;
	pTemp[playerid][pTruckerPrice] = 0;
	pTemp[playerid][pTruckerTime] = 0;
	pTemp[playerid][pPizzaBoy] = 0;

	pTemp[playerid][pJob] = 0;
	pTemp[playerid][pJobTime] = 0;

    AracKiraBitir(vehicle);
	return 1;
}
CMD:buydrugs(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];

    // Oyuncu herhangi bir olusum üyesi degilse hata mesaji gönder
    if (!PlayerInfo[playerid][pFaction])
        return SendErrorMessage(playerid, "Herhangi bir olusumunun üyesi degilsiniz.");

    // Oyuncu bir çete ya da mafya üyesi degilse islem yapma
    if (Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)
        return 1;

    // Oyuncu siyah pazara yakin degilse, yol göster
    if (!PlayerToPoint(2.0, playerid, BLACKMARKET_X, BLACKMARKET_Y, BLACKMARKET_Z))
    {
        Waypoint_Set(playerid, BLACKMARKET_X, BLACKMARKET_Y, BLACKMARKET_Z);
        return SendErrorMessage(playerid, "Rihtimda olmalisiniz.");
    }

    // Satin alma menüsünü göster
    Dialog_Show(playerid, BuyDrugs, DIALOG_STYLE_TABLIST,
                "Uyusturucu Satin Al",
                "Marijuana yapraklari\tadet basina 50$ \nLSD\tgram basina 150$ \nHeroin\tgram basina 100 $ \nCocaine\tgram basina 200$.\nEfedrin\tadet basina 50$.",
                "Satin Al", "Iptal");
    return 1;
}

CMD:radyocal(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);

    if (!vehicle || !IsDriver(playerid))				return SendErrorMessage(playerid, "Sürücü koltuðunun arkasýna oturmanýz gerekir.");
	if (!VehicleInfo[vehicle][carOwnerID])				return SendErrorMessage(playerid, "Sadece kiþisel araçlarýn teybini çalabilirsiniz. ");
    if (!VehicleInfo[vehicle][carRadio])				return SendErrorMessage(playerid, "Bu araçta teyp bulunmamakta.");

	VehicleInfo[vehicle][carRadio] = 0;

	new mes[128];
	format(mes, sizeof(mes), "%s model aracýn radyosunu çalar.", VehicleNames[GetVehicleModel(vehicle)-400]);
	pc_cmd_me(playerid, mes);
	return 1;
}

CMD:birlikmeslek(playerid, params[])
{
	if (!PlayerInfo[playerid][pFaction])																										return SendErrorMessage(playerid, "Onaylý illegal birlik üyesi deðilsiniz.");
	if (Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_GANG && Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_MAFIA)	return SendErrorMessage(playerid, "Onaylý illegal birlikte olmalýsýnýz.");
    if (!isLeader(playerid))																													return SendErrorMessage(playerid, "Bu iþ sadece onaylý illegal birlik liderleri tarafýndan kullanýlabilir.");

	new userid, level;

	if (sscanf(params, "ud", userid, level)) return SendHelpMessage(playerid, "/birlikmeslek [ID/Ýsimn [0 - eriþimi kapat | 1 - uyuþturucu satýn alma eriþimi | 2 - silah satýn alma eriþimi] ");

	if (!IsPlayerLogged(userid))											return SendNotConnected(playerid);
	if (PlayerInfo[userid][pFaction] != PlayerInfo[playerid][pFaction])	return SendErrorMessage(playerid, "Bu oyuncu sizin birliðinizin bir üyesi deðil.");
    if (level > 2 || level < 0)											return SendErrorMessage(playerid, "Seçenek 0 ila 2 arasýnda olabilir.");

	if (!level)
	{
	    if (PlayerInfo[userid][pSideJob] == 0)	return SendErrorMessage(playerid, "Oyuncunun herhangi bir yan mesleði yok.");

		SendSyntaxMessage(userid, "%s adlý birlik lideri yetkinizi  %s yetkisine çevirdi. ", GetNameEx(playerid), GetJobName(PlayerInfo[userid][pSideJob]));
		SendSyntaxMessage(playerid, "%s adlý kiþiyi %s adlý meslekten çýkardýnýz.", GetNameEx(userid), GetJobName(PlayerInfo[userid][pSideJob]));
        PlayerInfo[userid][pSideJob] = 0;
		return 1;
	}

    PlayerInfo[userid][pSideJob] = level + 3;
	SendSyntaxMessage(userid, "%s adlý birlik lideri yetkinizi  %s yetkisine çevirdi", GetNameEx(playerid), GetJobName(PlayerInfo[userid][pSideJob]));
	SendSyntaxMessage(playerid, "%s adlý kiþiye %s izni verdiniz.", GetNameEx(userid), GetJobName(PlayerInfo[userid][pSideJob]));
	return 1;
}

/* Giþe sistemi */
Toll_Init()
{
	CreateDynamicObject(966,613.9722900,-1197.7174100,17.4750300,0.0000000,0.0000000,23.8200000); // Richman
	CreateDynamicObject(966,619.4291400,-1181.6597900,18.7250300,0.0000000,0.0000000,214.3770000); //
	CreateDynamicObject(978,602.5300300,-1203.4530000,18.3230000,0.0000000,0.0000000,210.9350000); //
	CreateDynamicObject(978,617.2069700,-1185.0639600,19.8470000,0.0000000,0.0000000,247.3620000); //
	CreateDynamicObject(979,629.5009800,-1175.1540500,19.6140000,0.0000000,0.0000000,210.0000000); //
	CreateDynamicObject(979,615.7869900,-1193.4639900,18.4990000,0.0000000,0.0000000,253.7500000); //
	CreateDynamicObject(4642,613.6110200,-1193.1440400,19.7060000,0.0000000,0.0000000,31.1610000); //
	CreateDynamicObject(4642,619.1859700,-1185.9379900,20.1340000,0.0000000,0.0000000,211.1670000); //
	L_a_TollObject[0] = CreateDynamicObject( 968, 613.8935546875, -1197.7329101563, 18.109180450439, 0.000000, -90.000000, 23.81982421875, -1 );
	L_a_TollObject[1] = CreateDynamicObject( 968, 619.44201660156, -1181.6903076172, 19.525806427002, 0.000000, -90.000000, 214.37744140625, -1 );

	CreateDynamicObject(8168,61.2210000,-1532.8769500,5.9830000,0.0000000,0.0000000,6.5240000); // Flint County
	CreateDynamicObject(8168,41.4620000,-1529.3620600,6.1950000,0.0000000,0.0000000,186.5530000); //
	CreateDynamicObject(966,35.8897500,-1526.0096400,4.2410600,0.0000000,0.0000000,270.6760000); //
	CreateDynamicObject(966,67.0937300,-1536.8275100,3.9910600,0.0000000,0.0000000,87.3380000); //
	CreateDynamicObject(997,66.2930000,-1547.0909400,4.1310000,0.0000000,0.0000000,82.5240000); //
	CreateDynamicObject(997,34.0650000,-1516.4489700,4.3490000,0.0000000,0.0000000,299.9990000); //
	CreateDynamicObject(997,35.8150000,-1526.3490000,4.2150000,0.0000000,0.0000000,307.6700000); //
	CreateDynamicObject(997,64.8720000,-1533.9429900,4.2220000,0.0000000,0.0000000,312.1550000); //
	CreateDynamicObject(994,51.3200000,-1531.4289600,4.2310000,0.0000000,0.0000000,352.8330000); //
	CreateDynamicObject(994,45.0380000,-1530.6519800,4.2320000,0.0000000,0.0000000,352.8310000); //
   	L_a_TollObject[2] = CreateDynamicObject( 968, 35.838928222656, -1525.9034423828, 5.0012145042419, 0.000000, -90.000000, 270.67565917969, -1 );
 	L_a_TollObject[3] = CreateDynamicObject( 968, 67.116600036621, -1536.8218994141, 4.7504549026489, 0.000000, -90.000000, 87.337799072266, -1 );

	CreateDynamicObject(8168,1789.7659900,703.2520100,15.9380000,1.0070000,3.0090000,98.8260000); // Las Venturas
	CreateDynamicObject(8168,1784.8330100,703.9470200,15.9450000,358.0590000,356.9890000,278.5100000); //
	CreateDynamicObject(966,1781.4122300,697.3253200,14.6369100,0.0000000,0.0000000,348.0900000); //
	CreateDynamicObject(997,1781.7650100,697.2990100,14.6460000,0.0000000,2.9990000,79.9900000); //
	CreateDynamicObject(997,1792.7960200,706.3800000,13.9300000,0.0000000,2.9990000,81.3760000); //
	CreateDynamicObject(966,1793.4289600,709.8798200,13.6369100,0.0000000,0.0000000,169.4370000); //
	CreateDynamicObject(979,1771.3859900,702.2100200,15.0440000,0.0000000,0.0000000,307.2160000); //
	CreateDynamicObject(979,1803.6180400,704.8200100,14.6030000,0.0000000,0.0000000,125.6040000); //
   	L_a_TollObject[4] = CreateDynamicObject( 968, 1781.4133300781, 697.31750488281, 15.420023918152, 0.000000, -90.000000, 348.10229492188, -1 );
 	L_a_TollObject[5] = CreateDynamicObject( 968, 1793.6700439453, 709.84631347656, 14.405718803406, 0.000000, -90.000000, 169.43664550781, -1 );

	CreateDynamicObject(966, 614.42188, 350.81711, 17.92480, 0.00000, 0.00000, 35.00000); // Blueberry right
	CreateDynamicObject(966, 602.91162, 342.59781, 17.92480, 0.00000, 0.00000, 215.92000);
	L_a_TollObject[6] = CreateDynamicObject(968, 614.42188, 350.81711, 18.66520, 0.00000, -90.00000, 35.00000);
	L_a_TollObject[7] = CreateDynamicObject(968, 602.91162, 342.59781, 18.66520, 0.00000, -90.00000, 215.92000);

	CreateDynamicObject(966, -190.35580, 254.64290, 11.07090, 0.00000, 0.00000, 345.00000); // Blueberry left
	CreateDynamicObject(966, -204.00880, 258.30411, 11.07090, 0.00000, 0.00000, -195.00000);
	L_a_TollObject[8] = CreateDynamicObject(968, -190.24850, 254.62019, 11.89360, 0.00000, -90.00000, -14.94000);
	L_a_TollObject[9] = CreateDynamicObject(968, -204.10410, 258.34149, 11.89360, 0.00000, -90.00000, -195.00000);
	return 1;
}

Toll_CloseToll(tollid)
{
    return SetDynamicObjectRot(L_a_TollObject[tollid], toll_gate_rot[tollid][0], -90.0, toll_gate_rot[tollid][1]);
}

Toll_OpenToll(tollid)
{
	aTolls[tollid][E_tOpenTime] = 7;
	return SetDynamicObjectRot(L_a_TollObject[tollid], toll_gate_rot[tollid][0], 0.0, toll_gate_rot[tollid][1]);
}

Toll_Nearest(playerid)
{
	new tollid = -1;

	for(new i; i != MAX_TOLLS; i++)
	{
	    if (!IsPlayerInRangeOfPoint(playerid, TOLL_OPEN_DISTANCE, toll_gate_pos[i][0], toll_gate_pos[i][1], toll_gate_pos[i][2])) continue;

		tollid = i;
		break;
	}

	return tollid;
}

CMD:gise(playerid, params[])
{
	new tollid;
	if ((tollid = Toll_Nearest(playerid)) == -1) return 1;

    if (aTolls[tollid][E_tOpenTime] > 0) 	return SendErrorMessage(playerid, "Giþe zaten açýk, kapanana kadar bekle. ");

	if (!PlayerInfo[playerid][pOnDuty])
	{
		if (aTolls[tollid][E_tLocked])		return SendClientMessage(playerid, COLOR_FADE1, "Çalýþan: Üzgünüm, geçiþine izin veremem.");
		if (GetCash(playerid) < TOLL_COST)	return SendClientMessage(playerid, COLOR_FADE1, "Çalýþan: Geçmek için $15 paraya ihtiyacýn var.");

		GiveCash(playerid, -TOLL_COST);
		pc_cmd_server_ame(playerid, "geçiþ parasýný öder.");
	}

	SendClientMessage(playerid, COLOR_FADE1, "Çalýþan: Teþekkürler, dikkatli sürün! ");
	SendSyntaxMessage(playerid, "Geçmek için 6 saniyeniz var.");

	Toll_OpenToll(tollid);
	return 1;
}

/* Sahiplik sistemi */

Interior_OnGameModeInit()
{

         #include <interiors/girisekrani/giris.inc>
         #include <interiors/hapis/hapis1.inc>
        #include <interiors/hapis/hapis2.inc>
	buy_interior = CreateMenu("_", 1, 20.0, 160.0, 80.0);
	AddMenuItem(buy_interior, 0, "> ILERI");
	AddMenuItem(buy_interior, 0, "> GERI");
	AddMenuItem(buy_interior, 0, "> SEC");
	AddMenuItem(buy_interior, 0, "> CIKIS");
	return 1;
}

ShowProperty(playerid, id)
{
	new count, year, month, day, hour, minute, second;

	getdate(year, month, day);
	gettime(hour, minute, second);

    SendClientMessageEx(playerid, COLOR_SERVER2,"|____________________Mülkleriniz %s [%02d %s %i, %02d:%02d:%02d]____________________|", GetName(id), day, GetMonthName(month), year, hour, minute, second); //èìóùåñòâî

	for(new i; i != MAX_HOUSES; i++)
	{
	    if (HouseInfo[i][hID] == 0 || (HouseInfo[i][hOwnerID] != PlayerInfo[id][pID] && PlayerInfo[id][pRentKey] != HouseInfo[i][hID]))				continue;

        if (HouseInfo[i][hPosInt] == 0)												SendClientMessageEx(playerid, COLOR_STATS1, "> Ev [ID: %i] | Adres: %s", i, (!HouseInfo[i][hApart])?(GetHouseZone(i)):(GetApartmentZone(HouseInfo[i][hApart])));
		else																		SendClientMessageEx(playerid, COLOR_STATS1, "> Ev [ID: %i]", i);

		count++;
	}

	for(new i; i != MAX_BIZ; i++)
	{
	    if (BizInfo[i][bizID] == 0 || BizInfo[i][bizOwnerID] != PlayerInfo[id][pID])				continue;

        SendClientMessageEx(playerid, COLOR_STATS1, "> Ýþyeri [ID: %i]", i);

        count++;
	}

	for(new i; i != MAX_GARAGES; i++)
	{
	    if (GarageInfo[i][garageID] == 0 || GarageInfo[i][garageOwner] != PlayerInfo[id][pID])	continue;

        SendClientMessageEx(playerid, COLOR_STATS1, "> Garaj [ID: %i]", i);

        count++;
	}

	if (count == 0 && playerid == id)	SendErrorMessage(playerid, "Herhangi bir mülkünüz yok.");
    if (count == 0 && playerid != id)	SendSyntaxMessage(playerid, "Kiþinin herhangi bir mülkü yok.");

	return 1;
}

stock CreateLableText(playerid,lable[], text[])
{
    //if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
	if (GetPVarInt(playerid, #LableText) > 0)
	{
		PlayerTextDrawSetString(playerid, PlayerText:mulktext[playerid][0], lable);
		PlayerTextDrawSetString(playerid, PlayerText:mulktext[playerid][1], text);
		return 1;
	}

	//PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);

	PlayerTextDrawSetString(playerid, PlayerText:mulktext[playerid][0], lable);
	PlayerTextDrawSetString(playerid, PlayerText:mulktext[playerid][1], text);

	PlayerTextDrawShow(playerid, PlayerText:mulkbilgi[playerid]);
	PlayerTextDrawShow(playerid, PlayerText:mulktext[playerid][0]);
	PlayerTextDrawShow(playerid, PlayerText:mulktext[playerid][1]);

	SetPVarInt(playerid, #LableText, 4);
    return 1;
}

CMD:kilit(playerid, params[])
{
    if (PlayerInfo[playerid][pInjured] || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])	return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

    if (GetNearVehicle(playerid, 2.0) != 0) return pc_cmd_arac(playerid, "kilit");

	new bizid;
	if ((bizid = GetNearOutsideBiz(playerid, 1.5)) == -1) bizid = GetNearInsideBiz(playerid);
	if (bizid != -1)
	{
        if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID] && PlayerInfo[playerid][pWorkOn] != BizInfo[bizid][bizID])	return GameTextForPlayer(playerid, "~r~ANAHTARINIZ BULUNMUYOR!", 5000, 6);
		if (BizInfo[bizid][bizDDoor] > 0)																						return SendErrorMessage(playerid, "Kapý kýrýlmýþ.");

        if (BizInfo[bizid][bizLocked])
		{
			BizInfo[bizid][bizLocked] = 0;
			GameTextForPlayer(playerid, "~w~ISYERI ~g~ACILDI", 5000, 6);
			PlaySound(playerid, 1145);
			return 1;
		}

		else
		{
			BizInfo[bizid][bizLocked] = 1;
			GameTextForPlayer(playerid, "~w~ISYERI ~r~KILITLENDI", 5000, 6);
			PlaySound(playerid, 1145);
			return 1;
		}
	}

	new id = GetNearOutsideGarage(playerid, 1.5);
	if (id == -1) id = GetNearInsideGarage(playerid);
	if (id != -1)
	{
		if (GarageInfo[id][garageOwner] != PlayerInfo[playerid][pID]
		|| (GarageInfo[id][garageHouse] && HouseInfo[GarageInfo[id][garageHouse]][hID] != PlayerInfo[playerid][pRentKey])
		|| (GarageInfo[id][garageBiz] && BizInfo[GarageInfo[id][garageBiz]][bizID] != PlayerInfo[playerid][pWorkOn]))
			return GameTextForPlayer(playerid, "~r~ANAHTARINIZ BULUNMUYOR!", 5000, 6);

		GarageInfo[id][garageLocked] = GarageInfo[id][garageLocked]?0:1;

		if (GarageInfo[id][garageLocked]) 	GameTextForPlayer(playerid, "~w~GARAJ ~r~KILITLENDI", 3000, 4);
		else 								GameTextForPlayer(playerid, "~w~GARAJ ~g~ACILDI", 3000, 4);

		new query[60];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `locked`=%i WHERE `id`=%i", 1, GarageInfo[id][garageLocked], GarageInfo[id][garageID]);
		mysql_tquery(dbHandle, query);
		return 1;
	}

	for(new i = 0; i != MAX_ENTRANCE; i++)
	{
	    if (!EntranceInfo[i][eFaction] || !EntranceInfo[i][entranceOn] || !(IsPlayerEntranceOutside(playerid, i) && IsPlayerEntranceInside(playerid, i))) continue;

        if (PlayerInfo[playerid][pFaction] != EntranceInfo[i][eFaction])		return GameTextForPlayer(playerid, "~r~ANAHTARINIZ BULUNMUYOR!", 5000, 6);

        EntranceInfo[i][eLocked] = (EntranceInfo[i][eLocked]) ? (0) : (1);
        PlaySound(playerid, 1145);

        if (EntranceInfo[i][eLocked])	GameTextForPlayer(playerid, "~w~Kapi ~r~kapatildi", 5000, 6);
		else							GameTextForPlayer(playerid, "~w~Kapi ~g~acildi", 5000, 6);

		break;
	}

	new houseid;
	if ((houseid = GetNearInsideHouse(playerid)) != -1 && (HouseInfo[houseid][hOwnerID] == PlayerInfo[playerid][pID] || HouseInfo[houseid][hID] == PlayerInfo[playerid][pRentKey]))
	{
	    for(new i = 0; i < MAX_FURNITURE; i++)
		{
			if (!IsPlayerInRangeOfPoint(playerid, 2.0, HFurn[houseid][i][fPosX], HFurn[houseid][i][fPosY], HFurn[houseid][i][fPosZ]) || !HFurn[houseid][i][fOn] || !isHouseDoor(HFurn[houseid][i][fModel]))
   			{
				continue;
			}

			if (HFurn[houseid][i][fOpened])	return SendWarningMessage(playerid, "Ýlk önce kapýyý kapatýn.");

			if (!HFurn[houseid][i][fLocked])
			{
				InfoMSG(playerid, "Kapi ~r~kilitlendi", 3);
				HFurn[houseid][i][fLocked] = 1;
				return 1;
			}

			else
			{
				InfoMSG(playerid, "Kapi ~g~acildi", 3);
				HFurn[houseid][i][fLocked] = 0;
				return 1;
			}
		}
	}

	new biz_id;
	if ((biz_id = GetNearInsideBiz(playerid)) != -1 && (BizInfo[biz_id][bizOwnerID] == PlayerInfo[playerid][pID] || BizInfo[biz_id][bizID] == PlayerInfo[playerid][pWorkOn]))
	{
	    for(new i = 0; i < MAX_FURNITURE; i++)
		{
			if (!IsPlayerInRangeOfPoint(playerid, 2.0, BFurn[biz_id][i][fPosX], BFurn[biz_id][i][fPosY], BFurn[biz_id][i][fPosZ]) || !BFurn[biz_id][i][fOn] || !BFurn[biz_id][i][fModel])
   			{
				continue;
			}

			if (BFurn[biz_id][i][fOpened])	return SendWarningMessage(playerid,"Ýlk önce kapýyý kapatýn.");

			if (!BFurn[biz_id][i][fLocked])
			{
				InfoMSG(playerid, "Kapý ~r~kilitlendi", 3);
				BFurn[biz_id][i][fLocked] = 1;
				return 1;
			}

			else
			{
				InfoMSG(playerid, "Kapi ~g~acildi", 3);
				BFurn[houseid][i][fLocked] = 0;
				return 1;
			}
		}
	}

	new garage = GetNearInsideGarage(playerid);
	if (garage != -1) {
		if (GarageInfo[garage][garageOwner] == PlayerInfo[playerid][pID]
		|| (GarageInfo[garage][garageHouse] && HouseInfo[GarageInfo[garage][garageHouse]][hID] == PlayerInfo[playerid][pRentKey])
		|| (GarageInfo[garage][garageBiz] && BizInfo[GarageInfo[garage][garageBiz]][bizID] == PlayerInfo[playerid][pWorkOn]))
		{
			for(new i = 0; i < MAX_FURNITURE; i++)
			{
				if (!IsPlayerInRangeOfPoint(playerid, 2.0, GFurn[garage][i][fPosX], GFurn[garage][i][fPosY], GFurn[garage][i][fPosZ]) || !GFurn[garage][i][fOn] || !GFurn[garage][i][fModel])
				{
					continue;
				}

				if (GFurn[garage][i][fOpened])	return SendWarningMessage(playerid,"Ýlk önce kapýyý kapatýn.");

				if (!GFurn[garage][i][fLocked])
				{
					InfoMSG(playerid, "Kapi ~r~kilitlendi", 3);
					GFurn[garage][i][fLocked] = 1;
					return 1;
				}

				else
				{
					InfoMSG(playerid, "Kapi ~g~acildi", 3);
					GFurn[houseid][i][fLocked] = 0;
					return 1;
				}
			}
		}
	}

	if ((houseid = GetNearHouse(playerid, 15.0, 1.2)) != -1)
	{
		if (HouseInfo[houseid][hDDoor] > 0) return SendWarningMessage(playerid, "Kapý kýrýk.");

		if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID] && HouseInfo[houseid][hID] != PlayerInfo[playerid][pRentKey])
		    return GameTextForPlayer(playerid, "~r~ANAHTARINIZ BULUNMUYOR!", 5000, 6);

        if (HouseInfo[houseid][hLocked] == 1)
		{
			HouseInfo[houseid][hLocked] = 0;
			GameTextForPlayer(playerid, "~w~Kapi ~g~acildi", 5000, 3);
			PlaySound(playerid, 1145);
            DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
            HouseInfo[houseid][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 100.0);
			return 1;
		}
		if (HouseInfo[houseid][hLocked] == 0)
		{
			HouseInfo[houseid][hLocked] = 1;
			GameTextForPlayer(playerid, "~w~Kapi ~r~kapatildi", 5000, 3);
			PlaySound(playerid, 1145);
            DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
            HouseInfo[houseid][hPickup] = CreateDynamicPickup(19522, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 100.0);
			return 1;
		}
	}

	return 1;
}

alias:mulklerim("evlerim", "isyerlerim", "isyerilerim");
CMD:mulklerim(playerid, params[])
{
	return ShowProperty(playerid, playerid);
}

alias:ozelmodel("ozelskin", "donatorskin");
CMD:ozelmodel(playerid)
{

	new sorgu[65];
	if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0) return SendErrorMessage(playerid, "Kýyafet giymek için uygun noktada deðilsin. (Interiorlarda giyebilirsin)");
	mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT * FROM donator_skinler WHERE sahip = '%d'", PlayerInfo[playerid][pAccID]);
	mysql_query(dbHandle, sorgu);
	if(!cache_num_rows()) return SendErrorMessage(playerid, "Herhangi bir kýyafetiniz bulunmuyor.");
	new string[1000], skinid;
	for(new i = 0; i < cache_num_rows(); i++) cache_get_value_int(i, "skinid", skinid), format(string, sizeof string, "%s%d\t\n", string, skinid);
	Dialog_Show(playerid, DIALOG_KIYAFETDOLAP, DIALOG_STYLE_PREVIEW_MODEL, "> Ozel Modellerim", string, "Sec", "Kapat");
	return 1;
}

CMD:kiyafetlerim(playerid, params[])
{
    if (PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Bu komutu iþbaþýndayken kullanamazsýn.");

    new id, used;

	if ((id = GetNearInsideHouse(playerid)) != -1)
	{
		if (HouseInfo[id][hOwnerID] != PlayerInfo[playerid][pID] && PlayerInfo[playerid][pRentKey] != HouseInfo[id][hID])	return SendErrorMessage(playerid, "Bu ev size ait deðil veya kiracýsý deðilsiniz.");
		if (!HouseInfo[id][hCupboard])																						return SendErrorMessage(playerid, "Bu evde gardrop bulunmuyor.");

		used = 1;
	}

	if (!used && (id = GetNearInsideBiz(playerid)) != -1)
	{
		if (BizInfo[id][bizType] != BIZ_CLOTHES)	return SendErrorMessage(playerid, "Herhangi bir kýyafet dükkanýnda deðilsiniz.");

		used = 1;
	}

	if (!used) return SendErrorMessage(playerid, "Bu komutu kullanmak için kýyafet maðazasýnda veya evinizde olmalýsýnýz.");

	new mes[128];

	for(new i; i != 3; i++)
	{
 		if (!PlayerInfo[playerid][pTog][i])	strcat(mes, "\n[Yerleþtir]");
   		else								format(mes, sizeof(mes), "%s\n[Kýyafet seçimi #%i]", mes, PlayerInfo[playerid][pTog][i]);
	}

	Dialog_Show(playerid, EditClothes, DIALOG_STYLE_LIST, "Slot seçiniz...", mes, "Seç", "Ýptal");
	return 1;
}

alias:kapitikla("kapical", "kapiyatikla", "kapiyavur");
CMD:kapitikla(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] == 2)	return SendErrorMessage(playerid, "Yaralýyken kapýya vuramazsýn.");

	for(new i = 0; i < MAX_HOUSES; i++)
	{
	    if (!HouseInfo[i][hID] || !IsPlayerOutsideHouse(playerid, i, 2.0)) continue;

		foreach(new p : Player)
		{
		    if (!IsPlayerInsideHouse(p, i)) continue;

  			SendClientMessageEx(p, COLOR_PURPLE, "* [Kapý] Birisi kapýyý týklatýyor! (( %s ))", GetNameWithMask(playerid));
		}

		pc_cmd_me(playerid, "evin kapýsýný çalar.");
		return 1;
	}

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if (!BizInfo[i][bizID] || !IsPlayerBizOutside(playerid, i, 2.0)) continue;

		foreach(new p : Player)
		{
		    if (!IsPlayerBizInside(p, i)) continue;

			SendClientMessageEx(p, COLOR_PURPLE, "* [Kapý] Birisi kapýyý týklatýyor! (( %s ))", GetNameWithMask(playerid));
		}

		pc_cmd_me(playerid, "isyerinin kapýsýný çalar.");
		return 1;
	}
	return 1;
}

Ap_OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        for(new i = 0; i != MAX_APART; i++)
		{
			if (ApartInfo[i][aApartOn] == 0 || pickupid != ApartInfo[i][aPickup]) continue;

			if (pTemp[playerid][pPizzaBoy] && pTemp[playerid][pPizzaBoy]-1 == i && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
			{
			    pTemp[playerid][pPizzaBoy] = 0;
				#define PIZZABOY_COST 30
				new bahsis = randomEx(1, 30), ucret = bahsis + PIZZABOY_COST;
			    SendSyntaxMessage(playerid, "Pizza teslim edildi. Paket ücreti olarak %d$ bahþiþ olarak %d$ kazandýn.", PIZZABOY_COST, bahsis);
                SendServerMessage(playerid, "Tekrar /kurye yazarak yeni teslimat noktasý belirleyebilirsin.");
			    GiveCash(playerid, ucret);
                RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				return 1;
			}

            new label_title[128], label_str1[128], label_str2[128];

			format(label_title, 128, "~w~Apartman: ~y~%s", GetApartmentZone(i, 2));
			format(label_str1, 128, "~w~Giris yapmak icin ~y~/giris~w~ yaz veya ~y~'Y' ~w~tusuna bas.");
			format(label_str2, 128, "~w~( ID: %d )", i);
			CreateLableText(playerid, label_title, label_str1, label_str2, " ");
			return 1;
		}
    }
    return 1;
}

Apart_OnGameModeInit()
{
    mysql_tquery(dbHandle, "SELECT * FROM `apartment`", "LoadDynamicApartment");
    return 1;
}

forward LoadDynamicApartment();
forward OnApartInsert(ApartID);
forward OnApartRemove(apartid);

public LoadDynamicApartment()
{
    new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows) return print("[Apartmanlar] Herhangi bir kayýt bulunamadý.");

	for(new i; i < rows; i++)
	{
        cache_get_value_int(i, "id", ApartInfo[i][aID]);
        cache_get_value_float(i, "posx", ApartInfo[i][aPosX]);
        cache_get_value_float(i, "posy", ApartInfo[i][aPosY]);
        cache_get_value_float(i, "posz", ApartInfo[i][aPosZ]);
        cache_get_value_float(i, "exitx", ApartInfo[i][aExitX]);
        cache_get_value_float(i, "exity", ApartInfo[i][aExitY]);
        cache_get_value_float(i, "exitz", ApartInfo[i][aExitZ]);
        cache_get_value_int(i, "exitint", ApartInfo[i][aExitInt]);
        cache_get_value_int(i, "exitvw", ApartInfo[i][aExitVW]);
        cache_get_value_int(i, "posint", ApartInfo[i][aPosInt]);
        cache_get_value_int(i, "posvw", ApartInfo[i][aPosVW]);


		if (ApartInfo[i][aExitVW] == 0) ApartInfo[i][aExitVW] = i + 1000;

		ApartInfo[i][aApartOn] = 1;
		ApartInfo[i][aPickup] =
		ApartInfo[i][aPickup] = CreateDynamicPickup(1314, 1, ApartInfo[i][aPosX], ApartInfo[i][aPosY], ApartInfo[i][aPosZ], ApartInfo[i][aPosVW], ApartInfo[i][aPosInt], -1, 50.0);
		total++;
	}
	printf("[Apartmanlar] Satýr - %i. Yüklenen - %i. Süre: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public OnApartInsert(ApartID)
{
	ApartInfo[ApartID][aID] = cache_insert_id();
	return 1;
}

public OnApartRemove(apartid)
{
    ApartInfo[apartid][aID] = 0;
	ApartInfo[apartid][aPosX] = 0.0000;
	ApartInfo[apartid][aPosY] = 0.0000;
	ApartInfo[apartid][aPosZ] = 0.0000;
	ApartInfo[apartid][aExitX] = 0.0000;
	ApartInfo[apartid][aExitY] = 0.0000;
	ApartInfo[apartid][aExitZ] = 0.0000;
	ApartInfo[apartid][aExitInt] = 0;
	ApartInfo[apartid][aExitVW] = 0;
	ApartInfo[apartid][aPosInt] = 0;
	ApartInfo[apartid][aPosVW] = 0;
	ApartInfo[apartid][aApartOn] = 0;
	return 1;
}

AddApartToFile(apartid, Float:x, Float:y, Float:z, interior, vw)
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `apartment` (posx, posy, posz, posint, posvw) VALUES (%f, %f, %f, %i, %i)", x, y, z, interior, vw);
	mysql_tquery(dbHandle, query, "OnApartInsert", "d", apartid);
	return 1;
}

SetAparmentInterior(playerid, apartid, int)
{
	ApartInfo[apartid][aExitX] = E_APARTINT[int][aPosX];
	ApartInfo[apartid][aExitY] = E_APARTINT[int][aPosY];
	ApartInfo[apartid][aExitZ] = E_APARTINT[int][aPosZ];
	ApartInfo[apartid][aExitInt] = E_APARTINT[int][aInt];
	SendSyntaxMessage(playerid, "Apartmanlar [ID: %i] - Interior ismi: %s", apartid, E_APARTINT[int][aName]);
	Save_Apart(apartid);
	return 1;
}

GetApartmentZone(apartment, type = 0)
{
	new string[70], zone[28];

	GetZone(ApartInfo[apartment][aPosX], ApartInfo[apartment][aPosY], zone, sizeof(zone));

	format(string, sizeof(string), "%s %i", zone, 35+apartment);
	return string;
}


Save_Apart(apartid)
{
	static const query_size[] = "UPDATE `apartment` SET `exitint`=%i,`exitvw`=%i,`posint`=%i,`posvw`=%i,`exitx`=%f,`exity`=%f,`exitz`=%f,`posx`=%f,`posy`=%f,`posz`=%f WHERE `id` = %i";
    new query[sizeof(query_size) - 22 + (11 * 11)];

	format(query, sizeof(query), query_size,
	ApartInfo[apartid][aExitInt], ApartInfo[apartid][aExitVW], ApartInfo[apartid][aPosInt], ApartInfo[apartid][aPosVW], ApartInfo[apartid][aExitX], ApartInfo[apartid][aExitY], ApartInfo[apartid][aExitZ], ApartInfo[apartid][aPosX],
	ApartInfo[apartid][aPosY], ApartInfo[apartid][aPosZ], ApartInfo[apartid][aID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

IsPlayerApartmentOutside(playerid, i, Float: radius = 5.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, ApartInfo[i][aPosX], ApartInfo[i][aPosY], ApartInfo[i][aPosZ]) && GetWorld(playerid) == ApartInfo[i][aPosVW] && GetInterior(playerid) == ApartInfo[i][aPosInt]) ? (1) : (0);
}

IsPlayerApartmentInside(playerid, i, Float: radius = 60.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, ApartInfo[i][aExitX], ApartInfo[i][aExitY], ApartInfo[i][aExitZ]) && GetWorld(playerid) == ApartInfo[i][aExitVW] && GetInterior(playerid) == ApartInfo[i][aExitInt]) ? (1) : (0);
}

GetNearApartment(playerid)
{
    new aapart = GetNearApartmentInside(playerid);

	if (aapart == -1)		aapart = GetNearApartmentOutside(playerid);
	if (aapart != -1)		return aapart;

	return -1;
}

GetNearApartmentOutside(playerid)
{
    for(new i; i != MAX_APART; i++)
	{
	    if (ApartInfo[i][aApartOn] == 0) continue;
	    if (IsPlayerInRangeOfPoint(playerid, 3.0, ApartInfo[i][aPosX], ApartInfo[i][aPosY], ApartInfo[i][aPosZ]) && GetWorld(playerid) == ApartInfo[i][aPosVW] && GetInterior(playerid) == ApartInfo[i][aPosInt]) return i;
	}
	return -1;
}

GetNearApartmentInside(playerid, Float: radius = 60.0)
{
	if (pTemp[playerid][pApartEntered] != -1 && IsPlayerApartmentInside(playerid, pTemp[playerid][pApartEntered], radius)) return pTemp[playerid][pApartEntered];

    for(new i; i != MAX_APART; i++)
	{
	    if (ApartInfo[i][aApartOn] == 0) continue;
	    if (IsPlayerInRangeOfPoint(playerid, radius, ApartInfo[i][aExitX], ApartInfo[i][aExitY], ApartInfo[i][aExitZ]) && GetWorld(playerid) == ApartInfo[i][aExitVW] && GetInterior(playerid) == ApartInfo[i][aExitInt])
		{
		    pTemp[playerid][pApartEntered] = i;
			return i;
		}
	}
	return -1;
}

GetNextApartID()
{
	for(new i; i != MAX_APART; i++)
	{
	    if (ApartInfo[i][aApartOn] == 0) return i;
	}
	return -1;
}

Biz_OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    for(new i = 0; i < MAX_BIZ; i++)
	{
	    if (pickupid != BizInfo[i][bizPickUp] || 0 == BizInfo[i][bizID]) continue;

		if (pTemp[playerid][pTruckerOn] && pTemp[playerid][pTruckerOn]-1 == i && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
		{
			if(gettime() - pTemp[playerid][pTruckerTime] < 5) return KickLine(playerid, "Þüpheli teslimattan dolayý oyundan atýldýnýz! Tekrardan giriþ yapýn. Kod: 101");

			new ucret = pTemp[playerid][pTruckerPrice];
			new bahsis = randomEx(1, 30);
			new kariyer = PlayerInfo[playerid][pCareer];
			new verilecek = ucret + bahsis + kariyer;

			SendSyntaxMessage(playerid, "Teslimat ücreti olarak %d$, bahþiþ olarak %d$, kariyer bonusu olarak %d$ kazandýn.", pTemp[playerid][pTruckerPrice], bahsis, kariyer);
            SendServerMessage(playerid, "Tekrar /tasimacilik yazarak yeni teslimat noktasý belirleyebilirsin.");
			GiveCash(playerid, verilecek);
            RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

			pTemp[playerid][pTruckerOn] = 0;
			pTemp[playerid][pTruckerPrice] = 0;
			pTemp[playerid][pTruckerTime] = 0;
			return 1;
		}
		if (BizInfo[i][bizFreeze] == 1)
	    {
			new label_title[128], label_str1[128], label_str2[128], label_str3[128];

			format(label_title, 128, "~y~%s", BizInfo[i][bizName]);
			format(label_str1, 128, "~w~Bu isletme ~y~devlete~w~ ait.");
			format(label_str2, 128, "~w~Giris yapmak icin ~y~/giris~w~ yaz veya ~y~'Y' ~w~tusuna bas. - Giris ucreti: $%d", BizInfo[i][bizEntrance]);
			format(label_str3, 128, "~w~( ID: %d )", i);

			CreateLableText(playerid, label_title, label_str1, label_str2, label_str3);
			return 1;
	    }
	    else
	    {
			new label_title[128], label_str1[128], label_str2[128], label_str3[128];
	        if (BizInfo[i][bizOwnerID] == 0)
			{
				format(label_title, 128, "~w~%s", BizInfo[i][bizName]);
				format(label_str1, 128, "~w~Satilik: ~g~$%d", BizInfo[i][bizPrice]);
				format(label_str2, 128, "~w~Satin almak icin ~y~/isyeri satinal~w~ yaz veya ~y~'Y' ~w~tusuna bas.");
				format(label_str3, 128, "~w~( ID: %d )", i);
			}
			else
			{
				format(label_title, 128, "~w~%s", BizInfo[i][bizName]);
				format(label_str1, 128, "~w~Bu isletme %s adli kisiye ait.", BizInfo[i][bizOwner]);
				format(label_str2, 128, "~w~Giris yapmak icin ~y~/giris~w~ yaz veya ~y~'Y' ~w~tusuna bas. - Giris ucreti: ~g~$%d", BizInfo[i][bizEntrance]);
				format(label_str3, 128, "~w~( ID: %d )", i);
			}

			CreateLableText(playerid, label_title, label_str1, label_str2, label_str3);
			return 1;
	    }
	}
    return 1;
}

Biz_OnGameModeInit()
{
    return mysql_tquery(dbHandle, "SELECT *, (SELECT name FROM users WHERE id = business.owner) as ownername, (SELECT last_login FROM users WHERE id = business.owner) as last_login FROM `business`", "LoadDynamicBiz");
}

Fo_OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    for(new i; i != 4; i++)
	{
	    if (playertextid != TD_restaurant_prod[playerid][i + 4])	continue;

        RestaurantMenuHide(playerid);

        if (pTemp[playerid][pFoodStand] != 0 || IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))	return SendWarningMessage(playerid, "Elleriniz dolu.");

		new bizid;

		if ((bizid = GetNearInsideBiz(playerid)) == -1)	return SendErrorMessage(playerid, "Ýsyerinin içerisinde olmalýsýnýz.");

		if (BizInfo[bizid][bizType] != BIZ_PIZZA && BizInfo[bizid][bizType] != BIZ_CLUCKIN && BizInfo[bizid][bizType] != BIZ_BURGER && BizInfo[bizid][bizType] != BIZ_DONUT)
		{
			return SendErrorMessage(playerid, "Restoranda deðilsiniz.");
		}

		new type = BizInfo[bizid][bizType] - BIZ_PIZZA;

		if (GetCash(playerid) < BizInfo[bizid][bizProductPrice][i])			return SendNotCash(playerid);
		if (BizInfo[bizid][bizOwnerID] != 0 && !BizInfo[bizid][bizProduct])	return SendErrorMessage(playerid, "Bu isyerinde yeterince ürün yok.");

        pc_cmd_server_ame(playerid, "yemek sipariþi verir.");

        SendSyntaxMessage(playerid, "{FF6347}%s{FFFFFF} adlý yemeði sipariþ verdiniz ve {FF6347}$%s{FFFFFF} ödediniz.", name_order[type][i], FormatNumber(BizInfo[bizid][bizProductPrice][i]));
		SendSyntaxMessage(playerid, "{FF6347}/yemek tepsiyerlestir{FFFFFF} ile yemeði masaya koyabilir veya {FF6347}/yemek cop{FFFFFF} ile çöpe atabilirsiniz.");

		GiveCash(playerid, - BizInfo[bizid][bizProductPrice][i]);

		if (BizInfo[bizid][bizOwnerID] != 0)
		{
			BizInfo[bizid][bizProduct]--;
			GiveBizCash(bizid, BizInfo[bizid][bizProductPrice][i]);
		}

		OnPlayAnim(playerid,"CARRY","crry_prtial",4.1,1,1,1,1,1);
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, model_order[type][i], 5, 0.091998, 0.021999, 0.409, -104.9, 27.6, 0, 1, 1, 1);
		pTemp[playerid][pFoodStand] = model_order[type][i];

		new Float: health;

		if (AntiCheatGetHealth(playerid, health))	PlayerInfo[playerid][pHealth] = health + 30.0 + (i * 10.0);
		if (health + 30.0 + (i * 10.0) > 150.0)		PlayerInfo[playerid][pHealth] = 150.0;

		return 1;
	}
    return 1;
}

Food_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;

	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

    if (GetPVarInt(playerid, #edit_food) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
	    new id = GetPVarInt(playerid, #edit_food)-1;

	    DeletePVar(playerid, #edit_food);

	    if (GetDistanceBetweenPoints(x, y, z, FoodDrop[id][foodPosX], FoodDrop[id][foodPosY], FoodDrop[id][foodPosZ]) > 10.0)
	    {
     		SetDynamicObjectPos(objectid, FoodDrop[id][foodPosX], FoodDrop[id][foodPosY], FoodDrop[id][foodPosZ]);
	        return SendErrorMessage(playerid, "Düzenlediðiniz pozisyon sizden çok uzakta.");
	    }

	    if (objectid != FoodDrop[id][foodObject])	return SendErrorMessage(playerid, "Objeyi düzenlerken hata oluþtu.");
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);

        GetDynamicObjectPos(objectid, FoodDrop[id][foodPosX], FoodDrop[id][foodPosY], FoodDrop[id][foodPosZ]);
	    return 1;
	}
	return 1;
}
this::LoadDynamicBiz()
{
    new rows = cache_num_rows(), time = GetTickCount(), total, query[256];

	if (!rows) return print("[Biz] Kayit bulunamadi.");

	for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "id", BizInfo[i][bizID]);
		cache_get_value_float(i, "posx", BizInfo[i][bizPosX]);
		cache_get_value_float(i, "posy", BizInfo[i][bizPosY]);
		cache_get_value_float(i, "posz", BizInfo[i][bizPosZ]);
		cache_get_value_float(i, "exitx", BizInfo[i][bizExitX]);
		cache_get_value_float(i, "exity", BizInfo[i][bizExitY]);
		cache_get_value_float(i, "exitz", BizInfo[i][bizExitZ]);
		cache_get_value(i, "name", BizInfo[i][bizName], 32);
		cache_get_value(i, "entermsg", BizInfo[i][bizMes], 128);
		cache_get_value_int(i, "owner", BizInfo[i][bizOwnerID]);
		cache_get_value_int(i, "locked", BizInfo[i][bizLocked]);
		cache_get_value_int(i, "price", BizInfo[i][bizPrice]);
		cache_get_value_int(i, "freeze", BizInfo[i][bizFreeze]);
		cache_get_value_int(i, "levelbuy", BizInfo[i][bizLevelbuy]);
		cache_get_value_int(i, "exitint", BizInfo[i][bizExitInt]);
		cache_get_value_int(i, "exitvw", BizInfo[i][bizExitVW]);
		cache_get_value_int(i, "cash", BizInfo[i][bizCash]);
		cache_get_value_int(i, "type", BizInfo[i][bizType]),
		cache_get_value_int(i, "entrance", BizInfo[i][bizEntrance]);
	    cache_get_value_int(i, "radio", BizInfo[i][bizRadio]);
		cache_get_value_int(i, "ddoor", BizInfo[i][bizDDoor]);
		cache_get_value_int(i, "posint", BizInfo[i][bizPosInt]);
		cache_get_value_int(i, "posvw", BizInfo[i][bizPosVW]);
		cache_get_value_float(i, "spawnX", BizInfo[i][bizSpawn][0]);
		cache_get_value_float(i, "spawnY", BizInfo[i][bizSpawn][1]);
		cache_get_value_float(i, "spawnZ", BizInfo[i][bizSpawn][2]);
		cache_get_value_float(i, "spawnR", BizInfo[i][bizSpawn][3]);
		cache_get_value_int(i, "spawnInt", BizInfo[i][bizSpawnInt]);
		cache_get_value_int(i, "spawnVW", BizInfo[i][bizSpawnVW]);
		cache_get_value_int(i, "product", BizInfo[i][bizProduct]);
		cache_get_value_int(i, "buy_price", BizInfo[i][bizBuyPrice]);
		BizInfo[i][bizLabelDDoor] = Text3D:INVALID_3DTEXT_ID;
		BizInfo[i][bizDurum] = true;
		new
			prprice[16]
		;

		new type;
		switch(BizInfo[i][bizType])
		{
			case BIZ_PIZZA:		type = 0;
			case BIZ_CLUCKIN:	type = 1;
			case BIZ_BURGER:	type = 2;
			case BIZ_DONUT:		type = 3;
			case BIZ_STORE:		type = 4;
			case BIZ_BAR:		type = 5;
			case BIZ_PHARMACY:	type = 6;
		}

		new modelid;
		switch(BizInfo[i][bizType])
		{
			case BIZ_PIZZA:			modelid = 1582;
			case BIZ_BAR:       	modelid = 1669;
			case BIZ_ATTACH:    	modelid = 19026;
			case BIZ_PHARMACY:		modelid = 11738;
			case BIZ_CLOTHES:   	modelid = 1275;
			case BIZ_LICENSE:  		modelid = 19792;
			case BIZ_GAS_STATION: 	modelid = 1650;
			case BIZ_TUNING: 		modelid = 19921;
			case BIZ_PAYNSPRAY: 	modelid = 19921;
			default:      		 	modelid = 1239;
		}

		if (BizInfo[i][bizOwnerID] == 0 && BizInfo[i][bizFreeze] == 0)
		{
			modelid = 19470;
		}

		for(new j = 0; j < max_product[type]; j++)
		{
			format(prprice, sizeof(prprice), "productprice%i", j);
			cache_get_value_name_int(i, prprice, BizInfo[i][bizProductPrice][j]);
			if (BizInfo[i][bizProductPrice][j] < biz_prices[type][j]) BizInfo[i][bizProductPrice][j] = biz_prices[type][j];
		}


		cache_get_value(i, "ownername", BizInfo[i][bizOwner], MAX_PLAYER_NAME);
		strreplace(BizInfo[i][bizOwner], '_', ' ');

	    BizInfo[i][bizPickUp] = CreateDynamicPickup(modelid, 1, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ], BizInfo[i][bizPosVW], BizInfo[i][bizPosInt], -1, 100.0);
	    UpdateBusinessDoor(i);

		format(query, sizeof(query), "SELECT * FROM `furnitures` WHERE `building`=%i AND `bType`=1", BizInfo[i][bizID]);
		mysql_tquery(dbHandle, query, "OnBFurnsLoad", "i", i);

		mysql_format(dbHandle, query, sizeof(query), "SELECT `id`, `name`, `position` FROM `users` WHERE `workon`=%i LIMIT 10", BizInfo[i][bizID]);
		mysql_tquery(dbHandle, query, "LoadBusinessWorkers", "i", i);

		if (BizInfo[i][bizOwnerID] != 0) {
			mysql_format(dbHandle, query, sizeof(query), "SELECT accountid,cash,last_login FROM `users` WHERE id=%i LIMIT 1", BizInfo[i][bizOwnerID]);
			mysql_tquery(dbHandle, query, "BizCheckOwner", "ii", i, BizInfo[i][bizID]);
		}

        total++;
	}
	printf("[Biz] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}


this::BizCheckOwner(bizid, dbid)
{
	if (!cache_num_rows()) return printf("[SQL ERROR] Isyeri [db ID:%i] sahibi users tablosunda bulunamadý!", dbid);

	new accountid,
		money,
		last_login,
		query[256];

	cache_get_value_int(0, "accountid", accountid);
	cache_get_value_int(0, "cash", money);
	cache_get_value_int(0, "last_login", last_login);

	//if (last_login < gettime()-(60*60*24)*21) {
		//mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `cash`=%i WHERE id=%i LIMIT 1", money+floatround(BizInfo[bizid][bizPrice]/2)/*+GetFurniturePrice(1, i)*/+BizInfo[bizid][bizCash], BizInfo[bizid][bizOwnerID]);
		//mysql_query(dbHandle, query);
/*
		format(query, sizeof(query), "Business sold out automatically [B_MYSQL: %i] player %s [MYSQL: %i]", BizInfo[bizid][bizID], BizInfo[bizid][bizOwner], BizInfo[bizid][bizOwnerID]);
		insert_log(query, PROPERTY_LOG, 8, accountid);
		Sell_Business(bizid);
	}*/
	return 1;
}

this::LoadBusinessWorkers(bizid)
{
	if (!cache_num_rows())	return 1;

	for(new i; i < cache_num_rows(); i++)
	{
		cache_get_value_int(i, "id", BizWorkers[bizid][i][bizJobOn]);
		cache_get_value(i, "position", BizWorkers[bizid][i][bizPosition], 24);
		cache_get_value(i, "name", BizWorkers[bizid][i][bizWorker], 24);
	}

	return 1;
}

this::OnBFurnsLoad(bizid)
{
	if (!cache_num_rows())	return 1;

	new tid;

	for(new i; i < cache_num_rows(); i++)
	{
		cache_get_value_index_int(i, 0, BFurn[bizid][i][fID]);
	    cache_get_value_index_int(i, 1, BFurn[bizid][i][fModel]);
		cache_get_value_index(i, 2, BFurn[bizid][i][fName], 64);
		//BFurn[bizid][i][fBuildingID] = bizid;
		cache_get_value_index_int(i, 5, BFurn[bizid][i][fInterior]);
		cache_get_value_index_int(i, 6, BFurn[bizid][i][fVirtualWorld]);
	    cache_get_value_index_int(i, 7, BFurn[bizid][i][fMarketPrice]);
		cache_get_value_index_float(i, 8, BFurn[bizid][i][fPosX]);
		cache_get_value_index_float(i, 9, BFurn[bizid][i][fPosY]);
		cache_get_value_index_float(i, 10, BFurn[bizid][i][fPosZ]);
		cache_get_value_index_float(i, 11, BFurn[bizid][i][fPosRX]);
		cache_get_value_index_float(i, 12, BFurn[bizid][i][fPosRY]);
		cache_get_value_index_float(i, 13, BFurn[bizid][i][fPosRZ]);
	    cache_get_value_index_int(i, 14, BFurn[bizid][i][fTexture][0]);
		cache_get_value_index_int(i, 15, BFurn[bizid][i][fTexture][1]);
		cache_get_value_index_int(i, 16, BFurn[bizid][i][fTexture][2]);
		cache_get_value_index_int(i, 17, BFurn[bizid][i][fTexture][3]);
		cache_get_value_index_int(i, 18, BFurn[bizid][i][fTexture][4]);
		cache_get_value_index_int(i, 19, BFurn[bizid][i][fCategory]);
		cache_get_value_index_int(i, 20, BFurn[bizid][i][ChemIdx]);

		BFurn[bizid][i][fOn] = 1;
		BFurn[bizid][i][fObject] = CreateDynamicObject(BFurn[bizid][i][fModel], BFurn[bizid][i][fPosX], BFurn[bizid][i][fPosY], BFurn[bizid][i][fPosZ], BFurn[bizid][i][fPosRX], BFurn[bizid][i][fPosRY], BFurn[bizid][i][fPosRZ], BFurn[bizid][i][fVirtualWorld], BFurn[bizid][i][fInterior]);

		for(new a; a != 5; a++)
		{
		    if (BFurn[bizid][i][fTexture][a] == -1) continue;

			tid = BFurn[bizid][i][fTexture][a];
			SetDynamicObjectMaterial(BFurn[bizid][i][fObject], a, ObjectTextures[tid][TModel], ObjectTextures[tid][TXDName], ObjectTextures[tid][TextureName], ObjectTextures[tid][MaterialColor]);
		}

		if (isHouseDoor(BFurn[bizid][i][fModel]))
		{
			BFurn[bizid][i][fLocked] = 1;
			BFurn[bizid][i][fOpened] = 0;
		}

		BizInfo[bizid][bFurniture]++;

		if (BFurn[bizid][i][fVirtualWorld] != BizInfo[bizid][bizExitVW]) BizInfo[bizid][bOutsideFurniture]++;

	}
	return 1;
}

this::OnBizInsert(businessID)
{
	return BizInfo[businessID][bizID] = cache_insert_id();
}

this::GivePlayerBizMoney(cash, ownerid)
{
	if (!cache_num_rows())	return 1;
    new bizcash;
	cache_get_value_int(0, "cash", bizcash);
	new player_cash = bizcash + cash;

    new query[256];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `cash` = %i WHERE `id` = %i", player_cash, ownerid);
	mysql_tquery(dbHandle, query);
	return 1;
}


AddBizToFile(bizid, level, price, freeze, type, name[], entermsg[], Float:x, Float:y, Float:z, Float:ex, Float:ey, Float:ez, posint, posvw, exitint, exitvw)
{
    new query[128 + 128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `business` (posx, posy, posz, exitx, exity, exitz, name, entermsg, price, freeze, levelbuy, type, posint, posvw, exitint, exitvw) VALUES (%f, %f, %f, %f, %f, %f, '%s', '%s', %i,%i,%i,%i,%i,%i,%i,%i)",
	x, y, z, ex, ey, ez, name, entermsg, price, freeze, level, type, posint, posvw, exitint, exitvw);
	mysql_tquery(dbHandle, query, "OnBizInsert", "d", bizid);
 	return 1;
}

SetBizInterior(playerid, bizid, id)
{
    BizInfo[bizid][bizExitX] = AdminTeles[id][telesPosX];
	BizInfo[bizid][bizExitY] = AdminTeles[id][telesPosY];
	BizInfo[bizid][bizExitZ] = AdminTeles[id][telesPosZ];
	BizInfo[bizid][bizExitInt] = AdminTeles[id][telesInt];
	SendSyntaxMessage(playerid, "Ýþyeri [ID: %i | Interior: %s", bizid, AdminTeles[id][telesMapName]);
	Save_Business(bizid);
	return 1;
}

Sell_Business(bizid)
{
    BizInfo[bizid][bizOwnerID] =
	BizInfo[bizid][bizLocked] =
	//BizInfo[bizid][bizRadio] =
	BizInfo[bizid][bizRadioOn] =
	//BizInfo[bizid][bizDDoor] =
	BizInfo[bizid][bizCash] =
	BizInfo[bizid][bizEntrance] = 0;
	strmid(BizInfo[bizid][bizOwner], "Hükümet", 0, strlen("Hükümet"), MAX_PLAYER_NAME);
	UpdateBusinessDoor(bizid);
	StopBusinessBoomBox(bizid);

	for(new i = 0; i != MAX_GARAGES; i++)
	{
	    if (!GarageInfo[i][garageID] || GarageInfo[i][garageBiz] != BizInfo[bizid][bizID]) continue;

        GarageInfo[i][garageOwner] = 0;

        new query[256];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `owner`='' WHERE `id`=%i", GarageInfo[i][garageID]);
		mysql_tquery(dbHandle, query);
	}

	Save_Business(bizid);
	return 1;
}

Save_Business(bizid)
{
    new query[3096];

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `business` SET `locked`=%i,`price`=%i,`freeze`=%i,`levelbuy`=%i,`exitint`=%i,`exitvw`=%i,`cash`=%i,`type`=%i,`entrance`=%i", BizInfo[bizid][bizLocked],
	BizInfo[bizid][bizPrice], BizInfo[bizid][bizFreeze], BizInfo[bizid][bizLevelbuy], BizInfo[bizid][bizExitInt], BizInfo[bizid][bizExitVW], BizInfo[bizid][bizCash], BizInfo[bizid][bizType], BizInfo[bizid][bizEntrance]);

	mysql_format(dbHandle,query, sizeof(query), "%s,`owner`=%i,`name`='%e',`entermsg`='%e',`posint`=%i,`posvw`=%i", query, BizInfo[bizid][bizOwnerID], BizInfo[bizid][bizName], BizInfo[bizid][bizMes], BizInfo[bizid][bizPosInt],
	BizInfo[bizid][bizPosVW]);

	mysql_format(dbHandle, query, sizeof(query), "%s,`posx`=%f,`posy`=%f,`posz`=%f,`exitx`=%f,`exity`=%f,`exitz`=%f,`radio`=%i", query, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ],
	BizInfo[bizid][bizExitX], BizInfo[bizid][bizExitY], BizInfo[bizid][bizExitZ], BizInfo[bizid][bizRadio]);

	mysql_format(dbHandle, query, sizeof(query), "%s,`ddoor`=%i,`product`=%i,`buy_price`=%i", query, BizInfo[bizid][bizDDoor], BizInfo[bizid][bizProduct], BizInfo[bizid][bizBuyPrice]);

	for(new i = 0; i < 12; i++)
	{
		mysql_format(dbHandle, query, sizeof(query), "%s,`productprice%i`=%i", query, i, BizInfo[bizid][bizProductPrice][i]);
	}

	mysql_format(dbHandle, query, sizeof(query), "%s WHERE `id`=%i", query, BizInfo[bizid][bizID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

UpdateBusinessDoor(bizid)
{
	if (IsValidDynamic3DTextLabel(BizInfo[bizid][bizLabelDDoor]))
	{
	    DestroyDynamic3DTextLabel(BizInfo[bizid][bizLabelDDoor]);
        BizInfo[bizid][bizLabelDDoor] = Text3D:INVALID_3DTEXT_ID;
	}
	if (!BizInfo[bizid][bizDDoor])	return 1;

    new door_str[][] =	{"KAPI AÇIK", "KAPI KIRIK"};

	BizInfo[bizid][bizLabelDDoor] = CreateDynamic3DTextLabel(door_str[BizInfo[bizid][bizDDoor]-1], COLOR_LIGHTRED, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BizInfo[bizid][bizPosVW], BizInfo[bizid][bizPosInt], -1, 100.0);
	return 1;
}

GetNextBizID()
{
	for(new i; i != MAX_BIZ; i++)
	{
	    if (BizInfo[i][bizID] == 0) return i;
	}
	return -1;
}

GetPlayerBizes(playerid)
{
	new total;

    for(new i; i != MAX_BIZ; i++)
	{
	    if (BizInfo[i][bizID] == 0 || BizInfo[i][bizOwnerID] != PlayerInfo[playerid][pID]) continue;

		total++;
	}
	return total;
}

GetMaxPlayerBiz(playerid)
{
	return 10;
}

GiveBizCash(bizid, cash)
{
	if (bizid < 0 || bizid > MAX_BIZ-1 || BizInfo[bizid][bizID] == 0 || BizInfo[bizid][bizOwnerID] == 0)	return 0;

	BizInfo[bizid][bizCash] += cash;

    SQL_SetInteger("business", "cash", BizInfo[bizid][bizCash], BizInfo[bizid][bizID]);
	SQL_SetInteger("business", "product", BizInfo[bizid][bizProduct], BizInfo[bizid][bizID]);
	return 1;
}

BuyGunMenu(playerid)
{
    if (PlayerInfo[playerid][pOnDuty])		return SendErrorMessage(playerid, "You cannot buy weapons on duty.");
    if (PlayerInfo[playerid][pWepLic] != 1)	return SendErrorMessage(playerid, "You don't have a gun license.");

    Dialog_Show(playerid, BuyGunMenu, DIALOG_STYLE_LIST, "Buying weapons", "{FFFFFF}Weapon\nAmmunition\nAdditional\n	\n{c7c7c7}Use /mermiyardim", ">>>", "Ýptal");
	return 1;
}

GetNearOutsideBiz(playerid, Float: radius = 3.0)
{
    for(new i; i != MAX_BIZ; i++)
	{
	    if (BizInfo[i][bizID] == 0) continue;
	    if (IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt]) return i;
	}
	return -1;
}

stock GetClosestTypeBiz(playerid, type, &Float:radius)
{
	new cl_ID = -1, Float:cl_Dist;
	radius = 9999.0;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if ( BizInfo[i][bizID] == 0 || BizInfo[i][bizType] != type ) continue;
		if ( (cl_Dist = GetPlayerDistanceToPointEx(playerid, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ])) < radius )
		{
		    cl_ID = i;
		    radius = cl_Dist;
		}
	}
	return cl_ID;
}

GetNearInsideBiz(playerid, Float: radius = 25.0)
{
	if (pTemp[playerid][pBizEntered] != -1 && IsPlayerBizInside(playerid, pTemp[playerid][pBizEntered], radius))	return pTemp[playerid][pBizEntered];

    for(new i; i != MAX_BIZ; i++)
	{
	    if (BizInfo[i][bizID] == 0) continue;
	    if (IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == BizInfo[i][bizExitVW] && GetInterior(playerid) == BizInfo[i][bizExitInt])
		{
		    pTemp[playerid][pBizEntered] = i;
			return i;
		}
	}
	return -1;
}

GetNearBiz(playerid, Float: radius_inside = 30.0, Float: radius_outside = 5.0)
{
    new bizid = GetNearInsideBiz(playerid, radius_inside);

	if (bizid == -1)		bizid = GetNearOutsideBiz(playerid, radius_outside);
	if (bizid != -1)		return bizid;

	return -1;
}

IsPlayerBizOutside(playerid, i, Float: radius = 5.0)
{
    return (BizInfo[i][bizID] != 0 && IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt]) ? (1) : (0);
}

IsPlayerBizInside(playerid, i, Float: radius = 50.0)
{
    return (BizInfo[i][bizID] != 0 && IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == BizInfo[i][bizExitVW] && GetInterior(playerid) == BizInfo[i][bizExitInt]) ? (1) : (0);
}

AZC_Nearest(playerid)
{
	new
		bizid = -1,
		vehicle = GetPlayerVehicleID(playerid),
		Float: radius = (IsABoat(vehicle))?(20.0):(10.0)
	;

    for(new i; i != MAX_BIZ; i++)
	{
	    if (!BizInfo[i][bizID] || BizInfo[i][bizType] != BIZ_GAS_STATION) continue;

	    if (IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt])
		{
		    bizid = i;
			return bizid;
		}
	}
	return bizid;
}

PAS_Nearest(playerid)
{
	new
		bizid = -1,
		vehicle = GetPlayerVehicleID(playerid),
		Float: radius = (IsABoat(vehicle))?(20.0):(10.0)
	;

    for(new i; i != MAX_BIZ; i++)
	{
	    if (!BizInfo[i][bizID] || BizInfo[i][bizType] != BIZ_PAYNSPRAY) continue;

	    if (IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt])
		{
		    bizid = i;
			return bizid;
		}
	}
	return bizid;
}

WorkSpace(bizid)
{
	for(new i = 0; i < MAX_WORK_SPACE; i++)
	{
		if (!BizWorkers[bizid][i][bizJobOn]) return i;
	}

	return -1;
}

RemoveAllWorkers(bizid)
{
	for(new listitem = 0; listitem < MAX_WORK_SPACE; listitem++)
	{
		SQL_SetString("users", "position", BizWorkers[bizid][listitem][bizPosition], BizWorkers[bizid][listitem][bizJobOn]);
		SQL_SetInteger("users", "workon", 0, BizWorkers[bizid][listitem][bizJobOn]);

		for(new i; i < GetPlayerPoolSize(); i++)
		{
			if (PlayerInfo[i][pID] == BizWorkers[bizid][listitem][bizJobOn])
			{
				SendSyntaxMessage(i, "%s adlý isyerinden kovuldun.", BizInfo[bizid][bizName]);
				PlayerInfo[i][pWorkOn] = 0;
				break;
			}
		}

		BizWorkers[bizid][listitem][bizWorker] = EOS;
		BizWorkers[bizid][listitem][bizPosition] = EOS;
		BizWorkers[bizid][listitem][bizJobOn] = 0;
	}
	return 1;
}

BizFurn(playerid)
{
	new bizid = GetNearBiz(playerid);
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID] && BizInfo[bizid][bizID] != pTemp[playerid][pBuildHouse])
		return SendErrorMessage(playerid, "Bu isyerinin dekorasyonunu düzenleme yetkin yok.");

	new title[32 + 33];
	format(title, sizeof(title), "{FFFFFF}%s adlý iþyerinin eþyalarý [ID:%i]", BizInfo[bizid][bizName], BizInfo[bizid][bizID]);

	pTemp[playerid][pFurniture] = bizid;
	pTemp[playerid][pFurnitureB] = 1;

	Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, title, "Eþya satýn al\nEþyayý düzenle\nTüm eþyalarý sat", "Seç", "Ýptal");
	return 1;
}

BizFurnCopy(playerid, building, slot)
{
	if (GetCash(playerid) < BFurn[building][slot][fMarketPrice])
		return SendNotCash(playerid);

    if (BFurn[building][slot][fCategory] == 28 && BizInfo[building][bOutsideFurniture] > 9)
		return SendErrorMessage(playerid, "Ýþyeri dýþýnda sadece 10 adet obje koyabilirsiniz.");

	new i = -1;
	for(new a; a < MAX_FURNITURE; a++)
	{
	    if (BFurn[building][a][fOn] != 0) continue;

   		i = a;
		break;
	}

	if (i == -1) return 1;

	//BFurn[building][i][fObject] = CreateDynamicObject(BFurn[building][slot][fModel], BFurn[building][slot][fPosX], BFurn[building][slot][fPosY], BFurn[building][slot][fPosZ], BFurn[building][slot][fPosRX], BFurn[building][slot][fPosRY], BFurn[building][slot][fPosRZ], BFurn[building][slot][fVirtualWorld], BFurn[building][slot][fInterior]);

	new tid[5];
    for(new b; b != 5; b++)
	{
		tid[b] = -1;
 		if (BFurn[building][slot][fTexture][b] != -1) tid[b] = BFurn[building][slot][fTexture][b];
	}

	new f_index = GetFurnitureIndex(BFurn[building][slot][fCategory], BFurn[building][slot][fModel]);
	SetPVarInt(playerid, "buy_furniture", 2);
	OnPlayerCallBuyFurniture(playerid, building, 1, i, BFurn[building][slot][fModel], BFurn[building][slot][fCategory], f_index, BFurn[building][slot][fPosX], BFurn[building][slot][fPosY], BFurn[building][slot][fPosZ], BFurn[building][slot][fPosRX], BFurn[building][slot][fPosRY], BFurn[building][slot][fPosRZ], tid[0], tid[1], tid[2], tid[3], tid[4]);
	return 1;
}

BizHandleSellFurn(playerid, building)
{
	new paycheck;

	for(new i; i < MAX_FURNITURE; i++)
	{
	    if (!BFurn[building][i][fID] || !BFurn[building][i][fOn]) continue;

	    paycheck += (BFurn[building][i][fMarketPrice] - (BFurn[building][i][fMarketPrice] & 2))  / 2;
	    BFurn[building][i][fID] =
	    BFurn[building][i][fOn] = 0;
	    DestroyDynamicObject(BFurn[building][i][fObject]);
	}

    BizInfo[building][bFurniture] =
    BizInfo[building][bOutsideFurniture] = 0;

   	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `furnitures` WHERE `building` = %i AND `bType` = 1", BizInfo[building][bizID]);
	mysql_tquery(dbHandle, query);

	SendSyntaxMessage(playerid, "Tüm eþyalarý sattýn ve eþyalarýn yarý fiyatýný aldýn: ${FFFF00}%i{FFFFFF}.", paycheck);
	GiveCash(playerid, paycheck);
	return 1;
}

CreateExplosionInBiz(building, idx, f)
{
	new count = 0;

	for(new i; i < MAX_FURNITURE; i++)
	{
		if (count > 5) break;

	    if (!BFurn[building][i][fOn] || !IsValidDynamicObject(BFurn[building][i][fObject])) continue;
		if (BFurn[building][i][fInterior] != BizInfo[building][bizExitInt] && BFurn[building][i][fVirtualWorld] != BizInfo[building][bizExitVW])	continue;
		if (GetDistanceBetweenPoints(BFurn[building][f][fPosX],BFurn[building][f][fPosY],BFurn[building][f][fPosZ],BFurn[building][i][fPosX],BFurn[building][i][fPosY],BFurn[building][i][fPosZ]) > 10.0) continue;
		if (!IsFurnitureFirable(BFurn[building][i][fCategory])) continue;

		new Float:fHitPosX = BFurn[building][i][fPosX],
			Float:fHitPosY = BFurn[building][i][fPosY],
			Float:fHitPosZ = BFurn[building][i][fPosZ],
			furnint = BFurn[building][i][fInterior],
			furnvw = BFurn[building][i][fVirtualWorld]
		;

		if (floatround(randomEx(0,100)) > 80) OnPlayerSellFurniture(0, building, i);
		count ++;

		new fireid = -1;
		for(new j; j != MAX_FIRES; j++)
		{
		    if (FiresInfo[j][fireOn] != 0) continue;

			fireid = j;
			break;
		}
		if (fireid == -1)	continue;

		FiresInfo[fireid][fireOn] = 1;
		FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, furnvw, furnint);
		FiresInfo[fireid][firePos][0] = fHitPosX;
		FiresInfo[fireid][firePos][1] = fHitPosY;
		FiresInfo[fireid][firePos][2] = fHitPosZ;
		FiresInfo[fireid][fireVW] = furnvw;
		FiresInfo[fireid][fireInt] = furnint;
		FiresInfo[fireid][fireHealth] = 100;
		FiresInfo[fireid][fireTimer] = 1800;

		FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, furnvw, furnint, -1, 100.0);
	}

	CreateDynamicExplosion(BFurn[building][f][fPosX],BFurn[building][f][fPosY],BFurn[building][f][fPosZ], 11, 10.0, BFurn[building][f][fVirtualWorld], BFurn[building][f][fInterior]);
	ClearFurnitureData(f, idx);

	new Float:fHitPosX = BizInfo[building][bizPosX],
		Float:fHitPosY = BizInfo[building][bizPosY],
		Float:fHitPosZ = BizInfo[building][bizPosZ],
		furnint = BizInfo[building][bizPosInt],
		furnvw = BizInfo[building][bizPosVW]
	;

	new fireid = -1;
	for(new j; j != MAX_FIRES; j++)
	{
		if (FiresInfo[j][fireOn] != 0) continue;

		fireid = j;
		break;
	}
	if (fireid == -1)	return 1;

	FiresInfo[fireid][fireOn] = 1;
	FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, furnvw, furnint);
	FiresInfo[fireid][firePos][0] = fHitPosX;
	FiresInfo[fireid][firePos][1] = fHitPosY;
	FiresInfo[fireid][firePos][2] = fHitPosZ;
	FiresInfo[fireid][fireVW] = furnvw;
	FiresInfo[fireid][fireInt] = furnint;
	FiresInfo[fireid][fireHealth] = 100;
	FiresInfo[fireid][fireTimer] = 1800;

	FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, furnvw, furnint, -1, 100.0);

	return 1;
}

CreateFireInBiz(building)
{
	new count = 0;

	new Float:fHitPosX = BizInfo[building][bizPosX],
		Float:fHitPosY = BizInfo[building][bizPosY],
		Float:fHitPosZ = BizInfo[building][bizPosZ],
		furnint = BizInfo[building][bizPosInt],
		furnvw = BizInfo[building][bizPosVW]
	;

	new fireid = -1;
	for(new j; j != MAX_FIRES; j++)
	{
		if (FiresInfo[j][fireOn] != 0) continue;

		fireid = j;
		break;
	}
	if (fireid == -1)	return 1;

	FiresInfo[fireid][fireOn] = 1;
	FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, furnvw, furnint);
	FiresInfo[fireid][firePos][0] = fHitPosX;
	FiresInfo[fireid][firePos][1] = fHitPosY;
	FiresInfo[fireid][firePos][2] = fHitPosZ;
	FiresInfo[fireid][fireVW] = furnvw;
	FiresInfo[fireid][fireInt] = furnint;
	FiresInfo[fireid][fireHealth] = 100;
	FiresInfo[fireid][fireTimer] = 1800;

	FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, furnvw, furnint, -1, 100.0);

	fHitPosX = BizInfo[building][bizExitX];
	fHitPosY = BizInfo[building][bizExitY];
	fHitPosZ = BizInfo[building][bizExitZ];

	BizInfo[building][bFireTimer] = gettime()+3600;

	for(new i; i < MAX_FURNITURE; i++)
	{
		if (count > 5) break;

	    if (!BFurn[building][i][fOn] || !IsValidDynamicObject(BFurn[building][i][fObject])) continue;
		if (BFurn[building][i][fInterior] != BizInfo[building][bizExitInt] && BFurn[building][i][fVirtualWorld] != BizInfo[building][bizExitVW])	continue;
		if (GetDistanceBetweenPoints(fHitPosX,fHitPosY,fHitPosZ,BFurn[building][i][fPosX],BFurn[building][i][fPosY],BFurn[building][i][fPosZ]) > 10.0) continue;
		if (!IsFurnitureFirable(BFurn[building][i][fCategory])) continue;

		fHitPosX = BFurn[building][i][fPosX];
		fHitPosY = BFurn[building][i][fPosY];
		fHitPosZ = BFurn[building][i][fPosZ];
		furnint = BFurn[building][i][fInterior];
		furnvw = BFurn[building][i][fVirtualWorld];

		count++;

		for(new j; j != MAX_FIRES; j++)
		{
		    if (FiresInfo[j][fireOn] != 0) continue;

			fireid = j;
			break;
		}
		if (fireid == -1)	continue;

		FiresInfo[fireid][fireOn] = 1;
		FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, furnvw, furnint);
		FiresInfo[fireid][firePos][0] = fHitPosX;
		FiresInfo[fireid][firePos][1] = fHitPosY;
		FiresInfo[fireid][firePos][2] = fHitPosZ;
		FiresInfo[fireid][fireVW] = furnvw;
		FiresInfo[fireid][fireInt] = furnint;
		FiresInfo[fireid][fireHealth] = 100;
		FiresInfo[fireid][fireTimer] = 1800;

		FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, furnvw, furnint, -1, 100.0);
	}
	return 1;
}

DisplayBizList(playerid)
{
	// Calculate the maximum number of pages
	new maxpages = floatround(MAX_BIZ / MAX_DIALOG_LIST, floatround_ceil);

	// Check if the current page is invalid or exceeds the maximum number of pages
	if (pTemp[playerid][pDialogList] < 0 || maxpages < pTemp[playerid][pDialogList] + 1)
	{
		return 1;
	}

	// Calculate the start and end iterators based on the current page
	new start_itter = MAX_DIALOG_LIST * pTemp[playerid][pDialogList];
	new end_itter = (maxpages == pTemp[playerid][pDialogList] + 1) ? MAX_BIZ : (start_itter + MAX_DIALOG_LIST);

	// Initialize variables and the output string
	new count;
	new str[4096];
	format(str, sizeof(str), "{FFFFFF}ID\t{FFFFFF}Ýþletme\t{FFFFFF}Sahip{FFFFFF}\n");

	// Add previous page option if not on the first page
	if (pTemp[playerid][pDialogList])
	{
		strcat(str, "{bccd32}Önceki sayfa{FFFFFF}\n");
	}

	// Loop through the businesses and add them to the output string
	for (new i = start_itter; i < end_itter; i++)
	{
		// Skip if the business is not valid
		if (!BizInfo[i][bizID])
		{
			continue;
		}

		// Check if the maximum number of businesses per page has been reached
		if (count == MAX_DIALOG_LIST)
		{
			strcat(str, "{bccd32}Sonraki sayfa");
		}
		else
		{
			format(str, sizeof(str), "%s%d\t%s [%d]\t%s\n",
				str, BizInfo[i][bizID], BizInfo[i][bizName], i, BizInfo[i][bizOwner]);
			count++;
		}
	}

	// If no businesses were found, display an appropriate message
	if (!count)
	{
		return Dialog_Show(playerid, None, DIALOG_STYLE_LIST, "{FFFFFF}Aktif iþletme listesi",
			"Sunucuda iþletme yok ...", ">>>", "");
	}

	// Display the business list
	Dialog_Show(playerid, DisplayBizDialog, DIALOG_STYLE_TABLIST_HEADERS,
		"{FFFFFF}Aktif iþletme listesi", str, ">>>", "");

	return 1;
}

Dialog:DisplayBizDialog(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	if (pTemp[playerid][pDialogList]) {		//if not first page
		if (listitem == 0) {
			pTemp[playerid][pDialogList]--;
			return DisplayBizList(playerid);
		} else if (listitem == MAX_DIALOG_LIST+1) {
			pTemp[playerid][pDialogList]++;
			return DisplayBizList(playerid);
		} else {
			new bizid = pTemp[playerid][pDialogList]*MAX_DIALOG_LIST+listitem;
			SetPlayerPosEx(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
			SetInterior(playerid, BizInfo[bizid][bizPosInt]);
			SetWorld(playerid, BizInfo[bizid][bizPosVW]);
			SendSpecialMessage(playerid, "Ýþyerine ýþýnlandýn [ID: %i].", bizid);
			return DisplayBizList(playerid);
		}
	} else { 								//if it's a first page
		if (listitem == MAX_DIALOG_LIST) {
			pTemp[playerid][pDialogList]++;
			return DisplayBizList(playerid);
		} else {
			new bizid = pTemp[playerid][pDialogList]*MAX_DIALOG_LIST+listitem;
			SetPlayerPosEx(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
			SetInterior(playerid, BizInfo[bizid][bizPosInt]);
			SetWorld(playerid, BizInfo[bizid][bizPosVW]);
			SendSpecialMessage(playerid, "Ýþyerine ýþýnlandýn [ID: %i].", bizid);
			return DisplayBizList(playerid);
		}
	}

	//return 1;
}

Dialog:BusinessMenu(playerid, response, listitem, inputtext[])
{
    if (!response)	return 1;

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	switch(listitem)
	{
		case 0: //Èíôîðìàöèÿ î áèçíåñå
		{
			new diatxt[400];
			format(diatxt, sizeof(diatxt), "{FFFFFF}Ýþyeri ID:\t%d\nÝsim:\t%s\nÝþyeri tipi:\t%s\nDurum:\t%s\n", BizInfo[bizid][bizID], BizInfo[bizid][bizName], biz_types[BizInfo[bizid][bizType]], (BizInfo[bizid][bizLocked]) ? ("Kapalý") : ("Açýk"));
			format(diatxt, sizeof(diatxt), "%sÝþyeri kasasý:\t$%i\nGiriþ ücreti:\t$%i\n\nDepolama durumu: %i / 400\n", diatxt, BizInfo[bizid][bizCash], BizInfo[bizid][bizEntrance], BizInfo[bizid][bizProduct]);

			new id = biz_prod_types[BizInfo[bizid][bizType]];

			if(id != -1) format(diatxt, sizeof(diatxt), "%sSipariþ: %s $%i / 1 ürün", diatxt, truckcargo_product[id], BizInfo[bizid][bizBuyPrice]);

			Dialog_Show(playerid, BusinessMenuInfo, DIALOG_STYLE_MSGBOX, "Ýþyeri Bilgisi", diatxt, "Geri Dön", "");
			return 1;
		}
		case 1: //Èíôîðìàöèþ î ñîòðóäíèêàõ
		{
			static dlgtxt[] = "Ýsim\tPozisyon\n\
					{FF6347}>{FFFFFF} Yeni bir iþçi al\n";

			new diatxt[sizeof(dlgtxt) + 10*(24+32)],
				count;

			format(diatxt, sizeof(diatxt), "%s", dlgtxt);
			for(new i = 0; i < MAX_WORK_SPACE; i++)
			{
				if (!BizWorkers[bizid][i][bizJobOn]) continue;

				count++;
				format(diatxt, sizeof(diatxt), "%s%i. %s\t%s\n", diatxt, i+1, BizWorkers[bizid][i][bizWorker], BizWorkers[bizid][i][bizPosition]);
			}

			Dialog_Show(playerid, WorkerInfo, DIALOG_STYLE_TABLIST_HEADERS, "Çalýþan Bilgisi", diatxt, "Seç", "Geri Dön");
			return 1;
		}
		case 2: //Êàññà - ïîëîæèòü / âçÿòü
		{
			static dlgtxt[] = "Kasada bulunan: $%i\n\
								{FF6347}>{FFFFFF} Para yatýr\n\
								{FF6347}>{FFFFFF} Para çek";

			new diatxt[sizeof(dlgtxt) + 11];
			format(diatxt, sizeof(diatxt), dlgtxt, BizInfo[bizid][bizCash]);

			Dialog_Show(playerid, TillOperations, DIALOG_STYLE_TABLIST, "Kasa", diatxt, "Seç", "Geri Dön");
			return 1;
		}
		case 3: //Êîíôèãóðàöèÿ öåí
		{
			new diatxt[128];

			if (BizInfo[bizid][bizType] == BIZ_GAS_STATION)	format(diatxt, sizeof(diatxt), "{FFFFFF}Litre fiyatý: $%i", BizInfo[bizid][bizEntrance]);
			else 											format(diatxt, sizeof(diatxt), "{FFFFFF}Giriþ ücreti: $%i", BizInfo[bizid][bizEntrance]);

			new biz = BizInfo[bizid][bizType];
			if (biz == BIZ_STORE ||
				biz == BIZ_BAR ||
				biz == BIZ_PHARMACY ||
				biz == BIZ_PIZZA ||
				biz == BIZ_CLUCKIN ||
				biz == BIZ_BURGER ||
				biz == BIZ_DONUT) format(diatxt, sizeof(diatxt), "%s\n> Ürün fiyatý güncelleme", diatxt);

			Dialog_Show(playerid, ChooseConfigPrices, DIALOG_STYLE_TABLIST, "Ürün güncelleme", diatxt, "Seç", "Geri Dön");
			return 1;
		}
		case 4: //Óëó÷øåíèÿ áèçíåñà
		{
			Dialog_Show(playerid, BizUpgrade, DIALOG_STYLE_TABLIST, "Ýþyeri geliþimleri", "Ses sistemi al {33CC33}[$100]{FFFFFF}\nKapýyý tamir et {33CC33}[$1500]{FFFFFF}", "Seç", "Geri Dön");
			return 1;
		}
		case 5: pc_cmd_dekorasyon(playerid, "");
		case 6: //Çàêóïêà ïðîäóêòîâ
		{
			new id = biz_prod_types[BizInfo[bizid][bizType]];

			if(id == -1) pc_cmd_isyerimenu(playerid, "");

			static dlgtxt[] = "(%s) adlý ürünün 1 adetini $%i fiyatýndan satýyorsun.\nÜrünün yeni fiyatýný gir:";

			new diatxt[sizeof(dlgtxt) + 128];

			format(diatxt, sizeof(diatxt), dlgtxt, truckcargo_product[id], BizInfo[bizid][bizBuyPrice]);
			Dialog_Show(playerid, ProductBuying, DIALOG_STYLE_INPUT, "Ürünler", diatxt, "Seç", "Geri Dön");
			return 1;
		}
		case 7: //Èçìåíèòü íàçâàíèå
		{
			static dlgtxt[] = "Güncel isim: %s\nYeni isim giriniz:";

			new diatxt[sizeof(dlgtxt) + 24];

			format(diatxt, sizeof(diatxt), dlgtxt, BizInfo[bizid][bizName]);
			Dialog_Show(playerid, ChangeBizName, DIALOG_STYLE_INPUT, "Ýsim deðiþimi", diatxt, "Seç", "Geri Dön");
			return 1;
		}
		case 8: //Èçìåíèòü íàäïèñü ïðè âõîäå
		{
			Dialog_Show(playerid, DoorName, DIALOG_STYLE_LIST, "Giriþ yazýsýný deðiþtirme", "Düzenle\nKaldýr", "Seç", "Geri Dön");
			return 1;
		}
		case 9: //Ïðîäàòü áèçíåñ
		{
			Dialog_Show(playerid, SellBiz, DIALOG_STYLE_LIST, "Ýþyeri satýþý", "Oyuncuya sat\nDevlete sat", "Seç", "Geri Dön");
			return 1;
		}
	}

	return 1;
}

Dialog:DIALOG_AKTIFISYERLERI(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        new idx = 0;
        new selectedBusinessID = -1;
        for (new i = 0; i < MAX_BIZ; i++)
        {
            if (BizInfo[i][bizDurum] && BizInfo[i][bizOnline] && GetTickCount() - BizInfo[i][bizAlreadyOnline] < 3600000) // 1 saatlik süre kontrolü
            {
                if (idx == listitem)
                {
                    selectedBusinessID = i;
                    break;
                }
                idx++;
            }
        }

        if (selectedBusinessID != -1)
        {
            // Ýþyerini haritada iþaretle
            new Float:x = BizInfo[selectedBusinessID][bizPosX];
            new Float:y = BizInfo[selectedBusinessID][bizPosY];
            new Float:z = BizInfo[selectedBusinessID][bizPosZ];
            SetPlayerCheckpoint(playerid, x, y, z, 5.0); // Checkpoint yarýçapý

            // Oyuncuya iþaretlendiðini bildir
            new businessName[64];
            format(businessName, sizeof(businessName), "%s", BizInfo[selectedBusinessID][bizName]);
            new message[128];
            format(message, sizeof(message), " %s(#%d) isimli iþyeri haritanýzda kýrmýzý nokta ile isaretlendi.", businessName, selectedBusinessID);
            SendClientMessage(playerid, COLOR_RED, message);
        }
        else
        {
            SendErrorMessage(playerid, "Geçersiz seçim.");
        }
    }
    return 1;
}

Dialog:SellBiz(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_isyerimenu(playerid, "");

    new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 			bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	switch(listitem)
	{
		case 0:
		{
			Dialog_Show(playerid, SellBizTo, DIALOG_STYLE_INPUT, "{FFFFFF}Ýþyeri satýþý", "{ffffff}Bilgileri giriniz {C3C3C3}[ID / isim] [fiyat]", "Sat", "Ýptal");
		}
		case 1:
		{
			static const str_size[] = "{FFFFFF}$%i karþýlýðýnda iþyerini satmaktan emin misiniz?";
			new mes[sizeof(str_size) - 2 + 12];

			format(mes, sizeof(mes), str_size, BizInfo[bizid][bizPrice] / 2);
			Dialog_Show(playerid, SellBizState, DIALOG_STYLE_MSGBOX, "{FFFFFF}Ýþyeri satýþý", mes, "Sat", "Ýptal");
		}
	}
	return 1;
}

Dialog:SellBizTo(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

    new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 			bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir Ýþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	if (bizid < 0 || bizid >= MAX_BIZ || BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return 1;

    new userid, price;

	if (sscanf(inputtext, "ui", userid, price))
	{
	    Dialog_Show(playerid, SellBizTo, DIALOG_STYLE_INPUT, "{FFFFFF}Ýþyeri satýþý", "{ffffff}Bilgileri giriniz {C3C3C3}[ID / isim] [fiyat]", "Sat", "Ýptal");
	    return SendErrorMessage(playerid, "Geçersiz bir giriþ yaptýnýz.");
	}

	if (!IsPlayerLogged(userid))
	{
	    Dialog_Show(playerid, SellBizTo, DIALOG_STYLE_INPUT, "{FFFFFF}Ýþyeri satýþý", "{ffffff}Bilgileri giriniz {C3C3C3}[ID / isim] [fiyat]", "Sat", "Ýptal");
		return SendNotConnected(playerid);
	}

	if (!PlayerNearPlayer(3.0, playerid, userid))
	{
	    Dialog_Show(playerid, SellBizTo, DIALOG_STYLE_INPUT, "{FFFFFF}Ýþyeri satýþý", "{ffffff}Bilgileri giriniz {C3C3C3}[ID / isim] [fiyat]", "Sat", "Ýptal");
		return SendNotNearPlayer(playerid);
	}

	if (price < 0 || price > 100000000)
	{
	    Dialog_Show(playerid, SellBizTo, DIALOG_STYLE_INPUT, "{FFFFFF}Ýþyeri satýþý", "{ffffff}Bilgileri giriniz {C3C3C3}[ID / isim] [fiyat]", "Sat", "Ýptal");
	    return SendErrorMessage(playerid, "1 milyon dolarýn üzerinde fiyat belirleyemezsiniz.");
	}

	pTemp[userid][pBizPrice] = price;
	pTemp[userid][pBizPlayer] = playerid;
	pTemp[userid][pBizID] = bizid;

	SetPVarInt(userid, #accept_time, gettime() + 30);
	SendSyntaxMessage(playerid, "%s adlý kiþiye $%i karþýlýðýnda iþyeri satma teklifi sundunuz.", GetNameEx(userid), price);
	SendSyntaxMessage(userid, "%s adlý kiþi size $%i karþýlýðýnda iþyeri satma teklifi sundu. Y tuþu ile satýn alabilirsin.", GetNameEx(playerid), price);
	return 1;
}

Dialog:SellBizState(playerid, response, listitem, inputtext[])
{
    if (!response)	return 1;

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	PlaySound(playerid, 1052);

	new biz_cost = BizInfo[bizid][bizPrice] / 2, money = PlayerInfo[playerid][pCash], cash;

	GiveCash(playerid, biz_cost);
	SendSyntaxMessage(playerid, "Baþarýyla \"%s\" adlý iþyerini $%i karþýlýðýnda sattýnýz.",BizInfo[bizid][bizName], biz_cost);

	if (BizInfo[bizid][bizCash] > 0)
	{
		SendSyntaxMessage(playerid,"Ýþyeri satýldýktan sonra kasada bulunan $%i, size geri verildi.", BizInfo[bizid][bizCash]);
		GiveCash(playerid, BizInfo[bizid][bizCash]);
		cash = BizInfo[bizid][bizCash];
	}

    new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | Eski Para: %i | Yeni Para: %i SATILAN ÝÞYERÝ: [B_MYSQL: %i] -- $%i + $%i",
	GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money, GetCash(playerid), BizInfo[bizid][bizID], biz_cost, cash);
    insert_log(mes, PROPERTY_LOG, 2, PlayerInfo[playerid][pAccID]);

	RemoveAllWorkers(bizid);
    Sell_Business(bizid);

	return 1;
}

Dialog:BizUpgrade(playerid, response, listitem, inputtext[])
{
    if (!response)	return pc_cmd_isyerimenu(playerid, "");

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	if (listitem == 0)
	{
		if (BizInfo[bizid][bizRadio] == 1)				return SendErrorMessage(playerid, "Ýþyerinizde zaten ses sistemi mevcut.");
		if (GetCash(playerid) < UPGRADE_PRICE_RADIO)	return SendErrorMessage(playerid, "Ses sistemi ücreti $%i olarak belirlenmiþtir.", UPGRADE_PRICE_RADIO);

		BizInfo[bizid][bizRadio] = 1;
		SQL_SetInteger("business", "radio", BizInfo[bizid][bizRadio], BizInfo[bizid][bizID]);
		GiveCash(playerid, -UPGRADE_PRICE_RADIO);
		SendSyntaxMessage(playerid, "Ýþyeriniz için ses sistemi satýn aldýnýz. ");
		SendHelpMessage(playerid, "/radyoayarla komutu ile arayüze eriþebilirsiniz. ");
	}
	else
	{
		if (BizInfo[bizid][bizDDoor] == 0)			return SendErrorMessage(playerid, "Bu kapýnýn tamire ihtiyacý yok.");
		if (GetCash(playerid) < UPGRADE_PRICE_DOOR)	return SendErrorMessage(playerid, "Kapý tamir ücreti $%i olarak belirlenmiþtir.", UPGRADE_PRICE_DOOR);

		BizInfo[bizid][bizDDoor] = 0;
		SQL_SetInteger("business", "ddoor", BizInfo[bizid][bizDDoor], BizInfo[bizid][bizID]);
		UpdateBusinessDoor(bizid);
		GiveCash(playerid, -UPGRADE_PRICE_DOOR);
		SendSyntaxMessage(playerid, "Kapýyý $%i karþýlýðýnda tamir ettiniz.", UPGRADE_PRICE_DOOR);
	}
	return 1;
}

Dialog:ProductBuying(playerid, response, listitem, inputtext[])
{
    if (!response)	return pc_cmd_isyerimenu(playerid, "");

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Ýþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyerinin sahibi deðilsiniz.");

	new price = strval(inputtext),
		id = biz_prod_types[BizInfo[bizid][bizType]];

	if (id == -1)					return SendErrorMessage(playerid, "Ýþyerinizin ürüne ihtiyacý yok.");
	if (price < 50 && price > 1000)	return SendErrorMessage(playerid, "Satýn alma fiyatý $50 ila $1.000 arasýnda olmalýdýr.");

	BizInfo[bizid][bizBuyPrice] = price;
	SQL_SetInteger("business", "buy_price", price, BizInfo[bizid][bizID]);
	SendSyntaxMessage(playerid, "%s ürünü sipariþ ettiniz, bakiyenizden %i$ kesilecek.", truckcargo_product[id], price);
	return 1;
}

Dialog:ChangeBizName(playerid, response, listitem, inputtext[])
{
    if (!response)	return pc_cmd_isyerimenu(playerid, "");

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	new name[32];

	if (sscanf(inputtext, "s[32]", name)) return 1;
	if (strlen(name) > 30)				 	return SendErrorMessage(playerid, "Ýþyeri adý 30 karakterden fazla olamaz.");

	format(BizInfo[bizid][bizName], 32, "%s", name);
	SQL_SetString("business", "name", BizInfo[bizid][bizName], BizInfo[bizid][bizID]);
	SendSyntaxMessage(playerid, "Ýþyerinin adýný güncelledin: %s", BizInfo[bizid][bizName]);

	return 1;
}

Dialog:TillOperations(playerid, response, listitem, inputtext[])
{
    if (!response)	return pc_cmd_isyerimenu(playerid, "");
	if (!listitem)	return pc_cmd_isyerimenu(playerid, "");

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	if (listitem == 1)
	{
		Dialog_Show(playerid, TillDeposit, DIALOG_STYLE_INPUT, "Kasaya para yatýrma", "Ýþyeri kasasýna para yatýrmak mý istiyorsun?\nKasaya ne kadar para yatýrmak istediðini kutucuða yaz:\n\t\t(maksimum $25.000.000)", "Seç", "Ýptal");
	}

	if (listitem == 2)
	{
		static dlgtxt[] = "Ýþyeri kasasýndan çekmek mi istiyorsun?\nÇekmek istediðin miktarý kasaya gir:\n\t\t(maksimum $%s)";

		new diatxt[sizeof(dlgtxt) + 10];

		format(diatxt, sizeof(diatxt), dlgtxt, FormatNumber(BizInfo[bizid][bizCash]));
		Dialog_Show(playerid, TillWithDraw, DIALOG_STYLE_INPUT, "Kasadan para çekme", diatxt, "Seç", "Ýptal");
	}

	return 1;
}

Dialog:TillWithDraw(playerid, response, listitem, inputtext[])
{
    if (!response)	return 1;

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	new amount = strval(inputtext);

	if (BizInfo[bizid][bizCash] < amount) 	return SendErrorMessage(playerid, "Kasada belirttiðin miktarda bir para bulunmuyor.");
	if (amount < 1 || amount > 25000000)	return SendErrorMessage(playerid, "$1 ile $25.000.000 arasýnda bir miktar girmelisin.");

	GiveCash(playerid, amount);
	GiveBizCash(bizid, -amount);
	SQL_SetInteger("business", "cash", BizInfo[bizid][bizCash], BizInfo[bizid][bizID]);
	SendSyntaxMessage(playerid, "Kasadan $%i deðerinde para aldýn.", amount);
	return 1;
}

Dialog:TillDeposit(playerid, response, listitem, inputtext[])
{
    if (!response)	return 1;

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 			bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	new amount = strval(inputtext);

	if (GetCash(playerid) < amount || amount < 1)	return SendNotCash(playerid);
	if (BizInfo[bizid][bizCash] + amount > 25000000)	return SendErrorMessage(playerid, "$25.000.000 üzerinde bir miktar yatýrýlamaz.");

	GiveCash(playerid, -amount);
	GiveBizCash(bizid, amount);
	SQL_SetInteger("business", "cash", BizInfo[bizid][bizCash], BizInfo[bizid][bizID]);
	SendSyntaxMessage(playerid, "$%i deðerinde parayý kasaya koydun.", amount);

	return 1;
}

Dialog:DoorName(playerid, response, listitem, inputtext[])
{
    if (!response)	return pc_cmd_isyerimenu(playerid, "");

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	if (listitem == 0)
	{
		static dlgtxt[] = "%s\n\
						{FFFFFF}HTML renkler yazý içerisinde kullanabilir. Örneðin: ~FFFF00~ - sarý rengidir.\n\
						Örnek yazý: \"~FFFF00~Hoþ geldin\" yazýsý þu þekilde gözükecek: - \"{FFFF00}Hoþ geldin{FFFFFF}\" \n\n\
						Lütfen yazýyý giriniz:";

		new diatxt[sizeof(dlgtxt) + 128];

		format(diatxt, sizeof(diatxt), dlgtxt, BizInfo[bizid][bizMes]);
		Dialog_Show(playerid, ChangeDoorName, DIALOG_STYLE_INPUT, "Ýþyerine giriþinde çýkacak yazý", diatxt, "Seç", "Ýptal");
	}
	else
	{
		format(BizInfo[bizid][bizMes], 128, "!");
		SQL_SetString("business", "entermsg", "!", BizInfo[bizid][bizID]);
		SendSyntaxMessage(playerid, "Artýk giriþte herhangi bir yazý yazmayacak. ");
	}

	return 1;
}

Dialog:ChangeDoorName(playerid, response, listitem, inputtext[])
{
    if (!response)	return 1;

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 			bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	if (strlen(inputtext) < 2 || strlen(inputtext) > 127) return SendErrorMessage(playerid, "Ýþyeri giriþ yazýsý 127 karakterden fazla olamaz. ");
	if (strfind(inputtext, "\n", true) != -1) 			 return SendErrorMessage(playerid, "Ýþyeri giriþ yazýsýnda satýrý aþaðý atlatamazsýn.");

	format(BizInfo[bizid][bizMes], 128, "%s", inputtext);
	place_color(BizInfo[bizid][bizMes]);
	SQL_SetString("business", "entermsg", BizInfo[bizid][bizMes], BizInfo[bizid][bizID]);
	SendSyntaxMessage(playerid, "Ýþyeri giriþi için yeni yazý belirledin: %s", BizInfo[bizid][bizMes]);

	return 1;
}

Dialog:WorkerInfo(playerid, response, listitem, inputtext[])
{
    if (!response)	return pc_cmd_isyerimenu(playerid, "");

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	if (listitem == 0) return Dialog_Show(playerid, WorkerInvite, DIALOG_STYLE_INPUT, "Ýþçi alma", "{FFFFFF}Ýþçi olarak almak istediðiniz oyuncunun ID veya adýný giriniz:", ">>>", "Geri Dön");

	listitem -= 1;
	SetPVarInt(playerid, #WorkerID, listitem);

	static dlgtxt[] = "{FFFFFF}ÝSÝM:\t\t %s\n\
					POZÝSYON:\t %s\n\
					{FF6347}>{FFFFFF} Pozisyon deðiþtir\n\
					{FF6347}>{FFFFFF} Ýþten Çýkar";

	new diatxt[sizeof(dlgtxt) + 24 + 32];

	format(diatxt, sizeof(diatxt), dlgtxt, BizWorkers[bizid][listitem][bizWorker], BizWorkers[bizid][listitem][bizPosition]);

	Dialog_Show(playerid, WorkerEdit, DIALOG_STYLE_TABLIST_HEADERS, "Çalýþan Bilgisi", diatxt, "Seç", "Geri Dön");
	return 1;
}

Dialog:WorkerEdit(playerid, response, listitem, inputtext[])
{
    if (!response)	return pc_cmd_isyerimenu(playerid, "");

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	if (listitem == 1) return Dialog_Show(playerid, WorkerEditPos, DIALOG_STYLE_INPUT, "Pozisyon deðiþtirme", "{FFFFFF}Çalýþanýn yeni pozisyonunu giriniz:", "Seç", "Ýptal");
	if (listitem == 2)
	{
		listitem = GetPVarInt(playerid, #WorkerID);
		static dlgtxt[] = "{FFFFFF}%s (%s) adlý iþçiyi kovmak istediðinize emin misiniz?";
		new diatxt[sizeof(dlgtxt) + 24 + 32];

		format(diatxt, sizeof(diatxt), dlgtxt, BizWorkers[bizid][listitem][bizWorker], BizWorkers[bizid][listitem][bizPosition]);
		Dialog_Show(playerid, WorkerFire, DIALOG_STYLE_INPUT, "Ýþçi kovma", diatxt, "Kabul", "Ýptal");
	}
	return 1;
}

Dialog:WorkerInvite(playerid, response, listitem, inputtext[])
{
    if (!response)	return 1;

	new bizid, userid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	if (WorkSpace(bizid) == -1)						return SendErrorMessage(playerid, "Çalýþan sýnýrýna ulaþtýnýz. ");

	if (sscanf(inputtext, "u", userid))				return 1;
	if (userid == playerid)							return SendErrorMessage(playerid, "Kendini iþe alamazsýn. ");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);
	if (pTemp[userid][pHirePlayer] == playerid)		return SendErrorMessage(playerid, "Zaten kiþiyi iþyerine davet etmiþsin. ");

	pTemp[userid][pHirePlayer] = playerid;
	SetPVarInt(userid, #accept_time, gettime() + 30);

	SendSyntaxMessage(userid, "%s seni iþyerinde çalýþmaya davet etti.", GetNameWithMask(playerid));
	SendHelpMessage(userid, "Y tuþuna basarak teklifi kabul edebilirsin.");
	SendSyntaxMessage(playerid, "%s adlý kiþiyi iþyerinde davet ettin.", GetNameWithMask(userid));

	return 1;
}

Dialog:WorkerEditPos(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	listitem = GetPVarInt(playerid, #WorkerID);

	format(BizWorkers[bizid][listitem][bizPosition], 24, "%s", inputtext);

	SQL_SetString("users", "position", BizWorkers[bizid][listitem][bizPosition], BizWorkers[bizid][listitem][bizJobOn]);

	SendSyntaxMessage(playerid, "%s adlý kiþinin pozisyonunu %s olarak güncelledin.", BizWorkers[bizid][listitem][bizWorker], BizWorkers[bizid][listitem][bizPosition]);

	for(new i; i < GetPlayerPoolSize(); i++)
	{
		if (PlayerInfo[i][pID] == BizWorkers[bizid][listitem][bizJobOn])
		{
			SendSyntaxMessage(i, "%s pozisyonunuzu %s olarak düzenledi.", GetNameEx(playerid), BizWorkers[bizid][listitem][bizPosition]);
			break;
		}
	}

	return 1;
}

Dialog:WorkerFire(playerid, response, listitem, inputtext[])
{
    if (!response)	return 1;

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	listitem = GetPVarInt(playerid, #WorkerID);

	SQL_SetString("users", "position", "-", BizWorkers[bizid][listitem][bizJobOn]);
	SQL_SetInteger("users", "workon", 0, BizWorkers[bizid][listitem][bizJobOn]);

	for(new i; i < GetPlayerPoolSize(); i++)
	{
		if (PlayerInfo[i][pID] == BizWorkers[bizid][listitem][bizJobOn])
		{
			SendSyntaxMessage(i, "%s sizi iþyerinden kovdu.", GetNameEx(playerid));
			PlayerInfo[i][pWorkOn] = 0;
			break;
		}
	}

	SendSyntaxMessage(playerid, "%s (%s) adlý kiþiyi iþten kovdun.", BizWorkers[bizid][listitem][bizWorker], BizWorkers[bizid][listitem][bizPosition]);

	BizWorkers[bizid][listitem][bizWorker] = EOS;
	BizWorkers[bizid][listitem][bizPosition] = EOS;
	BizWorkers[bizid][listitem][bizJobOn] = 0;
	return 1;
}

Dialog:BusinessMenuInfo(playerid, response, listitem, inputtext[])
{
    if (!response)	return pc_cmd_isyerimenu(playerid, "");
	return 	pc_cmd_isyerimenu(playerid, "");
}

Dialog:ChooseConfigPrices(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_isyerimenu(playerid, "");

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 			bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	if (listitem == 0)
	{
		Dialog_Show(playerid, ConfigEntranceFee, DIALOG_STYLE_INPUT, "Ürün güncelleme", "Yeni bir deðer girin:", "Seç", "Ýptal");
	}
	else
	{
		new biz = BizInfo[bizid][bizType];
		if (biz != BIZ_STORE && biz != BIZ_BAR && biz != BIZ_PHARMACY && biz != BIZ_PIZZA && biz != BIZ_CLUCKIN && biz != BIZ_BURGER && biz != BIZ_DONUT)
			return SendErrorMessage(playerid,"Bu iþyerinin fiyatlarýný deðiþtiremezsin.");

		new type;
		switch(biz)
		{
			case BIZ_PIZZA:		type = 0;
			case BIZ_CLUCKIN:	type = 1;
			case BIZ_BURGER:	type = 2;
			case BIZ_DONUT:		type = 3;
			case BIZ_STORE:		type = 4;
			case BIZ_BAR:		type = 5;
			case BIZ_PHARMACY:	type = 6;
		}

		new mes[LIMIT_MAX_PRODUCTS*128];

		for(new i = 0; i < max_product[type]; i++)
		{
			format(mes, sizeof(mes), "%s{FFFFFF}Ürün fiyatý deðiþimi -> #%i {AFAFAF}[%s, $%i]\n", mes, i+1, name_order[type][i], BizInfo[bizid][bizProductPrice][i]);
		}

		Dialog_Show(playerid, ConfigPrices, DIALOG_STYLE_LIST, "Ürün güncelleme", mes, "Seç", "Geri Dön");
		return 1;
	}

	return 1;
}

Dialog:ConfigEntranceFee(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 			bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)												return SendErrorMessage(playerid, "Herhangi bir iþyerine yakýn deðilsiniz. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	new fee = strval(inputtext);

	if (fee < 0 || fee > 100)
	{
		Dialog_Show(playerid, ConfigEntranceFee, DIALOG_STYLE_INPUT, "Ürün güncelleme", "Yeni fiyat girin:", "Seç", "Ýptal");
		return SendErrorMessage(playerid, "Giriþ fiyatý 0 veya 100 dolar arasýnda olmalýdýr.");
	}

	BizInfo[bizid][bizEntrance] = fee;
	SQL_SetInteger("business", "entrance", BizInfo[bizid][bizEntrance], BizInfo[bizid][bizID]);

	if (BizInfo[bizid][bizType] == BIZ_GAS_STATION)	SendSyntaxMessage(playerid, "Ýþyerinin yakýt fiyatýný güncelledin [ID: %d] - $%i/Litre.", bizid, fee);
	else 											SendSyntaxMessage(playerid, "Ýþyerinin giriþ ücretini güncelledin [ID: %d] $%i.", bizid, fee);

	return 1;
}


Dialog:ConfigPrices(playerid, response, listitem, inputtext[])
{
    if (!response)	return 1;

    new bizid;

	if ((bizid = GetNearInsideBiz(playerid)) == -1)				return SendErrorMessage(playerid, "Ýþyerinin içerisinde olmalýsýnýz.");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	new biz = BizInfo[bizid][bizType];
	if (biz != BIZ_STORE && biz != BIZ_BAR && biz != BIZ_PHARMACY && biz != BIZ_PIZZA && biz != BIZ_CLUCKIN && biz != BIZ_BURGER && biz != BIZ_DONUT)
		return SendErrorMessage(playerid, "Bu iþyerinde bulunan þeylerin ücretini deðiþtiremezsiniz.");
	new type;
	switch(biz)
	{
		case BIZ_PIZZA:		type = 0;
		case BIZ_CLUCKIN:	type = 1;
		case BIZ_BURGER:	type = 2;
		case BIZ_DONUT:		type = 3;
		case BIZ_STORE:		type = 4;
		case BIZ_BAR:		type = 5;
		case BIZ_PHARMACY:	type = 6;
	}

	new mes[128];

	format(mes, sizeof(mes), "{FFFFFF}Ürün fiyat deðiþimi: #%i {AFAFAF}[%s, $%i]", listitem+1, name_order[type][listitem], BizInfo[bizid][bizProductPrice][listitem]);
	Dialog_Show(playerid, ConfigPricesEnd, DIALOG_STYLE_INPUT, "Ürün güncelleme", mes, "Tamam", "Kapat");
	SetPVarInt(playerid, "ConfigPrices", listitem);
	return 1;
}

Dialog:ConfigPricesEnd(playerid, response, listitem, inputtext[])
{
    if (!response)	return 1;

    new bizid;

	if ((bizid = GetNearInsideBiz(playerid)) == -1)					return SendErrorMessage(playerid, "Ýþyerinin içerisinde olmalýsýnýz.");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri size ait deðil.");

	new money = strval(inputtext);
	listitem = GetPVarInt(playerid, "ConfigPrices");

	new biz = BizInfo[bizid][bizType];
	if (biz != BIZ_STORE && biz != BIZ_BAR && biz != BIZ_PHARMACY && biz != BIZ_PIZZA && biz != BIZ_CLUCKIN && biz != BIZ_BURGER && biz != BIZ_DONUT)	return SendErrorMessage(playerid,"Bu iþyerinin fiyatlarýný deðiþtiremezsin.");
	new type;
	switch(biz)
	{
		case BIZ_PIZZA:		type = 0;
		case BIZ_CLUCKIN:	type = 1;
		case BIZ_BURGER:	type = 2;
		case BIZ_DONUT:		type = 3;
		case BIZ_STORE:		type = 4;
		case BIZ_BAR:		type = 5;
		case BIZ_PHARMACY:	type = 6;
	}

	if (money < biz_prices[type][listitem]/2 || money > biz_prices[type][listitem]*2)
	{
	    new mes[256];
		format(mes, sizeof(mes), ""EMBED_RED"Girilen miktar $%i ile $%i arasýnda olmalýdýr!\n{FFFFFF}Ürünün fiyatýný þu þekilde belirleyebilirsiniz: #%i {AFAFAF}[%s, $%i]", biz_prices[type][listitem]/2, biz_prices[type][listitem]*2, listitem+1, name_order[type][listitem], BizInfo[bizid][bizProductPrice][listitem]);
		Dialog_Show(playerid, ConfigPricesEnd, DIALOG_STYLE_INPUT, "Ürün güncelleme", mes, "Tamam", "Kapat");
		return 1;
	}

	BizInfo[bizid][bizProductPrice][listitem] = money;
	SendSyntaxMessage(playerid,"{FF6347}%s {FFFFFF}adlý eþyanýn fiyatýný {FF6347}$%i{FFFFFF} olarak belirledin.", name_order[type][listitem], BizInfo[bizid][bizProductPrice][listitem]);

	Save_Business(bizid);
	DeletePVar(playerid,"ConfigPrices");
	return 1;
}

Dialog:StoreDialog(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new bizid = GetNearInsideBiz(playerid);

	if (bizid == -1)														return 1;
    if (BizInfo[bizid][bizOwnerID] != 0 && !BizInfo[bizid][bizProduct])	return SendErrorMessage(playerid,"Ýþyerinde yeterli ürün yok");
    if (GetCash(playerid) < BizInfo[bizid][bizProductPrice][listitem])	return SendNotCash(playerid);

	if (BizInfo[bizid][bizType] == BIZ_STORE)
	{
		switch(listitem)
		{
			case 0:
			{
				SetPlayerNumber(playerid);
				SendSyntaxMessage(playerid,"$%i ödeyerek sim kartý satýn aldýnýz.", BizInfo[bizid][bizProductPrice][listitem]);
			}
			case 1:
			{
				if (GiveInvItem(playerid, INV_RADIO, 1) == -1)	return SendErrorMessage(playerid, "Envanterin dolu.");

				SendSyntaxMessage(playerid, "$%i ödeyerek bir telsiz satýn aldýnýz.", BizInfo[bizid][bizProductPrice][listitem]);
				SendSyntaxMessage(playerid, "Telsiz komutlarý için /telsizyardim. ");
			}
			case 2:
			{
				if (GiveInvItem(playerid, INV_LIGHTER, 1) == -1)	return SendErrorMessage(playerid, "Envanterin dolu.");

				SendSyntaxMessage(playerid, "$%i ödeyerek çakmak satýn aldýnýz.", BizInfo[bizid][bizProductPrice][listitem]);
			}
			case 3:
			{
				if (GiveInvItem(playerid, INV_CIGAR, 20) == -1)	return SendErrorMessage(playerid, "Envanterin dolu.");

				SendSyntaxMessage(playerid, "$%i ödeyerek sigara satýn aldýnýz.", BizInfo[bizid][bizProductPrice][listitem]);
			}
			case 4:
			{
				if (GiveInvItem(playerid, INV_DICE, 1) == -1)		return SendErrorMessage(playerid, "Envanterin dolu.");

				SendSyntaxMessage(playerid, "$%i ödeyerek zar satýn aldýnýz.", BizInfo[bizid][bizProductPrice][listitem]);
				SendHelpMessage(playerid, "/zar komutu ile zar atabilirsiniz. ");
			}
			case 5:
			{
				if (GiveInvItem(playerid, INV_GASCAN, 1) == -1)	return SendErrorMessage(playerid, "Envanterin dolu.");

				SendSyntaxMessage(playerid, "$%i ödeyerek benzin bidonu satýn aldýnýz.", BizInfo[bizid][bizProductPrice][listitem]);
			}
			case 6:
			{
				if (GiveInvItem(playerid, INV_PEN, 1) == -1)		return SendErrorMessage(playerid, "Envanterin dolu.");

				SendSyntaxMessage(playerid, "$%i ödeyerek bir kalem satýn aldýnýz.", BizInfo[bizid][bizProductPrice][listitem]);
				SendHelpMessage(playerid, "/notdefteri sistemini artýk kullanabilirsiniz. ");
			}
			case 7:
			{
				if (GiveInvItem(playerid, INV_CARDS, 1) == -1)	return SendErrorMessage(playerid, "Envanterin dolu..");

				SendSyntaxMessage(playerid, "$%i ödeyerek oyun kartý satýn aldýnýz.", BizInfo[bizid][bizProductPrice][listitem]);
				SendHelpMessage(playerid, "/kartver komutu ile kart verebilirsiniz.");
			}
			case 8:
			{
				if (GiveInvItem(playerid, 43, 200) == -1)		return SendErrorMessage(playerid, "Envanterin dolu.");
				SendClientMessageEx(playerid, COLOR_WHITE, "$%i ödeyerek bir kamera satýn aldýnýz..", BizInfo[bizid][bizProductPrice][listitem]);
			}
			case 9:
			{
				if (GiveInvItem(playerid, INV_BOOMBOX, 1) == -1)	return SendErrorMessage(playerid, "Envanterin dolu.");
				SendSyntaxMessage(playerid, "$%i ödeyerek boombox satýn aldýnýz.",  BizInfo[bizid][bizProductPrice][listitem]);
			}
                        case 11:
			{
				if (GiveInvItem(playerid, INV_SIGN, 1) == -1)	return SendErrorMessage(playerid, "Envanterin dolu.");
				SendSyntaxMessage(playerid, "$%i ödeyerek araç etiket satin aldiniz.",  BizInfo[bizid][bizProductPrice][listitem]);
			}
		}
	}
	else if (BizInfo[bizid][bizType] == BIZ_BAR)
	{
		new name_drink[8][8] = {"Bira", "Votka", "Kola", "Su", "Viski", "Konyak", "Soda", "Þarap"};

		if (GiveInvItem(playerid, INV_BEER + listitem, 1) == -1)	return SendErrorMessage(playerid, "Envanterin dolu..");
		SendSyntaxMessage(playerid, "%s adlý ürünü %i$ ödeyerek satýn aldýnýz.", name_drink[listitem], BizInfo[bizid][bizProductPrice][listitem]);
	}
	else if (BizInfo[bizid][bizType] == BIZ_PHARMACY)
	{
		switch(listitem)
		{
			case 0:
			{
				if (PlayerInfo[playerid][pPrescribe] < gettime())		return SendErrorMessage(playerid, "Tarifiniz yok.");
				if (PlayerInfo[playerid][pGanjaTime] > gettime())		return SendErrorMessage(playerid, "Týbbi esrarý yalnýzca aracýlýðýyla alabilirsiniz: %s.", ConvertSecond(PlayerInfo[playerid][pGanjaTime] - gettime()));
				if (GiveInvItem(playerid, INV_MED_GANJA, 2) == -1)		return SendErrorMessage(playerid, "Envanterin dolu.");

				PlayerInfo[playerid][pGanjaTime] = gettime() + 86400;
				SendSyntaxMessage(playerid, "$%i ödeyerek medikal esrar satýn aldýnýz.", BizInfo[bizid][bizProductPrice][listitem]);
			}
			case 1:
			{
				if (IsPlayerHasItem(playerid, INV_HEAL))	  return SendErrorMessage(playerid,"Ýlkyardým kitiniz var zaten.");
				if (GiveInvItem(playerid, INV_HEAL, 1) == -1) return SendErrorMessage(playerid, "Envanterin dolu.");

				SendSyntaxMessage(playerid, "$%i ödeyerek ilkyardým kiti satýn aldýnýz.", BizInfo[bizid][bizProductPrice][listitem]);
			}
			case 2..11: //103..112
			{
				if (GiveFloatInvItem(playerid, 101+listitem, 100.0) == -1)	return SendErrorMessage(playerid, "Envanterin dolu.");
				SendSyntaxMessage(playerid, "%s adlý ürünü %i$ ödeyerek satýn aldýnýz.", name_order[6][listitem], BizInfo[bizid][bizProductPrice][listitem]);
			}
		}
	}
	else if (BizInfo[bizid][bizType] == BIZ_PAWN)
	{
		switch(listitem)
		{
			case 0:
			{
			    if(GetPlayerWeapon(playerid) == WEAPON_KNIFE) return SendErrorMessage(playerid, "Zaten sizde ayný silahtan var, bunu yapamazsýnýz.");
                Silah_Ver(playerid, 4, 1);
				SendSyntaxMessage(playerid, "$%i ödeyerek Býçak satýn aldýnýz.", BizInfo[bizid][bizProductPrice][listitem]);
			}
			case 1:
			{
			    if(GetPlayerWeapon(playerid) == WEAPON_BAT) return SendErrorMessage(playerid, "Zaten sizde ayný silahtan var, bunu yapamazsýnýz.");
                Silah_Ver(playerid, 5, 1);
				SendSyntaxMessage(playerid, "$%i ödeyerek Beyzbol Sopasý satýn aldýnýz.", BizInfo[bizid][bizProductPrice][listitem]);
			}
			case 2:
			{
				if (PlayerInfo[playerid][pLevel] < 2)			return SendErrorMessage(playerid, "Maske satýn alabilmek için 2 seviye olmalýsýn.");
				if (GiveInvItem(playerid, INV_MASK, 1) == -1)	return SendErrorMessage(playerid, "Envanterin dolu.");

				SendSyntaxMessage(playerid, "$%i ödeyerek maske satýn aldýnýz", BizInfo[bizid][bizProductPrice][listitem]);
				SendHelpMessage(playerid, "/maske komutu ile maskeyi takabilir ve çýkartabilirsiniz. ");
			}
		}
	}

	else return 1;

	if (BizInfo[bizid][bizOwnerID] != 0)
 	{
 		BizInfo[bizid][bizProduct]--;
		GiveBizCash(bizid, BizInfo[bizid][bizProductPrice][listitem]);
	}

	GiveCash(playerid, -BizInfo[bizid][bizProductPrice][listitem]);
	return 1;
}

Dialog:ChangeBizInterior(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new index, bizid = GetPVarInt(playerid, "biz_change");

    if (bizid < 0 || bizid > MAX_BIZ-1 || !BizInfo[bizid][bizID])	return SendErrorMessage(playerid,"Belirtilen iþyeri bulunamadý, geçersiz ID.");

    for(new i = 0; i < MAX_INTERIORS; i++)
	{
		if (!AdminTeles[i][telesOn] || BUSSINESS_INT_TYPE != AdminTeles[i][telesType]) continue;

		if (index == listitem)
		{
		    index = i;
		    break;
		}
		index++;
	}

	SetBizInterior(playerid, bizid, index);
	return 1;
}

CMD:isyeri(playerid, params[])
{
	new option[16], secoption[129];
	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/isyeri [satinal / aciklama / isim / bilgi / girisucreti]");
		SendSyntaxMessage(playerid, "bilgi | girisucresti | aciklama | isim | iscial | iscikov");
		SendSyntaxMessage(playerid, "kasayatir | kasacek | yukselt | urunal");
		SendSyntaxMessage(playerid, "satinal | sat | fiyatlar");
		SendSyntaxMessage(playerid, "Diðer komutlar: /iþyerimenu /dekorasyon /iþyerireklam /isyeriaktif");
		return 1;
	}

	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)													return SendErrorMessage(playerid, "Yakýnýnýzda bir iþyeri yok. ");

	if (CompareStrings(option, "bilgi"))
	{
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])		return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");

		new diatxt[300];
		format(diatxt, sizeof(diatxt), "{FFFFFF}ID:\t\t%i\nÝsim:\t\t %s\nÝþyeri tipi:\t\t%s\nDurum:\t\t %s\n", BizInfo[bizid][bizID], BizInfo[bizid][bizName], biz_types[BizInfo[bizid][bizType]], (BizInfo[bizid][bizLocked]) ? ("Kapalý") : ("Açýk"));
		format(diatxt, sizeof(diatxt), "%sKasa:\t\t $%i\nGiriþ ücreti:\t $%i\n\nDepo: %i / 400\n", diatxt, BizInfo[bizid][bizCash], BizInfo[bizid][bizEntrance], BizInfo[bizid][bizProduct]);

		new id = biz_prod_types[BizInfo[bizid][bizType]];

		if(id != -1) format(diatxt, sizeof(diatxt), "%sSipariþ: %s - $%i / 1 ürün", diatxt, truckcargo_product[id], BizInfo[bizid][bizBuyPrice]);

		Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "iþyeri Bilgisi", diatxt, ">>", "");
		return 1;
	}

	else if (CompareStrings(option, "girisucreti"))
	{
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");

		new fee;

		if (sscanf(secoption, "i", fee)) return SendErrorMessage(playerid, "/iþyeri girisucreti [ücret (0-100)]");
		if (fee < 0 || fee > 100) 		 return SendErrorMessage(playerid, "Giriþ ücreti $0 ile $100 arasýnda olmalýdýr.");

		BizInfo[bizid][bizEntrance] = fee;
		SQL_SetInteger("business", "entrance", BizInfo[bizid][bizEntrance], BizInfo[bizid][bizID]);
		SendSyntaxMessage(playerid, "Ýþletmenin giriþ ücretini $%i olarak belirlediniz. [ID: %d]", fee, bizid);
		return 1;
	}

	else if (CompareStrings(option, "aciklama"))
	{
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID]) return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");

		new name[129];

		if (sscanf(secoption, "s[128]", name))
		{
			SendHelpMessage(playerid, "/iþyeri aciklama [yazi]");
			SendSyntaxMessage(playerid, "Yazýyý kaldýrmak için: {FFFF00}/iþyeri aciklama sil");
			SendSyntaxMessage(playerid, "Girilen yazýda HTML renkleri kullanýlabilir. Renk örneði: ~FFFF00~ - sarý");
			SendSyntaxMessage(playerid, "Örnek Kullaným: \"~FFFF00~Hoþ geldiniz\", bu kullanýmýn çýktýsý: \"{FFFF00}Hoþ geldiniz\""); //
			return 1;
		}
		if (CompareStrings(name, "sil"))
		{

		    format(BizInfo[bizid][bizMes], 128, "Ýþyerine hoþ geldiniz.");
		    place_color(BizInfo[bizid][bizMes]);
		    SQL_SetString("business", "entermsg", BizInfo[bizid][bizMes], BizInfo[bizid][bizID]);
		    SendSyntaxMessage(playerid, "Ýþyeri açýklamasý sýfýrlandý: %s", BizInfo[bizid][bizMes]);

			return 1;
		}

		if (strlen(name) < 2 || strlen(name) > 127)	return SendErrorMessage(playerid, "iþyeri açýklamasý en fazla 127 karakter olmalýdýr.");
		if (strfind(name, "\n", true) != -1) 		return SendErrorMessage(playerid, "iþyeri açýklamasýný alt satýra atamazsýnýz.");

		format(BizInfo[bizid][bizMes], 128, "%s", name);
		place_color(BizInfo[bizid][bizMes]);
		SQL_SetString("business", "entermsg", BizInfo[bizid][bizMes], BizInfo[bizid][bizID]);
		SendSyntaxMessage(playerid, "iþyeri açýklamasý ayarlandý: %s", BizInfo[bizid][bizMes]);
		return 1;
	}

	else if (CompareStrings(option, "isim"))
	{
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");

		new name[32];

		if (sscanf(secoption, "s[32]", name)) 		return SendHelpMessage(playerid, "/iþyeri isim [isim]");
		if (strlen(name) > 30)						return SendErrorMessage(playerid, "Ýþyeri isimi maksimum 30 karakter olmalýdýr.");
		if (strfind(name, "~n~", true) != -1)		return SendErrorMessage(playerid, "Ýþyeri isminde alt satýr komutlarý kullanýlmamalýdýr.");
		if (CheckTextDrawString(name))				return SendErrorMessage(playerid, "Ýþyeri isimi geçersiz karakter içermektedir. '~'.");

		format(BizInfo[bizid][bizName], 32, "%s", name);
		SQL_SetString("business", "name", BizInfo[bizid][bizName], BizInfo[bizid][bizID]);
		SendSyntaxMessage(playerid, "Ýþyeri isimi deðiþtirildi: %s", BizInfo[bizid][bizName]);
		return 1;
	}

	else if (CompareStrings(option, "kasayatir"))
	{
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID]) return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");

		new amount;

		if (sscanf(secoption, "d", amount))
		{
			SendHelpMessage(playerid, "/iþyeri kasayatir [para]");
			SendSyntaxMessage(playerid, "Ýþyerine kasasýnda bulunan: $%i", BizInfo[bizid][bizCash]);
			return 1;
		}
		if (GetCash(playerid) < amount || amount < 1)		return SendNotCash(playerid);
		if (BizInfo[bizid][bizCash] + amount > 25000000)	return SendErrorMessage(playerid, "Ýþyeri kasasýnda 25.000.000$'dan fazla para bulunamaz.");

		GiveCash(playerid, -amount);
		GiveBizCash(bizid, amount);
		//SQL_SetInteger("business", "cash", BizInfo[bizid][bizCash], BizInfo[bizid][bizID]);
		SendSyntaxMessage(playerid, "Ýþyeri kasasýna para koydunuz: $%i.", amount);
		return 1;
	}

	else if (CompareStrings(option, "kasacek"))
	{
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID]) return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");

		new amount;

		if (sscanf(secoption, "d", amount))
		{
			SendHelpMessage(playerid, "/iþyeri kasacek [para]");
			SendSyntaxMessage(playerid, "Ýþyeri kasasýnda bulunan: $%i.", BizInfo[bizid][bizCash]);
			return 1;
		}
		if (BizInfo[bizid][bizCash] < amount) 	return SendErrorMessage(playerid, "Ýþyeri kasasýnda yeterli miktarda para yok.");
		if (amount < 1 || amount > 25000000)	return SendErrorMessage(playerid, "Girilen deðer $1 ile $25.000.000 arasýnda olmalýdýr.");

		GiveCash(playerid, amount);
		GiveBizCash(bizid, -amount);
		//SQL_SetInteger("business", "cash", BizInfo[bizid][bizCash], BizInfo[bizid][bizID]);
		SendSyntaxMessage(playerid, "Ýþyeri kasasýndan para çektiniz: $%i.", amount);
		return 1;
	}

	else if (CompareStrings(option, "satinal"))
	{
		if (GetPlayerBizes(playerid) >= GetMaxPlayerBiz(playerid)) 		return SendErrorMessage(playerid, "Daha fazla iþyeri satýn alamazsýnýz.");
		if (BizInfo[bizid][bizOwnerID] != 0) 							return SendErrorMessage(playerid, "Bu iþyeri satýlýk deðil.");
		if (BizInfo[bizid][bizFreeze] != 0) 							return SendErrorMessage(playerid, "Bu iþyerini satýn alýnamaz.");
		if (PlayerInfo[playerid][pLevel] < BizInfo[bizid][bizLevelbuy])	return SendErrorMessage(playerid, "Bu iþyerini satýn almak için %i seviye olmalýsýnýz.", BizInfo[bizid][bizLevelbuy]);
		if (GetCash(playerid) < BizInfo[bizid][bizPrice])				return SendNotCash(playerid);

		BizInfo[bizid][bizOwnerID] = PlayerInfo[playerid][pID];
		BizInfo[bizid][bizLocked] = 0;
		BizInfo[bizid][bizProduct] = 150;
		BizInfo[bizid][bizBuyPrice] = 50;
		format(BizInfo[bizid][bizOwner], MAX_PLAYER_NAME, "%s", GetName(playerid));
		GiveCash(playerid, -BizInfo[bizid][bizPrice]);

        if (IsValidDynamicPickup(BizInfo[bizid][bizPickUp]))	DestroyDynamicPickup(BizInfo[bizid][bizPickUp]);

		new modelid;
		switch(BizInfo[bizid][bizType])
		{
			case BIZ_PIZZA:		modelid = 1582;
			case BIZ_BAR:       modelid = 1484;
			case BIZ_ATTACH:    modelid = 2710;
			case BIZ_PHARMACY:	modelid = 1241;
			case BIZ_CLOTHES:   modelid = 1275;
			case BIZ_LICENSE:   modelid = 1581;
			case BIZ_GAS_STATION: modelid = 1650;
			default:       modelid = 1272;
		}
		BizInfo[bizid][bizPickUp] = CreateDynamicPickup(modelid, 1, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ], BizInfo[bizid][bizPosVW], BizInfo[bizid][bizPosInt], -1, 100.0);

		Save_Business(bizid);
		SendSyntaxMessage(playerid, "%s adlý iþyerini $%i karþýlýðýnda satýn aldýnýz.", BizInfo[bizid][bizName], BizInfo[bizid][bizPrice]);

		for(new i = 0; i < MAX_GARAGES; i++)
		{
			if (!GarageInfo[i][garageID] || GarageInfo[i][garageBiz] != BizInfo[bizid][bizID]) continue;

			GarageInfo[i][garageOwner] = PlayerInfo[playerid][pID];
			SQL_SetInteger("garage", "owner", GarageInfo[i][garageOwner], GarageInfo[i][garageID]);
			SendSyntaxMessage(playerid, "Ýþyerine ait bir garaj bulunuyor: [ID: %i]", i);
		}

		new mes[256];
		format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | Money (ONCEKI): %i | Money (SIMDIKI): %i] iþyeri satýn aldý [B_MYSQL: %i] $%i.",
		GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), PlayerInfo[playerid][pCash] + BizInfo[bizid][bizPrice], GetCash(playerid), BizInfo[bizid][bizID], BizInfo[bizid][bizPrice]);
		insert_log(mes, PROPERTY_LOG, 4, PlayerInfo[playerid][pAccID]);
		return 1;
	}

	else if (CompareStrings(option, "sat"))
	{
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");

		Dialog_Show(playerid, SellBiz, DIALOG_STYLE_LIST, "Ýþyeri satýþý", "Oyuncuya sat\nDevlete sat", "Seç", "Geri Dön");
		return 1;
	}

	else if (CompareStrings(option, "urunal"))
	{
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID]) return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");

		new price, id = biz_prod_types[BizInfo[bizid][bizType]];

		if (id == -1)						return SendErrorMessage(playerid, "iþyerinizin bir ürüne ihtiyacý yok.");
		if (sscanf(secoption, "i", price))	return SendHelpMessage(playerid, "/iþyeri urunal [ücret]");
		if (price > 50 && price < 1000) 		return SendErrorMessage(playerid, "Girilen ücret $50 ile $1000 arasýnda olmalýdýr.");

		BizInfo[bizid][bizBuyPrice] = price;
		SQL_SetInteger("business", "buy_price", price, BizInfo[bizid][bizID]);
		SendSyntaxMessage(playerid, "%s adlý yerden ürün almak için $%i ödeyeceksiniz.", truckcargo_product[id], price);
		return 1;
	}

	else if (CompareStrings(option, "yukselt"))
	{
		new opt[16];

		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");
		if (sscanf(secoption, "s[16]", opt))
		{
			SendHelpMessage(playerid, "/iþyeri yukselt [radyo | kapitamir]");
			return 1;
		}

		if (CompareStrings(opt, "radyo"))
		{
			if (BizInfo[bizid][bizRadio] == 1)				return SendErrorMessage(playerid, "Bu iþyerinde radyo bulunuyor.");
			if (GetCash(playerid) < UPGRADE_PRICE_RADIO)	return SendErrorMessage(playerid, "Radyo almak için yeterli paranýz bulunmuyor, gereken: $%i.", UPGRADE_PRICE_RADIO);

			BizInfo[bizid][bizRadio] = 1;
			SQL_SetInteger("business", "radio", BizInfo[bizid][bizRadio], BizInfo[bizid][bizID]);
			GiveCash(playerid, -UPGRADE_PRICE_RADIO);
			SendSyntaxMessage(playerid, "Ýþyeri için bir radyo satýn aldýnýz.");
			SendSyntaxMessage(playerid, "Radyo kullanýmý için: /radyoayarla");
			return 1;
		}

		else if (CompareStrings(opt, "kapitamir"))
		{
			if (BizInfo[bizid][bizDDoor] == 0)			return SendErrorMessage(playerid, "Bu kapýnýn tamire ihtiyacý yok.");
			if (GetCash(playerid) < UPGRADE_PRICE_DOOR)	return SendErrorMessage(playerid, "Kapýyý tamir ettirebilmek için yeterli paranýz bulunmuyor, gereken: $%i.", UPGRADE_PRICE_DOOR);

			BizInfo[bizid][bizDDoor] = 0;
			SQL_SetInteger("business", "ddoor", BizInfo[bizid][bizDDoor], BizInfo[bizid][bizID]);
			UpdateBusinessDoor(bizid);
			GiveCash(playerid, -UPGRADE_PRICE_DOOR);
			SendSyntaxMessage(playerid, "Kapý tamir ettirildi, ödenen tutar: $%i.", UPGRADE_PRICE_DOOR);
			return 1;
		}
	}

	else if (CompareStrings(option, "iscial"))
	{
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");

		new userid;

		if (sscanf(secoption, "u", userid))				return SendHelpMessage(playerid, "/iþyeri iscial [ID / isim]");
		if (userid == playerid)							return SendErrorMessage(playerid, "Kendinizi iþe alamazsýnýz.");
		if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
		if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);
		if (pTemp[userid][pHirePlayer] == playerid)		return SendErrorMessage(playerid, "Belirtilen oyuncu zaten iþyerinizde çalýþýyor.");

		pTemp[userid][pHirePlayer] = playerid;
		SetPVarInt(userid, #accept_time, gettime() + 30);
		SendSyntaxMessage(userid, "%s adlý kiþi sizi iþyerine çalýþan olarak davet etti.", GetNameWithMask(playerid));
		SendHelpMessage(userid, "Y tuþuna basarak teklifi kabul edebilirsin.");
		SendSyntaxMessage(playerid, "%s adlý kiþiyi iþyerinizde çalýþan olarak davet ettiniz.", GetNameWithMask(userid));
		return 1;
	}

	else if (CompareStrings(option, "iscikov"))
	{
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");

		new userid;

		if (sscanf(secoption, "u", userid))							return SendHelpMessage(playerid, "/iþyeri iscikov [ID / isim]");
		if (userid == playerid)										return SendErrorMessage(playerid, "Kendinizi kovamazsýnýz.");
		if (!IsPlayerLogged(userid))								return SendNotConnected(playerid);
		if (PlayerInfo[userid][pWorkOn] != BizInfo[bizid][bizID])	return SendErrorMessage(playerid, "Belirtilen oyuncu iþyerinizde çalýþmýyor.");

		PlayerInfo[userid][pWorkOn] = 0;

		SendSyntaxMessage(userid, "%s adlý kiþi sizi iþten kovdu.", GetNameWithMask(playerid));
		SendSyntaxMessage(playerid, "%s adlý kiþiyi iþten çýkarttýnýz.", GetNameWithMask(userid));
		return 1;
	}

	else if (CompareStrings(option, "fiyatlar"))
	{
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");

		new biz = BizInfo[bizid][bizType];
		if (biz != BIZ_STORE && biz != BIZ_BAR && biz != BIZ_PHARMACY && biz != BIZ_PIZZA && biz != BIZ_CLUCKIN && biz != BIZ_BURGER && biz != BIZ_DONUT)
			return SendErrorMessage(playerid, "Bu iþyerinde fiyat deðiþikliði yapamazsýnýz.");

		new type;
		switch(biz)
		{
			case BIZ_PIZZA:		type = 0;
			case BIZ_CLUCKIN:	type = 1;
			case BIZ_BURGER:	type = 2;
			case BIZ_DONUT:		type = 3;
			case BIZ_STORE:		type = 4;
			case BIZ_BAR:		type = 5;
			case BIZ_PHARMACY:	type = 6;
		}

		new mes[LIMIT_MAX_PRODUCTS*128];

		for(new i = 0; i < max_product[type]; i++)
		{
			format(mes, sizeof(mes), "%s{FFFFFF}Ürün fiyat düzenlemesi #%i {AFAFAF}[%s, $%i]\n", mes, i+1, name_order[type][i], BizInfo[bizid][bizProductPrice][i]);
		}

		Dialog_Show(playerid, ConfigPrices, DIALOG_STYLE_LIST, "{9ACD32}Ürün Ayarlarý", mes, "Seç", "Geri Dön");
		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "/isyeri [seçenekler]");
		SendSyntaxMessage(playerid, "bilgi | girisucresti | aciklama | isim | iscial | iscikov");
		SendSyntaxMessage(playerid, "kasayatir | kasacek | yukselt | urunal");
		SendSyntaxMessage(playerid, "satinal | sat | fiyatlar");
	}
	return 1;
}

CMD:isyerimenu(playerid, params[])
{
	new bizid;

	if ((bizid = GetNearOutsideBiz(playerid)) == -1) 				bizid = GetNearInsideBiz(playerid);
	if (bizid == -1)													return SendErrorMessage(playerid, "Bir isyerine yakýn deðilsin. ");
	if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])		return SendErrorMessage(playerid, "Bu isyeri sana ait deðil.");

	static diastr[] = "Ýþyeri Bilgisi\n\
					Çalýþan Bilgisi\n\
					Kasa\n\
					Ücret Ayarlarý\n\
					Ýþyeri Geliþtirmeleri\n\
					Mobilya Düzenleme\n\
					Ürün Satýþý\n\
					Ýsim Deðiþtir\n\
					Açýklama Deðiþtir\n\
					Ýþyeri Sat";

	Dialog_Show(playerid, BusinessMenu, DIALOG_STYLE_LIST, "Ýþyeri Menü", diastr, "Seç", "Çýkýþ");
	return 1;
}

CMD:isyeriaktif(playerid, params[])
{
    new bizid = GetNearInsideBiz(playerid);
	new option[44], string[98], admbiz;
	if (sscanf(params, "s[44]", option))
	{
		SendSyntaxMessage(playerid, "/isyeriaktif [Seçenek]");
		SendServerMessage(playerid, "[Seçenekler]: onayla, bitir, bitir2");
		return 1;
	}

	if (CompareStrings(option, "onayla"))
	{
		if (bizid == -1) return SendErrorMessage(playerid, "Ýþyerinizin içinde olmalýsýnýz. ");
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID]) return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");

		BizInfo[bizid][bizOnline] = 1;
		BizInfo[bizid][bizAlreadyOnline] = GetTickCount();
		SendClientMessageToAllEx(COLOR_GREEN, "[Ýþyeri] %s(%d) adlý iþyeri ýþýklarýný açtý!", BizInfo[bizid][bizName], bizid);
		return 1;
	}

	else if (CompareStrings(option, "bitir"))
	{
		if (bizid == -1) return SendErrorMessage(playerid, "Ýþyerinizin içinde olmalýsýnýz. ");
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID]) return SendErrorMessage(playerid, "Bu iþyeri sana ait deðil.");
		if(BizInfo[bizid][bizOnline] == 0) return SendErrorMessage(playerid, "Bu iþyeri zaten aktif deðil.");
	    BizInfo[bizid][bizOnline] = 0;
	    BizInfo[bizid][bizAlreadyOnline] = 0;
		SendServerMessage(playerid, "Ýþyeriniz aktif konumundan çýkartýldý.");
		return 1;
	}

	else if (CompareStrings(option, "bitir2"))
	{
		if (sscanf(params, "s[44]i", admbiz)) // iþyeri ID parametresini al
		{
			SendSyntaxMessage(playerid, "/isyeriaktif bitir2 [iþyeri ID]");
			return 1;
		}

		if (PlayerInfo[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Bu komutu sadece yetkililer kullanabilir!");
		if (admbiz < 0 || admbiz >= MAX_BIZ) return SendErrorMessage(playerid, "Geçersiz iþyeri ID'si.");

		if (BizInfo[admbiz][bizOnline] == 1)
		{
			BizInfo[admbiz][bizOnline] = 0;
			BizInfo[admbiz][bizAlreadyOnline] = 0;
		}
		else
		{
			SendErrorMessage(playerid, "Bu iþyeri zaten kapalý.");
		}
		return 1;
	}
    return 1;
}

CMD:aktifisyerleri(playerid, params[])
{
    new businessList[1024];
    for (new i = 0; i < MAX_BIZ; i++)
    {
        if (BizInfo[i][bizDurum] && BizInfo[i][bizOnline] && GetTickCount() - BizInfo[i][bizAlreadyOnline] < 3600000) // 1 saatlik süre kontrolü
        {
            new businessName[64];
            format(businessName, sizeof(businessName), "%s", BizInfo[i][bizName]);
            format(businessList, sizeof(businessList), "%s\n%s(%d)", businessList, businessName, i);
        }
    }

    if (strlen(businessList) == 0)
    {
        format(businessList, sizeof(businessList), "{777777}Þu anda aktif bir iþletme yok.");
    }

    Dialog_Show(playerid, DIALOG_AKTIFISYERLERI, DIALOG_STYLE_LIST, "{777777}Aktif Ýþletmeler", businessList, "Seç", "Kapat");

    return 1;
}

CMD:yemek(playerid, params[])
{
	if (isnull(params))
	{
		SendHelpMessage(playerid, "/yemek [seçenekler]");
		SCM(playerid, COLOR_LIGHTRED,"/yemek siparis {FFFFFF}- yemek sipariþ menüsünü açar.");
		SCM(playerid, COLOR_LIGHTRED,"/yemek tepsiyerlestir {FFFFFF}- yemek tepsisini yerleþtirmenizi saðlar.");
		SCM(playerid, COLOR_LIGHTRED,"/yemek tepsial {FFFFFF}- yemek tepsinizi elinize almanýzý saðlar.");
		SCM(playerid, COLOR_LIGHTRED,"/yemek cop {FFFFFF}- yemek tepsinizi çöpe atmanýzý saðlar.");
		return 1;
	}

	if (CompareStrings(params, "siparis"))
	{
	    new bizid;

		if ((bizid = GetNearInsideBiz(playerid)) == -1)	return SendErrorMessage(playerid, "Herhangi bir iþyerinin içinde deðilsiniz.");
		if (BizInfo[bizid][bizType] != BIZ_PIZZA && BizInfo[bizid][bizType] != BIZ_CLUCKIN && BizInfo[bizid][bizType] != BIZ_BURGER && BizInfo[bizid][bizType] != BIZ_DONUT)
		{
		    SendErrorMessage(playerid, "Restorantta deðilsiniz.");
			return 1;
		}

		for(new i; i != 4; i++)
		{
		    TextDrawShowForPlayer(playerid, TD_restaurant[i]);
		}

		new mes[128], type = BizInfo[bizid][bizType] - BIZ_PIZZA;

		for(new i; i != max_product[type]; i++)
		{
		    format(mes, sizeof(mes), "%s~n~~r~Can: +%i~n~~r~Acligi Giderir~n~~p~Fiyat: $%i~n~", TurkishCharFix(name_order[type][i]), 30 + (i * 10), BizInfo[bizid][bizProductPrice][i]);
			PlayerTextDrawSetString(playerid, TD_restaurant_prod[playerid][i], mes);
			PlayerTextDrawShow(playerid, TD_restaurant_prod[playerid][i]);
            PlayerTextDrawSetPreviewModel(playerid, TD_restaurant_prod[playerid][i + 4], model_order[type][i]);
            PlayerTextDrawShow(playerid, TD_restaurant_prod[playerid][i + 4]);
		}

		SelectTextDraw(playerid, 0x00cb77FF);
		SetPVarInt(playerid, #restaurant, 1);
		return 1;
	}

	else if (CompareStrings(params, "tepsiyerlestir"))
	{
        if (!pTemp[playerid][pFoodStand]) return SendErrorMessage(playerid, "Elinizde tepsi yok.");

		new dropid = -1;
        for(new i; i != MAX_FOOD_DROPS; i++)
        {
            if (FoodDrop[i][foodDropped] != 0)	continue;

			dropid = i;
			break;
		}

		if (dropid == -1) return SendErrorMessage(playerid, "Maksimum tepsi sayýsýna ulaþýldý.");

        RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
        GetXYInFrontOfPlayer(playerid, FoodDrop[dropid][foodPosX], FoodDrop[dropid][foodPosY], FoodDrop[dropid][foodPosZ], 0.5);
		FoodDrop[dropid][foodPosZ] -= 0.1;
		FoodDrop[dropid][foodInt] = GetInterior(playerid);
		FoodDrop[dropid][foodVW] = GetWorld(playerid);
		FoodDrop[dropid][foodModel] = pTemp[playerid][pFoodStand];
  		FoodDrop[dropid][foodObject] = CreateDynamicObject(pTemp[playerid][pFoodStand], FoodDrop[dropid][foodPosX], FoodDrop[dropid][foodPosY], FoodDrop[dropid][foodPosZ], -25.300008, 23.200012, -16.699985, GetWorld(playerid), GetInterior(playerid));
		EditDynamicObject(playerid, FoodDrop[dropid][foodObject]);
		SetPVarInt(playerid, #edit_food, dropid+1);
        FoodDrop[dropid][foodDropped] = 1;
        FoodDrop[dropid][foodTime] = 15;
		OnPlayAnim(playerid,"CASINO","cards_win",4.1,0,0,0,0,0);
		pTemp[playerid][pFoodStand] = 0;
		SendSyntaxMessage(playerid, "Tepsinin konumunu düzenliyorsunuz. Kamerayý hareket ettirmek için \"SPACE\" tuþuna basýlý tutunuz.");
		return 1;
	}

	else if (CompareStrings(params, "tepsial"))
	{
	    if (pTemp[playerid][pFoodStand] != 0 || IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) return SendWarningMessage(playerid, "Elleriniz dolu.");

		new dropid = DropFood_Nearest(playerid);

		if (dropid == -1) return SendErrorMessage(playerid, "Yakýnýnýzda tepsi bulunmuyor.");

		OnPlayAnim(playerid,"CARRY","crry_prtial",4.1,1,1,1,1,1);
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, FoodDrop[dropid][foodModel], 5, 0.091998, 0.021999, 0.409, -104.9, 27.6, 0, 1, 1, 1);
        pTemp[playerid][pFoodStand] = FoodDrop[dropid][foodModel];
        FoodDrop[dropid][foodModel] = 0;
        FoodDrop[dropid][foodDropped] = 0;
        if (IsValidDynamicObject(FoodDrop[dropid][foodObject])) DestroyDynamicObject(FoodDrop[dropid][foodObject]);

		return 1;
	}

	else if (CompareStrings(params, "cop"))
	{
		if (pTemp[playerid][pFoodStand] == 0) return SendErrorMessage(playerid, "Elinizde tepsi yok.");

		OnPlayAnim(playerid,"CASINO","cards_win",4.1,0,0,0,0,0);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		pTemp[playerid][pFoodStand] = 0;
		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "/yemek [seçenekler]");
		SCM(playerid, COLOR_LIGHTRED,"/yemek siparis {FFFFFF}- yemek sipariþ menüsünü açar.");
		SCM(playerid, COLOR_LIGHTRED,"/yemek tepsiyerlestir {FFFFFF}- yemek tepsisini yerleþtirmenizi saðlar.");
		SCM(playerid, COLOR_LIGHTRED,"/yemek tepsial {FFFFFF}- yemek tepsinizi elinize almanýzý saðlar.");
		SCM(playerid, COLOR_LIGHTRED,"/yemek cop {FFFFFF}- yemek tepsinizi çöpe atmanýzý saðlar.");
	}
	return 1;
}
CMD:kapi(playerid, params[])
{
	new id, bid;

	if ((bid = GetNearBuilding(playerid)) == -1) 		return SendErrorMessage(playerid, "Herhangi bir binanýn içinde olmalýsýn!");
	if ((id = GetNearInBuilding(playerid, id)) == -1) 	return SendErrorMessage(playerid, "Herhangi bir binanýn içinde olmalýsýn!");

	switch(bid)
	{
		case 0: HouseDoorMove(id, playerid);
		case 1: BizDoorMove(id, playerid);
		case 2: GarageDoorMove(id, playerid);
	}

	return 1;
}

HouseDoorMove(id, playerid)
{
	for(new i = 0; i < MAX_FURNITURE; i++)
	{
		if (!IsPlayerInRangeOfPoint(playerid, 2.0, HFurn[id][i][fPosX], HFurn[id][i][fPosY], HFurn[id][i][fPosZ]) || 0 == HFurn[id][i][fOn] || !isHouseDoor(HFurn[id][i][fModel])) continue;

		if (!HFurn[id][i][fOpened])
		{
			if (HFurn[id][i][fLocked]) return SendErrorMessage(playerid, "Kapý kilitli.");

			MoveDynamicObject(HFurn[id][i][fObject], HFurn[id][i][fPosX], HFurn[id][i][fPosY], HFurn[id][i][fPosZ], 1.5, HFurn[id][i][fPosRX], HFurn[id][i][fPosRY], HFurn[id][i][fPosRZ]-90.0);
			HFurn[id][i][fOpened] = 1;
			return 1;
		}
		else
		{
			HFurn[id][i][fOpened] = 0;
			MoveDynamicObject(HFurn[id][i][fObject], HFurn[id][i][fPosX], HFurn[id][i][fPosY], HFurn[id][i][fPosZ], 1.5, HFurn[id][i][fPosRX], HFurn[id][i][fPosRY], HFurn[id][i][fPosRZ]);
			return 1;
		}
	}
	return 1;
}

BizDoorMove(id, playerid)
{
	for(new i = 0; i < MAX_FURNITURE; i++)
	{
		if (!IsPlayerInRangeOfPoint(playerid, 2.0, BFurn[id][i][fPosX], BFurn[id][i][fPosY], BFurn[id][i][fPosZ]) || 0 == BFurn[id][i][fOn] || !isHouseDoor(BFurn[id][i][fModel])) continue;

		if (!BFurn[id][i][fOpened])
		{
			if (BFurn[id][i][fLocked]) return SendErrorMessage(playerid, "Kapý kilitli.");

			MoveDynamicObject(BFurn[id][i][fObject], BFurn[id][i][fPosX], BFurn[id][i][fPosY], BFurn[id][i][fPosZ], 1.5, BFurn[id][i][fPosRX], BFurn[id][i][fPosRY], BFurn[id][i][fPosRZ]-90.0);
			BFurn[id][i][fOpened] = 1;
			return 1;
		}
		else
		{
			BFurn[id][i][fOpened] = 0;
			MoveDynamicObject(BFurn[id][i][fObject], BFurn[id][i][fPosX], BFurn[id][i][fPosY], BFurn[id][i][fPosZ], 1.5, BFurn[id][i][fPosRX], BFurn[id][i][fPosRY], BFurn[id][i][fPosRZ]);
			return 1;
		}
	}
	return 1;
}

GarageDoorMove(id, playerid)
{
	for(new i = 0; i < MAX_FURNITURE; i++)
	{
		if (!IsPlayerInRangeOfPoint(playerid, 2.0, GFurn[id][i][fPosX], GFurn[id][i][fPosY], GFurn[id][i][fPosZ]) || 0 == GFurn[id][i][fOn] || !isHouseDoor(GFurn[id][i][fModel])) continue;

		if (!GFurn[id][i][fOpened])
		{
			if (GFurn[id][i][fLocked]) return SendErrorMessage(playerid, "Kapý kilitli.");

			MoveDynamicObject(GFurn[id][i][fObject], GFurn[id][i][fPosX], GFurn[id][i][fPosY], GFurn[id][i][fPosZ], 1.5, GFurn[id][i][fPosRX], GFurn[id][i][fPosRY], GFurn[id][i][fPosRZ]-90.0);
			GFurn[id][i][fOpened] = 1;
			return 1;
		}
		else
		{
			GFurn[id][i][fOpened] = 0;
			MoveDynamicObject(GFurn[id][i][fObject], GFurn[id][i][fPosX], GFurn[id][i][fPosY], GFurn[id][i][fPosZ], 1.5, GFurn[id][i][fPosRX], GFurn[id][i][fPosRY], GFurn[id][i][fPosRZ]);
			return 1;
		}
	}
	return 1;
}
Enterance_OnGameModeInit()
{
	return mysql_tquery(dbHandle, "SELECT * FROM `entrance`", "LoadDynamicEntrance");
}

Ent_OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	for(new i; i != MAX_ENTRANCE; i++)
	{
	    if (!EntranceInfo[i][entranceOn] || EntranceInfo[i][eEnterPickup] != pickupid) 	continue;
		if (strlen(EntranceInfo[i][eText]) > 1) {

			new label_title[128], label_str1[128], label_str2[128];

			format(label_title, 128, "~w~%s", EntranceInfo[i][eText]);
			format(label_str1, 128, "~w~Giris yapmak icin ~y~/giris~w~ yaz veya ~y~'Y' ~w~tusuna bas.");
			format(label_str2, 128, "~w~( ID: %d )", i);
			CreateLableText(playerid, label_title, label_str1, label_str2, " ");
		}

		return 1;
	}

	if (PlayerInfo[playerid][pFaction] != 0 && pickupid == Factions[PlayerInfo[playerid][pFaction]][fPickUp])
	{
	    new mes[64];
		format(mes, sizeof(mes), "_~g~%s", Factions[PlayerInfo[playerid][pFaction]][fName]);
		InfoMSG2(playerid, mes, "~y~/isbasi ~w~ ile menuyu acabilirsin", 5000);
	}

	for(new i; i != MAX_JOBS; i++) {
		if (JobsInfo[i][jobOn] != 1) continue;
		if (JobsInfo[i][jobPickUp] == pickupid) {
			new mes[64 + 11];
			format(mes, sizeof(mes), "_~r~%s", TurkishCharFix(GetJobName(JobsInfo[i][jobType])));
			InfoMSG2(playerid, mes, "~y~Y~w~ ile menuyu acabilirsin", 5000);
			break;
		}
	}

	return 1;
}
this::LoadDynamicEntrance()
{
	new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows) return print("[Bina Girisleri] Kayit bulunamadi.");


	for(new i; i < rows; i++)
	{
        cache_get_value_int(i, "id", EntranceInfo[i][eID]);
        cache_get_value_float(i, "enterx", EntranceInfo[i][eEnterX]);
        cache_get_value_float(i, "entery", EntranceInfo[i][eEnterY]);
        cache_get_value_float(i, "enterz", EntranceInfo[i][eEnterZ]);
        cache_get_value_float(i, "entera", EntranceInfo[i][eEnterA]);
        cache_get_value_int(i, "entervw", EntranceInfo[i][eEnterVW]);
        cache_get_value_int(i, "enterint", EntranceInfo[i][eEnterInt]);
        cache_get_value_float(i, "exitx", EntranceInfo[i][eExitX]);
        cache_get_value_float(i, "exity", EntranceInfo[i][eExitY]);
        cache_get_value_float(i, "exitz", EntranceInfo[i][eExitZ]);
        cache_get_value_float(i, "exita", EntranceInfo[i][eExitA]);
        cache_get_value_int(i, "exitvw", EntranceInfo[i][eExitVW]);
        cache_get_value_int(i, "exitint", EntranceInfo[i][eExitInt]);
        cache_get_value_int(i, "faction", EntranceInfo[i][eFaction]);
        cache_get_value_int(i, "vehicle", EntranceInfo[i][eVehicle]);
		cache_get_value(i, "text", EntranceInfo[i][eText], 128);
		cache_get_value(i, "gpsname", EntranceInfo[i][gpsText], 128);

		if (EntranceInfo[i][eFaction]) EntranceInfo[i][eLocked] = 1;

		EntranceInfo[i][entranceOn] = 1;
		EntranceInfo[i][eEnterPickup] = CreateDynamicPickup(1239, 1, EntranceInfo[i][eEnterX], EntranceInfo[i][eEnterY], EntranceInfo[i][eEnterZ], EntranceInfo[i][eEnterVW], EntranceInfo[i][eEnterInt], -1, 100.0);
        EntranceInfo[i][eExitPickup] = CreateDynamicPickup(1239, 1, EntranceInfo[i][eExitX], EntranceInfo[i][eExitY], EntranceInfo[i][eExitZ], EntranceInfo[i][eExitVW], EntranceInfo[i][eExitInt], -1, 100.0);
		total++;
	}
	printf("[Bina Girisleri] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

this::OnInsertEntrance(id)
{
	return EntranceInfo[id][eID] = cache_insert_id();
}

IsPlayerEntranceOutside(playerid, i, Float: radius = 1.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, EntranceInfo[i][eEnterX], EntranceInfo[i][eEnterY], EntranceInfo[i][eEnterZ]) && GetWorld(playerid) == EntranceInfo[i][eEnterVW] && GetInterior(playerid) == EntranceInfo[i][eEnterInt]) ? (1) : (0);
}

IsPlayerEntranceInside(playerid, i, Float: radius = 1.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, EntranceInfo[i][eExitX], EntranceInfo[i][eExitY], EntranceInfo[i][eExitZ]) && GetWorld(playerid) == EntranceInfo[i][eExitVW] && GetInterior(playerid) == EntranceInfo[i][eExitInt]) ? (1) : (0);
}

GetNearEntranceOutside(playerid, Float: radius = 1.0)
{
    for(new i; i != MAX_ENTRANCE; i++)
	{
	    if (!EntranceInfo[i][entranceOn]) 					continue;
	    if (IsPlayerEntranceOutside(playerid, i, radius))	return i;
	}
	return -1;
}

GetNearEntranceInside(playerid, Float: radius = 1.0)
{
    for(new i; i != MAX_ENTRANCE; i++)
	{
	    if (!EntranceInfo[i][entranceOn]) 				continue;
	    if (IsPlayerEntranceInside(playerid, i, radius)) return i;
	}
	return -1;
}
this::OnFurnitureInsert(type, building, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z, category, Float:rx, Float:ry, Float:rz, texture_0, texture_1, texture_2, texture_3, texture_4)
{
	switch(type)
	{
		case 0: { //OnFurnitureInsert_House(building, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z, category, Float:rx, Float:ry, Float:rz, texture_0, texture_1, texture_2, texture_3, texture_4);
			HFurn[building][furnitureslot][fID] = cache_insert_id();
			//HFurn[building][furnitureslot][fBuildingID] = building;
			HFurn[building][furnitureslot][fInterior] = interior;
			HFurn[building][furnitureslot][fVirtualWorld] = world;
			HFurn[building][furnitureslot][fMarketPrice] = price;
			HFurn[building][furnitureslot][fModel] = model;
			HFurn[building][furnitureslot][fPosX] = x;
			HFurn[building][furnitureslot][fPosY] = y;
			HFurn[building][furnitureslot][fPosZ] = z;
			HFurn[building][furnitureslot][fPosRX] = rx;
			HFurn[building][furnitureslot][fPosRY] = ry;
			HFurn[building][furnitureslot][fPosRZ] = rz;
			format(HFurn[building][furnitureslot][fName], 64, name);
			HFurn[building][furnitureslot][fOn] = 1;
			HFurn[building][furnitureslot][fCategory] = category;
			HFurn[building][furnitureslot][fTexture][0] = texture_0;
			HFurn[building][furnitureslot][fTexture][1] = texture_1;
			HFurn[building][furnitureslot][fTexture][2] = texture_2;
			HFurn[building][furnitureslot][fTexture][3] = texture_3;
			HFurn[building][furnitureslot][fTexture][4] = texture_4;
			HFurn[building][furnitureslot][ChemIdx] = -1;

			HouseInfo[building][hFurniture]++;

			if (HFurn[building][furnitureslot][fVirtualWorld] != HouseInfo[building][hExitVW]) HouseInfo[building][hOutsideFurniture]++;

			return 1;
		}
		case 1: { //OnFurnitureInsert_Biz(building, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z, category, Float:rx, Float:ry, Float:rz, texture_0, texture_1, texture_2, texture_3, texture_4);
			BFurn[building][furnitureslot][fID] = cache_insert_id();
			//BFurn[building][furnitureslot][fBuildingID] = building;
			BFurn[building][furnitureslot][fInterior] = interior;
			BFurn[building][furnitureslot][fVirtualWorld] = world;
			BFurn[building][furnitureslot][fMarketPrice] = price;
			BFurn[building][furnitureslot][fModel] = model;
			BFurn[building][furnitureslot][fPosX] = x;
			BFurn[building][furnitureslot][fPosY] = y;
			BFurn[building][furnitureslot][fPosZ] = z;
			BFurn[building][furnitureslot][fPosRX] = rx;
			BFurn[building][furnitureslot][fPosRY] = ry;
			BFurn[building][furnitureslot][fPosRZ] = rz;
			format(BFurn[building][furnitureslot][fName], 64, name);
			BFurn[building][furnitureslot][fOn] = 1;
			BFurn[building][furnitureslot][fCategory] = category;
			BFurn[building][furnitureslot][fTexture][0] = texture_0;
			BFurn[building][furnitureslot][fTexture][1] = texture_1;
			BFurn[building][furnitureslot][fTexture][2] = texture_2;
			BFurn[building][furnitureslot][fTexture][3] = texture_3;
			BFurn[building][furnitureslot][fTexture][4] = texture_4;
			BFurn[building][furnitureslot][ChemIdx] = -1;

			BizInfo[building][bFurniture]++;

			if (BFurn[building][furnitureslot][fVirtualWorld] != BizInfo[building][bizExitVW]) BizInfo[building][bOutsideFurniture]++;

			return 1;
		}
		case 2: { //OnFurnitureInsert_Garage(building, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z, category, Float:rx, Float:ry, Float:rz, texture_0, texture_1, texture_2, texture_3, texture_4);
			GFurn[building][furnitureslot][fID] = cache_insert_id();
			//GFurn[building][furnitureslot][fBuildingID] = building;
			GFurn[building][furnitureslot][fInterior] = interior;
			GFurn[building][furnitureslot][fVirtualWorld] = world;
			GFurn[building][furnitureslot][fMarketPrice] = price;
			GFurn[building][furnitureslot][fModel] = model;
			GFurn[building][furnitureslot][fPosX] = x;
			GFurn[building][furnitureslot][fPosY] = y;
			GFurn[building][furnitureslot][fPosZ] = z;
			GFurn[building][furnitureslot][fPosRX] = rx;
			GFurn[building][furnitureslot][fPosRY] = ry;
			GFurn[building][furnitureslot][fPosRZ] = rz;
			format(GFurn[building][furnitureslot][fName], 64, name);
			GFurn[building][furnitureslot][fOn] = 1;
			GFurn[building][furnitureslot][fCategory] = category;
			GFurn[building][furnitureslot][fTexture][0] = texture_0;
			GFurn[building][furnitureslot][fTexture][1] = texture_1;
			GFurn[building][furnitureslot][fTexture][2] = texture_2;
			GFurn[building][furnitureslot][fTexture][3] = texture_3;
			GFurn[building][furnitureslot][fTexture][4] = texture_4;
			GFurn[building][furnitureslot][ChemIdx] = -1;

			GarageInfo[building][gFurniture]++;

			if (GFurn[building][furnitureslot][fVirtualWorld] != GarageInfo[building][garageExitVW]) GarageInfo[building][gOutsideFurniture]++;

			return 1;
		}
	}

	return 0;
}

GetNearBuilding(playerid, Float: radius_inside = 30.0, Float: radius_outside = 1.5)
{
    new building = GetNearHouse(playerid, radius_inside, radius_outside),
        bizid = GetNearBiz(playerid, radius_inside, radius_outside),
        garage = GetNearGarage(playerid);

    if (building != -1 && bizid != -1)
    {
        for(new i = 5; i != 0; i--)
        {
            building = GetNearHouse(playerid, radius_inside, i);
            bizid = GetNearBiz(playerid, radius_inside, i);

            if (building == -1)   return 1;
            if (bizid == -1)     return 0;
        }

        if (building != -1 && bizid != -1) return -1;
    }
    else
    {
        if (building != -1)   return 0;
        if (bizid != -1)     return 1;
        if (garage != -1)    return 2;
    }

    return -1;
}

GetXYZNearHouse(Float: x, Float: y, Float: z, Float: radius_outside = 10.0, Float: radius_inside = 30.0, int = 0, world = 0, use_fire = 1)
{
    for(new i; i != MAX_HOUSES; i++)
	{
	    if (!HouseInfo[i][hID]) continue;
		if (use_fire && gettime()-HouseInfo[i][hFireTimer] < 0)	continue;
		if (HouseInfo[i][hPosVW] == world && HouseInfo[i][hPosInt] == int && GetDistanceBetweenPoints(x,y,z,HouseInfo[i][hPosX],HouseInfo[i][hPosY],HouseInfo[i][hPosZ]) <= radius_outside) return i;
		if (HouseInfo[i][hExitVW] == world && HouseInfo[i][hExitInt] == int && GetDistanceBetweenPoints(x,y,z,HouseInfo[i][hExitX],HouseInfo[i][hExitY],HouseInfo[i][hExitZ]) <= radius_inside) return i;
	}
	return -1;
}

GetXYZNearBiz(Float: x, Float: y, Float: z, Float: radius_outside = 10.0, Float: radius_inside = 30.0, int = 0, world = 0, use_fire = 1)
{
    for(new i; i != MAX_BIZ; i++)
	{
	    if (!BizInfo[i][bizID]) continue;
		if (use_fire && gettime()-BizInfo[i][bFireTimer] < 0)	continue;
		if (BizInfo[i][bizPosVW] == world && BizInfo[i][bizPosInt] == int && GetDistanceBetweenPoints(x,y,z,BizInfo[i][bizPosX],BizInfo[i][bizPosY],BizInfo[i][bizPosZ]) <= radius_outside) return i;
		if (BizInfo[i][bizExitVW] == world && BizInfo[i][bizExitInt] == int && GetDistanceBetweenPoints(x,y,z,BizInfo[i][bizExitX],BizInfo[i][bizExitY],BizInfo[i][bizExitZ]) <= radius_inside) return i;
	}
	return -1;
}

GetXYZNearGarage(Float: x, Float: y, Float: z, Float: radius_outside = 10.0, Float: radius_inside = 30.0, int = 0, world = 0, use_fire = 1)
{
    for(new i; i != MAX_HOUSES; i++)
	{
	    if (!GarageInfo[i][garageID]) continue;
		if (use_fire && gettime()-GarageInfo[i][gFireTimer] < 0)	continue;
		if (GarageInfo[i][garageEnterVW] == world && GarageInfo[i][garageEnterInt] == int && GetDistanceBetweenPoints(x,y,z,GarageInfo[i][garageVeh_Enter][0], GarageInfo[i][garageVeh_Enter][1], GarageInfo[i][garageVeh_Enter][2]) <= radius_outside) return i;
		if (GarageInfo[i][garageExitVW] == world && GarageInfo[i][garageExitInt] == int && GetDistanceBetweenPoints(x,y,z,GarageInfo[i][garagePlayer_Exit][0], GarageInfo[i][garagePlayer_Exit][1], GarageInfo[i][garagePlayer_Exit][2]) <= radius_inside) return i;
	}
	return -1;
}

GetXYZNearBuilding(Float: x, Float: y, Float: z, Float: radius_inside = 30.0, Float: radius_outside = 5.0, int = 0, world = 0, use_fire = 1)
{
    new house = GetXYZNearHouse(x, y, z, radius_inside, radius_outside, int, world, use_fire),
        bizid = GetXYZNearBiz(x, y, z, radius_inside, radius_outside, int, world, use_fire),
        garage = GetXYZNearGarage(x, y, z, radius_inside, radius_outside, int, world, use_fire);

    if (house != -1)			return 0;
	else if (bizid != -1) 	return 1;
	else if (garage != -1)	return 2;
    return -1;
}

Check3DMenu(playerid)
{
	if (pTemp[playerid][p3DMenu] != -1)
	{
	   	Destroy3DMenu(pTemp[playerid][p3DMenu]);
		pTemp[playerid][p3DMenu] = -1;
	}
	return 1;
}

GetNearInBuilding(playerid, type)
{
    new building = -1;

    switch(type)
    {
        case 0: building = GetNearInsideHouse(playerid);
        case 1: building = GetNearInsideBiz(playerid);
        case 2: building = GetNearInsideGarage(playerid);
    }

    return building;
}

GetNearOutBuilding(playerid, type)
{
    new building = -1;

    switch(type)
    {
        case 0: building = GetNearOutsideHouse(playerid);
        case 1: building = GetNearOutsideBiz(playerid);
        case 2: building = GetNearOutsideGarage(playerid);
    }

    return building;
}

GetFurnitures(playerid) {
    switch(pTemp[playerid][pFurnitureB])
    {
        case 0: return HouseInfo[pTemp[playerid][pFurniture]][hFurniture];
        case 1: return BizInfo[pTemp[playerid][pFurniture]][bFurniture];
        case 2: return GarageInfo[pTemp[playerid][pFurniture]][gFurniture];
    }
    return -1;
}

GetOutsideFurnitures(playerid) {
    switch(pTemp[playerid][pFurnitureB])
    {
        case 0: return HouseInfo[pTemp[playerid][pFurniture]][hOutsideFurniture];
        case 1: return BizInfo[pTemp[playerid][pFurniture]][bOutsideFurniture];
        case 2: return GarageInfo[pTemp[playerid][pFurniture]][gOutsideFurniture];
    }

    return -1;
}

this::ShowEditFurniture(playerid)
{
    if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1)) 	return 1;
	if (GetPVarInt(playerid, "chose_slot") < 0 || GetPVarInt(playerid, "chose_slot") > MAX_FURNITURE-1)					return 1;

	new name[64],
		type = pTemp[playerid][pFurnitureB],
		building = pTemp[playerid][pFurniture],
		slot = GetPVarInt(playerid, "chose_slot");

	switch(type)
	{
		case 0: {
			if (HFurn[building][slot][fOn] == 0 || !IsValidDynamicObject(HFurn[building][slot][fObject]))	return pc_cmd_dekorasyon(playerid, "");
			format(name, sizeof(name), "%s", HFurn[building][slot][fName]);
		}
		case 1: {
			if (BFurn[building][slot][fOn] == 0 || !IsValidDynamicObject(BFurn[building][slot][fObject]))	return pc_cmd_dekorasyon(playerid, "");
			format(name, sizeof(name), "%s", BFurn[building][slot][fName]);
		}
		case 2: {
			if (GFurn[building][slot][fOn] == 0 || !IsValidDynamicObject(GFurn[building][slot][fObject]))	return pc_cmd_dekorasyon(playerid, "");
			format(name, sizeof(name), "%s", GFurn[building][slot][fName]);
		}
	}

 	Dialog_Show(playerid, EditFurniture, DIALOG_STYLE_LIST, name, "Bilgi\nPozisyon deðiþtir\nTexture düzenle\nSat\nÝsim deðiþtir\nKopyala", "Seç", "Geri Dön");
 	return 1;
}

ShowFurnitureList(playerid, list = 0)
{
	if (list == 0) pTemp[playerid][pDialogList] = 0;

    if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1)) return 1;

	new type = pTemp[playerid][pFurnitureB], building = pTemp[playerid][pFurniture], furnitures = GetFurnitures(playerid);

	if (!furnitures)	return SendErrorMessage(playerid, "Mobilyanýz yok.");
	if (list < 0 || ((furnitures-1) / MAX_FURNITURE_LIST < list))	return 1;

	new start_itter = MAX_FURNITURE_LIST * list, count = 0, str[71 + (72 * MAX_FURNITURE_LIST)];

	if (list) strcat(str, "{bccd32}Önceki sayfa{FFFFFF}\n");

	switch(type)
	{
		case 0: {
			for(new i; i < MAX_FURNITURE; i++)
			{
				if (!HFurn[building][i][fOn] || !IsValidDynamicObject(HFurn[building][i][fObject])) continue;

				if (count >= start_itter + MAX_FURNITURE_LIST)
				{
					strcat(str, "{bccd32}Sonraki sayfa");
					break;
				}

				if (count >= start_itter)	format(str, sizeof(str), "%s%s%i: %s\n", str, (HFurn[building][i][fInterior] != HouseInfo[building][hExitInt])?("{C3C3C3}"):(""), i+1, HFurn[building][i][fName]);

				count++;
			}
		} case 1: {
			for(new i; i < MAX_FURNITURE; i++)
			{
				if (!BFurn[building][i][fOn] || !IsValidDynamicObject(BFurn[building][i][fObject])) continue;

				if (count >= start_itter + MAX_FURNITURE_LIST)
				{
					strcat(str, "{bccd32}Sonraki sayfa");
					break;
				}

				if (count >= start_itter)	format(str, sizeof(str), "%s%s%i: %s\n", str, (BFurn[building][i][fInterior] != BizInfo[building][bizExitInt])?("{C3C3C3}"):(""), i+1, BFurn[building][i][fName]);

				count++;
			}
		} case 2: {
			for(new i; i < MAX_FURNITURE; i++)
			{
				if (!GFurn[building][i][fOn] || !IsValidDynamicObject(GFurn[building][i][fObject])) continue;

				if (count >= start_itter + MAX_FURNITURE_LIST)
				{
					strcat(str, "{bccd32}Sonraki sayfa");
					break;
				}

				if (count >= start_itter)	format(str, sizeof(str), "%s%s%i: %s\n", str, (GFurn[building][i][fInterior] != GarageInfo[building][garageExitInt])?("{C3C3C3}"):(""), i+1, GFurn[building][i][fName]);

				count++;
			}
		}
	}

	pTemp[playerid][pDialogList] = list;

	new title[64];
	format(title, sizeof(title), "{FFFFFF}Toplam: %i / %i. Dýþarýda: %i", furnitures, GetMaxPlayerFurniture(playerid), GetOutsideFurnitures(playerid));
	Dialog_Show(playerid, FurnitureList, DIALOG_STYLE_LIST, title, str, "Seç", "Kapat");

	return 1;
}

OnPlayerBuyFurniture(building, buildingID, type, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z, category, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0, texture_0= -1 ,texture_1= -1 ,texture_2= -1 ,texture_3= -1, texture_4= -1)
{
    new query[512];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `furnitures` (model,name,bType,building,interior,virworld,marketprice,posx,posy,posz,posrx,posry,posrz,category,texture_0,texture_1,texture_2,texture_3,texture_4,ChemIdx) VALUES (%i,'%e',%i,%i,%i,%i,%i, %f, %f, %f, %f, %f, %f,%i,%i,%i,%i,%i,%i,-1)", model, name, type, buildingID, interior, world, price, x, y, z, rx, ry, rz, category, texture_0, texture_1, texture_2, texture_3, texture_4);
	mysql_tquery(dbHandle, query, "OnFurnitureInsert", "iiiiiiisfffifffiiiii", type, building, interior, world, furnitureslot, model, price, name, x, y, z, category, rx, ry, rz, texture_0, texture_1, texture_2, texture_3, texture_4);
	return 1;
}

OnPlayerCallBuyFurniture(playerid, building, type, furnitureslot, model, f_category, f_index, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0, texture_0 = -1, texture_1= -1 ,texture_2= -1 ,texture_3= -1, texture_4= -1)
{
	/*if (f_category == 29 && (model == REACTOR_OBJECT || model == DRYER_OBJECT || model == MIXER_OBJECT)) {
		if (GetClosestFurniture(playerid, 30.0, model, DRUG_LAB) != -1) return SendErrorMessage(playerid, "%s zaten bulunuyor.", furniture_list[f_category][f_index][frName]);
	}*/

	SetPVarInt(playerid, "furniture_index", f_index);
	SetPVarInt(playerid, "category_furniture", f_category);

	SetPVarInt(playerid, "edit_furniture", 1);
	SetPVarInt(playerid, "chose_slot", furnitureslot);

	SetPVarInt(playerid, #texture_0, texture_0);
	SetPVarInt(playerid, #texture_1, texture_1);
	SetPVarInt(playerid, #texture_2, texture_2);
	SetPVarInt(playerid, #texture_3, texture_3);
	SetPVarInt(playerid, #texture_4, texture_4);

	switch(type) {
		case 0: {
			HFurn[building][furnitureslot][fObject] = CreateDynamicObject(model, x, y, z, rx, ry, rz, GetWorld(playerid), GetInterior(playerid));

			if (texture_0 != -1) SetDynamicObjectMaterial(HFurn[building][furnitureslot][fObject], 0, ObjectTextures[texture_0][TModel], ObjectTextures[texture_0][TXDName], ObjectTextures[texture_0][TextureName], ObjectTextures[texture_0][MaterialColor]);
			if (texture_1 != -1) SetDynamicObjectMaterial(HFurn[building][furnitureslot][fObject], 1, ObjectTextures[texture_1][TModel], ObjectTextures[texture_1][TXDName], ObjectTextures[texture_1][TextureName], ObjectTextures[texture_1][MaterialColor]);
			if (texture_2 != -1) SetDynamicObjectMaterial(HFurn[building][furnitureslot][fObject], 2, ObjectTextures[texture_2][TModel], ObjectTextures[texture_2][TXDName], ObjectTextures[texture_2][TextureName], ObjectTextures[texture_2][MaterialColor]);
			if (texture_3 != -1) SetDynamicObjectMaterial(HFurn[building][furnitureslot][fObject], 3, ObjectTextures[texture_3][TModel], ObjectTextures[texture_3][TXDName], ObjectTextures[texture_3][TextureName], ObjectTextures[texture_3][MaterialColor]);
			if (texture_4 != -1) SetDynamicObjectMaterial(HFurn[building][furnitureslot][fObject], 4, ObjectTextures[texture_4][TModel], ObjectTextures[texture_4][TXDName], ObjectTextures[texture_4][TextureName], ObjectTextures[texture_4][MaterialColor]);

			EditDynamicObject(playerid, HFurn[building][furnitureslot][fObject]);
		}
		case 1: {
			BFurn[building][furnitureslot][fObject] = CreateDynamicObject(model, x, y, z, rx, ry, rz, GetWorld(playerid), GetInterior(playerid));

			if (texture_0 != -1) SetDynamicObjectMaterial(BFurn[building][furnitureslot][fObject], 0, ObjectTextures[texture_0][TModel], ObjectTextures[texture_0][TXDName], ObjectTextures[texture_0][TextureName], ObjectTextures[texture_0][MaterialColor]);
			if (texture_1 != -1) SetDynamicObjectMaterial(BFurn[building][furnitureslot][fObject], 1, ObjectTextures[texture_1][TModel], ObjectTextures[texture_1][TXDName], ObjectTextures[texture_1][TextureName], ObjectTextures[texture_1][MaterialColor]);
			if (texture_2 != -1) SetDynamicObjectMaterial(BFurn[building][furnitureslot][fObject], 2, ObjectTextures[texture_2][TModel], ObjectTextures[texture_2][TXDName], ObjectTextures[texture_2][TextureName], ObjectTextures[texture_2][MaterialColor]);
			if (texture_3 != -1) SetDynamicObjectMaterial(BFurn[building][furnitureslot][fObject], 3, ObjectTextures[texture_3][TModel], ObjectTextures[texture_3][TXDName], ObjectTextures[texture_3][TextureName], ObjectTextures[texture_3][MaterialColor]);
			if (texture_4 != -1) SetDynamicObjectMaterial(BFurn[building][furnitureslot][fObject], 4, ObjectTextures[texture_4][TModel], ObjectTextures[texture_4][TXDName], ObjectTextures[texture_4][TextureName], ObjectTextures[texture_4][MaterialColor]);

			EditDynamicObject(playerid, BFurn[building][furnitureslot][fObject]);
		}
		case 2: {
			GFurn[building][furnitureslot][fObject] = CreateDynamicObject(model, x, y, z, rx, ry, rz, GetWorld(playerid), GetInterior(playerid));

			if (texture_0 != -1) SetDynamicObjectMaterial(GFurn[building][furnitureslot][fObject], 0, ObjectTextures[texture_0][TModel], ObjectTextures[texture_0][TXDName], ObjectTextures[texture_0][TextureName], ObjectTextures[texture_0][MaterialColor]);
			if (texture_1 != -1) SetDynamicObjectMaterial(GFurn[building][furnitureslot][fObject], 1, ObjectTextures[texture_1][TModel], ObjectTextures[texture_1][TXDName], ObjectTextures[texture_1][TextureName], ObjectTextures[texture_1][MaterialColor]);
			if (texture_2 != -1) SetDynamicObjectMaterial(GFurn[building][furnitureslot][fObject], 2, ObjectTextures[texture_2][TModel], ObjectTextures[texture_2][TXDName], ObjectTextures[texture_2][TextureName], ObjectTextures[texture_2][MaterialColor]);
			if (texture_3 != -1) SetDynamicObjectMaterial(GFurn[building][furnitureslot][fObject], 3, ObjectTextures[texture_3][TModel], ObjectTextures[texture_3][TXDName], ObjectTextures[texture_3][TextureName], ObjectTextures[texture_3][MaterialColor]);
			if (texture_4 != -1) SetDynamicObjectMaterial(GFurn[building][furnitureslot][fObject], 4, ObjectTextures[texture_4][TModel], ObjectTextures[texture_4][TXDName], ObjectTextures[texture_4][TextureName], ObjectTextures[texture_4][MaterialColor]);

			EditDynamicObject(playerid, GFurn[building][furnitureslot][fObject]);
		}
	}

	InfoMSG(playerid, "Mobilyayý kendinize yaklastirmak icin \" ~y~SPACE ~w~\" ve \" ~y~MMB ~w~\" tuslarina basin. ~n~Islemi geri almak icin \" ~r~ESC ~w~\" tusuna basin", 5);
	return 1;
}

DelPVarText(playerid)
{
	DeletePVar(playerid, "edit_furniture");
	DeletePVar(playerid, "chose_slot");
	DeletePVar(playerid, "buy_furniture");
	DeletePVar(playerid, "category_furniture");
	DeletePVar(playerid, "furniture_index");

	DeletePVar(playerid, #texture_0);
	DeletePVar(playerid, #texture_1);
	DeletePVar(playerid, #texture_2);
	DeletePVar(playerid, #texture_3);
	DeletePVar(playerid, #texture_4);

	return 1;
}

OnPlayerEditedFurniture(type, building, furnitureslot, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new query[256];

	switch(type)
	{
		case 0: {
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %i", x, y, z, rx, ry, rz, HFurn[building][furnitureslot][fID]);

			HFurn[building][furnitureslot][fPosX] = x;
			HFurn[building][furnitureslot][fPosY] = y;
			HFurn[building][furnitureslot][fPosZ] = z;
			HFurn[building][furnitureslot][fPosRX] = rx;
			HFurn[building][furnitureslot][fPosRY] = ry;
			HFurn[building][furnitureslot][fPosRZ] = rz;
		} case 1: {
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %i", x, y, z, rx, ry, rz, BFurn[building][furnitureslot][fID]);

			BFurn[building][furnitureslot][fPosX] = x;
			BFurn[building][furnitureslot][fPosY] = y;
			BFurn[building][furnitureslot][fPosZ] = z;
			BFurn[building][furnitureslot][fPosRX] = rx;
			BFurn[building][furnitureslot][fPosRY] = ry;
			BFurn[building][furnitureslot][fPosRZ] = rz;
		} case 2: {
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %i", x, y, z, rx, ry, rz, GFurn[building][furnitureslot][fID]);

			GFurn[building][furnitureslot][fPosX] = x;
			GFurn[building][furnitureslot][fPosY] = y;
			GFurn[building][furnitureslot][fPosZ] = z;
			GFurn[building][furnitureslot][fPosRX] = rx;
			GFurn[building][furnitureslot][fPosRY] = ry;
			GFurn[building][furnitureslot][fPosRZ] = rz;
		}
	}

	mysql_tquery(dbHandle, query);
	return 1;
}

OnPlayerSellFurniture(type, building, furnitureslot)
{
    new query[256];

	switch(type) {
		case 0: {
			mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `furnitures` WHERE `id` = %i", HFurn[building][furnitureslot][fID]);

			if (HFurn[building][furnitureslot][fVirtualWorld] != HouseInfo[building][hExitVW]) HouseInfo[building][hOutsideFurniture]--;

			DestroyDynamicObject(HFurn[building][furnitureslot][fObject]);
			HFurn[building][furnitureslot][fInterior] =
			HFurn[building][furnitureslot][fVirtualWorld] =
			HFurn[building][furnitureslot][fMarketPrice] =
			HFurn[building][furnitureslot][fModel] = 0;
			HFurn[building][furnitureslot][fPosX] =
			HFurn[building][furnitureslot][fPosY] =
			HFurn[building][furnitureslot][fPosZ] =
			HFurn[building][furnitureslot][fPosRX] =
			HFurn[building][furnitureslot][fPosRY] =
			HFurn[building][furnitureslot][fPosRZ] = 0.0;
			format(HFurn[building][furnitureslot][fName], 64, "Yok");
			HFurn[building][furnitureslot][fOn] = 0;

			HouseInfo[building][hFurniture]--;
		} case 1: {
			mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `furnitures` WHERE `id` = %i", BFurn[building][furnitureslot][fID]);

			if (BFurn[building][furnitureslot][fVirtualWorld] != BizInfo[building][bizExitVW]) BizInfo[building][bOutsideFurniture]--;

			DestroyDynamicObject(BFurn[building][furnitureslot][fObject]);
			BFurn[building][furnitureslot][fInterior] =
			BFurn[building][furnitureslot][fVirtualWorld] =
			BFurn[building][furnitureslot][fMarketPrice] =
			BFurn[building][furnitureslot][fModel] = 0;
			BFurn[building][furnitureslot][fPosX] =
			BFurn[building][furnitureslot][fPosY] =
			BFurn[building][furnitureslot][fPosZ] =
			BFurn[building][furnitureslot][fPosRX] =
			BFurn[building][furnitureslot][fPosRY] =
			BFurn[building][furnitureslot][fPosRZ] = 0.0;
			format(BFurn[building][furnitureslot][fName], 64, "Yok");
			BFurn[building][furnitureslot][fOn] = 0;

			BizInfo[building][bFurniture]--;
		} case 2: {
			mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `furnitures` WHERE `id` = %i", GFurn[building][furnitureslot][fID]);

			if (GFurn[building][furnitureslot][fVirtualWorld] != GarageInfo[building][garageExitVW]) GarageInfo[building][gOutsideFurniture]--;

			DestroyDynamicObject(GFurn[building][furnitureslot][fObject]);
			GFurn[building][furnitureslot][fInterior] =
			GFurn[building][furnitureslot][fVirtualWorld] =
			GFurn[building][furnitureslot][fMarketPrice] =
			GFurn[building][furnitureslot][fModel] = 0;
			GFurn[building][furnitureslot][fPosX] =
			GFurn[building][furnitureslot][fPosY] =
			GFurn[building][furnitureslot][fPosZ] =
			GFurn[building][furnitureslot][fPosRX] =
			GFurn[building][furnitureslot][fPosRY] =
			GFurn[building][furnitureslot][fPosRZ] = 0.0;
			format(GFurn[building][furnitureslot][fName], 64, "Yok");
			GFurn[building][furnitureslot][fOn] = 0;

			GarageInfo[building][gFurniture]--;
		}
	}

	mysql_tquery(dbHandle, query);
	return 1;
}

GetMaxPlayerFurniture(playerid)
{
	return 1550;
}


GetClosestFurniture(playerid, Float:fradius, furnmodelid, f_cat = 0)
{
	new building = GetNearBuilding(playerid);
	if (building == -1)	return -1;

    switch(building)
    {
        case 0: {
            building = GetNearOutsideHouse(playerid);
            if (building == -1)  building = GetNearInsideHouse(playerid);
			if (building == -1)	return 1;

			for(new i = 0; i < MAX_FURNITURE; i++)
			{
				if (!HFurn[building][i][fOn])					        continue;
				if (HFurn[building][i][fModel] != furnmodelid)			continue;
				if (HFurn[building][i][fCategory] != f_cat)				continue;
				if (!IsValidDynamicObject(HFurn[building][i][fObject])) 	continue;

				if (IsPlayerInRangeOfPoint(playerid, fradius, HFurn[building][i][fPosX], HFurn[building][i][fPosY], HFurn[building][i][fPosZ]) && GetPlayerInterior(playerid) == HFurn[building][i][fInterior] && GetPlayerVirtualWorld(playerid) == HFurn[building][i][fVirtualWorld])
				{
					return i;
				}
			}
        } case 1: {
            building = GetNearOutsideGarage(playerid);
            if (building == -1)  building = GetNearInsideBiz(playerid);
			if (building == -1)	return 1;

			for(new i = 0; i < MAX_FURNITURE; i++)
			{
				if (!BFurn[building][i][fOn])					        continue;
				if (BFurn[building][i][fModel] != furnmodelid)			continue;
				if (BFurn[building][i][fCategory] != f_cat)				continue;
				if (!IsValidDynamicObject(BFurn[building][i][fObject])) 	continue;

				if (IsPlayerInRangeOfPoint(playerid, fradius, BFurn[building][i][fPosX], BFurn[building][i][fPosY], BFurn[building][i][fPosZ]) && GetPlayerInterior(playerid) == BFurn[building][i][fInterior] && GetPlayerVirtualWorld(playerid) == BFurn[building][i][fVirtualWorld])
				{
					return i;
				}
			}
        } case 2: {
            building = GetNearOutsideBiz(playerid);
            if (building == -1)  building = GetNearInsideGarage(playerid);
			if (building == -1)	return 1;

			for(new i = 0; i < MAX_FURNITURE; i++)
			{
				if (!GFurn[building][i][fOn])					        continue;
				if (GFurn[building][i][fModel] != furnmodelid)			continue;
				if (GFurn[building][i][fCategory] != f_cat)				continue;
				if (!IsValidDynamicObject(GFurn[building][i][fObject])) 	continue;

				if (IsPlayerInRangeOfPoint(playerid, fradius, GFurn[building][i][fPosX], GFurn[building][i][fPosY], GFurn[building][i][fPosZ]) && GetPlayerInterior(playerid) == GFurn[building][i][fInterior] && GetPlayerVirtualWorld(playerid) == GFurn[building][i][fVirtualWorld])
				{
					return i;
				}
			}
        }
    }

	return -1;
}


Bu_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;

    GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

    if (GetPVarInt(playerid, "edit_furniture") == 1)
	{
		new building = pTemp[playerid][pFurniture], Float:Bx, Float:By, Float:Bz, Float:Brad,
			f_cat = GetPVarInt(playerid, "category_furniture"),
			f_index = GetPVarInt(playerid, "furniture_index"),
			name[64],
			f_slot = GetPVarInt(playerid, "chose_slot"),
			f_price = furniture_list[f_cat][f_index][frPrice];

		format(name, sizeof(name), furniture_list[f_cat][f_index][frName]);

		switch(pTemp[playerid][pFurnitureB])
		{
			case 0: {
				Bx = HouseInfo[building][hPosX];
				By = HouseInfo[building][hPosY];
				Bz = HouseInfo[building][hPosZ];
				Brad = HouseInfo[building][hFurnitureRadius];
			} case 1: {
				Bx = BizInfo[building][bizPosX];
				By = BizInfo[building][bizPosY];
				Bz = BizInfo[building][bizPosZ];
				Brad = BizInfo[building][bFurnitureRadius];
			} case 2: {
				Bx = GarageInfo[building][garageVeh_Enter][0];
				By = GarageInfo[building][garageVeh_Enter][1];
				Bz = GarageInfo[building][garageVeh_Enter][2];
				Brad = GarageInfo[building][gFurnitureRadius];
			}
		}

		if (response == EDIT_RESPONSE_FINAL)
		{
		    if (f_cat == 28 && GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) == -1)
			{
			    EditDynamicObject(playerid, objectid);
				return SendErrorMessage(playerid, "Mobilyayý satýn almak / düzenlemek için dýþarýda olmalýsýnýz.");
			}

	    	else if (f_cat != 28 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) == -1)
			{
			    EditDynamicObject(playerid, objectid);
				return SendErrorMessage(playerid, "Mobilyayý satýn almak / düzenlemek için içeride olmalýsýnýz.");
		    }

		    if (f_cat == 28 && GetDistanceBetweenPoints(x, y, z, Bx, By, Bz) > Brad)
		    {
		        EditDynamicObject(playerid, objectid);
		        return SendErrorMessage(playerid, "Mobilya kapýnýn 5 metre yakýnýnda olmalýdýr.");
		    }

			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

		    if (GetPVarInt(playerid, "buy_furniture"))
			{
				switch(pTemp[playerid][pFurnitureB]) {
					case 0: OnPlayerBuyFurniture(building, HouseInfo[building][hID], 0, GetInterior(playerid), GetWorld(playerid), f_slot, furniture_list[f_cat][f_index][frModel], furniture_list[f_cat][f_index][frPrice], furniture_list[f_cat][f_index][frName], x, y, z, f_cat, rx, ry, rz, GetPVarInt(playerid, #texture_0), GetPVarInt(playerid, #texture_1), GetPVarInt(playerid, #texture_2), GetPVarInt(playerid, #texture_3), GetPVarInt(playerid, #texture_4));
					case 1: OnPlayerBuyFurniture(building, BizInfo[building][bizID], 1, GetInterior(playerid), GetWorld(playerid), f_slot, furniture_list[f_cat][f_index][frModel], furniture_list[f_cat][f_index][frPrice], furniture_list[f_cat][f_index][frName], x, y, z, f_cat, rx, ry, rz, GetPVarInt(playerid, #texture_0), GetPVarInt(playerid, #texture_1), GetPVarInt(playerid, #texture_2), GetPVarInt(playerid, #texture_3), GetPVarInt(playerid, #texture_4));
					case 2: OnPlayerBuyFurniture(building, GarageInfo[building][garageID], 2, GetInterior(playerid), GetWorld(playerid), f_slot, furniture_list[f_cat][f_index][frModel], furniture_list[f_cat][f_index][frPrice], furniture_list[f_cat][f_index][frName], x, y, z, f_cat, rx, ry, rz, GetPVarInt(playerid, #texture_0), GetPVarInt(playerid, #texture_1), GetPVarInt(playerid, #texture_2), GetPVarInt(playerid, #texture_3), GetPVarInt(playerid, #texture_4));
				}

				GiveCash(playerid, -f_price);
				SendClientMessageEx(playerid, COLOR_YELLOWG, "[Dekorasyon] \"%s\" adlý mobilya $%s fiyatýna satýn alýndý.", name, FormatNumber(f_price));

                if (GetPVarInt(playerid, "buy_furniture") == 1) ShowFurnitureCategories(playerid);
				else                                           ShowFurnitureList(playerid);

				DelPVarText(playerid);
				return 1;
			}
			else SendSyntaxMessage(playerid, "Mobilyayý düzenlediniz: {C3C3C3}%s.", name);

			OnPlayerEditedFurniture(pTemp[playerid][pFurnitureB], building, f_slot, x, y, z, rx, ry, rz);
			DelPVarText(playerid);
		}

		else if (response == EDIT_RESPONSE_CANCEL)
		{
		    if (GetPVarInt(playerid, "buy_furniture"))
		    {
		        //OnPlayerSellFurniture(pTemp[playerid][pFurnitureB], building, GetPVarInt(playerid, "chose_slot")); - íå íóæíî

				switch(pTemp[playerid][pFurnitureB]) {
					case 0: DestroyDynamicObject(HFurn[building][f_slot][fObject]);
					case 1: DestroyDynamicObject(BFurn[building][f_slot][fObject]);
					case 2: DestroyDynamicObject(GFurn[building][f_slot][fObject]);
				}

		        if (GetPVarInt(playerid, "buy_furniture") == 1) FurnBuingDialog(playerid, f_cat);
				else                                           ShowFurnitureList(playerid);

				DelPVarText(playerid);
		        return 1;
		    }

			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			DelPVarText(playerid);
		}

		else if (response == EDIT_RESPONSE_UPDATE)
		{
		    if (f_cat == 28 && GetDistanceBetweenPoints(x, y, z, Bx, By, Bz) > Brad)
			{
			    CancelEdit(playerid);
				DelPVarText(playerid);
				SendServerMessage(playerid, "Objeyi kapýdan çok uzaða koydun. %d metre civarýnda olmalý. Ýþlem iptal.", Brad);
				//ShowFurnitureList(playerid);
			}
        }
	}
    return 1;
}

Fu_OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT objectid)
{
    if (pTemp[playerid][pFurniture] != -1)
    {
        if (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1) return 1;

    	new building = pTemp[playerid][pFurniture], name[64], slot = -1, type = pTemp[playerid][pFurnitureB];
		if(building == -1 || slot)

		switch(type)
		{
			case 0: {
				for(new i; i < MAX_FURNITURE; i++)
				{
					if (HFurn[building][i][fObject] != objectid || HFurn[building][i][fOn] != 1 || !IsValidDynamicObject(HFurn[building][i][fObject])) continue;
					slot = i;
					break;
				}
				if (slot == -1) return SendErrorMessage(playerid, "Bu mobilya ev için uygun deðil.");

				format(name, sizeof(name), "%s", HFurn[building][slot][fName]);
			} case 1: {
				for(new i; i < MAX_FURNITURE; i++)
				{
					if (BFurn[building][i][fObject] != objectid || BFurn[building][i][fOn] != 1 || !IsValidDynamicObject(BFurn[building][i][fObject])) continue;
					slot = i;
					break;
				}
				if (slot == -1) return SendErrorMessage(playerid, "Bu mobilya ev için uygun deðil.");

				format(name, sizeof(name), "%s", BFurn[building][slot][fName]);
			} case 2: {
				for(new i; i < MAX_FURNITURE; i++)
				{
					if (GFurn[building][i][fObject] != objectid || GFurn[building][i][fOn] != 1 || !IsValidDynamicObject(GFurn[building][i][fObject])) continue;
					slot = i;
					break;
				}
				if (slot == -1) return SendErrorMessage(playerid, "Bu mobilya ev için uygun deðil.");

				format(name, sizeof(name), "%s", GFurn[building][slot][fName]);
			}
		}

		CancelEdit(playerid);
		SetPVarInt(playerid, "chose_slot", slot);
        Dialog_Show(playerid, EditFurniture, DIALOG_STYLE_LIST, name, "Bilgi\nPozisyon deðiþtir\nTexture düzenle\nSat\nÝsim deðiþtir\nKopyala", "Seç", "Geri Dön");
	}
    return 1;
}

Furn_OnPlayerSelect3DMenuBox(playerid, MenuID, boxid, list, boxes)
{
    if (pTemp[playerid][p3DMenu] == MenuID)
    {
        if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1)) return 1;

    	new building = pTemp[playerid][pFurniture], slot = GetPVarInt(playerid, "chose_slot"), texture = GetPVarInt(playerid, "chose_texture");

		new mes[56];
		format(mes, 56, "~w~Esyanin tasarimini ~g~degistirdin ~w~slot: %i", texture+1);
        InfoMSG(playerid, mes, 4);

     	new tid = (list * boxes) + boxid;

		new furn_type = GetNearBuilding(playerid);

		switch(furn_type) {
			case 0: {
				HFurn[building][slot][fTexture][texture] = tid;

				new query[256];
				mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `texture_%i` = %i WHERE `id` = %i", texture, tid, HFurn[building][slot][fID]);
				mysql_tquery(dbHandle, query);

				SetDynamicObjectMaterial(HFurn[building][slot][fObject], texture, ObjectTextures[tid][TModel], ObjectTextures[tid][TXDName], ObjectTextures[tid][TextureName], ObjectTextures[tid][MaterialColor]);
			} case 1: {
				BFurn[building][slot][fTexture][texture] = tid;

				new query[256];
				mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `texture_%i` = %i WHERE `id` = %i", texture, tid, BFurn[building][slot][fID]);
				mysql_tquery(dbHandle, query);

				SetDynamicObjectMaterial(BFurn[building][slot][fObject], texture, ObjectTextures[tid][TModel], ObjectTextures[tid][TXDName], ObjectTextures[tid][TextureName], ObjectTextures[tid][MaterialColor]);
			} case 2: {
				GFurn[building][slot][fTexture][texture] = tid;

				new query[256];
				mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `texture_%i` = %i WHERE `id` = %i", texture, tid, GFurn[building][slot][fID]);
				mysql_tquery(dbHandle, query);

				SetDynamicObjectMaterial(GFurn[building][slot][fObject], texture, ObjectTextures[tid][TModel], ObjectTextures[tid][TXDName], ObjectTextures[tid][TextureName], ObjectTextures[tid][MaterialColor]);
			}
		}

	}
    return 1;
}

ShowFurnitureCategories(playerid)
{
    new str[571] = "1. Kanepeler\n2. Yataklar\n3. Koltuklar, Sandalyeler, Banklar\n4. Masalar\n5. Sehpalar\n6. Aydýnlatmalar\n7. Kulüp ekipmanlarý\n8. Komidin, gardrop, dolaplar\n9. Mutfak aletleri\n10. Ürünler\n11. Çöp\n12. Kýyafetler\n13. Bardaklar, þiþeler\n14. Dinamik kapýlar\n15. Ýç dekorasyon\n16. Silah\n17. Elektronik\n18. Banyo\n";
    strcat(str, "19. Resimler\n20. Bitkiler\n21. Kare duvar\n22. Büyük kare duvar\n23. Kapý giriþi\n24. Pencere açma\n25. Gözlük\n26. Dar duvar\n27. Geniþ duvar\n28. Sütunlar\n29. Sokak");

	if (PlayerInfo[playerid][pDrugLabAccess]) strcat(str, "\n30. Uyuþturucu laboratuvarý");

    Dialog_Show(playerid, FurnitureCategories, DIALOG_STYLE_LIST, "{FFFFFF}Liste", str, "Seç", "Ýptal");
	return 1;
}

GetFurnitureIndex(fcat, fid)
{
	for(new i = 0; i < MAX_F_SLOTS; i++) if (furniture_list[fcat][i][frModel] == fid) return i;
	return -1;
}

/*GetFurniturePrice(type, building)
{
	new paycheck;

	switch(type) {
		case 0: {
			for(new i; i < MAX_FURNITURE; i++)
			{
				if (!HFurn[building][i][fID] || !HFurn[building][i][fOn]) continue;
				paycheck += (HFurn[building][i][fMarketPrice] - (HFurn[building][i][fMarketPrice] & 2))  / 2;
			}
		}
		case 1: {
			for(new i; i < MAX_FURNITURE; i++)
			{
				if (!BFurn[building][i][fID] || !BFurn[building][i][fOn]) continue;
				paycheck += (BFurn[building][i][fMarketPrice] - (BFurn[building][i][fMarketPrice] & 2))  / 2;
			}
		}
		case 2: {
			for(new i; i < MAX_FURNITURE; i++)
			{
				if (!GFurn[building][i][fID] || !GFurn[building][i][fOn]) continue;
				paycheck += (GFurn[building][i][fMarketPrice] - (GFurn[building][i][fMarketPrice] & 2))  / 2;
			}
		}
	}
	return paycheck;
}*/
Dialog:FurnitureDialog(playerid, response, listitem, inputtext[])
{
	if (!response)	return pTemp[playerid][pFurniture] = -1;

	switch(listitem)
	{
	    case 0: return ShowFurnitureCategories(playerid);
	    case 1: return Dialog_Show(playerid, CategoryEditFurniture, DIALOG_STYLE_LIST, "{FFFFFF}Mobilya Düzenle", "Fare ile düzenle\nMobilya Listesi", "Seç", "Geri Dön");
		case 2:
		{
            if (!GetFurnitures(playerid)) return SendErrorMessage(playerid, "Mobilya satýn alýnmamýþ.");
			Dialog_Show(playerid, HandleSellFurnitures, DIALOG_STYLE_MSGBOX, "{FFFFFF}Tüm mobilyalarý sat", "{ffffff}Tüm mobilyalarý satmak istediðinize emin misiniz?", "Sat", "Ýptal");
		}
	}
	return 1;
}

Dialog:FurnitureCategories(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_dekorasyon(playerid, "");
	if (listitem == 28 && GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) == -1)		return SendErrorMessage(playerid, "Bu mobilyayý satýn almak için dýþarýda olmalýsýnýz. ");
    else if (listitem != 28 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) == -1)	return SendErrorMessage(playerid, "Bu mobilyayý satýn almak için içeride olmalýsýnýz. ");

	FurnBuingDialog(playerid, listitem);
 	return 1;
}


Dialog:CategoryEditFurniture(playerid, response, listitem, inputtext[])
{
	if (!response)   return pc_cmd_dekorasyon(playerid, "");
    if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1))	return 1;

	new furnitures = GetFurnitures(playerid);

	if (!furnitures) return SendErrorMessage(playerid, "Mobilyanýz yok.");

	if (!listitem)
	{
	    SelectObject(playerid);
     	SendErrorMessage(playerid, "Fare ile týklayarak mobilyalardan birini seçiniz.");
	    return 1;
	}

    ShowFurnitureList(playerid);
	return 1;
}

Dialog:FurnitureList(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_dekorasyon(playerid, "");
    if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1))	return 1;

	new building = pTemp[playerid][pFurniture],
	    count,
		FName[64],
	    list = pTemp[playerid][pDialogList];

	if (!listitem && list)																		 return ShowFurnitureList(playerid, list-1);
	if ((listitem == MAX_FURNITURE_LIST && !list) || (listitem == MAX_FURNITURE_LIST+1 && list)) return ShowFurnitureList(playerid, list+1);
	if (list)																					 listitem -= 1;

	new start_itter = MAX_FURNITURE_LIST * list;

	switch(pTemp[playerid][pFurnitureB])
	{
		case 0: {
			for(new i; i < MAX_FURNITURE; i++)
			{
				if (!HFurn[building][i][fOn] || !IsValidDynamicObject(HFurn[building][i][fObject])) continue;

				if (count == listitem + start_itter)
				{
					count = i;
					break;
				}
				count++;
			}

			if (HFurn[building][count][fVirtualWorld] != GetWorld(playerid) || HFurn[building][count][fInterior] != GetInterior(playerid))
			{
				return SendErrorMessage(playerid, "Bu mobilya dýþarýda, düzenlemek için dýþarýya çýkýnýz.");
			}

			SetPVarInt(playerid, "chose_slot", count);
			format(FName, sizeof(FName), "%s", HFurn[building][count][fName]);
		} case 1: {
			for(new i; i < MAX_FURNITURE; i++)
			{
				if (!BFurn[building][i][fOn] || !IsValidDynamicObject(BFurn[building][i][fObject])) continue;

				if (count == listitem + start_itter)
				{
					count = i;
					break;
				}
				count++;
			}

			if (BFurn[building][count][fVirtualWorld] != GetWorld(playerid) || BFurn[building][count][fInterior] != GetInterior(playerid))
			{
				return SendErrorMessage(playerid, "Bu mobilya dýþarýda, düzenlemek için dýþarýya çýkýnýz.");
			}

			SetPVarInt(playerid, "chose_slot", count);
			format(FName, sizeof(FName), "%s", BFurn[building][count][fName]);
		} case 2: {
			for(new i; i < MAX_FURNITURE; i++)
			{
				if (!GFurn[building][i][fOn] || !IsValidDynamicObject(GFurn[building][i][fObject])) continue;

				if (count == listitem + start_itter)
				{
					count = i;
					break;
				}
				count++;
			}

			if (GFurn[building][count][fVirtualWorld] != GetWorld(playerid) || GFurn[building][count][fInterior] != GetInterior(playerid))
			{
				return SendErrorMessage(playerid, "Bu mobilya dýþarýda, düzenlemek için dýþarýya çýkýnýz.");
			}

			SetPVarInt(playerid, "chose_slot", count);
			format(FName, sizeof(FName), "%s", GFurn[building][count][fName]);
		}
	}

 	Dialog_Show(playerid, EditFurniture, DIALOG_STYLE_LIST, FName, "Bilgi\nPozisyon deðiþtir\nTexture düzenle\nSat\nÝsim deðiþtir\nKopyala", "Seç", "Geri Dön");
	return 1;
}

Dialog:HandleEditTexture(playerid, response, listitem, inputtext[])
{
	if (!response) return CallRemoteFunction("ShowEditFurniture", "i", playerid);

    if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1))	return 1;

	new building = pTemp[playerid][pFurniture], slot = GetPVarInt(playerid, "chose_slot");

	if (listitem < 5)
	{
		new title[32];

		format(title, 32, "Texture (%i)", listitem+1);
 		Dialog_Show(playerid, HandleEditTexture2, DIALOG_STYLE_LIST, title, "Texture deðiþtir\nTexture kaldýr", "Seç", "Geri Dön");
        SetPVarInt(playerid, "chose_texture", listitem);
		return 1;
	}

	new name[64], furnid;

	switch(pTemp[playerid][pFurnitureB])
	{
		case 0: {
			format(name, sizeof(name), "%s", HFurn[building][GetPVarInt(playerid, "chose_slot")][fName]);
			furnid = HFurn[building][slot][fID];
			for(new i; i < 5; i++)
			{
				HFurn[building][slot][fTexture][i] = -1;
				SetDynamicObjectMaterial(HFurn[building][slot][fObject], i, -1, "none", "none", 0);
			}
		} case 1: {
			format(name, sizeof(name), "%s", BFurn[building][GetPVarInt(playerid, "chose_slot")][fName]);
			furnid = BFurn[building][slot][fID];
			for(new i; i < 5; i++)
			{
				BFurn[building][slot][fTexture][i] = -1;
				SetDynamicObjectMaterial(BFurn[building][slot][fObject], i, -1, "none", "none", 0);
			}
		} case 2: {
			format(name, sizeof(name), "%s", GFurn[building][GetPVarInt(playerid, "chose_slot")][fName]);
			furnid = GFurn[building][slot][fID];

			for(new i; i < 5; i++)
			{
				GFurn[building][slot][fTexture][i] = -1;
				SetDynamicObjectMaterial(GFurn[building][slot][fObject], i, -1, "none", "none", 0);
			}
		}
	}

 	SendSyntaxMessage(playerid, "%s adlý eþyanýn tüm dokularý sýfýrlandý.", name);

	new query[256];

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `texture_0`=-1,`texture_1`=-1,`texture_2`=-1,`texture_3`=-1,`texture_4`=-1 WHERE `id`=%i",furnid);
	mysql_tquery(dbHandle, query);

	return 1;
}

Dialog:HandleEditTexture2(playerid, response, listitem, inputtext[])
{
	if (!response)	return CallRemoteFunction("ShowEditFurniture", "i", playerid);

    if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1)) return 1;

	new building = pTemp[playerid][pFurniture], slot = GetPVarInt(playerid, "chose_slot"), texture = GetPVarInt(playerid, "chose_texture");

	switch(listitem)
	{
	    case 0:
		{
		    new Float:x, Float:y, Float:z, Float:facing, Float:distance = 3.0;

		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, facing);

		    SCM(playerid, COLOR_SERVER2, "* Texture Menüsü Hakkýnda Bilgi");
	        SCM(playerid, COLOUR_ALTO, "Y ve N tuþlarý ile tasarýmlar arasýnda geçiþ yapabilirsin.");
	        SCM(playerid, COLOUR_ALTO, "H tuþuna basarak texture slotlarý arasýnda geçiþ yaparsýn.");
	        SCM(playerid, COLOUR_ALTO, "Seçmek istediðiniz tasarýmý SPACE tuþu ile seçebilirsiniz.");
            SCM(playerid, COLOUR_ALTO, "Menüden çýkmak için ENTER tuþuna basmanýz yeterlidir.");

		  	x += (distance * floatsin(-facing, degrees));
		    y += (distance * floatcos(-facing, degrees));
            InfoMSG(playerid, "~w~\" ~y~Y ~w~\" ve \" ~y~N ~w~\" tuslari ile texture menusunde gezebilirsiniz. ~n~\" ~y~H ~w~\" - tusu ile slot degistirebilir, ~n~\" ~y~SPACE~w~ \" - tusuyla texture secebilir ~n~\" ~y~ENTER ~w~\" tusuyla iptal edebilirsiniz.", 20);
			pTemp[playerid][p3DMenu] = Create3DMenu(playerid, x, y, z, facing, 16);
		    Select3DMenu(playerid, pTemp[playerid][p3DMenu]);
			return 1;
		}
		case 1:
	    {
			switch(pTemp[playerid][pFurnitureB])
			{
				case 0: {
					if (HFurn[building][slot][fTexture][texture] == -1)	return SendErrorMessage(playerid,"Bu texture kullanýlamaz.");
					SendSyntaxMessage(playerid, "%s adlý mobilyanýn texturesi [ID: %i] silindi.", HFurn[building][slot][fName], texture+1);

					new query[256];
					mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `texture_%i` = -1 WHERE `id` = %i", texture, HFurn[building][slot][fID]);
					mysql_tquery(dbHandle, query);

					HFurn[building][slot][fTexture][texture] = -1;
					SetDynamicObjectMaterial(HFurn[building][slot][fObject], texture, -1, "none", "none", 0);
				} case 1: {
					if (BFurn[building][slot][fTexture][texture] == -1)	return SendErrorMessage(playerid, "Bu texture kullanýlamaz.");
					SendSyntaxMessage(playerid, "%s adlý mobilyanýn texturesi [ID: %i] silindi.", BFurn[building][slot][fName], texture+1);

					new query[256];
					mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `texture_%i` = -1 WHERE `id` = %i", texture, BFurn[building][slot][fID]);
					mysql_tquery(dbHandle, query);

					BFurn[building][slot][fTexture][texture] = -1;
					SetDynamicObjectMaterial(BFurn[building][slot][fObject], texture, -1, "none", "none", 0);
				} case 2: {
					if (GFurn[building][slot][fTexture][texture] == -1)	return SendErrorMessage(playerid, "Bu texture kullanýlamaz.");
					SendSyntaxMessage(playerid, "%s adlý mobilyanýn texturesi [ID: %i] silindi.", GFurn[building][slot][fName], texture+1);

					new query[256];
					mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `texture_%i` = -1 WHERE `id` = %i", texture, GFurn[building][slot][fID]);
					mysql_tquery(dbHandle, query);

					GFurn[building][slot][fTexture][texture] = -1;
					SetDynamicObjectMaterial(GFurn[building][slot][fObject], texture, -1, "none", "none", 0);
				}
			}
	        return 1;
	    }
	}
	return 1;
}

Dialog:InformationFurniture(playerid, response, listitem, inputtext[])
{
    return CallRemoteFunction("ShowEditFurniture", "i", playerid);
}

Dialog:EditFurniture(playerid, response, listitem, inputtext[])
{
	if (!response)   return pc_cmd_dekorasyon(playerid, "");
    if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1))	return 1;

	new building = pTemp[playerid][pFurniture],
        slot = GetPVarInt(playerid, "chose_slot");

	new FCat, name[64], f_price, f_obj, f_vw, f_int;

	switch(pTemp[playerid][pFurnitureB])
	{
		case 0: {
			format(name, sizeof(name), "%s", HFurn[building][slot][fName]);
			FCat = HFurn[building][slot][fCategory];
			f_price = HFurn[building][slot][fMarketPrice];
			f_obj = HFurn[building][slot][fObject];
			f_vw = HFurn[building][slot][fVirtualWorld];
			f_int = HFurn[building][slot][fInterior];
		} case 1: {
			format(name, sizeof(name), "%s", BFurn[building][slot][fName]);
			FCat = BFurn[building][slot][fCategory];
			f_price = BFurn[building][slot][fMarketPrice];
			f_obj = BFurn[building][slot][fObject];
			f_vw = BFurn[building][slot][fVirtualWorld];
			f_int = BFurn[building][slot][fInterior];
		} case 2: {
			format(name, sizeof(name), "%s", GFurn[building][slot][fName]);
			FCat = GFurn[building][slot][fCategory];
			f_price = GFurn[building][slot][fMarketPrice];
			f_obj = GFurn[building][slot][fObject];
			f_vw = GFurn[building][slot][fVirtualWorld];
			f_int = GFurn[building][slot][fInterior];
		}
	}

    if (f_vw != GetWorld(playerid) || f_int != GetInterior(playerid)) return SendErrorMessage(playerid, "Bu mobilya dýþarýda, düzenlemek için dýþarýya çýkýnýz.");

	switch(listitem)
	{
	    case 0:
	    {
	        new mes[228];

			format(mes, sizeof(mes), "{C3C3C3}Kategori:\t{ffffff}%s\n{C3C3C3}Ýsim:\t{ffffff}%s\n{C3C3C3}Fiyat:\t{ffffff}$%s", furniture_title[FCat], name, FormatNumber(f_price));
			Dialog_Show(playerid, InformationFurniture, DIALOG_STYLE_MSGBOX, "{FFFFFF}Bilgi", mes, "Geri Dön", "");
	        return 1;
	    }
	    case 1:
	    {
            InfoMSG(playerid, "Mobilyayi kendinize yaklastirmak icin \" ~y~SPACE ~w~\" ve \" ~y~MMB ~w~\" tuslarina basin. ~n~Islemi geri almak icin \" ~r~ESC ~w~\" tusuna basin", 5);
	        SetPVarInt(playerid, "edit_furniture", 1);
			EditDynamicObject(playerid, f_obj);
	        return 1;
	    }
	    case 2:
	    {
	        new str_tex[256], tex_name[5][32] = {"Boþ", "Boþ", "Boþ", "Boþ", "Boþ"}; //Ïóñòî

			switch(pTemp[playerid][pFurnitureB])
			{
				case 0: for(new i; i != 5; i++) if (HFurn[building][slot][fTexture][i] != -1) format(tex_name[i], 32, "%s", GetTextureName(HFurn[building][slot][fTexture][i]));
				case 1: for(new i; i != 5; i++) if (BFurn[building][slot][fTexture][i] != -1) format(tex_name[i], 32, "%s", GetTextureName(BFurn[building][slot][fTexture][i]));
				case 2: for(new i; i != 5; i++) if (GFurn[building][slot][fTexture][i] != -1) format(tex_name[i], 32, "%s", GetTextureName(GFurn[building][slot][fTexture][i]));
			}

			format(str_tex, sizeof(str_tex), "{FFFFFF}Texture 1: {C3C3C3}%s\n{FFFFFF}Texture 2: {C3C3C3}%s\n{FFFFFF}Texture 3: {C3C3C3}%s\n{FFFFFF}Texture 4: {C3C3C3}%s\n{FFFFFF}Texture 5: {C3C3C3}%s\n{FF6347}> Texture kaldýr", tex_name[0], tex_name[1], tex_name[2], tex_name[3], tex_name[4]);
	        Dialog_Show(playerid, HandleEditTexture, DIALOG_STYLE_LIST, "{FFFFFF}Texture deðiþtir", str_tex, "Seç", "Geri Dön");
			return 1;
	    }
	    case 3:
	    {
            new mes[268], sellprice = (f_price - (f_price & 2))  / 2;

			format(mes, sizeof(mes), "{C3C3C3}Kategori:\t{ffffff}%s\n{C3C3C3}Ýsim:\t{ffffff}%s\n{C3C3C3}Fiyat:\t{ffffff}$%s\n\n{FF6347}Geri ödeme miktarý: $%s", furniture_title[FCat], name, FormatNumber(f_price), FormatNumber(sellprice));
			Dialog_Show(playerid, HandleSellFurniture, DIALOG_STYLE_MSGBOX, "{FFFFFF}Sat", mes, "Sat", "Geri Dön");
	        return 1;
	    }
		case 4:
		{
		    Dialog_Show(playerid, FurnitureRename, DIALOG_STYLE_INPUT, name, "\t{ffffff}Mobilyaya yeni bir isim giriniz:\t\n\t- Minimum 1 karakter.\t\n\t- Maksimum 32 karakter.\t", "Düzenle", "Geri Dön");
			return 1;
		}
		case 5:
		{
		    new mes[228];
			format(mes, sizeof(mes), "{C3C3C3}Kategori:\t{ffffff}%s\n{C3C3C3}Ýsim:\t{ffffff}%s\n{C3C3C3}Fiyat:\t{ffffff}$%s\n{ffffff}", furniture_title[FCat], name, FormatNumber(f_price));
		    Dialog_Show(playerid, CopyFurniture, DIALOG_STYLE_MSGBOX, "{FFFFFF}Kopyala", mes, "Satýn al", "Geri Dön");
		}
	}
	return 1;
}

Dialog:FurnitureRename(playerid, response, listitem, inputtext[])
{
	if (!response)																																												return 1;
    if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1))	return 1;

	new building = pTemp[playerid][pFurniture], slot = GetPVarInt(playerid, "chose_slot"), f_id, name[64];

	switch(pTemp[playerid][pFurnitureB])
	{
		case 0: {
			format(name, sizeof(name), "%s", HFurn[building][slot][fName]);
			f_id = HFurn[building][slot][fID];
		} case 1: {
			format(name, sizeof(name), "%s", BFurn[building][slot][fName]);
			f_id = BFurn[building][slot][fID];
		} case 2: {
			format(name, sizeof(name), "%s", GFurn[building][slot][fName]);
			f_id = GFurn[building][slot][fID];
		}
	}

	if (strlen(inputtext) < 1 || strlen(inputtext) > 32)
	{
	    Dialog_Show(playerid, FurnitureRename, DIALOG_STYLE_INPUT, name, "\t\t{ffffff}Mobilyaya yeni bir isim giriniz:\t\t\n\t\t\t - Minimum 1 karakter.\t\t\n\t\t\t - Maksimum 32 karakter.\t\t", "Düzenle", "Geri Dön");
		return SendErrorMessage(playerid, "Ýsim minimum 1, maksimum 32 karakter olmalýdýr.");
	}

	SendSyntaxMessage(playerid, "Mobilyanýn ismi deðiþtirildi, eski: %s{ffffff} yeni: %s.", name, inputtext);
    format(name, 32, "%s", inputtext);

	switch(pTemp[playerid][pFurnitureB])
	{
		case 0: {
			format(HFurn[building][slot][fName], 32, name);
		} case 1: {
			format(BFurn[building][slot][fName], 32, name);
		} case 2: {
			format(GFurn[building][slot][fName], 32, name);
		}
	}

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `name` = '%e' WHERE `id` = %i", name, f_id);
	mysql_tquery(dbHandle, query);
	return 1;
}

Dialog:BuyFurniture(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
        FurnBuingDialog(playerid, GetPVarInt(playerid, "category_furniture"));
	    return 1;
	}

    if (pTemp[playerid][pFurniture] == -1) return 1;

    new building = pTemp[playerid][pFurniture],
        index = GetPVarInt(playerid, "furniture_index");

    listitem = GetPVarInt(playerid, "category_furniture");

    if (GetCash(playerid) < furniture_list[listitem][index][frPrice]) 								  return SendNotCash(playerid);
    if (listitem == 28 && GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) == -1)	     	  return SendErrorMessage(playerid, "Bu mobilyayý satýn almak için dýþarýda olmalýsýnýz.");
    else if (listitem != 28 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) == -1)		  return SendErrorMessage(playerid, "Bu mobilyayý satýn almak için içeride olmalýsýnýz.");
    if (GetFurnitures(playerid) >= GetMaxPlayerFurniture(playerid))   								  return SendErrorMessage(playerid, "Maksimum mobilya sýnýrýna ulaþtýnýz.");
    if (listitem == 28 && GetOutsideFurnitures(playerid) >= 9 && GetOutsideFurnitures(playerid) <= 0) return SendErrorMessage(playerid, "Dýþarýya maksimum 10 adet mobilya koyabilirsiniz.");

    new i = -1;

	switch(pTemp[playerid][pFurnitureB]) {
		case 0: {
			for(new a; a < MAX_FURNITURE; a++)
			{
				if (HFurn[building][a][fOn]) continue;

				i = a;
				break;
			}
		} case 1: {
			for(new a; a < MAX_FURNITURE; a++)
			{
				if (BFurn[building][a][fOn]) continue;

				i = a;
				break;
			}
		} case 2: {
			for(new a; a < MAX_FURNITURE; a++)
			{
				if (GFurn[building][a][fOn]) continue;

				i = a;
				break;
			}
		}
	}

	if (i == -1) return 1;

	SetPVarInt(playerid, "buy_furniture", 1);

	new Float:x, Float:y, Float:z;
    GetXYInFrontOfPlayer(playerid, x, y, z, 3.0);

	switch(pTemp[playerid][pFurnitureB]) {
		case 0: OnPlayerCallBuyFurniture(playerid, building, 0, i, furniture_list[listitem][index][frModel], listitem, index, x, y, z-1.0);
		case 1: OnPlayerCallBuyFurniture(playerid, building, 1, i, furniture_list[listitem][index][frModel], listitem, index, x, y, z-1.0);
		case 2: OnPlayerCallBuyFurniture(playerid, building, 2, i, furniture_list[listitem][index][frModel], listitem, index, x, y, z-1.0);
	}
	return 1;
}

Dialog:CopyFurniture(playerid, response, listitem, inputtext[])
{
	if (!response)
		return CallRemoteFunction("ShowEditFurniture", "i", playerid);

    if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1))
		return 1;

	if (GetFurnitures(playerid) >= GetMaxPlayerFurniture(playerid))
		return SendErrorMessage(playerid, "Maksimum mobilya sýnýrýna ulaþtýnýz.");

    new building = pTemp[playerid][pFurniture], slot = GetPVarInt(playerid, "chose_slot");

	switch(pTemp[playerid][pFurnitureB])
	{
		case 0: HouseFurnCopy(playerid, building, slot);
		case 1: BizFurnCopy(playerid, building, slot);
		case 2: GarageFurnCopy(playerid, building, slot);
	}

	return 1;
}

Dialog:HandleSellFurnitures(playerid, response, listitem, inputtext[])
{
	if (!response)																																												return pc_cmd_dekorasyon(playerid, "");
    if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1))	return 1;

	new building = pTemp[playerid][pFurniture];

	if (HouseInfo[building][hOwnerID] != PlayerInfo[playerid][pID] && pTemp[playerid][pBuildHouse] != HouseInfo[building][hID])	return SendErrorMessage (playerid, "Evin kendi mobilyalarýný deðiþtiremezsiniz.");
    if (GetPVarInt(playerid, "buy_furniture"))																					return SendErrorMessage (playerid, "Bu iþlemi þu an yapýyorsunuz.");

	switch(pTemp[playerid][pFurnitureB]) {
		case 0: HouseHandleSellFurn(playerid, building);
		case 1: BizHandleSellFurn(playerid, building);
		case 2: GarageHandleSellFurn(playerid, building);
	}
	return 1;
}

Dialog:HandleSellFurniture(playerid, response, listitem, inputtext[])
{
    if (!response)	return CallRemoteFunction("ShowEditFurniture", "i", playerid);
    if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1))	return 1;

	new building = pTemp[playerid][pFurniture], name[64], f_price, slot = GetPVarInt(playerid, "chose_slot");

	switch(pTemp[playerid][pFurnitureB])
	{
		case 0: {
			if (!HFurn[building][slot][fOn])	return SendErrorMessage(playerid, "Bu slotta satýn alýnmýþ bir þey yok, boþ.");
			if (HouseInfo[building][hOwnerID] != PlayerInfo[playerid][pID] && pTemp[playerid][pBuildHouse] != HouseInfo[building][hID])	return SendErrorMessage(playerid, "Evin kendi mobilyalarýný deðiþtiremezsiniz.");

			f_price = HFurn[building][slot][fMarketPrice];
			format(name, sizeof(name), "%s", HFurn[building][slot][fName]);
		} case 1: {
			if (!BFurn[building][slot][fOn])	return SendErrorMessage(playerid, "Bu slotta satýn alýnmýþ bir þey yok, boþ.");
			if (BizInfo[building][bizOwnerID] != PlayerInfo[playerid][pID] && pTemp[playerid][pBuildHouse] != BizInfo[building][bizID])	return SendErrorMessage(playerid, "Ýþyerinin kendi mobilyalarýný deðiþtiremezsiniz.");

			f_price = BFurn[building][slot][fMarketPrice];
			format(name, sizeof(name), "%s", BFurn[building][slot][fName]);
		} case 2: {
			if (!GFurn[building][slot][fOn])	return SendErrorMessage(playerid, "Bu slotta satýn alýnmýþ bir þey yok, boþ.");
			if (GarageInfo[building][garageOwner] != PlayerInfo[playerid][pID] && pTemp[playerid][pBuildHouse] != GarageInfo[building][garageID])	return SendErrorMessage(playerid, "Garajýn kendi mobilyalarýný deðiþtiremezsiniz.");

			f_price = GFurn[building][slot][fMarketPrice];
			format(name, sizeof(name), "%s", GFurn[building][slot][fName]);
		}
	}

	new sellprice = (f_price - (f_price & 2)) / 2;
	SendSyntaxMessage(playerid, "%s adlý mobilya $%s tutarýna geri satýldý.", name, FormatNumber(sellprice));

    if (!GetPVarInt(playerid, "buy_furniture")) GiveCash(playerid, sellprice);

	OnPlayerSellFurniture(pTemp[playerid][pFurnitureB], building, slot);
	return 1;
}


Dialog:MODEL_SEL_FURNITURE(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1)) return 1;

	    ShowFurnitureCategories(playerid);
	    return 1;
	}

	if (pTemp[playerid][pFurniture] == -1 || (GetNearOutBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1 && GetNearInBuilding(playerid, pTemp[playerid][pFurnitureB]) != -1)) return 1;

	new building = pTemp[playerid][pFurniture],
        list = GetPVarInt(playerid, "category_furniture");

	if (GetFurnitures(playerid) >= GetMaxPlayerFurniture(playerid))	return SendErrorMessage(playerid, "Maksimum mobilya sýnýrýna ulaþtýnýz.");
	if (list == 28 && GetOutsideFurnitures(playerid) >= 9 && GetOutsideFurnitures(playerid) <= 0) return SendErrorMessage(playerid, "Dýþarýya maksimum 10 mobilya koyabilirsiniz.");

	new model = furniture_list[list][listitem][frModel];
/*	if (list == 29 && (model == REACTOR_OBJECT || model == DRYER_OBJECT || model == MIXER_OBJECT)) {
		if (GetClosestFurniture(playerid, 30.0, model, DRUG_LAB) != -1) return SendErrorMessage(playerid, "%s zaten bulunuyor.", furniture_list[list][listitem][frName]);
	}*/

	new i = -1;

	switch(pTemp[playerid][pFurnitureB])
	{
		case 0: {
			for(new a; a < MAX_FURNITURE; a++)
			{
				if (!HFurn[building][a][fOn])
				{
					i = a;
					break;
				}
			}
			if (i == -1) return 1;
		} case 1: {
			for(new a; a < MAX_FURNITURE; a++)
			{
				if (!BFurn[building][a][fOn])
				{
					i = a;
					break;
				}
			}
			if (i == -1) return 1;
		} case 2: {
			for(new a; a < MAX_FURNITURE; a++)
			{
				if (!GFurn[building][a][fOn])
				{
					i = a;
					break;
				}
			}
			if (i == -1) return 1;
		}
	}

	static const str_size[] = "{C3C3C3}Kategori:\t{ffffff}%s\n{C3C3C3}Ýsim:\t{ffffff}%s\n{C3C3C3}Fiyat:\t{ffffff}$%s\n{ffffff}";
	new mes[sizeof(str_size) - 6 + 11 + 32 + 64];

	format(mes, sizeof(mes), str_size, furniture_title[list], furniture_list[list][listitem][frName], FormatNumber(furniture_list[list][listitem][frPrice]));
	SetPVarInt(playerid, "furniture_index", listitem);

	Dialog_Show(playerid, BuyFurniture, DIALOG_STYLE_MSGBOX, "Mobilya satýn al", mes, "Satýn Al", "Geri Dön");
	return 1;
}

FurnBuingDialog(playerid, listitem)
{
    SetPVarInt(playerid, "category_furniture", listitem);

    new objects = furniture_objects[listitem], object_names[153], object_amounts[153];

	for(new i; i < objects; i++)
	{
		object_names[i] = furniture_list[listitem][i][frModel];
	    object_amounts[i] = furniture_list[listitem][i][frPrice];
	}

	new mes[sizeof(object_names)*16];
	for(new i = 0; i < sizeof(object_names); i++)
	{
		if (object_names[i]) format(mes, sizeof(mes), "%s%i\t~g~$%i\n", mes, object_names[i], object_amounts[i]);
	}

	new title[64];
	format(title, sizeof(title), "MOBILYA SATIN ALINIYOR > %s", furniture_title[listitem]);
	Dialog_Show(playerid, MODEL_SEL_FURNITURE, DIALOG_STYLE_PREVIEW_MODEL, title, mes, "Sec", "Kapat");
}
CMD:dekorasyon(playerid, params[])
{
	if (!PlayerInfo[playerid][pAdmin]) return SendErrorMessage(playerid, "Beta döneminde bu sistem pasiftir.");

    if (GetPVarInt(playerid, "buy_furniture"))	return SendErrorMessage (playerid, "Zaten þu an dekorasyon sistemindesin.");

	new type = GetNearBuilding(playerid);
	if (type == -1) return SendErrorMessage(playerid, "Mülke yakýn olmalýsýn.");

	switch(type)
	{
		case 0: HouseFurn(playerid);
		case 1: BizFurn(playerid);
		case 2: GarageFurn(playerid);
	}

	Check3DMenu(playerid);
	return 1;
}
Garage_OnPlayerEnterDynamicCP(playerid, checkpointid) //÷åêïîèíò
{
   if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        for(new i = 0; i < MAX_GARAGES; i++)
		{
		    if (!GarageInfo[i][garageID] || GarageInfo[i][garageCP] != checkpointid) continue;

		    if (GarageInfo[i][garageOwner])
		    {
				new label_title[128], label_str1[128], label_str2[128], label_str3[128];

				format(label_title, 128, "~w~Garaj");
				format(label_str1, 128, "~w~Bu garaj %s adli kisiye aittir.", GarageInfo[i][garageOwnerName]);
				format(label_str2, 128, "~w~Giris yapmak icin ~y~/giris~w~ yaz veya ~y~'Y' ~w~tusuna bas.");
				format(label_str3, 128, "~w~( ID: %d )", i);
				CreateLableText(playerid, label_title, label_str1, label_str2, label_str3);
			}
			else if (!GarageInfo[i][garageOwner] && !GarageInfo[i][garageHouse] && !GarageInfo[i][garageBiz])
			{
				new label_title[128], label_str1[128], label_str2[128], label_str3[128];

				format(label_title, 128, "~w~Garaj");
				format(label_str1, 128, "~w~Satilik: $%d", GarageInfo[i][garagePrice]);
				format(label_str2, 128, "~w~Satin almak icin ~y~/garaj satinal~w~ yaz.");
				format(label_str3, 128, "~w~( ID: %d )", i);
				CreateLableText(playerid, label_title, label_str1, label_str2, label_str3);
			}
			else if (!GarageInfo[i][garageOwner] && GarageInfo[i][garageHouse])
			{
				new label_title[128], label_str1[128], label_str2[128], label_str3[128];

				format(label_title, 128, "~w~Garaj");
				format(label_str1, 128, "~w~Satilik: $%d (Eve ait: %d)", GarageInfo[i][garagePrice], GarageInfo[i][garageHouse]);
				format(label_str2, 128, "~w~Satin almak icin ~y~/garaj satinal~w~ yaz.");
				format(label_str3, 128, "~w~( ID: %d )", i);
				CreateLableText(playerid, label_title, label_str1, label_str2, label_str3);
			}
			else if (!GarageInfo[i][garageOwner] && GarageInfo[i][garageBiz])
			{
				new label_title[128], label_str1[128], label_str2[128], label_str3[128];

				format(label_title, 128, "~w~Garaj");
				format(label_str1, 128, "~w~Satilik: $%d (Isletmeye ait: %d)", GarageInfo[i][garagePrice], GarageInfo[i][garageBiz]);
				format(label_str2, 128, "~w~Satin almak icin ~y~/garaj satinal~w~ yaz.");
				format(label_str3, 128, "~w~( ID: %d )", i);
				CreateLableText(playerid, label_title, label_str1, label_str2, label_str3);
			}
			return 1;
		}
    }
    return 1;
}

Garage_OnGameModeInit()
{
    return mysql_tquery(dbHandle, "SELECT *, (SELECT name FROM users WHERE id = garage.owner) as ownername FROM `garage`", "LoadDynamicGarage");
}
this::LoadDynamicGarage()
{
	new rows = cache_num_rows(), time = GetTickCount(), total, query[256];

	if (!rows) return print("[Garage] Kayit bulunamadi.");

	for(new i = 0; i < rows; i++)
	{
cache_get_value_int(i, "id", GarageInfo[i][garageID]);
cache_get_value_int(i, "owner", GarageInfo[i][garageOwner]);
cache_get_value_int(i, "house", GarageInfo[i][garageHouse]);
cache_get_value_int(i, "biz", GarageInfo[i][garageBiz]);
cache_get_value_int(i, "ddoor", GarageInfo[i][garageDDoor]);
cache_get_value_int(i, "price", GarageInfo[i][garagePrice]);
cache_get_value_int(i, "locked", GarageInfo[i][garageLocked]);
cache_get_value_int(i, "enter_int", GarageInfo[i][garageEnterInt]);
cache_get_value_int(i, "enter_vw", GarageInfo[i][garageEnterVW]);
cache_get_value_float(i, "player_enter_x", GarageInfo[i][garagePlayer_Enter][0]);
cache_get_value_float(i, "player_enter_y", GarageInfo[i][garagePlayer_Enter][1]);
cache_get_value_float(i, "player_enter_z", GarageInfo[i][garagePlayer_Enter][2]);
cache_get_value_int(i, "exit_int", GarageInfo[i][garageExitInt]);
GarageInfo[i][garageExitVW] = GarageInfo[i][garageID] + 100;
cache_get_value_float(i, "player_exit_x", GarageInfo[i][garagePlayer_Exit][0]);
cache_get_value_float(i, "player_exit_y", GarageInfo[i][garagePlayer_Exit][1]);
cache_get_value_float(i, "player_exit_z", GarageInfo[i][garagePlayer_Exit][2]);
cache_get_value_float(i, "veh_enter_x", GarageInfo[i][garageVeh_Enter][0]);
cache_get_value_float(i, "veh_enter_y", GarageInfo[i][garageVeh_Enter][1]);
cache_get_value_float(i, "veh_enter_z", GarageInfo[i][garageVeh_Enter][2]);
cache_get_value_float(i, "veh_enter_fa", GarageInfo[i][garageVeh_Enter][3]);
cache_get_value_float(i, "veh_exit_x", GarageInfo[i][garageVeh_Exit][0]);
cache_get_value_float(i, "veh_exit_y", GarageInfo[i][garageVeh_Exit][1]);
cache_get_value_float(i, "veh_exit_z", GarageInfo[i][garageVeh_Exit][2]);
cache_get_value_float(i, "veh_exit_fa", GarageInfo[i][garageVeh_Exit][3]);
        cache_get_value(i, "ownername", GarageInfo[i][garageOwnerName], MAX_PLAYER_NAME);
		strreplace(GarageInfo[i][garageOwnerName], '_', ' ');
		GarageInfo[i][garageCP] = CreateDynamicCP(GarageInfo[i][garagePlayer_Enter][0], GarageInfo[i][garagePlayer_Enter][1], GarageInfo[i][garagePlayer_Enter][2], 0.9, GarageInfo[i][garageEnterVW], GarageInfo[i][garageEnterInt], -1, 3.0);

		format(query, sizeof(query), "SELECT * FROM `furnitures` WHERE `building`=%i AND `bType`=2", GarageInfo[i][garageID]);
		mysql_tquery(dbHandle, query, "OnGFurnsLoad", "i", i);

		total++;
	}
	printf("[Garage] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

this::OnGFurnsLoad(garageid)
{
	if (!cache_num_rows())	return 1;

	new tid;

	for(new i; i < cache_num_rows(); i++)
	{
		cache_get_value_index_int(i, 0, GFurn[garageid][i][fID]);
	    cache_get_value_index_int(i, 1, GFurn[garageid][i][fModel]);
		cache_get_value_index(i, 2, GFurn[garageid][i][fName], 64);
		//GFurn[garageid][i][fBuildingID] = garageid;
		cache_get_value_index_int(i, 5, GFurn[garageid][i][fInterior]);
		cache_get_value_index_int(i, 6, GFurn[garageid][i][fVirtualWorld]);
	    cache_get_value_index_int(i, 7, GFurn[garageid][i][fMarketPrice]);
		cache_get_value_index_float(i, 8, GFurn[garageid][i][fPosX]);
		cache_get_value_index_float(i, 9, GFurn[garageid][i][fPosY]);
		cache_get_value_index_float(i, 10, GFurn[garageid][i][fPosZ]);
		cache_get_value_index_float(i, 11, GFurn[garageid][i][fPosRX]);
		cache_get_value_index_float(i, 12, GFurn[garageid][i][fPosRY]);
		cache_get_value_index_float(i, 13, GFurn[garageid][i][fPosRZ]);
	    cache_get_value_index_int(i, 14, GFurn[garageid][i][fTexture][0]);
		cache_get_value_index_int(i, 15, GFurn[garageid][i][fTexture][1]);
		cache_get_value_index_int(i, 16, GFurn[garageid][i][fTexture][2]);
		cache_get_value_index_int(i, 17, GFurn[garageid][i][fTexture][3]);
		cache_get_value_index_int(i, 18, GFurn[garageid][i][fTexture][4]);
		cache_get_value_index_int(i, 19, GFurn[garageid][i][fCategory]);
		cache_get_value_index_int(i, 20, GFurn[garageid][i][ChemIdx]);

		GFurn[garageid][i][fOn] = 1;
		GFurn[garageid][i][fObject] = CreateDynamicObject(GFurn[garageid][i][fModel], GFurn[garageid][i][fPosX], GFurn[garageid][i][fPosY], GFurn[garageid][i][fPosZ], GFurn[garageid][i][fPosRX], GFurn[garageid][i][fPosRY], GFurn[garageid][i][fPosRZ], GFurn[garageid][i][fVirtualWorld], GFurn[garageid][i][fInterior]);

		for(new a; a != 5; a++)
		{
		    if (GFurn[garageid][i][fTexture][a] == -1) continue;

			tid = GFurn[garageid][i][fTexture][a];
			SetDynamicObjectMaterial(GFurn[garageid][i][fObject], a, ObjectTextures[tid][TModel], ObjectTextures[tid][TXDName], ObjectTextures[tid][TextureName], ObjectTextures[tid][MaterialColor]);
		}

		if (isHouseDoor(GFurn[garageid][i][fModel]))
		{
			GFurn[garageid][i][fLocked] = 1;
			GFurn[garageid][i][fOpened] = 0;
		}

		GarageInfo[garageid][gFurniture]++;

		if (GFurn[garageid][i][fVirtualWorld] != GarageInfo[garageid][garageExitVW]) GarageInfo[garageid][gOutsideFurniture]++;

	}
	return 1;
}

this::GarageInsert(garageid)
{
	return GarageInfo[garageid][garageID] = cache_insert_id();
}

Garage_Create(playerid, type, price, tie = 0, id = 0)
{
    for(new i = 0; i < MAX_GARAGES; i++)
	{
	    if (GarageInfo[i][garageID]) continue;

	    GarageInfo[i][garagePrice] = price;
     	GarageInfo[i][garageHouse] = 0;
	    GarageInfo[i][garageBiz] = 0;
	    GarageInfo[i][garageOwner] = 0;

		GarageInfo[i][garageDDoor] = 0;

     	if (tie == 1)
		{
	 		GarageInfo[i][garageHouse] = HouseInfo[id][hID];
			GarageInfo[i][garageOwner] = HouseInfo[id][hOwnerID];

			format(GarageInfo[id][garageOwnerName], 24, "%s", GetPlayerNameBySqlID(GarageInfo[i][garageOwner]));
			SQL_SetInteger("garage", "owner", GarageInfo[id][garageOwner], GarageInfo[id][garageID]);
			SQL_SetString("users", "name", GarageInfo[id][garageOwnerName], GarageInfo[id][garageOwner]);
		} else if (tie == 2)	{
		 	GarageInfo[i][garageBiz] = BizInfo[id][bizID];
		 	GarageInfo[i][garageOwner] = BizInfo[id][bizOwnerID];

			format(GarageInfo[id][garageOwnerName], 24, "%s", GetPlayerNameBySqlID(GarageInfo[i][garageOwner]));
			SQL_SetInteger("garage", "owner", GarageInfo[id][garageOwner], GarageInfo[id][garageID]);
			SQL_SetString("users", "name", GarageInfo[id][garageOwnerName], GarageInfo[id][garageOwner]);
		}

	    GetPlayerPos(playerid, GarageInfo[i][garagePlayer_Enter][0], GarageInfo[i][garagePlayer_Enter][1], GarageInfo[i][garagePlayer_Enter][2]);
	    GetPlayerPos(playerid, GarageInfo[i][garageVeh_Enter][0], GarageInfo[i][garageVeh_Enter][1], GarageInfo[i][garageVeh_Enter][2]);

        GarageInfo[i][garageEnterInt] = GetInterior(playerid);
		GarageInfo[i][garageEnterVW] = GetWorld(playerid);
	    GarageInfo[i][garagePlayer_Exit][0] = garage_player_pos[type-1][0];
	    GarageInfo[i][garagePlayer_Exit][1] = garage_player_pos[type-1][1];
	    GarageInfo[i][garagePlayer_Exit][2] = garage_player_pos[type-1][2];
	    GarageInfo[i][garageVeh_Exit][0] = garage_veh_pos[type-1][0];
	    GarageInfo[i][garageVeh_Exit][1] = garage_veh_pos[type-1][1];
	    GarageInfo[i][garageVeh_Exit][2] = garage_veh_pos[type-1][2];
	    GarageInfo[i][garageVeh_Exit][3] = garage_veh_pos[type-1][3];
	    GarageInfo[i][garageExitInt] = garage_int[type-1];
	    GarageInfo[i][garageExitVW] = GarageInfo[i][garageID] + 100;
	    GarageInfo[i][garageCP] = CreateDynamicCP(GarageInfo[i][garagePlayer_Enter][0], GarageInfo[i][garagePlayer_Enter][1], GarageInfo[i][garagePlayer_Enter][2], 0.9, GarageInfo[i][garageEnterVW], GarageInfo[i][garageEnterInt], -1, 3.0);
		SendSyntaxMessage(playerid, "Bir garaj oluþturdun. [ID: %i].", i);
        SendSyntaxMessage(playerid, "Garajýn araç spawn pozisyonunu düzenlemeyi unutmayýn - /agarage edit.");

		new query[512];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `garage` (`price`,`house`,`biz`,`ddoor`,`player_enter_x`,`player_enter_y`,`player_enter_z`,`player_exit_x`,`player_exit_y`,`player_exit_z`,`veh_enter_x`,`veh_enter_y`,`veh_enter_z`,`veh_enter_fa`,`veh_exit_x`,`veh_exit_y`,`veh_exit_z`,`veh_exit_fa`,`exit_int`,`enter_int`,`enter_vw`) VALUES (%i,%i,%i,%i,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%i,%i,%i)",
		GarageInfo[i][garagePrice],
		GarageInfo[i][garageHouse],
		GarageInfo[i][garageBiz],
		GarageInfo[i][garageDDoor],
		GarageInfo[i][garagePlayer_Enter][0],
		GarageInfo[i][garagePlayer_Enter][1],
		GarageInfo[i][garagePlayer_Enter][2],
		GarageInfo[i][garagePlayer_Exit][0],
		GarageInfo[i][garagePlayer_Exit][1],
		GarageInfo[i][garagePlayer_Exit][2],
		GarageInfo[i][garagePlayer_Enter][0],
		GarageInfo[i][garagePlayer_Enter][1],
		GarageInfo[i][garagePlayer_Enter][2],
		GarageInfo[i][garageVeh_Enter][0],
		GarageInfo[i][garageVeh_Enter][1],
		GarageInfo[i][garageVeh_Enter][2],
		GarageInfo[i][garageVeh_Enter][3],
		GarageInfo[i][garageVeh_Exit][0],
		GarageInfo[i][garageVeh_Exit][1],
		GarageInfo[i][garageVeh_Exit][2],
		GarageInfo[i][garageVeh_Exit][3],
		GarageInfo[i][garageExitInt],
		GarageInfo[i][garageEnterInt],
		GarageInfo[i][garageEnterVW]);
		mysql_tquery(dbHandle, query, "GarageInsert", "i", i);
		return i;
	}
	return -1;
}

GetNearOutsideGarage(playerid, Float:radius = 2.0)
{
	if (GetInterior(playerid)) return -1;

    for(new i = 0; i < MAX_GARAGES; i++)
	{
	    if (!GarageInfo[i][garageID]) continue;

		if(!IsPlayerInAnyVehicle(i)) {
			if (GetWorld(playerid) == GarageInfo[i][garageEnterVW] && GetInterior(playerid) == GarageInfo[i][garageEnterInt] && IsPlayerInRangeOfPoint(playerid, radius, GarageInfo[i][garagePlayer_Enter][0], GarageInfo[i][garagePlayer_Enter][1], GarageInfo[i][garagePlayer_Enter][2])) {
				return i;
			}
		}
        else if (GetWorld(playerid) == GarageInfo[i][garageEnterVW] && GetInterior(playerid) == GarageInfo[i][garageEnterInt] && IsPlayerInRangeOfPoint(playerid, radius+1.0, GarageInfo[i][garageVeh_Enter][0], GarageInfo[i][garageVeh_Enter][1], GarageInfo[i][garageVeh_Enter][2])) {
			return i;
		}
	}
	return -1;
}

GetNearInsideGarage(playerid, Float:radius = 2.5)
{
	if (!GetInterior(playerid)) return -1;

    for(new i = 0; i < MAX_GARAGES; i++)
	{
	    if (!GarageInfo[i][garageID]) continue;

		if(!IsPlayerInAnyVehicle(i)) {
			if (IsPlayerInRangeOfPoint(playerid, radius, GarageInfo[i][garagePlayer_Exit][0], GarageInfo[i][garagePlayer_Exit][1], GarageInfo[i][garagePlayer_Exit][2]) && GetInterior(playerid) == GarageInfo[i][garageExitInt] && GetWorld(playerid) == GarageInfo[i][garageExitVW])
			{
				return i;
			}
		}
        else if (IsPlayerInRangeOfPoint(playerid, radius+1.0, GarageInfo[i][garageVeh_Exit][0], GarageInfo[i][garageVeh_Exit][1], GarageInfo[i][garageVeh_Exit][2]) && GetInterior(playerid) == GarageInfo[i][garageExitInt] && GetWorld(playerid) == GarageInfo[i][garageExitVW])
		{
			return i;
		}
	}
	return -1;
}

GetNearGarage(playerid, Float:radius = 3.0)
{
    new garage = GetNearInsideGarage(playerid, radius);

	if (garage == -1)		garage = GetNearOutsideGarage(playerid, radius);
	if (garage != -1)		return garage;

	return -1;
}
/* çàãðóçêà
OnFurnitureInsert_Garage(building, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z, category, Float:rx, Float:ry, Float:rz, texture_0, texture_1, texture_2, texture_3, texture_4)
{
	GFurn[building][furnitureslot][fID] = cache_insert_id();
	GFurn[building][furnitureslot][fBuildingID] = building;
	GFurn[building][furnitureslot][fInterior] = interior;
	GFurn[building][furnitureslot][fVirtualWorld] = world;
	GFurn[building][furnitureslot][fMarketPrice] = price;
	GFurn[building][furnitureslot][fModel] = model;
	GFurn[building][furnitureslot][fPosX] = x;
	GFurn[building][furnitureslot][fPosY] = y;
	GFurn[building][furnitureslot][fPosZ] = z;
	GFurn[building][furnitureslot][fPosRX] = rx;
	GFurn[building][furnitureslot][fPosRY] = ry;
	GFurn[building][furnitureslot][fPosRZ] = rz;
	format(GFurn[building][furnitureslot][fName], 64, name);
	GFurn[building][furnitureslot][fOn] = 1;
	GFurn[building][furnitureslot][fCategory] = category;
	GFurn[building][furnitureslot][fTexture][0] = texture_0;
	GFurn[building][furnitureslot][fTexture][1] = texture_1;
	GFurn[building][furnitureslot][fTexture][2] = texture_2;
	GFurn[building][furnitureslot][fTexture][3] = texture_3;
	GFurn[building][furnitureslot][fTexture][4] = texture_4;

	GarageInfo[building][gFurniture]++;

	if (GFurn[building][furnitureslot][fVirtualWorld] != GarageInfo[building][garageExitVW]) GarageInfo[building][gOutsideFurniture]++;

	return 1;
}*/

GarageFurn(playerid)
{
	new garage = GetNearGarage(playerid);
	if (GarageInfo[garage][garageOwner] != PlayerInfo[playerid][pID] && GarageInfo[garage][garageID] != pTemp[playerid][pBuildHouse])
		return SendErrorMessage(playerid, "Bu garajýn mobilyalarýný düzenleme yetkiniz yok.");

	new title[37];
	format(title, sizeof(title), "{FFFFFF}Garaj Mobilyalarý [ %i ]", GarageInfo[garage][garageID]);

	pTemp[playerid][pFurniture] = garage;
	pTemp[playerid][pFurnitureB] = 2;
	Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, title, "Mobilya satýn al\nMobilya düzenle\nTüm mobilyalarý sat", "Seç", "Ýptal");
	return 1;
}

GarageFurnCopy(playerid, building, slot)
{
	if (GetCash(playerid) < GFurn[building][slot][fMarketPrice])
		return SendNotCash(playerid);

    if (GFurn[building][slot][fCategory] == 28 && GarageInfo[building][gOutsideFurniture] > 9)
		return SendErrorMessage(playerid, "Dýþarýya maksimum 10 mobilya koyabilirsiniz.");

	new i = -1;

	for(new a; a < MAX_FURNITURE; a++)
	{
	    if (GFurn[building][a][fOn] != 0) continue;

   		i = a;
		break;
	}

	if (i == -1) return 1;

	//GFurn[building][i][fObject] = CreateDynamicObject(GFurn[building][slot][fModel], GFurn[building][slot][fPosX], GFurn[building][slot][fPosY], GFurn[building][slot][fPosZ], GFurn[building][slot][fPosRX], GFurn[building][slot][fPosRY], GFurn[building][slot][fPosRZ], GFurn[building][slot][fVirtualWorld], GFurn[building][slot][fInterior]);

	new tid[5];
    for(new b; b != 5; b++)
	{
		tid[b] = -1;
 		if (GFurn[building][slot][fTexture][b] != -1) tid[b] = GFurn[building][slot][fTexture][b];
	}

	new f_index = GetFurnitureIndex(GFurn[building][slot][fCategory], GFurn[building][slot][fModel]);
	SetPVarInt(playerid, "buy_furniture", 2);
	OnPlayerCallBuyFurniture(playerid, building, 2, i, GFurn[building][slot][fModel], GFurn[building][slot][fCategory], f_index, GFurn[building][slot][fPosX], GFurn[building][slot][fPosY], GFurn[building][slot][fPosZ], GFurn[building][slot][fPosRX], GFurn[building][slot][fPosRY], GFurn[building][slot][fPosRZ], tid[0], tid[1], tid[2], tid[3], tid[4]);
	return 1;
}

GarageHandleSellFurn(playerid, building)
{
	new paycheck;

	for(new i; i < MAX_FURNITURE; i++)
	{
	    if (!GFurn[building][i][fID] || !GFurn[building][i][fOn]) continue;

	    paycheck += (GFurn[building][i][fMarketPrice] - (GFurn[building][i][fMarketPrice] & 2))  / 2;
	    GFurn[building][i][fID] =
	    GFurn[building][i][fOn] = 0;
	    DestroyDynamicObject(GFurn[building][i][fObject]);
	}

    GarageInfo[building][gFurniture] =
    GarageInfo[building][gOutsideFurniture] = 0;

   	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `furnitures` WHERE `building` = %i AND `bType` = 2", GarageInfo[building][garageID]);
	mysql_tquery(dbHandle, query);

	SendSyntaxMessage(playerid, "Garajda bulunan tüm mobilyalar satýldý, geri ödenen: {FFFF00}$%i{FFFFFF}.", paycheck);
	GiveCash(playerid, paycheck);
	return 1;
}

CreateExplosionInGarage(building, idx, f)
{
	new count = 0;

	for(new i; i < MAX_FURNITURE; i++)
	{
		if (count > 5) break;

	    if (!GFurn[building][i][fOn] || !IsValidDynamicObject(GFurn[building][i][fObject])) continue;
		if (GFurn[building][i][fInterior] != GarageInfo[building][garageEnterInt] && GFurn[building][i][fVirtualWorld] != GarageInfo[building][garageEnterVW]) continue;
		if (GetDistanceBetweenPoints(GFurn[building][f][fPosX],GFurn[building][f][fPosY],GFurn[building][f][fPosZ],GFurn[building][i][fPosX],GFurn[building][i][fPosY],GFurn[building][i][fPosZ]) > 10.0) continue;
		if (!IsFurnitureFirable(GFurn[building][i][fCategory])) continue;

		new
			Float:fHitPosX = GFurn[building][i][fPosX],
			Float:fHitPosY = GFurn[building][i][fPosY],
			Float:fHitPosZ = GFurn[building][i][fPosZ],
			furnint = GFurn[building][i][fInterior],
			furnvw = GFurn[building][i][fVirtualWorld]
		;

		if (floatround(randomEx(0,100)) > 80) OnPlayerSellFurniture(0, building, i);
		count ++;

		new fireid = -1;
		for(new j; j != MAX_FIRES; j++)
		{
		    if (FiresInfo[j][fireOn] != 0) continue;

			fireid = j;
			break;
		}
		if (fireid == -1)	continue;

		FiresInfo[fireid][fireOn] = 1;
		FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, furnvw, furnint);
		FiresInfo[fireid][firePos][0] = fHitPosX;
		FiresInfo[fireid][firePos][1] = fHitPosY;
		FiresInfo[fireid][firePos][2] = fHitPosZ;
		FiresInfo[fireid][fireVW] = furnvw;
		FiresInfo[fireid][fireInt] = furnint;
		FiresInfo[fireid][fireHealth] = 100;
		FiresInfo[fireid][fireTimer] = 1800;

		FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, furnvw, furnint, -1, 100.0);
	}

	CreateDynamicExplosion(GFurn[building][f][fPosX],GFurn[building][f][fPosY],GFurn[building][f][fPosZ], 11, 10.0, GFurn[building][f][fVirtualWorld], GFurn[building][f][fInterior]);
	ClearFurnitureData(f, idx);

	new Float:fHitPosX = GarageInfo[building][garagePlayer_Enter][0],
		Float:fHitPosY = GarageInfo[building][garagePlayer_Enter][1],
		Float:fHitPosZ = GarageInfo[building][garagePlayer_Enter][2],
		furnint = GarageInfo[building][garageEnterInt],
		furnvw = GarageInfo[building][garageEnterVW]
	;

	new fireid = -1;
	for(new j; j != MAX_FIRES; j++)
	{
		if (FiresInfo[j][fireOn] != 0) continue;

		fireid = j;
		break;
	}
	if (fireid == -1)	return 1;

	FiresInfo[fireid][fireOn] = 1;
	FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, furnvw, furnint);
	FiresInfo[fireid][firePos][0] = fHitPosX;
	FiresInfo[fireid][firePos][1] = fHitPosY;
	FiresInfo[fireid][firePos][2] = fHitPosZ;
	FiresInfo[fireid][fireVW] = furnvw;
	FiresInfo[fireid][fireInt] = furnint;
	FiresInfo[fireid][fireHealth] = 100;
	FiresInfo[fireid][fireTimer] = 1800;

	FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, furnvw, furnint, -1, 100.0);

	return 1;
}

CreateFireInGarage(building)
{
	new count = 0;

	new Float:fHitPosX = GarageInfo[building][garagePlayer_Enter][0],
		Float:fHitPosY = GarageInfo[building][garagePlayer_Enter][1],
		Float:fHitPosZ = GarageInfo[building][garagePlayer_Enter][2],
		furnint = GarageInfo[building][garageEnterInt],
		furnvw = GarageInfo[building][garageEnterVW]
	;

	new fireid = -1;
	for(new j; j != MAX_FIRES; j++)
	{
		if (FiresInfo[j][fireOn] != 0) continue;

		fireid = j;
		break;
	}
	if (fireid == -1)	return 1;

	FiresInfo[fireid][fireOn] = 1;
	FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, furnvw, furnint);
	FiresInfo[fireid][firePos][0] = fHitPosX;
	FiresInfo[fireid][firePos][1] = fHitPosY;
	FiresInfo[fireid][firePos][2] = fHitPosZ;
	FiresInfo[fireid][fireVW] = furnvw;
	FiresInfo[fireid][fireInt] = furnint;
	FiresInfo[fireid][fireHealth] = 100;
	FiresInfo[fireid][fireTimer] = 1800;

	FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, furnvw, furnint, -1, 100.0);

	fHitPosX = GarageInfo[building][garagePlayer_Exit][0];
	fHitPosY = GarageInfo[building][garagePlayer_Exit][1];
	fHitPosZ = GarageInfo[building][garagePlayer_Exit][2];

	GarageInfo[building][gFireTimer] = gettime()+3600;

	new Float: x, Float: y, Float: z;
	for(new i; i < GetVehiclePoolSize(); i++)
	{
        GetVehiclePos(i, x, y, z);
		if (GetVehicleInteriorEx(i) == furnint && GetVehicleVirtualWorldEx(i) == furnvw) {
			if (GetDistanceBetweenPoints(fHitPosX,fHitPosY,fHitPosZ,x,y,z) < 30.0) {
				SetVehicleHealth(i, 350);
				if (VehicleInfo[i][carEngine] > 11) VehicleInfo[i][carEngine] -= 10;
				if (VehicleInfo[i][carBattery] > 11) VehicleInfo[i][carBattery] -= 10;
			}
		}
	}

	for(new i; i < MAX_FURNITURE; i++)
	{
		if (count > 5) break;

	    if (!GFurn[building][i][fOn] || !IsValidDynamicObject(GFurn[building][i][fObject])) continue;
		if (GFurn[building][i][fInterior] != GarageInfo[building][garageEnterInt] && GFurn[building][i][fVirtualWorld] != GarageInfo[building][garageEnterVW]) continue;
		if (GetDistanceBetweenPoints(fHitPosX,fHitPosY,fHitPosZ,GFurn[building][i][fPosX],GFurn[building][i][fPosY],GFurn[building][i][fPosZ]) > 10.0) continue;
		if (!IsFurnitureFirable(GFurn[building][i][fCategory])) continue;

		fHitPosX = GFurn[building][i][fPosX];
		fHitPosY = GFurn[building][i][fPosY];
		fHitPosZ = GFurn[building][i][fPosZ];
		furnint = GFurn[building][i][fInterior];
		furnvw = GFurn[building][i][fVirtualWorld];

		count++;

		for(new j; j != MAX_FIRES; j++)
		{
		    if (FiresInfo[j][fireOn] != 0) continue;

			fireid = j;
			break;
		}
		if (fireid == -1)	continue;

		FiresInfo[fireid][fireOn] = 1;
		FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, furnvw, furnint);
		FiresInfo[fireid][firePos][0] = fHitPosX;
		FiresInfo[fireid][firePos][1] = fHitPosY;
		FiresInfo[fireid][firePos][2] = fHitPosZ;
		FiresInfo[fireid][fireVW] = furnvw;
		FiresInfo[fireid][fireInt] = furnint;
		FiresInfo[fireid][fireHealth] = 100;
		FiresInfo[fireid][fireTimer] = 1800;

		FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, furnvw, furnint, -1, 100.0);
	}
	return 1;
}

Save_Garage(i)
{
    new query[1024];

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `price`=%i,`house`=%i,`biz`=%i,`ddoor`=%i,`player_enter_x`=%f,`player_enter_y`=%f,`player_enter_z`=%f,`player_exit_x`=%f,`player_exit_y`=%f,`player_exit_z`=%f,`veh_enter_x`=%f,`veh_enter_y`=%f,`veh_enter_z`=%f,`veh_enter_fa`=%f,`veh_exit_x`=%f,`veh_exit_y`=%f,`veh_exit_z`=%f,`veh_exit_fa`=%f,`exit_int`=%i,`enter_int`=%i,`enter_vw`=%i WHERE `id`=%i",
		GarageInfo[i][garagePrice],GarageInfo[i][garageHouse],GarageInfo[i][garageBiz], GarageInfo[i][garageDDoor], GarageInfo[i][garagePlayer_Enter][0], GarageInfo[i][garagePlayer_Enter][1], GarageInfo[i][garagePlayer_Enter][2], GarageInfo[i][garagePlayer_Exit][0],
		GarageInfo[i][garagePlayer_Exit][1], GarageInfo[i][garagePlayer_Exit][2], GarageInfo[i][garagePlayer_Enter][0], GarageInfo[i][garagePlayer_Enter][1], GarageInfo[i][garagePlayer_Enter][2], GarageInfo[i][garageVeh_Exit][0],
		GarageInfo[i][garageVeh_Exit][1], GarageInfo[i][garageVeh_Exit][2], GarageInfo[i][garageExitInt], GarageInfo[i][garageEnterInt], GarageInfo[i][garageEnterVW], GarageInfo[i][garageID]);
	mysql_tquery(dbHandle, query);

	return 1;
}

UpdateGarageDoor(garageid)
{
	if (IsValidDynamic3DTextLabel(GarageInfo[garageid][garageLabelDDoor]))
	{
	    DestroyDynamic3DTextLabel(GarageInfo[garageid][garageLabelDDoor]);
        GarageInfo[garageid][garageLabelDDoor] = Text3D:INVALID_3DTEXT_ID;
	}
	if (!GarageInfo[garageid][garageDDoor])	return 1;

    new door_str[][] =	{"KAPI CALDI", "KAPI PATLATILDI"};

	GarageInfo[garageid][garageLabelDDoor] = CreateDynamic3DTextLabel(door_str[GarageInfo[garageid][garageDDoor]-1], COLOR_LIGHTRED, GarageInfo[garageid][garagePlayer_Enter][0], GarageInfo[garageid][garagePlayer_Enter][1], GarageInfo[garageid][garagePlayer_Enter][2], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GarageInfo[garageid][garageEnterVW], GarageInfo[garageid][garageEnterInt], -1, 100.0);
	return 1;
}
alias:garaj("g");
CMD:garaj(playerid, params[])
{
	new id = GetNearGarage(playerid);

	if (id == -1)	return SendErrorMessage(playerid, "Garajýn yakýnýnda deðilsiniz.");

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "(/g)araj [bilgi / satinal / sistemesat / kapitamir]");
		return 1;
	}

	if (CompareStrings(option, "bilgi"))
	{
		new dialog_header[64] = "{FFFFFF}Bilgi\t{FFFFFF}Deðer\n", dialog_body[1024], temp[128];

		format(dialog_body, sizeof(dialog_body), "%s", dialog_header);

		format(temp, sizeof(temp), "ID\t%i\nÜcret\t%i\nKapý\t%s\n", id, GarageInfo[id][garagePrice], (GarageInfo[id][garageLocked]) ? ("Kilitli") : ("Açýk"));
		strcat(dialog_body, temp);

		if (GarageInfo[id][garageHouse])
		{
			format(temp, sizeof(temp), "Bir eve baðlý\t%i\n", GarageInfo[id][garageHouse]);
			strcat(dialog_body, temp);
		}

		if (GarageInfo[id][garageBiz])
		{
			format(temp, sizeof(temp), "Bir iþyerine baðlý\t%i\n", GarageInfo[id][garageBiz]);
			strcat(dialog_body, temp);
		}

		if (GarageInfo[id][garageOwner])
		{
			format(temp, sizeof(temp), "Sahip\t%s", GarageInfo[id][garageOwnerName]);
			strcat(dialog_body, temp);
		}

		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Garaj Bilgisi", dialog_body, "Kapat", "");
		return 1;
	}

	else if (CompareStrings(option, "satinal"))
	{
		if (GarageInfo[id][garageOwner])	return SendErrorMessage(playerid, "Bu garaj satýlýk deðil.");
		if (GarageInfo[id][garageHouse])	return SendErrorMessage(playerid, "Bu garaj bir eve baðlý.");
		if (GarageInfo[id][garageBiz])		return SendErrorMessage(playerid, "Bu garaj bir iþyerine baðlý.");

		new count = 0;

		for(new i = 0; i < MAX_GARAGES; i++)
		{
			if (!GarageInfo[i][garageID] || GarageInfo[i][garageHouse] || GarageInfo[i][garageBiz] || PlayerInfo[playerid][pID] != GarageInfo[i][garageOwner]) continue;

			count++;
			break;
		}

		if (count)												return SendErrorMessage(playerid, "Daha fazla garaj satýn alamazsýn.");
		if (GetCash(playerid) < GarageInfo[id][garagePrice])	return SendNotCash(playerid);

		new money = PlayerInfo[playerid][pCash];

		GiveCash(playerid, -GarageInfo[id][garagePrice]);
		SendSyntaxMessage(playerid, "Bir garaj satýn aldýn: [ID: %i] - $%i.", id, GarageInfo[id][garagePrice]);
		GarageInfo[id][garageOwner] = PlayerInfo[playerid][pID];
		format(GarageInfo[id][garageOwnerName], 24, "%s", GetNameEx(playerid));

		SQL_SetInteger("garage", "owner", GarageInfo[id][garageOwner], GarageInfo[id][garageID]);
		SQL_SetString("users", "name", GarageInfo[id][garageOwnerName], GarageInfo[id][garageOwner]);

		new mes[256];
		format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | Money (ONCEKI): %s | Money (SIMDIKI): %s] garaj satýn alýndý [G_MYSQL: %i] $%i", GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money, GetCash(playerid),
		GarageInfo[id][garageID], GarageInfo[id][garagePrice]);
		insert_log(mes, PROPERTY_LOG, 5, PlayerInfo[playerid][pAccID]);
		return 1;
	}

	else if (CompareStrings(option, "sistemesat"))
	{
		if (GarageInfo[id][garageOwner] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu garaj size ait deðil.");
		if (GarageInfo[id][garageHouse])								return SendErrorMessage(playerid, "Bu garaj bir eve baðlý.");
		if (GarageInfo[id][garageBiz])									return SendErrorMessage(playerid, "Bu garaj bir iþyerine baðlý.");



		new money = PlayerInfo[playerid][pCash];

		GiveCash(playerid, GarageInfo[id][garagePrice]);
		SendSyntaxMessage(playerid, "Garajý sattýn: [ID: %i] - $%i.", id, GarageInfo[id][garagePrice]);
		GarageInfo[id][garageOwner] = 0;
		GarageInfo[id][garageOwnerName][0] = EOS;
		SQL_SetInteger("garage", "owner", 0, GarageInfo[id][garageID]);
		//SQL_SetString("garage", "ownername", "", GarageInfo[id][garageID]);

		new mes[256];
		format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | Money (ONCEKI): %i | Money (SIMDIKI): %i] garaj satýldý [G_MYSQL: %i] $%i", GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money, GetCash(playerid),
		GarageInfo[id][garageID], GarageInfo[id][garagePrice]);
		insert_log(mes, PROPERTY_LOG, 6, PlayerInfo[playerid][pAccID]);
	}

	else if (CompareStrings(option, "kapitamir"))
	{
		if (!GarageInfo[id][garageDDoor])	 return SendErrorMessage(playerid,"Kapý hasarlý deðil.");
		if (GetCash(playerid) < 300)		 return SendErrorMessage(playerid, "Kapý tamir ücreti 300 dolardýr.");

		GarageInfo[id][garageDDoor] = 0;
		SQL_SetInteger("garage", "ddoor", GarageInfo[id][garageDDoor], GarageInfo[id][garageID]);
		UpdateGarageDoor(id);
		GiveCash(playerid, -300); //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ givecashex
		SendSyntaxMessage(playerid, "$300 karþýlýðýnda kapýyý tamir ettirdin.");
		return 1;
	}
	return 1;
}
House_OnPlayerSelectedMenuRow(playerid, row)
{
    if (GetPlayerMenu(playerid) != buy_interior) return 1;

	new houseid = pTemp[playerid][pInteriorHouse]-1;

	switch(row)
	{
	    case 0:
    	{
	        for(new i = pTemp[playerid][pInteriorID]+1; i < MAX_INTERIORS; i++)
	        {
	            if (!AdminTeles[i][telesOn] || HouseInfo[houseid][hClass] != AdminTeles[i][telesType]) continue;

                pTemp[playerid][pInteriorID] = i;
				DestroyPlayerObject(playerid, pTemp[playerid][pInteriorObj]);
	            pTemp[playerid][pInteriorObj] = CreatePlayerObject(playerid, 19300, AdminTeles[i][telesPosX], AdminTeles[i][telesPosY], AdminTeles[i][telesPosZ], 0.0, 0.0, 0.0);
				AttachCameraToPlayerObject(playerid, pTemp[playerid][pInteriorObj]);
			    break;
	        }

	        ShowMenuForPlayer(buy_interior, playerid);
		}

	    case 1:
		{
		    for(new i = pTemp[playerid][pInteriorID]-1; i != 0; i--)
	        {
	            if (!AdminTeles[i][telesOn] || HouseInfo[houseid][hClass] != AdminTeles[i][telesType]) continue;

                pTemp[playerid][pInteriorID] = i;
				DestroyPlayerObject(playerid, pTemp[playerid][pInteriorObj]);
	            pTemp[playerid][pInteriorObj] = CreatePlayerObject(playerid, 19300, AdminTeles[i][telesPosX], AdminTeles[i][telesPosY], AdminTeles[i][telesPosZ], 0.0, 0.0, 0.0);
				AttachCameraToPlayerObject(playerid, pTemp[playerid][pInteriorObj]);
			    break;
	        }

	        ShowMenuForPlayer(buy_interior, playerid);
		}

		case 2:
		{
		    new id = pTemp[playerid][pInteriorID];
		    if (!AdminTeles[id][telesOn] || HouseInfo[houseid][hClass] != AdminTeles[id][telesType])	return SendErrorMessage(playerid, "Interior hatasý."); //îøèáêà èíòû

			Dialog_Show(playerid, BuyInteriorAccept, DIALOG_STYLE_MSGBOX, "{FFFFFF}Interior", "{ffffff}$750 karþýlýðýnda bir ev dekorasyonu almak istiyorsunuz.\nSatýn alýnan tüm mobilyalar satýlacak!", "Satýn Al", "Ýptal");
		}
	    case 3:	SetPlayerBuyInterior(playerid, 0);

	}
    return 1;
}

Ho_OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		for(new i = 0; i < MAX_HOUSES; i++)
		{
		    if (!HouseInfo[i][hID] || (pickupid != HouseInfo[i][hPickup])) continue;

			new
				string[128]
			;

            if (!HouseInfo[i][hOwnerID] && pickupid == HouseInfo[i][hPickup])
			{
				new label_title[128], label_str1[128], label_str2[128], label_str3[128];

				format(label_title, 128, "~w~Ev");
				format(label_str1, 128, "~w~SATILIK: $%d", HouseInfo[i][hPrice]);
				format(label_str2, 128, "~w~Satin almak icin ~y~/ev satinal~w~, goz atmak icin ~y~/evigez ~w~ yaz.");
				format(label_str3, 128, "~w~( ID: %d )", i);

				CreateLableText(playerid, label_title, label_str1, label_str2, label_str3);
				return 1;
	   		}
			else if (HouseInfo[i][hOwnerID] != 0)
   			{
				if (pickupid == HouseInfo[i][hPickup])
				{
					new label_title[128], label_str1[128], label_str2[128], label_str3[128];

					format(label_title, 128, "~y~Ev");
					format(label_str1, 128, "~w~Bu ev ~y~ %s ~w~adli kisiye aittir.", HouseInfo[i][hOwner]);
					format(label_str2, 128, "~w~Giris yapmak icin ~y~/giris~w~ yaz veya ~y~'Y' ~w~tusuna bas.");
					format(label_str3, 128, "~w~( ID: ~y~%d~w~)", i);

					CreateLableText(playerid, label_title, label_str1, label_str2, label_str3);
				}
				else if (pickupid == HouseInfo[i][hPickup])
				{
					new label_title[128], label_str1[128], label_str2[128];

					format(label_title, 128, "~w~Arka Giris");
					format(label_str1, 128, "~w~Giris yapmak icin ~y~/giris~w~ yaz veya ~y~'Y' ~w~tusuna bas.");
					format(label_str2, 128, "~w~( ID: %d )", i);
					CreateLableText(playerid, label_title, label_str1, label_str2, " ");
				}
                return 1;
			}
		}
    }
    return 1;
}

House_OnGameModeInit()
{
    return mysql_tquery(dbHandle, "SELECT *, (SELECT name FROM users WHERE id = houses.owner) as ownername, (SELECT last_login FROM users WHERE id = houses.owner) as last_login FROM `houses`", "LoadDynamicHouses");
}

House_PlayerTimer(playerid)
{
	if (GetPVarInt(playerid, #check_int))
	{
	    UpdateIntVar(playerid, #check_int, -1);

	    new hid = -1;

		if (!GetPVarInt(playerid, #check_int) && (hid = GetNearInsideHouse(playerid)) != -1)
		{
			SetPlayerPosEx(playerid, HouseInfo[hid][hPosX], HouseInfo[hid][hPosY], HouseInfo[hid][hPosZ]);
			SetInterior(playerid, HouseInfo[hid][hPosInt]);
			SetWorld(playerid, HouseInfo[hid][hPosVW]);
		 	pTemp[playerid][pHouseEntered] = -1;
		    DeletePVar(playerid, #check_int);
		}
	}
	return 1;
}
this::OnHouseInsert(houseid)
{
	return HouseInfo[houseid][hID] = cache_insert_id();
}

this::OnHouseFurnituresLoad(houseid)
{
	if (!cache_num_rows())	return 1;

	new tid;

	for(new i; i < cache_num_rows(); i++)
	{
		cache_get_value_index_int(i, 0, HFurn[houseid][i][fID]);
	    cache_get_value_index_int(i, 1, HFurn[houseid][i][fModel]);
		cache_get_value_index(i, 2, HFurn[houseid][i][fName], 64);
		//HFurn[houseid][i][fBuildingID] = houseid;
		cache_get_value_index_int(i, 5, HFurn[houseid][i][fInterior]);
		cache_get_value_index_int(i, 6, HFurn[houseid][i][fVirtualWorld]);
	    cache_get_value_index_int(i, 7, HFurn[houseid][i][fMarketPrice]);
		cache_get_value_index_float(i, 8, HFurn[houseid][i][fPosX]);
		cache_get_value_index_float(i, 9, HFurn[houseid][i][fPosY]);
		cache_get_value_index_float(i, 10, HFurn[houseid][i][fPosZ]);
		cache_get_value_index_float(i, 11, HFurn[houseid][i][fPosRX]);
		cache_get_value_index_float(i, 12, HFurn[houseid][i][fPosRY]);
		cache_get_value_index_float(i, 13, HFurn[houseid][i][fPosRZ]);
	    cache_get_value_index_int(i, 14, HFurn[houseid][i][fTexture][0]);
		cache_get_value_index_int(i, 15, HFurn[houseid][i][fTexture][1]);
		cache_get_value_index_int(i, 16, HFurn[houseid][i][fTexture][2]);
		cache_get_value_index_int(i, 17, HFurn[houseid][i][fTexture][3]);
		cache_get_value_index_int(i, 18, HFurn[houseid][i][fTexture][4]);
		cache_get_value_index_int(i, 19, HFurn[houseid][i][fCategory]);
		cache_get_value_index_int(i, 20, HFurn[houseid][i][ChemIdx]);

		HFurn[houseid][i][fOn] = 1;
		HFurn[houseid][i][fObject] = CreateDynamicObject(HFurn[houseid][i][fModel], HFurn[houseid][i][fPosX], HFurn[houseid][i][fPosY], HFurn[houseid][i][fPosZ], HFurn[houseid][i][fPosRX], HFurn[houseid][i][fPosRY], HFurn[houseid][i][fPosRZ], HFurn[houseid][i][fVirtualWorld], HFurn[houseid][i][fInterior]);

		for(new a; a != 5; a++)
		{
		    if (HFurn[houseid][i][fTexture][a] == -1) continue;

			tid = HFurn[houseid][i][fTexture][a];
			SetDynamicObjectMaterial(HFurn[houseid][i][fObject], a, ObjectTextures[tid][TModel], ObjectTextures[tid][TXDName], ObjectTextures[tid][TextureName], ObjectTextures[tid][MaterialColor]);
		}

		if (isHouseDoor(HFurn[houseid][i][fModel]))
		{
			HFurn[houseid][i][fLocked] = 1;
			HFurn[houseid][i][fOpened] = 0;
		}

		HouseInfo[houseid][hFurniture]++;

		if (HFurn[houseid][i][fVirtualWorld] != HouseInfo[houseid][hExitVW]) HouseInfo[houseid][hOutsideFurniture]++;

	}
	return 1;
}

/*OnFurnitureInsert_House(building, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z, category, Float:rx, Float:ry, Float:rz, texture_0, texture_1, texture_2, texture_3, texture_4)
{
	HFurn[building][furnitureslot][fID] = cache_insert_id();
	HFurn[building][furnitureslot][fBuildingID] = building;
	HFurn[building][furnitureslot][fInterior] = interior;
	HFurn[building][furnitureslot][fVirtualWorld] = world;
	HFurn[building][furnitureslot][fMarketPrice] = price;
	HFurn[building][furnitureslot][fModel] = model;
	HFurn[building][furnitureslot][fPosX] = x;
	HFurn[building][furnitureslot][fPosY] = y;
	HFurn[building][furnitureslot][fPosZ] = z;
	HFurn[building][furnitureslot][fPosRX] = rx;
	HFurn[building][furnitureslot][fPosRY] = ry;
	HFurn[building][furnitureslot][fPosRZ] = rz;
	format(HFurn[building][furnitureslot][fName], 64, name);
	HFurn[building][furnitureslot][fOn] = 1;
	HFurn[building][furnitureslot][fCategory] = category;
	HFurn[building][furnitureslot][fTexture][0] = texture_0;
	HFurn[building][furnitureslot][fTexture][1] = texture_1;
	HFurn[building][furnitureslot][fTexture][2] = texture_2;
	HFurn[building][furnitureslot][fTexture][3] = texture_3;
	HFurn[building][furnitureslot][fTexture][4] = texture_4;

	HouseInfo[building][hFurniture]++;

	if (HFurn[building][furnitureslot][fVirtualWorld] != HouseInfo[building][hExitVW]) HouseInfo[building][hOutsideFurniture]++;

	return 1;
}*/

this::LoadDynamicHouses()
{
	new rows = cache_num_rows(), time = GetTickCount(), total, query[256];

	if (!rows)	return print("[Houses] Kayit bulunamadi.");

	for(new i; i < rows; i++)
	{
		cache_get_value_int(i, "id", HouseInfo[i][hID]);
		cache_get_value_float(i, "posx", HouseInfo[i][hPosX]);
		cache_get_value_float(i, "posy", HouseInfo[i][hPosY]);
		cache_get_value_float(i, "posz", HouseInfo[i][hPosZ]);
		cache_get_value_float(i, "exitx", HouseInfo[i][hExitX]);
		cache_get_value_float(i, "exity", HouseInfo[i][hExitY]);
		cache_get_value_float(i, "exitz", HouseInfo[i][hExitZ]);

		cache_get_value_float(i, "ext_ENposX", HouseInfo[i][hExtX][0]);
		cache_get_value_float(i, "ext_ENposY", HouseInfo[i][hExtY][0]);
		cache_get_value_float(i, "ext_ENposZ", HouseInfo[i][hExtZ][0]);
		cache_get_value_float(i, "ext_EXposX", HouseInfo[i][hExtX][1]);
	    cache_get_value_float(i, "ext_EXposY", HouseInfo[i][hExtY][1]);
		cache_get_value_float(i, "ext_EXposZ", HouseInfo[i][hExtZ][1]);
		cache_get_value_int(i, "ext_ENvw", HouseInfo[i][hExtVW][0]);
		cache_get_value_int(i, "ext_EXvw", HouseInfo[i][hExtVW][1]);
		cache_get_value_int(i, "ext_ENint", HouseInfo[i][hExtInt][0]);
		cache_get_value_int(i, "ext_EXint", HouseInfo[i][hExtInt][1]);

		cache_get_value(i, "ownername", HouseInfo[i][hOwner], MAX_PLAYER_NAME);
		strreplace(HouseInfo[i][hOwner], '_', ' ');
		cache_get_value_int(i, "owner", HouseInfo[i][hOwnerID]);
		cache_get_value_int(i, "locked", HouseInfo[i][hLocked]);
		cache_get_value_int(i, "price", HouseInfo[i][hPrice]);
		cache_get_value_int(i, "apartments", HouseInfo[i][hApart]);
		cache_get_value_int(i, "levelbuy", HouseInfo[i][hLevelbuy]);
        cache_get_value_int(i, "cash", HouseInfo[i][hCash]);
		cache_get_value_int(i, "exitint", HouseInfo[i][hExitInt]);
		cache_get_value_int(i, "exitvw", HouseInfo[i][hExitVW]);
		cache_get_value_int(i, "posint", HouseInfo[i][hPosInt]);
		cache_get_value_int(i, "posvw", HouseInfo[i][hPosVW]);
		cache_get_value_float(i, "checkx", HouseInfo[i][hCheckPosX]);
		cache_get_value_float(i, "checky", HouseInfo[i][hCheckPosY]);
		cache_get_value_float(i, "checkz", HouseInfo[i][hCheckPosZ]);
		cache_get_value_int(i, "radio", HouseInfo[i][hRadio]);
		cache_get_value_int(i, "lock", HouseInfo[i][hLock]);
		cache_get_value_int(i, "alarm", HouseInfo[i][hAlarm]);
		cache_get_value_int(i, "door", HouseInfo[i][hDoor]);
		cache_get_value_int(i, "ddoor", HouseInfo[i][hDDoor]);
		cache_get_value_int(i, "class", HouseInfo[i][hClass]);
	    cache_get_value_int(i, "heal", HouseInfo[i][hHeal]);
	    cache_get_value_int(i, "heal_amount", HouseInfo[i][hHealAmount]);
	    cache_get_value_int(i, "cupboard", HouseInfo[i][hCupboard]);
	    cache_get_value_float(i, "furniture_radius", HouseInfo[i][hFurnitureRadius]);
		HouseInfo[i][hFurniture] = 0;
		HouseInfo[i][hOutsideFurniture] = 0;
		UpdateHouseDoor(i);

		if (HouseInfo[i][hExtX][0] > 0 && HouseInfo[i][hExtY][0] > 0 && HouseInfo[i][hExtZ][0] > 0 && !HouseInfo[i][hOwnerID]) {
			HouseInfo[i][hExtPickup] = CreateDynamicPickup(19523, 1, HouseInfo[i][hExtX][0], HouseInfo[i][hExtY][0], HouseInfo[i][hExtZ][0], HouseInfo[i][hExtVW], HouseInfo[i][hExtInt], -1, 100.0);
		}

		if(!HouseInfo[i][hOwnerID]) {
			HouseInfo[i][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ] - 0.7, HouseInfo[i][hPosVW], HouseInfo[i][hPosInt], -1, 100.0);
		}
		else if (HouseInfo[i][hLocked] == 1)
		{
			HouseInfo[i][hPickup] = CreateDynamicPickup(19522, 1, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ], HouseInfo[i][hPosVW], HouseInfo[i][hPosInt], -1, 100.0);
		}
		else if (HouseInfo[i][hLocked] == 0)
		{
			HouseInfo[i][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ], HouseInfo[i][hPosVW], HouseInfo[i][hPosInt], -1, 100.0);
		}

		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `furnitures` WHERE `building`=%i AND `bType`=0", HouseInfo[i][hID]);
		mysql_tquery(dbHandle, query, "OnHouseFurnituresLoad", "i", i);

		//mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `inventory` WHERE `houseid`=%i", HouseInfo[i][hID]);
		//mysql_tquery(dbHandle, query, "HouseLoadInventory", "i", i);

		if (HouseInfo[i][hOwnerID] != 0) {
			mysql_format(dbHandle, query, sizeof(query), "SELECT accountid,cash,last_login FROM `users` WHERE `id` = %i LIMIT 1", HouseInfo[i][hOwnerID]);
			mysql_tquery(dbHandle, query, "HouseCheckOwner", "ii", i, HouseInfo[i][hID]);
		}

		total++;
	}
    printf("[Houses] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

this::HouseCheckOwner(houseid, dbid)
{
	if (!cache_num_rows()) return printf("[SQL ERROR] Ev [db ID:%i] sahibi karakter dbsinde bulunamadi.", dbid);

	new accountid,
		money,
		last_login,
		query[256];

	cache_get_value_int(0, "accountid", accountid);
	cache_get_value_int(0, "cash", money);
	cache_get_value_int(0, "last_login", last_login);

	//if (last_login < gettime()-(60*60*24)*21) {
		//mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `cash`=%i WHERE id=%i LIMIT 1", money+floatround(HouseInfo[houseid][hPrice]/2)/*+GetFurniturePrice(0, i)*/+HouseInfo[houseid][hCash], HouseInfo[houseid][hOwnerID]);
		//mysql_query(dbHandle, query);

		//format(query, sizeof(query), "Ev otomatik olarak sisteme satildi. [H_MYSQL: %i] oyuncu %s [MYSQL: %i] tutar $%i.", HouseInfo[houseid][hID], HouseInfo[houseid][hOwner], HouseInfo[houseid][hOwnerID], HouseInfo[houseid][hPrice]/2/*+GetFurniturePrice(0, i)*/+HouseInfo[houseid][hCash]);
		//insert_log(query, PROPERTY_LOG, 7, accountid);
		//Sell_House(houseid);
	//}
	return 1;
}
/*
this::HouseLoadInventory(houseid)
{
	if (!cache_num_rows())
	{
	    new query[256];
        mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `inventory` (`houseid`) VALUES (%i)", HouseInfo[houseid][hID]);
	    mysql_tquery(dbHandle, query);
	    return 1;
	}

	new str_inv[24], str_inv2[24], str_inv3[24], str_inv4[24], str_inv5[24], str_inv6[24];

	for(new a = 0; a < MAX_HOUSE_INVENTORY; a++)
	{
        format(str_inv, sizeof(str_inv), "id_%i", a+1);
        cache_get_value_name_int(0, str_inv, HouseInventory[houseid][a][pInvItem]);
        format(str_inv2, sizeof(str_inv2), "a_%i", a+1);
        cache_get_value_name_int(0, str_inv2, HouseInventory[houseid][a][pInvQ]);
        format(str_inv3, sizeof(str_inv3), "ex_%i", a+1);
        cache_get_value_name_int(0, str_inv3, HouseInventory[houseid][a][pInvEx]);
        format(str_inv4, sizeof(str_inv4), "s_%i", a+1);
        cache_get_value_name_int(0, str_inv4, HouseInventory[houseid][a][pInvS]);
        format(str_inv5, sizeof(str_inv5), "f_%i", a+1);
        cache_get_value_name_float(0, str_inv5, HouseInventory[houseid][a][pInvQFloat]);

		new name[16];
		format(str_inv6, sizeof(str_inv6), "n_%i", a+1);
		cache_get_value_name(0, str_inv6, name);

		format(HouseInventory[houseid][a][pInvName], 16, "%s", name);
	}
	return 1;
}*/

this::ShowTenantsAmount(playerid)
{
    //if (!cache_num_rows())	return SendErrorMessage(playerid, "Âàø äîì íèêòî íå àðåíäóåò.");

	static dlgtxt[] = "#\tÝsim\n\
					> Yeni bir kiracý al\n";

	new diatxt[sizeof(dlgtxt) + (MAX_PLAYER_NAME+6)*MAX_TENAT_SPACE], name[MAX_PLAYER_NAME];

    for(new i; i < MAX_TENAT_SPACE; i++) pTemp[playerid][pListed][i] = 0;

	format(diatxt, sizeof(diatxt), "%s", dlgtxt);
	for(new i; i < MAX_TENAT_SPACE; i++)
	{
		if (i == cache_num_rows()) break;

	    cache_get_value_int(i, "id", pTemp[playerid][pListed][i]);

		cache_get_value(i, "name", name);
        strreplace(name, '_', ' ');

		format(diatxt, sizeof(diatxt), "%s%i\t%s\n", diatxt, i, name);
	}
	if (!cache_num_rows()) format(diatxt, sizeof(diatxt), "%sHerhangi bir kiracý bulunmuyor.", dlgtxt);

	Dialog_Show(playerid, EvictTenant, DIALOG_STYLE_TABLIST_HEADERS, "Kiracýlar", diatxt, "Kov", "Geri Dön");
	return 1;

}

this::EvictTenantConfirm(playerid, response)
{
	if (!response)	return DeletePVar(playerid, #Temp);

	new list = GetPVarInt(playerid, #Temp),
		userid = GetIDByID(pTemp[playerid][pListed][list]);

	if (IsPlayerLogged(userid))
	{
	    SendSyntaxMessage(userid, "Ev sahibi %s, sizi evden çýkarttý.", GetNameWithMask(playerid));
        SendSyntaxMessage(playerid, "%s adlý kiracýyý evinizden çýkarttýnýz.", GetNameWithMask(userid));

        PlayerInfo[userid][pRentKey] =
		PlayerInfo[userid][pRentPrice] = 0;
	}
	else
	{
        SendSyntaxMessage(playerid, "Kiracýyý evinizden çýkardýnýz.");
	}

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `rent_key`='0',`rent_price`='0' WHERE `id`=%i", pTemp[playerid][pListed][list]);
	mysql_tquery(dbHandle, query);

	DeletePVar(playerid, #Temp);
	return 1;
}

this::OfferRentRoom(playerid, userid, price)
{
	if (cache_num_rows() > MAX_TENAT_SPACE) return SendErrorMessage(playerid, "En fazla %i kiracýnýz olabilir.", MAX_TENAT_SPACE);

	pTemp[userid][pRentPlayer] = playerid;
	pTemp[userid][pRentPrice] = price;
	SetPVarInt(userid, #accept_time, gettime() + 30);
	SendSyntaxMessage(playerid, "%s adlý kiþiye kiracý olma daveti gönderdiniz, tutar: $%i", GetNameWithMask(userid), price);
    SendSyntaxMessage(userid, "%s adlý kiþi $%i saatlik ücretle evini size kiralýyor. (Onaylamak için Y tuþuna basýn)", GetNameWithMask(playerid), price);
	return 1;
}

AddHouseToFile(houseid, clases, level, price, apart, Float:x, Float:y, Float:z,worldhouse,worldhouseout, interiorout)
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `houses` (posint,class,posx,posy,posz,price,apartments,levelbuy,cash,locked,radio,exitvw,posvw) VALUES (%i,%i,%f,%f,%f,%i,%i,%i,%i,%i,%i,%i,%i)",
	interiorout, clases, x, y, z, price, apart, level, 0, 1, 0, worldhouse, worldhouseout);
	mysql_tquery(dbHandle, query, "OnHouseInsert", "d", houseid);

	return 1;
}

GetHouseZone(houseid, type = 0)
{
	new string[70], zone[28];

	GetZone(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], zone, sizeof(zone));

	if (IsPointInAnyDynamicArea(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ])) {
		new areas[5], street_area[1], j = GetNumberDynamicAreasForPoint(HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ]);
		GetDynamicAreasForPoint(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], areas, sizeof(areas));

		if (GetStreet(areas, j, street_area)) {
			if (type == 0) 		format(string, sizeof(string), "%s, %s %i", zone, street_names[street_area[0]], 35+houseid);
			else if (type == 1) 	format(string, sizeof(string), "%03d %s,~n~%s", 35+houseid, street_names[street_area[0]], zone);
			else if (type == 2) 	format(string, sizeof(string), "%s %i", street_names[street_area[0]], 35+houseid);

			return string;
		}
	}

	format(string, sizeof(string), "%s %i", zone, 35+houseid);
	return string;
}

SetHouseInterior(houseid, id)
{
	HouseInfo[houseid][hExitX] = AdminTeles[id][telesPosX];
	HouseInfo[houseid][hExitY] = AdminTeles[id][telesPosY];
	HouseInfo[houseid][hExitZ] = AdminTeles[id][telesPosZ];
	HouseInfo[houseid][hExitInt] = AdminTeles[id][telesInt];

	HouseInfo[houseid][hExtX][1] =
	HouseInfo[houseid][hExtY][1] =
	HouseInfo[houseid][hExtZ][1] = 0.0;
	HouseInfo[houseid][hExtVW][1] =
	HouseInfo[houseid][hExtInt][1] = 0;

	Save_House(houseid);
	return 1;
}

SetHouseInteriorEx(houseid, class) {
	new houseIntID = random(GetCountHouseType(class)),
		index;

	for(new i = 0; i < MAX_INTERIORS; i++)
	{
		if (!AdminTeles[i][telesOn] || class != AdminTeles[i][telesType]) continue;

		if (index == houseIntID)
		{
		    SetHouseInterior(houseid, i);
		    break;
		}
		index++;
	}
	return 1;
}

GetCountHouseType(class) {
	new count;
	for(new i = 1; i < MAX_INTERIORS; i++)
	{
		if (!AdminTeles[i][telesOn] || class != AdminTeles[i][telesType]) continue;
		count++;
	}
	return count;
}

isHouseDoor(model)
{
	switch(model)
	{
	    case 1493, 1495..1498, 1500, 1501, 1504, 1506, 1507, 1522, 1532, 1533, 1535, 1536, 1557, 1566, 1567, 3089: return 1;
	}
	return 0;
}

Sell_House(houseid)
{
    for(new i; i < MAX_FURNITURE; i++)
	{
	    if (!HFurn[houseid][i][fID] || !HFurn[houseid][i][fOn]) continue;

	    HFurn[houseid][i][fID] =
	    HFurn[houseid][i][fOn] = 0;
	    DestroyDynamicObject(HFurn[houseid][i][fObject]);
	}

    HouseInfo[houseid][hLocked] = 1;
 	StopHouseBoomBox(houseid);
	HouseInfo[houseid][hOwnerID] =
	HouseInfo[houseid][hRadio] =
	HouseInfo[houseid][hRadioOn] =
	HouseInfo[houseid][hDDoor] =
    HouseInfo[houseid][hCash] =
    HouseInfo[houseid][hFurniture] =
    HouseInfo[houseid][hOutsideFurniture] = 0;
    HouseInfo[houseid][hFurnitureRadius] = 7.0;

	for(new i = 0; i < MAX_HOUSE_INVENTORY; i++)
	{
		HouseInventory[houseid][i][pInvItem] =
		HouseInventory[houseid][i][pInvQ] =
		HouseInventory[houseid][i][pInvEx] =
		HouseInventory[houseid][i][pInvS] = 0;
	}

	for(new i = 0; i != MAX_GARAGES; i++)
	{
	    if (!GarageInfo[i][garageID] || GarageInfo[i][garageHouse] != HouseInfo[houseid][hID]) continue;

        GarageInfo[i][garageOwner] = 0;

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `owner`='0' WHERE `id`=%i", GarageInfo[i][garageID]);
		mysql_tquery(dbHandle, query);
	}

	Save_House(houseid);
	return 1;
}

Save_House(houseid)
{
	if (houseid < 0 || houseid >= MAX_HOUSES || !HouseInfo[houseid][hID]) return 1;

	new query[512];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `houses` SET `owner`=%i,`locked`=%i,`price`=%i,`lock`=%i,`levelbuy`=%i,`cash`=%i,`class`=%i,`heal`=%i,`heal_amount`=%i,`checkx`=%f,`checky`=%f,`checkz`=%f,`radio`=%i,`alarm`=%i,`door`=%i,`ddoor`=%i WHERE `id`=%i",
	HouseInfo[houseid][hOwnerID], HouseInfo[houseid][hLocked], HouseInfo[houseid][hPrice],
	HouseInfo[houseid][hLock], HouseInfo[houseid][hLevelbuy], HouseInfo[houseid][hCash], HouseInfo[houseid][hClass],
	HouseInfo[houseid][hHeal], HouseInfo[houseid][hHealAmount], HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY],
	HouseInfo[houseid][hCheckPosZ], HouseInfo[houseid][hRadio], HouseInfo[houseid][hAlarm], HouseInfo[houseid][hDoor], HouseInfo[houseid][hDDoor],
	HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `houses` SET `ext_EXposX`=%f,`ext_EXposY`=%f,`ext_EXposZ`=%f,`ext_EXvw`=%i,`ext_EXint`=%i,`ext_ENposX`=%f,`ext_ENposY`=%f,`ext_ENposZ`=%f,`ext_ENvw`=%i,`ext_ENint`=%i,`exitx`=%f,`exity`=%f,`exitz`=%f,`exitvw`=%i,`exitint`=%i,`posx`=%f,`posy`=%f,`posz`=%f,`posvw`=%i,`posint`=%i WHERE `id`=%i",
	HouseInfo[houseid][hExtX][1],HouseInfo[houseid][hExtY][1],HouseInfo[houseid][hExtZ][1],HouseInfo[houseid][hExtVW][1],HouseInfo[houseid][hExtInt][1],
	HouseInfo[houseid][hExtX][0],HouseInfo[houseid][hExtY][0],HouseInfo[houseid][hExtZ][0],HouseInfo[houseid][hExtVW][0],HouseInfo[houseid][hExtInt][0],
	HouseInfo[houseid][hExitX],HouseInfo[houseid][hExitY],HouseInfo[houseid][hExitZ],HouseInfo[houseid][hExitVW],HouseInfo[houseid][hExitInt],
	HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ],HouseInfo[houseid][hPosVW],HouseInfo[houseid][hPosInt],
	HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query);
	return 1;
}


UpdateHouseDoor(houseid)
{
    if (IsValidDynamic3DTextLabel(HouseInfo[houseid][hLabelDDoor]))
	{
		DestroyDynamic3DTextLabel(HouseInfo[houseid][hLabelDDoor]);
        HouseInfo[houseid][hLabelDDoor] = Text3D:INVALID_3DTEXT_ID;
	}
	if (!HouseInfo[houseid][hDDoor]) return 1;

	new door_str[][] = {"KAPI", "KAPI KIRIK"};

	HouseInfo[houseid][hLabelDDoor] = CreateDynamic3DTextLabel(door_str[HouseInfo[houseid][hDDoor]-1], COLOR_LIGHTRED, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, HouseInfo[houseid][hPosInt], HouseInfo[houseid][hPosVW], -1, -1, 100.0);
	return 1;
}

GetHouseIDByMysql(mysqlid)
{
    for(new i; i != MAX_HOUSES; i++)
	{
	    if (HouseInfo[i][hID] == mysqlid) return i;
	}
	return -1;
}

GetPlayerHouses(playerid)
{
	new total;

    for(new i; i != MAX_HOUSES; i++)
	{
	    if (HouseInfo[i][hID] == 0 || HouseInfo[i][hOwnerID] != PlayerInfo[playerid][pID]) continue;

		total++;
	}
	return total;
}

GetMaxPlayerHouse(playerid)
{
	return 8;
}

IsPlayerOutsideHouse(playerid, i, Float: radius = 5.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetWorld(playerid) == HouseInfo[i][hPosVW] && GetInterior(playerid) == HouseInfo[i][hPosInt]) ? (1) : (0);
}

IsPlayerInsideHouse(playerid, i, Float: radius = 50.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && GetWorld(playerid) == HouseInfo[i][hExitVW] && GetInterior(playerid) == HouseInfo[i][hExitInt]) ? (1) : (0);
}

/*IsPlayerOutsideExtHouse(playerid, i, Float: radius = 5.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hExtX][0], HouseInfo[i][hExtY][0], HouseInfo[i][hExtZ][0]) && GetWorld(playerid) == HouseInfo[i][hExtVW][0] && GetInterior(playerid) == HouseInfo[i][hExtInt][0]) ? (1) : (0);
}*/

IsPlayerInsideExtHouse(playerid, i, Float: radius = 30.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hExtX][1], HouseInfo[i][hExtY][1], HouseInfo[i][hExtZ][1]) && GetWorld(playerid) == HouseInfo[i][hExtVW][1] && GetInterior(playerid) == HouseInfo[i][hExtInt][1]) ? (1) : (0);
}

GetNearHouse(playerid, Float: radius_inside = 30.0, Float: radius_outside = 5.0)
{
    if (pTemp[playerid][pHouseEntered] != -1 && IsPlayerInsideHouse(playerid, pTemp[playerid][pHouseEntered], radius_inside)) return pTemp[playerid][pHouseEntered];

    for(new i; i != MAX_HOUSES; i++)
	{
	    if (!HouseInfo[i][hID])										continue;
	    if (IsPlayerInsideHouse(playerid, i, radius_inside))			return i;
		else if (IsPlayerOutsideHouse(playerid, i, radius_outside))	return i;
	}
	return -1;
}

GetNearOutsideHouse(playerid, Float: radius = 1.5)
{
    for(new i; i != MAX_HOUSES; i++)
	{
	    if (!HouseInfo[i][hID]) continue;

	    if (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetWorld(playerid) == HouseInfo[i][hPosVW] && GetInterior(playerid) == HouseInfo[i][hPosInt]) return i;
	}
	return -1;
}

GetNearInsideHouse(playerid, Float:radius = 30.0)
{
	if (pTemp[playerid][pHouseEntered] != -1 && IsPlayerInsideHouse(playerid, pTemp[playerid][pHouseEntered], radius)) return pTemp[playerid][pHouseEntered];

    for(new i; i != MAX_HOUSES; i++)
	{
	    if (!HouseInfo[i][hID]) continue;

	    if (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && GetWorld(playerid) == HouseInfo[i][hExitVW] && GetInterior(playerid) == HouseInfo[i][hExitInt])
		{
		    pTemp[playerid][pHouseEntered] = i;
  			return i;
		}
	}
	return -1;
}

GetNearOutsideExtHouse(playerid, Float: radius = 1.5)
{
    for(new i; i != MAX_HOUSES; i++)
	{
	    if (!HouseInfo[i][hID]) continue;
	    if (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hExtX][0], HouseInfo[i][hExtY][0], HouseInfo[i][hExtZ][0]) && GetWorld(playerid) == HouseInfo[i][hExtVW][0] && GetInterior(playerid) == HouseInfo[i][hExtInt][0]) return i;
	}
	return -1;
}
GetNearInsideExtHouse(playerid, Float:radius = 30.0)
{
	if (pTemp[playerid][pHouseEntered] != -1 && IsPlayerInsideExtHouse(playerid, pTemp[playerid][pHouseEntered], radius)) return pTemp[playerid][pHouseEntered];

    for(new i; i != MAX_HOUSES; i++)
	{
	    if (!HouseInfo[i][hID]) continue;

	    if (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hExtX][0], HouseInfo[i][hExtY][0], HouseInfo[i][hExtZ][0]) && GetWorld(playerid) == HouseInfo[i][hExitVW] && GetInterior(playerid) == HouseInfo[i][hExitInt])
		{
		    pTemp[playerid][pHouseEntered] = i;
  			return i;
		}
	}
	return -1;
}

GetNextHouseID()
{
	for(new i; i < MAX_HOUSES; i++)
	{
	    if (!HouseInfo[i][hID]) return i;
	}
	return -1;
}

GetNextHouseTrunkSlot(house)
{
	for(new i = 0; i < MAX_HOUSE_INVENTORY; i++)
	{
		if (!HouseInventory[house][i][pInvItem]) return i;
	}
	return -1;
}

HouseFurn(playerid)
{
	new houseid = GetNearHouse(playerid);
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID] && HouseInfo[houseid][hID] != pTemp[playerid][pBuildHouse])	return SendErrorMessage(playerid, "Bu evin mobilyalarýný deðiþtirme izniniz yok.");

	new title[30 + 64];
	format(title, sizeof(title), "{FFFFFF}Mobilyalar [ %s ]", (!HouseInfo[houseid][hApart])?(GetHouseZone(houseid, 2)):(GetApartmentZone(HouseInfo[houseid][hApart], 2)));

	pTemp[playerid][pFurniture] = houseid;
	pTemp[playerid][pFurnitureB] = 0;
	Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, title, "Mobilya satýn al\nMobilya düzenle\nTüm mobilyalarý sat", "Seç", "Ýptal");
	return 1;
}

HouseFurnCopy(playerid, building, slot)
{
	if (GetCash(playerid) < HFurn[building][slot][fMarketPrice])
		return SendNotCash(playerid);

    if (HFurn[building][slot][fCategory] == 28 && HouseInfo[building][hOutsideFurniture] > 9)
		return SendErrorMessage(playerid, "Evin dýþýna sadece 10 nesne yerleþtirilebilir.");

	new i = -1;

	for(new a; a < MAX_FURNITURE; a++)
	{
	    if (HFurn[building][a][fOn] != 0) continue;

   		i = a;
		break;
	}

	if (i == -1) return 1;

	//HFurn[building][i][fObject] = CreateDynamicObject(HFurn[building][slot][fModel], HFurn[building][slot][fPosX], HFurn[building][slot][fPosY], HFurn[building][slot][fPosZ], HFurn[building][slot][fPosRX], HFurn[building][slot][fPosRY], HFurn[building][slot][fPosRZ], HFurn[building][slot][fVirtualWorld], HFurn[building][slot][fInterior]);

	new tid[5];
    for(new b; b != 5; b++)
	{
		tid[b] = -1;
 		if (HFurn[building][slot][fTexture][b] != -1) tid[b] = HFurn[building][slot][fTexture][b];
	}

	new f_index = GetFurnitureIndex(HFurn[building][slot][fCategory], HFurn[building][slot][fModel]);
	SetPVarInt(playerid, "buy_furniture", 2);
	OnPlayerCallBuyFurniture(playerid, building, 0, i, HFurn[building][slot][fModel], HFurn[building][slot][fCategory], f_index, HFurn[building][slot][fPosX], HFurn[building][slot][fPosY], HFurn[building][slot][fPosZ], HFurn[building][slot][fPosRX], HFurn[building][slot][fPosRY], HFurn[building][slot][fPosRZ], tid[0], tid[1], tid[2], tid[3], tid[4]);
	return 1;
}

HouseHandleSellFurn(playerid, building)
{
	new paycheck;

	for(new i; i < MAX_FURNITURE; i++)
	{
	    if (!HFurn[building][i][fID] || !HFurn[building][i][fOn]) continue;

	    paycheck += (HFurn[building][i][fMarketPrice] - (HFurn[building][i][fMarketPrice] & 2))  / 2;
	    HFurn[building][i][fID] =
	    HFurn[building][i][fOn] = 0;
	    DestroyDynamicObject(HFurn[building][i][fObject]);
	}

    HouseInfo[building][hFurniture] =
    HouseInfo[building][hOutsideFurniture] = 0;

   	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `furnitures` WHERE `building` = %i AND `bType` = 0", HouseInfo[building][hID]);
	mysql_tquery(dbHandle, query);

	SendSyntaxMessage(playerid, "Tüm mobilyalarý yarý fiyatýna sattýnýz, toplam geri ödenen miktar: {FFFF00}$%i{FFFFFF}.", paycheck);
	GiveCash(playerid, paycheck);
	return 1;
}

CreateExplosionInHouse(building, idx, f)
{
	new count = 0;

	for(new i; i < MAX_FURNITURE; i++)
	{
		if (count > 5) break;

	    if (!HFurn[building][i][fOn] || !IsValidDynamicObject(HFurn[building][i][fObject])) continue;
		if (HFurn[building][i][fInterior] != HouseInfo[building][hExitInt] && HFurn[building][i][fVirtualWorld] != HouseInfo[building][hExitVW])	continue;
		if (GetDistanceBetweenPoints(HFurn[building][f][fPosX],HFurn[building][f][fPosY],HFurn[building][f][fPosZ],HFurn[building][i][fPosX],HFurn[building][i][fPosY],HFurn[building][i][fPosZ]) > 10.0) continue;
		if (!IsFurnitureFirable(HFurn[building][i][fCategory])) continue;

		new Float:fHitPosX = HFurn[building][i][fPosX],
			Float:fHitPosY = HFurn[building][i][fPosY],
			Float:fHitPosZ = HFurn[building][i][fPosZ],
			furnint = HFurn[building][i][fInterior],
			furnvw = HFurn[building][i][fVirtualWorld]
		;

		if (floatround(randomEx(0,100)) > 80) OnPlayerSellFurniture(0, building, i);
		count ++;

		new fireid = -1;
		for(new j; j != MAX_FIRES; j++)
		{
		    if (FiresInfo[j][fireOn] != 0) continue;

			fireid = j;
			break;
		}
		if (fireid == -1)	continue;

		FiresInfo[fireid][fireOn] = 1;
		FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, furnvw, furnint);
		FiresInfo[fireid][firePos][0] = fHitPosX;
		FiresInfo[fireid][firePos][1] = fHitPosY;
		FiresInfo[fireid][firePos][2] = fHitPosZ;
		FiresInfo[fireid][fireVW] = furnvw;
		FiresInfo[fireid][fireInt] = furnint;
		FiresInfo[fireid][fireHealth] = 100;
		FiresInfo[fireid][fireTimer] = 1800;

		FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, furnvw, furnint, -1, 100.0);
	}

	CreateDynamicExplosion(HFurn[building][f][fPosX],HFurn[building][f][fPosY],HFurn[building][f][fPosZ], 11, 10.0, HFurn[building][f][fVirtualWorld], HFurn[building][f][fInterior]);
	ClearFurnitureData(f, idx);

	HouseAlarm(building, true);

	new Float:fHitPosX = HouseInfo[building][hPosX],
		Float:fHitPosY = HouseInfo[building][hPosY],
		Float:fHitPosZ = HouseInfo[building][hPosZ],
		furnint = HouseInfo[building][hPosInt],
		furnvw = HouseInfo[building][hPosVW]
	;

	new fireid = -1;
	for(new j; j != MAX_FIRES; j++)
	{
		if (FiresInfo[j][fireOn] != 0) continue;

		fireid = j;
		break;
	}
	if (fireid == -1)	return 1;

	FiresInfo[fireid][fireOn] = 1;
	FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, furnvw, furnint);
	FiresInfo[fireid][firePos][0] = fHitPosX;
	FiresInfo[fireid][firePos][1] = fHitPosY;
	FiresInfo[fireid][firePos][2] = fHitPosZ;
	FiresInfo[fireid][fireVW] = furnvw;
	FiresInfo[fireid][fireInt] = furnint;
	FiresInfo[fireid][fireHealth] = 100;
	FiresInfo[fireid][fireTimer] = 1800;

	FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, furnvw, furnint, -1, 100.0);

	return 1;
}

CreateFireInHouse(building)
{
	new count = 0;

	new Float:fHitPosX = HouseInfo[building][hPosX],
		Float:fHitPosY = HouseInfo[building][hPosY],
		Float:fHitPosZ = HouseInfo[building][hPosZ],
		furnint = HouseInfo[building][hPosInt],
		furnvw = HouseInfo[building][hPosVW]
	;

	new fireid = -1;
	for(new j; j != MAX_FIRES; j++)
	{
		if (FiresInfo[j][fireOn] != 0) continue;

		fireid = j;
		break;
	}
	if (fireid == -1)	return 1;

	FiresInfo[fireid][fireOn] = 1;
	FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, furnvw, furnint);
	FiresInfo[fireid][firePos][0] = fHitPosX;
	FiresInfo[fireid][firePos][1] = fHitPosY;
	FiresInfo[fireid][firePos][2] = fHitPosZ;
	FiresInfo[fireid][fireVW] = furnvw;
	FiresInfo[fireid][fireInt] = furnint;
	FiresInfo[fireid][fireHealth] = 100;
	FiresInfo[fireid][fireTimer] = 1800;

	FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, furnvw, furnint, -1, 100.0);

	fHitPosX = HouseInfo[building][hExitX];
	fHitPosY = HouseInfo[building][hExitY];
	fHitPosZ = HouseInfo[building][hExitZ];

	HouseAlarm(building, true);
	HouseInfo[building][hFireTimer] = gettime()+3600;

	for(new i; i < MAX_FURNITURE; i++)
	{
		if (count > 5) break;

	    if (!HFurn[building][i][fOn] || !IsValidDynamicObject(HFurn[building][i][fObject])) continue;
		if (HFurn[building][i][fInterior] != HouseInfo[building][hExitInt] && HFurn[building][i][fVirtualWorld] != HouseInfo[building][hExitVW])	continue;
		if (GetDistanceBetweenPoints(fHitPosX,fHitPosY,fHitPosZ,HFurn[building][i][fPosX],HFurn[building][i][fPosY],HFurn[building][i][fPosZ]) > 10.0) continue;
		if (!IsFurnitureFirable(HFurn[building][i][fCategory])) continue;

		fHitPosX = HFurn[building][i][fPosX];
		fHitPosY = HFurn[building][i][fPosY];
		fHitPosZ = HFurn[building][i][fPosZ];
		furnint = HFurn[building][i][fInterior];
		furnvw = HFurn[building][i][fVirtualWorld];

		count++;

		for(new j; j != MAX_FIRES; j++)
		{
		    if (FiresInfo[j][fireOn] != 0) continue;

			fireid = j;
			break;
		}
		if (fireid == -1)	continue;

		FiresInfo[fireid][fireOn] = 1;
		FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, furnvw, furnint);
		FiresInfo[fireid][firePos][0] = fHitPosX;
		FiresInfo[fireid][firePos][1] = fHitPosY;
		FiresInfo[fireid][firePos][2] = fHitPosZ;
		FiresInfo[fireid][fireVW] = furnvw;
		FiresInfo[fireid][fireInt] = furnint;
		FiresInfo[fireid][fireHealth] = 100;
		FiresInfo[fireid][fireTimer] = 1800;

		FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, furnvw, furnint, -1, 100.0);
	}
	return 1;
}

stock HouseAlarm(houseid, bool:toggle)
{
	if (!HouseInfo[houseid][hAlarm])	return 1;

	new aapart = HouseInfo[houseid][hApart];

	switch(toggle)
	{
	    case 0:
	    {
	        if (HouseInfo[houseid][hAlarmA] == 1)
	        {
	            HouseInfo[houseid][hAlarmA]=0;
				HouseInfo[houseid][hAlarmTime]=0;

				if (IsValidDynamic3DTextLabel(HouseInfo[houseid][hAText]))
				{
					DestroyDynamic3DTextLabel(HouseInfo[houseid][hAText]);
					HouseInfo[houseid][hAText] = Text3D:INVALID_3DTEXT_ID;
				}

				if (aapart != 0) PlaySoundInArea(1154, ApartInfo[aapart][aPosX], ApartInfo[aapart][aPosY], ApartInfo[aapart][aPosZ], 20.0);
				else			PlaySoundInArea(1154, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 20.0);
	        }
	    }
	    case 1:
	    {
	        if (HouseInfo[houseid][hAlarmA] == 0)
	        {
	            HouseInfo[houseid][hAlarmA]=1;
				HouseInfo[houseid][hAlarmTime]=300;

				if (IsValidDynamic3DTextLabel(HouseInfo[houseid][hAText]))
				{
					DestroyDynamic3DTextLabel(HouseInfo[houseid][hAText]);
					HouseInfo[houseid][hAText] = Text3D:INVALID_3DTEXT_ID;
				}

				if (aapart != 0) {
					HouseInfo[houseid][hAText]=CreateDynamic3DTextLabel("*** ALARM ÇALIYOR ***", 0xC2A2DAFF, ApartInfo[aapart][aPosX], ApartInfo[aapart][aPosY], ApartInfo[aapart][aPosZ]+0.50, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 50.0);

					foreach(new i : Player) {
						if (IsPlayerInRangeOfPoint(i, 30.0, ApartInfo[aapart][aPosX], ApartInfo[aapart][aPosY], ApartInfo[aapart][aPosZ]) && GetPlayerVirtualWorld(i) == ApartInfo[aapart][aPosVW])
							SendClientMessageEx(i, COLOR_PURPLE, "*** Dýþarýda alarm çalýyor (%s).", (!HouseInfo[houseid][hApart])?(GetHouseZone(houseid)):(GetApartmentZone(HouseInfo[houseid][hApart])));
					}

					if (HouseInfo[houseid][hAlarm] < 2) return 1;

					SendFactionMessageF(FACTION_POLICE, COLOR_YELLOWG, "[Ev Alarmý] %s bölgesinde alarm çalýyor!", GetApartmentZone(aapart));

					if (HouseInfo[houseid][hAlarm] < 3) return 1;

					new mes[128];
					format(mes, sizeof(mes), "Evinizin alarmý çalýyor: [%s]", GetApartmentZone(aapart));

					foreach(new i : Player)
					{
						if (IsPlayerLogged(i) && PlayerInfo[i][pID] != HouseInfo[houseid][hOwnerID]) return SendSMStoPlayer(i, "9199", "LCSecurity", mes);
					}

					new query[256];

					mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `id` = %i", HouseInfo[houseid][hOwnerID]);
					mysql_tquery(dbHandle, query, "SmsToPlayerOff", "sss", "9199", "LCSecurity", mes);
				} else {
					HouseInfo[houseid][hAText]=CreateDynamic3DTextLabel("*** ALARM ÇALIYOR ***", 0xC2A2DAFF, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]+0.50, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 50.0);

					foreach(new i : Player) {
						if (IsPlayerInRangeOfPoint(i, 30.0, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]) && GetPlayerVirtualWorld(i) == HouseInfo[houseid][hPosVW])
							SendClientMessageEx(i, COLOR_PURPLE, "*** Dýþarýda alarm çalýyor (%s).", (!HouseInfo[houseid][hApart])?(GetHouseZone(houseid)):(GetApartmentZone(HouseInfo[houseid][hApart])));
					}

					if (HouseInfo[houseid][hAlarm] < 2) return 1;

					SendFactionMessageF(FACTION_POLICE, COLOR_YELLOWG, "[Ev Alarmý] %s bölgesinde alarm çalýyor!", (!HouseInfo[houseid][hApart])?(GetHouseZone(houseid)):(GetApartmentZone(HouseInfo[houseid][hApart])));

					if (HouseInfo[houseid][hAlarm] < 3) return 1;

					new mes[128];
					format(mes, sizeof(mes), "Evinizin alarmý çalýyor: [%s]", (!HouseInfo[houseid][hApart])?(GetHouseZone(houseid)):(GetApartmentZone(HouseInfo[houseid][hApart])));

					foreach(new i : Player)
					{
						if (IsPlayerLogged(i) && PlayerInfo[i][pID] != HouseInfo[houseid][hOwnerID]) return SendSMStoPlayer(i, "9199", "LCSecurity", mes);
					}

					new query[256];

					mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `id` = %i", HouseInfo[houseid][hOwnerID]);
					mysql_tquery(dbHandle, query, "SmsToPlayerOff", "sss", "9199", "LCSecurity", mes);
				}
	        }
	    }
	}
	return 1;
}

StopStealing(playerid)
{
	JackingLock[playerid] = 0;
	BreakingHouse[playerid] = 0;
	pTemp[playerid][JackingType] = 0;
	pTemp[playerid][JackingWarnings] = 0;

	TogglePlayerControllable(playerid, true);

	for(new i; i < 2; i++) if(IsValidDynamicObject(PlayerInfo[playerid][SafeObject][i])) DestroyDynamicObject(PlayerInfo[playerid][SafeObject][i]);
	PlayerInfo[playerid][SafeObject][0] = PlayerInfo[playerid][SafeObject][1] = INVALID_OBJECT_ID;

	InfoMSG(playerid, "EV SOYGUNUNU ~r~BASARAMADINIZ!", 3);

	return 1;
}

StopBreakingLock(playerid)
{
	JackingLock[playerid] = 0;
	BreakingHouse[playerid] = 0;
	pTemp[playerid][JackingType] = 0;
	pTemp[playerid][JackingWarnings] = 0;

	TogglePlayerControllable(playerid, true);

	InfoMSG(playerid, "EVIN KAPISINI ~r~ACAMADINIZ!", 3);

	return 1;
}

stock IsPlayerFalling(playerid)
{
    if(GetPlayerAnimationIndex(playerid) == 1133 || GetPlayerAnimationIndex(playerid) == 1130)
    {
        new Float:Z, Float:Y, Float:X;
        GetPlayerVelocity(playerid, X, Y, Z);
        if(Z != 0)
        {
            return 1;
        }

    }
    return 0;
}
Dialog:HouseMenu(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new houseid;
	if ((houseid = GetNearHouse(playerid)) == -1)					return SendErrorMessage(playerid, "Eve yakýn deðilsin.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	switch(listitem)
	{
	    case 0: pc_cmd_kilit(playerid, ""); // äâåðíîé çàìîê
		case 1: { //Óëó÷øåíèÿ äîìà
			static dlgtxt[] = "{FFFFFF}Kapýyý tamir et {33CC33} [$ 300] {FFFFFF}\n\
								Radyo satýn al {33CC33} [$ 500] {FFFFFF}\n\
								Kapýyý geliþtir\n\
								Kilidi geliþtir\n\
								Alarmý geliþtir\n\
								Gardrop satýn al {33CC33} [$ 600] {FFFFFF}\n\
								Ýlk yardým kiti satýn al";

			new diatxt[sizeof(dlgtxt) + 30], door[40];

			if (!HouseInfo[houseid][hDDoor]) format(door, sizeof(door), "{9ACD32}Gerekli Deðil{FFFFFF}");
			else 							format(door, sizeof(door), "{FF6347}Gerekli{FFFFFF}");

			format(diatxt, sizeof(diatxt), dlgtxt, door);

			Dialog_Show(playerid, HouseUpgrade, DIALOG_STYLE_LIST, "Ev Geliþtirmeleri", diatxt, "Seç", "Geri Dön");
		}
		case 2: pc_cmd_dekorasyon(playerid, "");
		case 3:
		{
		    new query[256];
			mysql_format(dbHandle, query, sizeof(query), "SELECT `id`, `name` FROM `users` WHERE `rent_key` = %i LIMIT %i", HouseInfo[houseid][hID], MAX_TENAT_SPACE);
			mysql_tquery(dbHandle, query, "ShowTenantsAmount", "i", playerid);
		}
		case 4: //Èíâåíòàðü äîìà
		{
		    if (!IsPlayerInsideHouse(playerid, houseid))		return SendErrorMessage(playerid, "Evde olmalýsýnýz.");

			PrintHouseInv(playerid, houseid);
		}
		case 5:
		{
			static dlgtxt[] = "Kasa: $%i\n\
								{FF6347}>{FFFFFF} Kasaya para koy\n\
								{FF6347}>{FFFFFF} Kasadan para al";

			new diatxt[sizeof(dlgtxt) + 11];
			format(diatxt, sizeof(diatxt), dlgtxt, HouseInfo[houseid][hCash]);

			Dialog_Show(playerid, HouseSafeChoose, DIALOG_STYLE_TABLIST, "Kasa", diatxt, "Seç", "Geri Dön");
			return 1;
		}
		case 6: pc_cmd_kiyafetlerim(playerid, "");
		case 7: Dialog_Show(playerid, SellHouseChoose, DIALOG_STYLE_LIST, "{FFFFFF}Satýlýk Ev", "Evi oyuncuya sat\nEvi sisteme sat", "Seç", "Geri Dön");
	}
	return 1;
}

Dialog:HouseUpgrade(playerid, response, listitem, inputtext[])
{
    if (!response)	return pc_cmd_evmenu(playerid, "");

	new houseid;
	if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	switch(listitem)
	{
		case 0: {
			if (!HouseInfo[houseid][hDDoor])	return SendErrorMessage(playerid, "Evin kapýsý hasarlý deðil.");
			if (GetCash(playerid) < 300)		return SendErrorMessage(playerid, "Evin kapýsýný tamir ettirebilmek için yeterli paranýz bulunmuyor, fiyat: $300");

			HouseInfo[houseid][hDDoor] = 0;
			SQL_SetInteger("houses", "ddoor", HouseInfo[houseid][hDDoor], HouseInfo[houseid][hID]);
			UpdateHouseDoor(houseid);
			GiveCash(playerid, -300);
			SendSyntaxMessage(playerid, "$300 karþýlýðýnda evin kapýsýný tamir ettirdiniz.");
			return 1;
		}
		case 1: {
			if (HouseInfo[houseid][hRadio])	return SendErrorMessage(playerid, "Evde radyo bulunuyor.");
			if (GetCash(playerid) < 500)		return SendErrorMessage(playerid, "Radyo satýn alabilmek için yeterli paranýz bulunmuyor, fiyat: $500.");

			HouseInfo[houseid][hRadio] = 1;
			SQL_SetInteger("houses", "radio", HouseInfo[houseid][hRadio], HouseInfo[houseid][hID]);
			GiveCash(playerid, -500);
			SendSyntaxMessage(playerid, "$500 karþýlýðýnda radyo satýn aldýnýz, kullaným: /radyoayarla.");
			return 1;
		}
		case 2: {
			static dlgtxt[] = "Seviye\tKapý Tipi\tÖzellikler\tFiyat\n\
								{C3C3C3} 1 Seviye {FFFFFF}\t Ahþap\t + 5% hýrsýzlýða karþý koruma\t {33CC33} $750\n\
								{C3C3C3} 2 Seviye {FFFFFF}\t Demir\t + 15% hýrsýzlýða karþý koruma\t {33CC33} $1500";

			Dialog_Show(playerid, HouseUpgradeDoor, DIALOG_STYLE_TABLIST_HEADERS, "Kapý Geliþtirmesi", dlgtxt, "Satýn Al", "Geri Dön");
		}
		case 3: {
			static dlgtxt[] = "Seviye\tÖzellikler\tFiyat\n\
							{C3C3C3} 1 Seviye {FFFFFF}\t + 5% hýrsýzlýða karþý koruma\t {33CC33} $250\n\
							{C3C3C3} 2 Seviye {FFFFFF}\t + 10% hýrsýzlýða karþý koruma\t {33CC33} $500\n\
							{C3C3C3} 3 Seviye {FFFFFF}\t + 15% hýrsýzlýða karþý koruma\t {33CC33} $750\n\
							{C3C3C3} 4 Seviye {FFFFFF}\t + 20% hýrsýzlýða karþý koruma\t {33CC33} $1000\n\
							{C3C3C3} 5 Seviye {FFFFFF}\t + 25% hýrsýzlýða karþý koruma\t {33CC33} $1250";

			Dialog_Show(playerid, HouseUpgradeLock, DIALOG_STYLE_TABLIST_HEADERS, "Kilit Geliþtirmesi", dlgtxt, "Satýn Al", "Geri Dön");
		}
		case 4: {
			static dlgtxt[] = "Seviye\tÖzellikler\tFiyat\n\
							{C3C3C3} 1 Seviye {FFFFFF} \tStandart \t {33CC33} $500 \n\
							{C3C3C3} 2 Seviye {FFFFFF} \tOrta \t {33CC33} $1000 \n\
							{C3C3C3} 3 Seviye {FFFFFF} \tÝyi \t {33CC33} $1500";
			Dialog_Show(playerid, HouseUpgradeAlarm, DIALOG_STYLE_TABLIST_HEADERS, "Alarm Geliþtirmesi", dlgtxt, "Satýn Al", "Geri Dön");
		}
		case 5: {
			if (HouseInfo[houseid][hCupboard])	return SendErrorMessage(playerid, "Evinizde gardrop var.");
			if (GetCash(playerid) < 600)		return SendErrorMessage(playerid, "Gardrop almak için yeterli paranýz bulunmuyor, gereken ücret: $600");

			HouseInfo[houseid][hCupboard] = 1;
			SQL_SetInteger("houses", "cupboard", HouseInfo[houseid][hCupboard], HouseInfo[houseid][hID]);
			GiveCash(playerid, -600);
			SendSyntaxMessage(playerid, "600$ karþýlýðýnda gardrop satýn aldýnýz.");
			SendSyntaxMessage(playerid, "Kullanmak için /kiyafetlerim. ");
			return 1;
		}
		case 6: { // Êóïèòü àïòå÷êó
			static dlgtxt[] = "Seviye\tCan\tBekleme Süresi\tFiyat\n\
							{C3C3C3} 1 Seviye {FFFFFF} \t + 20 HP \t + 60 saniye \t {33CC33} $400 \n\
							{C3C3C3} 2 Seviye {FFFFFF} \t + 40 HP \t + 80 saniye \t {33CC33} $800 \n\
							{C3C3C3} 3 Seviye {FFFFFF} \t + 60 HP \t + 100 saniye \t {33CC33} $1200 \n\
							{C3C3C3} 4 Seviye {FFFFFF} \t + 80 HP \t + 120 saniye \t {33CC33} $1600 \n\
							{C3C3C3} 5 Seviye {FFFFFF} \t + 100 HP \t + 140 saniye \t {33CC33} $2000";

			Dialog_Show(playerid, HouseUpgradeHeal, DIALOG_STYLE_TABLIST_HEADERS, "Ýlk Yardým Kiti Geliþtirmesi", dlgtxt, "Satýn Al", "Geri Dön");
		}
	}

	return 1;
}

Dialog:HouseUpgradeDoor(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_evmenu(playerid, "");

	new houseid;
	if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	listitem += 1;

	if (HouseInfo[houseid][hDoor] >= listitem)	return SendErrorMessage(playerid, "Evinizin kapý seviyesi %i olduðu için iþlem gerçekleþtirilemedi.", HouseInfo[houseid][hDoor]);
	if (GetCash(playerid) < 750 * listitem)		return SendErrorMessage(playerid, "Bu iþlemi gerçekleþtirebilmek için yeterli paranýz bulunmuyor, gereken tutar: $%i.", listitem * 750);

	HouseInfo[houseid][hDoor] = listitem;
	SQL_SetInteger("houses", "door", HouseInfo[houseid][hDoor], HouseInfo[houseid][hID]);
	GiveCash(playerid, -listitem * 750);
	SendSyntaxMessage(playerid, "$%i karþýlýðýnda evinizin kapýsýný %i seviyeye yükselttiniz.", listitem * 750, HouseInfo[houseid][hDoor]);
	return 1;
}

Dialog:HouseUpgradeLock(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_evmenu(playerid, "");

	new houseid;
	if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	listitem += 1;

	if (HouseInfo[houseid][hLock] >= listitem)	return SendErrorMessage(playerid, "Evinizin kilit seviyesi %i olduðu için iþlem gerçekleþtirilemedi.", HouseInfo[houseid][hLock]);
	if (GetCash(playerid) < 250 * listitem)		return SendErrorMessage(playerid, "Bu iþlemi gerçekleþtirebilmek için yeterli paranýz bulunmuyor, gereken tutar: $%i.", listitem * 250);

	HouseInfo[houseid][hLock] = listitem;
	SQL_SetInteger("houses", "lock", HouseInfo[houseid][hLock], HouseInfo[houseid][hID]);
	GiveCash(playerid, -listitem * 250);
	SendSyntaxMessage(playerid, "$%i karþýlýðýnda evinizin kilidini %i seviyeye yükselttiniz.", listitem * 250, HouseInfo[houseid][hLock]);
	return 1;
}

Dialog:HouseUpgradeAlarm(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_evmenu(playerid, "");

	new houseid;
	if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	listitem += 1;

	if (HouseInfo[houseid][hAlarm] >= listitem)	return SendErrorMessage(playerid, "Evinizin alarm seviyesi %i olduðu için iþlem gerçekleþtirilemedi.", HouseInfo[houseid][hAlarm]);
	if (GetCash(playerid) < 500 * listitem)		return SendErrorMessage(playerid, "Bu iþlemi gerçekleþtirebilmek için yeterli paranýz bulunmuyor, gereken tutar: $%i.", listitem * 500);

	HouseInfo[houseid][hAlarm] = listitem;
	SQL_SetInteger("houses", "alarm", HouseInfo[houseid][hAlarm], HouseInfo[houseid][hID]);
	GiveCash(playerid, -listitem * 500);
	SendSyntaxMessage(playerid, "$%i karþýlýðýnda evinizin alarmýný %i seviyeye yükselttiniz.", listitem * 500, HouseInfo[houseid][hAlarm]);
	return 1;
}

Dialog:HouseUpgradeHeal(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_evmenu(playerid, "");

	new houseid;
	if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	listitem += 1;

	if (HouseInfo[houseid][hHeal] >= listitem)	return SendErrorMessage(playerid, "Evinizde ilk yardým kiti bulunuyor.");
	if (GetCash(playerid) < listitem * 400)		return SendErrorMessage(playerid, "Bu iþlemi gerçekleþtirebilmek için yeterli paranýz bulunmuyor, gereken tutar: $%i.", listitem * 400);

	HouseInfo[houseid][hHeal] = listitem;
	HouseInfo[houseid][hHealAmount] = 3;
	SQL_SetInteger("houses", "heal", HouseInfo[houseid][hHeal], HouseInfo[houseid][hID]);
	SQL_SetInteger("houses", "heal_amount", HouseInfo[houseid][hHealAmount], HouseInfo[houseid][hID]);
	GiveCash(playerid, -listitem * 400);
	SendSyntaxMessage(playerid, "$%i karþýlýðýnda evinize %i seviye ilk yardým kiti aldýnýz.", listitem * 400, HouseInfo[houseid][hHeal]);
	return 1;
}

Dialog:HouseSafeChoose(playerid, response, listitem, inputtext[])
{
    if (!response)	return pc_cmd_evmenu(playerid, "");
	if (!listitem)	return pc_cmd_evmenu(playerid, "");

	new houseid;
	if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz. ");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	if (listitem == 1)
	{
		Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Kasaya Para Koy", "Kasaya koymak istediðiniz para miktarýný giriniz:\n\t\t(maksimum $25.000.000)", "Seç", "Ýptal");
	}

	if (listitem == 2)
	{
		static dlgtxt[] = "Kasadan almak istediðiniz para miktarý giriniz:\n\t\t(maksimum $%s)";

		new diatxt[sizeof(dlgtxt) + 10];

		format(diatxt, sizeof(diatxt), dlgtxt, FormatNumber(HouseInfo[houseid][hCash]));
		Dialog_Show(playerid, HouseWithDraw, DIALOG_STYLE_INPUT, "Kasadan Para Al", diatxt, "Seç", "Ýptal");
	}

	return 1;
}

Dialog:HouseDeposit(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_evmenu(playerid, "");

	new houseid;
	if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	new amount;
	if (sscanf(inputtext, "i", amount))			 return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Kasaya Para Koy", "Kasaya koymak istediðiniz para miktarýný giriniz:\n\t\t(maksimum $25.000.000)", "Seç", "Ýptal");
	if (amount > GetCash(playerid) || amount < 1) return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Kasaya Para Koy", "YETERLI PARAYA SAHIP DEGILSIN!\n\nKasaya koymak istediðiniz para miktarýný giriniz:\n\t\t(maksimum $25.000.000)", "Seç", "Ýptal");

	GiveCash(playerid, -amount);
	HouseInfo[houseid][hCash] += amount;
	SQL_SetInteger("houses", "cash", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
	SendSyntaxMessage(playerid, "Evin kasasýna $%i para yatýrdýnýz. Kasada Olan Para: $%i.", amount, HouseInfo[houseid][hCash]);
	return 1;
}

Dialog:HouseWithDraw(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_evmenu(playerid, "");

	new houseid;
	if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz. ");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	new amount;
	if (sscanf(inputtext, "i", amount))			 		 return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Kasadan Para Al", "Kasadan almak istediðiniz para miktarý giriniz:\n\t\t(maksimum $25.000.000)", "Seç", "Ýptal");
	if (amount > HouseInfo[houseid][hCash] || amount < 1) return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Kasadan Para Al", "KASADA YETERLI PARA YOK!\n\nKasadan almak istediðiniz para miktarý giriniz::\n\t\t(maksimum $25.000.000)", "Seç", "Ýptal");

	HouseInfo[houseid][hCash] -= amount;
	SQL_SetInteger("houses", "cash", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
	GiveCash(playerid, amount);
	SendSyntaxMessage(playerid, "Evin kasasýndan $%i para çektiniz. Kasada Kalan: $%i.", amount, HouseInfo[houseid][hCash]);

	return 1;
}

Dialog:SellHouseChoose(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_evmenu(playerid, "");

	new houseid;

	if ((houseid = GetNearHouse(playerid)) == -1)					return SendErrorMessage(playerid, "Eve yakýn deðilsin.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	switch(listitem)
	{
		case 0:
		{
		    Dialog_Show(playerid, SellHouseTo, DIALOG_STYLE_INPUT, "{FFFFFF}Ev Satýþý", "{ffffff}Ev baþkasýna satýlýyor. {C3C3C3}[ID / isim] [satýþ deðeri]", "Sat", "Ýptal");
		}
		case 1:
		{
		    if (!IsPlayerOutsideHouse(playerid, houseid))	return SendErrorMessage(playerid, "Evin dýþýnda olmalýsýn.");

		    static const str_size[] = "{FFFFFF}Evinizi $%i karþýlýðýnda sisteme satmak istediðinizden emin misiniz? ";
			new mes[sizeof(str_size) - 2 + 12];

		 	format(mes, sizeof(mes), str_size, HouseInfo[houseid][hPrice]/2/*+GetFurniturePrice(0, houseid)*/, '%');
			Dialog_Show(playerid, SellHouse, DIALOG_STYLE_MSGBOX, "Ev Satýþý", mes, "Sat", "Ýptal");
		}
	}

	return 1;
}

Dialog:BuyInterior(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new houseid = strval(inputtext);

    if (houseid < 0 || houseid >= MAX_HOUSES || !HouseInfo[houseid][hID])
	{
	    Dialog_Show(playerid, BuyInterior, DIALOG_STYLE_INPUT, "{FFFFFF}Ev Dekor Sipariþi", "{FFFFFF}Dekorunu deðiþtirmek istediðiniz evin ID'sini giriniz:\nBu ev sana ait olmalý!", ">>>", "Kapat");
		return SendErrorMessage(playerid, "Ev bulunamadý.");
	}
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	{
	    Dialog_Show(playerid, BuyInterior, DIALOG_STYLE_INPUT, "{FFFFFF}Ev Dekor Sipariþi", "{FFFFFF}Dekorunu deðiþtirmek istediðiniz evin ID'sini giriniz:\nBu ev sana ait olmalý!", ">>>", "Kapat");
		return SendErrorMessage(playerid, "Bu ev sana ait deðil.");
	}

	SetPlayerBuyInterior(playerid, 1, houseid);
	return 1;
}

Dialog:BuyInteriorAccept(playerid, response, listitem, inputtext[])
{
	if (!response)	return ShowMenuForPlayer(buy_interior, playerid);

	new houseid = pTemp[playerid][pInteriorHouse]-1;

    if (houseid < 0 || houseid >= MAX_HOUSES || !HouseInfo[houseid][hID])	return SetPlayerBuyInterior(playerid, 0);
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	{
	    SetPlayerBuyInterior(playerid, 0);
		return SendErrorMessage(playerid, "Bu ev sana ait deðil.");
	}
	if (GetCash(playerid) < 750)
	{
	    ShowMenuForPlayer(buy_interior, playerid);
	    return SendNotCash(playerid);
	}

	GiveCash(playerid, -750);
	SendSyntaxMessage(playerid, "Evinizin dekorunu $750 karþýlýðýnda deðiþtirdiniz: [ID: %i]", houseid);
    SetHouseInterior(houseid, pTemp[playerid][pInteriorID]);
	SetPlayerBuyInterior(playerid, 0);

	new paycheck;

	for(new i; i < MAX_FURNITURE; i++)
	{
	    if (!HFurn[houseid][i][fID] || !HFurn[houseid][i][fOn]) continue;
	    paycheck += (HFurn[houseid][i][fMarketPrice] - (HFurn[houseid][i][fMarketPrice] & 2))  / 2;
	    HFurn[houseid][i][fID] =
	    HFurn[houseid][i][fOn] = 0;
	    DestroyDynamicObject(HFurn[houseid][i][fObject]);
	}

    HouseInfo[houseid][hFurniture] =
    HouseInfo[houseid][hOutsideFurniture] = 0;
    GiveCash(playerid, paycheck);

   	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `furnitures` WHERE `building` = %i AND `bType` = 0", HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

Dialog:SellHouseTo(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

    new houseid;

	if ((houseid = GetNearHouse(playerid)) == -1)					return SendErrorMessage(playerid, "Eve yakýn deðilsin.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	if (houseid < 0 || houseid >= MAX_HOUSES || HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return 1;

    new userid, price;

	if (sscanf(inputtext, "ui", userid, price))
	{
	    Dialog_Show(playerid, SellHouseTo, DIALOG_STYLE_INPUT, "{FFFFFF}Ev Satýþý", "{ffffff}Ev Satýþý. {C3C3C3}[ID / isim] [tutar]", "Sat", "Ýptal");
	    return SendErrorMessage(playerid, "Geçersiz format.");
	}
	if (userid == playerid)
	{
	    Dialog_Show(playerid, SellHouseTo, DIALOG_STYLE_INPUT, "{FFFFFF}Ev Satýþý", "{ffffff}Ev Satýþý. {C3C3C3}[ID / isim] [tutar]", "Sat", "Ýptal");
		return SendErrorMessage(playerid, "Evi kendinize satamazsýnýz.");
	}
	if (!IsPlayerLogged(userid))
	{
	    Dialog_Show(playerid, SellHouseTo, DIALOG_STYLE_INPUT, "{FFFFFF}Ev Satýþý", "{ffffff}Ev Satýþý. {C3C3C3}[ID / isim] [tutar]", "Sat", "Ýptal");
		return SendNotConnected(playerid);
	}

	if (!PlayerNearPlayer(3.0, playerid, userid))
	{
	    Dialog_Show(playerid, SellHouseTo, DIALOG_STYLE_INPUT, "{FFFFFF}Ev Satýþý", "{ffffff}Ev Satýþý. {C3C3C3}[ID / isim] [tutar]", "Sat", "Ýptal");
		return SendNotNearPlayer(playerid);
	}

	if (price < 0 || price > 100000000)
	{
	    Dialog_Show(playerid, SellHouseTo, DIALOG_STYLE_INPUT, "{FFFFFF}Ev Satýþý", "{ffffff}Ev Satýþý. {C3C3C3}[ID / isim] [tutar]", "Sat", "Ýptal");
	    return SendErrorMessage(playerid, "Satýþ tutarý $0 ile $100,000,000 arasýnda olmalýdýr.");
	}

	new mes[64];
	format(mes, sizeof(mes), "sat %s", inputtext);
	pc_cmd_ev(playerid, mes);
	return 1;
}

Dialog:SellHouse(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

    new houseid;

	if ((houseid = GetNearOutsideHouse(playerid)) == -1)			return SendErrorMessage(playerid, "Yakýnýnýzda ev yok.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

    new money = PlayerInfo[playerid][pCash], cash;

	GiveCash(playerid, HouseInfo[houseid][hPrice]/2/*+GetFurniturePrice(0, houseid)*/);
	PlaySound(playerid, 1052);
	SendSyntaxMessage(playerid, "Evinizi baþarýlý bir þekilde sattýnýz. $%i.", HouseInfo[houseid][hPrice]/2/*+GetFurniturePrice(0, houseid)*/);

	if (HouseInfo[houseid][hCash] > 0)
	{
		SendSyntaxMessage(playerid, "Ev kasanýzda bulunan $%i tutar hesabýnýza eklendi.", HouseInfo[houseid][hCash]);
		GiveCash(playerid, HouseInfo[houseid][hCash]);
		cash = HouseInfo[houseid][hCash];
	}

    new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | Money(ESKI): %i | Money(YENI): %i] ev satýldý [H_MYSQL: %i] for -- $%i + $%i", GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money, GetCash(playerid),
	HouseInfo[houseid][hID], HouseInfo[houseid][hPrice]/2, cash);
    insert_log(mes, PROPERTY_LOG, 1, PlayerInfo[playerid][pAccID]);

	Sell_House(houseid);
	return 1;
}

Dialog:ChangeHouseInterior(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new index, houseid = GetPVarInt(playerid, "house_change");

    if (houseid < 0 || houseid >= MAX_HOUSES || !HouseInfo[houseid][hID])	return SendErrorMessage(playerid, "Ev bulunamadý.");

	for(new i = 0; i < MAX_INTERIORS; i++)
	{
		if (!AdminTeles[i][telesOn] || HouseInfo[houseid][hClass] != AdminTeles[i][telesType]) continue;

		if (index == listitem)
		{
		    index = i;
		    break;
		}
		index++;
	}

	SetHouseInterior(houseid, index);
	SendAdmMessageToPlayer(playerid, "Ev [ID: %i | INT: %s].", houseid, AdminTeles[index][telesMapName]);
	return 1;
}

Dialog:EvictTenant(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_evmenu(playerid, "");

	new
		dlgmes[128],
		name[MAX_PLAYER_NAME]
	;

	if(strfind(inputtext, "Yeni bir kiracý al", true) != -1) return Dialog_Show(playerid, HouseRequestRent, DIALOG_STYLE_INPUT, "Yeni Kiracý", "{FFFFFF}Evinizi kiralamak istediðiniz kiþinin ID/Ýsmini giriniz.", ">>>", "Geri Dön");
	else 		  listitem--;

	SetPVarInt(playerid, #Temp, listitem);

	format(name, sizeof(name), "%s", GetPlayerNameBySqlID(pTemp[playerid][pListed][listitem]));
	format(dlgmes, sizeof(dlgmes), "{FFFFFF}%s adlý kiþiyi gerçekten kiracýlardan çýkarmak istiyor musunuz?", name);

	ConfirmDialog(playerid, "Onayla", dlgmes, "EvictTenantConfirm");
	return 1;
}

Dialog:HouseRequestRent(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_evmenu(playerid, "");

	new userid;
	if (sscanf(inputtext,"u", userid)) 								return Dialog_Show(playerid, HouseRequestRent, DIALOG_STYLE_INPUT, "Yeni Kiracý", "{FFFFFF}Evinizi kiralamak istediðiniz kiþinin ID/Ýsmini giriniz.", ">>>", "Geri Dön");
    if (userid == playerid) 			  							return Dialog_Show(playerid, HouseRequestRent, DIALOG_STYLE_INPUT, "Yeni Kiracý", "{FF6347}OYUNCU BULUNAMADI!\n{FFFFFF}Evinizi kiralamak istediðiniz kiþinin ID/Ýsmini giriniz.", ">>>", "Geri Dön");
	if (!IsPlayerLogged(userid))		  							return Dialog_Show(playerid, HouseRequestRent, DIALOG_STYLE_INPUT, "Yeni Kiracý", "{FF6347}OYUNCU BULUNAMADI!\n{FFFFFF}Evinizi kiralamak istediðiniz kiþinin ID/Ýsmini giriniz.", ">>>", "Geri Dön");
    if (!PlayerNearPlayer(3.0, playerid, userid))					return Dialog_Show(playerid, HouseRequestRent, DIALOG_STYLE_INPUT, "Yeni Kiracý", "{FF6347}OYUNCU YAKININIZDA DEGIL!\n{FFFFFF}Evinizi kiralamak istediðiniz kiþinin ID/Ýsmini giriniz.", ">>>", "Geri Dön");
    if (GetPlayerHouses(userid) || PlayerInfo[userid][pRentKey])	return SendErrorMessage(playerid, "Belirtilen oyuncunun evi var veya baþka evde kiracý.");

	SetPVarInt(playerid, #RentUserid, userid);
	Dialog_Show(playerid, HouseRequestRent2, DIALOG_STYLE_INPUT, "Yeni Kiracý", "{FFFFFF}Kira Ücreti:", ">>>", "Geri Dön");
	return 1;
}

Dialog:HouseRequestRent2(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new price, userid = GetPVarInt(playerid, #RentUserid);
	if (sscanf(inputtext,"i", price)) 	return Dialog_Show(playerid, HouseRequestRent2, DIALOG_STYLE_INPUT, "Yeni Kiracý", "{FFFFFF}Kira Ücreti:", ">>>", "Geri Dön");
	if (price < 0 || price > 500) 		return Dialog_Show(playerid, HouseRequestRent2, DIALOG_STYLE_INPUT, "Yeni Kiracý", "{FF6347}Kira ücreti $0 ile $500 arasýnda olmalýdýr!\n{FFFFFF}Kira Ücreti:", ">>>", "Geri Dön");
	if (GetCash(userid) < price)		return SendErrorMessage(playerid, "Belirtilen oyuncunun yeterli parasý bulunmuyor.");

	new houseid;
	if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `id` FROM `users` WHERE `rent_key`=%i", HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query, "OfferRentRoom", "iii", playerid, userid, price);

	return 1;
}

Dialog:StartBreakingLock(playerid, response, listitem, inputtext[])
{
	new houseid = BreakingHouse[playerid];

	BreakingHouse[playerid] = 0;

	if (!response)									  return 1;
	if (!IsPlayerOutsideHouse(playerid, houseid, 3.0)) return SendErrorMessage(playerid, "Evin giriþine yakýn olmalýsýnýz.");
	if (HouseInfo[houseid][hOwnerID] == 0)   		  return SendErrorMessage(playerid, "Yalnýzca satýn alýnan evlerde hýrsýzlýk yapýlabilir.");
	if (HouseInfo[houseid][hLocked] == 0)   			  return SendErrorMessage(playerid, "Bu evin kapýsý kilitli deðil.");
	if (IsPlayerCrouching(playerid) == false)		  return SendErrorMessage(playerid, "Eðilmek zorundasýn.");

	if (pTemp[playerid][JackingType] == 3) {

		new htime;

		switch(HouseInfo[houseid][hDoor]) {
			case 0: htime = 250+HouseInfo[houseid][hLock]*250;
			case 1: htime = 250+HouseInfo[houseid][hLock]*250 + floatround((250+HouseInfo[houseid][hLock]*250) * 0.05);
			case 2: htime = 250+HouseInfo[houseid][hLock]*250 + floatround((250+HouseInfo[houseid][hLock]*250) * 0.15);
		}

		TogglePlayerControllable(playerid, false);
		SendSyntaxMessage(playerid, "Kilit kýrmayý iptal etmek için (/kilitkiriptal - /kki) komutunu kullanabilirsiniz!");

		JackingLock[playerid] = htime;

	} else if (pTemp[playerid][JackingType] == 4) {
		if (!CheckHanditem(playerid,18634)) return SendErrorMessage(playerid, "Elinizde bir levye olmalý. /aksesuar");
		PlaySound(playerid, 1138);
		HouseAlarm(houseid, true);

		new htime;

		switch(HouseInfo[houseid][hDoor]) {
			case 0: htime = 250+HouseInfo[houseid][hLock]*250;
			case 1: htime = 250+HouseInfo[houseid][hLock]*250 + floatround((250+HouseInfo[houseid][hLock]*250) * 0.05);
			case 2: htime = 250+HouseInfo[houseid][hLock]*250 + floatround((250+HouseInfo[houseid][hLock]*250) * 0.15);
		}

		TogglePlayerControllable(playerid, false);
		SendSyntaxMessage(playerid, "Kilit kýrmayý iptal etmek için (/kilitkiriptal - /kki) komutunu kullanabilirsiniz!");

		JackingLock[playerid] = htime;

	} else return 1;

	BreakingHouse[playerid] = houseid;
	pc_cmd_me(playerid, "bir þey çýkartýr ve ön kapýnýn kilidiyle oynamaya baþlar.");
	return 1;
}

Dialog:StartStealingHouse(playerid, response, listitem, inputtext[])
{
	new houseid = StealingHouse[playerid];

	StealingHouse[playerid] = 0;

	if (!response)									  return 1;
	if (!IsPlayerInsideHouse(playerid, houseid, 50.0)) return SendErrorMessage(playerid, "Evin giriþine yakýn olmalýsýnýz.");
	if (HouseInfo[houseid][hOwnerID] == 0)   		  return SendErrorMessage(playerid, "Yalnýzca satýn alýnan evlerde hýrsýzlýk yapýlabilir.");

	if (pTemp[playerid][JackingType] == 5) {
		new htime;

		switch(HouseInfo[houseid][hDoor]) {
			case 0: htime = 250+HouseInfo[houseid][hLock]*250;
			case 1: htime = 250+HouseInfo[houseid][hLock]*250 + floatround((250+HouseInfo[houseid][hLock]*250) * 0.05);
			case 2: htime = 250+HouseInfo[houseid][hLock]*250 + floatround((250+HouseInfo[houseid][hLock]*250) * 0.15);
		}

		JackingLock[playerid] = htime;

	} else if (pTemp[playerid][JackingType] == 6) {
		if (!CheckHanditem(playerid,18634)) return SendErrorMessage(playerid, "Elinizde bir levye olmalý. /aksesuar");
		PlaySound(playerid, 1138);
		HouseAlarm(houseid, true);


        ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_LOOP", 4.0, 1, 0, 0, 0, 0);
	    new Float: x, Float: y, Float: z, Float: a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		x += (1.25 * floatsin(-a, degrees));
		y += (1.25 * floatcos(-a, degrees));
		PlayerInfo[playerid][SafeObject][0] = CreateDynamicObject(19618, x, y, z-0.55, 0.0, 0.0, a, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

        a += 90.0;
		x += (0.42 * floatsin(-a, degrees)) + (-0.22 * floatsin(-(a - 90.0), degrees));
		y += (0.42 * floatcos(-a, degrees)) + (-0.22 * floatcos(-(a - 90.0), degrees));
		PlayerInfo[playerid][SafeObject][1] = CreateDynamicObject(19619, x, y, z-0.55, 0.0, 0.0, a + 270.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

        Streamer_Update(playerid);

		new htime;

		switch(HouseInfo[houseid][hDoor]) {
			case 0: htime = 250+HouseInfo[houseid][hLock]*250;
			case 1: htime = 250+HouseInfo[houseid][hLock]*250 + floatround((250+HouseInfo[houseid][hLock]*250) * 0.05);
			case 2: htime = 250+HouseInfo[houseid][hLock]*250 + floatround((250+HouseInfo[houseid][hLock]*250) * 0.15);
		}

		JackingLock[playerid] = htime;

	} else return 1;

	StealingHouse[playerid] = houseid;
	pc_cmd_me(playerid, "levye ile evde bulunan kasayý parçalamaya baþlar.");
	return 1;
}
alias:evkontrol("interiorkontrol", "dekorasyonkontrol");
CMD:evkontrol(playerid, params[])
{
	new houseid;

	if ((houseid = GetNearOutsideHouse(playerid)) == -1)	return SendErrorMessage(playerid, "Yakýnýnýzda satýlýk ev bulunmuyor.");
	if (HouseInfo[houseid][hOwnerID])						return SendErrorMessage(playerid, "Bu ev satýn alýnmýþ.");
	if (PlayerInfo[playerid][pInjured] != 0)                return SendErrorMessage(playerid, "Yaralýyken bu iþlemi yapamazsýnýz.");

	if (!GetWorld(playerid) && !GetInterior(playerid))		GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

	SetPlayerPosEx(playerid,HouseInfo[houseid][hExitX],HouseInfo[houseid][hExitY],HouseInfo[houseid][hExitZ]);
	SetInterior(playerid,HouseInfo[houseid][hExitInt]);
	SetWorld(playerid,HouseInfo[houseid][hExitVW]);
	pTemp[playerid][pHouseEntered] = houseid;

	PlayerInfo[playerid][pInteriorSpec] = true;

	SetPVarInt(playerid, #check_int, 30);
	SendSyntaxMessage(playerid, "Ev dekorunu görüntülüyorsunuz, 30 saniyeniz var.");
	SendSyntaxMessage(playerid, "Ýncelemeden ayrýlmak için /evkontrolcik komutunu kullanabilirsiniz.");
	return 1;
}

CMD:evkontrolcik(playerid, params[])
{
	if(PlayerInfo[playerid][pInteriorSpec] == false) return SendErrorMessage(playerid,"Ev dekoru görüntülemiyorsunuz");

	DeletePVar(playerid, #check_int);
	SetPVarInt(playerid, #check_int, 1);
	return 1;
}

alias:ev("evim");
CMD:ev(playerid, params[])
{
	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/ev [seçenekler]");
		SendSyntaxMessage(playerid, "satinal | menu | yukselt | paracek | parayatir | sistemesat | sat | arkakapi");

		if (!randomEx(0,5)) {
			SendHelpMessage(playerid, "Evinize garaj, ek giriþ/çýkýþ ekletmek için veya ana giriþ/çýkýþ düzenlemeleri için");
			SendHelpMessage(playerid, "forum üzerindeki sistem tanýtýmýndan detaylarýný öðrenebilirsiniz.");
		}

		return 1;
	}

	if (CompareStrings(option, "satinal"))
	{
		new houseid;

		if ((houseid = GetNearOutsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Yakýnýnýzda satýlýk ev bulunmuyor.");
		if (HouseInfo[houseid][hOwnerID])									return SendErrorMessage(playerid, "Bu ev satýn alýnmýþ.");
		if (GetPlayerHouses(playerid) >= GetMaxPlayerHouse(playerid))		return SendErrorMessage(playerid, "Daha fazla ev satýn alamazsýnýz.");
		if (PlayerInfo[playerid][pLevel] < HouseInfo[houseid][hLevelbuy])	return SendErrorMessage(playerid, "Bu evi satýn alabilmek için %i seviye olmalýsýnýz.", HouseInfo[houseid][hLevelbuy]);
		if (GetCash(playerid) < HouseInfo[houseid][hPrice])					return SendNotCash(playerid);

		HouseInfo[houseid][hOwnerID] = PlayerInfo[playerid][pID];
		HouseInfo[houseid][hLocked] = 1;
		HouseInfo[houseid][hCash] = 0;
		format(HouseInfo[houseid][hOwner], MAX_PLAYER_NAME, GetNameEx(playerid));

		new money = PlayerInfo[playerid][pCash];

		GiveCash(playerid, -HouseInfo[houseid][hPrice]);
		SendSyntaxMessage(playerid, "$%i karþýlýðýnda ev satýn aldýnýz: [ID: %i]", HouseInfo[houseid][hPrice], houseid);
		DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
		HouseInfo[houseid][hPickup] = CreateDynamicPickup(19522, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 100.0);

		for(new i = 0; i < MAX_GARAGES; i++)
		{
			if (!GarageInfo[i][garageID] || GarageInfo[i][garageHouse] != HouseInfo[houseid][hID]) continue;

			SendSyntaxMessage(playerid, "Satýn almýþ olduðunuz evin garajý bulunuyor: [ID: %i]", i);
			GarageInfo[i][garageOwner] = PlayerInfo[playerid][pID];
			format(GarageInfo[i][garageOwnerName], 24, "%s", GetNameEx(playerid));

			SQL_SetInteger("garage", "owner", GarageInfo[i][garageOwner], GarageInfo[i][garageID]);
			SQL_SetString("users", "name", GarageInfo[i][garageOwnerName], GarageInfo[i][garageOwner]);
		}

		if (HouseInfo[houseid][hExtX][0] && HouseInfo[houseid][hExtY][0] && HouseInfo[houseid][hExtZ][0]) {
			SendSyntaxMessage(playerid, "Evinizin bir arka kapýsý bulunuyor, evin içerisinden çýkýþ noktasý eklemeniz gerekiyor: ( /h backdoor )");
		}

		SendHelpMessage(playerid, "Ev hakkýnda yardým almak için: /evyardim");
		Save_House(houseid);

		new mes[256];
		format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | Money(ONCEKI): %i | Money(SIMDIKI): %i] ev satýn aldý [H_MYSQL: %i] $%i", GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money, GetCash(playerid),
		HouseInfo[houseid][hID], HouseInfo[houseid][hPrice]);
    	insert_log(mes, PROPERTY_LOG, 3, PlayerInfo[playerid][pAccID]);
		return 1;
	}
	else if (CompareStrings(option, "menu"))	return pc_cmd_evmenu(playerid, "");
	else if (CompareStrings(option, "yukselt"))
	{
		new houseid;

		if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz.");
		if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

		new parameters[16], arg[112];

		if (sscanf(secoption, "s[16]S()[112]", parameters, arg))
		{
			SendHelpMessage(playerid, "/ev yukselt [seçenekler]");
			SendSyntaxMessage(playerid, "radyo {33CC33}[$500]{FFFFFF} | kilit | alarm | gardrop {33CC33}[$600]{FFFFFF} | kapi | kapitamir | can");
			return 1;
		}

		if (CompareStrings(parameters, "radyo"))
		{
			if (HouseInfo[houseid][hRadio])		return SendErrorMessage(playerid, "Bu evde radyo bulunuyor.");
			if (GetCash(playerid) < 500)		return SendErrorMessage(playerid, "Bu iþlemi yapmak için yeterli paranýz bulunmuyor. Gereken Tutar: 500$");

			HouseInfo[houseid][hRadio] = 1;
			SQL_SetInteger("houses", "radio", HouseInfo[houseid][hRadio], HouseInfo[houseid][hID]);
			GiveCash(playerid, -500);
			SendSyntaxMessage(playerid, "500$ karþýlýðýnda bir radyo satýn aldýnýz, kullaným: /radyoayarla");
			return 1;
		}

		else if (CompareStrings(parameters, "kilit"))
		{
			new level;

			if (sscanf(arg, "i", level))
			{
				SendHelpMessage(playerid, "/ev yukselt kilit [level (1-5)]");
				SendSyntaxMessage(playerid, "Her seviye arasýnda $250 fark bulunmaktadýr [1 level - $250 | 5 level - $1250].");
				return 1;
			}
			if (level < 1 || level > 5)				return SendErrorMessage(playerid, "Kilit seviyesi 1 ile 5 arasýnda olmalýdýr.");
			if (GetCash(playerid) < 250 * level)	return SendErrorMessage(playerid, "%i seviye kilit için yeterli paranýz bulunmuyor, gereken: $%i.", level, level * 250);
			if (HouseInfo[houseid][hLock] >= level)	return SendErrorMessage(playerid, "Evinizin kilit seviyesi %i olduðu için iþlem gerçekleþtirilemedi.", HouseInfo[houseid][hLock]);

			HouseInfo[houseid][hLock] = level;
			SQL_SetInteger("houses", "lock", HouseInfo[houseid][hLock], HouseInfo[houseid][hID]);
			GiveCash(playerid, -level * 250);
			SendSyntaxMessage(playerid, "%i seviye kilit aldýnýz, ödenen tutar: $%i.", HouseInfo[houseid][hLock], level * 250);
			return 1;
		}

		else if (CompareStrings(parameters, "alarm"))
		{
			new level;

			if (sscanf(arg, "i", level))
			{
				SendHelpMessage(playerid, "/ev yukselt alarm [level (1-3)]");
				SendSyntaxMessage(playerid, "Her seviye arasýnda $500 fark bulunmaktadýr [1 level - $500 | 3 level - $1500].");
				return 1;
			}
			if (level < 1 || level > 3)					return SendErrorMessage(playerid, "Alarm seviyesi 1 ile 3 arasýnda olmalýdýr.");
			if (GetCash(playerid) < 500 * level)		return SendErrorMessage(playerid, "%i seviye alarm için yeterli paranýz bulunmuyor, gereken: $%i.", level, level * 500);
			if (HouseInfo[houseid][hAlarm] >= level)	return SendErrorMessage(playerid, "Evinizin alarm seviyesi %i olduðu için iþlem gerçekleþtirilemedi.", HouseInfo[houseid][hAlarm]);

			HouseInfo[houseid][hAlarm] = level;
			SQL_SetInteger("houses", "alarm", HouseInfo[houseid][hAlarm], HouseInfo[houseid][hID]);
			GiveCash(playerid, -level * 500);
			SendSyntaxMessage(playerid, "%i seviye alarm aldýnýz, ödenen tutar: $%i.", HouseInfo[houseid][hAlarm], level * 500);
			return 1;
		}

		else if (CompareStrings(parameters, "kapi"))
		{
			new level;

			if (sscanf(arg, "i", level))
			{
				SendHelpMessage(playerid, "/ev yukselt kapi [level (1-2)]");
				SendSyntaxMessage(playerid, "Her seviye arasýnda $750 fark bulunmaktadýr [1 level - $750 | 2 level - $1500].");
				return 1;
			}
			if (level < 1 || level > 2)				return SendErrorMessage(playerid, "Kapý seviyesi 1 ile 2 arasýnda olmalýdýr.");
			if (GetCash(playerid) < 750 * level)	return SendErrorMessage(playerid, "%i seviye kapý için yeterli paranýz bulunmuyor, gereken: $%i.", level, level * 750);
			if (HouseInfo[houseid][hDoor] >= level)	return SendErrorMessage(playerid, "Evinizin kapý seviyesi %i olduðu için iþlem gerçekleþtirilemedi.", HouseInfo[houseid][hDoor]);

			HouseInfo[houseid][hDoor] = level;
			SQL_SetInteger("houses", "door", HouseInfo[houseid][hDoor], HouseInfo[houseid][hID]);
			GiveCash(playerid, -level * 750);
			SendSyntaxMessage(playerid, "%i seviye kapý aldýnýz, ödenen tutar: $%i.", HouseInfo[houseid][hDoor], level * 750);
			return 1;
		}

		else if (CompareStrings(parameters, "gardrop"))
		{
			if (HouseInfo[houseid][hCupboard])	return SendErrorMessage(playerid, "Evinizde bir gardrop bulunuyor.");
			if (GetCash(playerid) < 600)			return SendErrorMessage(playerid, "Gardrop satýn alabilmek için yeterli paranýz bulunmuyor, gereken tutar: $600");

			HouseInfo[houseid][hCupboard] = 1;
			SQL_SetInteger("houses", "cupboard", HouseInfo[houseid][hCupboard], HouseInfo[houseid][hID]);
			GiveCash(playerid, -600);
			SendSyntaxMessage(playerid, "$600 karþýlýðýnda evinize gardrop aldýnýz.");
			SendSyntaxMessage(playerid, "Kullaným için: /kiyafetlerim");
			return 1;
		}

		else if (CompareStrings(parameters, "kapitamir"))
		{
			if (!HouseInfo[houseid][hDDoor])	return SendErrorMessage(playerid,"Evinizin kapýsý kasarlý deðil.");
			if (GetCash(playerid) < 300)		return SendErrorMessage(playerid, "Bu iþlemi gerçekleþtirebilmek için yeterli paranýz bulunmuyor, gereken tutar: $300");

			HouseInfo[houseid][hDDoor] = 0;
			SQL_SetInteger("houses", "ddoor", HouseInfo[houseid][hDDoor], HouseInfo[houseid][hID]);
			UpdateHouseDoor(houseid);
			GiveCash(playerid, -300);
			SendSyntaxMessage(playerid, "$300 karþýlýðýnda evinizin kapýsýný tamir ettirdiniz.");
			return 1;
		}

		else if (CompareStrings(parameters, "can"))
		{
			new level;

			if (sscanf(arg, "i", level))
			{
				SendHelpMessage(playerid, "/ev yukselt can [seviye (1-5)]");
				SendSyntaxMessage(playerid, "Her seviye arasýnda $400 fark bulunmaktadýr [1 seviye - $400 | 5 seviye - $2000].");
				SendSyntaxMessage(playerid, "Her seviye arasýnda 20 HP fark bulunmaktadýr [1 seviye - +20 HP | 5 seviye - +100 HP].");
				SendSyntaxMessage(playerid, "Her seviye arasýnda 20 saniye gecikme farký bulunmaktadýr [1 level - 60 saniye | 5 level - 140 saniye].");
				return 1;
			}
			if (HouseInfo[houseid][hHeal])			return SendErrorMessage(playerid, "Evinizde ilk yardým kiti bulunuyor.");
			if (level < 1 || level > 5)				return SendErrorMessage(playerid, "Ýlkyardým Kiti seviyesi 1 ile 5 arasýnda olmalýdýr.");
			if (GetCash(playerid) < level * 400)	return SendErrorMessage(playerid, "%i seviye ilk yardým kiti için yeterli paranýz bulunmuyor, gereken: $%i.", level, level * 400);

			HouseInfo[houseid][hHeal] = level;
			HouseInfo[houseid][hHealAmount] = 3;
			SQL_SetInteger("houses", "heal", HouseInfo[houseid][hHeal], HouseInfo[houseid][hID]);
			SQL_SetInteger("houses", "heal_amount", HouseInfo[houseid][hHealAmount], HouseInfo[houseid][hID]);
			GiveCash(playerid, -level * 400);
			SendSyntaxMessage(playerid, "%i seviye ilk yardým kiti aldýnýz, ödenen tutar: $%i.", HouseInfo[houseid][hHeal], level * 400);
			return 1;
		}
	}

	else if (CompareStrings(option, "paracek"))
	{
		new houseid;

		if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz.");
		if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

		new amount;

		if (sscanf(secoption, "i", amount))
		{
			SendHelpMessage(playerid, "/ev paracek [tutar]");
			SendSyntaxMessage(playerid, "Evin kasasýnda $%i bulunuyor.", HouseInfo[houseid][hCash]);
			return 1;
		}
		if (amount > HouseInfo[houseid][hCash] || amount < 1)	return SendErrorMessage(playerid, "Evin kasasýnda yeterli para bulunmuyor veya geçersiz tutar girdiniz.");

		GiveCash(playerid, amount);
		HouseInfo[houseid][hCash] -= amount;
		SendSyntaxMessage(playerid, "Evin kasasýndan $%i tutarýnda para aldýnýz. Kasada kalan: $%i.", amount, HouseInfo[houseid][hCash]);
		SQL_SetInteger("houses", "cash", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
		return 1;
	}

	else if (CompareStrings(option, "parayatir"))
	{
		new houseid;

		if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz. ");
		if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

		new amount;

		if (sscanf(secoption, "i", amount))
		{
			SendHelpMessage(playerid, "/ev parayatir [tutar]");
			SendSyntaxMessage(playerid, "Evin kasasýnda $%i bulunuyor.", HouseInfo[houseid][hCash]);
			return 1;
		}
		if (amount > GetCash(playerid) || amount < 1)	return SendNotCash(playerid);

		GiveCash(playerid, -amount);
		HouseInfo[houseid][hCash] += amount;
		SendSyntaxMessage(playerid, "Evin kasasýndan $%i tutarýnda para aldýnýz. Kasada kalan: $%i.", amount, HouseInfo[houseid][hCash]);
		SQL_SetInteger("houses", "cash", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
		return 1;
	}

	else if (CompareStrings(option, "sistemesat"))
	{
		new houseid;

		if ((houseid = GetNearOutsideHouse(playerid)) == -1)			return SendErrorMessage(playerid, "Satmak istediðiniz eve yakýn deðilsiniz.");
		if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

		static const str_size[] = "{FFFFFF}Evinizi $%i fiyatýna satmak istediðinize emin misiniz?";
		new mes[sizeof(str_size) - 2 + 12];
 		format(mes, sizeof(mes), str_size, HouseInfo[houseid][hPrice]/2);
		Dialog_Show(playerid, SellHouse, DIALOG_STYLE_MSGBOX, "{FFFFFF}Ev Satýþý", mes, "Sat", "Ýptal");
		return 1;
	}

	else if (CompareStrings(option, "sat"))
	{
		new userid, price;

		if (sscanf(secoption, "ui", userid, price))			return SendHelpMessage(playerid, "/ev sat [ID / isim] [fiyat]");

		new houseid;

		if ((houseid = GetNearOutsideHouse(playerid)) == -1)			return SendErrorMessage(playerid, "Satmak istediðiniz eve yakýn deðilsiniz.");
		if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");
		if (!IsPlayerLogged(userid))									return SendNotConnected(playerid);
		if (!PlayerNearPlayer(3.0, playerid, userid))					return SendNotNearPlayer(playerid);
		if (price < 0 || price > 100000000)								return SendErrorMessage(playerid, "Satýþ fiyatý $0 ile $100000000 arasýnda olmalýdýr.");

		pTemp[userid][pHousePrice] = price;
		pTemp[userid][pHousePlayer] = playerid;
		pTemp[userid][pHouseHouse] = houseid;
		SetPVarInt(userid, #accept_time, gettime() + 30);
		SendSyntaxMessage(playerid, "%s adlý kiþiye evinizi satmak için teklif gönderdiniz. Fiyat: $%i", GetNameEx(userid), price);
		SendSyntaxMessage(userid, "%s adlý kiþi size evini satmak istiyor, onaylamak için Y tuþuna basýn. Fiyat: $%i", GetNameEx(playerid), price);
	}

	if (CompareStrings(option, "arkakapi"))
	{
		new houseid = GetNearInsideHouse(playerid);

		if (houseid == -1) return SendErrorMessage(playerid, "Evde olmalýsýnýz!");
		if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");
		if (GetInterior(playerid) != HouseInfo[houseid][hExitInt] || GetWorld(playerid) != HouseInfo[houseid][hExitVW]) {
			return SendErrorMessage(playerid, "Evde olmalýsýnýz!");
		}

		if (!HouseInfo[houseid][hExtX][0] && !HouseInfo[houseid][hExtY][0] && !HouseInfo[houseid][hExtZ][0]) {
			return SendErrorMessage(playerid, "Evinizin ek kapýsý bulunmuyor! (Evinize farklý giriþ/çýkýþ ekletmek için sistem tanýtýmýný inceleyiniz)");
		}

		new Float: posX, Float: posY, Float: posZ;
		GetPlayerPos(playerid, posX, posY, posZ);

		HouseInfo[houseid][hExtX][1] = posX;
		HouseInfo[houseid][hExtY][1] = posY;
		HouseInfo[houseid][hExtZ][1] = posZ;

		HouseInfo[houseid][hExtVW][1] = GetPlayerVirtualWorld(playerid);
		HouseInfo[houseid][hExtInt][1] = GetPlayerInterior(playerid);

		Save_House(houseid);
		SendSyntaxMessage(playerid, "Baþarýlý þekilde evinize ek çýkýþ konumu ayarladýnýz.");
	}

	return 1;
}

CMD:evmenu(playerid, params[])
{
    new houseid;

	if ((houseid = GetNearHouse(playerid)) == -1)					return SendErrorMessage(playerid, "Eve yakýn deðilsiniz.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

	static const str_size[] = "[%s]\n\
								Ev geliþtirmeleri\n\
								Mobilya yönetimi\n\
								Kiracýlar\n\
								Ev envanteri\n\
								Ev kasasý\n\
								Gardrop\n\
								Evi Sat";
	new mes[sizeof(str_size) - 6 + 9 + 5 + 5];

	format(mes, sizeof(mes), str_size, (HouseInfo[houseid][hLocked] != 0) ? ("Kilitli") : ("Kilitli Deðil"));
	Dialog_Show(playerid, HouseMenu, DIALOG_STYLE_LIST, "Ev Menüsü", mes, "Seç", "Ýptal");
	return 1;
}

alias:rentroom("evkirala", "/odakirala");
CMD:rentroom(playerid, params[])
{
    new houseid;
	if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evin içinde olmalýsýnýz. ");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

    new userid, price;

	if (sscanf(params,"ud", userid, price))							return SendHelpMessage(playerid, "/evkirala [ID / isim] [saatlik kira ücreti]");
    if (userid == playerid)											return 1;
	if (!IsPlayerLogged(userid))									return SendNotConnected(playerid);
    if (!PlayerNearPlayer(3.0, playerid, userid))					return SendNotNearPlayer(playerid);
	if (price < 0 || price > 500)									return SendErrorMessage(playerid, "Saatlik kira ücreti $0 ile $500 arasýnda bir deðer olmalýdýr");
    if (GetPlayerHouses(userid) || PlayerInfo[userid][pRentKey])	return SendErrorMessage(playerid, "Belirtilen oyuncunun bir evi var veya baþka bir ev kiralamýþ.");
	if (GetCash(userid) < price)									return SendErrorMessage(playerid, "Belirtilen oyuncunun yeterli parasý bulunmuyor.");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `id` FROM `users` WHERE `rent_key`=%i", HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query, "OfferRentRoom", "iii", playerid, userid, price);
	return 1;
}

alias:unrent("evkiraiptal");
CMD:unrent(playerid, params[])
{
	if (PlayerInfo[playerid][pRentKey] < 1)	return SendErrorMessage(playerid, "Herhangi bir evi kiralamýyorsunuz.");

	PlayerInfo[playerid][pRentKey] = 0;
	SQL_SetInteger("users", "rent_key", 0, PlayerInfo[playerid][pID]);
	SendSyntaxMessage(playerid, "Ev kirasýný iptal ettiniz.");
	return 1;
}

/*
CMD:tenants(playerid, params[])
{
	new houseid;

	if ((houseid = GetNearHouse(playerid)) == -1)					return SendErrorMessage(playerid, "Eve yakýn deðilsin.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `id`, `name` FROM `users` WHERE `rent_key` = %i", HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query, "ShowTenantsAmount", "i", playerid);
	return 1;
}*/

CMD:iyilestir(playerid, params[])
{
	new id, userid;

	if ((id = GetNearInsideHouse(playerid)) != -1 && PlayerInfo[playerid][pID] == HouseInfo[id][hOwnerID])
	{
	    if (HouseInfo[id][hHeal] == 0)					return SendErrorMessage(playerid, "Evinizde ilk yardým kiti bulunmuyor.");
	    if (pTemp[playerid][pHealTime] > gettime())		return SendErrorMessage(playerid, "Ýlk yardým kitini %i saniye boyunca kullanamazsýnýz.", pTemp[playerid][pHealTime]-gettime());
	    if (sscanf(params,"u", userid))					return SendHelpMessage(playerid, "/iyilestir [ID / isim]");
        if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
        if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);
        if (PlayerInfo[userid][pInjured])				return SendErrorMessage(playerid, "Belirtilen kiþi ölü/yaralý/baygýn.");
        if (GetPlayerHealthEx(userid) >= 100.0)			return SendErrorMessage(playerid, "Belirtilen kiþi saðlýklý.");

		if (playerid != userid)
		{
        	SendSyntaxMessage(playerid, "%s adlý kiþiye ilk yardým uyguladýnýz. (+%i HP) Tekrar ilk yardým uygulayabilmek için %i saniye beklemeniz gerekiyor.", GetNameWithMask(userid), (HouseInfo[id][hHeal] * 20), 40 + (HouseInfo[id][hHeal] * 20));
			SendSyntaxMessage(userid, "%s adlý kiþi size ilk yardým uyguladý. (+%i HP)", GetNameWithMask(playerid), (HouseInfo[id][hHeal] * 20));
		}
		else
		{
		    SendSyntaxMessage(playerid, "Kendinize ilk yardým uyguladýnýz. (+%i HP) Tekrar ilk yardým uygulayabilmek için %i saniye beklemeniz gerekiyor.", (HouseInfo[id][hHeal] * 20), 40 + (HouseInfo[id][hHeal] * 20));
		}

		ResetDamages(userid);

        StopPlayerAnims(userid);
		UnFreezePlayer(userid);

		pTemp[playerid][pHealTime] = gettime() + 40 + (HouseInfo[id][hHeal] * 20);

		if (PlayerInfo[userid][pHealth]> 100.0)  PlayerInfo[playerid][pHealth] = 100.0;

		HouseInfo[id][hHealAmount]--;
		if (!HouseInfo[id][hHealAmount]) HouseInfo[id][hHeal] = 0;
		Save_House(id);
		return 1;
	}

	else if (IsPlayerFactionMedic(playerid) || IsPlayerFactionFire(playerid)) //FD Heal
	{
		if (sscanf(params,"u", userid))					return SendHelpMessage(playerid, "/iyilestir [ID / isim]");
		if (!PlayerInfo[playerid][pOnDuty])				return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
		if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
		if (userid == playerid)							return 1;
		if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);
		if (pTemp[userid][pHealPlayer] == playerid)		return SendErrorMessage(playerid, "Belirtilen kiþiye tedavi teklifi gönderilmiþ.");
		if (PlayerInfo[userid][pInjured] != 0)			return SendErrorMessage(playerid, "Belirtilen kiþi ölü veya yaralý.");
		if (GetPlayerHealthEx(userid) >= 100.0)			return SendErrorMessage(playerid, "Belirtilen kiþi saðlýklý.");

		pTemp[userid][pHealPlayer] = playerid;
		SetPVarInt(userid, #accept_time, gettime() + 30);
		SendSyntaxMessage(userid, "%s adlý kiþi sizi tedavi etmek istiyor. Y tuþuna basarak teklifi kabul edebilirsin.", GetNameWithMask(playerid));
		SendSyntaxMessage(playerid, "%s adlý kiþiye tedavi teklifi gönderildi.", GetNameWithMask(userid));
	}

	else return SendErrorMessage(playerid, "Evde deðilsiniz.");

	return 1;
}

alias:dekorasyonizni("dekorasyonizin");
CMD:dekorasyonizni(playerid, params[])
{
    new userid;

	if (sscanf(params,"u", userid))					return SendHelpMessage(playerid, "/dekorasyonizni [ID / isim]");
    if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (userid == playerid)							return 1;
	if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);

    new houseid;

	if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evde olmalýsýnýz.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid,"Bu ev sana ait deðil.");

	if (pTemp[userid][pBuildHouse] == HouseInfo[houseid][hID])
	{
	    SendSyntaxMessage(playerid, "%s adlý kiþinin mobilya düzenleme eriþimini kaldýrdýnýz.", GetNameWithMask(userid));
	    SendSyntaxMessage(userid, "%s adlý kiþi mobilya düzenleme eriþiminizi kaldýrdý.", GetNameWithMask(playerid));
	    pTemp[userid][pBuildHouse] = 0;
	    return 1;
	}
	SendSyntaxMessage(playerid, "%s adlý kiþiye mobilya düzenleme eriþimi verdiniz.", GetNameWithMask(userid));
 	SendSyntaxMessage(userid, "%s adlý kiþi mobilya düzenleme eriþimi verdi.", GetNameWithMask(playerid));
    pTemp[userid][pBuildHouse] = HouseInfo[houseid][hID];
	return 1;
}

CMD:depo(playerid, params[])
{
    new houseid;

	if ((houseid = GetNearInsideHouse(playerid)) == -1)				return SendErrorMessage(playerid, "Evde olmalýsýnýz.");
	if (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait deðil.");

 	GetPlayerPos(playerid, HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]);

 	Save_House(houseid);
 	SendSyntaxMessage(playerid, "Depo konumunu deðiþtirdiniz.");
	return 1;
}

alias:evkilitkir("ekk", "evkilidikir", "evinkilidinikir");
CMD:evkilitkir(playerid, params[])
{
	if (!PoliceOnline())	return SendErrorMessage(playerid, "Oyunda aktif en az %i polis olmalýdýr.", NEED_COPS_TO_CRIME);

	new houseid = GetNearHouse(playerid);
	if (houseid == -1)						 		  return SendErrorMessage(playerid, "Evin giriþine yakýn olmalýsýnýz.");
	if (!IsPlayerOutsideHouse(playerid, houseid, 3.0)) return SendErrorMessage(playerid,"Evin giriþine yakýn olmalýsýnýz.");
	if (HouseInfo[houseid][hOwnerID] == 0)   		  return SendErrorMessage(playerid,"Yalnýzca satýn alýnan evlerde hýrsýzlýk yapýlabilir.");
	if (HouseInfo[houseid][hOwnerID] == PlayerInfo[playerid][pID])   		  return SendErrorMessage(playerid,"Kendi evinizde hýrsýzlýk yapamazsýnýz.");
	if (HouseInfo[houseid][hLocked] == 0)   		  return SendErrorMessage(playerid,"Bu evin kapýsý kilitli deðil.");
	if (JackingLock[playerid] != 0)         		  return SendErrorMessage(playerid, "Kapý kilidini kýrarken tekrar ayný iþlemi yapamazsýnýz.");
	if (IsPlayerCrouching(playerid) == false) 		  return SendErrorMessage(playerid, "Eðilmek zorundasýn.");

	foreach(new i : Player) {
		if (BreakingHouse[i] == houseid) return SendErrorMessage(playerid, "Baþka birisi bu evin kilidini kurcalýyor.");
	}

	new param[18];
	if (sscanf(params, "s[18]", param)) {
		SendHelpMessage(playerid, "/evkilitkir");
		SendSyntaxMessage(playerid, "sessiz - maymuncukla evin kilidini sessizce açmak (yavaþ)");
		SendSyntaxMessage(playerid, "sesli - levye ile evin yüksek sesle soyulmasý, alarm var ise devreye girer. (hýzlý)");
		SendSyntaxMessage(playerid, "Kilit kýrmayý iptal etmek için (/kilitkiriptal - /kki) komutunu kullanabilirsiniz!");
		return 1;
	}

	if (CompareStrings(param, "sessiz"))
	{
		pTemp[playerid][JackingType] = 3;
		BreakingHouse[playerid] = houseid;

		new htime;

		switch(HouseInfo[houseid][hDoor]) {
			case 0: htime = 250+HouseInfo[houseid][hLock]*250;
			case 1: htime = 250+HouseInfo[houseid][hLock]*250 + floatround((250+HouseInfo[houseid][hLock]*250) * 0.05);
			case 2: htime = 250+HouseInfo[houseid][hLock]*250 + floatround((250+HouseInfo[houseid][hLock]*250) * 0.15);
		}

		static const str_size[] = "{"COL_GREY"}Evin kapýsýný kýrmaya baþlamak ister misiniz? [%s] %i saniye sürecek";
		new mes[sizeof(str_size) + 6 + 70];
		format(mes, sizeof(mes), str_size, (!HouseInfo[houseid][hApart])?(GetHouseZone(houseid)):(GetApartmentZone(HouseInfo[houseid][hApart])), htime);
        Dialog_Show(playerid, StartBreakingLock, DIALOG_STYLE_MSGBOX, "{FFFFFF}Kapý Kýr", mes, "Baþla", "Ýptal");
	}
	else if (CompareStrings(param, "sesli"))
	{
		if (!CheckHanditem(playerid,18634)) return SendErrorMessage(playerid, "Elinizde bir levye olmalý. (/aksesuar)");
		pTemp[playerid][JackingType] = 4;
		BreakingHouse[playerid] = houseid;

		new htime;

		switch(HouseInfo[houseid][hDoor]) {
			case 0: htime = floatround((250+HouseInfo[houseid][hLock]*250)*0.6);
			case 1: htime = floatround((250+HouseInfo[houseid][hLock]*250 + floatround((250+HouseInfo[houseid][hLock]*250) * 0.05))*0.6);
			case 2: htime = floatround((250+HouseInfo[houseid][hLock]*250 + floatround((250+HouseInfo[houseid][hLock]*250) * 0.15))*0.6);
		}

		static const str_size[] = "{"COL_GREY"}Evin kapýsýný kýrmaya baþlamak ister misin? [%s] %i saniye sürecek";
		new mes[sizeof(str_size) + 76];
		format(mes, sizeof(mes), str_size, (!HouseInfo[houseid][hApart])?(GetHouseZone(houseid)):(GetApartmentZone(HouseInfo[houseid][hApart])), htime);
        Dialog_Show(playerid, StartBreakingLock, DIALOG_STYLE_MSGBOX, "{FFFFFF}Kapý Kýr", mes, "Baþla", "Ýptal");
	} else {
		SendHelpMessage(playerid, "/evkilitkir");
		SendSyntaxMessage(playerid, "sessiz - maymuncukla evin kilidini sessizce açmak (yavaþ)");
		SendSyntaxMessage(playerid, "sesli - levye ile evin yüksek sesle soyulmasý, alarm var ise devreye girer. (hýzlý)");
		return 1;
	}
	return 1;
}
/*Vehicle_OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if (checkpointid == pTemp[playerid][JackingCP])
	{
		if (!IsPlayerInAnyVehicle(playerid)) 							  return InfoMSG(playerid, "ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ ~r~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ~w~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½!", 3);
		if (GetPlayerVehicleID(playerid) != pTemp[playerid][JackingVehID]) return InfoMSG(playerid, "ï¿½ï¿½ ï¿½ï¿½ ~r~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ~w~ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½!", 3);
		if (IsPoliceNear(playerid)){
			InfoMSG(playerid, "ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ ~y~ï¿½ï¿½ï¿½ï¿½ï¿½~w~! ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ~r~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½", 3);

			DisableWaypoint(playerid);
			if (IsValidDynamicCP(pTemp[playerid][JackingCP])) DestroyDynamicCP(pTemp[playerid][JackingCP]);
			pTemp[playerid][JackingCP] = 0;

			new randomCP = random(sizeof(Jacking_CP));
			pTemp[playerid][JackingCP] = CreateDynamicCP(Jacking_CP[randomCP][0], Jacking_CP[randomCP][1], Jacking_CP[randomCP][2], 1.5, 0, 0, playerid, 15000.0);
			TogglePlayerDynamicCP(playerid, pTemp[playerid][JackingCP], true);
    		Streamer_Update(playerid, STREAMER_TYPE_CP);

			return 1;
		}

		new vehid = pTemp[playerid][JackingVehID],
			model = GetVehicleModel(vehid),
			price = floatround(GetVehiclePrice(model)*0.1);

		VehicleInfo[vehid][carDestroyed]++;

		SQL_SetInteger("cars", "jacking", 1, VehicleInfo[vehid][carID]);
		SQL_SetInteger("cars", "destroys", VehicleInfo[vehid][carDestroyed], VehicleInfo[vehid][carID]);

		new userid;
		foreach(new i : Player) {
			if (PlayerInfo[i][pID] == VehicleInfo[vehid][carOwnerID]) {
				userid = i;
				break;
			}
		}

		SendClientMessageEx(userid, COLOR_LIGHTRED, "[ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ] ï¿½ï¿½ï¿½ %s ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½. (/mycars)", VehicleNames[GetVehicleModel(vehid)-400]);

		InfoMSG(playerid, "ï¿½ï¿½ ~g~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ~w~ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½", 3);
		GiveCash(playerid, price);
		RemovePlayerFromVehicle(playerid);

		ResetVehicleStuff(vehid);
		DestroyVehicle(vehid);

		if (IsValidDynamicCP(pTemp[playerid][JackingCP])) DestroyDynamicCP(pTemp[playerid][JackingCP]);
		pTemp[playerid][JackingCP] = 0;
		pTemp[playerid][JackingVehID] = 0;
		SetPVarInt(playerid, #JACKING_PROCESS, 0);
	}
	return 1;
}*/

Veh_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    new Float:oldX, Float:oldY, Float:oldZ,
	Float:oldRotX, Float:oldRotY, Float:oldRotZ;

    GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

    if (GetPVarInt(playerid, #veh_editor) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
	    new vehicle = GetPVarInt(playerid, #veh_editor), slot = GetPVarInt(playerid, #veh_slot), attobj = GetPVarInt(playerid, #veh_obj);

		DeletePVar(playerid, #veh_editor);
		DeletePVar(playerid, #veh_slot);
		DeletePVar(playerid, #veh_obj);

		new Float:ofx, Float:ofy, Float:ofz, Float:ofaz, Float:finalx, Float:finaly, Float:px, Float:py, Float:pz, Float:roz;

		GetVehiclePos(vehicle, px, py, pz);
		GetVehicleZAngle(vehicle, roz);

		ofx = x-px, ofy = y-py, ofz = z-pz, ofaz = rz-roz;
		finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
		finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);
		AttachDynamicObjectToVehicle(objectid, vehicle, finalx, finaly, ofz, rx, ry, ofaz);
		VehicleInfo[vehicle][carAttachObj][slot] = attobj;
		VehicleInfo[vehicle][carAttachPosX][slot] = finalx;
		VehicleInfo[vehicle][carAttachPosY][slot] = finaly;
		VehicleInfo[vehicle][carAttachPosZ][slot] = ofz;
		VehicleInfo[vehicle][carAttachRotX][slot] = rx;
		VehicleInfo[vehicle][carAttachRotY][slot] = ry;
		VehicleInfo[vehicle][carAttachRotZ][slot] = ofaz;

	    if (!GetPVarInt(playerid, "Vehicle:AttEdit"))
		{
			GiveCash(playerid, -250);
			InfoMSG(playerid, "~w~Tebrikler, ~y~objeyi ~w~~g~$250 ~w~karsiliginda aldin~n~~y~~w~/aracaksesuar - arac objelerini kontrol edebilirsiniz.", 5);
		}
		else InfoMSG(playerid, "~w~Basarili bir sekilde ~y~objenin~w~ pozisyonunu duzenledin!", 5);

		Save_CarAttach(vehicle, slot);
	}
	return 1;
}

this::Cars_OnGameModeInit()
{
	mysql_tquery(dbHandle, "SELECT * FROM `cars` WHERE (owner = 0 OR owner = 65535) AND type = 0", "LoadDynamicCars", "");
	mysql_tquery(dbHandle, "DELETE FROM `cars` WHERE (owner = 0 OR owner = 65535) AND type > 0");
	return 1;
}

this::OneHourSave()
{
	for(new i; i < MAX_BIZ; i++) Save_Business(i);
	for(new i; i < MAX_HOUSES; i++) Save_House(i);
	for(new i; i < MAX_APART; i++) Save_Apart(i);
	//for(new i; i < MAX_ARREST; i++) Save_Arre(i);

	SaveServer();
    return 1;
}

this::Vehicle_OnGameModeInit()
{
	mysql_tquery(dbHandle, "SELECT * FROM `rental_points`", "LoadDynamicRentalPoint");
	for(new v = 1; v < MAX_VEHICLES; v++)
	{
		SetVehicleVirtualWorldEx(v, 0);
		SetVehicleInteriorEx(v, 0);
    	VehicleInfo[v] = default_VehicleInfo;
	    VehicleInfo[v][carOwnerPlayer] = INVALID_PLAYER_ID;
	    VehicleInfo[v][carDriver] = INVALID_PLAYER_ID;
		VehicleInfo[v][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(v));
	}
	return 1;
}

Vehicle_OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(newstate == PLAYER_STATE_DRIVER)
	{
		SetPlayerArmedWeapon(playerid, 0);
	}

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		if(GetPlayerWeapon(playerid) == WEAPON_DEAGLE)
		{
			SetPlayerArmedWeapon(playerid, 0);
		}
	}

	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
	{
	    new vehicleid;

	    vehicleid = GetPVarInt(playerid, PVAR_LASTENTEREDVEH_ID);
	    if (VehicleInfo[vehicleid][carType] != 0 && !VehicleInfo[vehicleid][carFaction]) SendServerMessage(playerid, "Kiralýk araçtan indiniz, eðer (15 Dakika) boyunca araç ile etkileþime girmezsen lisans iptal olacak."), VehicleInfo[vehicleid][carTerminate] = 4100;
	    //if (VehicleInfo[vehicleid][carOwnerID] > 0 && !VehicleInfo[vehicleid][carFaction]) SendServerMessage(playerid, "KiÅisel aracÄ±nÄ±zdan indiniz, eÄer (1 saat) iÃ§erisinde araÃ§la bir etkileÅime girmezseniz aracÄ±nÄ±z spawn olacak!"), VehicleInfo[vehicleid][carTerminateEx] = 4000;
	}

	if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
	{
		if(GetTickCount() - pTemp[playerid][pCarTick] < 300) Kick(playerid);
		pTemp[playerid][pCarTick] = GetTickCount();
	}

	if (newstate == PLAYER_STATE_DRIVER)
	{
		if(!PlayerInfo[playerid][pAdmin] && GetPlayerVehicleID(playerid) != pTemp[playerid][pCarWarpVehicleID] && IsPlayerLoggedIn(playerid)) {
			if(pTemp[playerid][pCarWarpTime] > gettime())
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "LOSWORLD-AC tarafÄ±ndan kalÄ±cÄ± olarak yasaklandÄ±n. Sebep: Vehicle-Hack (#2)");

	            new query[256];
	            mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `block_name`='Blaze Guard', `block_reason` ='Vehicle Troll', `status` = '3' WHERE `id` = '%i'", PlayerInfo[playerid][pID]);
	            mysql_tquery(dbHandle, query);

	            new mes[128];
                format(mes, sizeof(mes), "(( %s adlÄ± karakter LOSWORLD-Guard tarafÄ±ndan yasaklandÄ±. Sebep: Vehicle Troll ))", GetNameEx(playerid));
	            SendClientMessageByAdmin(COLOUR_TOMATO, mes);

				KickEx(playerid);
				return 1;
			}
			pTemp[playerid][pCarWarpTime] = gettime() + 1;
			pTemp[playerid][pCarWarpVehicleID] = GetPlayerVehicleID(playerid);
		}

		new vehicle = GetPlayerVehicleID(playerid), Float: vhealth;

		AntiCheatGetVehicleHealth(vehicle, vhealth);

		if (!GetPlayerHasRightDrive(playerid, vehicle))  return 1;
	    if (IsABicycle(vehicle)) 						VehicleEngine(vehicle, true);

	    VehicleInfo[vehicle][carDriver] = playerid;
	    pTemp[playerid][pDriver] = vehicle;

		if (IsRentCar(vehicle) && VehicleInfo[vehicle][carRent] == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "[Araç] Bilgi: " EMBED_SILVER "Bu araca $300 ödeyerek 1 saatligine kiralayabilirsin. " EMBED_GRAY " '/arac kirala'");
		}

		if (	!VehicleInfo[vehicle][carRent] &&
			((IsPizzaCar(vehicle) && PlayerInfo[playerid][pSideJob] == JOB_PIZZA) ||
			(IsTaxiCar(vehicle) && PlayerInfo[playerid][pJob] == JOB_TAXI) ||
			(IsMechanicCar(vehicle) && PlayerInfo[playerid][pJob] == JOB_MECHANIC) ||
			(IsTrashMasterCar(vehicle) && PlayerInfo[playerid][pJob] == JOB_TRASHMASTER) ||
			(IsTasimacilikCar(vehicle) && PlayerInfo[playerid][pJob] == JOB_TASIMACILIK) ||
			(IsTruckCar(vehicle) && PlayerInfo[playerid][pJob] == JOB_TRUCKER && GetAvailableTruck(playerid, GetVehicleModel(vehicle))))
		) {
			SendClientMessage(playerid, COLOR_GRAY, "[Araç] Bilgi: " EMBED_SILVER "Bu araç meslek aracýdýr, kiralamak için: " EMBED_GRAY " '/meslekarackirala'");
		}

        if (VehicleInfo[vehicle][carFaction] > 0)
        {
            SendClientMessageEx(playerid, COLOR_GRAY, "[Araç] Birlik: " EMBED_SILVER "%s " EMBED_GRAY "/ Model: " EMBED_SILVER "%s " EMBED_GRAY "/ ID: " EMBED_SILVER "%d", Factions[VehicleInfo[vehicle][carFaction]][fName], VehicleNames[GetVehicleModel(vehicle) - 400], vehicle);
        }
        else if(VehicleInfo[vehicle][carOwnerID] > 0 && VehicleInfo[vehicle][carOwnerID] != INVALID_PLAYER_ID && !IsRentCar(vehicle) && VehicleInfo[vehicle][carType] <= 0)
        {
            SendClientMessageEx(playerid, COLOR_GRAY, "[Araç] Sahip: " EMBED_SILVER "%s " EMBED_GRAY "/ Model: " EMBED_SILVER "%s " EMBED_GRAY "/ ID: " EMBED_SILVER "%d", GetPlayerNameBySqlID(VehicleInfo[vehicle][carOwnerID]), VehicleNames[GetVehicleModel(vehicle) - 400], vehicle);
        }

        else SendClientMessageEx(playerid, COLOR_GRAY, "[Araç] Model: " EMBED_SILVER "%s " EMBED_GRAY "/ ID: " EMBED_SILVER "%d", VehicleNames[GetVehicleModel(vehicle) - 400], vehicle);

        if(IsEngineVehicle(vehicle))
        {
            SendClientMessageEx(playerid, COLOR_GRAY, "[Araç] Plaka: " EMBED_SILVER "%s " EMBED_GRAY "/ Kilometre: " EMBED_SILVER "%.2f ", VehicleInfo[vehicle][carPlate], VehicleInfo[vehicle][carMilliage]);
        }

        if (CheckAdmin(playerid, DEVELOPER_LEVEL))
        {
            SendClientMessageEx(playerid, COLOR_GRAY, "[Araç] [DEV] Database ID: " EMBED_SILVER "%d " EMBED_GRAY "/ Sahip ID: " EMBED_SILVER "%d", VehicleInfo[vehicle][carID], VehicleInfo[vehicle][carOwnerID]);
        }

		//if (!VehicleInfo[vehicle][carEngineOn] && !IsADMVCar(vehicle) && !IsADMVTaxi(vehicle) && !IsADMVHeli(vehicle) && !IsABicycle(vehicle))
			//SCM(playerid, COLOR_GREEN,"-> Engine not started - press '2' or type /(en)gine.");

		if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID || pTemp[playerid][pEmergency])
			SetPlayerCellphoneAction(playerid, 1);

		SetPVarInt(playerid, PVAR_LASTENTEREDVEH_ID, vehicle);
		SetPVarInt(playerid, PVAR_LASTENTEREDVEH_SEAT, GetPlayerVehicleSeat(playerid));

//		TextDrawShowForPlayer(playerid, TD_vehicle_info[0]);
//    	TextDrawShowForPlayer(playerid, TD_vehicle_info[1]);
//	    PlayerTextDrawSetString(playerid, TD_vehicle_name[playerid], VehicleNames[GetVehicleModel(vehicle)-400]);
//		PlayerTextDrawShow(playerid, TD_vehicle_name[playerid]);
//		SetPVarInt(playerid, #vehicle_info, 5);
	}

	if (oldstate == PLAYER_STATE_DRIVER)
	{
     	new veh = pTemp[playerid][pDriver];

		pTemp[playerid][pDriver] = INVALID_VEHICLE_ID;

		if (veh != INVALID_VEHICLE_ID && VehicleInfo[veh][carDriver] == playerid)	VehicleInfo[veh][carDriver] = INVALID_PLAYER_ID;
		if (JackingEngine[playerid]) 												StopJackingEngine(playerid);
		if (GetPVarInt(playerid, #UsePump))											Fuel_ResetPlayer(playerid);

	}
	return 1;
}

Vehicle_OnPlayerExitVehicle(playerid, vehicleid)
{
	if (JackingEngine[playerid]) 			StopJackingEngine(playerid);
	if (PlayerInfo[playerid][InMission])	LeaveMission(playerid);
	if (IsPlayerUseMDC(playerid))			MDC_Hide(playerid);
	if (VehicleInfo[vehicleid][carRadioOn])	StopAudioStreamForPlayer(playerid);
	if (pTemp[playerid][pPizzaBoy])         SendServerMessage(playerid, "Kurye motorunun yakýnýnda /pizza komutuyla pizzayý elinize alabilirsiniz.");
	if (pTemp[playerid][pTruckerOn])        SendServerMessage(playerid, "Taþýmacýlýk kamyonunun yakýnýnda /koli komutuyla kutuyu elinize alabilirsiniz.");
	return 1;
}

V_OnVehicleDamageStatusUpdate(vehicleid)
{
	new panels, doorsd, lightsf, tires;

	GetVehicleDamageStatus(vehicleid, panels, doorsd, lightsf, tires);

	if (!VehicleInfo[vehicleid][carOwnerID]) return 1;

	if (!panels && !doorsd && !lightsf && !tires) return 1;

	new Float:health;

	AntiCheatGetVehicleHealth(vehicleid, health);

	if (health > 750.0)	UpdateVehicleDamageStatus(vehicleid, 0, 0, 0, 0);

	if (health < 350.0)
	{
	   	if (VehicleInfo[vehicleid][carEngine] > 0.0)	VehicleInfo[vehicleid][carEngine] -= 1.0;
		if (VehicleInfo[vehicleid][carEngine] < 0.0)
		{
	    	if (VehicleInfo[vehicleid][carEngineOn])	VehicleEngine(vehicleid, false);

			VehicleInfo[vehicleid][carEngine] = 0.0;
		}
	}
	return 1;
}
this::LoadDynamicCars()
{
    new rows = cache_num_rows(), time = GetTickCount(), total = 0; // `total` degiskeni baslatildi
    new sqlid, model, color1, color2, faction, type, vw, interior, vehicle;
    new Float:x, Float:y, Float:z, Float:a;
    new plate[24];

    if (!rows)
    {
        print("[Cars] Kayit bulunamadi.");
        return 1;
    }

    for (new i = 0; i < rows; i++) // Döngü degiskeni `i` baslatildi
    {
        cache_get_value_int(i, "id", sqlid);
        cache_get_value_int(i, "model", model);
        cache_get_value_float(i, "x", x);
        cache_get_value_float(i, "y", y);
        cache_get_value_float(i, "z", z);
        cache_get_value_float(i, "a", a); // `fa` yerine `a` kullanildi, veritabani kontrol edilmeli
        cache_get_value_int(i, "color1", color1);
        cache_get_value_int(i, "color2", color2);
        cache_get_value_int(i, "type", type);
        cache_get_value_int(i, "faction", faction);
        cache_get_value(i, "plate", plate, sizeof(plate)); // Daha güvenli kullanim
        cache_get_value_int(i, "int", interior);
        cache_get_value_int(i, "vw", vw);

        // Araci olustur
        vehicle = CreateFactionVehicle(false, model, x, y, z, a, color1, color2, type, faction, plate, vw, interior, sqlid);

        if (vehicle != INVALID_VEHICLE_ID) // Geçerli bir araç olusturuldu mu kontrol et
        {
            VehicleInfo[vehicle][carOwnerPlayer] = INVALID_VEHICLE_ID;

            // Dogru parametrelerle fonksiyonlari çagir
            SetVehicleVirtualWorldEx(vehicle, vw);
            SetVehicleInteriorEx(vehicle, interior);

            total++;
        }
    }

    printf("[Cars] Satir: %i | Yüklenen: %i | Yüklenme Süresi: %i ms.", rows, total, GetTickCount() - time);
    return 1;
}


this::OnVehicleInsert(vehicleid)
{
    VehicleInfo[vehicleid][carID]= cache_insert_id();
	return 1;
}

this::BuyVehicleForPlayer(playerid)
{
    new Float:x, Float:y, Float:z, Float:fa, model = GetPVarInt(playerid, "BuyingVehicleModel"), plate[24], dealer = -1;

	if (IsABoatModel(model) && (dealer = DealerShip_Nearest(playerid, BIZ_BOATSALON)) == -1)							return SendErrorMessage(playerid, "Su araç galerisinin yakýnýnda olmalýsýnýz.");
    if (IsAPlaneModel(model) && (dealer = DealerShip_Nearest(playerid, BIZ_FLYSALON)) == -1)							return SendErrorMessage(playerid, "Hava aracý galerisinin yakýnýnda olmalýsýnýz.");
	if (!IsABoatModel(model) && !IsAPlaneModel(model) && (dealer = DealerShip_Nearest(playerid, BIZ_AUTOSALON)) == -1)	return SendErrorMessage(playerid, "Araba galerisine yakýn olmalýsýnýz.");
	if (cache_num_rows() >= GetMaxPlayerCars(playerid))																	return SendErrorMessage(playerid,"Maksimum araç sayýsýna ulaþtýnýz daha fazla araç satýn alamazsýnýz.");

    new registerveh = price_reg[GetPVarInt(playerid, "BuyingVehicleRegister")],
		alarmveh = price_alarm[GetPVarInt(playerid, "BuyingVehicleAlarm")],
		lockveh = price_lock[GetPVarInt(playerid, "BuyingVehicleLock")],
		immobveh = price_immob[GetPVarInt(playerid, "BuyingVehicleImmob")],
		insuranceveh = GetInsurancePrice(GetPVarInt(playerid, "BuyingVehicleModel")) * GetPVarInt(playerid, "BuyingVehicleInsurance"),
		xmradioveh = price_radio[GetPVarInt(playerid, "BuyingVehicleRadio")],
		gpsveh = price_gps[GetPVarInt(playerid, "BuyingVehicleGps")],
		color1 = GetPVarInt(playerid, #veh_color1),
		color2 = GetPVarInt(playerid, #veh_color2);

	if (BizInfo[dealer][bizOwnerID] != 0 && !BizInfo[dealer][bizProduct]) return SendErrorMessage(playerid, "Bu galeride yeterince araç kalmamýþ.");

	new price = GetVehiclePrice(model)+registerveh+alarmveh+lockveh+immobveh+insuranceveh+xmradioveh+gpsveh;

	if (GetCash(playerid) < price)	return SendNotCash(playerid);

	SendSyntaxMessage(playerid, "%s model aracý $%i ödeyerek satýn aldýnýz.", VehicleNames[model-400], price);
	SendHelpMessage(playerid, "Araç komutlarýný öðrenmek için /(a)rac komutunu kullanabilirsiniz.");

	new money = PlayerInfo[playerid][pCash];

	GiveCash(playerid, -price);

	if (BizInfo[dealer][bizOwnerID] != 0)
	{
	    BizInfo[dealer][bizProduct]--;
		GiveBizCash(dealer, price);
	}

    new query[256];
	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s | Money(WAS): %i | Money(BECOME): %i] bought a car %s(Model: %i) for -- $%i", GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money, GetCash(playerid),
	VehicleNames[model-400], model, price);
    insert_log(query, VEHICLE_LOG, 1, PlayerInfo[playerid][pAccID]);

	if (IsABoatModel(model)) {
		if (!BizInfo[dealer][bizSpawn][0] && !BizInfo[dealer][bizSpawn][1] && !BizInfo[dealer][bizSpawn][2]) {
			x = 114.9191;
			y = -1902.8209;
			z = -0.6980;
			fa = 0.0;
		} else {
			x = BizInfo[dealer][bizSpawn][0];
			y = BizInfo[dealer][bizSpawn][1];
			z = BizInfo[dealer][bizSpawn][2];
			fa = BizInfo[dealer][bizSpawn][3];
		}
	} else if (IsAPlaneModel(model)) {
		if (!BizInfo[dealer][bizSpawn][0] && !BizInfo[dealer][bizSpawn][1] && !BizInfo[dealer][bizSpawn][2]) {
			x = 1943.5498;
			y = -2397.6553;
			z = 14.70;
			fa = 0.0;
		} else {
			x = BizInfo[dealer][bizSpawn][0];
			y = BizInfo[dealer][bizSpawn][1];
			z = BizInfo[dealer][bizSpawn][2];
			fa = BizInfo[dealer][bizSpawn][3];
		}
	} else {
		if (!BizInfo[dealer][bizSpawn][0] && !BizInfo[dealer][bizSpawn][1] && !BizInfo[dealer][bizSpawn][2]) {
			x = 531.1557;
			y = -1285.5590;
			z = 16.9693;
			fa = 305.9785;
		} else {
			x = BizInfo[dealer][bizSpawn][0];
			y = BizInfo[dealer][bizSpawn][1];
			z = BizInfo[dealer][bizSpawn][2];
			fa = BizInfo[dealer][bizSpawn][3];
		}
	}


	if (!GetPVarInt(playerid, "BuyingVehicleRegister"))	format(plate, 24, "_");
	else												format(plate, 24, "%s", GetVehicleNumber());

	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `cars` (date,model,color1,color2,x,y,z,fa,plate,owner,registered,alarm,locks,immob,insurances,radio,gps,health,fuel) VALUES ('%s',%i,%i,%i,%.1f,%.1f,%.1f,%.1f,'%s',%i,%i,%i,%i,%i,%i,%i,%i,%.1f,%.1f)",
	GetFullDate(), model, color1, color2, x, y, z, fa, plate, PlayerInfo[playerid][pID], GetPVarInt(playerid, "BuyingVehicleRegister"), GetPVarInt(playerid, "BuyingVehicleAlarm"), GetPVarInt(playerid, "BuyingVehicleLock"),
	GetPVarInt(playerid, "BuyingVehicleImmob"), GetPVarInt(playerid, "BuyingVehicleInsurance"), GetPVarInt(playerid, "BuyingVehicleRadio"), GetPVarInt(playerid, "BuyingVehicleGps"), GetVehicleMaxHealth(model), GetVehicleFuelCapacity(model)/2);
	mysql_tquery(dbHandle, query);
	return 1;
}

this::BuyVehicleAtPlayer(playerid)
{
	if (pTemp[playerid][pCarPlayer] == INVALID_PLAYER_ID)	return 1;

	new userid = pTemp[playerid][pCarPlayer], price = pTemp[playerid][pCarPrice], vehicle = PlayerInfo[userid][pCarKey];

    pTemp[playerid][pCarPlayer] = INVALID_PLAYER_ID;
    pTemp[playerid][pCarPrice] = 0;

    if (cache_num_rows() >= GetMaxPlayerCars(playerid))									return SendErrorMessage(playerid, "Maksimum araç sayýsýna ulaþtýnýz, daha fazla araç satýn alamazsýnýz.");
    if (!IsPlayerLogged(userid))														return SendNotConnected(playerid);
	if (!IsValidVehicle(vehicle))														return SendErrorMessage(playerid, "Kiþinin aracý park bölgesinde.");
	if (!IsPlayerInVehicle(userid, vehicle))											return SendNotInVehicle(userid);
	if (userid == playerid)																return 1;
	if (!IsABicycle(vehicle) && !VehicleInfo[vehicle][carRegistered])					return SendErrorMessage(playerid, "Bu araç sisteme kayýtlý deðil. ");
	if (!PlayerNearPlayer(3.0, playerid, userid))										return SendNotNearPlayer(playerid);
	if (IsValidVehicle(PlayerInfo[playerid][pCarKey]))									return SendErrorMessage(playerid, "Aracýnýz zaten spawnlanmýþ!");

    if (GetCash(playerid) < price)
    {
        SendErrorMessage(playerid, "Bu aracý alacak kadar yeterli paranýz yok!");
		SendErrorMessage(userid, "Satýþ teklifi gönderdiðiniz oyuncunun yeterli parasý olmadýðý için aracý oyuncuya satamazsýnýz.");
		return 1;
    }

	new money1 = PlayerInfo[userid][pCash], money2 = PlayerInfo[playerid][pCash];

	SendSyntaxMessage(playerid, "%s model aracý %s adlý kiþiden $%i karþýlýðýnda satýn aldýnýz.", VehicleNames[GetVehicleModel(vehicle)-400],  GetNameWithMask(userid), price);
	SendSyntaxMessage(userid, "%s model aracýnýzý %s adlý kiþiye $%i karþýlýðýnda sattýnýz.", VehicleNames[GetVehicleModel(vehicle)-400], GetNameWithMask(playerid), price);

	GiveCash(userid, price);
	GiveCash(playerid, -price);
	VehicleInfo[vehicle][carOwnerID] = PlayerInfo[playerid][pID];
	VehicleInfo[vehicle][carOwnerPlayer] = playerid;
	PlayerInfo[playerid][pCarKey] = vehicle;
	PlayerInfo[userid][pCarKey] = 0;
	format(VehicleInfo[vehicle][carOwner], 24, GetNameEx(playerid));

	new query[256];
	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s | Money(WAS): %i | Money(BECOME): %i] bought %s(Model: %i) from player %s [MYSQL: %i | IP: %s | Money(WAS): %i | Money(BECOME): %i] for -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money1, GetCash(playerid), VehicleNames[GetVehicleModel(vehicle)-400], GetVehicleModel(vehicle), GetName(userid), PlayerInfo[userid][pID], q_GetPlayerIP(userid),
	money2, GetCash(userid), price);
    insert_log(query, VEHICLE_LOG, 2, PlayerInfo[playerid][pAccID]);

	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s | Money(WAS): %i | Money(BECOME): %i] sold %s(Model: %i) to player %s [MYSQL: %i | IP: %s | Money(WAS): %i | Money(BECOME): %i] for -- $%i",
	GetName(userid), PlayerInfo[userid][pID], q_GetPlayerIP(userid), money2, GetCash(userid), VehicleNames[GetVehicleModel(vehicle)-400], GetVehicleModel(vehicle), GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid),
	money1, GetCash(playerid), price);
 	insert_log(query, VEHICLE_LOG, 4, PlayerInfo[playerid][pAccID]);

	mysql_format(dbHandle,query, sizeof(query), "UPDATE `cars` SET `owner` = %i WHERE `id` = %i", VehicleInfo[vehicle][carOwnerID], VehicleInfo[vehicle][carID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

this::ShowListVeh(playerid)
{
	if (!cache_num_rows())	return SendErrorMessage(playerid, "Araç sahibi deðilsiniz.");

	new
		dlgmes[8*288] = "#\tPlaka\tAraç\tDurum\n",
		model,
		impound,
		jacking,
		id,
		plate[32],
		status[128]
	;

	for(new i; i < cache_num_rows(); i++)
	{
		cache_get_value_int(i, "model", model);
		cache_get_value_int(i, "impound", impound);
		cache_get_value_int(i, "jacking", jacking);
		cache_get_value_int(i, "id", id);

		cache_get_value(i, "plate", plate, 24);
		if (isempty(plate))	format(plate, sizeof(plate), "-");

		if (impound == 1) format(status, sizeof(status), ""EMBED_RED"Haciz edilmiþ(impound alanýnda){FFFFFF}");
		else {
			if (jacking == 1) format(status, sizeof(status), ""EMBED_RED"Çalýnmýþ(bilgi için týklayýn){FFFFFF}");
			else {
				if (IsValidVehicle(PlayerInfo[playerid][pCarKey]) && VehicleInfo[PlayerInfo[playerid][pCarKey]][carID] == id) {
					pTemp[playerid][MyCarSpawn][i] = 1;
					format(status, sizeof(status), "{FFFF00}Spawnlanmýþ{FFFFFF} (ID: %d)", PlayerInfo[playerid][pCarKey]);
				} else {
					pTemp[playerid][MyCarSpawn][i] = 0;
					format(status, sizeof(status), "Spawnlanmamýþ");
				}
			}
		}

		pTemp[playerid][MyCars][i] = id;

		format(dlgmes, sizeof(dlgmes), "%s{FFFFFF}%i\t%s\t%s\t%s\n", dlgmes, i+1, plate, VehicleNames[model-400], status);
	}

	Dialog_Show(playerid, MyCars, DIALOG_STYLE_TABLIST_HEADERS, "Araçlarým", dlgmes, "Seç", "Ýptal");
	return 1;
}

this::ShowCarsForPlayer(playerid, targetid)
{
	if (!cache_num_rows())	return SendErrorMessage(playerid, "Araç sahibi deðilsiniz.");

	new hour, minute, second, model, _alarm, lock, immob, insurance, destroyed, id, plate[24], vehicle = PlayerInfo[targetid][pCarKey];

	gettime(hour, minute, second);

	SendClientMessageEx(playerid, COLOR_SERVER2, "____________________[Araç Listesi %s, %02d:%02d:%02d]____________________", GetNameEx(targetid), hour, minute, second);

	new count = 0;

	for(new i; i < cache_num_rows(); i++)
	{
	    cache_get_value_int(i, "model", model);
		cache_get_value_int(i, "alarm", _alarm);
	    cache_get_value_int(i, "locks", lock);
	    cache_get_value_int(i, "immob", immob);
	    cache_get_value_int(i, "insurances", insurance);
	    cache_get_value_int(i, "destroys", destroyed);

		cache_get_value(i, "plate", plate, 24);
        cache_get_value_int(i, "id", id);

	    if (VehicleInfo[vehicle][carID] == id)
	    {
			if (destroyed)	SendClientMessageEx(playerid, COLOUR_ALTO, "Slot %i: %s [%s] [ID: %i], Alarm [%i], Kilit [%i], Immobilizer [%i], Sigorta [%i], Çalýnma Sayýsý [%i / 5]", i+1, VehicleNames[model-400], plate, vehicle, VehicleInfo[vehicle][carAlarm], VehicleInfo[vehicle][carLock], VehicleInfo[vehicle][carImmob], VehicleInfo[vehicle][carInsurance], VehicleInfo[vehicle][carDestroyed]);
			else			SendClientMessageEx(playerid, COLOUR_ALTO, "Slot %i: %s [%s] [ID: %i], Alarm [%i], Kilit [%i], Immobilizer [%i], Sigorta [%i]", i+1, VehicleNames[model-400], plate, vehicle, VehicleInfo[vehicle][carAlarm], VehicleInfo[vehicle][carLock], VehicleInfo[vehicle][carImmob], VehicleInfo[vehicle][carInsurance]);
		}
		else
		{
		    if (destroyed)	SendClientMessageEx(playerid, COLOUR_ALTO, "Slot %i: %s [%s], Alarm [%i], Kilit [%i], Immobilizer [%i], Sigorta [%i], Çalýnma Sayýsý [%i / 5]", i+1, VehicleNames[model-400], plate, _alarm, lock, immob, insurance, destroyed);
			else			SendClientMessageEx(playerid, COLOUR_ALTO, "Slot %i: %s [%s], Alarm [%i], Kilit [%i], Immobilizer [%i], Sigorta [%i]", i+1, VehicleNames[model-400], plate, _alarm, lock, immob, insurance);
		}
		count++;
	}

	if (count > 3) SendClientMessageEx(playerid, COLOR_SERVER2, "____________________[Araç Listesi %s, %02d:%02d:%02d]____________________", GetNameEx(targetid), hour, minute, second);

	return 1;
}

this::OnPlayerSpawnVehicle(playerid)
{
	if (!cache_num_rows())
		return SendErrorMessage(playerid, "[ID: %i] slotunda aracýnýz yok.", GetPVarInt(playerid, #spawnveh_id));

	new jacking;
	cache_get_value_int(0, "jacking", jacking);

	if (jacking) {
		new mes[300];
		new id, model;
		cache_get_value_int(0, "id", id);
		cache_get_value_int(0, "model", model);

		SetPVarInt(playerid, #RansomVehID, id);
		SetPVarInt(playerid, #RansomVehModel, model);

		format(mes, sizeof(mes), "%s model aracýnýzý yarý fiyatýna\nhurdalýktan çýkarmak ister misiniz?\n\nÖdemeniz gereken miktar: $%i\n\n'Ýleri' butonuna basarak devam edebilirsiniz: araç sizin veya yok olacak\n{FF6347}KABUL ETMEZSENÝZ ARAÇ SONSUZA DEK SÝLÝNECEK!", VehicleNames[model-400], floatround(GetVehiclePrice(model)*0.5));
		return Dialog_Show(playerid, RansomVehicle, DIALOG_STYLE_MSGBOX, "Araç Satýn Alýmý", mes, "Ýleri", "Ýptal");
	}

	new vehicle, Float:hp, panels, doorss, lightss, tires;

	vehicle = CreateVehicle(400, 0.0, 0.0, 0.0, 0.0, 0, 0, -1);

	if (vehicle == INVALID_VEHICLE_ID) return SendErrorMessage(playerid, "Araç spawnlanamadý.");

	cache_get_value_int(0, "id", VehicleInfo[vehicle][carID]);
	cache_get_value_int(0, "model", VehicleInfo[vehicle][carModel]);
	cache_get_value_int(0, "color1", VehicleInfo[vehicle][carColor1]);
	cache_get_value_int(0, "color2", VehicleInfo[vehicle][carColor2]);
	cache_get_value_float(0, "x", VehicleInfo[vehicle][carParkX]);
	cache_get_value_float(0, "y", VehicleInfo[vehicle][carParkY]);
	cache_get_value_float(0, "z", VehicleInfo[vehicle][carParkZ]);
	cache_get_value_float(0, "fa", VehicleInfo[vehicle][carParkA]);

	cache_get_value(0, "plate", VehicleInfo[vehicle][carPlate], 24);

	cache_get_value_int(0, "wanted", VehicleInfo[vehicle][carWanted]);

	cache_get_value_int(0, "owner", VehicleInfo[vehicle][carOwnerID]);
	cache_get_value_float(0, "armour", VehicleInfo[vehicle][carArmour]);
	cache_get_value_int(0, "alarm", VehicleInfo[vehicle][carAlarm]);
	cache_get_value_int(0, "locks", VehicleInfo[vehicle][carLock]);
	cache_get_value_int(0, "immob", VehicleInfo[vehicle][carImmob]);
	cache_get_value_int(0, "insurances", VehicleInfo[vehicle][carInsurance]);
	cache_get_value_int(0, "destroys", VehicleInfo[vehicle][carDestroyed]);
	cache_get_value_int(0, "impound", VehicleInfo[vehicle][Impounded]);
	cache_get_value_int(0, "gps", VehicleInfo[vehicle][carGps]);
	cache_get_value_float(0, "fuel", VehicleInfo[vehicle][carFuel]);
	cache_get_value_int(0, "registered", VehicleInfo[vehicle][carRegistered]);
	cache_get_value_float(0, "battery", VehicleInfo[vehicle][carBattery]);
	cache_get_value_float(0, "engine", VehicleInfo[vehicle][carEngine]);
	VehicleInfo[vehicle][carType]			= 0;

	for(new i = 0; i < 14; i++)
	{
		new field_name[16];

		format(field_name, sizeof(field_name), "comp%i", i);
		cache_get_value_name_int(0, field_name, VehicleInfo[vehicle][carComponent][i]);

		if (i > 9) continue;

		format(field_name, sizeof(field_name), "attach%i_pos0", i);
	    cache_get_value_name_float(0, field_name, VehicleInfo[vehicle][carAttachPosX][i]);
		format(field_name, sizeof(field_name), "attach%i_pos1", i);
		cache_get_value_name_float(0, field_name, VehicleInfo[vehicle][carAttachPosY][i]);
		format(field_name, sizeof(field_name), "attach%i_pos2", i);
		cache_get_value_name_float(0, field_name, VehicleInfo[vehicle][carAttachPosZ][i]);
		format(field_name, sizeof(field_name), "attach%i_rot0", i);
		cache_get_value_name_float(0, field_name, VehicleInfo[vehicle][carAttachRotX][i]);
		format(field_name, sizeof(field_name), "attach%i_rot1", i);
		cache_get_value_name_float(0, field_name, VehicleInfo[vehicle][carAttachRotY][i]);
		format(field_name, sizeof(field_name), "attach%i_rot2", i);
		cache_get_value_name_float(0, field_name, VehicleInfo[vehicle][carAttachRotZ][i]);
	}

	cache_get_value_int(0, "paintjob", VehicleInfo[vehicle][carPaintJob]);
	cache_get_value_int(0, "radio", VehicleInfo[vehicle][carRadio]);
	cache_get_value_int(0, "comps", VehicleInfo[vehicle][carComps]);
	cache_get_value_float(0, "health", hp);
	cache_get_value_int(0, "panels", panels);
	cache_get_value_int(0, "doors", doorss);
	cache_get_value_int(0, "lights", lightss);
	cache_get_value_int(0, "tires", tires);
	cache_get_value_float(0, "milliage", VehicleInfo[vehicle][carMilliage]);
	cache_get_value_int(0, "hidednum", VehicleInfo[vehicle][carHidedPlate]);
	cache_get_value_int(0, "fakenum", VehicleInfo[vehicle][carFakePlate]);

	cache_get_value(0, "fakenum_str", VehicleInfo[vehicle][carFakePlateS], 24);

	new model;
	cache_get_value_int(0, "model", model);

    VehicleInfo[vehicle][carDriver] 			= INVALID_PLAYER_ID;
	format(VehicleInfo[vehicle][carOwner], 24, GetNameEx(playerid));
	format(VehicleInfo[vehicle][carPlate], 24, "%s", VehicleInfo[vehicle][carPlate]);

/*
	new query[256];

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `inventory` WHERE `carid`=%i", VehicleInfo[vehicle][carID]);
	mysql_tquery(dbHandle, query, "C_LoadInventory", "i", vehicle);

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `inventory` WHERE `trunkid`=%i", VehicleInfo[vehicle][carID]);
	mysql_tquery(dbHandle, query, "T_LoadInventory", "i", vehicle);*/


	PlayerInfo[playerid][pCarKey] = vehicle;
	VehicleInfo[vehicle][carOwnerPlayer] = playerid;

	DestroyVehicle(vehicle);

	vehicle = CreateVehicle(VehicleInfo[vehicle][carModel], VehicleInfo[vehicle][carParkX], VehicleInfo[vehicle][carParkY], VehicleInfo[vehicle][carParkZ], VehicleInfo[vehicle][carParkA], VehicleInfo[vehicle][carColor1], VehicleInfo[vehicle][carColor2], -1);

	if (VehicleInfo[vehicle][carFakePlate])
	{
		SetVehicleNumberPlate(vehicle, VehicleInfo[vehicle][carFakePlateS]);
	}
	else
	{
		SetVehicleNumberPlate(vehicle, VehicleInfo[vehicle][carPlate]);
	}

	LoadComp(vehicle);

    if (VehicleInfo[vehicle][carInsurance] > 1)	UpdateVehicleDamageStatus(vehicle, 0, 0, 0, 0);
	else										UpdateVehicleDamageStatus(vehicle, panels, doorss, lightss, tires);

	if (VehicleInfo[vehicle][carInsurance] != 0)	SetVehicleHealth(vehicle, GetVehicleMaxHealth(GetVehicleModel(vehicle)) + VehicleInfo[vehicle][carArmour]);

	else
	{
	    if (hp < 390.0)		SetVehicleHealth(vehicle, 500.0);
	    else if (hp > 750.0)	SetVehicleHealth(vehicle, 750.0);
		else				SetVehicleHealth(vehicle, hp);
	}

 	ToggleVehicleLock(vehicle, false);
	SendClientMessageEx(playerid, COLOR_SERVER2, "Araç:{FFFFFF} %s (ID: %i) model aracýnýz son park yerine çýkartýlmýþtýr. ", VehicleNames[model-400], vehicle);

	SendClientMessageEx(playerid, COLOR_SERVER2, "Araç:{FFFFFF} Motor durumu: [%.2f], Akü durumu: [%.2f], Çalýnma sayýsý: [%d]",
		VehicleInfo[vehicle][carEngine],
		VehicleInfo[vehicle][carBattery],
		VehicleInfo[vehicle][carDestroyed]);

	new count = CountVehicleTickets(vehicle);
	if (count)	SendWarningMessage(playerid, "Aracýnýzýn %i adet ödenmemiþ cezasý var.", count);

	if (VehicleInfo[vehicle][Impounded]) SendWarningMessage(playerid, "Arabanýza el konuldu ve haciz durumunda. (/hacizdencikar) komutunu kullanabilirsiniz.");
	//if (VehicleInfo[vehicleid][eVehicleStolen]) SendClientMessage(playerid, COLOR_YELLOWEX, "Your vehicle is stolen.");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, VehicleInfo[vehicle][carParkX], VehicleInfo[vehicle][carParkY], VehicleInfo[vehicle][carParkZ])) {
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "[BÝLGÝ]{FFFFFF} Aracý almak için checkpointe gidiniz.");
		Waypoint_Set(playerid, VehicleInfo[vehicle][carParkX],VehicleInfo[vehicle][carParkY],VehicleInfo[vehicle][carParkZ]);
	}

	for(new i = 0; i < MAX_TRUNK_INVENTORY; i++)
	{
		if (VehicleInfo[vehicle][carAttachObj][i])
		{
			VehicleInfo[vehicle][carAttach][i] = CreateDynamicObject(VehicleInfo[vehicle][carAttachObj][i], VehicleInfo[vehicle][carAttachPosX][i],VehicleInfo[vehicle][carAttachPosY][i],VehicleInfo[vehicle][carAttachPosZ][i],VehicleInfo[vehicle][carAttachRotX][i],VehicleInfo[vehicle][carAttachRotY][i],VehicleInfo[vehicle][carAttachRotZ][i]);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carAttach][i], vehicle, VehicleInfo[vehicle][carAttachPosX][i],VehicleInfo[vehicle][carAttachPosY][i],VehicleInfo[vehicle][carAttachPosZ][i],VehicleInfo[vehicle][carAttachRotX][i],VehicleInfo[vehicle][carAttachRotY][i],VehicleInfo[vehicle][carAttachRotZ][i]);
		}
		else
		{
			VehicleInfo[vehicle][carAttach][i] = INVALID_OBJECT_ID;
		}
	}

	CancelSelectTextDraw(playerid);
	DeletePVar(playerid, #spawnveh_id);

	VehicleLight(vehicle, false);
	VehicleTrunk(vehicle, false);

	PlayerTextDrawHide(playerid, SpawnVeh_Model[playerid]);
	PlayerTextDrawHide(playerid, SpawnVeh_Box[playerid]);
	for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, SpawnVeh_Arrows[playerid][i]);
	for(new e = 0; e < 3; e++) PlayerTextDrawHide(playerid, SpawnVeh_Base[playerid][e]);

	DebugMessage(playerid, sprintf("%d SQLID, %d script id", VehicleInfo[vehicle][carID], vehicle));

	return 1;
}
/*
this::C_LoadInventory(vehicle)
{
	if (!cache_num_rows())
	{
	    new query[256];
        mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `inventory` (`carid`) VALUES (%i)", VehicleInfo[vehicle][carID]);
	    mysql_tquery(dbHandle, query);
	    return 1;
	}

	new str_inv[24], str_inv2[24], str_inv3[24], str_inv4[24], str_inv5[24], str_inv6[24];

	for(new a = 0; a < MAX_CAR_INVENTORY; a++)
	{
		format(str_inv, sizeof(str_inv), "id_%i", a+1);
		cache_get_value_name_int(0, str_inv, CarInventory[vehicle][a][pInvItem]);
		format(str_inv2, sizeof(str_inv2), "a_%i", a+1);
		cache_get_value_name_int(0, str_inv2, CarInventory[vehicle][a][pInvQ]);
		format(str_inv3, sizeof(str_inv3), "ex_%i", a+1);
		cache_get_value_name_int(0, str_inv3, CarInventory[vehicle][a][pInvEx]);
		format(str_inv4, sizeof(str_inv4), "s_%i", a+1);
		cache_get_value_name_int(0, str_inv4, CarInventory[vehicle][a][pInvS]);
		format(str_inv5, sizeof(str_inv5), "f_%i", a+1);
		cache_get_value_name_float(0, str_inv5, CarInventory[vehicle][a][pInvQFloat]);

		new name[16];
		format(str_inv6, sizeof(str_inv6), "n_%i", a+1);
		cache_get_value_name(0, str_inv6, name);

		format(CarInventory[vehicle][a][pInvName], 16, "%s", name);
	}
	return 1;
}

this::T_LoadInventory(vehicle)
{
	if (!cache_num_rows())
	{
	    new query[256];
        mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `inventory` (`trunkid`) VALUES (%i)", VehicleInfo[vehicle][carID]);
	    mysql_tquery(dbHandle, query);
	    return 1;
	}

	new str_inv[24], str_inv2[24], str_inv3[24], str_inv4[24], str_inv5[24], str_inv6[24];

	for(new a = 0; a < MAX_TRUNK_INVENTORY; a++)
	{
		format(str_inv, sizeof(str_inv), "id_%i", a+1);
		cache_get_value_name_int(0, str_inv, TrunkInventory[vehicle][a][pInvItem]);
		format(str_inv2, sizeof(str_inv2), "a_%i", a+1);
		cache_get_value_name_int(0, str_inv2, TrunkInventory[vehicle][a][pInvQ]);
		format(str_inv3, sizeof(str_inv3), "ex_%i", a+1);
		cache_get_value_name_int(0, str_inv3, TrunkInventory[vehicle][a][pInvEx]);
		format(str_inv4, sizeof(str_inv4), "s_%i", a+1);
		cache_get_value_name_int(0, str_inv4, TrunkInventory[vehicle][a][pInvS]);
		format(str_inv5, sizeof(str_inv5), "f_%i", a+1);
		cache_get_value_name_float(0, str_inv5, TrunkInventory[vehicle][a][pInvQFloat]);

		new name[16];
		format(str_inv6, sizeof(str_inv6), "n_%i", a+1);
		cache_get_value_name(0, str_inv6, name);

		format(TrunkInventory[vehicle][a][pInvName], 16, "%s", name);
	}
	return 1;
}*/

ResetVehicleStuff(vehicleid, x = 0)
{
	new panels, doors, lights, tires;

	if (IsABicycle(vehicleid))	return 1;

	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

	foreach(new i : Player) {
		if (JackingVehicle[i] == vehicleid)
		{
			if (IsValidVehicle(JackingVehicle[i]))
			{
				new Float:ccX, Float:ccY, Float:ccZ;
				GetVehiclePos(JackingVehicle[i], ccX, ccY, ccZ);

				VehicleInfo[JackingVehicle[i]][ePhysicalAttack] = false;
				DestroyDynamic3DTextLabel(VehicleInfo[JackingVehicle[i]][eVehicleLabel]);
				VehicleInfo[JackingVehicle[i]][vCooldown] = false;
				JackingVehicle[i] = 0;
			}
		}
	}

	for(new i; i != MAX_TRUCK_PRODUCT; i++)
	{
	    if (i < 6 && IsValidDynamicObject(VehicleInfo[vehicleid][carCargoObj][i]))
		{
			DestroyDynamicObject(VehicleInfo[vehicleid][carCargoObj][i]);
            VehicleInfo[vehicleid][carCargoObj][i] = INVALID_OBJECT_ID;
		}

		if (i < 5 && IsValidDynamicObject(VehicleInfo[vehicleid][carSiren][i]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][carSiren][i]);
		    VehicleInfo[vehicleid][carSiren][i] = INVALID_OBJECT_ID;
		}

	    VehicleInfo[vehicleid][carCargoAmount][i] = 0;
		break;
	}

    DestroyDynamic3DTextLabel(veicolo_callsign_testo[vehicleid]);

	if (x)	return Save_Car(vehicleid);
	/*
	if (!VehicleInfo[vehicleid][carInsurance])
	{
		for(new i = 0; i < MAX_TRUNK_INVENTORY; i++)
		{
			TrunkInventory[vehicleid][i][pInvName] = EOS;
			TrunkInventory[vehicleid][i][pInvQFloat] = 0.0;
			TrunkInventory[vehicleid][i][pInvItem] =
			TrunkInventory[vehicleid][i][pInvQ] =
			TrunkInventory[vehicleid][i][pInvEx] =
			TrunkInventory[vehicleid][i][pInvS] =
			VehicleInfo[vehicleid][carAttachObj][i] = 0;
		}

		for(new i = 0; i < MAX_CAR_INVENTORY; i++)
		{
			CarInventory[vehicleid][i][pInvName] = EOS;
			CarInventory[vehicleid][i][pInvQFloat] = 0.0;
			CarInventory[vehicleid][i][pInvItem] =
			CarInventory[vehicleid][i][pInvQ] =
			CarInventory[vehicleid][i][pInvEx] =
			CarInventory[vehicleid][i][pInvS] = 0;
		}

		VehicleInfo[vehicleid][carPaintJob] = 3;
		VehicleInfo[vehicleid][carRadio] =
		VehicleInfo[vehicleid][carComps] = 0;
		UpdateVehicleDamageStatus(vehicleid, 17895697, 16843009, 15, tires);

		for(new i = 0; i < 14; i++)
		{
		    if (VehicleInfo[vehicleid][carComponent][i] != 0)		RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][carComponent][i]);

            VehicleInfo[vehicleid][carComponent][i] = 0;
		}
	}
	else
	{
		if (VehicleInfo[vehicleid][carInsurance] != 3)
		{
			for(new i = 0; i < 14; i++)
			{
			    if (VehicleInfo[vehicleid][carComponent][i] != 0)	RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][carComponent][i]);

	            VehicleInfo[vehicleid][carComponent][i] = 0;
			}

            VehicleInfo[vehicleid][carPaintJob] = 3;
			VehicleInfo[vehicleid][carRadio] =
			VehicleInfo[vehicleid][carComps] = 0;

			if (VehicleInfo[vehicleid][carInsurance] < 2)			UpdateVehicleDamageStatus(vehicleid, 17895697, 16843009, 15, tires);
		}

		if (VehicleInfo[vehicleid][carDestroyed]++ >= 4)
		{
		    VehicleInfo[vehicleid][carDestroyed] =
		    VehicleInfo[vehicleid][carInsurance] = 0;
		}
	}*/

	if (VehicleInfo[vehicleid][carEngine] > 0.0)
	{
		VehicleInfo[vehicleid][carEngine] -= 5.0 + random(6);

		if (VehicleInfo[vehicleid][carEngine] <= 0.0)	VehicleInfo[vehicleid][carEngine] = 0.0;
	}

	if (VehicleInfo[vehicleid][carBattery] > 0.0)
	{
		VehicleInfo[vehicleid][carBattery] -= 10.0;

		if (VehicleInfo[vehicleid][carBattery] <= 0.0)	VehicleInfo[vehicleid][carBattery] = 0.0;
	}

	new userid = GetVehicleOwner(vehicleid);

	if (userid != INVALID_PLAYER_ID)
	{
	    VehicleInfo[vehicleid][carOwnerPlayer] = INVALID_PLAYER_ID;
        SendClientMessageEx(userid, COLOR_WHITE, "{FF6347}[%s]{FFFFFF} Aracýnýzýn motoru hasar aldý. Motor durumu: {FF6347}%.2f{FFFFFF}.", VehicleNames[GetVehicleModel(vehicleid)-400], VehicleInfo[vehicleid][carEngine]);
		SendClientMessageEx(userid, COLOR_WHITE, "{FF6347}[%s]{FFFFFF} Aracýnýzýn aküsü hasar aldý. Akü durumu: {FF6347}%.2f{FFFFFF}.", VehicleNames[GetVehicleModel(vehicleid)-400], VehicleInfo[vehicleid][carBattery]);
	}

	Save_Car(vehicleid);
    VehicleInfo[vehicleid][carDeath] = 1;
	return 1;
}

DestroyVehicleEx(vehicleid, save = 0) {

if(save)
{
    Save_Car(vehicleid);
}

for(new p; p < MAX_CAR_WEAPONS; p++) VehicleInfo[vehicleid][carSlotUsed][p] = 0;

DestroyObject (VehRadarID [vehicleid]);
VehRadarID [vehicleid] = -1;
CheckingSpeed [vehicleid] = 0;

StopCarBoomBox(vehicleid);
VehicleInfo[vehicleid][carID] = -1;
VehicleInfo[vehicleid][carModel] = -1;
VehicleInfo[vehicleid][carColor1] = 0;
VehicleInfo[vehicleid][carColor2] = 0;
VehicleInfo[vehicleid][carOwnerID] = INVALID_PLAYER_ID;
VehicleInfo[vehicleid][carOwnerPlayer] = INVALID_PLAYER_ID;
VehicleInfo[vehicleid][carLock] = 0;
VehicleInfo[vehicleid][carImmob] = 0;
VehicleInfo[vehicleid][Impounded] = 0;
VehicleInfo[vehicleid][carFaction] = 0;

VehicleInfo[vehicleid][carTrunkLock] = 0;
VehicleInfo[vehicleid][carHoodLock] = 0;
VehicleInfo[vehicleid][carType] = 0;
VehicleInfo[vehicleid][carInt] = 0;
VehicleInfo[vehicleid][carVW] = 0;
VehicleInfo[vehicleid][carLocked] = 0;
VehicleInfo[vehicleid][carLights] = 0;
VehicleInfo[vehicleid][carEngineOn] = 0;
VehicleInfo[vehicleid][carAlarmTime] = 0;
VehicleInfo[vehicleid][carAdmin] = 0;
VehicleInfo[vehicleid][carDriver] = -1;
VehicleInfo[vehicleid][carRent] = 0;
VehicleInfo[vehicleid][carTerminate] = 0;
VehicleInfo[vehicleid][carTerminateEx] = 0;

VehicleInfo[vehicleid][carHidedPlate] = 0;
VehicleInfo[vehicleid][carFakePlate] = 0;
VehicleInfo[vehicleid][carWanted] = 0;
VehicleInfo[vehicleid][vCorp] = 0;

VehicleInfo[vehicleid][carPaintJob] = 0;
VehicleInfo[vehicleid][carComps] = 0;
VehicleInfo[vehicleid][carDestroyed] = 0;

    if (IsValidDynamic3DTextLabel(VehicleInfo[vehicleid][eVehicleLabel])) DestroyDynamic3DTextLabel(VehicleInfo[vehicleid][eVehicleLabel]);

	for(new i; i != MAX_TRUCK_PRODUCT; i++)
	{
	    if (i < 6 && IsValidDynamicObject(VehicleInfo[vehicleid][carCargoObj][i]))
		{
			DestroyDynamicObject(VehicleInfo[vehicleid][carCargoObj][i]);
            VehicleInfo[vehicleid][carCargoObj][i] = INVALID_OBJECT_ID;
		}

		if (i < 5 && IsValidDynamicObject(VehicleInfo[vehicleid][carSiren][i]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][carSiren][i]);
		    VehicleInfo[vehicleid][carSiren][i] = INVALID_OBJECT_ID;
		}

	    VehicleInfo[vehicleid][carCargoAmount][i] = 0;
		break;
	}

    DestroyDynamic3DTextLabel(veicolo_callsign_testo[vehicleid]);

    for(new i = 0; i < 14; i++)
	{
		if (VehicleInfo[vehicleid][carComponent][i] != 0)	RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][carComponent][i]);

	        VehicleInfo[vehicleid][carComponent][i] = 0;
		}

		for(new i = 0; i < MAX_TRUNK_INVENTORY; i++)
		{
			TrunkInventory[vehicleid][i][pInvName] = EOS;
			TrunkInventory[vehicleid][i][pInvQFloat] = 0.0;
			TrunkInventory[vehicleid][i][pInvItem] =
			TrunkInventory[vehicleid][i][pInvQ] =
			TrunkInventory[vehicleid][i][pInvEx] =
			TrunkInventory[vehicleid][i][pInvS] =
			VehicleInfo[vehicleid][carAttachObj][i] = 0;
		}

		for(new i = 0; i < MAX_CAR_INVENTORY; i++)
		{
			CarInventory[vehicleid][i][pInvName] = EOS;
			CarInventory[vehicleid][i][pInvQFloat] = 0.0;
			CarInventory[vehicleid][i][pInvItem] =
			CarInventory[vehicleid][i][pInvQ] =
			CarInventory[vehicleid][i][pInvEx] =
			CarInventory[vehicleid][i][pInvS] = 0;
	    }

	DestroyVehicle(vehicleid);
    return 1;
}

AracKiraBitir(vehicleid) {

new query[256];
mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `cars` WHERE `id` = %i", VehicleInfo[vehicleid][carID]);
mysql_tquery(dbHandle, query);

for(new p; p < MAX_CAR_WEAPONS; p++) VehicleInfo[vehicleid][carSlotUsed][p] = 0;

VehicleInfo[vehicleid][carID] = -1;
VehicleInfo[vehicleid][carModel] = -1;
VehicleInfo[vehicleid][carColor1] = 0;
VehicleInfo[vehicleid][carColor2] = 0;
VehicleInfo[vehicleid][carOwnerID] = INVALID_PLAYER_ID;
VehicleInfo[vehicleid][carOwnerPlayer] = INVALID_PLAYER_ID;
VehicleInfo[vehicleid][carLock] = 0;
VehicleInfo[vehicleid][carImmob] = 0;
VehicleInfo[vehicleid][Impounded] = 0;
VehicleInfo[vehicleid][carFaction] = 0;

VehicleInfo[vehicleid][carTrunkLock] = 0;
VehicleInfo[vehicleid][carHoodLock] = 0;
VehicleInfo[vehicleid][carType] = 0;
VehicleInfo[vehicleid][carInt] = 0;
VehicleInfo[vehicleid][carVW] = 0;
VehicleInfo[vehicleid][carLocked] = 0;
VehicleInfo[vehicleid][carLights] = 0;
VehicleInfo[vehicleid][carEngineOn] = 0;
VehicleInfo[vehicleid][carAlarmTime] = 0;
VehicleInfo[vehicleid][carAdmin] = 0;
VehicleInfo[vehicleid][carDriver] = -1;
VehicleInfo[vehicleid][carRent] = 0;
VehicleInfo[vehicleid][carTerminate] = 0;
VehicleInfo[vehicleid][carTerminateEx] = 0;

VehicleInfo[vehicleid][carHidedPlate] = 0;
VehicleInfo[vehicleid][carFakePlate] = 0;
VehicleInfo[vehicleid][carWanted] = 0;
VehicleInfo[vehicleid][vCorp] = 0;

VehicleInfo[vehicleid][carPaintJob] = 0;
VehicleInfo[vehicleid][carComps] = 0;
VehicleInfo[vehicleid][carDestroyed] = 0;

    if (IsValidDynamic3DTextLabel(VehicleInfo[vehicleid][eVehicleLabel])) DestroyDynamic3DTextLabel(VehicleInfo[vehicleid][eVehicleLabel]);

	for(new i; i != MAX_TRUCK_PRODUCT; i++)
	{
	    if (i < 6 && IsValidDynamicObject(VehicleInfo[vehicleid][carCargoObj][i]))
		{
			DestroyDynamicObject(VehicleInfo[vehicleid][carCargoObj][i]);
            VehicleInfo[vehicleid][carCargoObj][i] = INVALID_OBJECT_ID;
		}

		if (i < 5 && IsValidDynamicObject(VehicleInfo[vehicleid][carSiren][i]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][carSiren][i]);
		    VehicleInfo[vehicleid][carSiren][i] = INVALID_OBJECT_ID;
		}

	    VehicleInfo[vehicleid][carCargoAmount][i] = 0;
		break;
	}

    DestroyDynamic3DTextLabel(veicolo_callsign_testo[vehicleid]);

    for(new i = 0; i < 14; i++)
	{
		if (VehicleInfo[vehicleid][carComponent][i] != 0)	RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][carComponent][i]);

	        VehicleInfo[vehicleid][carComponent][i] = 0;
		}

		for(new i = 0; i < MAX_TRUNK_INVENTORY; i++)
		{
			TrunkInventory[vehicleid][i][pInvName] = EOS;
			TrunkInventory[vehicleid][i][pInvQFloat] = 0.0;
			TrunkInventory[vehicleid][i][pInvItem] =
			TrunkInventory[vehicleid][i][pInvQ] =
			TrunkInventory[vehicleid][i][pInvEx] =
			TrunkInventory[vehicleid][i][pInvS] =
			VehicleInfo[vehicleid][carAttachObj][i] = 0;
		}

		for(new i = 0; i < MAX_CAR_INVENTORY; i++)
		{
			CarInventory[vehicleid][i][pInvName] = EOS;
			CarInventory[vehicleid][i][pInvQFloat] = 0.0;
			CarInventory[vehicleid][i][pInvItem] =
			CarInventory[vehicleid][i][pInvQ] =
			CarInventory[vehicleid][i][pInvEx] =
			CarInventory[vehicleid][i][pInvS] = 0;
	    }

	DestroyVehicle(vehicleid);
    return 1;
}

HasComponent(vehicleid, compid)
{
	for(new i = 0; i < 14; i++)
	{
		if (VehicleInfo[vehicleid][carComponent][i] == compid) return 1;
	}
	return 0;
}

SetVehicleComponent(vehicleid, component, slot)
{
	VehicleInfo[vehicleid][carComponent][slot] = component;
	AddVehicleComponent(vehicleid, component);
	Save_Car(vehicleid);
	return 1;
}

SaveComponent(vehicleid, slot)
{
    if (!IsValidVehicle(vehicleid))	return 1;

	new component_str[6];
	format(component_str, sizeof(component_str), "comp%i", slot);

	SQL_SetInteger("vehicle", component_str, VehicleInfo[vehicleid][carComponent][slot], VehicleInfo[vehicleid][carID]);
	return 1;
}


ShowBuyingVehicleDetails(playerid)
{
	if (GetPVarInt(playerid, "BuyingVehicleModel") < 400 || GetPVarInt(playerid, "BuyingVehicleModel") > 611) return 1;

	new registerveh = price_reg[GetPVarInt(playerid, "BuyingVehicleRegister")],
		alarmveh = price_alarm[GetPVarInt(playerid, "BuyingVehicleAlarm")],
		lockveh = price_lock[GetPVarInt(playerid, "BuyingVehicleLock")],
		immobveh = price_immob[GetPVarInt(playerid, "BuyingVehicleImmob")],
		insuranceveh = GetInsurancePrice(GetPVarInt(playerid, "BuyingVehicleModel")) * GetPVarInt(playerid, "BuyingVehicleInsurance"),
		xmradioveh = price_radio[GetPVarInt(playerid, "BuyingVehicleRadio")], gpsveh = price_gps[GetPVarInt(playerid, "BuyingVehicleGps")];

    new mes[56];
	format(mes, sizeof(mes), "{bab9ba}%s - {35B835}$%i", VehicleNames[GetPVarInt(playerid, "BuyingVehicleModel")-400], GetVehiclePrice(GetPVarInt(playerid, "BuyingVehicleModel"))+registerveh+alarmveh+lockveh+immobveh+insuranceveh+xmradioveh+gpsveh);
	Dialog_Show(playerid, BuyingVehicleDetails, DIALOG_STYLE_LIST, mes, "Sisteme Kayýt\nAlarm\nKilit\nImmobilizer\nSigorta\nMultimedya(Radyo)\nGPS\nRenk", "Seç", "<<");
	return 1;
}

Save_Car(vehicleid)
{
	if (!VehicleInfo[vehicleid][carOwnerID]) return 1;
	if (!IsValidVehicle(vehicleid)) return 1;

	new Float:hp, panels, doorss, lightss, tires;

	GetVehicleHealth(vehicleid, hp);
	GetVehicleDamageStatus(vehicleid, panels, doorss, lightss, tires);

	new query[2550];


	mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `color1`=%i,`color2`=%i,`x`=%.1f,`y`=%.1f,`z`=%.1f,`fa`=%.1f,`engine`=%.2f,`milliage`=%.1f",
		VehicleInfo[vehicleid][carColor1],
		VehicleInfo[vehicleid][carColor2],
		VehicleInfo[vehicleid][carParkX],
		VehicleInfo[vehicleid][carParkY],
		VehicleInfo[vehicleid][carParkZ],
		VehicleInfo[vehicleid][carParkA],
		VehicleInfo[vehicleid][carEngine],
		VehicleInfo[vehicleid][carMilliage]
	);

	mysql_format(dbHandle, query, sizeof(query), "%s,`plate`='%s',`owner`=%i,`battery`=%.2f,`health`=%.1f,`armour`=%.1f,`vw`=%i,`int`=%i",
        query,
		VehicleInfo[vehicleid][carPlate],
		VehicleInfo[vehicleid][carOwnerID],
		VehicleInfo[vehicleid][carBattery],
		hp,
		VehicleInfo[vehicleid][carArmour],
		VehicleInfo[vehicleid][carVW],
		VehicleInfo[vehicleid][carInt]
	);

	mysql_format(dbHandle, query, sizeof(query), "%s,`alarm`=%i,`locks`=%i,`immob`=%i,`insurances`=%i,`destroys`=%i,`impound`=%i,`gps`=%i,`fuel`=%.1f, `faction`=%i, `registered`=%i",
		query,
		VehicleInfo[vehicleid][carAlarm],
		VehicleInfo[vehicleid][carLock],
		VehicleInfo[vehicleid][carImmob],
		VehicleInfo[vehicleid][carInsurance],
		VehicleInfo[vehicleid][carDestroyed],
		VehicleInfo[vehicleid][Impounded],
		VehicleInfo[vehicleid][carGps],
		VehicleInfo[vehicleid][carFuel],
		VehicleInfo[vehicleid][carFaction],
		VehicleInfo[vehicleid][carRegistered]
	);

	mysql_format(dbHandle, query, sizeof(query), "%s,`comp0`=%i,`comp1`=%i,`comp2`=%i,`comp3`=%i,`comp4`=%i,`comp5`=%i,`comp6`=%i",
        query,
		VehicleInfo[vehicleid][carComponent][0],
		VehicleInfo[vehicleid][carComponent][1],
		VehicleInfo[vehicleid][carComponent][2],
		VehicleInfo[vehicleid][carComponent][3],
		VehicleInfo[vehicleid][carComponent][4],
		VehicleInfo[vehicleid][carComponent][5],
		VehicleInfo[vehicleid][carComponent][6]
	);

	mysql_format(dbHandle, query, sizeof(query), "%s,`comp7`=%i,`comp8`=%i,`comp9`=%i,`comp10`=%i,`comp11`=%i,`comp12`=%i,`comp13`=%i,`paintjob`=%i",
        query,
		VehicleInfo[vehicleid][carComponent][7],
		VehicleInfo[vehicleid][carComponent][8],
		VehicleInfo[vehicleid][carComponent][9],
		VehicleInfo[vehicleid][carComponent][10],
		VehicleInfo[vehicleid][carComponent][11],
		VehicleInfo[vehicleid][carComponent][12],
		VehicleInfo[vehicleid][carComponent][13],
		VehicleInfo[vehicleid][carPaintJob]
	);

	mysql_format(dbHandle, query, sizeof(query), "%s,`radio`=%i,`comps`=%i,`panels`=%i,`doors`=%i,`lights`=%i,`tires`=%i WHERE `id`=%i LIMIT 1",
        query,
		VehicleInfo[vehicleid][carRadio],
		VehicleInfo[vehicleid][carComps],
		panels,
		doorss,
		lightss,
		tires,
		VehicleInfo[vehicleid][carID]
	);
	mysql_tquery(dbHandle, query);

	for(new i = 0; i < MAX_TRUNK_INVENTORY; i++)
	{
		if (VehicleInfo[vehicleid][carAttachObj][i] != 0)
		{
			DestroyDynamicObject(VehicleInfo[vehicleid][carAttach][i]);
			VehicleInfo[vehicleid][carAttach][i] = INVALID_OBJECT_ID;
		}
	}

	return 1;
}


Save_CarAttach(vehicleid, i)
{
    new query[2500];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `attach%i_pos0`=%.1f,`attach%i_pos1`=%.1f,`attach%i_pos2`=%.1f,`attach%i_rot0`=%.1f,`attach%i_rot1`=%.1f,`attach%i_rot2`=%.1f, `arg_%i`=%i WHERE `id`=%i",
	i,VehicleInfo[vehicleid][carAttachPosX][i], i,VehicleInfo[vehicleid][carAttachPosY][i], i,VehicleInfo[vehicleid][carAttachPosZ][i], i,VehicleInfo[vehicleid][carAttachRotX][i], i,VehicleInfo[vehicleid][carAttachRotY][i],
	i,VehicleInfo[vehicleid][carAttachRotZ][i], i+1,VehicleInfo[vehicleid][carAttachObj][i], VehicleInfo[vehicleid][carID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

GetMaxPlayerCars(playerid)
{
	return 8;
}

ShowAclass(playerid)
{
	SetPVarInt(playerid, #Selection, 2);

	new mes[sizeof(a_class_model)*128];

	for(new i = 0; i < sizeof(a_class_model); i++)
	{
		format(mes, sizeof(mes), "%s%i(0.0, 0.0, -27.0, 0.8)\t~w~%s~n~~g~~h~$%s\n", mes, a_class_model[i], VehicleNames[a_class_model[i]-400], FormatNumber(GetVehiclePrice(a_class_model[i])));
	}
	Dialog_Show(playerid, MODEL_SELECTION_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "4 KAPILI ARACLAR", mes, "Sec", "Geri Don");

	return 1;
}

ShowBclass(playerid)
{
	SetPVarInt(playerid, #Selection, 0);

	new mes[sizeof(b_class_model)*128];

	for(new i = 0; i < sizeof(b_class_model); i++)
	{
		format(mes, sizeof(mes), "%s%i(0.0, 0.0, -27.0, 0.8)\t~w~%s~n~~g~~h~$%s\n", mes, b_class_model[i], VehicleNames[b_class_model[i]-400], FormatNumber(GetVehiclePrice(b_class_model[i])));
	}
	Dialog_Show(playerid, MODEL_SELECTION_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "2 KAPILI ARACLAR", mes, "Sec", "Geri Don");

	return 1;
}

ShowLowriders(playerid)
{
	SetPVarInt(playerid, #Selection, 1);

	new mes[sizeof(lowride_class_model)*128];

	for(new i = 0; i < sizeof(lowride_class_model); i++)
	{
		format(mes, sizeof(mes), "%s%i(0.0, 0.0, -27.0, 0.8)\t~w~%s~n~~g~~h~$%s\n", mes, lowride_class_model[i], VehicleNames[lowride_class_model[i]-400], FormatNumber(GetVehiclePrice(lowride_class_model[i])));
	}
	Dialog_Show(playerid, MODEL_SELECTION_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "Lowriders", mes, "Sec", "Geri Don");

	return 1;
}

ShowPickups(playerid)
{
	SetPVarInt(playerid, #Selection, 4);

	new mes[sizeof(pickups_class_model)*128];

	for(new i = 0; i < sizeof(pickups_class_model); i++)
	{
		format(mes, sizeof(mes), "%s%i(0.0, 0.0, -27.0, 0.8)\t~w~%s~n~~g~~h~$%s\n", mes, pickups_class_model[i], VehicleNames[pickups_class_model[i]-400], FormatNumber(GetVehiclePrice(pickups_class_model[i])));
	}
	Dialog_Show(playerid, MODEL_SELECTION_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "Pickup ve  Vanlar", mes, "Sec", "Geri Don");

	return 1;
}

ShowSport(playerid)
{
	SetPVarInt(playerid, #Selection, 3);

	new mes[sizeof(sport_model)*128];
	for(new i = 0; i < sizeof(sport_model); i++)
	{
		format(mes, sizeof(mes), "%s%i(0.0, 0.0, -27.0, 0.8)\t~w~%s~n~~g~~h~$%s\n", mes, sport_model[i], VehicleNames[sport_model[i]-400], FormatNumber(GetVehiclePrice(sport_model[i])));
	}
	Dialog_Show(playerid, MODEL_SELECTION_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "SPOR ARACLAR", mes, "Sec", "Geri Don");

	return 1;
}

ShowOffRoad(playerid)
{
	SetPVarInt(playerid, #Selection, 5);

	new mes[sizeof(offroad_model)*128];
	for(new i = 0; i < sizeof(offroad_model); i++)
	{
		format(mes, sizeof(mes), "%s%i(0.0, 0.0, -27.0, 0.8)\t~w~%s~n~~g~~h~$%s\n", mes, offroad_model[i], VehicleNames[offroad_model[i]-400], FormatNumber(GetVehiclePrice(offroad_model[i])));
	}
	Dialog_Show(playerid, MODEL_SELECTION_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "SUV ARACLAR", mes, "Sec", "Geri Don");

	return 1;
}

ShowMotoBike(playerid)
{
	SetPVarInt(playerid, #Selection, 7);

	new mes[sizeof(motobike_model)*128];
	for(new i = 0; i < sizeof(motobike_model); i++)
	{
		format(mes, sizeof(mes), "%s%i(0.0, 0.0, -27.0, 0.8)\t~w~%s~n~~g~~h~$%s\n", mes, motobike_model[i], VehicleNames[motobike_model[i]-400], FormatNumber(GetVehiclePrice(motobike_model[i])));
	}
	Dialog_Show(playerid, MODEL_SELECTION_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "Motorsiklet / Bisikletler", mes, "Sec", "Geri Don");

	return 1;
}

ShowIndustrial(playerid)
{
	SetPVarInt(playerid, #Selection, 6);
	new mes[sizeof(industrial_model)*128];
	for(new i = 0; i < sizeof(industrial_model); i++)
	{
		format(mes, sizeof(mes), "%s%i(0.0, 0.0, -27.0, 0.8)\t~w~%s~n~~g~~h~$%s\n", mes, industrial_model[i], VehicleNames[industrial_model[i]-400], FormatNumber(GetVehiclePrice(industrial_model[i])));
	}
	Dialog_Show(playerid, MODEL_SELECTION_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "KAMYON VE IS ARACLARI", mes, "Sec", "Geri Don");

	return 1;
}

ShowOther(playerid)
{
	SetPVarInt(playerid, #Selection, 8);
	new mes[sizeof(other_model)*128];
	for(new i = 0; i < sizeof(other_model); i++)
	{
		format(mes, sizeof(mes), "%s%i(0.0, 0.0, -27.0, 0.8)\t~w~%s~n~~g~~h~$%s\n", mes, other_model[i], VehicleNames[other_model[i]-400], FormatNumber(GetVehiclePrice(other_model[i])));
	}
	Dialog_Show(playerid, MODEL_SELECTION_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "DIGERLERI", mes, "Sec", "Geri Don");

	return 1;
}

ShowBoats(playerid)
{
	SetPVarInt(playerid, #Selection, 10);
	new mes[sizeof(boat_model)*128];
	for(new i = 0; i < sizeof(boat_model); i++)
	{
		format(mes, sizeof(mes), "%s%i(0.0, 0.0, -27.0, 0.8)\t~w~%s~n~~g~~h~$%s\n", mes, boat_model[i], VehicleNames[boat_model[i]-400], FormatNumber(GetVehiclePrice(boat_model[i])));
	}
	Dialog_Show(playerid, MODEL_SELECTION_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "Botlar", mes, "Sec", "Kapat");

	return 1;
}

ShowFly(playerid)
{
	SetPVarInt(playerid, #Selection, 11);
	new mes[sizeof(fly_model)*128];
	for(new i = 0; i < sizeof(fly_model); i++)
	{
		format(mes, sizeof(mes), "%s%i(0.0, 0.0, -27.0, 0.8)\t~w~%s~n~~g~~h~$%s\n", mes, fly_model[i], VehicleNames[fly_model[i]-400], FormatNumber(GetVehiclePrice(fly_model[i])));
	}
	Dialog_Show(playerid, MODEL_SELECTION_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "HAVA ARACLARI", mes, "Sec", "Kapat");

	return 1;
}

ShowDonate(playerid)
{
	SetPVarInt(playerid, #Selection, 9);

	new mes[sizeof(donate_model)*128];

	for(new i = 0; i < sizeof(donate_model); i++)
	{
		format(mes, sizeof(mes), "%s%i(0.0, 0.0, -27.0, 0.8)\t~w~%s~n~~g~~h~$%s\n", mes, donate_model[i], VehicleNames[donate_model[i]-400], FormatNumber(GetVehiclePrice(donate_model[i])));
	}
	Dialog_Show(playerid, MODEL_SELECTION_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "ULTRA LUKS ARACLAR", mes, "Seç", "Geri Don");

	return 1;
}


Dialog:MODEL_SELECTION_BUYCAR(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, SelectClass, DIALOG_STYLE_LIST, "Bir kategori seçin", "2 Kapýlý araçlar\n\
																									Lowrider araçlar\n\
																									4 kapýlý ve lüks araçlar\n\
																									Spor araçlar\n\
																									Pickuplar ve panelvan araçlar\n\
																									SUV araçlar\n\
																									Kamyon ve iþci araçlarý\n\
																									Motorsiklet / Bisikletler\n\
																									Diðerleri\n\
																									", "Seç", "Kapat");

	new price, modelid;

	switch(GetPVarInt(playerid, #Selection))
	{
		case 0: modelid = b_class_model[listitem];
		case 1: modelid = lowride_class_model[listitem];
		case 2: modelid = a_class_model[listitem];
		case 3: modelid = sport_model[listitem];
		case 4: modelid = pickups_class_model[listitem];
		case 5: modelid = offroad_model[listitem];
		case 6: modelid = industrial_model[listitem];
		case 7: modelid = motobike_model[listitem];
		case 8: modelid = other_model[listitem];
		case 9: modelid = donate_model[listitem];
		case 10: modelid = boat_model[listitem];
		case 11: modelid = fly_model[listitem];
	}

	DeletePVar(playerid, #Selection);

	if ((price = GetVehiclePrice(modelid)) == 0)	return SendErrorMessage(playerid, "Bu araç mevcut deðil!");

	DeletePVar(playerid, "BuyingVehicleModel");
	SetPVarInt(playerid, "BuyingVehicleRegister", 0);
	SetPVarInt(playerid, "BuyingVehicleAlarm", 0);
	SetPVarInt(playerid, "BuyingVehicleLock", 0);
	SetPVarInt(playerid, "BuyingVehicleImmob", 0);
	SetPVarInt(playerid, "BuyingVehicleInsurance", 0);
	SetPVarInt(playerid, "BuyingVehicleRadio", 0);
	SetPVarInt(playerid, "BuyingVehicleGps", 0);
	SetPVarInt(playerid, "BuyingVehicleModel", modelid);

	new mes[56];

	format(mes, sizeof(mes), "{ffffff}%s - {35B835}$%s", VehicleNames[modelid-400], FormatNumber(price));

	if (modelid == 481 || modelid == 509 || modelid == 510)
	{
		Dialog_Show(playerid, BuyingVehicleDone, DIALOG_STYLE_MSGBOX, mes, "Bu aracý satýn almak istediðinizden emin misiniz?", "Kabul", "Ýptal");
	}
	else
	{
		SetPVarInt(playerid, #veh_color1, random(255));
		SetPVarInt(playerid, #veh_color2, random(255));

		new vehFuel[15], vehDrive[20];

		new Float:vehMass = GetVehicleModelInfoAsFloat(modelid, "fMass");

        if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nDriveType") == 'F')
	    	vehDrive = "Ön çekiþli";
	    else if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nDriveType") == 'R')
	    	vehDrive = "Arka çekiþli";
	    else if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nDriveType") == '4')
	    	vehDrive = "4x4";

	    if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nEngineType") == 'P')
	    	vehFuel = "Benzin";
	    else if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nEngineType") == 'D')
	    	vehFuel = "Dizel";
	    else if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nEngineType") == 'E')
	   		vehFuel = "Elektrik";

	    static const str_size[] = "{ecc317}Ücret: \t\t			{ffffff}$%s\n\
                                    {ecc317}Maksimum hýz: \t		{ffffff}%.1f km/h\n\
                                    {ecc317}Saðlamlýk: \t		{ffffff}%.1f\n\
                                    {ecc317}Aðýrlýk: \t\t		{ffffff}%.1f kf\n\n\
                                    {ecc317}Sürüþ dinamiði: \t		{ffffff}%s\n\
                                    {ecc317}Yakýt tipi: \t\t			{ffffff}%s\n\
                                    {ecc317}Yakýt tüketimi: \t		{ffffff}%.1f l/100 km\n\
                                    {ecc317}Bagaj kapasitesi: \t	{ffffff}%.1f l\n\n";

        new string[sizeof(str_size) + 15 + 20 + 6 + 128*2 + 128],
			registerveh = price_reg[GetPVarInt(playerid, "BuyingVehicleRegister")];

        format(string, sizeof(string), str_size,
			FormatNumber(GetVehiclePrice(modelid)),
			GetVehicleMaxSpeed[modelid-400],
			GetVehicleMaxHealth(modelid),
			vehMass,
			vehDrive,
			vehFuel,
			GetVehicleFuelUsage(modelid),
			GetVehicleFuelCapacity(modelid)
		);

		format(string, sizeof(string), "%s{ecc317}Renk 1{ffffff} - [{%06x}#%i{ffffff}]\n{ecc317}Renk 2{ffffff} - [{%06x}#%i{ffffff}]\n\n", string, VehicleColoursTableRGBA[GetPVarInt(playerid, #veh_color1)] >>> 8, GetPVarInt(playerid, #veh_color1), VehicleColoursTableRGBA[GetPVarInt(playerid, #veh_color2)] >>> 8, GetPVarInt(playerid, #veh_color2));

		SetPVarInt(playerid, "BuyingVehicleRegister", 1);
		format(string, sizeof(string), "%s{ffffff}Sisteme Kayýt: \t{ecc317}$%i\n{ecc317}+ {ffffff}DMV sistemine kayýt olan plaka\n\n", string, registerveh);

		format(string, sizeof(string), "%s{ffffff}Aracý satýn almak için '{ecc317}Öde{ffffff}' butonuna basabilirsiniz.", string);

		Dialog_Show(playerid, BuyingVehicleList, DIALOG_STYLE_MSGBOX, mes, string, "Düzenle", "Öde");
	}
	return 1;
}

LoadComp(vehicle)
{
	if (VehicleInfo[vehicle][carPaintJob] != 3) ChangeVehiclePaintjob(vehicle, VehicleInfo[vehicle][carPaintJob]);

	for(new i = 0; i < 14; i++)
	{
		if (VehicleInfo[vehicle][carComponent][i] == 0) continue;

		AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][i]);
	}
	return 1;
}

SendVehicleMessage(vehicleid,color,string[])
{
	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || !IsPlayerInVehicle(i, vehicleid)) continue;

        SendClientMessage(i,color,string);
	}
	return 1;
}

GetVehicleNumber()
{
	new str[24], allowedchars[][2] = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"};

	format(str, 24, "%i%s%s%s%i%i%i", random(9), allowedchars[random(sizeof(allowedchars))], allowedchars[random(sizeof(allowedchars))], allowedchars[random(sizeof(allowedchars))], random(9), random(9), random(9));
	return str;
}

RepairVehicleBody(vehicle)
{
	return UpdateVehicleDamageStatus(vehicle, 0, 0, 0, 0);
}

DealerShip_Nearest(playerid, type)
{
	if (!IsPlayerLogged(playerid)) return -1;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if (!BizInfo[i][bizID]) continue;
		if (PlayerToPoint(35.0,playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt] && BizInfo[i][bizType] == type)
		{
			return i;
		}
	}
	return -1;
}

GetInsurancePrice(modelid)
{
	for(new i = 0; i < sizeof(InsurancesPrice); i++)
	{
		if (modelid == InsurancesPrice[i][insuranceModel]) return InsurancesPrice[i][insurancePrice];
	}
	return 350;
}

FindVehicleByPlate(plate[])
{
	for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if (isnull(VehicleInfo[i][carPlate])) continue;
		if (CompareStrings(plate, VehicleInfo[i][carPlate])) return i;
	}
	return -1;
}

Vehicle_OnVehicleSpawn(vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
	for(new i; i != MAX_TRUCK_PRODUCT; i++)
	{
	    if (i < 6 && IsValidDynamicObject(VehicleInfo[vehicleid][carCargoObj][i]))
		{
			DestroyDynamicObject(VehicleInfo[vehicleid][carCargoObj][i]);
            VehicleInfo[vehicleid][carCargoObj][i] = INVALID_OBJECT_ID;
		}

		if (i < 5 && IsValidDynamicObject(VehicleInfo[vehicleid][carSiren][i]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][carSiren][i]);
		    VehicleInfo[vehicleid][carSiren][i] = INVALID_OBJECT_ID;
		}

	    VehicleInfo[vehicleid][carCargoAmount][i] = 0;
	}

	SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
 	VehicleInfo[vehicleid][carLocked] = 0;
 	VehicleInfo[vehicleid][carTrunkLock] = 0;
 	VehicleInfo[vehicleid][carEngineOn] = 0;

    if (VehicleInfo[vehicleid][carOwnerID] == INVALID_PLAYER_ID)
    {
		FixVehicle(vehicleid);
		VehicleInfo[vehicleid][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(vehicleid));
		ToggleVehicleLock(vehicleid, false);
	}

    if (VehicleInfo[vehicleid][carFaction] > 0 || VehicleInfo[vehicleid][carOwnerID] > 0 && VehicleInfo[vehicleid][carOwnerID] != INVALID_PLAYER_ID)	ToggleVehicleLock(vehicleid, false);
	if (VehicleInfo[vehicleid][carOwnerID] && VehicleInfo[vehicleid][carDeath])		SetVehicleHealth(vehicleid, GetVehicleMaxHealth(GetVehicleModel(vehicleid)) + VehicleInfo[vehicleid][carArmour]);

	if(OlusumTipGetir(VehicleInfo[vehicleid][carFaction]) == FACTION_POLICE && VehicleInfo[vehicleid][carOwnerID] == INVALID_PLAYER_ID && VehicleInfo[vehicleid][carOwnerID] == 0) {
		for(new j; j < MAX_CAR_WEAPONS; j++) VehicleInfo[vehicleid][carSlotUsed][j] = 0;
	}

	if (VehicleInfo[vehicleid][carType] == RENT_CAR)
	{
	    for(new i = 0; i < MAX_TRUNK_INVENTORY; i++)
		{
			TrunkInventory[vehicleid][i][pInvName] = EOS;
			TrunkInventory[vehicleid][i][pInvQFloat] = 0.0;
			TrunkInventory[vehicleid][i][pInvItem] =
			TrunkInventory[vehicleid][i][pInvQ] =
			TrunkInventory[vehicleid][i][pInvEx] =
			TrunkInventory[vehicleid][i][pInvS] =
			VehicleInfo[vehicleid][carAttachObj][i] = 0;
		}

		for(new i = 0; i < MAX_CAR_INVENTORY; i++)
		{
			CarInventory[vehicleid][i][pInvName] = EOS;
			CarInventory[vehicleid][i][pInvQFloat] = 0.0;
			CarInventory[vehicleid][i][pInvItem] =
			CarInventory[vehicleid][i][pInvQ] =
			CarInventory[vehicleid][i][pInvEx] =
			CarInventory[vehicleid][i][pInvS] = 0;
		}
	}

	VehicleInfo[vehicleid][carDeath] = 0;
	LoadedTrash[vehicleid] = 0;
	}
}

Float:GetVehicleSpeedS(vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	if(GetVehicleVelocity(vehicleid, x, y, z))
	{
		return floatsqroot((x * x) + (y * y) + (z * z)) * 181.5;
	}

	return 0.0;
}

Vehicle_OnVehicleDeath(vehicleid, killerid)
{
	if (IsValidDynamic3DTextLabel(VehicleInfo[vehicleid][eVehicleLabel])) DestroyDynamic3DTextLabel(VehicleInfo[vehicleid][eVehicleLabel]);

	if (killerid == GetVehicleOwner(vehicleid) && !VehicleInfo[vehicleid][carDeath]) ResetVehicleStuff(vehicleid);

	SendAdmMessage("DEBUG: %s [%d] adlý oyuncu araç patlattý. ID: %d.", GetNameEx(killerid), killerid, vehicleid);

	if (VehicleInfo[vehicleid][carOwnerID] && VehicleInfo[vehicleid][carOwnerID] != INVALID_PLAYER_ID)
	{
	    new userid = GetVehicleOwner(vehicleid);

		if (IsPlayerLogged(userid)) PlayerInfo[userid][pCarKey] = 0;

		DestroyVehicleEx(vehicleid);
	}

	if (VehicleInfo[vehicleid][carRent] != 0)
	{
	    new userid = GetIDByID(VehicleInfo[vehicleid][carRent]);
	    if (IsPlayerLogged(userid))
	    {
	        pTemp[userid][pRentveh] = 0;

			if (pTemp[userid][pJob] ) {
				EndJob(userid);
				SendErrorMessage(userid, "Araç respawn edildi.");
			} else {
				SendErrorMessage(userid, "Kiralanan araç patladýðý için mesleðiniz iptal edildi.");
			}
	    }
	    VehicleInfo[vehicleid][carRent] = 0;
		VehicleInfo[vehicleid][carOwnerPlayer] = INVALID_PLAYER_ID;
	}

	if (VehicleInfo[vehicleid][vCorp]) RemoveCorpse(VehicleInfo[vehicleid][vCorp]-1);
}
Vehicle_OnPlayerUpdate(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if (vehicleid)
    {
        if (IsABicycle(vehicleid)) return 1;

        new string[16],
            kmh = GetVehicleSpeed(vehicleid),
            fuelAmount = VehicleInfo[vehicleid][carFuel], // Yakit miktarini al
            vehicleModel = GetVehicleModel(vehicleid);

        // Yakit miktarini güncelle
        format(string, sizeof(string), "BENZIN:%.1f~g~L", fuelAmount);
        PlayerTextDrawSetString(playerid, cWspeedo[playerid][7], string);


        // Hiz bilgisini güncelle
        format(string, sizeof(string), "HIZ:%d~g~KM/H", kmh);
        PlayerTextDrawSetString(playerid, cWspeedo[playerid][9], string);

        // Kilometre bilgisini güncelle
        format(string, sizeof(string), "KM%.1f~g~km", VehicleInfo[vehicleid][carMilliage]);
        PlayerTextDrawSetString(playerid, cWspeedo[playerid][8], string);

    }
    return 1;
}
stock GetAvailableSeat(vehicleid, start = 1)
{
	new seats = GetVehicleMaxSeats(vehicleid);

	for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
	    return i;
	}
	return -1;
}

stock IsVehicleSeatUsed(vehicleid, seat)
{
	foreach (new i : Player) if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
	    return 1;
	}
	return 0;
}

GetNextVehicleTrunkSlot(vehicleid)
{
	for(new i; i != MAX_TRUNK_INVENTORY; i++)
	{
	    if (TrunkInventory[vehicleid][i][pInvItem] == 0) return i;
	}
	return -1;
}

GetNextVehicleGBSlot(vehicleid)
{
	for(new i; i != MAX_TRUNK_INVENTORY; i++)
	{
	    if (CarInventory[vehicleid][i][pInvItem] == 0) return i;
	}
	return -1;
}

VehicleTrunk(vehicle, bool:toggle)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;

	GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
	if (toggle)
	{
		SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet, 1,objective);
		VehicleInfo[vehicle][carTrunkLock] = 1;
	}
	else
	{
		SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet, 0, objective);
		VehicleInfo[vehicle][carTrunkLock] = 0;
	}
	return 1;
}

VehicleHood(vehicle, bool:toggle)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;

	GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
	if (toggle)
	{
		SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,1,boot,objective);
		VehicleInfo[vehicle][carHoodLock] = 1;
	}
	else
	{
		SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,0,boot,objective);
		VehicleInfo[vehicle][carHoodLock] = 0;
	}
	return 1;
}

IsDriver(playerid)
{
	return IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER ? 1 : 0;
}

VehicleEmpty(vehicleid)
{
	foreach(new i : Player)
	{
		if (IsPlayerInVehicle(i, vehicleid) && !IsPlayerAFK(i) && IsPlayerLogged(i)) return 0;
	}
	return 1;
}

GetVehicleZone(vehicleid)
{
	new Float:x, Float:y, Float:z;
	GetVehiclePos(vehicleid, x, y, z);

	new string[128], zone[28];

	if (IsValidVehicle(vehicleid)) GetZone(x, y, zone, sizeof(zone));

	if (IsPointInAnyDynamicArea(x, y, z)) {
		new areas[10], street_area[2], j = GetNumberDynamicAreasForPoint(x,y,z);
		GetDynamicAreasForPoint(x, y, z, areas, sizeof(areas));

		if (GetStreet(areas, j, street_area)) {
			if (street_area[1] == -1) format(string, sizeof(string), "%s, %s", zone, street_names[street_area[0]]);
			else					 format(string, sizeof(string), "%s, %s sokaðý ile %s sokaðý arasýnda.", zone, street_names[street_area[0]],street_names[street_area[1]]);

			return string;
		}
	}

	format(string, sizeof(string), "%s", zone);
	return string;
}

FixVehicle(vehicleid)
{
    VehicleInfo[vehicleid][carDeath] = 0;
	RepairVehicle(vehicleid);

    if (VehicleInfo[vehicleid][carOwnerID] > 0 && VehicleInfo[vehicleid][carOwnerID] != INVALID_PLAYER_ID)
		SetVehicleHealth(vehicleid, GetVehicleMaxHealth(GetVehicleModel(vehicleid)) + VehicleInfo[vehicleid][carArmour]);

	else
	{
	    if (GetVehicleModel(vehicleid) == 601 || GetVehicleModel(vehicleid) == 528 || GetVehicleModel(vehicleid) == 427)	\
				SetVehicleHealth(vehicleid, 10000.0);
	    else	SetVehicleHealth(vehicleid, 1000.0);
	}
	return 1;
}

GetMaxPassengers(model)
{
    model -= 400;
    if (0 <= model <= 211)
    {
        static seekBlock_vSeats[27] = {0x10331113, 0x11311131, 0x11331313, 0x80133301, 0x1381F110, 0x10311103, 0x10001F10, 0x11113311, 0x13113311, 0x31101100, 0x30001301, 0x11031311, 0x11111331, 0x10013111, 0x01131100, 0x11111110,
		0x11100031, 0x11130221, 0x33113311, 0x11111101, 0x33101133, 0x101001F0, 0x03133111, 0xFF11113F, 0x13330111, 0xFF131111, 0x0000FF3F};

        return ((seekBlock_vSeats[model >>> 3] >>> ((model & 7) << 2)) & 15);
    }
    return 15;
}

this::MyCarsSpawn(playerid, response)
{
	if (!response)	return 1;

	new query[256];

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cars` WHERE `owner` = %i AND `id` = %i LIMIT 1", PlayerInfo[playerid][pID], pTemp[playerid][MyCars][pTemp[playerid][MyCarSpawn][0]]);
	mysql_tquery(dbHandle, query, "OnPlayerSpawnVehicle", "i", playerid);

	return 1;
}

GetVehName(id)
{
	new
		query[80],
		name[24],
		model
	;

 	mysql_format(dbHandle, query, sizeof(query), "SELECT `model` FROM `cars` WHERE `id` = %i LIMIT 1", id);
	new Cache:cache = mysql_query(dbHandle, query);

	cache_get_value_int(0, "model", model);

	format(name, sizeof(name), "%s", VehicleNames[model-400]);
	cache_delete(cache);
	return name;
}


GetCarsignPosition(vehicle, &Float:x, &Float:y, &Float:z)
{
    new modelid = GetVehicleModel(vehicle);

	for(new i = 0; i < sizeof(CarSignPosition); i++)
	{
	    if (modelid != CarSignPosition[i][Model]) continue;

        x = CarSignPosition[i][positionX];
		y = CarSignPosition[i][positionY];
		z = CarSignPosition[i][positionZ];
		break;
	}
	return 1;
}

GetNearBootVehicle(playerid)
{
	for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++)
	{
	    if (IsVehicleStreamedIn(i, playerid) && IsOnBootVehicle(playerid, i)) return i;
	}
	return 0;
}

GetBootPos(vehicleid, &Float:x, &Float:y, &Float:z)
{
	new Float:angle, Float:distance, model = GetVehicleModel(vehicleid);

	GetVehicleModelInfo(model, 1, x, distance, z);
    distance = distance/2 + 0.1;
    GetVehiclePos(vehicleid, x, y, z);
    GetVehicleZAngle(vehicleid, angle);
    x += (distance * floatsin(-angle+180, degrees));
    y += (distance * floatcos(-angle+180, degrees));
	return 1;
}

IsOnBootVehicle(playerid, vehicleid)
{
    new Float: x, Float: y, Float: z, model = GetVehicleModel(vehicleid);
	GetBootPos(vehicleid, x, y, z);

    if (model == 435 || model == 450 || model == 584 || model == 591)	return IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z);

    return IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z);
}

IsOnHoodVehicle(playerid, vehicleid)
{
    new Float:angle,Float:distance, Float: x, Float: y, Float: z;

    GetVehicleModelInfo(GetVehicleModel(vehicleid), 1, x, distance, z);
    distance = distance/2 + 0.1;
    GetVehiclePos(vehicleid, x, y, z);
    GetVehicleZAngle(vehicleid, angle);
    x -= (distance * floatsin(-angle+180, degrees));
    y -= (distance * floatcos(-angle+180, degrees));
    return IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z);
}

IsWindowsClose(vehicle)
{
    new wi_state[4];
	GetVehicleParamsCarWindows(vehicle, wi_state[0], wi_state[1], wi_state[2], wi_state[3]);
	return (wi_state[0] != 0 && wi_state[1] != 0 && wi_state[2] != 0 && wi_state[3] != 0) ? (1):(0);
}

GetVehicleSpeed(vehicleid)
{
    new Float:x,
        Float:y,
        Float:z,
        vel;

    GetVehicleVelocity(vehicleid, x, y, z);

    vel = floatround(floatsqroot(x*x + y*y + z*z) * 180);

    return vel;
}
stock GetNearVehicle(playerid, Float:radius = 3.0, vehicleid = 0)
{
	new
		Float:px,
		Float:py,
		Float:pz;

	if (vehicleid != 0)
	{
		if (GetVehiclePos(vehicleid, px, py, pz) && IsPlayerInRangeOfPoint(playerid, radius, px, py, pz) && GetWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) return 1;
		return 0;
	}

	new closet = 0;

	GetPlayerPos(playerid, px, py, pz);
	for (new i = 1, j = GetVehiclePoolSize(); i <= j; i++)
	{
		if (i != INVALID_VEHICLE_ID)
		{
			if (GetVehicleDistanceFromPoint(i, px, py, pz) <= radius && GetWorld(playerid) == GetVehicleVirtualWorldEx(i))
			{
				GetVehiclePos(i, px, py, pz);
				closet = i;
			}
		}
	}
	return closet;
}

stock RespawnVehicle(vehicleid, spawned = 0)
{
	new Float: health,
		Float: x,
		Float: y,
		Float: z,
		Float: fa,
		world = veh_vw[vehicleid],
		interior = veh_int[vehicleid];

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, fa);
	GetVehicleHealth(vehicleid, health);

    DestroyObject (VehRadarID [vehicleid]);
    VehRadarID [vehicleid] = -1;
  	CheckingSpeed [vehicleid] = 0;

    DestroyDynamic3DTextLabel(veicolo_callsign_testo[vehicleid]);

    new
		panels,
		doorss,
		lightss,
		tires;

	GetVehicleDamageStatus(vehicleid, panels, doorss, lightss, tires);

	SetVehicleToRespawn(vehicleid);

	if (spawned == 1)
	{
	    SetVehicleVirtualWorld(vehicleid, world);
		LinkVehicleToInterior(vehicleid, interior);
		//SetVehicleVirtualWorldEx(vehicleid, world);
		//SetVehicleInteriorEx(vehicleid, interior);
	    SetVehiclePos(vehicleid, x, y, z);
	    SetVehicleZAngle(vehicleid, fa);
	}
	else
	{
		SetVehicleVirtualWorld(vehicleid, VehicleInfo[vehicleid][carVW]);
		LinkVehicleToInterior(vehicleid, VehicleInfo[vehicleid][carInt]);
		//SetVehicleVirtualWorldEx(vehicleid, VehicleInfo[vehicleid][carVW]);
		//SetVehicleInteriorEx(vehicleid, VehicleInfo[vehicleid][carInt]);
	}

	if (VehicleInfo[vehicleid][carOwnerID] == INVALID_PLAYER_ID)
	    return 1;

	if(OlusumTipGetir(VehicleInfo[vehicleid][carFaction]) == FACTION_POLICE && VehicleInfo[vehicleid][carOwnerID] == INVALID_PLAYER_ID && VehicleInfo[vehicleid][carOwnerID] == 0) {
		for(new j; j < MAX_CAR_WEAPONS; j++) VehicleInfo[vehicleid][carSlotUsed][j] = 0;
	}

	UpdateVehicleDamageStatus(vehicleid, panels, doorss, lightss, tires);
	LoadComp(vehicleid);
	SetVehicleHealth(vehicleid, health);

	if (IsValidDynamic3DTextLabel(VehicleInfo[vehicleid][eVehicleLabel])) DestroyDynamic3DTextLabel(VehicleInfo[vehicleid][eVehicleLabel]);
	return 1;
}

ToggleVehicleLock(vehicleid, bool:toggle)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;

    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);

    if (toggle == true)
	{
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
		VehicleInfo[vehicleid][carLocked] = 1;
	}
	else
	{
 	   SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
 	   VehicleInfo[vehicleid][carLocked] = 0;
 	}
	return 1;
}

VehicleLight(vehicleid, bool:toggle)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;

	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);

	if (toggle == true)	SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
	else				SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);

	return 1;
}

VehicleEngine(vehicleid, bool:toggle)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;

	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);

	if (toggle == true)
	{
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
 		VehicleInfo[vehicleid][carEngineOn] = 1;
 	}
	else
	{
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
  		VehicleInfo[vehicleid][carEngineOn] = 0;
 	}
	return 1;
}

ToggleVehicleEngine(vehicleid, playerid)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (VehicleInfo[vehicleid][carEngineOn])
	{
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);

		new mes[128];
		format(mes, sizeof(mes), "%s model aracýn motorunu kapattý.", VehicleNames[GetVehicleModel(vehicleid)-400]);
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);

		format(mes, sizeof(mes), "~w~%s MOTORU ~r~KAPANDI",VehicleNames[GetVehicleModel(vehicleid)-400]);
		GameTextForPlayer(playerid, mes, 2500, 4);

		VehicleInfo[vehicleid][carEngineOn] = false;

		return 1;
	}

	if (VehicleInfo[vehicleid][carOwnerID] && VehicleInfo[vehicleid][carEngine] <= 0.0)		return GameTextForPlayer(playerid, "~r~ARAC CALISMIYOR~n~MOTOR ARIZA LAMBASI YANIYOR!", 3000, 4);
    if (VehicleInfo[vehicleid][carOwnerID] && VehicleInfo[vehicleid][carBattery] <= 0.0)	return GameTextForPlayer(playerid, "~r~ARAC CALISMIYOR~n~AKU ARIZA LAMBASI YANIYOR!", 3000, 4);

	new Float: health;
	AntiCheatGetVehicleHealth(vehicleid, health);

	if (health <= 330.0) return GameTextForPlayer(playerid, "~r~MOTOR HASARLI~w~ OLDUGU ICIN ~y~CALISTIRILAMADI!", 3000, 4);

	else if (health < 430.0 && health > 330.0)
	{
	    SendSyntaxMessage(playerid, "Aracýnýzýn motoru hasarlý olduðu için zor çalýþýyor.");
	    SendSyntaxMessage(playerid, "{FFFF00}W {ffffff}tuþuna {FFFF00}10 saniye{ffffff} kadar basýlý tutun ve motorun çalýþmasýný bekleyin.");
        GameTextForPlayer(playerid, "~r~MOTOR HASARLI~w~ OLDUGU ICIN ~y~CALISTIRILAMADI!", 30000, 4);
		SetPVarInt(playerid, #try_engine, 2);
		return 1;
	}
	else if (health < 600.0 && health > 390.0 && random(2) == 0) return GameTextForPlayer(playerid, "~r~CALISTIRILAMADI!", 3000, 4);

	SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);

	new mes[128];
	format(mes, sizeof(mes), "%s model aracýn motorunu çalýþtýrýr.", VehicleNames[GetVehicleModel(vehicleid)-400]);
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);

	format(mes, sizeof(mes), "~w~%s MOTORU ~g~CALISTI",VehicleNames[GetVehicleModel(vehicleid)-400]);
	GameTextForPlayer(playerid, mes, 2500, 4);

	VehicleInfo[vehicleid][carEngineOn] = true;

	return 1;
}

AlarmOn(vehicle)
{
    if (VehicleInfo[vehicle][carAlarm] < 1) 		return 1;
	if (VehicleInfo[vehicle][carObjectiveTime])	return 1;

    new engine,lights,alarm,doors,bonnet,boot,objective;

    GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(vehicle,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);

    if (VehicleInfo[vehicle][carAlarm] < 2) return 1;

	GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);

	SendFactionMessageF(FACTION_POLICE, COLOR_YELLOWG, "[Araç Alarmý] %s[%s], %s bölgesinde alarm çaldý.", VehicleNames[GetVehicleModel(vehicle)-400], VehicleInfo[vehicle][carPlate], GetVehicleZone(vehicle));

	if (VehicleAlertNote[vehicle] - gettime() < 0) {
		new str_vehalarm[256];
		format(str_vehalarm, sizeof(str_vehalarm), "%s model aracýn alarmý tetiklendi.", GetVehicleZone(vehicle));

		VehicleAlertNote[vehicle] = gettime() + 1800;
		CarWanted(vehicle, str_vehalarm);
	}

	VehicleInfo[vehicle][carObjectiveTime] = 150;
    VehicleInfo[vehicle][carAlarmTime] = 60;
	SetVehicleParamsEx(vehicle,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,VEHICLE_PARAMS_ON);

    if (VehicleInfo[vehicle][carAlarm] < 3) return 1;

	new mes[256];
	if (VehicleInfo[vehicle][carAlarm] == 4)	format(mes, sizeof(mes), "Aracýnýzýn alarmý tetiklendi.");
	else format(mes, sizeof(mes), "%s model aracýnýzýn alarmý tetiklendi, Konum: %s.", VehicleNames[GetVehicleModel(vehicle)-400], GetVehicleZone(vehicle));

	foreach(new i : Player)
	{
		if (IsPlayerLogged(i) && PlayerInfo[i][pCarKey] == vehicle) return SendSMStoPlayer(i, "9199", "LCSecurity", mes);
	}

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `id` = %i", VehicleInfo[vehicle][carOwnerID]);
	mysql_tquery(dbHandle, query, "SmsToPlayerOff", "sss", "9199", "LCSecurity", mes);

	return 1;
}

AlarmOff(vehicleid)
{
    VehicleInfo[vehicleid][carObjectiveTime] = 0;
    VehicleInfo[vehicleid][carAlarmTime] = 30;

    new engine,lights,alarm,doors,bonnet,boot,objective;

	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehicleid,engine,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,VEHICLE_PARAMS_OFF);
	return 1;
}

CarWanted(vehicleid, text[])
{
	VehicleInfo[vehicleid][carWanted] = 1;
	SQL_SetInteger("cars", "wanted", 1, VehicleInfo[vehicleid][carID]);

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `Note1`,`Note2`,`Note3`,`Note4`,`Note5` FROM `cars` WHERE `id` = %i", VehicleInfo[vehicleid][carID]);
	mysql_tquery(dbHandle, query);

	if (!cache_num_rows()) return SQL_SetString("cars", "Note1", text, VehicleInfo[vehicleid][carID]);
	else {
		new notesadd[5];
		for(new i = 0; i < 5; i++) {
			new notei[6];
			format(notei, sizeof(notei), "Note%i", i+1);
			cache_get_value_name(0, notei, notesadd[i]);

			if (CompareStrings(notesadd[i], "None"))
			{
				SQL_SetString("cars", notei, text, VehicleInfo[vehicleid][carID]);
				break;
			}
		}
	}
	return 1;
}

IsPizzaCar(vehicle)
{
	return VehicleInfo[vehicle][carType] == PIZZA_CAR ? 1 : 0;
}

IsTaxiCar(vehicle)
{
	return VehicleInfo[vehicle][carType] == TAXI_CAR ? 1 : 0;
}

IsTrashMasterCar(vehicle)
{
	return VehicleInfo[vehicle][carType] == TRASHMASTER_CAR ? 1 : 0;
}

IsMechanicCar(vehicle)
{
	return VehicleInfo[vehicle][carType] == MECHANIC_CAR ? 1 : 0;
}

IsTruckCar(vehicle)
{
	return VehicleInfo[vehicle][carType] == TRUCK_CAR ? 1 : 0;
}

IsTasimacilikCar(vehicle)
{
	return VehicleInfo[vehicle][carType] == TASIMACILIK_CAR ? 1 : 0;
}

IsADMVCar(vehicle)
{
	return VehicleInfo[vehicle][carType] == DMV_VEHICLE ? 1 : 0;
}

IsADMVTaxi(vehicle)
{
	return VehicleInfo[vehicle][carType] == DMV_TAXI ? 1 : 0;
}

IsADMVHeli(vehicle)
{
	return VehicleInfo[vehicle][carType] == DMV_HELICOPTER ? 1 : 0;
}

IsRentCar(vehicle)
{
    return VehicleInfo[vehicle][carType] == RENT_CAR ? 1 : 0;
}

IsABicycle(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 481 || model == 509 || model == 510)?(1):(0);
}

IsATowTruck(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 525)?(1):(0);
}

IsAPlane(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 592 || model == 577 || model == 511 || model == 512 || model == 593 || model == 520 || model == 553 || model == 476 || model == 519 || model == 460 || model == 513 || model == 548 || model == 417 || model == 487 ||
	model == 488 || model == 497 || model == 563 || model == 447 || model == 469 )?(1):(0);
}

IsADontTrunk(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 457 || model == 424 || model == 568 || model == 525 || model == 531 || model == 530 || model == 572)?(1):(0);
}

IsAHelicopter(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 548 || model == 425 || model == 417 || model == 487 || model == 488 || model == 497 || model == 563 || model == 447 || model == 469)?(1):(0);
}

IsATaxi(vehicle)
{
	return (GetVehicleModel(vehicle) == 420 || GetVehicleModel(vehicle) == 438)?(1):(0);
}

IsATrashTruck(vehicle)
{
	return (GetVehicleModel(vehicle) == 408)?(1):(0);
}

IsADontWindow(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 586 || model == 424 || model == 448 || model == 457 || model == 461 || model == 462 || model == 463 || model == 468 || model == 471 || model == 481 || model == 509 || model == 572 || model == 510 || model == 521 ||
	model == 522 || model == 523 || model == 530 || model == 531 || model == 532 || model == 539 || model == 568 || model == 571 ||model == 581 || model == 582 || model == 430 || model == 446 || model == 452 || model == 453 ||
	model == 454 || model == 472 || model == 473 || model == 484 || model == 493 || model == 595)?(1):(0);
}

IsABiker(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	return (model == 522 || model == 521 || model == 461 || model == 463 || model == 581 || model == 448 || model == 586 || model == 523 || model == 468 || model == 471 || model == 462)?(1):(0);
}

IsABoat(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	return (model == 472 || model == 473 || model == 493 || model == 595 || model == 484 || model == 430 || model == 453 || model == 452 || model == 446 || model == 454)?(1):(0);
}

IsASurfingVehicles(model)
{
	switch (model)
	{
		case 510, 528, 490, 601, 422, 470, 478, 543: return 1;
		default: return 0;
	}
	return 0;
}

IsDonateVehicle(model)
{
    switch(model)
	{
	    case 424, 568, 495, 541, 411, 490, 522: return 1;
	}
	return 0;
}

IsBronzeVehicle(model)
{
	switch(model)
	{
	    case 424, 568: return 1;
	}
	return 0;
}

IsSilverVehicle(model)
{
	switch(model)
	{
	    case 495, 541: return 1;
	}
	return 0;
}

IsGoldVehicle(model)
{
    switch(model)
	{
	    case 411, 490, 522: return 1;
	}
	return 0;
}

IsABoatModel(model)
{
	return (model == 472 || model == 473 || model == 493 || model == 595 || model == 484 || model == 430 || model == 453 || model == 452 || model == 446 || model == 454)?(1):(0);
}

IsAPlaneModel(model)
{
	return (model == 592 || model == 577 || model == 511 || model == 512 || model == 593 || model == 520 || model == 553 || model == 476 || model == 519 || model == 460 || model == 513 || model == 548 || model == 417 || model == 487 ||
	model == 488 || model == 497 || model == 563 || model == 447 || model == 469 ) ? (1) : (0);
}

/*
IsTruckCar(vehicle)
{
	switch(GetVehicleModel(vehicle))
	{
	    case 403, 514, 515: return 1;
	}
	return 0;
}*/

GetPlayerHasRightTrunk(playerid, vehicleid)
{
	if (!VehicleInfo[vehicleid][carOwnerID]) {
		if (VehicleInfo[vehicleid][carFaction] != 0 && VehicleInfo[vehicleid][carFaction] != PlayerInfo[playerid][pFaction] && PlayerInfo[playerid][pAdmin] == 0)
		{
			return 0;
		}

		if ((VehicleInfo[vehicleid][carType] > 5 && VehicleInfo[vehicleid][carType] < 10 && VehicleInfo[vehicleid][carRent] && GetIDByID(VehicleInfo[vehicleid][carRent]) != playerid) || IsPizzaCar(vehicleid) && PlayerInfo[playerid][pSideJob] != JOB_PIZZA || IsTaxiCar(vehicleid) && PlayerInfo[playerid][pJob] != JOB_TAXI || IsMechanicCar(vehicleid) && PlayerInfo[playerid][pJob] != JOB_MECHANIC || IsTruckCar(vehicleid) && PlayerInfo[playerid][pJob] == JOB_TRUCKER || IsTasimacilikCar(vehicleid) && PlayerInfo[playerid][pJob] != 6 && GetAvailableTruck(playerid, GetVehicleModel(vehicleid) && PlayerInfo[playerid][pAdmin] == 0)) {
			return 0;
		}
	}

	if ((IsAPlane(vehicleid) || IsAHelicopter(vehicleid)) && !IsADMVHeli(vehicleid) && PlayerInfo[playerid][pFlyLic] == 0)
	{
		return 0;
	}

  	if (IsADMVCar(vehicleid) && PlayerInfo[playerid][pCarLic])
	{
		return 0;
	}
	else if (IsADMVHeli(vehicleid) && PlayerInfo[playerid][pFlyLic] == 1)
	{
		return 0;
	}
	else if (IsADMVTaxi(vehicleid) && PlayerInfo[playerid][pTaxiLic] == 1)
	{
		return 0;
	}
	else if (IsADMVTaxi(vehicleid) && PlayerInfo[playerid][pCarLic] == 0)
	{
		return 0;
	}
	return 1;
}

GetPlayerHasRightDrive(playerid, vehicleid)
{
	if (!VehicleInfo[vehicleid][carOwnerID] && VehicleInfo[vehicleid][carOwnerID] != INVALID_PLAYER_ID) {
		if (VehicleInfo[vehicleid][carFaction] != 0 && VehicleInfo[vehicleid][carFaction] != PlayerInfo[playerid][pFaction] && PlayerInfo[playerid][pAdmin] == 0)
		{
			SendErrorMessage(playerid, "Bu aracýn anahtarlarý sizde mevcut deðil!");
			RemovePlayerFromVehicle(playerid);
			return 0;
		}

		if ((VehicleInfo[vehicleid][carType] > 5 && VehicleInfo[vehicleid][carType] < 10 && pTemp[playerid][pRentveh] != vehicleid) || IsPizzaCar(vehicleid) && PlayerInfo[playerid][pSideJob] != JOB_PIZZA || IsTaxiCar(vehicleid) && PlayerInfo[playerid][pJob] != JOB_TAXI || IsMechanicCar(vehicleid) && PlayerInfo[playerid][pJob] != JOB_MECHANIC || IsTruckCar(vehicleid) && PlayerInfo[playerid][pJob] == JOB_TRUCKER || IsTasimacilikCar(vehicleid) && PlayerInfo[playerid][pJob] == 6 && GetAvailableTruck(playerid, GetVehicleModel(vehicleid) && PlayerInfo[playerid][pAdmin] == 0)) {
			SendErrorMessage(playerid, "Bu aracýn anahtarlarý sizde mevcut deðil!");
			RemovePlayerFromVehicle(playerid);
			return 0;
		}
	}

	if ((IsAPlane(vehicleid) || IsAHelicopter(vehicleid)) && !IsADMVHeli(vehicleid) && PlayerInfo[playerid][pFlyLic] == 0)
	{
		SendErrorMessage(playerid, "Bu hava aracýný çalýþtýrmak için gereken lisansýnýz yok!");
        RemovePlayerFromVehicle(playerid);
		return 0;
	}

  	if (IsADMVCar(vehicleid) && PlayerInfo[playerid][pCarLic])
	{
		SendErrorMessage(playerid, "Zaten ehliyetiniz var!");
		RemovePlayerFromVehicle(playerid);
		return 0;
	}
	else if (IsADMVHeli(vehicleid) && PlayerInfo[playerid][pFlyLic] == 1)
	{
		SendErrorMessage(playerid, "Zaten hava aracý lisansýnýz var!");
		RemovePlayerFromVehicle(playerid);
		return 0;
	}
	else if (IsADMVTaxi(vehicleid) && PlayerInfo[playerid][pTaxiLic] == 1)
	{
		SendErrorMessage(playerid, "Zaten taksi lisansýnýz var.");
		RemovePlayerFromVehicle(playerid);
		return 0;
	}
	else if (IsADMVTaxi(vehicleid) && PlayerInfo[playerid][pCarLic] == 0)
	{
		SendErrorMessage(playerid, "Taksi lisansý almanýz için normal ehliyete ihtiyacýnýz var.");
		RemovePlayerFromVehicle(playerid);
		return 0;
	}
	return 1;
}

ModShop_Nearest(playerid)
{
	if (!IsPlayerLogged(playerid)) return -1;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if (BizInfo[i][bizID] == 0 || BizInfo[i][bizType] != BIZ_TUNING) continue;

	    if (PlayerToPoint(15.0,playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt]) return i;
	}
	return -1;
}

Dialog:ShowComponentMenu(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if (ModShop_Nearest(playerid) == -1)										return 1;

	if (listitem == 2) return SendErrorMessage(playerid, "Bu eklenti pasiftir.");
	ShowComponentMenu2(playerid, vehicle, listitem);
return 1;
}

ShowComponentMenu2(playerid, vehicle, listitem)
{
	new mes[512], str[56];
	new count = 0;

	for(new i; i != max_vehicle_components[listitem]; i++)
	{
		if (vehicle_component[listitem][i][compID] == 0 || IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), vehicle_component[listitem][i][compID]) != 1) continue;
		format(str, sizeof(str), "%s\t$%i\n", GetComponentName(vehicle_component[listitem][i][compID]), vehicle_component[listitem][i][compPrice]);
		strcat(mes, str);
		count++;
   	}

	if (!count)
	{
	    ShowModMenu(playerid);
		return SendErrorMessage(playerid, "Aracýnýz için uygun parça bulunmamaktadýr.");
	}

	SetPVarInt(playerid, #component_type, listitem);
   	Dialog_Show(playerid, SelectModDialog, DIALOG_STYLE_TABLIST, "{33AA33}Araç Modifiyesi", mes, "Seç", "Geri Dön");
	return 1;
}

ShowModMenu(playerid)
{
	new vehicle = GetPlayerVehicleID(playerid);

    if (!vehicle || !IsDriver(playerid))								return SendErrorMessage(playerid, "Sürücü koltuðunda olmanýz gerekmektedir.");
    if (IsABicycle(vehicle))											return Dialog_Show(playerid, ModDialogBike, DIALOG_STYLE_LIST, "{33AA33}Bisiklet Tamiricisi", "Boyama [$100]", "Seç", "Kapat");
	//if (!IsABicycle(vehicle) && !VehicleInfo[vehicle][carRegistered])	return SendErrorMessage(playerid,"Bu araç sisteme kayýtlý deðil.");
	if (!IsABicycle(vehicle) && VehicleInfo[vehicle][carEngineOn])		return SendErrorMessage(playerid, "Aracýnýzda deðiþiklik yapmadan önce motoru durdurmalýsýnýz.");

    new cost = GetVehiclePrice(GetVehicleModel(vehicle));
	static const str_size[] = "Nitro\nPaintjob\nAraç Boyama [$500]\nHidrolik [$8.000]\nXM Radyo [$400]\nGPS [$1500]\nAraç Motoru Deðiþtirme [$%i]\nAraç Aküsü Deðiþtirme[$%i]\nÝmmobilizer Tak [$300]\nEkstralar\nModifiye Parçalarý Tak\nModifiyeyi Sil";
	new mes[sizeof(str_size) - 4 + 1 + 24];

	format(mes, sizeof(mes), str_size, cost / 100 * 10, cost / 100 * 5);
	Dialog_Show(playerid, ModDialog, DIALOG_STYLE_LIST, "{33AA33}Araç Modifiyesi", mes, "Seç", "Kapat");
	return 1;
}

SetVehicleInteriorEx(vehicleid, interior)
{
    veh_int[vehicleid] = interior;
	return LinkVehicleToInterior(vehicleid, interior);
}

GetVehicleInteriorEx(vehicleid)
{
	if (!IsValidVehicle(vehicleid)) return INVALID_VEHICLE_ID;
	return veh_int[vehicleid];
}

SetVehicleVirtualWorldEx(vehicleid, world)
{
    veh_vw[vehicleid] = world;
	return SetVehicleVirtualWorld(vehicleid, world);
}

GetVehicleVirtualWorldEx(vehicleid)
{
	if (!IsValidVehicle(vehicleid)) return INVALID_VEHICLE_ID;
	return veh_vw[vehicleid];
}

stock GetVehicleOwner(vehicleid)
{
	new playerid = VehicleInfo[vehicleid][carOwnerPlayer];
	if(playerid == INVALID_PLAYER_ID) return INVALID_PLAYER_ID;

	if(IsPlayerLogged(playerid) && PlayerInfo[playerid][pID] == VehicleInfo[vehicleid][carOwnerID]) return playerid;
	return INVALID_PLAYER_ID;
}

IsVehicleInRangeOfPoint(vehicleid, Float: radius, Float: x, Float: y, Float: z)
{
	return (GetVehicleDistanceFromPoint(vehicleid, x, y, z) <= radius)?(1):(0);
}

IsNearTrunk(vehicle, playerid, Float: dist = 4.0)
{
	if (IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))
		return 0;

	new Float: x, Float: y, Float: z;
    GetVehicleBoot(vehicle, x, y, z);

    if (GetPlayerDistanceFromPoint(playerid, x, y, z) > dist) return 0;

	return 1;
}

VehicleHasDoors(vehicleid)
{
	switch (GetVehicleModel(vehicleid))
	{
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475, 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536, 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

CountPlayerVehicles(playerid)
{
	new
		query[256]
	;

 	mysql_format(dbHandle, query, sizeof(query), "SELECT COUNT(id) AS total FROM `cars` WHERE `owner` = %i", PlayerInfo[playerid][pID]);
	new Cache:cache = mysql_query(dbHandle, query),
		count;

	cache_get_value_int(0, "total", count);
	cache_delete(cache);
	cache = MYSQL_INVALID_CACHE;
	return count;
}

this::Vh_OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	new query[256];

	//for(new x = 0; x < MAX_VEHICLES; x++)
	//{
	//	if (VehicleInfo[x][eVehicleDBID] == PlayerInfo[playerid][pOwnedVehicles][i+1])
	//	return SendErrorMessage(playerid, "That vehicle's already spawned.");
	//}

	if (playertextid == SpawnVeh_Arrows[playerid][0]) //right
	{
		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM cars WHERE owner = %i AND impound = 0 AND jacking = 0 AND id > %i LIMIT 1", PlayerInfo[playerid][pID], GetPVarInt(playerid, #spawnveh_id));
		mysql_tquery(dbHandle, query, "Query_ShowVehicleList", "i", playerid);
    }
	else if (playertextid == SpawnVeh_Arrows[playerid][1]) //left
	{
		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM cars WHERE owner = %i AND impound = 0 AND jacking = 0 AND id < %i ORDER BY `id` DESC LIMIT 1", PlayerInfo[playerid][pID], GetPVarInt(playerid, #spawnveh_id));
		mysql_tquery(dbHandle, query, "Query_ShowVehicleList", "i", playerid);
    }
	else if (playertextid == SpawnVeh_Model[playerid]) //spawn
    {
		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cars` WHERE `owner` = %i AND impound = 0 AND jacking = 0 AND `id` = %i LIMIT 1", PlayerInfo[playerid][pID], GetPVarInt(playerid, #spawnveh_id));
		mysql_tquery(dbHandle, query, "OnPlayerSpawnVehicle", "i", playerid);
	}
	return 1;
}

stock ShowVehicleList(playerid)
{
	PlayerTextDrawShow(playerid, SpawnVeh_Model[playerid]);
	PlayerTextDrawShow(playerid, SpawnVeh_Box[playerid]);
	for(new i = 0; i < 2; i++) PlayerTextDrawShow(playerid, SpawnVeh_Arrows[playerid][i]);
	for(new e = 0; e < 3; e++) PlayerTextDrawShow(playerid, SpawnVeh_Base[playerid][e]);

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM cars WHERE owner = %i AND impound = 0 AND jacking = 0 LIMIT 1", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "Query_ShowVehicleList", "ii", playerid, CountPlayerVehicles(playerid));

	return 1;
}

//#define COLOR_TEST 0xEC9F0EFF

this::Query_ShowVehicleList(playerid, idx)
{
	if (!cache_num_rows()) return 1;

	new
		vehicleModel,
		vehicleColor1,
		vehicleColor2
	;

	new id;
	cache_get_value_int(0, "id", id);

	SetPVarInt(playerid, #spawnveh_id, id);

	cache_get_value_int(0, "model", vehicleModel);
	cache_get_value_int(0, "color1", vehicleColor1);
	cache_get_value_int(0, "color2", vehicleColor2);

	new str[64];
    format(str, sizeof(str), "%s", VehicleNames[vehicleModel-400]);
    PlayerTextDrawSetString(playerid, SpawnVeh_Base[playerid][0], str);

    PlayerTextDrawSetPreviewModel(playerid, SpawnVeh_Model[playerid], vehicleModel);
    PlayerTextDrawSetPreviewVehCol(playerid, SpawnVeh_Model[playerid], vehicleColor1, vehicleColor2);

	PlayerTextDrawShow(playerid, SpawnVeh_Model[playerid]);

	SelectTextDraw(playerid, 0xEC9F0EFF);
	return 1;
}

NewScrambleWord(playerid)
{
	new vehid = GetPlayerVehicleID(playerid);
	pTemp[playerid][pUnscrambleID] = random(sizeof(UnscrambleInfo));

	switch(VehicleInfo[vehid][carImmob])
	{
		case 0: JackingEngine[playerid] = 125;
		case 1: JackingEngine[playerid] = 100;
		case 2: JackingEngine[playerid] = 75;
		case 3: JackingEngine[playerid] = 50;
		case 4: JackingEngine[playerid] = 25;
	}

	return 1;
}

StopJackingEngine(playerid)
{
	RemovePlayerFromVehicle(playerid);
	JackingEngine[playerid] = 0;
	pTemp[playerid][pUnscrambleID] = 0;
	pTemp[playerid][pScrambleFailed] = 0;
	pTemp[playerid][pScrambleSuccess] = 0;

	InfoMSG(playerid, "ARAC ~r~DUZ KONTAK ISLEMI ~w~BASARISIZ!", 3);

	return 1;
}


LeaveMission(playerid)
{
	InfoMSG(playerid, "~r~ISLEM IPTAL EDILDI!", 3);

	PlayerInfo[playerid][InMission] = MISSION_NONE;
	PlayerInfo[playerid][MissionTime] = 0;
	PlayerInfo[playerid][MissionTarget][0] = 0;
	PlayerInfo[playerid][MissionTarget][1] = 0;

	return 1;
}

StopJackingLock(playerid, x = 1)
{
	VehicleInfo[JackingVehicle[playerid]][ePhysicalAttack] = false;
	DestroyDynamic3DTextLabel(VehicleInfo[JackingVehicle[playerid]][eVehicleLabel]);
	VehicleInfo[JackingVehicle[playerid]][vCooldown] = false;

	TogglePlayerControllable(playerid, true);
	JackingVehicle[playerid] = 0;
	pTemp[playerid][JackingType] = 0;
	JackingLock[playerid] = 0;
	pTemp[playerid][JackingWarnings] = 0;

	if (x) InfoMSG(playerid, "ARAC ~r~KILIT KIRMA ~w~BASARISIZ!", 3);

	return 1;
}

this::DELETE_VEHICLE(playerid, response)
{
	new model = GetPVarInt(playerid, #RansomVehModel),
		vehid = GetPVarInt(playerid, #RansomVehID);

	DeletePVar(playerid, #RansomVehModel);
	DeletePVar(playerid, #RansomVehID);

	if (!response) return 1;

	new query[256];

	format(query, sizeof(query), "%s [IP: %s] %s aracýný sildi", GetName(playerid), PlayerInfo[playerid][pID], VehicleNames[model-400]);
	insert_log(query, VEHICLE_LOG, 4, PlayerInfo[playerid][pAccID]);

	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `tickets` WHERE `vehicle` = %i", vehid);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `cars` WHERE `id` = %i", vehid);
	mysql_tquery(dbHandle, query);

	SendSyntaxMessage(playerid, "%s baþarýyla silindi!", VehicleNames[model-400]);
	return 1;
}

IsPlayerInFrontVDoor(playerid, vehid) {
	new Float:ccX, Float:ccY, Float:ccZ;
	new Float:dX, Float:dY, Float:dZ;

	GetVehicleModelInfo(VehicleInfo[vehid][carModel], VEHICLE_MODEL_INFO_FRONTSEAT, ccX, ccY, ccZ);
	GetVehicleRelativePos(vehid, dX, dY, dZ, -ccX - 0.5, ccY, ccZ);
	if (!IsPlayerInRangeOfPoint(playerid, 1.2, dX, dY, dZ)) 	return 0;
	else 													return 1;
}

GetVehicleRelativePos(vehicleid, Float:x, Float:y, Float:z, Float:xoff= 0.0, Float:yoff= 0.0, Float:zoff= 0.0)
{
    new Float:rot;
    GetVehicleZAngle(vehicleid, rot);
    rot = 360 - rot;
    GetVehiclePos(vehicleid, x, y, z);
    x = floatsin(rot, degrees) * yoff + floatcos(rot, degrees) * xoff + x;
    y = floatcos(rot, degrees) * yoff - floatsin(rot, degrees) * xoff + y;
    z = zoff + z;
    return 1;
}

this::OnCoolDown(vehicleid)
{
    VehicleInfo[vehicleid][vCooldown] = false;
}

IsWindowOpened(vehicleid)
{
    new wi_state[4];

	GetVehicleParamsCarWindows(vehicleid, wi_state[0], wi_state[1], wi_state[2], wi_state[3]);
	if (!wi_state[0]) return true;
	else 			 return false;
}

//Panels
decode_panels(panels, &front_left_panel, &front_right_panel, &rear_left_panel, &rear_right_panel, &windshield, &front_bumper, &rear_bumper)
{
    front_left_panel = panels & 15;
    front_right_panel = panels >> 4 & 15;
    rear_left_panel = panels >> 8 & 15;
    rear_right_panel = panels >> 12 & 15;
    windshield = panels >> 16 & 15;
    front_bumper = panels >> 20 & 15;
    rear_bumper = panels >> 24 & 15;
}
/*encode_panels(front_left_panel, front_right_panel, rear_left_panel, rear_right_panel, windshield, front_bumper, rear_bumper)
{
    return front_left_panel | (front_right_panel << 4) | (rear_left_panel << 8) | (rear_right_panel << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);
}*/

//Doors
decode_doors(doors, &bonnet, &boot, &driver_door, &passenger_door, &behind_driver_door, &behind_passenger_door)
{
    bonnet = doors & 7;
    boot = doors >> 8 & 7;
    driver_door = doors >> 16 & 7;
    passenger_door = doors >> 24 & 7;
	behind_driver_door = doors >> 32 & 7;
	behind_passenger_door = doors >> 40 & 7;
}
/*encode_doors(bonnet, boot, driver_door, passenger_door)
{
    return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);
}*/

encode_doors(bonnet, boot, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
   // #pragma unused behind_driver_door
   // #pragma unused behind_passenger_door

    return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24) | (behind_driver_door << 32) | (behind_passenger_door << 40);
}


//Lights
decode_lights(lights, &front_left_light, &front_right_light, &back_lights)
{
    front_left_light = lights & 1;
    front_right_light = lights >> 2 & 1;
    back_lights = lights >> 6 & 1;
}
/*encode_lights(front_left_light, front_right_light, back_lights)
{
    return front_left_light | (front_right_light << 2) | (back_lights << 6);
}*/

//Tires
decode_tires(tires, &rear_right_tire, &front_right_tire, &rear_left_tire, &front_left_tire)
{
    rear_right_tire = tires & 1;
    front_right_tire = tires >> 1 & 1;
    rear_left_tire = tires >> 2 & 1;
    front_left_tire = tires >> 3 & 1;
}
/*encode_tires(rear_right_tire, front_right_tire, rear_left_tire, front_left_tire)
{
	return rear_right_tire | (front_right_tire << 1) | (rear_left_tire << 2) | (front_left_tire << 3);
}*/

GetVehicleStatus(playerid, &dmg_panel, &dmg_door, &dmg_light, &dmg_tire)
{
	new vehicle = GetPlayerVehicleID(playerid);
	if (!vehicle) 	return 1;

	new panels, doors, lights, tires,
		panel[7], door[6], light[3], tire[4];

	GetVehicleDamageStatus(vehicle, panels, doors, lights, tires);

	decode_panels(panels, panel[0], panel[1], panel[2], panel[3], panel[4], panel[5], panel[6]);
	decode_doors(doors, door[0], door[1], door[2], door[3], door[4], door[5]);
	decode_lights(lights, light[0], light[1], light[2]);
	decode_tires(tires, tire[0], tire[1], tire[2], tire[3]);

	for(new i; i < sizeof(panels); i++) if (panel[i]) 	dmg_panel++;
	for(new i; i < sizeof(door); i++) 	if (door[i]) 	dmg_door++;
	for(new i; i < sizeof(light); i++) 	if (light[i]) 	dmg_light++;
	for(new i; i < sizeof(tire); i++)	if (tire[i]) 	dmg_tire++;

	dmg_panel = 	floatround(dmg_panel*100/sizeof(panel), floatround_ceil);
	dmg_door =		floatround(dmg_door*100/sizeof(door), floatround_ceil);
	dmg_light =		floatround(dmg_light*100/sizeof(light), floatround_ceil);
	dmg_tire = 		floatround(dmg_tire*100/sizeof(tire), floatround_ceil);

	return 1;
}

this::RepairAll(playerid, response)
{
    if (!response)    return 1;
	if (!IsDriver(playerid))	return SendNotInVehicle(playerid);

	new
		vehicle = GetPlayerVehicleID(playerid),
		carfaction = VehicleInfo[vehicle][carFaction],
		bizid = PAS_Nearest(playerid)
	;

    if (IsFactionLegal(carfaction))                                 return FixVehicle(vehicle), SendServerMessage(playerid, "Aracý tamir ettirdin ve faturasý hükümete yazýldý.");
    if (VehicleInfo[vehicle][carType] != 0)                         return FixVehicle(vehicle), SendServerMessage(playerid, "Aracý 150 dolar karþýlýðýnda tamir ettirdin."), GiveCash(playerid, -150);
	if (bizid == -1)												return SendErrorMessage(playerid, "Yakýnýnýzda araç tamirhanesi bulunmuyor.");
	if (VehicleInfo[vehicle][carEngineOn])							return SendErrorMessage(playerid, "Araç tamirini baþlatmak için motoru kapatmalýsýnýz.");
	if (BizInfo[bizid][bizLocked])									return GameTextForPlayer(playerid, "~r~KAPALI!", 2500, 1);
    if (BizInfo[bizid][bizOwnerID] && !BizInfo[bizid][bizProduct])	return SendErrorMessage(playerid, "Araç tamirhanesinde gerekli parçalar bulunmuyor.");

	new Float: health;
	AntiCheatGetVehicleHealth(GetPlayerVehicleID(playerid), health);

	new panels, doors, lights, tires;
	GetVehicleStatus(playerid, panels, doors, lights, tires);

	new
		model = GetVehicleModel(vehicle),
		hp_cost = floatround((100 - ((health/GetVehicleMaxHealth(model))*100)) * (GetVehiclePrice(model)/1000), floatround_ceil),
		cost = floatround(GetVehiclePrice(model) / 100, floatround_ceil)
	;

	if (GetCash(playerid) < cost)	return SendErrorMessage(playerid, "Tamir için yeterli paranýz bulunmuyor, gereken: $%i", cost);

	StartVehicleUpgrade(playerid, vehicle, 13, cost);
	return 1;
}

this::RepairList(playerid, response)
{
    if (!response)    return 1;
	if (!IsDriver(playerid))	return SendNotInVehicle(playerid);

	new
		vehicle = GetPlayerVehicleID(playerid),
		bizid = PAS_Nearest(playerid)
	;

	if (bizid == -1)												return SendErrorMessage(playerid, "Yakýnýnýzda araç tamirhanesi bulunmuyor.");
	if (VehicleInfo[vehicle][carEngineOn])							return SendErrorMessage(playerid, "Araç tamirini baþlatmak için motoru kapatmalýsýnýz.");
	if (BizInfo[bizid][bizLocked])									return GameTextForPlayer(playerid, "~r~KAPALI!", 2500, 1);
    if (BizInfo[bizid][bizOwnerID] && !BizInfo[bizid][bizProduct])	return SendErrorMessage(playerid, "Araç tamirhanesinde gerekli parçalar bulunmuyor.");

	new panels, doors, lights, tires;
	GetVehicleStatus(playerid, panels, doors, lights, tires);

	new cost = GetPVarInt(playerid, #auto_cost);

	if (GetCash(playerid) < cost)	return SendErrorMessage(playerid, "Tamir için yeterli paranýz bulunmuyor, gereken: $%i", cost);

	StartVehicleUpgrade(playerid, vehicle, 14, cost);
	return 1;
}

this::RepairHP(playerid, response)
{
    if (!response)    return 1;
	if (!IsDriver(playerid))	return SendNotInVehicle(playerid);

	new
		vehicle = GetPlayerVehicleID(playerid),
		bizid = PAS_Nearest(playerid)
	;

	if (bizid == -1)												return SendErrorMessage(playerid, "Yakýnýnýzda araç tamirhanesi bulunmuyor.");
	if (VehicleInfo[vehicle][carEngineOn])							return SendErrorMessage(playerid, "Araç tamirini baþlatmak için motoru kapatmalýsýnýz.");
	if (BizInfo[bizid][bizLocked])									return GameTextForPlayer(playerid, "~r~KAPALI!", 2500, 1);
    if (BizInfo[bizid][bizOwnerID] && !BizInfo[bizid][bizProduct])	return SendErrorMessage(playerid, "Araç tamirhanesinde gerekli parçalar bulunmuyor.");

	new Float: health;
	AntiCheatGetVehicleHealth(GetPlayerVehicleID(playerid), health);

	new panels, doors, lights, tires;
	GetVehicleStatus(playerid, panels, doors, lights, tires);

	new
		model = GetVehicleModel(vehicle),
		hp_cost = floatround((100 - ((health/GetVehicleMaxHealth(model))*100)) * (GetVehiclePrice(model)/1000), floatround_ceil)
	;

	if (GetCash(playerid) < hp_cost)	return SendErrorMessage(playerid, "Tamir için yeterli paranýz bulunmuyor, gereken: $%i", hp_cost);

	StartVehicleUpgrade(playerid, vehicle, 13, hp_cost);
	return 1;
}

this::ChangeBattery(playerid, response)
{
    if (!response)    return 1;

	new
		vehicle = GetPlayerVehicleID(playerid),
		bizid = PAS_Nearest(playerid)
	;

	if (bizid == -1)												return SendErrorMessage(playerid, "Yakýnýnýzda araç tamirhanesi bulunmuyor.");
	if (VehicleInfo[vehicle][carEngineOn])							return SendErrorMessage(playerid, "Araç tamirini baþlatmak için motoru kapatmalýsýnýz.");
	if (BizInfo[bizid][bizLocked])									return GameTextForPlayer(playerid, "~r~KAPALI!", 2500, 1);
    if (BizInfo[bizid][bizOwnerID] && !BizInfo[bizid][bizProduct])	return SendErrorMessage(playerid, "Araç tamirhanesinde gerekli parçalar bulunmuyor.");

	new cost = GetVehiclePrice(GetVehicleModel(vehicle)) / 100 * 5;

	if (cost < 1)					return 1;
	if (GetCash(playerid) < cost)	return SendErrorMessage(playerid, "Akü tamiri için yeterli paranýz bulunmuyor, gereken: $%i", cost);

	if (GetCash(playerid) < cost)	return SendErrorMessage(playerid, "Tamir için yeterli paranýz bulunmuyor, gereken: $%i", cost);

	StartVehicleUpgrade(playerid, vehicle, 11, cost);
	return 1;
}

this::ChangeEngine(playerid, response)
{
    if (!response)    return 1;

	new
		vehicle = GetPlayerVehicleID(playerid),
		bizid = PAS_Nearest(playerid)
	;

	if (bizid == -1)												return SendErrorMessage(playerid, "Yakýnýnýzda araç tamirhanesi bulunmuyor.");
	if (VehicleInfo[vehicle][carEngineOn])							return SendErrorMessage(playerid, "Araç tamirini baþlatmak için motoru kapatmalýsýnýz.");
	if (BizInfo[bizid][bizLocked])									return GameTextForPlayer(playerid, "~r~KAPALI!", 2500, 1);
    if (BizInfo[bizid][bizOwnerID] && !BizInfo[bizid][bizProduct])	return SendErrorMessage(playerid, "Araç tamirhanesinde gerekli parçalar bulunmuyor.");

	new cost = GetVehiclePrice(GetVehicleModel(vehicle)) / 100 * 10;

	if (cost < 1) 					return 1;
	if (GetCash(playerid) < cost)	return SendErrorMessage(playerid, "Motor tamiri için yeterli paranýz bulunmuyor, gereken: $%i", cost);

	if (GetCash(playerid) < cost)	return SendErrorMessage(playerid, "Tamir için yeterli paranýz bulunmuyor, gereken: $%i", cost);

	StartVehicleUpgrade(playerid, vehicle, 9, cost);
	return 1;
}

this::ConfirmFilling(playerid, response)
{
    if (!response)    return 1;

	new vehicle = GetPlayerVehicleID(playerid), bizid;

	if (!IsDriver(playerid))					return SendNotInVehicle(playerid);
	if ((bizid = AZC_Nearest(playerid)) == -1)	return SendErrorMessage(playerid, "Yakýnýnýzda benzin istasyonu bulunmuyor.");
	if (VehicleInfo[vehicle][carEngineOn])		return SendErrorMessage(playerid, "Yakýt doldurmak için motoru kapatmalýsýnýz.");
	if (BizInfo[bizid][bizLocked])				return GameTextForPlayer(playerid, "~r~KAPALI!", 2500, 1);

    if (BizInfo[bizid][bizOwnerID] && !BizInfo[bizid][bizProduct])	return SendErrorMessage(playerid, "Benzin istasyonunda yeterli yakýt yok.");

	SendSyntaxMessage(playerid, "Yakýt doldurmayý durdurmak için: /benzin");

	SetPVarInt(playerid, #UsePump, bizid+1);
	RefuelTimer[playerid] = SetTimerEx("Refuel", 350, true, "iii", playerid, vehicle, bizid);
	return 1;
}

this::Refuel(playerid, vehicleid, bizid)
{
    new price, Float: f_price,  modelid = GetVehicleModel(vehicleid);

	if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nEngineType") == 'P') 	  f_price = float(BizInfo[bizid][bizEntrance]) * 1.2 * 0.5;
	else if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nEngineType") == 'E') f_price = float(BizInfo[bizid][bizEntrance]) * 0.8 * 0.5;
	else f_price = float(BizInfo[bizid][bizEntrance]) * 0.5;

	price = floatround(f_price, floatround_ceil);
    if (GetPlayerMoney(playerid) < price)
    {
        Fuel_ResetPlayer(playerid);
        ToggleVehicleEngine(vehicleid, playerid);
        return SendNotCash(playerid);
    }

    SetPVarFloat(playerid, #FuelBought, GetPVarFloat(playerid, #FuelBought) + 0.5);
    VehicleInfo[vehicleid][carFuel] += 0.5;
	GiveCash(playerid, -price);
	GiveBizCash(bizid, price);

    new string[120];
    format(string, sizeof(string), "~b~~h~Yakit dolduruluyor ...~n~~n~~w~Ucret: ~g~~h~$%d ~y~~h~(%.2fL)", floatround(GetPVarFloat(playerid, #FuelBought) * float(price)), GetPVarFloat(playerid, #FuelBought));
    PlayerTextDrawSetString(playerid, FuelText[playerid], string);
	PlayerTextDrawShow(playerid, FuelText[playerid]);

    if (VehicleInfo[vehicleid][carFuel] > GetVehicleFuelCapacity(modelid))
    {
        VehicleInfo[vehicleid][carFuel] = GetVehicleFuelCapacity(modelid);
        Fuel_ResetPlayer(playerid);
        ToggleVehicleEngine(vehicleid, playerid);
    }

    return 1;
}

stock GetPlayerNameBySqlID(sqlid)
{
    new name[MAX_PLAYER_NAME] = "Yok", query[43 + 11 + 1], Cache:search;

    mysql_format(dbHandle, query, sizeof(query), "SELECT name FROM users WHERE id = '%d'", sqlid);
    search = mysql_query(dbHandle, query);

    if(cache_num_rows())
    {
        cache_get_value(0, "name", name);
    }

    cache_delete(search);
    search = MYSQL_INVALID_CACHE;

    return name;
}

GetVehicleNameS(vehicleid)
{
	new
		modelid = GetVehicleModel(vehicleid),
		name[32];

	if(400 <= modelid <= 611)
	    strcat(name, modelNames[modelid - 400]);
	else
	    name = "Bilinmeyen";

	return name;
}

AracSayiKontrol(playerid)
{
	new __sayi=0, Float:pPos[3];
	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	for(new i;i<MAX_VEHICLES;i++)
	{
	    if(!IsValidVehicle(i)) continue;
	    if(IsVehicleInRangeOfPoint(i, 4.5, pPos[0], pPos[1], pPos[2]) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(i))
		{
			__sayi++;
		}
	}
	if(__sayi == 1) return 1;
	return 0;
}

stock BumpTierBlowout(vehicleid)
{
	new panels, doors, lights, tires;
	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
	UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, encode_tires(1, 1, 1, 1));
	return 1;
}

encode_tires(tire1, tire2, tire3, tire4) return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);

stock GetVehicleMaxSeats(vehicleid)
{
	new deger;

	if(GetVehicleModel(vehicleid) == 599)
		deger = 4;

	else
	{
	    static const g_arrMaxSeats[] = {
			4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
			1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
			2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
			4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
			1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
			4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
			4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
			0, 0
		};
		new
		    model = GetVehicleModel(vehicleid);

		if (400 <= model <= 611)
		    deger = g_arrMaxSeats[model - 400];
	}

	return deger;
}

forward DestroyEffectObject(objectid, objectid2);
public DestroyEffectObject(objectid, objectid2)
{ // Egzoz patlatma sistemi destroyobjct
	DestroyObject(objectid);
	if(objectid2 != -1) DestroyObject(objectid2);
	return 1;
}
Dialog:RentVehicleDialog(playerid, response, listitem, inputtext[])
{
    if (!response)
    {
        SendClientMessage(playerid, -1, "Araç kiralama islemi iptal edildi.");
        return 1; // Dialog sonlandirildi.
    }

    new Float:x, Float:y, Float:z, Float:a;
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);

    new model;
    switch (listitem)
    {
        case 0: model = 507; // Elegant
        case 1: model = 467; // Oceanic
        case 2: model = 462; // Greenwood
        case 3: model = 547; // Primo
        case 4: model = 566; // Tahoma
        default: return SendClientMessage(playerid, -1, "Geçersiz araç seçimi!"); // Geçersiz seçim durumu.
    }

    // Araci olustur
    new vehicle = CreateFactionVehicle(false, model, x, y, z, a, 1, 1, 5, 0, GetVehicleNumber(), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    if (!vehicle) return SendErrorMessage(playerid, "Bir sorun olustu. Kod: 1055");

    // Kiralama ücretini düs
    GivePlayerMoney(playerid, -300);

    // Araç bilgilerini kaydet
    pTemp[playerid][pRentveh] = vehicle;
    VehicleInfo[vehicle][carRent] = PlayerInfo[playerid][pID];

    // Araci tamir et ve yakitini doldur
    FixVehicle(vehicle);
    VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(model);

    // Oyuncuyu araca yerlestir
    PutPlayerInVehicle(playerid, vehicle, 0);

    // Bilgilendirme mesajlari gönder
    SendSyntaxMessage(playerid, "%s model araci $300'a kiraladiniz. Kullanabileceginiz komutlar: /arackirabitir, /akilit.", VehicleNames[model - 400]);
    SendSyntaxMessage(playerid, "Dikkat! Araci 10 dakika boyunca kullanmazsaniz araç spawnlanacaktir!");
    return 1; // Dialog basariyla sonlandirildi.
}
Dialog:LspdCarDialog(playerid, response, listitem, inputtext[])
{
    if (!response)
    {
        SendClientMessage(playerid, -1, "Araç kiralama islemi iptal edildi.");
        return 1; // Dialog sonlandirildi.
    }

    new Float:x, Float:y, Float:z, Float:a;
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);

    new model;
    switch (listitem)
    {
        case 0: model = 596; // lspd
        case 1: model = 598; // lvpd
        case 2: model = 597; // sfpd
        case 3: model = 490; // fbi ranch
        case 4: model = 601; // Swat
		 case 5: model = 432; //rhino
        default: return SendClientMessage(playerid, -1, "Geçersiz araç seçimi!"); // Geçersiz seçim durumu.
    }

    // Araci olustur
    new vehicle = CreateFactionVehicle(false, model, x, y, z, a, 0, 1, 0, 1,  GetVehicleNumber(), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    if (!vehicle) return SendErrorMessage(playerid, "Bir sorun olustu. Kod: 1055");

    // Kiralama ücretini düs
    GivePlayerMoney(playerid, -0);

    // Araç bilgilerini kaydet
    pTemp[playerid][pRentveh] = vehicle;
    VehicleInfo[vehicle][carRent] = PlayerInfo[playerid][pID];

    // Araci tamir et ve yakitini doldur
    FixVehicle(vehicle);
    VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(model);

    // Oyuncuyu araca yerlestir
    PutPlayerInVehicle(playerid, vehicle, 0);

    // Bilgilendirme mesajlari gönder
	SendSyntaxMessage(playerid, "Dikkat! Araci 10 dakika boyunca kullanmazsaniz araç spawnlanacaktir!");
	SendSyntaxMessage(playerid, "Araçla iþiniz bitti ise eðer /makb yazarak aractan kurtulabilirsiniz.!");
    return 1; // Dialog basariyla sonlandirildi.
}
Dialog:DuplicateKey(playerid, response, listitem, inputtext[])
{
	if (!response)																			return 1;
    if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))										return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");
	if (VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwnerID] != PlayerInfo[playerid][pID])	return 1;

    static const str_size[] = "{ffffff}%s için anahtarlar kopyalandý. Tipi {C3C3C3}[ID/Ýsim] {ffffff}kopyalanan anahtarlarý kime vermek istiyorsunuz?";
	new mes[sizeof(str_size) - 2 + 1 + 32];

	format(mes, sizeof(mes), str_size, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);

    new userid;

	if (sscanf(inputtext, "u", userid))
	{
	    Dialog_Show(playerid, DuplicateKey, DIALOG_STYLE_INPUT, "{FFFFFF}Anahtarlarý Kopyala", mes, "Satýn Al", "Ýptal");
	    return SendErrorMessage(playerid, "Oyuncu ID'si giriniz.");
	}

	if (!IsPlayerLogged(userid) || userid == playerid)
	{
	    Dialog_Show(playerid, DuplicateKey, DIALOG_STYLE_INPUT, "{FFFFFF}Anahtarlarý Kopyala", mes, "Satýn Al", "Ýptal");
		return SendNotConnected(playerid);
	}

	if (!PlayerNearPlayer(7.0, playerid, userid))
	{
	    Dialog_Show(playerid, DuplicateKey, DIALOG_STYLE_INPUT, "{FFFFFF}Anahtarlarý Kopyala", mes, "Satýn Al", "Ýptal");
		return SendNotNearPlayer(playerid);
	}

	PlayerInfo[userid][pSpareKey] = VehicleInfo[PlayerInfo[playerid][pCarKey]][carID];
	SendSyntaxMessage(playerid, "Kopyalanan anahtarlar %s tarafýndan oluþturuldu ve %s oyuncusuna verildi.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400], GetNameEx(userid));
    SendSyntaxMessage(userid, "%s, %s adlý kiþiden anahtarlarýn bir kopyasýný satýn aldý. (/anahtarat - aracýn anahtarýný yere atarsýnýz)", GetNameEx(playerid), VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
	return 1;
}

Dialog:ScrapSell(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new veh = PlayerInfo[playerid][pCarKey], string1[128], mes[32];

	if (IsABicycle(veh)) format(mes, sizeof(mes), "%s", VehicleNames[VehicleInfo[veh][carModel]-400]);

	else
	{
		if (VehicleInfo[veh][carRegistered])	format(mes, sizeof(mes), "{FFFFFF}%s [%s]", VehicleNames[VehicleInfo[veh][carModel]-400], VehicleInfo[veh][carPlate]);
		else								format(mes, sizeof(mes), "{FFFFFF}%s", VehicleNames[VehicleInfo[veh][carModel]-400]);
	}

	format(string1, sizeof(string1), "{FFFFFF}Bu aracý $%i karþýlýðýnda satmak istediðinizden emin misiniz?", GetVehiclePrice(VehicleInfo[veh][carModel])/2);
	Dialog_Show(playerid, ScrapVehicle, DIALOG_STYLE_MSGBOX, mes, string1, "Evet", "Hayýr");
	return 1;
}

Dialog:ScrapVehicle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new veh = PlayerInfo[playerid][pCarKey];

        SendSyntaxMessage(playerid, "Aracýn \"%s\" $%i karþýlýðýnda sattýnýz.", VehicleNames[VehicleInfo[veh][carModel]-400], GetVehiclePrice(VehicleInfo[veh][carModel])/2);
		GiveCash(playerid,  GetVehiclePrice(VehicleInfo[veh][carModel])/2);

        new query[256], money = PlayerInfo[playerid][pCash];

		format(query, sizeof(query), "%s [MYSQL: %i | IP: %s | Money(WAS): %i | Money(BECOME): %i] sold the car %s(Model: %i) for -- $%i", GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money,
		GetCash(playerid), VehicleNames[VehicleInfo[veh][carModel]-400], VehicleInfo[veh][carModel], GetVehiclePrice(VehicleInfo[veh][carModel])/2);
	    insert_log(query, VEHICLE_LOG, 3, PlayerInfo[playerid][pAccID]);

		DeleteVehicleTickets(veh);

		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `cars` WHERE `id` = %i", VehicleInfo[veh][carID]);
		mysql_tquery(dbHandle, query);

		PlayerInfo[playerid][pCarKey] = 0;
		VehicleInfo[veh][carOwnerPlayer] = INVALID_PLAYER_ID;
		DestroyVehicleEx(veh);
	}
	return 1;
}

Dialog:BuyingVehicleList(playerid, response, listitem, inputtext[])
{
	if (response)	ShowBuyingVehicleDetails(playerid);
	else
	{
	    new registerveh 	= price_reg[GetPVarInt(playerid, "BuyingVehicleRegister")],
			alarmveh 		= price_alarm[GetPVarInt(playerid, "BuyingVehicleAlarm")],
			lockveh 		= price_lock[GetPVarInt(playerid, "BuyingVehicleLock")],
			immobveh 		= price_immob[GetPVarInt(playerid, "BuyingVehicleImmob")],
			insuranceveh 	= GetInsurancePrice(GetPVarInt(playerid, "BuyingVehicleModel")) * GetPVarInt(playerid, "BuyingVehicleInsurance"),
			xmradioveh 		= price_radio[GetPVarInt(playerid, "BuyingVehicleRadio")],
			gpsveh 			= price_gps[GetPVarInt(playerid, "BuyingVehicleGps")];

    	new mes[56];

		format(mes, sizeof(mes), "{FFFFFF}%s - {35B835}$%i", VehicleNames[GetPVarInt(playerid, "BuyingVehicleModel")-400], GetVehiclePrice(GetPVarInt(playerid, "BuyingVehicleModel"))+registerveh+alarmveh+lockveh+immobveh+insuranceveh+xmradioveh+gpsveh);
		Dialog_Show(playerid, BuyingVehicleDone, DIALOG_STYLE_MSGBOX, mes, "{FFFFFF}Bu aracý satýn almak istediðinizden emin misiniz?", "Satýn Al", "Ýptal");
	}
	return 1;
}

Dialog:BuyingVehicleDone(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new query[256];
   	mysql_format(dbHandle, query, sizeof(query), "SELECT `id` FROM `cars` WHERE `owner` = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "BuyVehicleForPlayer", "i", playerid);
	return 1;
}

Dialog:RansomVehicle(playerid, response, listitem, inputtext[])
{
	if (!response) {
		DeletePVar(playerid, #RansomVehModel);
		DeletePVar(playerid, #RansomVehID);
		return 1;
	}

	Dialog_Show(playerid, RansomVehicle2, DIALOG_STYLE_LIST, "Kullaným seçenekleri", "Aracý kullan\nAracýmý sil", "Seç", "<<");
	return 1;
}
Dialog:RansomVehicle2(playerid, response, listitem, inputtext[])
{
	if (!response) {
		DeletePVar(playerid, #RansomVehModel);
		DeletePVar(playerid, #RansomVehID);
		return 1;
	}

	if (listitem == 0)
	{
		new model = GetPVarInt(playerid, #RansomVehModel),
			vehid = GetPVarInt(playerid, #RansomVehID);

		DeletePVar(playerid, #RansomVehModel);
		DeletePVar(playerid, #RansomVehID);

		new price = floatround(GetVehiclePrice(model)*0.5);
		if (GetCash(playerid) < price)	return SendNotCash(playerid);

		SendSyntaxMessage(playerid, "%s'nizi $%i karþýlýðýnda satýn aldýnýz.", VehicleNames[model-400], price);
		SQL_SetInteger("cars", "jacking", 0, vehid);
		GiveCash(playerid, -price);
	} else {
		new mes[128];
		format(mes, sizeof(mes), "{FFFFFF}Aracýnýz %s {FF6347}onayýnýz{FFFFFF} ile birlikte silenecek, onaylýyor musunuz?", GetVehName(pTemp[playerid][MyCars][listitem]));
		ConfirmDialog(playerid, "Araç imha onayý", mes, "DELETE_VEHICLE");
	}
	return 1;
}

Dialog:MyCars(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	if (IsValidVehicle(PlayerInfo[playerid][pCarKey]) && pTemp[playerid][MyCarSpawn][listitem])
		return pc_cmd_aracmenu(playerid, "");
	else
	{
		if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))
		{
			pTemp[playerid][MyCarSpawn][0] = listitem;

			new dlgmes[88];
			format(dlgmes, sizeof(dlgmes), "{FFFFFF} %s model aracýnýzý spawn etmek istiyor musunuz?", GetVehName(pTemp[playerid][MyCars][listitem]));
			ConfirmDialog(playerid, "Doðrulama", dlgmes, "MyCarsSpawn");
		}
		else
		{
			SendErrorMessage(playerid, "Baþka bir aracý spawnlamadan önce spawnlanmýþ araçlarýnýzý park etmelisiniz.");
			pc_cmd_araclarim(playerid, "");
		}
	}

	return 1;
}

Dialog:BuyingVehicleDetails(playerid, response, listitem, inputtext[])
{
	new registerveh = price_reg[GetPVarInt(playerid, "BuyingVehicleRegister")],
		alarmveh = price_alarm[GetPVarInt(playerid, "BuyingVehicleAlarm")],
		lockveh = price_lock[GetPVarInt(playerid, "BuyingVehicleLock")],
		immobveh = price_immob[GetPVarInt(playerid, "BuyingVehicleImmob")],
		insuranceveh = GetInsurancePrice(GetPVarInt(playerid, "BuyingVehicleModel")) * GetPVarInt(playerid, "BuyingVehicleInsurance"),
		xmradioveh = price_radio[GetPVarInt(playerid, "BuyingVehicleRadio")], gpsveh = price_gps[GetPVarInt(playerid, "BuyingVehicleGps")];

	new registeruse[128], lockuse[128], alarmuse[250], immobuse[260], insuranceuse[260], xmradiouse[128], gpsuse[128];

	if (GetPVarInt(playerid, "BuyingVehicleRegister"))			format(registeruse, sizeof(registeruse), "{ffffff}Sisteme kayýt: \t{ecc317}$%i\n{ecc317}+ {ffffff}Araç plseviye.\n\n", registerveh);

	if (GetPVarInt(playerid, "BuyingVehicleAlarm") == 1)			format(alarmuse, sizeof(alarmuse), "{ffffff}Alarm: \t{bab9ba}1 seviye \t{ecc317}$%i\n{ecc317}+ {ffffff}Yüksek sesli alarm\n\n", alarmveh);
	else if (GetPVarInt(playerid, "BuyingVehicleAlarm") == 2)	format(alarmuse, sizeof(alarmuse), "{ffffff}Alarm: \t{bab9ba}2 seviye \t{ecc317}$%i\n{ecc317}+ {ffffff}Yüksek sesli alarm\n{ecc317}+ {ffffff}Polis ihbarý.\n\n", alarmveh);
	else if (GetPVarInt(playerid, "BuyingVehicleAlarm") == 3)	format(alarmuse, sizeof(alarmuse), "{ffffff}Alarm: \t{bab9ba}3 seviye \t{ecc317}$%i\n{ecc317}+ {ffffff}Yüksek sesli alarm\n{ecc317}+ {ffffff}Polis ihbarý.\n{ecc317}+ {ffffff}SMS bildirimi\n\n", alarmveh);
	else if (GetPVarInt(playerid, "BuyingVehicleAlarm") == 4)	format(alarmuse, sizeof(alarmuse), "{ffffff}Alarm: \t{bab9ba}4 seviye \t{ecc317}$%i\n{ecc317}+ {ffffff}Yüksek sesli alarm\n{ecc317}+ {ffffff}Polis ihbarý.\n{ecc317}+ {ffffff}Hýrsýzlýk bildirimi araç sahibine bildirilir ve fatura bilgisi gelir.\n\n", alarmveh);

	if (GetPVarInt(playerid, "BuyingVehicleLock") > 0)			format(lockuse, sizeof(lockuse), "{ffffff}Kilit: \t\t\t{bab9ba}%i seviye \t{ecc317}$%i\n{ecc317}+ {ffffff}%i seconds lock picking vehicle.\n\n", GetPVarInt(playerid, "BuyingVehicleLock"), lockveh, 250 + (GetPVarInt(playerid, "BuyingVehicleLock") * 250));

	if (GetPVarInt(playerid, "BuyingVehicleImmob") > 0)			format(immobuse, sizeof(immobuse), "{ffffff}immobilizer: \t{bab9ba}%i seviye \t{ecc317}$%i\n{ecc317}+ {ffffff}Kontak anahtarýnýn kýrýlmasýný önlemeye yardýmcý olur.\n\n", GetPVarInt(playerid, "BuyingVehicleImmob"), immobveh);

	if (GetPVarInt(playerid, "BuyingVehicleInsurance") == 1)		format(insuranceuse, sizeof(insuranceuse), "{ffffff}Sigorta: \t\t{bab9ba}1 seviye \t{ecc317}$%i\n{ecc317}+ {ffffff}Araçlar her zaman tamir edilmiþ þekilde býrakýlýr\n\n", insuranceveh);
	else if (GetPVarInt(playerid, "BuyingVehicleInsurance") == 2)	format(insuranceuse, sizeof(insuranceuse), "{ffffff}Sigorta: \t\t{bab9ba}2 seviye \t{ecc317}$%i\n{ecc317}+ {ffffff}Araçlar her zaman tamir edilmiþ þekilde býrakýlýr\n{ecc317}+ {ffffff}Araç hasarlý doðmayacaktýr.\n\n", insuranceveh);
	else if (GetPVarInt(playerid, "BuyingVehicleInsurance") == 3)	format(insuranceuse, sizeof(insuranceuse), "{ffffff}Sigorta: \t\t{bab9ba}3 seviye \t{ecc317}$%i\n{ecc317}+ {ffffff}Araçlar her zaman tamir edilmiþ þekilde býrakýlýr\n{ecc317}+ {ffffff}Araç hasarlý doðmayacaktýr.\n{ecc317}+ {ffffff}Modifiyeniz ve radyonuz sigorta tarafýndan karþýlanacaktýr.\n\n", insuranceveh);


	if (GetPVarInt(playerid, "BuyingVehicleRadio") == 1)	format(xmradiouse, sizeof(xmradiouse), "{ffffff}XM Radyo: \t{ecc317}$%i\n{ecc317}+ {ffffff}Radyo ve ses sisteminin diðer bileþenlerinin kurulumu..\n\n", xmradioveh);

	if (GetPVarInt(playerid, "BuyingVehicleGps") == 1) 	format(gpsuse, sizeof(gpsuse), "{ffffff}GPS: \t\t{ecc317}$%i\n{ecc317}+ {ffffff}Araca GPS kurulseviye\n\n", gpsveh);

	new mes[56];

	format(mes, sizeof(mes), "{ffffff}%s - {35B835}$%i", VehicleNames[GetPVarInt(playerid, "BuyingVehicleModel")-400], GetVehiclePrice(GetPVarInt(playerid, "BuyingVehicleModel"))+registerveh+alarmveh+lockveh+immobveh+insuranceveh+xmradioveh+gpsveh);
	if (!response)
	{
		new vehFuel[32],
			vehDrive[32],
			modelid = GetPVarInt(playerid, "BuyingVehicleModel"),
			Float:vehMass = GetVehicleModelInfoAsFloat(modelid, "fMass");

        if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nDriveType") == 'F')
	    	vehDrive = "Ön çekiþli";
	    else if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nDriveType") == 'R')
	    	vehDrive = "Arka çekiþli";
	    else if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nDriveType") == '4')
	    	vehDrive = "4x4";

	    if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nEngineType") == 'P')
	    	vehFuel = "Benzin";
	    else if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nEngineType") == 'D')
	    	vehFuel = "Dizel";
	    else if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nEngineType") == 'E')
	   		vehFuel = "Elektrik";

	    static const str_size[] = "{ecc317}Ücret: \t\t			{ffffff}$%s\n\
                                    {ecc317}Maksimum hýz: \t		{ffffff}%.1f km/h\n\
                                    {ecc317}Saðlamlýk: \t		{ffffff}%.1f\n\
                                    {ecc317}Aðýrlýk: \t\t		{ffffff}%.1f kf\n\n\
                                    {ecc317}Sürüþ dinamiði: \t		{ffffff}%s\n\
                                    {ecc317}Yakýt tipi: \t\t			{ffffff}%s\n\
                                    {ecc317}Yakýt tüketimi: \t		{ffffff}%.1f l/100 km\n\
                                    {ecc317}Bagaj kapasitesi: \t	{ffffff}%.1f l\n\n";

		new string[sizeof(str_size) + 1228];

		format(string, sizeof(string), str_size,
            FormatNumber(GetVehiclePrice(modelid)),
            GetVehicleMaxSpeed[modelid-400],
            GetVehicleMaxHealth(modelid),
            vehMass,
            vehDrive,
            vehFuel,
            GetVehicleFuelUsage(modelid),
            GetVehicleFuelCapacity(modelid),
			VehicleColoursTableRGBA[GetPVarInt(playerid, #veh_color1)] >>> 8, GetPVarInt(playerid, #veh_color1),
			VehicleColoursTableRGBA[GetPVarInt(playerid, #veh_color2)] >>> 8, GetPVarInt(playerid, #veh_color2)
		);

		format(string, sizeof(string), "%s{ecc317}Renk 1{ffffff} - [{%06x}#%i{ffffff}]\n{ecc317}Renk 2{ffffff} - [{%06x}#%i{ffffff}]\n\n", string, VehicleColoursTableRGBA[GetPVarInt(playerid, #veh_color1)] >>> 8, GetPVarInt(playerid, #veh_color1), VehicleColoursTableRGBA[GetPVarInt(playerid, #veh_color2)] >>> 8, GetPVarInt(playerid, #veh_color2));
		format(string, sizeof(string), "%s%s%s%s%s%s%s%s\n{ffffff}'{ecc317}Ödeme Yap{ffffff}' butonuna týklayarak aracý satýn alabilirsin.", string, lockuse, alarmuse, immobuse, insuranceuse, registeruse, xmradiouse, gpsuse);

		Dialog_Show(playerid, BuyingVehicleList, DIALOG_STYLE_MSGBOX, mes, string, "Düzenle", "Ödeme Yap");
	    return 1;
	}

	new string[301];
	switch(listitem)
	{
		case 0:
		{
				if (GetPVarInt(playerid, "BuyingVehicleRegister") == 0)		format(string, sizeof(string), "{eaf133}>> {ffffff}Ekli Deðil\nDMV kayýt - $%i", price_reg[1]);
				else if (GetPVarInt(playerid, "BuyingVehicleRegister") == 1)	format(string, sizeof(string), "{ffffff}Ekli Deðil\n{eaf133}>> {ffffff}DMV kayýt - $%i", price_reg[1]);

				Dialog_Show(playerid, BuyVehDetReg, DIALOG_STYLE_LIST, mes, string, "Seç", "<<");
		}
		case 1:
		{
				if (GetPVarInt(playerid, "BuyingVehicleAlarm") == 0)			format(string, sizeof(string), "{ecc317}» {ffffff}Ekli Deðil\n1 seviye alarm- $%i\n2 seviye alarm- $%i\n3 seviye alarm- $%i\n4 seviye alarm- $%i", price_alarm[1], price_alarm[2], price_alarm[3], price_alarm[4]);
				else if (GetPVarInt(playerid, "BuyingVehicleAlarm") == 1)	format(string, sizeof(string), "Ekli Deðil\n{ecc317}» {ffffff}1 seviye alarm- $%i\n2 seviye alarm- $%i\n3 seviye alarm- $%i\n4 seviye alarm- $%i", price_alarm[1], price_alarm[2], price_alarm[3], price_alarm[4]);
				else if (GetPVarInt(playerid, "BuyingVehicleAlarm") == 2)	format(string, sizeof(string), "Ekli Deðil\n1 seviye alarm- $%i\n{ecc317}» {ffffff}2 seviye alarm- $%i\n3 seviye alarm- $%i\n4 seviye alarm- $%i", price_alarm[1], price_alarm[2], price_alarm[3], price_alarm[4]);
				else if (GetPVarInt(playerid, "BuyingVehicleAlarm") == 3)	format(string, sizeof(string), "Ekli Deðil\n1 seviye alarm- $%i\n2 seviye alarm- $%i\n{ecc317}» {ffffff}3 seviye alarm- $%i\n4 seviye alarm- $%i", price_alarm[1], price_alarm[2], price_alarm[3], price_alarm[4]);
				else if (GetPVarInt(playerid, "BuyingVehicleAlarm") == 4)	format(string, sizeof(string), "Ekli Deðil\n1 seviye alarm- $%i\n2 seviye alarm- $%i\n3 seviye alarm- $%i\n{ecc317}» {ffffff}4 seviye alarm- $%i", price_alarm[1], price_alarm[2], price_alarm[3], price_alarm[4]);

				Dialog_Show(playerid, BuyVehDetAlarm, DIALOG_STYLE_LIST, mes, string, "Seç", "<<");
		}
		case 2:
		{
				if (GetPVarInt(playerid, "BuyingVehicleLock") == 0)		format(string, sizeof(string), "{ecc317}» {ffffff}Ekli Deðil\n1 seviye kilit - $%i\n2 seviye kilit - $%i\n3 seviye kilit - $%i\n4 seviye kilit - $%i\n5 seviye kilit - $%i", price_lock[1], price_lock[2], price_lock[3], price_lock[4], price_lock[5]);
				else if (GetPVarInt(playerid, "BuyingVehicleLock") == 1)	format(string, sizeof(string), "Ekli Deðil\n{ecc317}» {ffffff}1 seviye kilit - $%i\n2 seviye kilit - $%i\n3 seviye kilit - $%i\n4 seviye kilit - $%i\n5 seviye kilit - $%i", price_lock[1], price_lock[2], price_lock[3], price_lock[4], price_lock[5]);
				else if (GetPVarInt(playerid, "BuyingVehicleLock") == 2)	format(string, sizeof(string), "Ekli Deðil\n1 seviye kilit - $%i\n{ecc317}» {ffffff}2 seviye kilit - $%i\n3 seviye kilit - $%i\n4 seviye kilit - $%i\n5 seviye kilit - $%i", price_lock[1], price_lock[2], price_lock[3], price_lock[4], price_lock[5]);
				else if (GetPVarInt(playerid, "BuyingVehicleLock") == 3)	format(string, sizeof(string), "Ekli Deðil\n1 seviye kilit - $%i\n2 seviye kilit - $%i\n{ecc317}» {ffffff}3 seviye kilit - $%i\n4 seviye kilit - $%i\n5 seviye kilit - $%i", price_lock[1], price_lock[2], price_lock[3], price_lock[4], price_lock[5]);
				else if (GetPVarInt(playerid, "BuyingVehicleLock") == 4)	format(string, sizeof(string), "Ekli Deðil\n1 seviye kilit - $%i\n2 seviye kilit - $%i\n3 seviye kilit - $%i\n{ecc317}» {ffffff}4 seviye kilit - $%i\n5 seviye kilit - $%i", price_lock[1], price_lock[2], price_lock[3], price_lock[4], price_lock[5]);
				else if (GetPVarInt(playerid, "BuyingVehicleLock") == 5)	format(string, sizeof(string), "Ekli Deðil\n1 seviye kilit - $%i\n2 seviye kilit - $%i\n3 seviye kilit - $%i\n4 seviye kilit - $%i\n{ecc317}» {ffffff}5 seviye kilit - $%i", price_lock[1], price_lock[2], price_lock[3], price_lock[4], price_lock[5]);

				Dialog_Show(playerid, BuyVehDetLock, DIALOG_STYLE_LIST, mes, string, "Seç", "<<");
		}
		case 3:
		{
				if (GetPVarInt(playerid, "BuyingVehicleImmob") == 0)			format(string, sizeof(string), "{ecc317}» {ffffff}Ekli Deðil\n1 seviye immobilizer - $%i\n2 seviye immobilizer - $%i\n3 seviye immobilizer - $%i\n4 seviye immobilizer - $%i", price_immob[1], price_immob[2], price_immob[3], price_immob[4]);
				else if (GetPVarInt(playerid, "BuyingVehicleImmob") == 1)	format(string, sizeof(string), "Ekli Deðil\n{ecc317}» {ffffff}1 seviye immobilizer - $%i\n2 seviye immobilizer - $%i\n3 seviye immobilizer - $%i\n4 seviye immobilizer - $%i", price_immob[1], price_immob[2], price_immob[3], price_immob[4]);
				else if (GetPVarInt(playerid, "BuyingVehicleImmob") == 2)	format(string, sizeof(string), "Ekli Deðil\n1 seviye immobilizer - $%i\n{ecc317}» {ffffff}2 seviye immobilizer - $%i\n3 seviye immobilizer - $%i\n4 seviye immobilizer - $%i", price_immob[1], price_immob[2], price_immob[3], price_immob[4]);
				else if (GetPVarInt(playerid, "BuyingVehicleImmob") == 3)	format(string, sizeof(string), "Ekli Deðil\n1 seviye immobilizer - $%i\n2 seviye immobilizer - $%i\n{ecc317}» {ffffff}3 seviye immobilizer - $%i\n4 seviye immobilizer - $%i", price_immob[1], price_immob[2], price_immob[3], price_immob[4]);
				else if (GetPVarInt(playerid, "BuyingVehicleImmob") == 4)	format(string, sizeof(string), "Ekli Deðil\n1 seviye immobilizer - $%i\n2 seviye immobilizer - $%i\n3 seviye immobilizer - $%i\n{ecc317}» {ffffff}4 seviye immobilizer - $%i");

				Dialog_Show(playerid, BuyVehDetImmob, DIALOG_STYLE_LIST, mes, string, "Seç", "<<");
		}
		case 4:
		{
			    new amount = GetInsurancePrice(GetPVarInt(playerid, "BuyingVehicleModel"));

				if (GetPVarInt(playerid, "BuyingVehicleInsurance") == 0)			format(string, sizeof(string), "{ecc317}» {ffffff}Ekli Deðil\n1 seviye sigorta - $%i\n2 seviye sigorta - $%i\n3 seviye sigorta - $%i", amount * 1, amount * 2, amount * 3);
				else if (GetPVarInt(playerid, "BuyingVehicleInsurance") == 1)	format(string, sizeof(string), "Ekli Deðil\n{ecc317}» {ffffff}1 seviye sigorta - $%i\n2 seviye sigorta - $%i\n3 seviye sigorta - $%i", amount * 1, amount * 2, amount * 3);
				else if (GetPVarInt(playerid, "BuyingVehicleInsurance") == 2)	format(string, sizeof(string), "Ekli Deðil\n1 seviye sigorta - $%i\n{ecc317}» {ffffff}2 seviye sigorta - $%i\n3 seviye sigorta - $%i", amount * 1, amount * 2, amount * 3);
				else if (GetPVarInt(playerid, "BuyingVehicleInsurance") == 3)	format(string, sizeof(string), "Ekli Deðil\n1 seviye sigorta - $%i\n2 seviye sigorta - $%i\n{ecc317}» {ffffff}3 seviye sigorta - $%i", amount * 1, amount * 2, amount * 3);

				Dialog_Show(playerid, BuyVehDetInsur, DIALOG_STYLE_LIST, mes, string, "Seç", "<<");
		}
		case 5:
		{
				if (GetPVarInt(playerid, "BuyingVehicleRadio") == 0)			format(string, sizeof(string), "{ecc317}» {ffffff}Ekli Deðil\nXM Radyo - $%i", price_radio[1]);
				else if (GetPVarInt(playerid, "BuyingVehicleRadio") == 1)	format(string, sizeof(string), "Ekli Deðil\n{ecc317}» {ffffff}XM Radyo - $%i", price_radio[1]);

				Dialog_Show(playerid, BuyVehDetRadio, DIALOG_STYLE_LIST, mes, string, "Seç", "<<");
		}
		case 6:
		{
				if (GetPVarInt(playerid, "BuyingVehicleGps") == 0)			format(string, sizeof(string), "{ecc317}» {ffffff}Ekli Deðil\nGPS - $%i", price_gps[1]);
				else if (GetPVarInt(playerid, "BuyingVehicleGps") == 1)		format(string, sizeof(string), "Ekli Deðil\n{ecc317}» {ffffff}GPS - $%i", price_gps[1]);

				Dialog_Show(playerid, BuyVehDetGPS, DIALOG_STYLE_LIST, mes, string, "Seç", "<<");
		}
		case 7:
		{
			SendSyntaxMessage(playerid, "Lütfen {ffc46a}ilk rengi{FFFFFF} seçin.");

			new colors[256];

			for(new i; i != 256; i++)
			{
				colors[i] = i;
			}
			SetPVarInt(playerid, #veh_color_type, 1);
			ShowColorSelectionMenu(playerid, MODEL_BUING_COLOR, colors, sizeof(colors));
		}
	}
	return 1;
}

Dialog:BuyVehDetGPS(playerid, response, listitem, inputtext[])
{
	if (response) SetPVarInt(playerid, "BuyingVehicleGps", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:BuyVehDetRadio(playerid, response, listitem, inputtext[])
{
	if (response) SetPVarInt(playerid, "BuyingVehicleRadio", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:BuyVehDetInsur(playerid, response, listitem, inputtext[])
{
	if (response) SetPVarInt(playerid, "BuyingVehicleInsurance", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:BuyVehDetImmob(playerid, response, listitem, inputtext[])
{
	if (response) SetPVarInt(playerid, "BuyingVehicleImmob", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:BuyVehDetLock(playerid, response, listitem, inputtext[])
{
	if (response) SetPVarInt(playerid, "BuyingVehicleLock", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:BuyVehDetAlarm(playerid, response, listitem, inputtext[])
{
	if (response) SetPVarInt(playerid, "BuyingVehicleAlarm", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:BuyVehDetReg(playerid, response, listitem, inputtext[])
{
	if (response) SetPVarInt(playerid, "BuyingVehicleRegister", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:VehFastAccess(playerid, response, listitem, inputtext[])
{
	if (!response) 										return 1;
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Bir araç kullanýyor olmalýsýn.");

	switch(listitem)
	{
		case 0: pc_cmd_motor(playerid, "");
		case 1: pc_cmd_arac(playerid, "kilit");
		case 2: pc_cmd_farlar(playerid, "");
		case 3: pc_cmd_bagaj(playerid, "");
		case 4: pc_cmd_kaput(playerid, "");
		case 5: pc_cmd_camlar(playerid, "1");
		case 6: pc_cmd_radyoayarla(playerid, "");
		case 7:	pc_cmd_ahe(playerid, "");
		case 8: pc_cmd_aracmenu(playerid, "");
	}

	return 1;
}

Dialog:VehMenu(playerid, response, listitem, inputtext[])
{
	if (!response) 										return 1;
    if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))	return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");

	new vehicle = PlayerInfo[playerid][pCarKey];
	if (!vehicle || VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID]) return 1;

	switch(listitem)
	{
	    case 0: pc_cmd_arac(playerid, "bilgi");
		case 1: pc_cmd_arac(playerid, "cezalar");
	    case 2: pc_cmd_arac(playerid, "park");
		case 3:	pc_cmd_arac(playerid, "bul");
		case 4: pc_cmd_alarmkapat(playerid, "");
		case 5: pc_cmd_arac(playerid, "sistemesat");
		case 6: Dialog_Show(playerid, SellVehTo, DIALOG_STYLE_INPUT, "Araç satýþ", "{ffffff}Aþaðýda belirtilen formata uygun þekilde yazýnýz: {C3C3C3}[ID / isim] [satýþ fiyatý]\nÖrnek: 1 35000", "Sat", "Ýptal");
	}
	return 1;
}

Dialog:SellVehTo(playerid, response, listitem, inputtext[])
{
	if (!response)										return pc_cmd_aracmenu(playerid, "");
    if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))	return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");

	new vehicle = GetPlayerVehicleID(playerid);

	if (!vehicle)														return 1;
	if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Aracýn sahibi siz deðilsiniz!");

    new userid, price;

	if (sscanf(inputtext, "ui", userid, price))
	{
	    Dialog_Show(playerid, SellVehTo, DIALOG_STYLE_INPUT, "Araç satýþ", "{ffffff}Aþaðýda belirtilen formata uygun þekilde yazýnýz: {C3C3C3}[ID / isim] [satýþ fiyatý]\nÖrnek: 1 35000", "Sat", "Ýptal");
	    return SendErrorMessage(playerid, "Geçersiz format.");
	}

	if (!IsPlayerLogged(userid))
	{
	    Dialog_Show(playerid, SellVehTo, DIALOG_STYLE_INPUT, "Araç satýþ", "{ffffff}Aþaðýda belirtilen formata uygun þekilde yazýnýz: {C3C3C3}[ID / isim] [satýþ fiyatý]\nÖrnek: 1 35000", "Sat", "Ýptal");
		return SendNotConnected(playerid);
	}

	if (!PlayerNearPlayer(7.0, playerid, userid))
	{
	    Dialog_Show(playerid, SellVehTo, DIALOG_STYLE_INPUT, "Araç satýþ", "{ffffff}Aþaðýda belirtilen formata uygun þekilde yazýnýz: {C3C3C3}[ID / isim] [satýþ fiyatý]\nÖrnek: 1 35000", "Sat", "Ýptal");
		return SendNotNearPlayer(playerid);
	}

	if (price < 0 || price > 100000000)
	{
	    Dialog_Show(playerid, SellVehTo, DIALOG_STYLE_INPUT, "Araç satýþ", "{ffffff}Aþaðýda belirtilen formata uygun þekilde yazýnýz: {C3C3C3}[ID / isim] [satýþ fiyatý]\nÖrnek: 1 35000", "Sat", "Ýptal");
	    return SendErrorMessage(playerid, "Satýþ fiyatýný bu kadar yüksek yazamazsýnýz.");
	}

	new str[32];
	format(str, sizeof(str), "sat %i %i", userid, price);
	pc_cmd_arac(playerid, str);
	return 1;
}

Dialog:SelectClass(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	switch(listitem)
	{
		case 0: ShowBclass(playerid);
		case 1: ShowLowriders(playerid);
		case 2: ShowAclass(playerid);
		case 3: ShowSport(playerid);
		case 4: ShowPickups(playerid);
		case 5: ShowOffRoad(playerid);
		case 6: ShowIndustrial(playerid);
		case 7: ShowMotoBike(playerid);
		case 8: ShowOther(playerid);
		case 9: ShowDonate(playerid);
	}
	return 1;
}

Dialog:Autoservice(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (!IsDriver(playerid))	return SendNotInVehicle(playerid);

	new Float: health;
	AntiCheatGetVehicleHealth(GetPlayerVehicleID(playerid), health);

	new panels, doors, lights, tires;
	GetVehicleStatus(playerid, panels, doors, lights, tires);

	new
		vehicle = GetPlayerVehicleID(playerid),
		model = GetVehicleModel(vehicle),
		hp_cost = 1 + floatround((100 - ((health/GetVehicleMaxHealth(model))*100)) * (GetVehiclePrice(model)/1000), floatround_ceil)
	;
	if (hp_cost < 0) hp_cost = 0;
	new
		cost = 1 + floatround(GetVehiclePrice(model) / 100, floatround_ceil),
		common_cost = hp_cost +  floatround((cost * 0.5 * panels/100) + (cost * 0.25 * doors/100) + (cost * 0.1 * lights/100) + (cost * 0.15 * tires/100), floatround_ceil)
	;


		if(strfind(inputtext, "Komple Tamir", true) != -1)
		{
			if (common_cost <= 0)	return pc_cmd_giris(playerid, "");
			static const dlgstr[] = "{FFFFFF}Aracýnýzý {1b8922}$%i{FFFFFF} karþýlýðýnda tamamen onarmak istediðinizden emin misiniz?";
			new mes[sizeof(dlgstr)+6];

			format(mes, sizeof(mes), dlgstr, cost);

			ConfirmDialog(playerid, "Doðrulama", mes, "RepairAll");
		}
		else if(strfind(inputtext, "Parça Tadilatý", true) != -1)
		{
			new panel_cost = floatround((cost * 0.5 * panels/100), floatround_ceil),
				door_cost = floatround((cost * 0.25 * doors/100), floatround_ceil),
				light_cost = floatround((cost * 0.1 * lights/100), floatround_ceil),
				tire_cost = floatround((cost * 0.15 * tires/100), floatround_ceil);

			if (panel_cost+door_cost+light_cost+tire_cost<=0)	return pc_cmd_giris(playerid, "");

			static const dlgstr[] = "Tamir seçenekleri aþaðýda belirtilmiþtir:\n\
									{C5C5C5}[ - ]{FFFFFF} Gövde bölgesi tamiri: {1b8922}$%i {c5c5c5}(Hasar: {FF6347}%i%%{c5c5c5})\n\
									{C5C5C5}[ - ]{FFFFFF} Kapý tamiri: {1b8922}$%i {c5c5c5}(Hasar: {FF6347}%i%%{c5c5c5})\n\
									{C5C5C5}[ - ]{FFFFFF} Far tamiri: {1b8922}$%i {c5c5c5}(Hasar: {FF6347}%i%%{c5c5c5})\n\
									{C5C5C5}[ - ]{FFFFFF} Lastik tamiri: {1b8922}$%i {c5c5c5}(Hasar: {FF6347}%i%%{c5c5c5})\n\
									{C5C5C5} >> TAMÝRAT >>";
			new mes[526+8*4];

			format(mes, sizeof(mes), dlgstr,
				panel_cost, panels,
				door_cost, doors,
				light_cost, lights,
				tire_cost, tires
			);

			for(new i; i < 4; i++) pTemp[playerid][pListed][i] = 0;
			Dialog_Show(playerid, SELECT_Autoservice, DIALOG_STYLE_TABLIST_HEADERS, "Araç Tamiri", mes, "Seç", "Ýptal");
		}
		else if(strfind(inputtext, "Araç Mekanik & Elektrik", true) != -1)
		{
			if (hp_cost == 0)	return pc_cmd_giris(playerid, "");
			static const dlgstr[] = "{FFFFFF}Aracýn genel durumunu {1b8922}$%i{FFFFFF} karþýlýðýnda tamir etmek istediðinizden emin misiniz?";
			new mes[sizeof(dlgstr)+6];

			format(mes, sizeof(mes), dlgstr, hp_cost);

			ConfirmDialog(playerid, "Doðrulama", mes, "RepairHP");
		}
		else if(strfind(inputtext, "Akü Tamiri", true) != -1)
		{
			if (VehicleInfo[vehicle][carBattery] >= 20.0)	{
				pc_cmd_giris(playerid, "");
				return SendErrorMessage(playerid, "Bu aracýn aküsünün onarýma ihtiyacý yoktur.( > 20%%).");
			}
			static const dlgstr[] = "{FFFFFF}Araç aküsünü {1b8922}$%i{FFFFFF} karþýlýðýnda deðiþtirmek istediðinizden emin misiniz?";
			new mes[sizeof(dlgstr)+6];

			format(mes, sizeof(mes), dlgstr, floatround(GetVehiclePrice(model) / 100 * 5, floatround_ceil));

			ConfirmDialog(playerid, "Doðrulama", mes, "ChangeBattery");
		}
		else if(strfind(inputtext, "Motor Tamiri", true) != -1)
		{
			if (VehicleInfo[vehicle][carEngine] >= 20.0)	{
				pc_cmd_giris(playerid, "");
				return SendErrorMessage(playerid, "Bu aracýn motorunun tamire ihtiyacý yoktur. ( > 20%%).");
			}
			static const dlgstr[] = "{FFFFFF}{1b8922}$%i{FFFFFF} için araç motorunu  tamir etmek istediðinizden emin misiniz?";
			new mes[sizeof(dlgstr)+6];

			format(mes, sizeof(mes), dlgstr, floatround(GetVehiclePrice(model) / 100 * 10, floatround_ceil));

			ConfirmDialog(playerid, "Doðrulama", mes, "ChangeEngine");
		}

	return 1;
}


Dialog:SELECT_Autoservice(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_giris(playerid, "");

	new panels, doors, lights, tires;
	GetVehicleStatus(playerid, panels, doors, lights, tires);

	new vehicle = GetPlayerVehicleID(playerid),
		model = GetVehicleModel(vehicle),
		cost = floatround(GetVehiclePrice(model) / 100, floatround_ceil),
		panel_cost = floatround((cost * 0.5 * panels/100), floatround_ceil),
		door_cost = floatround((cost * 0.25 * doors/100), floatround_ceil),
		light_cost = floatround((cost * 0.1 * lights/100), floatround_ceil),
		tire_cost = floatround((cost * 0.15 * tires/100), floatround_ceil);

	if (listitem == 4) {
		new count;
		for(new i; i < 4; i++) if (pTemp[playerid][pListed][i]) count++;

		if (count) {
			count = 0;

			if (pTemp[playerid][pListed][0]) count += panel_cost;
			if (pTemp[playerid][pListed][1]) count += door_cost;
			if (pTemp[playerid][pListed][2]) count += light_cost;
			if (pTemp[playerid][pListed][3]) count += tire_cost;

			if (count) {
				static const dlgstr[] = "{FFFFFF}Aracýnýzý {1b8922}$%i{FFFFFF} karþýlýðýnda tamir ettirmek istediðinizden emin misiniz?";
				new mes[sizeof(dlgstr)+6];

				SetPVarInt(playerid, #auto_cost, count);

				format(mes, sizeof(mes), dlgstr, count);
				return ConfirmDialog(playerid, "Doðrulama", mes, "RepairList");
			}
		}
	}

	if (!pTemp[playerid][pListed][listitem]) 	pTemp[playerid][pListed][listitem] = 1;
	else 										pTemp[playerid][pListed][listitem] = 0;

	if (listitem == 0 && !panel_cost)		pTemp[playerid][pListed][listitem] = 0;
	else if (listitem == 1 && !door_cost)	pTemp[playerid][pListed][listitem] = 0;
	else if (listitem == 2 && !light_cost)	pTemp[playerid][pListed][listitem] = 0;
	else if (listitem == 3 && !tire_cost)	pTemp[playerid][pListed][listitem] = 0;

	static const select[] = "{FFFF00}[ X ]{FFFFFF}";
	static const unselect[] = "{C5C5C5}[ - ]{FFFFFF}";

	new mes[526 + 8*4] = "Tamir seçeneði:\n";

	if (pTemp[playerid][pListed][0]) format(mes, sizeof(mes), "%s%s Gövde bölgesi tamiri: {1b8922}$%i {c5c5c5}(Hasar: {FF6347}%i%%{c5c5c5})\n", mes, select, panel_cost, panels);
	else							format(mes, sizeof(mes), "%s%s Gövde bölgesi tamiri: {1b8922}$%i {c5c5c5}(Hasar: {FF6347}%i%%{c5c5c5})\n", mes, unselect, panel_cost, panels);

	if (pTemp[playerid][pListed][1]) format(mes, sizeof(mes), "%s%s Kapý tamiri: {1b8922}$%i {c5c5c5}(Hasar: {FF6347}%i%%{c5c5c5})\n", mes, select, door_cost, doors);
	else							format(mes, sizeof(mes), "%s%s Kapý tamiri: {1b8922}$%i {c5c5c5}(Hasar: {FF6347}%i%%{c5c5c5})\n", mes, unselect, door_cost, doors);

	if (pTemp[playerid][pListed][2]) format(mes, sizeof(mes), "%s%s Far tamiri: {1b8922}$%i {c5c5c5}(Hasar: {FF6347}%i%%{c5c5c5})\n", mes, select, light_cost, lights);
	else							format(mes, sizeof(mes), "%s%s Far tamiri: {1b8922}$%i {c5c5c5}(Hasar: {FF6347}%i%%{c5c5c5})\n", mes, unselect, light_cost, lights);

	if (pTemp[playerid][pListed][3]) format(mes, sizeof(mes), "%s%s Lastik tamiri: {1b8922}$%i {c5c5c5}(Hasar: {FF6347}%i%%{c5c5c5})\n", mes, select, tire_cost, tires);
	else							format(mes, sizeof(mes), "%s%s Lastik tamiri: {1b8922}$%i {c5c5c5}(Hasar: {FF6347}%i%%{c5c5c5})\n", mes, unselect, tire_cost, tires);

	format(mes, sizeof(mes), "%s{C5C5C5} >> TAMÝRAT >>", mes);
	Dialog_Show(playerid, SELECT_Autoservice, DIALOG_STYLE_TABLIST_HEADERS, "Araç Tamiri", mes, "Seç", "Ýptal");
	return 1;
}


Dialog:ModDialog(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if (ModShop_Nearest(playerid) == -1)										return 1;

	if (listitem == 0)
	{
	    if (IsABicycle(vehicle) || IsABiker(vehicle) || IsATaxi(vehicle))	return SendErrorMessage(playerid, "Bu komut bisikletler, motosikletler ve taksiler için mevcut deðildir.");

	    if (IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), 1008) != 1 && IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), 1009) != 1 && IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), 1010) != 1)
		{
		    ShowModMenu(playerid);
			return SendErrorMessage(playerid, "Bu araca nitro yüklemezsiniz.");
		}

        Dialog_Show(playerid, NitroDialog, DIALOG_STYLE_TABLIST, "{33AA33}Araç Modifiyesi", "Nitro x2\t$4.500\nNitro x5\t$9.000\nNitro x10\t$15000", "Seç", "Geri Dön");
		return 1;
	}

	else if (listitem == 1)
	{
	    if (!IsVehiclePaintJob(GetVehicleModel(vehicle)))	return SendErrorMessage(playerid, "Bu araç için paintjob yapýlamýyor.");

		new mes[128];

		for(new i; i != IsVehiclePaintJob(GetVehicleModel(vehicle)); i++)
		{
			format(mes, sizeof(mes), "%s\nPaintjob %i", mes, i+1);
	    }

	    Dialog_Show(playerid, PaintjobDialog, DIALOG_STYLE_LIST, "{33AA33}Fiyat: $3.000", mes, "Seç", "Geri Dön");
	    return 1;
	}

	else if (listitem == 2)
	{
	    new colors[256];

     	for(new i; i != 256; i++)
		{
      		colors[i] = i;
		}

		ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors, sizeof(colors));
	    SetPVarInt(playerid, #veh_color1, -1);
	    SetPVarInt(playerid, #veh_color_type, 2);
	    return 1;
	}

	else if (listitem == 3)
	{
	    if (IsABicycle(vehicle) || IsABiker(vehicle) || IsATaxi(vehicle))	return SendErrorMessage(playerid, "Bu komut bisikletler, motosikletler ve taksiler için mevcut deðildir.");

	    if (VehicleInfo[vehicle][carComponent][CARMODTYPE_HYDRAULICS])
		{
		    ShowModMenu(playerid);
			return SendErrorMessage(playerid, "Hidroliði zaten kurdunuz.");
		}
	    Dialog_Show(playerid, HydralicConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Araç Modifiyesi", "{FFFFFF}8.000$'a hidroliði kurmak istiyor musunuz?", "Evet", "Geri");
		return 1;
	}

	else if (listitem == 4)
	{
	    if (IsABicycle(vehicle) || IsABiker(vehicle) || IsATaxi(vehicle))	return SendErrorMessage(playerid, "Bu komut bisikletler, motosikletler ve taksiler için mevcut deðildir.");

		if (VehicleInfo[vehicle][carRadio])
		{
		    ShowModMenu(playerid);
			return SendErrorMessage(playerid, "Aracýnýzda zaten bir radyo var.");
		}

		Dialog_Show(playerid, RadioConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Araç Modifiyesi", "{FFFFFF}400$'a radyoyu kurmak istiyor musunuz?", "Evet", "Geri");
	    return 1;
	}
	else if (listitem == 5)
	{
		if (VehicleInfo[vehicle][carGps])
		{
		    ShowModMenu(playerid);
			return SendErrorMessage(playerid, "Zaten GPS'niz mevcut.");
		}

		Dialog_Show(playerid, GPSConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Araç Modifiyesi", "{FFFFFF}1.500$'a GPS kurmak istiyor musunuz?", "Evet", "Geri");
	    return 1;
	}
	else if (listitem == 6)
	{
		new cost = GetVehiclePrice(GetVehicleModel(vehicle)) / 100 * 10;

		if (cost < 1) 					return 1;
		if (GetCash(playerid) < cost)	return SendErrorMessage(playerid, "Motoru deðiþtirmenin maliyeti $%i'dir.", cost);

		StartVehicleUpgrade(playerid, vehicle, 9, cost);
		return 1;
	}
	else if (listitem == 7)
	{
		new cost = GetVehiclePrice(GetVehicleModel(vehicle)) / 100 * 5;

		if (cost < 1)					return 1;
		if (GetCash(playerid) < cost)	return SendErrorMessage(playerid, "Akü deðiþtirmenin maliyeti $%i'dir.", cost);

		StartVehicleUpgrade(playerid, vehicle, 11, cost);
		return 1;
	}
	else if (listitem == 8)
	{
		Dialog_Show(playerid, ChangeLock, DIALOG_STYLE_MSGBOX, "{33AA33}Kilit Deðiþtirme", "{FFFFFF}Kilidi 300$ karþýlýðýnda deðiþtirmek istediðinize emin misiniz?\nVerdiðiniz tüm yedek anahtarlar geçersiz olacaktýr.", "Evet", "Geri");
	    return 1;
	}
	else if (listitem == 9)
	{
	    static const str_size[] = "Kilit\t[%i seviye]\nAlarm\t[%i seviye]\nImmobilizer\t[%i seviye]\nSigorta\t[%i seviye]\n";
		new mes[sizeof(str_size) - 18 + 1 + 48];

		format(mes, sizeof(mes), str_size, VehicleInfo[vehicle][carLock], VehicleInfo[vehicle][carAlarm], VehicleInfo[vehicle][carImmob], VehicleInfo[vehicle][carInsurance]);
  		Dialog_Show(playerid, VehUpgrade, DIALOG_STYLE_TABLIST, "{FFFFFF}Araç Geliþtirme ", mes, "Seç", "Geri Dön");
		return 1;
	}
	else if (listitem == 10)
	{
		 if (IsABicycle(vehicle) || IsATaxi(vehicle)) return SendErrorMessage(playerid, "Bu komut bisikletler, motosikletler ve taksiler için mevcut deðildir. ");
		 new mes[512] = "Tekerlekler\nSpoiler\n{ab2a20}Pasif\nÇatý\nYan Etekler\nEgzoz\nÖn Tampon\nArka Tampon";
		 Dialog_Show(playerid, ShowComponentMenu, DIALOG_STYLE_LIST, "{33AA33}Araç Modifiyesi", mes, "Seç", "Geri Dön");
	}
	else if (listitem == 11)
	{
	    if (IsABicycle(vehicle) || IsABiker(vehicle) || IsATaxi(vehicle)) return SendErrorMessage(playerid, "Bu komut bisikletler, motosikletler ve taksiler için mevcut deðildir. ");

		new mes[512] = "{FFFFFF}Jantlarý {33AA33}Kaldýr\n{FFFFFF}Rüzgarlýk {33AA33}Kaldýr\n{FFFFFF}Air {33AA33}Kaldýr\n{FFFFFF}Çatý {33AA33}Kaldir\n{FFFFFF}Yan Etek {33AA33}Kaldýr\n{FFFFFF}Egzoz {33AA33}Kaldýr\n{FFFFFF}Ön Tampon {33AA33}Kaldýr\n{FFFFFF}Arka Tampon {33AA33}Kaldir\n{FFFFFF}Nitro {33AA33}Kaldýr\n{FFFFFF}Paintwork {33AA33}Kaldir\n{FFFFFF}Hidrolik {33AA33}Kaldýr\n{FFFFFF}Radyo {33AA33}Kaldýr";
	    Dialog_Show(playerid, DeleteTuning, DIALOG_STYLE_LIST, "{33AA33}Modifiyeyi Sil", mes, "Seç", "Geri Dön");
	    return 1;
	}
	return 1;
}

Dialog:ModDialogBike(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if (ModShop_Nearest(playerid) == -1)											return 1;

	if (listitem == 0)
	{
	    new colors[256];

     	for(new i; i != 256; i++)
		{
      		colors[i] = i;
		}

		ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors, sizeof(colors));
	    SetPVarInt(playerid, #veh_color1, -1);
	    SetPVarInt(playerid, #veh_color_type, 1);
	    return 1;
	}
	return 1;
}

Dialog:BuyVehArmour(playerid, response, listitem, inputtext[])
{
	if (!response)	return ShowModMenu(playerid);
/*
    new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if (ModShop_Nearest(playerid) == -1)											return 1;

	new amount = strval(inputtext);

    if (amount < 10 || amount > 250)
	{
	    Dialog_Show(playerid, BuyVehArmour, DIALOG_STYLE_INPUT, "{FFFFFF}Araç Zýrhý", "{ffffff}Satýn almak istediðiniz zýrh miktarýný 10 - 250 girin [1 birim 10$'dýr]:", "Buy", "Geri Dön");
	    return SendErrorMessage(playerid, "{FFFFFF}miktar 10 ile 250 arasýnda olmalýdýr.");
	}

    if (VehicleInfo[vehicle][carArmour] + amount > 250.0)
	{
	    Dialog_Show(playerid, BuyVehArmour, DIALOG_STYLE_INPUT, "{FFFFFF}Araç Zýrhý", "{ffffff}Satýn almak istediðiniz zýrh miktarýný 10 - 250 girin [1 birim 10$'dýr]:", "Buy", "Geri Dön");
	    return SendErrorMessage(playerid, "Sadece %.0f kadar zýrh satýn alabilirsin..", 250.0 - VehicleInfo[vehicle][carArmour]);
	}

	if (GetCash(playerid) < amount * 10)
	{
	    Dialog_Show(playerid, BuyVehArmour, DIALOG_STYLE_INPUT, "{FFFFFF}Araç Zýrhý", "{ffffff}Satýn almak istediðiniz zýrh miktarýný 10 - 250 girin [1 birim 10$'dýr]:", "Buy", "Geri Dön");
 		return SendErrorMessage(playerid, "Zýrhýn fiyatý $%i.", amount * 10);
	}

	StartVehicleUpgrade(playerid, vehicle, 6, 10 * amount, amount);
	FreezePlayer(playerid);*/
	return 1;
}

Dialog:BuyVehInsurance(playerid, response, listitem, inputtext[])
{
	if (!response) return ShowModMenu(playerid);

    new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if (ModShop_Nearest(playerid) == -1)										return 1;

    new cost = GetInsurancePrice(GetVehicleModel(vehicle));

    if (!cost)										return SendErrorMessage(playerid, "Bu araç için sigorta yapýlmamaktadýr.");
    if (!VehicleInfo[vehicle][carRegistered])		return SendErrorMessage(playerid, "Bu araç sisteme kayýtlý deðil.");

	new level = strval(inputtext);

	if (level < 1 || level > 3)						return SendErrorMessage(playerid, "Sigorta seviyesi 1'den 3'e kadardýr.");
	if (VehicleInfo[vehicle][carInsurance] >= level)	return SendErrorMessage(playerid, "Zaten %i sigorta seviyeniz var.", VehicleInfo[vehicle][carInsurance]);
	if (GetCash(playerid) < cost * level)			return SendNotCash(playerid);

	StartVehicleUpgrade(playerid, vehicle, 5, cost * level, level);
	return 1;
}

Dialog:VehUpgrade(playerid, response, listitem, inputtext[])
{
	if (!response)	return ShowModMenu(playerid);

    new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if (ModShop_Nearest(playerid) == -1)											return 1;

    if (listitem == 3)
	{
	    new cost = GetInsurancePrice(GetVehicleModel(vehicle));

	    if (!cost)	return SendErrorMessage(playerid, "Bu araç için sigorta yapýlmamaktadýr.");

	    new mes[590] = "{ffffff}1 seviye \t- $%i\n{ecc317}+ {ffffff}Araçlar her zaman tamir edilmiþ þekilde býrakýlýr.\n\n{ffffff}2 seviye \t- $%i\n\
		{ecc317}+ {ffffff}Araçlar her zaman tamir edilmiþ þekilde býrakýlýr.\n{ecc317}+ {ffffff}Araçlar tam can ile spawnlanýr.\n\n{ffffff}3 seviye \t- $%i\n";

	    strcat(mes, "{ecc317}+ {ffffff}Araçlar her zaman tamir edilmiþ þekilde býrakýlýr.\n{ecc317}+ {ffffff}Araçlar tam can ile spawnlanýr.\n{ecc317}+ {ffffff}Radyo ve modifiye korumasý\n\nSeviyeyi girin \taþaðýdaki kutuya satýn almak istediðiniz sigortayý girin:");
	    format(mes, sizeof(mes), mes, cost * 1, cost * 2, cost * 3);
	    Dialog_Show(playerid, BuyVehInsurance, DIALOG_STYLE_INPUT, "{FFFFFF}Sigorta Satýn Al", mes, "Satýn Al", "Geri");
	    return 1;
	}

	else if (listitem == 4)
	{
	    return SendErrorMessage(playerid,"Bu sistem de-aktif býrakýlmýþtýr.");
	}

	new alarm_mes[][] =
	{
	    {"{ecc317}+ {ffffff}Yüksek Sesli Alarm"}, {"{ecc317}+ {ffffff}Yüksek Sesli Alarm\n{ecc317}+ {ffffff}Polise ihbar gönderme"},
		{"{ecc317}+ {ffffff}Yüksek Sesli Alarm\n{ecc317}+ {ffffff}Polise ihbar gönderme\n{ecc317}+ {ffffff}Çalýnma sonucu sahibe SMS gitmesi"},
		{"{ecc317}+ {ffffff}Yüksek Sesli Alarm\n{ecc317}+ {ffffff}Polise ihbar gönderme\n{ecc317}+ {ffffff}Çalýnma sonucu sahibe SMS gitmesi+ kasko. "}
	};

	new mes[256];

	switch(listitem)
	{
	    case 0:
		{
		    if (VehicleInfo[vehicle][carLock] >= sizeof(price_mod_lock))		return SendErrorMessage(playerid, "Aracýnýz zaten en yüksek kilit seviyesinde.");

			format(mes, sizeof(mes), "{ffffff}%i kilit seviyesine $%i karþýlýðýnda seviye yükseltilsin mi?\n{ecc317}+ {ffffff}Araç kilidi  %i saniyede kýrýlýr.", VehicleInfo[vehicle][carLock]+1, price_mod_lock[VehicleInfo[vehicle][carLock]], 250 + (GetPVarInt(playerid, "BuyingVehicleLock") * 250));
		}
		case 1:
		{
		    if (VehicleInfo[vehicle][carAlarm] >= sizeof(price_mod_alarm))	return SendErrorMessage(playerid, "Aracýnýz zaten en yüksek alarm seviyesinde.");

			format(mes, sizeof(mes), "{ffffff}Alarm seviyesi %i olarak güncellenecek, $%i ödemeyi kabul ediyor musun?\n%s", VehicleInfo[vehicle][carAlarm]+1, price_mod_alarm[VehicleInfo[vehicle][carAlarm]], alarm_mes[VehicleInfo[vehicle][carAlarm]]);
		}
		case 2:
		{
		    if (VehicleInfo[vehicle][carImmob] >= sizeof(price_mod_immob))	return SendErrorMessage(playerid, "Aracýnýz zaten en yüksek immoblilizer seviyesinde.");

			format(mes, sizeof(mes), "{ffffff}Ýmmobilizer seviyesi %i olarak güncellenecek, $%i ödemeyi kabul ediyor musun?\n{ecc317}+ {ffffff}Kontak anahtarýnýn kýrýlmasýný önlemeye yardýmcý olur.", VehicleInfo[vehicle][carImmob]+1, price_mod_immob[VehicleInfo[vehicle][carImmob]]);
		}
	}

	SetPVarInt(playerid, #upgrade_veh, listitem);
	Dialog_Show(playerid, BuyVehUpgrade2, DIALOG_STYLE_MSGBOX, "{FFFFFF}Yükseltme Satýn Al", mes, "Satýn Al", "Geri");
 	return 1;
}

Dialog:BuyVehUpgrade2(playerid, response, listitem, inputtext[])
{
    if (!response)	return ShowModMenu(playerid);

    new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if (ModShop_Nearest(playerid) == -1)										return 1;

    listitem = GetPVarInt(playerid, #upgrade_veh);

    switch(listitem)
    {
        case 0: StartVehicleUpgrade(playerid, vehicle, 2, price_mod_lock[VehicleInfo[vehicle][carLock]], VehicleInfo[vehicle][carLock]+1);
        case 1: StartVehicleUpgrade(playerid, vehicle, 3, price_mod_alarm[VehicleInfo[vehicle][carAlarm]], VehicleInfo[vehicle][carAlarm]+1);
        case 2: StartVehicleUpgrade(playerid, vehicle, 4, price_mod_immob[VehicleInfo[vehicle][carImmob]], VehicleInfo[vehicle][carImmob]+1);
    }
	return 1;
}

Dialog:SelectModDialog(playerid, response, listitem, inputtext[])
{
    new vehicle = GetPlayerVehicleID(playerid), comptype = GetPVarInt(playerid, #component_type), compid = -1;

    if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
    if (!response)																return ShowModMenu(playerid);
   	if (ModShop_Nearest(playerid) == -1)										return 1;

    for(new i; i != max_vehicle_components[comptype]; i++)
	{
		if (!vehicle_component[comptype][i][compID] || IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), vehicle_component[comptype][i][compID]) != 1) continue;

		compid++;
		if (listitem == compid)
		{
			compid = i;
			break;
		}
   	}

   	new modelid = vehicle_component[comptype][compid][compID];

   	if (GetVehicleComponentType(modelid) == -1 || IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), modelid) != 1)
	{
		ShowModMenu(playerid);
		return SendErrorMessage(playerid, "Bu parça aranýza uymuyor.");
	}

	if (comptype == -1 || compid == -1)	return SendErrorMessage(playerid, "Bir sorun yaþandý, yöneticilerle iletiþime geçiniz.");

    new mes[128];
    format(mes, sizeof(mes), "{FFFFFF}%s adlý parçayý $%i karþýlýðýnda aracýnýza eklemek istiyor musunuz?", GetComponentName(modelid), vehicle_component[comptype][compid][compPrice]);

    Dialog_Show(playerid, ModConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Araç Modifiyeleri", mes, "Evet", "Geri");
    SetPVarInt(playerid, #component_model, modelid);
    SetPVarInt(playerid, #component_type, comptype);
    AddVehicleComponent(vehicle, modelid);
	return 1;
}

Dialog:DeleteTuning(playerid, response, listitem, inputtext)
{
    if (!response)	return ShowModMenu(playerid);

    new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if (ModShop_Nearest(playerid) == -1)											return 1;
	if (listitem == 9 && VehicleInfo[vehicle][carPaintJob] == 3)
	{
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Araçta zaten paintjob bulunmuyor.");
	}
    if (listitem == 11 && VehicleInfo[vehicle][carRadio] == 0)
    {
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Araçta zaten radyo bulunmuyor.");
	}

  	new comp_type[11] = {CARMODTYPE_WHEELS, CARMODTYPE_SPOILER, CARMODTYPE_HOOD, CARMODTYPE_ROOF, CARMODTYPE_SIDESKIRT, CARMODTYPE_EXHAUST, CARMODTYPE_FRONT_BUMPER, CARMODTYPE_REAR_BUMPER, CARMODTYPE_NITRO, 0, CARMODTYPE_HYDRAULICS};

	if (listitem != 9 && listitem != 11 && VehicleInfo[vehicle][carComponent][comp_type[listitem]] == 0)
	{
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Bu modifikasyon aracýnýza ekli deðil.");
	}

	new comp_name[12][32] = {"Tekerlekler", "spoiler", "air intake","the roof","side skirts "," exhaust pipes "," front bumper "," rear bumper "," nitro "," paint work "," hydraulics "," radio "};

	new mes[128];
	format(mes, sizeof(mes), "{FFFFFF}%s parçasýný silmek istiyor musunuz?", comp_name[listitem]);
	Dialog_Show(playerid, DeleteTuningConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Modifiye silme", mes, "Evet", "Geri");
    SetPVarInt(playerid, #select_deltun, listitem);
	return 1;
}

Dialog:DeleteTuningConfrim(playerid, response, listitem, inputtext)
{
    if (!response)	return ShowModMenu(playerid);

    listitem = GetPVarInt(playerid, #select_deltun);

    new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if (ModShop_Nearest(playerid) == -1)											return 1;
	if (listitem == 9 && VehicleInfo[vehicle][carPaintJob] == 3)
	{
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Araçta zaten paintjob bulunmuyor.");
	}

    if (listitem == 11 && VehicleInfo[vehicle][carRadio] == 0)
    {
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Araçta zaten radyo bulunmuyor.");
	}

  	new comp_type[11] = {CARMODTYPE_WHEELS, CARMODTYPE_SPOILER, CARMODTYPE_HOOD, CARMODTYPE_ROOF, CARMODTYPE_SIDESKIRT, CARMODTYPE_EXHAUST, CARMODTYPE_FRONT_BUMPER, CARMODTYPE_REAR_BUMPER, CARMODTYPE_NITRO, 0, CARMODTYPE_HYDRAULICS};

	if (listitem != 9 && listitem != 11 && VehicleInfo[vehicle][carComponent][comp_type[listitem]] == 0)
	{
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Aracýnýzda bu modifikasyon ekli deðil.");
	}
    if (listitem == 9)
	{
	    VehicleInfo[vehicle][carPaintJob] = 3;
	    ChangeVehiclePaintjob(vehicle, 3);
	}
    else if (listitem == 11)
	{
        VehicleInfo[vehicle][carRadio] = 0;
	}
	else
	{
	    RemoveVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][comp_type[listitem]]);
	    VehicleInfo[vehicle][carComponent][comp_type[listitem]] = 0;
	}

	new comp_name[12][32] = {"wheels", "spoiler", "air intake", "roof", "side skirts", "exhaust pipes", "front bumper", "rear bumper", "nitro", "paint work", "hydraulics", " radio "};

	SendSyntaxMessage(playerid, "%s parçasýný araçtan baþarýyla kaldýrdýnýz.", comp_name[listitem]);
	return 1;
}

Dialog:HydralicConfrim(playerid, response, listitem, inputtext[])
{
	if (!response)	return ShowModMenu(playerid);

	new modshop = -1, vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if ((modshop = ModShop_Nearest(playerid)) == -1)							return 1;
	if (GetCash(playerid) < 8000)
	{
	   	ShowModMenu(playerid);
		return SendNotCash(playerid);
	}
	if (IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), 1087) != 1)
	{
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Bu araca hidrolik takýlamaz.");
	}

    if (BizInfo[modshop][bizOwnerID] && !BizInfo[modshop][bizProduct])	return SendErrorMessage(playerid, "Modifiye garajýnda yeterli parça mevcut deðil.");

	GiveCash(playerid, -8000);
    SetVehicleComponent(vehicle, 1087, GetVehicleComponentType(1087));
	SendSyntaxMessage(playerid, "Hidroliði 8000$ satýn aldýnýz.");

	if (BizInfo[modshop][bizOwnerID])
	{
		BizInfo[modshop][bizProduct]--;
		GiveBizCash(modshop, 8000 / 100 * 80);
	}

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:RadioConfrim(playerid, response, listitem, inputtext[])
{
	if (!response)	return ShowModMenu(playerid);

	new modshop = -1, vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if ((modshop = ModShop_Nearest(playerid)) == -1)								return 1;

	if (VehicleInfo[vehicle][carRadio] == 1)
	{
	    ShowModMenu(playerid);
		return SCM(playerid, COLOR_LIGHTRED, "Araç radyonuz zaten var!");
	}
	if (GetCash(playerid) < 400)
	{
	    ShowModMenu(playerid);
		return SendNotCash(playerid);
	}

	GiveCash(playerid, -400);
	VehicleInfo[vehicle][carRadio] = 1;
	SendSyntaxMessage(playerid, "Radyoyu 400$ satýn aldýnýz, bir radyo istasyonuna baðlanmak istersen /set station komutunu kullanabilirsin.");
    GiveBizCash(modshop, 400);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:GPSConfrim(playerid, response, listitem, inputtext[])
{
	if (!response)	return ShowModMenu(playerid);

	new modshop = -1, vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if ((modshop = ModShop_Nearest(playerid)) == -1)								return 1;
	if (VehicleInfo[vehicle][carGps] == 1)
	{
	    ShowModMenu(playerid);
		return SendErrorMessage(playerid, "Zaten bir GPS'niz var!");
	}

	if (GetCash(playerid) < 1500)
	{
	    ShowModMenu(playerid);
		return SendNotCash(playerid);
	}

	GiveCash(playerid, -1500);
	VehicleInfo[vehicle][carGps] = 1;
	SendSyntaxMessage(playerid, "1.500 dolara GPS satýn aldýnýz. Aracýnýzý bulmak için /arac bul komutunu kullanabilirsiniz.");
    GiveBizCash(modshop, 1500);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:ChangeLock(playerid, response, listitem, inputtext[])
{
	if (!response)	return ShowModMenu(playerid);

	new modshop = -1, vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Kiþisel araçlarda olmalýsýnýz.");
   	if ((modshop = ModShop_Nearest(playerid)) == -1)														return 1;

	if (VehicleInfo[vehicle][carGps] == 1)
	{
	    ShowModMenu(playerid);
		return SendErrorMessage(playerid, "Zaten bir GPS'niz var!");
	}

	if (GetCash(playerid) < 300)
	{
	    ShowModMenu(playerid);
		return SendNotCash(playerid);
	}

	GiveCash(playerid, -300);
	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || PlayerInfo[i][pSpareKey] != VehicleInfo[vehicle][carID]) continue;

        PlayerInfo[i][pSpareKey] = 0;
	}

	new query[256];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `sparekey`='0' WHERE `sparekey`=%i", VehicleInfo[vehicle][carID]);
	mysql_tquery(dbHandle, query);

	SendSyntaxMessage(playerid, "Kilidi 300$'a deðiþtirdiniz.");
	VehicleInfo[vehicle][carLock] = listitem;
    GiveBizCash(modshop, 300);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:ModConfrim(playerid, response, listitem, inputtext[])
{
   	new modshop = -1, vehicle = GetPlayerVehicleID(playerid), modelid = GetPVarInt(playerid, #component_model);

	RemoveVehicleComponent(vehicle, modelid);
    LoadComp(vehicle);

   	if (!response)																return ShowComponentMenu2(playerid, vehicle, GetPVarInt(playerid, #component_type));
	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
	if ((modshop = ModShop_Nearest(playerid)) == -1)							return 1;
	if (GetVehicleComponentType(modelid) == -1 || IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), modelid) != 1)
	{
 		ShowModMenu(playerid);
   		return SendErrorMessage(playerid, "Bu parça araca uymuyor.");
	}

	new compid = -1, comptype = -1;

	for(new i; i != sizeof(vehicle_component); i++)
	{
	    for(new a; a != max_vehicle_components[i]; a++)
		{
	    	if (vehicle_component[i][a][compID] != modelid) continue;

			comptype = i;
			compid = a;
			break;
		}

		if (comptype != -1 && compid != -1) break;
	}

	if (comptype == -1 || compid == -1)	return SendErrorMessage(playerid,"Bir sorun yaþandý, yöneticilerle iletiþime geçiniz.");

	if (GetCash(playerid) < vehicle_component[comptype][compid][compPrice])
	{
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Yeterli paranýz yok. Bu parçanýn maliyeti $%i.", vehicle_component[comptype][compid][compPrice]);
	}

	if (HasComponent(vehicle, modelid))
 	{
  		ShowModMenu(playerid);
		return SendErrorMessage(playerid, "Bu parça zaten sizde mevcut!");
	}

    if (BizInfo[modshop][bizOwnerID] && !BizInfo[modshop][bizProduct])	return SendErrorMessage(playerid, "Modifiye garajýnda yeterli parça yok!");

	GiveCash(playerid, -vehicle_component[comptype][compid][compPrice]);

	if (BizInfo[modshop][bizOwnerID] != 0)
	{
		BizInfo[modshop][bizProduct]--;
		GiveBizCash(modshop, vehicle_component[comptype][compid][compPrice] / 100 * 80);
	}

	SendSyntaxMessage(playerid, "%s adlý parçayý $%i karþýlýðýnda satýn aldýnýz.", GetComponentName(modelid), vehicle_component[comptype][compid][compPrice]);
	SetVehicleComponent(vehicle, modelid, GetVehicleComponentType(modelid));
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:PaintjobDialog(playerid, response, listitem, inputtext[])
{
	if (!response)	return ShowModMenu(playerid);

	new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
    if (IsVehiclePaintJob(GetVehicleModel(vehicle)) < listitem+1)				return 1;
   	if (ModShop_Nearest(playerid) == -1)											return 1;

    if (VehicleInfo[vehicle][carPaintJob] == listitem)
    {
        ShowModMenu(playerid);
		return SendErrorMessage(playerid, "Zaten paintjobunuz var.");
	}

	new mes[128];

	format(mes, sizeof(mes), "{FFFFFF}%i numaralý paintjob $3.000 karþýlýðýnda aracýnýza eklensin mi?", listitem+1);
	Dialog_Show(playerid, PaintjobConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Araç Modifiyesi", mes, "Evet", "Geri");
    SetPVarInt(playerid, #select_paintjob, listitem);

	ChangeVehiclePaintjob(vehicle, listitem);
	return 1;
}

Dialog:PaintjobConfrim(playerid, response, listitem, inputtext[])
{
    listitem = GetPVarInt(playerid, #select_paintjob);

	new modshop = -1, vehicle = GetPlayerVehicleID(playerid);

    ChangeVehiclePaintjob(vehicle, VehicleInfo[vehicle][carPaintJob]);

    if (!response)																return ShowModMenu(playerid);
	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if ((modshop = ModShop_Nearest(playerid)) == -1)							return 1;
	if (!IsVehiclePaintJob(GetVehicleModel(vehicle)))							return SendErrorMessage(playerid, "Bu araç için paintjob yoktur!");
	if (VehicleInfo[vehicle][carPaintJob] == listitem)
    {
        ShowModMenu(playerid);
		return SendErrorMessage(playerid, "Zaten böyle bir paintjobunuz var!");
	}
	if (GetCash(playerid) < 3000)
	{
	    ShowModMenu(playerid);
		return SendNotCash(playerid);
	}
	if (BizInfo[modshop][bizOwnerID] && !BizInfo[modshop][bizProduct])	return SendErrorMessage(playerid,"Modifye garajýnda yeterli parça yok.");

	GiveCash(playerid, -3000);
	VehicleInfo[vehicle][carPaintJob] = listitem;
	ChangeVehiclePaintjob(vehicle, listitem);
	Save_Car(vehicle);
	SendSyntaxMessage(playerid, "%i numaralý paintjob 3.000$ karþýlýðýnda satýn alýndý.", listitem+1);

    if (BizInfo[modshop][bizOwnerID] != 0)
    {
		BizInfo[modshop][bizProduct]--;
		GiveBizCash(modshop, 3000 / 100 * 80);
	}
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:NitroDialog(playerid, response, listitem, inputtext[])
{
	if (!response)	return ShowModMenu(playerid);

	new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if (ModShop_Nearest(playerid) == -1)										return 1;

	new nitro_id[3] = {1009, 1008, 1010}, nitro_price[3] = {4500, 9000, 15000};

    if (HasComponent(vehicle, nitro_id[listitem]))
    {
        ShowModMenu(playerid);
		return SendErrorMessage(playerid, "Bu araçta zaten bir nitro var!");
	}

	new mes[128];

	format(mes, sizeof(mes), "{FFFFFF}%i seviye nitroyu  $%i karþýlýðýnda satýn almak mý istiyorsunuz?", (listitem == 0)?(2):((listitem == 1)?(5):(10)), nitro_price[listitem]);
	Dialog_Show(playerid, NitroConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Araç Modifiyesi", mes, "Evet", "Geri");
    SetPVarInt(playerid, #select_nitro, listitem);
	return 1;
}

Dialog:NitroConfrim(playerid, response, listitem, inputtext[])
{
	if (!response) return ShowModMenu(playerid);

    listitem = GetPVarInt(playerid, #select_nitro);

	new modshop = -1, vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !VehicleInfo[vehicle][carOwnerID])	return 1;
   	if ((modshop = ModShop_Nearest(playerid)) == -1)								return 1;

	new nitro_id[3] = {1009, 1008, 1010}, nitro_price[3] = {15000, 15500, 16000}, nitro_level[3] = {2, 5, 10};

    if (HasComponent(vehicle, nitro_id[listitem]))
    {
        ShowModMenu(playerid);
		return SendErrorMessage(playerid, "Bu araçta zaten bir nitro var!");
	}

    if (IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), nitro_id[listitem]) != 1)
    {
        ShowModMenu(playerid);
    	return SendErrorMessage(playerid, "Bu araca nitro takýlamaz.");
	}

	if (GetCash(playerid) < nitro_price[listitem])
	{
	    ShowModMenu(playerid);
		return SendNotCash(playerid);
	}
   if (BizInfo[modshop][bizOwnerID] && !BizInfo[modshop][bizProduct])	return SendErrorMessage(playerid, "Modifiye garajýnda yeterli parça yok.");

	GiveCash(playerid, -nitro_price[listitem]);
	SetVehicleComponent(vehicle, nitro_id[listitem], CARMODTYPE_NITRO);
	SendSyntaxMessage(playerid, "%i seviye nitroyu $%i karþýlýðýnda aldýn.", nitro_level[listitem], nitro_price[listitem]);

    if (BizInfo[modshop][bizOwnerID] != 0)
    {
		BizInfo[modshop][bizProduct]--;
		GiveBizCash(modshop, nitro_price[listitem] / 100 * 80);
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:StartJackingLock(playerid, response, listitem, inputtext[])
{
	if (!response)											 return 1;

	new vehicle = GetPVarInt(playerid, #JackingVehicle);
	if (!vehicle || !GetNearVehicle(playerid, 3.0, vehicle)) return SendErrorMessage(playerid, "Aracýn yakýnýnda olmalýsýnýz.");
	if (!IsPlayerInFrontVDoor(playerid, vehicle)) 			 return SendErrorMessage(playerid, "Sürücü kapýsýnýn yanýnda olmalýsýnýz.");
	if (!VehicleInfo[vehicle][carLocked])					 return SendErrorMessage(playerid, "Araç kapýlarý açýk.");

	if (pTemp[playerid][JackingType] == 2) {
		if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Kalkamalýsýnýz.");
		switch(VehicleInfo[vehicle][carLock])
		{
			case 0: VehicleInfo[vehicle][eDoorHealth] = 25, VehicleInfo[vehicle][eDoorEffect] = BLOCK_NONE;
			case 1: VehicleInfo[vehicle][eDoorHealth] = 50, VehicleInfo[vehicle][eDoorEffect] = LESS_DAMAGE_FIST;
			case 2: VehicleInfo[vehicle][eDoorHealth] = 75, VehicleInfo[vehicle][eDoorEffect] = BLOCK_FIST;
			case 3: VehicleInfo[vehicle][eDoorHealth] = 150, VehicleInfo[vehicle][eDoorEffect] = LESS_DAMAGE_MELEE;
			case 4: VehicleInfo[vehicle][eDoorHealth] = 200, VehicleInfo[vehicle][eDoorEffect] = BLOCK_PHYSICAL;
			case 5: VehicleInfo[vehicle][eDoorHealth] = 250, VehicleInfo[vehicle][eDoorEffect] = BLOCK_PHYSICAL;
		}

		PlaySound(playerid, 1138);
		AlarmOn(vehicle);
		SendHelpMessage(playerid, "Aracý açmak için kapýyý kýrmaya baþlamalýsýn!");
		VehicleInfo[vehicle][ePhysicalAttack] = true;

		new doorhealth[12];
		format(doorhealth, 12, "%d%%", VehicleInfo[vehicle][eDoorHealth]);
		VehicleInfo[vehicle][eVehicleLabel] = CreateDynamic3DTextLabel(doorhealth, COLOR_WHITE, 0.0, 0.0, 0.0, 15.0, INVALID_PLAYER_ID, vehicle, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);

	} else if (pTemp[playerid][JackingType] == 1) {
		if (IsPlayerCrouching(playerid) == false) return SendErrorMessage(playerid, "Eðilmelisiniz.");
		if (!CheckHanditem(playerid,18634)) 	  return SendErrorMessage(playerid, "Elinizde bir levye olmalý.");

		JackingLock[playerid] = 120 + VehicleInfo[vehicle][carLock] * 120;

		new mes[128];
		format(mes, sizeof(mes), "%s model aracýn kilidini kýrmaya çalýþýr.", VehicleNames[GetVehicleModel(vehicle)-400]);
		pc_cmd_me(playerid, mes);

		TogglePlayerControllable(playerid, false);
		SendSyntaxMessage(playerid, "Kilit kýrmayý iptal etmek için (/kilitkiriptal - /kki) komutunu kullanabilirsiniz!");
	} else return 1;

	JackingVehicle[playerid] = vehicle;
	return 1;
}

Dialog:StartJackingEngine(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

    new vehicle = GetPlayerVehicleID(playerid);

    if (!vehicle || !IsDriver(playerid))					return SendErrorMessage(playerid, "Sürücü koltuðunun arkasýnda oturmalýsýnýz.");
	if (!VehicleInfo[vehicle][carOwnerID])					return SendErrorMessage(playerid, "Bu araç açýlamaz.");
	if (JackingEngine[playerid])							return SendErrorMessage(playerid, "Zaten motoru çalýþtýrmaya çalýþýyorsunuz!");
	if (VehicleInfo[vehicle][carEngineOn])					return SendErrorMessage(playerid, "Motor zaten çalýþýyor!");
    if (VehicleInfo[vehicle][carFuel] == 0.0)				return SendErrorMessage(playerid, "Aracanýzda benzin yok!");
	if (GetPVarInt(playerid, #UsePump))						return SendErrorMessage(playerid, "Þu anda motoru çalýþtýramazsýnýz.");
    if (!IsPlayerHasItem(playerid, INV_TOOLS))				return SendErrorMessage(playerid, "Aracý çalýþtýracak hiçbir aletiniz yok.");

	new mes[128];
	format(mes, sizeof(mes), "%s model aracý düz kontak yapmaya çalýþýr.", VehicleNames[GetVehicleModel(vehicle)-400]);
	pc_cmd_me(playerid, mes);

	pTemp[playerid][pUnscrambleID] = random(sizeof(UnscrambleInfo));

	switch(VehicleInfo[vehicle][carImmob])
	{
		case 0: JackingEngine[playerid] = 125;
		case 1: JackingEngine[playerid] = 100;
		case 2: JackingEngine[playerid] = 75;
		case 3: JackingEngine[playerid] = 50;
		case 4: JackingEngine[playerid] = 25;
	}

	return 1;
}

Dialog:Rent_Vehicle_Personal(playerid, response, listitem, inputtext[]) {
	if(!response) return 1;

    if(response)
	{
        new Float:x, Float:y, Float:z, Float:a, model;
     	GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);

	    switch(listitem)
        {
		    case 0: model = 507;
		    case 1: model = 467;
		    case 2: model = 516;
		    case 3: model = 547;
		    case 4: model = 566;
		    case 5: model = 540;
		    case 6: model = 491;
	    	case 7: model = 436;
		    case 8: model = 492;
		    case 9: model = 466;
	    }

		new vehicle = CreateFactionVehicle(false, model, x, y, z, a, 1, 1, 5, 0, GetVehicleNumber(), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

		if(!vehicle) return SendErrorMessage(playerid, "Bir sorun oluþtu. Kod: 1055");

	    GiveCash(playerid, -300);
	    pTemp[playerid][pRentveh] = vehicle;
        VehicleInfo[vehicle][carRent] = PlayerInfo[playerid][pID];

	    FixVehicle(vehicle);
	    VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(vehicle));

		PutPlayerInVeh(playerid, vehicle, 0);

	    SendSyntaxMessage(playerid, "%s model aracý $300'a kiraladýnýz. Kullanabileceðiniz komutlar: /arackirabitir, /akilit.", VehicleNames[GetVehicleModel(vehicle)-400]);
	    SendSyntaxMessage(playerid, "Dikkat! Aracý 5 dakika boyunca kullanmazsanýz araç silinecektir!");
	}
	return 1;
}
CMD:arackirala(playerid, params[])
{
    if (pTemp[playerid][pRentveh])
        return SendErrorMessage(playerid, "Zaten bir araç kiralamissiniz, kiraladiginiz araci iade etmek için /arackirabitir komutunu kullanin.");


	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli]) return 1;
	if (Locker_RentalNearestType(playerid, 2) == -1) return SendErrorMessage(playerid, "Herhangi bir araç kiralama noktasýna yakýn deðilsin.");




    if (GetCash(playerid) < 300)
        return SendNotCash(playerid);

    // Dialogu göster
    Dialog_Show(playerid, RentVehicleDialog, DIALOG_STYLE_LIST, "Araç Kirala",
    "Elegant\nOceanic\nFaggio\nPrimo\nTahoma", "Seç", "Iptal");

    return 1;
}

CMD:pdaracalp(playerid, params[])
{
    if (pTemp[playerid][pRentveh])
        return SendErrorMessage(playerid, "Zaten bir araç kiralamissiniz, kiraladiginiz araci iade etmek için /arackirabitir komutunu kullanin.");


	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli]) return 1;
    // belirli yerler eklenecek.
     if (!PlayerToPoint(50.0, playerid, 1564.638793, -1696.793334, 5.890625))
    {

        return SendErrorMessage(playerid, "PD garajinda olmalisiniz.");
    }
    if (GetCash(playerid) < 0)
        return SendNotCash(playerid);

    // Dialogu göster
    Dialog_Show(playerid, LspdCarDialog, DIALOG_STYLE_LIST, "Araç Kirala",
    "Police Car (Los Santos)\nPolice Car (Las Venturas)\nPolice Car (San Fierro)\nFBI Rancher\nPolice Ranger\nS.W.A.T\nRhino", "Seç", "Iptal");

    return 1;
}
CMD:arackirabitir(playerid, params[])
{
    if (!pTemp[playerid][pRentveh]) return 1;

	new vehicle = pTemp[playerid][pRentveh];

    SendSyntaxMessage(playerid, "%s model aracýn kiralamasýný sonlandýrdýnýz.", VehicleNames[GetVehicleModel(vehicle)-400]);
	pTemp[playerid][pRentveh] = 0;
    VehicleInfo[vehicle][carRent] = 0;
	pTemp[playerid][pJob] = 0;
    AracKiraBitir(vehicle);
	return 1;
}

CMD:hacizdencikar(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);

	if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))					return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");
	if (!vehicle)														return SendNotInVehicle(playerid);
	if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Aracýn sahibi siz deðilsiniz!");
	if (!VehicleInfo[vehicle][Impounded])								return SendErrorMessage(playerid, "Aracanýza el konmamýþ.");
	if (GetCash(playerid) < IMPOUND_FEE) 								return SendErrorMessage(playerid, "Bu iþlemi tamamlamak için yetersiz paraya sahipsiniz. ($%i).", IMPOUND_FEE);

	GiveCash(playerid, -IMPOUND_FEE);
	VehicleInfo[vehicle][Impounded] = 0;
	Save_Car(vehicle);

    SendSyntaxMessage(playerid, "%s model aracýnýzý  $%i karþýlýðýnda otoparktan aldýnýz.", VehicleNames[GetVehicleModel(vehicle)-400], IMPOUND_FEE);
	SendHelpMessage(playerid, "Aracýnýzý daha sonra güvenli bir yere park etmeyi unutmayýn!(/park)");
	return 1;
}

alias:arac("a");
CMD:arac(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

	new parametrs[13], arg[128], vehicle = GetPlayerVehicleID(playerid), model = GetVehicleModel(vehicle);

	if (sscanf(params, "s[13]S()[128]", parametrs, arg))
	{
		SendHelpMessage(playerid, "/(a)rac [seçenekler]");
		SendSyntaxMessage(playerid, "liste | getir | park | bul/gps | kilit | plakagizle | sahteplaka | ilan | anahtar | paketler");
		SendSyntaxMessage(playerid, "ceset | bilgi | cezalar | sistemesat | sat | dmvkayit | ilankaldir | kirala");
		SendClientMessageEx(playerid, COLOR_GRAD2, "[EKSTRA]{FFFFFF} /aracmenu /araclarim /ahe /motor /farlar /bagaj /kaput /radyoayarla /cam /hacizdencikar");
		return 1;
	}

    if(!strcmp(parametrs, "ilan",  true))
	{
		pc_cmd_aracilan(playerid, arg);
	}

    else if(!strcmp(parametrs, "ilankaldir",  true))
	{
		pc_cmd_ilankaldir(playerid, "");
	}

	else if(!strcmp(parametrs, "kirala", true))
	{
		pc_cmd_arackirala(playerid, "");
	}

	else if(!strcmp(parametrs, "paketler", true))
	{
		new aracid = Arac_Yakin(playerid, 3.5);
		if(aracid == -1) return SendErrorMessage(playerid, "Bu iþlevi araç içerisinde kullanabilirsin.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOUR_TOMATO, "[ARAÇ] {FFFFFF}Bu iþlevi aracýn sürücü koltuðundayken kullanabilirsin.");
		if(Arac_Model(VehicleInfo[aracid][carModel]) == VEHICLE_TYPE_BIKE) return SendClientMessageEx(playerid, COLOUR_TOMATO, "[ARAÇ] {FFFFFF}Bu iþlevi bisiklette kullanamazsýn.");
//      if(Arac_Sahip(playerid, aracid, false) == 0) return SendErrorMessage(playerid, "Bu aracýn kendisine veya anahtarýna sahip deðilsin.");
		if(VehicleInfo[aracid][carLocked]) return SendClientMessageEx(playerid, COLOUR_TOMATO, "[ARAÇ] {FFFFFF}Kilitli araçlarýn paketlerine eriþemezsin.");
		if(VehicleInfo[aracid][carType] > 0) return SendClientMessageEx(playerid, COLOUR_TOMATO, "[ARAÇ] {FFFFFF}Meslek araçlarýnda bu iþlevi kullanamazsýn.");
		if(VehicleInfo[aracid][carRent] > 0 && VehicleInfo[aracid][carRent] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOUR_TOMATO, "[ARAÇ] {FFFFFF}Kiralýk araçlarda bu iþlevi kullanamazsýn.");
		if(IsFactionLegal(VehicleInfo[aracid][carFaction])) return SendClientMessageEx(playerid, COLOUR_TOMATO, "[ARAÇ] {FFFFFF}Aracýn baðlý olduðu oluþum sebebiyle bu araçta bu iþlevi kullanamazsýn.");
		new sorgu[500];
		mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT COUNT(*) FROM paketler WHERE sqlid = %d LIMIT 1) as paketsayi", PlayerInfo[playerid][pID]);
		mysql_format(dbHandle, sorgu, sizeof(sorgu), "%s, (SELECT model FROM cars WHERE id = paketler.aracsqlid LIMIT 1) as model", sorgu);
		mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM paketler WHERE aracsqlid = %d", sorgu, VehicleInfo[aracid][carID]);
		mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, VehicleInfo[aracid][carID], 23, 0, 0, "");
	}


	else if(!strcmp(parametrs, "anahtar", true))
	{
		if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))	return SendErrorMessage(playerid, "Aracýnz spawnlanmamýþ.");

		static const str_size[] = "{ffffff}%s için kopyala. {C3C3C3}[ID / isim] {ffffff}anahtarlarý kime vermek istiyorsunuz:";
		new mes[sizeof(str_size) - 2 + 1 + 32];

		format(mes, sizeof(mes), str_size, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
	    Dialog_Show(playerid, DuplicateKey, DIALOG_STYLE_INPUT, "Kopyala", mes, "Satýn Al", "Ýptal");
	    return 1;
	}

    else if(!strcmp(parametrs, "motor", true))
	{
		pc_cmd_motor(playerid, "");
	}

	else if(!strcmp(parametrs, "dmvkayit", true))
	{
        if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))					return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");

	    vehicle = PlayerInfo[playerid][pCarKey];

	    if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Aracýn sahibi siz deðilsiniz!");
	    if (IsABicycle(vehicle))												return SendErrorMessage(playerid, "Bisikleti sisteme kayýt ettiremezsiniz.");
	    if (VehicleInfo[vehicle][carEngineOn])								return SendErrorMessage(playerid, "Aracýnýzda deðiþiklik yapmadan önce motoru durdurun!");
	    if (VehicleInfo[vehicle][carRegistered])								return SendErrorMessage(playerid, "Bu araç zaten DMV kayýtlý.");
	    if (GetCash(playerid) < 300)											return SendNotCash(playerid);

	    StartVehicleUpgrade(playerid, vehicle, 7, 300);
	    SendSyntaxMessage(playerid, "Sisteme kayýt iþlemi baþladý, biraz zaman alabilir.");
	}

	else if (!strcmp(parametrs, "plakagizle", true))
	{
		vehicle = GetNearVehicle(playerid, 4.0);

		if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))					return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");
		if (!vehicle)														return SendErrorMessage(playerid, "Aracýnýzýn yakýnýnda deðilsiniz.");
		if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Aracýn sahibi siz deðilsiniz!");
		if (VehicleInfo[vehicle][carFakePlate])								return SendErrorMessage(playerid, "Öncelikle sahte plakayý kaldýrmanýz gerekmektedir.");
		if (!IsPlayerHasItem(playerid, INV_TOOLS)) 							return SendErrorMessage(playerid, "Bunun için alet çantasýna ihtiyacýn var!");
		if (VehicleInfo[vehicle][carPlate] == '_') 							return SendErrorMessage(playerid, "Arabanýzýn plakasý bulunmamakta!");

		if (VehicleInfo[vehicle][carHidedPlate])
		{
			VehicleInfo[vehicle][carHidedPlate] = 0;
			SQL_SetInteger("cars", "hidednum", VehicleInfo[vehicle][carHidedPlate], VehicleInfo[vehicle][carID]);
			SetVehicleNumberPlate(vehicle, VehicleInfo[vehicle][carPlate]);
			SetVehicleToRespawn(vehicle);
			SendSyntaxMessage(playerid, "Aracýn plakasýný tekrardan taktýn. Araç park yerine gönderildi.");
		}
		else
		{
			VehicleInfo[vehicle][carHidedPlate] = 1;
			SQL_SetInteger("cars", "hidednum", VehicleInfo[vehicle][carHidedPlate], VehicleInfo[vehicle][carID]);
			SetVehicleNumberPlate(vehicle, "_");
			SetVehicleToRespawn(vehicle);
			SendSyntaxMessage(playerid, "Araçtan plakayý kaldýrdýn. Araç park yerine gönderildi.");
		}
		return 1;
	}

	else if (!strcmp(parametrs, "sahteplaka", true))
	{
		vehicle = GetNearVehicle(playerid, 4.0);

		if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))					return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");
		if (!vehicle)														return SendErrorMessage(playerid, "Aracýnýzýn yakýnýnda deðilsiniz..");
		if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Aracýn sahibi siz deðilsiniz!");
		if (!IsPlayerHasItem(playerid, INV_FAKENUM)) 						return SendWarningMessage(playerid, "Sahte plakalýðýn yok.");
		if (VehicleInfo[vehicle][carHidedPlate])							return SendErrorMessage(playerid, "Plakaný gizlemiþsin. (/a plakagizle)");

		if (VehicleInfo[vehicle][carFakePlate])
		{
			VehicleInfo[vehicle][carFakePlate] = 0;
			SQL_SetInteger("cars", "fakenum", VehicleInfo[vehicle][carFakePlate], VehicleInfo[vehicle][carID]);
			SetVehicleNumberPlate(vehicle, VehicleInfo[vehicle][carPlate]);
			SetVehicleToRespawn(vehicle);
			SendSyntaxMessage(playerid, "Sahte plakayý araçtan söktün. Araç park yerine gönderildi.");
		}
		else
		{
			VehicleInfo[vehicle][carFakePlate] = 1;
			SQL_SetInteger("cars", "fakenum", VehicleInfo[vehicle][carFakePlate], VehicleInfo[vehicle][carID]);

			if (isempty(VehicleInfo[vehicle][carFakePlateS]))
			{
				format(VehicleInfo[vehicle][carFakePlateS], 24, "%s", GetVehicleNumber());
				SQL_SetString("cars", "fakenum_str", VehicleInfo[vehicle][carFakePlateS], VehicleInfo[vehicle][carID]);
			}

			SetVehicleNumberPlate(vehicle, VehicleInfo[vehicle][carFakePlateS]);
			SetVehicleToRespawn(vehicle);
			SendSyntaxMessage(playerid, "Sahte plakayý araca taktýn. Araç park yerine gönderildi.");
		}
		return 1;
	}

	else if (!strcmp(parametrs, "menu", true))
	{
		pc_cmd_aracmenu(playerid, "");
	}

	else if (!strcmp(parametrs, "cezalar", true))
	{
		pc_cmd_aracceza(playerid, "");
	}

	else if (!strcmp(parametrs, "getir", true))
	{
		if (IsValidVehicle(PlayerInfo[playerid][pCarKey]))	return SendErrorMessage(playerid, "Zaten spawnlanmýþ bir aracýnýz var.");

		pc_cmd_araclarim(playerid, "");
	}

	else if (!strcmp(parametrs, "park", true))
	{
		if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))					return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");
		if (vehicle == 0)													return SendNotInVehicle(playerid);
		if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Aracýn sahibi siz deðilsiniz!");
		if (VehicleInfo[vehicle][Impounded])								return SendErrorMessage(playerid, "Bu araç haciz alanýda, çýkartmak için (/hacizdencikar) komutunu kullanabilirsiniz.");

	    for(new i; i != MAX_TRUCK_PRODUCT; i++)
	    {
			if (IsValidDynamicObject(VehicleInfo[vehicle][carCargoObj][i])) return SendErrorMessage(playerid, "Aracýnýzýn bagajýnda koliler varken park edemezsiniz.");
		    break;
	    }

		new Float:hp;
		AntiCheatGetVehicleHealth(vehicle, hp);

		if (hp < 250.0)									return SendErrorMessage(playerid, "Aracýnýz aðýr hasarlý olduðu için bu aracý park edemezsiniz.");

		GetVehiclePos(vehicle, VehicleInfo[vehicle][carParkX], VehicleInfo[vehicle][carParkY], VehicleInfo[vehicle][carParkZ]);
		GetVehicleZAngle(vehicle, VehicleInfo[vehicle][carParkA]);

		SendSyntaxMessage(playerid, "\"%s\" model aracýnýz park edildi.", VehicleNames[model-400]);
		ResetVehicleStuff(vehicle, 1);
		DestroyVehicleEx(vehicle, 1);
		PlayerInfo[playerid][pCarKey] = 0;
		VehicleInfo[vehicle][carOwnerPlayer] = INVALID_PLAYER_ID;
		return 1;
	}

	else if (!strcmp(parametrs, "sat", true))
	{
		new userid, price;

		if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))									return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");
		if (!vehicle)																		return SendNotInVehicle(playerid);
		if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])					return SendErrorMessage(playerid, "Aracýn sahibi siz deðilsiniz!");
		if (sscanf(arg, "ui", userid, price))												return SendHelpMessage(playerid, "/a sat [ID / isim] [ücret]");
        if (!IsPlayerLogged(userid))														return SendNotConnected(playerid);
		if (IsADonateModel(GetVehicleModel(vehicle)))										return SendErrorMessage(playerid,"Baðýþcý araçlarýný satamazsýnýz!");
		if (userid == playerid)																return 1;
		if (!IsABicycle(vehicle) && !VehicleInfo[vehicle][carRegistered])					return SendErrorMessage(playerid, "Bu araç sisteme kayýtlý deðil!");
		if (!PlayerNearPlayer(3.0, playerid, userid))										return SendNotNearPlayer(playerid);
		if (IsValidVehicle(PlayerInfo[userid][pCarKey]))									return SendErrorMessage(playerid, "Oyuncunun zaten spawnlanmýþ bir aracý var.");
		if (price < 0 || price > 10000000)													return SendErrorMessage(playerid, "Fiyat $0 ve $10,000,000. aralýðýnda olmalýdýr");

		SendSyntaxMessage(userid, "%s size %s model aracý  $%i karþýlýðýnda satmak istiyor. (Satýn almak için {33AA33}Y{FFFFFF} týklayýn.)", GetNameEx(playerid), VehicleNames[GetVehicleModel(vehicle)-400], price);
		if (IsABicycle(vehicle))
		{
			SendSyntaxMessage(userid, "Güvenlik: Kilit Seviyesi[%i]", VehicleInfo[vehicle][carLock]);
			SendSyntaxMessage(userid, "Diðer: Birincil Renk[{%06x}#%i{FFFFFF}], Ýkincil Renk[{%06x}#%i{FFFFFF}]", VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor1]] >>> 8, VehicleInfo[vehicle][carColor1], VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor2]] >>> 8, VehicleInfo[vehicle][carColor2]);
		}
		else
		{
			SendSyntaxMessage(userid, "Kondisyon: Motor Ömrü[%.2f], Akü Durumu[%.2f], Kilometre[%.2f]",VehicleInfo[vehicle][carEngine], VehicleInfo[vehicle][carBattery], VehicleInfo[vehicle][carMilliage]);
			SendSyntaxMessage(userid, "Güvenlik: Kilit Seviyesi[%i], Alarm Seviyesi[%i], Immobilizer[%i], Sigorta[%i]", VehicleInfo[vehicle][carLock], VehicleInfo[vehicle][carAlarm], VehicleInfo[vehicle][carImmob], VehicleInfo[vehicle][carInsurance]);

			SendSyntaxMessage(userid, "Diðer: Birincil Renk[{%06x}#%i{FFFFFF}], Ýkincil Renk[{%06x}#%i{FFFFFF}], Plaka[%s], Radyo[%i]", VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor1]] >>> 8, VehicleInfo[vehicle][carColor1], VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor2]] >>> 8, VehicleInfo[vehicle][carColor2], VehicleInfo[vehicle][carPlate], VehicleInfo[vehicle][carRadio]);
		}

		SendSyntaxMessage(playerid, "\"%s\" model aracýnýzý %s adlý kiþiye $%i karþýlýðýnda satmak için teklif gönderdiniz.", VehicleNames[GetVehicleModel(vehicle)-400], GetNameWithMask(userid), price);

		pTemp[userid][pCarPlayer] = playerid;
		pTemp[userid][pCarPrice] = price;
		SetPVarInt(userid, #accept_time, gettime() + 30);
		return 1;
	}

	else if (!strcmp(parametrs, "kilitid", true))
	{
		new vehicleid;
		if (sscanf(arg, "i", vehicleid))												return SendHelpMessage(playerid, "/arac kilitid [aracid]");
	    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])	return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

	    vehicle = vehicleid;
		if (GetNearVehicle(playerid, 4.2, vehicle) == 0) return SendErrorMessage(playerid, "Aracýn yakýnýnda olmalýsýn.");
		if (!IsValidVehicle(vehicle))                    return SendErrorMessage(playerid, "Geçersiz araç ID girdiniz.");
		if (vehicle > 0)
		{
		    if ((VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] == PlayerInfo[playerid][pFaction])
			 || pTemp[playerid][pRentveh] == vehicle
			 || PlayerInfo[playerid][pCarKey] == vehicle
			 || (PlayerInfo[playerid][pSpareKey] == VehicleInfo[vehicle][carID] && PlayerInfo[playerid][pSpareKey] != 0))
			{
			    PlaySound(playerid, 1145);

				new mes[128];

			    if (VehicleInfo[vehicle][carLocked]) format(mes, sizeof(mes), "KILIT ~g~ACILDI");
				else format(mes, sizeof(mes), "ARAC ~r~KILITLENDI");
				GameTextForPlayer(playerid, mes, 2500, 4);

			    if (VehicleInfo[vehicle][carLocked])	format(mes, sizeof(mes), "%s model aracýn kilidini açtý.", VehicleNames[GetVehicleModel(vehicle)-400]);
				else								format(mes, sizeof(mes), "%s model aracý kilitledi.", VehicleNames[GetVehicleModel(vehicle)-400]);
				SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);

			    ToggleVehicleLock(vehicle, (VehicleInfo[vehicle][carLocked]) ? (false): (true));
				return 1;
			}
			else {
				SendErrorMessage(playerid, "Aracýn anahtarý sizde yok!");
				SendHelpMessage(playerid, "Aracýn kilidini kýrmak için /arackilitkir (/akk) komutunu kullanabilirsiniz.");
			}
		}
		return 1;
	}

	else if (!strcmp(parametrs, "kilit", true))
	{
	    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])	return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

	    vehicle = Arac_Yakin(playerid, 4.0);
		if (!vehicle) return SendErrorMessage(playerid, "Yakýnýnýzda araç yok.");
		if (!AracSayiKontrol(playerid)) return SendErrorMessage(playerid, "Etrafýnýzda çok araç var. /arac kilitid komutunu kullanýn.");
		if (vehicle > 0)
		{
		    if ((VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] == PlayerInfo[playerid][pFaction])
			 || pTemp[playerid][pRentveh] == vehicle
			 || PlayerInfo[playerid][pCarKey] == vehicle
			 || (PlayerInfo[playerid][pSpareKey] == VehicleInfo[vehicle][carID] && PlayerInfo[playerid][pSpareKey] != 0))
			{
			    PlaySound(playerid, 1145);

				new mes[128];

			    if (VehicleInfo[vehicle][carLocked]) format(mes, sizeof(mes), "KILIT ~g~ACILDI");
				else format(mes, sizeof(mes), "ARAC ~r~KILITLENDI");
				GameTextForPlayer(playerid, mes, 2500, 4);

			    if (VehicleInfo[vehicle][carLocked])	format(mes, sizeof(mes), "%s model aracýn kilidini açtý.", VehicleNames[GetVehicleModel(vehicle)-400]);
				else								format(mes, sizeof(mes), "%s model aracý kilitledi.", VehicleNames[GetVehicleModel(vehicle)-400]);
				SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);

			    ToggleVehicleLock(vehicle, (VehicleInfo[vehicle][carLocked]) ? (false): (true));
				return 1;
			}
			else {
				SendErrorMessage(playerid, "Aracýn anahtarý sizde yok!");
				SendHelpMessage(playerid, "Aracýn kilidini kýrmak için /arackilitkir (/akk) komutunu kullanabilirsiniz.");
			}
		}
	    return 1;
	}

	else if (!strcmp(parametrs, "bul", true) || !strcmp(parametrs, "gps", true))
	{
		if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))	return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");

		vehicle = PlayerInfo[playerid][pCarKey];

		if (!VehicleInfo[vehicle][carGps])			return SendErrorMessage(playerid, "Aracýnýzda GPS yok!");
        if (IsPlayerInVehicle(playerid, vehicle))	return SendErrorMessage(playerid, "Aracýnýzý zaten þu an kullanýyorsunuz.");
		if (!VehicleEmpty(vehicle))					return SendErrorMessage(playerid, "Birisi þu anda aracýnýzý kullanýyor.");
		if (GetVehicleInteriorEx(vehicle))			return SendErrorMessage(playerid, "Aracýnýz bulunamýyor. (interior içinde)");

		new Float:x, Float:y, Float:z;
		GetVehiclePos(vehicle, x, y, z);

		SendSyntaxMessage(playerid, "Aracýnýz \"%s\", \"%s\" alanýnda bulunuyor.", VehicleNames[GetVehicleModel(vehicle)-400], GetVehicleZone(vehicle));
		SendSyntaxMessage(playerid, "Aracýnýzýn konumu haritada iþaretlenmiþtir. (/cpsifirla) komutu ile checkpointi kaldýrabilirsiniz.");
		Waypoint_Set(playerid, x, y, z);
		return 1;
	}
	else if (!strcmp(parametrs, "bilgi", true))
	{
		if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))	return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");

  		vehicle = PlayerInfo[playerid][pCarKey];

		if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Aracýn sahibi siz deðilsiniz!");

		new title[24], diatxt[512];
		format(title, sizeof(title), "%s", VehicleNames[GetVehicleModel(vehicle)-400]);

		if (IsABicycle(vehicle))
		{
			format(diatxt, sizeof(diatxt), "Güvenlik:\n- Kilit\t[%i]\n", VehicleInfo[vehicle][carLock]);
			format(diatxt, sizeof(diatxt), "%sDiðer:\n- Birincil Renk\t[{%06x}#%i{FFFFFF}]\n- Ýkincil Renk\t[{%06x}#%i{FFFFFF}]", diatxt, VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor1]] >>> 8, VehicleInfo[vehicle][carColor1], VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor2]] >>> 8, VehicleInfo[vehicle][carColor2]);
			Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, title, diatxt, ">>", "");
			return 1;
		}

		format(diatxt, sizeof(diatxt), "{ecc317}Legal Kayýt:{FFFFFF}\n");

		if (VehicleInfo[vehicle][carRegistered]) format(diatxt, sizeof(diatxt), "%s{FFFFFF}Plaka - %s\n", diatxt, VehicleInfo[vehicle][carPlate]);
		else 									format(diatxt, sizeof(diatxt), "%s{FF6347}KAYITLI DEÐÝL{FFFFFF}\n", diatxt, VehicleInfo[vehicle][carPlate]);

		if (VehicleInfo[vehicle][carHidedPlate]) format(diatxt, sizeof(diatxt), "%s{FF6347}PLAKA GÝZLENMÝÞ{FFFFFF}\n", diatxt, VehicleInfo[vehicle][carPlate]);
		if (VehicleInfo[vehicle][carFakePlate])	format(diatxt, sizeof(diatxt), "%s{FF6347}SAHTE PLAKA TAKILI\n\t\t[%s]\n", diatxt, VehicleInfo[vehicle][carFakePlateS]);

		format(diatxt, sizeof(diatxt), "%s\n{ecc317}Genel:{FFFFFF}\n- Motor Ömrü\t\t[%.2f]\n- Akü Durumu\t\t[%.2f]\n- Yakýt\t\t[%.1f / %.0f]\n- Kilometre\t\t[%.2f]\n\n", diatxt, VehicleInfo[vehicle][carEngine], VehicleInfo[vehicle][carBattery], VehicleInfo[vehicle][carFuel], GetVehicleFuelCapacity(GetVehicleModel(vehicle)), VehicleInfo[vehicle][carMilliage]);
		format(diatxt, sizeof(diatxt), "%s{ecc317}Güvenlik:{FFFFFF}\n- Kilit Seviyesi\t\t\t[%i]\n- Alarm\t[%i]\n- Immobilizer\t[%i]\n- Sigorta\t\t[%i]\n", diatxt, VehicleInfo[vehicle][carLock], VehicleInfo[vehicle][carAlarm], VehicleInfo[vehicle][carImmob], VehicleInfo[vehicle][carInsurance]);

		if (VehicleInfo[vehicle][carArmour] > 0.0) format(diatxt, sizeof(diatxt), "%sArmor\t[%.2f]\n", diatxt, VehicleInfo[vehicle][carArmour]);

		format(diatxt, sizeof(diatxt), "%s\n{ecc317}Diðer:{FFFFFF}\n- Radyo\t\t%s\n- Birincil Renk\t\t\t[{%06x}#%i{FFFFFF}]\n- Ýkincil Renk\t\t\t[{%06x}#%i{FFFFFF}]", diatxt, (VehicleInfo[vehicle][carRadio])?("{33AA33}Bulunuyor{FFFFFF}"):("{FF6347}Bulunmuyor{FFFFFF}"), VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor1]] >>> 8, VehicleInfo[vehicle][carColor1], VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor2]] >>> 8, VehicleInfo[vehicle][carColor2]);

		Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, title, diatxt, ">>", "");
		return 1;
	}

	else if (!strcmp(parametrs, "liste", true))
	{
	    new query[256];
	    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cars` WHERE `owner` = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(dbHandle, query, "ShowCarsForPlayer", "ii", playerid, playerid);
	    return 1;
	}
	else if (!strcmp(parametrs, "ceset", true))
	{
		vehicle = GetNearVehicle(playerid, 4.0);
        if (vehicle == -1)							return SendErrorMessage(playerid, "Aracýn yakýnýnda deðilsiniz.");
 		if (!IsNearTrunk(vehicle, playerid, 2.0)) 	return SendErrorMessage(playerid, "Bagajýn yakýnýnda deðilsiniz! ");
		if (!VehicleInfo[vehicle][carTrunkLock])	return SendErrorMessage(playerid, "Bagaj açýk olmalý.");
		if (!VehicleInfo[vehicle][vCorp] && !CorpInfo[VehicleInfo[vehicle][vCorp]][cUsed]) return SendErrorMessage(playerid, "Bagajda ceset yok!");

		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

		DestroyDynamic3DTextLabel(CorpInfo[VehicleInfo[vehicle][vCorp]-1][cText]);

	    CorpInfo[VehicleInfo[vehicle][vCorp]-1][cText]=CreateDynamic3DTextLabel("(( ÖLÜ CESET ))\n'~k~~GROUP_CONTROL_BWD~' tuþuna basýn", COLOR_LIGHTRED, pos[0]+0.75, pos[1], pos[2]-0.4, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 50.0);
		CorpInfo[VehicleInfo[vehicle][vCorp]-1][cX] = pos[0]+0.75;
	    CorpInfo[VehicleInfo[vehicle][vCorp]-1][cY] = pos[1];
	    CorpInfo[VehicleInfo[vehicle][vCorp]-1][cZ] = pos[2];
	    CorpInfo[VehicleInfo[vehicle][vCorp]-1][cVeh] = 0;
		CorpInfo[VehicleInfo[vehicle][vCorp]-1][cTime] = gettime();
		if (CorpInfo[VehicleInfo[vehicle][vCorp]-1][cType] == 0) {
			CorpInfo[VehicleInfo[vehicle][vCorp]-1][cBody]=CreateDynamicActor(CorpInfo[VehicleInfo[vehicle][vCorp]-1][cSkin], pos[0]+0.75, pos[1], pos[2], 0.0);
			SetActorInvulnerable(CorpInfo[VehicleInfo[vehicle][vCorp]-1][cBody], true);
			ApplyActorAnimation(CorpInfo[VehicleInfo[vehicle][vCorp]-1][cBody], "PED", "KO_shot_stom", 4.0, 0, 0, 0, 1, 0);
		} else {
			CorpInfo[VehicleInfo[vehicle][vCorp]-1][cBody]=CreateDynamicObject(19944, pos[0]+0.75, pos[1], pos[2]-0.5, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		}

	    VehicleInfo[vehicle][vCorp]=0;
		SM2(playerid, "Bagajdan ceseti çýkardýnýz.");
		return 1;
	}
	else if (!strcmp(parametrs, "sistemesat", true))
	{
		new veh = PlayerInfo[playerid][pCarKey], lockuse[200], alarmuse[300], immobuse[300], insuranceuse[350], xmradiouse[50], gpsuse[50], string1[1250];

		if (!IsValidVehicle(veh))											return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");
		if (!IsPlayerInAnyVehicle(playerid))								return SendNotInVehicle(playerid);
		if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Aracýn sahibi siz deðilsiniz!");

		if (VehicleInfo[veh][carLock] == 1) 	 lockuse = "{a9c4e4}Kilit: \t{bab9ba}1 seviye\t{e2bd63}$3.500\n{4af085}+{e2bd63}120 saniye içerisinde kýrýlabilir.\n\n";
		else if (VehicleInfo[veh][carLock] == 2) lockuse = "{a9c4e4}Kilit: \t{bab9ba}2 seviye\t{e2bd63}$5.500\n{4af085}+{e2bd63}180 saniye içerisinde kýrýlabilir.\n\n";
		else if (VehicleInfo[veh][carLock] == 3) lockuse = "{a9c4e4}Kilit: \t{bab9ba}3 seviye\t{e2bd63}$7.500\n{4af085}+{e2bd63}240 saniye içerisinde kýrýlabilir.\n\n";
		else if (VehicleInfo[veh][carLock] == 4) lockuse = "{a9c4e4}Kilit: \t{bab9ba}4 seviye\t{e2bd63}$10.500\n{4af085}+{e2bd63}300 saniye içerisinde kýrýlabilir.\n\n";
		else if (VehicleInfo[veh][carLock] == 5) lockuse = "{a9c4e4}Kilit: \t{bab9ba}5 seviye\t{e2bd63}$13.500\n{4af085}+{e2bd63}360 saniye içerisinde kýrýlabilir.\n\n";

		if (VehicleInfo[veh][carAlarm] == 1) 		alarmuse = "{a9c4e4}Alarm: \t{bab9ba}1 seviye\t{e2bd63}$2.600\n{f0634a}+{e2bd63}Yüksek sesli araç alarmý.\n";
		else if (VehicleInfo[veh][carAlarm] == 2) 	alarmuse = "{a9c4e4}Alarm: \t{bab9ba}2 seviye\t{e2bd63}$5.500\n{f0634a}+{e2bd63}Yüksek sesli araç alarmý\n{f0634a}+{e2bd63}Alarm çalmasý durumunda polis departmanýna haber verilir.\n\n";
		else if (VehicleInfo[veh][carAlarm] == 3) 	alarmuse = "{a9c4e4}Alarm: \t{bab9ba}3 seviye\t{e2bd63}$8.000\n{f0634a}+{e2bd63}Yüksek sesli araç alarmý.\n{f0634a}+{e2bd63}Alarm çalmasý durumunda polis departmanýna haber verilir.\n{f0634a}+{e2bd63}SMS ile bildirim\n\n";
		else if (VehicleInfo[veh][carAlarm] == 4) 	alarmuse = "{a9c4e4}Alarm: \t{bab9ba}4 seviye\t{e2bd63}$10.500\n{f0634a}+{e2bd63}Yüksek sesli araç alarmý.\n{f0634a}+{e2bd63}Alarm çalmasý durumunda polis departmanýna haber verilir.\n{f0634a}+{e2bd63}SMS ile bildirim\n{f0634a}+{e2bd63}Araç bilgisi gpsiniz üzerinde iþaretlenir.\n\n";

		if (VehicleInfo[veh][carImmob] == 1) 		immobuse = "{a9c4e4}Immobilizer: \t{bab9ba}1 seviye\t{e2bd63}$5.600\n{feff00}+{e2bd63}25 saniye düz kontak uygulama süresini arttýrýr.\n\n";
		else if (VehicleInfo[veh][carImmob] == 2) 	immobuse = "{a9c4e4}Immobilizer: \t{bab9ba}2 seviye\t{e2bd63}$11.300\n{feff00}+{e2bd63}50 saniye düz kontak uygulama süresini arttýrýr.\n\n";
		else if (VehicleInfo[veh][carImmob] == 3) 	immobuse = "{a9c4e4}Immobilizer: \t{bab9ba}3 seviye\t{e2bd63}$17.000\n{feff00}+{e2bd63}75 saniye düz kontak uygulama süresini arttýrýr.\n\n";
		else if (VehicleInfo[veh][carImmob] == 4) 	immobuse = "{a9c4e4}Immobilizer: \t{bab9ba}4 seviye\t{e2bd63}$22.600\n{feff00}+{e2bd63}100 saniye düz kontak uygulama süresini arttýrýr.\n\n";

		if (VehicleInfo[veh][carInsurance] == 1) 		insuranceuse = "{a9c4e4}Sigorta: \t{bab9ba}1 seviye\t{e2bd63}$5.600\n{4a90f0}+{e2bd63}Aracýnýz her zaman tamir edilmiþ þekilde býrakýlýr.\n\n";
		else if (VehicleInfo[veh][carInsurance] == 2) 	insuranceuse = "{a9c4e4}Sigorta: \t{bab9ba}2 seviye\t{e2bd63}$11.300\n{4a90f0}+{e2bd63}Aracýnýz her zaman tamir edilmiþ þekilde býrakýlýr..\n{4a90f0}+{e2bd63}Araç hasarýna karþý koruma, aracýnýz sigorta sayesinde yeni gibi duracak.\n\n";
		else if (VehicleInfo[veh][carInsurance] == 3)	insuranceuse = "{a9c4e4}Sigorta: \t{bab9ba}3 seviye\t{e2bd63}$17.000\n{4a90f0}+{e2bd63}Aracýnýz her zaman tamir edilmiþ þekilde býrakýlýr..\n{4a90f0}+{e2bd63}Araç hasarýna karþý koruma, aracýnýz sigorta sayesinde yeni gibi duracak.\n{4a90f0}+{e2bd63}Araç modifikasyonlarý korunur.\n\n";

		if (VehicleInfo[veh][carRadio] == 1) xmradiouse = "{a9c4e4}Radyo:\t{e2bd63}$7.500\n";
		if (VehicleInfo[veh][carGps] == 1) gpsuse = "{a9c4e4}GPS:\t{e2bd63}$3.500\n";

		new mes[56];

		if (IsABicycle(veh))	format(mes, sizeof(mes), "{33AA33}%s", VehicleNames[VehicleInfo[veh][carModel]-400]);
		else
		{
			if (VehicleInfo[veh][carRegistered])	format(mes, sizeof(mes), "{FFFFFF}%s [%s]", VehicleNames[VehicleInfo[veh][carModel]-400], VehicleInfo[veh][carPlate]);
			else								format(mes, sizeof(mes), "{FFFFFF}%s", VehicleNames[VehicleInfo[veh][carModel]-400]);
		}

		format(string1, sizeof(string1), "{ffffff}Satýþ fiyatý:\t\t{e2bd63}$%i\n{ffffff}Maksimum can:\t{e2bd63}%.2f\n\n%s%s%s%s%s%s", GetVehiclePrice(VehicleInfo[veh][carModel])/2, GetVehicleMaxHealth(GetVehicleModel(veh)), lockuse, alarmuse, immobuse, insuranceuse, xmradiouse, gpsuse);
		Dialog_Show(playerid, ScrapSell, DIALOG_STYLE_MSGBOX, mes, string1, "Kabul", "Ýptal");
		return 1;
	}
	else
	{
		SendHelpMessage(playerid, "/(a)rac [seçenekler]");
		SendSyntaxMessage(playerid, "liste | getir | park | bul/gps | kilit | plakagizle | sahteplaka");
		SendSyntaxMessage(playerid, "ceset | cek | bilgi | cezalar | sistemesat | sat | dmvkayit");
		SendClientMessageEx(playerid, COLOR_GRAD2, "[EKSTRA]{FFFFFF} /aracmenu /araclarim /ahe /motor /farlar /bagaj /kaput /radyoayarla /cam /hacizdencikar");
	}
	return 1;
}

CMD:aracbirliktencikar(playerid, params[])
{
    if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))	 return SendErrorMessage(playerid, "Araçta deðilsiniz");
	if (!IsPlayerInAnyVehicle(playerid)) return SendNotInVehicle(playerid);

	new vehicle = PlayerInfo[playerid][pCarKey];

	if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Aracýn sahibi deðilsiniz!");

	VehicleInfo[vehicle][carFaction] = 0;
	SendSyntaxMessage(playerid, "Aracýnýz eðer birlikteyse birlikten baþarýyla çýkartýldý.");
	return 1;
}


CMD:dmvkayit(playerid, params[])
{
    if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))					return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");
	new vehicle = PlayerInfo[playerid][pCarKey];

	if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])		return SendErrorMessage(playerid, "Aracýn sahibi siz deðilsiniz!");
	if (IsABicycle(vehicle))												return SendErrorMessage(playerid, "Bisikleti sisteme kayýt ettiremezsiniz.");
	if (VehicleInfo[vehicle][carEngineOn])									return SendErrorMessage(playerid, "Aracýnýzda deðiþiklik yapmadan önce motoru durdurun!");
	if (VehicleInfo[vehicle][carRegistered])								return SendErrorMessage(playerid, "Bu araç zaten sisteme kayýtlý.");
	if (GetCash(playerid) < 300)											return SendNotCash(playerid);

	StartVehicleUpgrade(playerid, vehicle, 7, 300);
	SendSyntaxMessage(playerid, "Sisteme kayýt iþlemi baþladý, biraz zaman alabilir.");
	return 1;
}

CMD:dmvkayitsil(playerid, params[])
{
    if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))					return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");

	new vehicle = PlayerInfo[playerid][pCarKey];

	if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Aracýn sahibi siz deðilsiniz!");
	if (IsABicycle(vehicle))												return SendErrorMessage(playerid, "Bisikleti sisteme kayýt ettiremezsiniz.");
	if (VehicleInfo[vehicle][carEngineOn])								return SendErrorMessage(playerid, "Aracýnýzda deðiþiklik yapmadan önce motoru durdurun!");
	if (!VehicleInfo[vehicle][carRegistered])							return SendErrorMessage(playerid, "Bu araç sisteme kayýtlý deðil.");
	if (GetCash(playerid) < 300)											return SendNotCash(playerid);

	StartVehicleUpgrade(playerid, vehicle, 8, 300);
	SendSyntaxMessage(playerid, "Sistemden kayýt silme iþlemi baþladý, biraz zamana alabilir.");
	return 1;
}


CMD:farlar(playerid, params[])
{
	if (!IsDriver(playerid))	return SendNotInVehicle(playerid);

	new vehicleid = GetPlayerVehicleID(playerid), mes[128];
	new engine,lights,alarm,doors,bonnet,boot,objective;
	if (PlayerInfo[playerid][pInjured])  return SendErrorMessage(playerid, "Yaralýyken bu komutu kullanamazsýn.");

    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);

	if (lights)
	{
		format(mes, sizeof(mes), "%s model aracýn farlarýný kapatýr.", VehicleNames[GetVehicleModel(vehicleid)-400]);
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);
		format(mes, sizeof(mes), "~w~%s farlari ~r~kapandi", VehicleNames[GetVehicleModel(vehicleid)-400]);
		GameTextForPlayer(playerid, mes, 2500, 4);
		VehicleInfo[vehicleid][carLights] = 0;
		VehicleLight(vehicleid, false);
		return 1;
	}

	format(mes, sizeof(mes), "%s model aracýn farlarýný açar.", VehicleNames[GetVehicleModel(vehicleid)-400]);
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);

	format(mes, sizeof(mes), "~w~%s farlari ~g~acildi", VehicleNames[GetVehicleModel(vehicleid)-400]);
	GameTextForPlayer(playerid, mes, 2500, 4);
    VehicleInfo[vehicleid][carLights] = 1;
	VehicleLight(vehicleid, true);
	return 1;
}

CMD:alarmkapat(playerid, params[])
{
    if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))						return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý!");
	if (!GetNearVehicle(playerid, 10.0, PlayerInfo[playerid][pCarKey]))		return SendErrorMessage(playerid, "Aracanýza yakýn olmalýsýnýz.");

    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(PlayerInfo[playerid][pCarKey],engine,lights,alarm,doors,bonnet,boot,objective);

	if (alarm < 1)	return SendErrorMessage(playerid, "Alarm çalýþmýyor.");

	AlarmOff(PlayerInfo[playerid][pCarKey]);
	SendWarningMessage(playerid, "Alarmý devre dýþý býraktýnýz.");
	return 1;
}

alias:camlar("cam");
CMD:camlar(playerid, params[])
{
    if (!IsPlayerInAnyVehicle(playerid))				return SendNotInVehicle(playerid);

	new vehicle = GetPlayerVehicleID(playerid), seat = AntiCheatGetVehicleSeat(playerid), model = GetVehicleModel(vehicle), wi;

    if (IsADontWindow(vehicle))						return SendErrorMessage(playerid, "Bu aracýn penceresi yoktur.");

	new mes[128];

    new driver, passenger, backleft, backright;
	GetVehicleParamsCarWindows(vehicle, driver, passenger, backleft, backright);

    if (driver == 0)
	{
		format(mes, sizeof(mes), "tüm pencereleri kapattý. (%s)",VehicleNames[model-400]);
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);

		GameTextForPlayer(playerid, "~w~pencere ~g~kapandi", 2500, 4);
		SetVehicleParamsCarWindows(vehicle, 1, 1, 1, 1);
	}
	else
	{
		format(mes, sizeof(mes), "tüm pencereleri açtý. (%s)",VehicleNames[model-400]);
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);

		GameTextForPlayer(playerid, "~w~pencere ~g~acildi", 2500, 4);
		SetVehicleParamsCarWindows(vehicle, 0, 0, 0, 0);
	}
	return 1;
}

CMD:araclarim(playerid, params[])
{
	new query[64 + 64];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cars` WHERE `owner`=%d", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "ShowListVeh", "i", playerid);
	return 1;
}

alias:ahe("arachizlierisim");
CMD:ahe(playerid, params[])
{
	new vehicle;
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Bir araç kullanýyor olmalýsýnýz.");
	if (!(vehicle = GetPlayerVehicleID(playerid))) 		 return SendErrorMessage(playerid, "Bir araç kullanýyor olmalýsýnýz.");

	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);

	static mestxt[] = "{FFFFFF} Motoru %s\t{C7C7C7}/motor\n\
					{FFFFFF} Kapýlarý %s\t{C7C7C7}/kilit\n\
					{FFFFFF} Farlarý %s\t{C7C7C7}/farlar\n\
					{FFFFFF} Bagajý %s\t{C7C7C7}/bagaj\n\
					{FFFFFF} Kaputu %s\t{C7C7C7}/kaput\n\
					{FFFFFF} Sürücü penceresi\t{C7C7C7}/camlar\n\
					{FFFFFF} Radyo\t{C7C7C7}/radyoayarla%s";

	new mes[sizeof(mestxt) + 90];

	format(mes, sizeof(mes), mestxt,
		(!engine)?("çalýþtýr"):("durdur"),
		(doors)?("aç"):("kilitle"),
		(!lights)?("aç"):("kapat"),
		(!boot)?("aç"):("kapat"),
		(!bonnet)?("aç"):("kapat"),
		(PlayerInfo[playerid][pCarKey] == vehicle)?("\n	\n{FF6347}> Araç paneli <"):("")
	);

	new title[39];
	format(title, sizeof(title), "{FFFFFF}%s", VehicleNames[GetVehicleModel(vehicle)-400]);

	Dialog_Show(playerid, VehFastAccess, DIALOG_STYLE_TABLIST, title, mes, "Seç", "Ýptal");
	return 1;
}

CMD:aracmenu(playerid, params[])
{
	if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))	return SendErrorMessage(playerid,"Aracýnýz spawnlanmadý!");

	new vehicle = PlayerInfo[playerid][pCarKey];
	if (!vehicle) return 1;

	static mestxt[] = ""EMBED_SERVER2" Araç istatistikleri\n\
					 Ödenmemiþ cezalar\n\
					 Aracý park et\n\
					 GPS ile aracý bul\n\
					 Alarmý devre dýþý býrak[ %s{FFFFFF} ]\n\
					 Aracý sisteme sat\n\
					 Aracý kiþiye sat";
	new mes[sizeof(mestxt)+12],engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(PlayerInfo[playerid][pCarKey],engine,lights,alarm,doors,bonnet,boot,objective);

	format(mes, sizeof(mes), mestxt, (alarm)?("{00E100}AÇIK"):("{FF6347}KAPALI"));

	new title[39];
	format(title, sizeof(title), "{FFFFFF}%s", VehicleNames[GetVehicleModel(vehicle)-400]);
	Dialog_Show(playerid, VehMenu, DIALOG_STYLE_LIST, title, mes, "Seç", "Ýptal");
	return 1;
}

CMD:benzin(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);

	if (!GetPVarInt(playerid, #UsePump)) {
		new price, Float: f_price, bizid;
		if (!IsDriver(playerid))					return SendNotInVehicle(playerid);
		if ((bizid = AZC_Nearest(playerid)) == -1)	return SendErrorMessage(playerid, "Yakýnýzda benzin alabileceðin bir istasyon yok.");
		if (BizInfo[bizid][bizLocked])				return GameTextForPlayer(playerid, "~r~BENZIN ISTASYONU KAPALI!", 2500, 1);
		if (VehicleInfo[vehicle][carEngineOn]) 		return SendErrorMessage(playerid, "Aracýn motorunu durdurun.");

		new modelid = GetVehicleModel(vehicle);

		if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nEngineType") == 'P') 	  f_price = float(BizInfo[bizid][bizEntrance]) * 1.2;
		else if (GetVehicleModelInfoAsInt(modelid, "TransmissionData_nEngineType") == 'E') f_price = float(BizInfo[bizid][bizEntrance]) * 0.8;
		else f_price = float(BizInfo[bizid][bizEntrance]);

		price = floatround(f_price, floatround_ceil);
		if (GetCash(playerid) < price) return SendNotCash(playerid);

		new str[128];
		format(str, sizeof(str), "$%i/L karþýlýðýnda yakýt almak istiyor musunuz?", price);
 		ConfirmDialog(playerid, "Araç yakýt", str, "ConfirmFilling");
	} else {
		Fuel_ResetPlayer(playerid);
		ToggleVehicleEngine(vehicle, playerid);
	}
	return 1;
}

alias:motor("aracmotor");
CMD:motor(playerid, params[])
{
	if (!IsDriver(playerid)) return 1;

	new vehicle = GetPlayerVehicleID(playerid);

	if (PlayerInfo[playerid][MissionTime])											 return 1;
	if (PlayerInfo[playerid][pKelepceli])     										 return SendCuffedMessage(playerid);
	if (PlayerInfo[playerid][pInjured])                                              return SendErrorMessage(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if (IsADMVCar(vehicle) || IsADMVHeli(vehicle) || IsABicycle(vehicle))			 return SendErrorMessage(playerid, "Bu aracýn motorunu çalýþtýramazsýnýz.");
	if (VehicleInfo[vehicle][carFuel] == 0.0)										 return SendErrorMessage(playerid, "Araçta benzin bulunmamakta.");
	if (GetPVarInt(playerid, #UsePump))												 return pc_cmd_benzin(playerid, "");
    if (VehicleInfo[vehicle][carOwnerID] && VehicleInfo[vehicle][carEngine] <= 0.0)	 return SendErrorMessage(playerid, "Aracýn motoru çalýþmýyor.");
    if (VehicleInfo[vehicle][carOwnerID] && VehicleInfo[vehicle][carBattery] <= 0.0) return SendErrorMessage(playerid, "Aracýn aküsü çalýþmýyor.");
	if (IsRentCar(vehicle) && pTemp[playerid][pRentveh] != vehicle) 				 return SendErrorMessage(playerid, "Önce aracý kiralamalýsýnýz.");
	if (VehicleInfo[vehicle][Impounded])											 return SendErrorMessage(playerid, "Araç park halindeyken bu komutu kullanamazsýnýz. (/hacizdencikar) komutunu kullanabilirsiniz.");

	if (VehicleInfo[vehicle][carFaction] &&
		VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])			return 1;

	if (	VehicleInfo[vehicle][carType] >= RENT_CAR &&
		VehicleInfo[vehicle][carType] <= MINER_CAR &&
		pTemp[playerid][pRentveh] != vehicle)	return SendErrorMessage(playerid, "Önce aracý kiralayýn /meslekarackirala(/mak).");

    if(pTemp[playerid][pRentveh] == vehicle) return ToggleVehicleEngine(vehicle, playerid);

	if ((VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] == PlayerInfo[playerid][pFaction])
		|| pTemp[playerid][pRentveh] == vehicle
		|| PlayerInfo[playerid][pCarKey] == vehicle
		|| (PlayerInfo[playerid][pSpareKey] == VehicleInfo[vehicle][carID] && PlayerInfo[playerid][pSpareKey] != 0))
	{
		ToggleVehicleEngine(vehicle, playerid);
	}
	else
	{
		if (!VehicleInfo[vehicle][carEngineOn])
		{

			if (!IsPlayerHasItem(playerid, INV_TOOLS)) 	 return SendErrorMessage(playerid, "Motoru düzkontak yoluyla çalýþtýrmak için gerekli araçlara sahip deðilsin.");

			if (!PoliceOnline())						 return SendErrorMessage(playerid, "Oyunda en az %i polis memuru olmalý.", NEED_COPS_TO_CRIME);
			if (VehicleInfo[vehicle][carOwnerID] == INVALID_PLAYER_ID)   return SendErrorMessage(playerid, "Sadece oyuncularýn aldýðý araçlar düzkontaklanabilir.");
			if (JackingEngine[playerid] != 0)            return SendErrorMessage(playerid, "Zaten motoru çalýþtýrmaya çalýþýyorsun!");

			static const str_size[] = "{"COL_GREY"} %s model aracýn motorunu düzkontak yapmaya baþlamak ister misin?";
			new mes[sizeof(str_size) - 4 + 1 + 31 + 7];
			format(mes, sizeof(mes), str_size, VehicleNames[GetVehicleModel(vehicle)-400]); //(VehicleInfo[vehicle][carImmob]+1) * 20
			Dialog_Show(playerid, StartJackingEngine, DIALOG_STYLE_MSGBOX, "{FFFFFF}Düz kontak iþlemi uyguluyorsun", mes, ">>>", "Ýptal");
			return 1;
		}
	}
	return 1;
}

CMD:anahtarat(playerid, params[])
{
	if (!PlayerInfo[playerid][pSpareKey])	return SendErrorMessage(playerid, "Anahtarýnýz yok.");

	PlayerInfo[playerid][pSpareKey] = 0;
	SendSyntaxMessage(playerid, "Anahtarlarý yere attýnýz.");
	return 1;
}

CMD:callsign(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid), string[128];

	if (!IsDriver(playerid))	return SendNotInVehicle(playerid);
	if (isnull(params))			return SendHelpMessage(playerid, "/callsign [yazý]");
	if (strlen(params) > 84)	return SendErrorMessage(playerid, "Girilen deðer maksimum 84 karakter olmalýdýr.");

	if (strlen(params) > 28)
	{
		new pos = 28, string1[30], string2[30], string3[30];

		if (pos < 28-1) pos = 28;

		if (strlen(params[pos]) > 28)
		{
			format(string1, sizeof(string1), "%.*s", pos, params);
			format(string2, sizeof(string2), "%.*s", pos, params[pos]);
			format(string3, sizeof(string3), "%.*s", pos, params[pos+pos]);
			format(string, sizeof(string), "%s\n%s\n%s", string1, string2, string3);
		}
		else
		{
			format(string1, sizeof(string1), "%.*s", pos, params);
			format(string2, sizeof(string2), "%s", params[pos]);
			format(string, sizeof(string), "%s\n%s", string1, string2);
		}
	}
	else
	{
		format(string, sizeof(string), "%s",params);
	}

	new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionLegal(faction))
		return SCM(playerid, COLOR_LIGHTRED, "Sadece polis ve paramedikler kendine ait olmayan birlik araçlarýna etiket yerleþtirebilir.");

	if (!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "Görev baþýnda olmalýsýnýz. (/isbasi).");

	if (VehicleInfo[vehicle][carFaction] != faction)
	    return SendErrorMessage(playerid, "Bu araç birliðinize ait deðildir.");

	SendHelpMessage(playerid, "Tekrar /callsign yazarak kaldýrabilirsiniz.");
	if (!IsValidDynamic3DTextLabel(veicolo_callsign_testo[vehicle]))
	{
	    new Float: x,
	        Float: y,
	        Float: z;
        GetCarsignPosition(vehicle, x, y, z);
		veicolo_callsign_testo[vehicle] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, -x, y, z, 40.0, INVALID_PLAYER_ID, vehicle, 1, -1, 0);
		SendServerMessage(playerid, "%s isimli callsign eklendi.", string);
	}
    else if (IsValidDynamic3DTextLabel(veicolo_callsign_testo[vehicle]))
	{
		DestroyDynamic3DTextLabel(veicolo_callsign_testo[vehicle]);
        veicolo_callsign_testo[vehicle] = Text3D:INVALID_3DTEXT_ID;
		SendServerMessage(playerid, "Callsign kaldýrýldý.");
	}
	return 1;
}

CMD:aracilan(playerid,params[])
{
	new vehicle = GetPlayerVehicleID(playerid), string[128];

	if (!IsDriver(playerid))	return SendNotInVehicle(playerid);
	if (isnull(params))			return SendHelpMessage(playerid, "/aracilan [yazý]");
	if (IsABicycle(vehicle))	return SendErrorMessage(playerid,"Bu araca etiket belirleyemezsiniz.");
	if (strlen(params) > 84)	return SendErrorMessage(playerid, "Girilen deðer maksimum 84 karakter olmalýdýr..");

	if (strlen(params) > 28)
	{
		new pos = 28, string1[30], string2[30], string3[30];

		if (pos < 28-1) pos = 28;

		if (strlen(params[pos]) > 28)
		{
			format(string1, sizeof(string1), "%.*s", pos, params);
			format(string2, sizeof(string2), "%.*s", pos, params[pos]);
			format(string3, sizeof(string3), "%.*s", pos, params[pos+pos]);
			format(string, sizeof(string), "%s\n%s\n%s", string1, string2, string3);
		}
		else
		{
			format(string1, sizeof(string1), "%.*s", pos, params);
			format(string2, sizeof(string2), "%s", params[pos]);
			format(string, sizeof(string), "%s\n%s", string1, string2);
		}
	}
	else
	{
		format(string, sizeof(string), "%s",params);
	}

	if (PlayerInfo[playerid][pCarKey] == vehicle)
	{
		if (PlayerInfo[playerid][pCarKey] != vehicle)	return SendErrorMessage(playerid, "Etiketler yalnýzca kiþisel araçlara takýlabilir.");

		SendHelpMessage(playerid, "/arac ilankaldir - etiketi geri kaldýrýrsýnýz.");
		if (!IsValidDynamic3DTextLabel(veicolo_callsign_testo[vehicle]))
		{
		    new Float: x, Float: y, Float: z;
        	GetCarsignPosition(vehicle, x, y, z);
			veicolo_callsign_testo[vehicle] = CreateDynamic3DTextLabel(string,0x33AA33FF, -x, y, z, 20.0, INVALID_PLAYER_ID, vehicle, 1, -1, 0);
		}
		else	UpdateDynamic3DTextLabelText(veicolo_callsign_testo[vehicle], 0x33AA33FF, string);

		RemovePlayerItem(playerid, INV_SIGN, 1);

		return 1;
	}

	new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionLegal(faction))
		return SCM(playerid, COLOR_LIGHTRED, "Sadece polis ve paramedikler kendine ait olmayan birlik araçlarýna etiket yerleþtirebilir.");

	if (!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "Görev baþýnda olmalýsýnýz. (/isbasi).");

	if (VehicleInfo[vehicle][carFaction] != faction)
	    return SendErrorMessage(playerid, "Bu araç birliðinize ait deðildir.");

	SendHelpMessage(playerid, "/arac ilankaldir - araba etiketini kaldýrma.");
	if (!IsValidDynamic3DTextLabel(veicolo_callsign_testo[vehicle]))
	{
	    new Float: x,
	        Float: y,
	        Float: z;
        GetCarsignPosition(vehicle, x, y, z);
		veicolo_callsign_testo[vehicle] = CreateDynamic3DTextLabel(string,0xFFFFFFFF, -x, y, z, 40.0, INVALID_PLAYER_ID, vehicle, 1, -1, 0);
	}
	else
		UpdateDynamic3DTextLabelText(veicolo_callsign_testo[vehicle], 0xFFFFFFFF, string);
	return 1;
}

CMD:ilankaldir(playerid,params[])
{
    if (!IsDriver(playerid))	return SendNotInVehicle(playerid);

	new vehicle = GetPlayerVehicleID(playerid);
    if (PlayerInfo[playerid][pCarKey] != vehicle)	return SendErrorMessage(playerid, "Bu komutu kullanmaya yetkiniz yok.");

    if (IsValidDynamic3DTextLabel(veicolo_callsign_testo[vehicle]))
	{
		DestroyDynamic3DTextLabel(veicolo_callsign_testo[vehicle]);
        veicolo_callsign_testo[vehicle] = Text3D:INVALID_3DTEXT_ID;
	}
	return 1;
}

CMD:durdur(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured]) return 1;

	/*if (JackingEngine[playerid] != 0)
	{
		JackingEngine[playerid] = 0;
		UnFreezePlayer(playerid);
		SendSyntaxMessage(playerid, "Âû îñòàíîâor âçëîì äâèãàòåëÿ.");
	}

	if (JackingLock[playerid] != 0)
	{
		JackingLock[playerid] = 0;
		JackingVehicle[playerid] = 0;
		UnFreezePlayer(playerid);
		SendSyntaxMessage(playerid, "Âû îñòàíîâor âçëîì äâåðåé.");
	}*/

	if (pTemp[playerid][pPlantTime] != 0)
	{
		UnFreezePlayer(playerid);
		StopPlayerAnims(playerid);
		pTemp[playerid][pPlantTime] = 0;
		pTemp[playerid][pPlantType] = 0;
		SendSyntaxMessage(playerid, "Tohum ekmeyi býraktýn.");
	}

	if (pTemp[playerid][pFireTime] != 0)
	{
		StopCreatingPlayersFire(playerid);
		SendSyntaxMessage(playerid, "Ateþ yakmayý býraktýn.");
	}
	return 1;
}

CMD:bagaj(playerid, params[])
{
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicle = GetPlayerVehicleID(playerid);

	    if (IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))	return SendErrorMessage(playerid, "Bu aracýn bagajý bulunmuyor.");
		if (VehicleInfo[vehicle][carLocked] || (IsRentCar(vehicle) && !VehicleInfo[vehicle][carRent]))												return SendErrorMessage(playerid, "Bu araç kilitli. ");
        if (!GetPlayerHasRightTrunk(playerid, vehicle)) return SendErrorMessage(playerid, "Bu aracýn bagajýný açamazsýnýz.");

		if (VehicleInfo[vehicle][carTrunkLock] == 1)
		{
		    new mes[56];
			format(mes, sizeof(mes), "~w~BAGAJ %s ~r~KAPANDI", VehicleNames[GetVehicleModel(vehicle)-400]);
			GameTextForPlayer(playerid, mes, 3000, 3);

			VehicleTrunk(vehicle, false);
			SendSyntaxMessage(playerid, "Aracýn bagajýný kapattýnýz.");
			return 1;
		}
		else
		{
			new mes[56];
	        format(mes, sizeof(mes), "~w~BAGAJ %s ~g~ACILDI", VehicleNames[GetVehicleModel(vehicle)-400]);
			GameTextForPlayer(playerid, mes, 3000, 3);

			VehicleTrunk(vehicle, true);
			SendSyntaxMessage(playerid, "Aracýn bagajýný açtýnýz.");
			SendHelpMessage(playerid, "Etkileþime girmek için N tuþuna basýn.");

			if (vehicle != 0 && (!IsADontTrunk(vehicle) || !IsAPlane(vehicle) || !IsABiker(vehicle) || !IsAHelicopter(vehicle) || !IsABoat(vehicle) || !IsABicycle(vehicle)))
			{
				if ((VehicleInfo[vehicle][carTrunkLock] && !IsPlayerInAnyVehicle(playerid)) || (IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] == PlayerInfo[playerid][pFaction]))
				{
					PrintVehInv(playerid, vehicle);
				}
			}

		}
		return 1;
	}

	new vehicle = GetNearVehicle(playerid, 4.0);
	if (vehicle == -1)							return SendErrorMessage(playerid, "Aracýn yakýnýnda deðilsiniz.");
    if (!IsNearTrunk(vehicle, playerid, 5.0)) 	return SendErrorMessage(playerid, "Bagajýn yakýnýnda deðilsiniz! ");

	if (VehicleInfo[vehicle][carOwnerID] && PlayerInfo[playerid][pCarKey] != vehicle)							return SendErrorMessage(playerid, "Bu araç size ait deðil.");
    if (VehicleInfo[vehicle][carFaction] && PlayerInfo[playerid][pFaction] != VehicleInfo[vehicle][carFaction])	return SendErrorMessage(playerid, "Bu araç baþka bir birliðe ait.");
    if (VehicleInfo[vehicle][carLocked] || (IsRentCar(vehicle) && VehicleInfo[vehicle][carRent]))				return SendErrorMessage(playerid, "Araç kilitli.");

    if (VehicleInfo[vehicle][carTrunkLock] == 1)
	{
	    new mes[56];
		format(mes, sizeof(mes), "~w~BAGAJ %s ~r~KAPANDI", VehicleNames[GetVehicleModel(vehicle)-400]);
		GameTextForPlayer(playerid, mes, 3000, 3);

		VehicleTrunk(vehicle, false);
		SendSyntaxMessage(playerid, "Aracýn bagajýný kapattýnýz.");
		return 1;
	}
	else
	{
		new mes[56];
        format(mes, sizeof(mes), "~w~BAGAJ %s ~g~ACILDI", VehicleNames[GetVehicleModel(vehicle)-400]);
		GameTextForPlayer(playerid, mes, 3000, 3);


		if (vehicle != 0 && (!IsADontTrunk(vehicle) || !IsAPlane(vehicle) || !IsABiker(vehicle) || !IsAHelicopter(vehicle) || !IsABoat(vehicle) || !IsABicycle(vehicle)))
		{
			if ((VehicleInfo[vehicle][carTrunkLock] && !IsPlayerInAnyVehicle(playerid)) || (IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] == PlayerInfo[playerid][pFaction]))
			{
				PrintVehInv(playerid, vehicle);
			}
		}

		VehicleTrunk(vehicle, true);
		SendSyntaxMessage(playerid, "Aracýn bagajýný açtýnýz.");
	}
	return 1;
}

CMD:kaput(playerid, params[])
{
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicle = GetPlayerVehicleID(playerid);

		if (IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))	return SendErrorMessage(playerid, "Bu aracýn kaputu yok");
		if (VehicleInfo[vehicle][carLocked])																				return SendErrorMessage(playerid, "Kilitli aracýn kaputunu açamazsýn.");

		if (VehicleInfo[vehicle][carHoodLock] == 1)
		{
		    new mes[56];
			format(mes, sizeof(mes), "~w~%s KAPUT ~r~KAPANDI", VehicleNames[GetVehicleModel(vehicle)-400]);
			GameTextForPlayer(playerid, mes, 3000, 3);

			VehicleHood(vehicle, false);
			SendSyntaxMessage(playerid, "Aracýn kaputunu kapattýnýz.");
			return 1;
		}
		else
		{
			new mes[56];
	        format(mes, sizeof(mes), "~w~%s KAPUT ~g~ACILDI", VehicleNames[GetVehicleModel(vehicle)-400]);
			GameTextForPlayer(playerid, mes, 3000, 3);

			VehicleHood(vehicle, true);
			SendSyntaxMessage(playerid, "Aracýn kaputunu açtýnýz.");
		}
		return 1;
	}

	new vehicle = 0;

	foreach(new i : Vehicle)
	{
	    if (IsAPlane(i) || IsABiker(i) || IsAHelicopter(i) || IsABoat(i) || IsABicycle(i) || !IsOnHoodVehicle(playerid, i)) continue;

	    vehicle = i;
		break;
	}

	if (!vehicle)							return SendErrorMessage(playerid, "Yakýnýnýzda kaputlu bir araç yok.");
    if (VehicleInfo[vehicle][carLocked])	return SendErrorMessage(playerid, "Araç kilitli.");
    if (VehicleInfo[vehicle][carHoodLock] == 1)
	{
	    new mes[56];
		format(mes, sizeof(mes), "~w~%s KAPUT ~r~KAPANDI", VehicleNames[GetVehicleModel(vehicle)-400]);
		GameTextForPlayer(playerid, mes, 3000, 3);

		VehicleHood(vehicle, false);
		SendSyntaxMessage(playerid, "Aracýn kaputunu kapattýnýz.");
		return 1;
	}
	else
	{
		new mes[56];
        format(mes, sizeof(mes), "~w~%s KAPUT ~g~ACILDI", VehicleNames[GetVehicleModel(vehicle)-400]);
		GameTextForPlayer(playerid, mes, 3000, 3);

		VehicleHood(vehicle, true);
		SendSyntaxMessage(playerid, "Aracýn kaputunu açtýnýz.");
	}
	return 1;
}

alias:kilitkiriptal("kki","kilitiptal");
CMD:kilitkiriptal(playerid, params[])
{
	if (pTemp[playerid][JackingType] == 0)  return SendErrorMessage(playerid, "Kilit kýrmýyorsunuz.");
	pTemp[playerid][JackingType] = 0;
	TogglePlayerControllable(playerid, true);
	DeletePVar(playerid, JackingVehicle);
	SendSyntaxMessage(playerid,"Kilit kýrma iþlemini iptal ettiniz.");
	BreakingHouse[playerid] = -1;
	JackingVehicle[playerid] = -1;
	JackingLock[playerid] = 0;
	return 1;
}

alias:arackilitkir("akk");
CMD:arackilitkir(playerid, params[])
{
	if (!PoliceOnline())	return SendErrorMessage(playerid, "Oyunda en az %i polis memuru olmalý.", NEED_COPS_TO_CRIME);

	new vehid = Arac_Yakin(playerid, 3.0);
	if (!vehid)	return SendErrorMessage(playerid, "Yakýnýnýzda araç yok.");

	if (VehicleInfo[vehid][carOwnerID] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pSpareKey] == VehicleInfo[vehid][carOwnerID])
		return SendErrorMessage(playerid, "Kendi aracýnýzý çalamazsýnýz!");

	if (VehicleInfo[vehid][carType])			return SendErrorMessage(playerid, "Yalnýzca oyuncu araçlarý çalýnabilir.");
	if (VehicleInfo[vehid][carOwnerID] == INVALID_PLAYER_ID)    return SendErrorMessage(playerid, "Yalnýzca oyuncu araçlarý çalýnabilir.");
	if (VehicleInfo[vehid][carLocked] == 0)     return SendErrorMessage(playerid, "Araç kapýlarý açýk.");
	if (JackingLock[playerid] != 0)             return SendErrorMessage(playerid, "Zaten kapýlarý kýrýyorsun!");
	if (!IsPlayerInFrontVDoor(playerid, vehid)) return SendErrorMessage(playerid, "Sürücü kapýsýnýn yanýnda olmalýsýn.");

	foreach(new i : Player) {
		if (JackingVehicle[i] == vehid) return SendErrorMessage(playerid, "Birisi zaten bu aracýn kapýlarýný kýrmýþ veya kýrmaya çalýþýyor.");
	}

	new param[10];
	if (sscanf(params, "s[10]", param)) {
		SendHelpMessage(playerid, "/akk [tür] veya /arackilitkir [tür]");
		SendSyntaxMessage(playerid, "sessiz - levye ile araç kapýsýný sessizce kýrabilirsiniz. (Aksesuarcýdan levye almalýsýn)");
		SendSyntaxMessage(playerid, "sesli - aracýn kapýlarýnýn yüksek sesle kýrýlmasý, araç alarmýný etkinleþtirir.");
		SendSyntaxMessage(playerid, "Kilit kýrmayý iptal etmek için (/kilitkiriptal - /kki) komutunu kullanabilirsiniz!");
		return 1;
	}

	if (CompareStrings(param, "s") || CompareStrings(param, "sessiz"))
	{
		//if (!IsPlayerHasItem(playerid, INV_PICKLOCK)) return SendErrorMessage(playerid, "Ó âàñ äîëæíà áûòü îòìû÷êà, ÷òîáû âçëàìûâàòü çàìîê òðàíñïîðòà.");
		if (!CheckHanditem(playerid,18634))		 return SendErrorMessage(playerid, "Elinizde bir levye olmalý. (/aksesuar)");
		if (IsPlayerCrouching(playerid) == false) return SendErrorMessage(playerid, "Eðilmelisiniz.");

		SetPVarInt(playerid, #JackingVehicle, vehid);
		pTemp[playerid][JackingType] = 1;

		static const str_size[] = "{"COL_GREY"}%s kapýlarýný kýrmaya baþlamak istiyor musunuz? %i saniyeye ihtiyacýn var.";
		new mes[sizeof(str_size) - 4 + 1 + 31 + 7];
		format(mes, sizeof(mes), str_size, VehicleNames[GetVehicleModel(vehid)-400], 250+VehicleInfo[vehid][carLock]*250);
        Dialog_Show(playerid, StartJackingLock, DIALOG_STYLE_MSGBOX, "{FFFFFF}Kilit Kýrma", mes, ">>>", "Ýptal");
	}
	else if (CompareStrings(param, "se") || CompareStrings(param, "sesli"))
	{
		if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Ayakta olmalýsýn.");

		SetPVarInt(playerid, #JackingVehicle, vehid);
		pTemp[playerid][JackingType] = 2;

		static const str_size[] = "{"COL_GREY"}%s kapýlarýný kýrmaya baþlamak istiyor musunuz?";
		new mes[sizeof(str_size) - 4 + 1 + 31 + 7];
		format(mes, sizeof(mes), str_size, VehicleNames[GetVehicleModel(vehid)-400]);
        Dialog_Show(playerid, StartJackingLock, DIALOG_STYLE_MSGBOX, "{FFFFFF}Kilit Kýrma", mes, ">>>", "Ýptal");
	}
	else {
		SendHelpMessage(playerid, "/akk [tür] veya /arackilitkir [tür]");
		SendSyntaxMessage(playerid, "sessiz - levye ile araç kapýsýný sessizce kýrabilirsiniz.");
		SendSyntaxMessage(playerid, "sesli - aracýn kapýlarýnýn yüksek sesle kýrýlmasý, araç alarmýný etkinleþtirir.");
		return 1;
	}



	return 1;
}

alias:duzkontak("dkk");
CMD:duzkontak(playerid, params[])
{
	if (!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Bu komutu þu anda kullanamazsýnýz!");

	new unword[64];
	if (sscanf(params, "s[64]", unword))	return SendHelpMessage(playerid, "/(dkk)uzkontak [þifreli kelime]");

	new vehid = GetPlayerVehicleID(playerid);
	if (!isnull(unword) && CompareStrings(unword, UnscrambleInfo[pTemp[playerid][pUnscrambleID]][eUnscrambledWord]))
	{
		pTemp[playerid][pScrambleSuccess]++;
		PlaySound(playerid, 1052);

		switch(VehicleInfo[vehid][carImmob])
		{
			case 0: if (pTemp[playerid][pScrambleSuccess] < 3) return NewScrambleWord(playerid);
			case 1: if (pTemp[playerid][pScrambleSuccess] < 4) return NewScrambleWord(playerid);
			case 2: if (pTemp[playerid][pScrambleSuccess] < 5) return NewScrambleWord(playerid);
			case 3: if (pTemp[playerid][pScrambleSuccess] < 6) return NewScrambleWord(playerid);
			case 4: if (pTemp[playerid][pScrambleSuccess] < 7) return NewScrambleWord(playerid);
		}

		JackingEngine[playerid] = 0;
		pTemp[playerid][pUnscrambleID] = 0;
		pTemp[playerid][pScrambleFailed] = 0;
		pTemp[playerid][pScrambleSuccess] = 0;

		if (IsValidVehicle(GetPlayerVehicleID(playerid))) {
			ToggleVehicleEngine(GetPlayerVehicleID(playerid), playerid);
			PlaySound(playerid, 1145);
			AlarmOff(vehid);
			InfoMSG(playerid, "MOTOR ~g~BASARIYLA ~w~CALISTIRILDI!", 3);
		}
	}
	else {
		pTemp[playerid][pScrambleFailed]++;
		PlaySound(playerid,1085);

		switch(VehicleInfo[vehid][carImmob])
		{
			case 0: if (pTemp[playerid][pScrambleFailed] == 3) return StopJackingEngine(playerid);
			case 1: {
				if (pTemp[playerid][pScrambleFailed] >= 2){
					PlaySound(playerid, 1138);
					AlarmOn(vehid);

					if (pTemp[playerid][pScrambleFailed] == 3) return StopJackingEngine(playerid);
				}
			}
			case 2: {
				if (pTemp[playerid][pScrambleFailed] >= 2){
					PlaySound(playerid, 1138);
					AlarmOn(vehid);
					return StopJackingEngine(playerid);
				}
			}
			case 3: {
				PlaySound(playerid, 1138);
				AlarmOn(vehid);

				if (pTemp[playerid][pScrambleFailed] == 2) return StopJackingEngine(playerid);
			}
			case 4: {
				PlaySound(playerid, 1138);
				AlarmOn(vehid);
				return StopJackingEngine(playerid);
			}
		}

		NewScrambleWord(playerid);
	}

	return 1;
}

/*
alias:jackingvehicle("jackv");
CMD:jackingvehicle(playerid, params[])
{
	//new vehicle = GetPlayerVehicleID(playerid);

	if (!VehicleInfo[vehicle][carOwnerID]) 									return SendErrorMessage(playerid, "Âû íå ìîæåòå óãíàòü ãîñóäàðñòâåííûé òðàíñïîðò.")
	if (!VehicleInfo[vehicle][carEngineOn]) 									return SendErrorMessage(playerid, "Âû íå ìîæåòå óãíàòü çàãëóøåííûé òðàíñïîðò.")
	if (PlayerInfo[playerid][pCarKey] == vehicle
		|| PlayerInfo[playerid][pSpareKey] == VehicleInfo[vehicle][carID])  return SendErrorMessage(playerid, "Âû íå ìîæåòå óãíàòü ñâîé òðàíñïîðò, à òàêæå òðàíñïîðò, îò êîòîðîãî ó âàñ åñòü êëþ÷è.")

	if (!PoliceOnline())	return SendErrorMessage(playerid, "Â èãðå äîæíî áûòü õîòÿ áû %i ïîëèöåéñêèõ.", NEED_COPS_TO_CRIME);

	new jtime = pTemp[playerid][JackingTime]-gettime();

	if (GetPVarInt(playerid, #JACKING_PROCESS))						  return SendErrorMessage(playerid, "Âû óæå óãîíÿåòå òðàíñïîðò.");
	if (pTemp[playerid][JackingTime] == 0) 							  return SendErrorMessage(playerid, "Âû íå óãîíÿëè íèêàêîé òðàíñïîðò.");
	if (jtime > 0) 													  return SendErrorMessage(playerid, "Âû íå ìîæåòå óãíàòü ýòîò òðàíñïîðò åù¸ %i ñåêóíä.", jtime);
	if (GetPlayerVehicleID(playerid) != pTemp[playerid][JackingVehID]) return SendErrorMessage(playerid, "Âû íå óãîíÿëè ýòîò òðàíñïîðò.");

	if (IsPoliceNear(playerid)) return SendErrorMessage(playerid, "Âû íå ìîæåòå óãíàòü òðàíñïîðò, òàê êàê ðÿäîì ñ âàìè åñòü ïîëèöåéñêèå.");

	pTemp[playerid][JackingTime] = 0;
	SetPVarInt(playerid, #JACKING_PROCESS, 1);
	//pTemp[playerid][JackingVehID] = 0;

	DisableWaypoint(playerid);
	if (IsValidDynamicCP(pTemp[playerid][JackingCP])) DestroyDynamicCP(pTemp[playerid][JackingCP]);
	pTemp[playerid][JackingCP] = 0;

	new randomCP = random(sizeof(Jacking_CP));
	pTemp[playerid][JackingCP] = CreateDynamicCP(Jacking_CP[randomCP][0], Jacking_CP[randomCP][1], Jacking_CP[randomCP][2], 1.5, 0, 0, playerid, 15000.0);
	TogglePlayerDynamicCP(playerid, pTemp[playerid][JackingCP], true);
    Streamer_Update(playerid, STREAMER_TYPE_CP);

	InfoMSG(playerid, "ÄÎÑÒÀÂÜÒÅ ÒÐÀÍÑÏÎÐÒ ÍÀ ~r~×ÅÊÏÎÈÍÒ~w~, ×ÒÎÁÛ ÏÎËÓ×ÈÒÜ ÇÀ ÍÅÃÎ ~g~ÄÅÍÜÃÈ~w~~n~ÅÑËÈ ÏÎ ~y~ÏÐÈÁÛÒÈÞ~w~ ÇÀ ÂÀÌÈ ÁÓÄÅÒ ~y~ÕÂÎÑÒ~w~, Â ÒÀÊÎÌ ÑËÓ×ÀÅ ~r~×ÅÊÏÎÈÍÒ~w~~n~ÁÓÄÅÒ ~y~ÑÎÇÄÀÍ ÅÙ¨ ÐÀÇ!", 8);
	return 1;
}*/

alias:deletejackvehicles("deljackveh");
CMD:deletejackvehicles(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5) return 0;
	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM cars WHERE owner = %i AND jacking = 1", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "Remove_ShowVehicleList", "i", playerid);

	return 1;
}

Park_OnGameModeInit() //çàãðóçêà
{
	for(new i; i < MAX_METERS; i++)
	{
		pMeter[i][parkID] = -1;
		pMeter[i][parkX] = 0.0;
		pMeter[i][parkY] = 0.0;
		pMeter[i][parkZ] = 0.0;
		pMeter[i][parkA] = 0.0;
		pMeter[i][parkVehicle] = 0;
		pMeter[i][parkAvailable] = false;
	}

    mysql_tquery(dbHandle, "SELECT * FROM `pmeters` ORDER BY `id`", "LoadParkMeters");
	return 1;
}

MeterCheck()
{
	new string[128], vid;

	for(new i; i < MAX_METERS; i++)
	{
	    if (pMeter[i][parkID] > -1)
	    {
	        vid = GetClosestVehicleInObject(pMeter[i][parkObject]);

	        switch(pMeter[i][parkAvailable])
	        {
	            case true:
				{
					if (vid == -1) format(string, sizeof(string), "#%d\nPARK EDÝLEBÝLÝR", i);
					else
					{
						if (VehicleInfo[vid][carFaction] == 1 || VehicleInfo[vid][carFaction] == 2 || VehicleInfo[vid][carFaction] == 3 || VehicleInfo[vid][carFaction] == 4)
						{
							pMeter[i][parkAvailable] = false;
							format(string, sizeof(string), "#%d\nPARK EDÝLEMEZ", i);
				   			UpdateDynamic3DTextLabelText(pMeter[i][parkLabel], 0xFF6347FF, string);
							return 1;
						}
						else format(string, sizeof(string), "#%d\nPARK EDÝLEBÝLÝR\n(( ÖDENMEMÝÞ ))\n/paypark", i);
					}

				    UpdateDynamic3DTextLabelText(pMeter[i][parkLabel], 0x33AA33FF, string);
	            }
	            case false:
				{
				    if (pMeter[i][parkVehicle] != vid)
				    {
				        pMeter[i][parkAvailable] = true;
				        pMeter[i][parkVehicle] = 0;
						return 1;
				    }

				    format(string, sizeof(string), "#%d\nPARK EDÝLEBÝLÝR", i);
				    UpdateDynamic3DTextLabelText(pMeter[i][parkLabel], 0xFF6347FF, string);
	            }
	        }
	    }
	}
	return 1;
}

PM_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rz)
{
    if (GetPVarInt(playerid, #edit_pm) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
		new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;

		GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
		GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	    new id = GetPVarInt(playerid, #edit_pm)-1;
		DeletePVar(playerid, #edit_pm);

	    if (id < 0 || !pMeter[id][parkID] || id >= MAX_METERS) 	return SendErrorMessage(playerid, "Parkmetre bulunamadý.");
	    if (objectid != pMeter[id][parkID])						return SendErrorMessage(playerid, "Parkmetre düzenlenemedi.");

		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, 0.0, 0.0, rz);

        GetDynamicObjectPos(objectid, pMeter[id][parkX], pMeter[id][parkY], pMeter[id][parkZ]);
       	pMeter[id][parkA] = rz;

		if (IsValidDynamic3DTextLabel(pMeter[id][parkLabel]))
		    DestroyDynamic3DTextLabel(pMeter[id][parkLabel]);

		pMeter[id][parkLabel] = CreateDynamic3DTextLabel("> PARKMETRE DÜZENLENDÝ", 0xFF6347AA, pMeter[id][parkX], pMeter[id][parkY], pMeter[id][parkZ], 3.0);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `pmeters` SET `x`=%f,`y`=%f,`z`=%f,`angle`=%f WHERE `id`=%i", x, y, z, rz, pMeter[id][parkID]);
		mysql_tquery(dbHandle, query);

		SendAdmMessageToPlayer(playerid, "Parkmetrenin konumu [ID: %i] düzenlendi.", id);
	}
    return 1;
}


stock InsertParkMeters(playerid, Float:x, Float:y, Float:z, Float:angle)
{
	new nextid = -1, query[256];

	for(new i; i < MAX_METERS; i++)
	{
	    if (pMeter[i][parkID] == -1)
	    {
	        nextid = i;
	        break;
	    }
	}

	if (nextid < 0)
	{
	    SendErrorMessage(playerid, "Maksimum parkmetre sayýsýna ulaþýldý.");
	}
	else
	{
		pMeter[nextid][parkID] = nextid;
		pMeter[nextid][parkX] = x;
		pMeter[nextid][parkY] = y;
		pMeter[nextid][parkZ] = z;
		pMeter[nextid][parkA] = angle;
		pMeter[nextid][parkAvailable] = true;
		pMeter[nextid][parkVehicle] = 0;

		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `pmeters` (`x`, `y`, `z`, `angle`) VALUES (%.4f, %.4f, %.4f, %.4f)", pMeter[nextid][parkX], pMeter[nextid][parkY], pMeter[nextid][parkZ], pMeter[nextid][parkA]);
		mysql_tquery(dbHandle, query);

		if (IsValidDynamicObject(pMeter[nextid][parkObject]))
		    DestroyDynamicObject(pMeter[nextid][parkObject]);

		if (IsValidDynamic3DTextLabel(pMeter[nextid][parkLabel]))
		    DestroyDynamic3DTextLabel(pMeter[nextid][parkLabel]);

		pMeter[nextid][parkObject] = CreateDynamicObject(1269, pMeter[nextid][parkX], pMeter[nextid][parkY], pMeter[nextid][parkZ] - 0.50, 0.0, 0.0, pMeter[nextid][parkA]);
		pMeter[nextid][parkLabel] = CreateDynamic3DTextLabel("> PARKMETRE OLUÞTURULDU", 0xFF6347AA, pMeter[nextid][parkX], pMeter[nextid][parkY], pMeter[nextid][parkZ], 3.0);
	}
	return nextid;
}

stock EraseParkMeter(id)
{
	new query[92];

	if (pMeter[id][parkID] > - 1)
	{
		if (IsValidDynamicObject(pMeter[id][parkObject]))
		    DestroyDynamicObject(pMeter[id][parkObject]);

		if (IsValidDynamic3DTextLabel(pMeter[id][parkLabel]))
		    DestroyDynamic3DTextLabel(pMeter[id][parkLabel]);

		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `pmeters` WHERE `id` = %d", pMeter[id][parkID]);
		mysql_tquery(dbHandle, query);

		pMeter[id][parkID] = -1;
		pMeter[id][parkX] = 0.0;
		pMeter[id][parkY] = 0.0;
		pMeter[id][parkZ] = 0.0;
		pMeter[id][parkA] = 0.0;
		pMeter[id][parkAvailable] = true;
		pMeter[id][parkVehicle] = 0;
	}
	return 1;
}

this::LoadParkMeters()
{
    if (cache_num_rows() == 0)
		return 1;

    new
        idx
	;

    for (new i, j = cache_num_rows(); i != j; i++)
    {
		cache_get_value_int(i, "id", pMeter[i][parkID]);
		cache_get_value_float(i, "x", pMeter[i][parkX]);
		cache_get_value_float(i, "y", pMeter[i][parkY]);
	    cache_get_value_float(i, "z", pMeter[i][parkZ]);
		cache_get_value_float(i, "angle", pMeter[i][parkA]);
		pMeter[i][parkAvailable] = true;
		pMeter[i][parkVehicle] = 0;

		if (IsValidDynamicObject(pMeter[i][parkObject]))
		    DestroyDynamicObject(pMeter[i][parkObject]);

		if (IsValidDynamic3DTextLabel(pMeter[i][parkLabel]))
		    DestroyDynamic3DTextLabel(pMeter[i][parkLabel]);

		pMeter[i][parkObject] = CreateDynamicObject(1269, pMeter[i][parkX], pMeter[i][parkY], pMeter[i][parkZ] - 0.50, 0.0, 0.0, pMeter[i][parkA]);
		pMeter[i][parkLabel] = CreateDynamic3DTextLabel("_", 0xFF6347AA, pMeter[i][parkX], pMeter[i][parkY], pMeter[i][parkZ], 3.0);

		idx++;
	}

	printf("[Parkometers] Rows - %i. Load - %i. Time - 0 ms.", cache_num_rows(), idx);
	return 1;
}

stock ParkMeter_Nearest(playerid)
{
	new id = -1;

	for(new i; i < MAX_METERS; i++)
	{
		if (pMeter[i][parkID] > -1 && IsPlayerInRangeOfPoint(playerid, 3.0, pMeter[i][parkX], pMeter[i][parkY], pMeter[i][parkZ]))
		{
		    if (id != -1) {
				new Float: x, Float: y, Float: z;

				GetPlayerPos(playerid, x, y, z);
				if (GetDistanceBetweenPoints(x, y, z, pMeter[i][parkX], pMeter[i][parkY], pMeter[i][parkZ]) <
					GetDistanceBetweenPoints(x, y, z, pMeter[id][parkX], pMeter[id][parkY], pMeter[id][parkZ])) id = i;
			}
			else id = i;
		}
	}
	return id;
}

stock GetClosestVehicleInObject(objectid)
{
	new vid = -1, Float:x, Float:y, Float:z, Float:distance;
	GetDynamicObjectPos(objectid, x, y, z);
	for(new i; i < MAX_VEHICLES; i++)
	{
	    if (IsValidVehicle(i) && (!IsAPlane(i) || !IsABiker(i) || !IsAHelicopter(i) || !IsABoat(i) || !IsABicycle(i)))
	    {
	        distance = GetVehicleDistanceFromPoint(i, x, y, z);
	        if (distance <= 6)
	        {
				vid = i;
				break;
	        }
	    }
	}
	return vid;
}
CMD:paypark(playerid, params[]) //îïëàòà ïàðêîâêè
{
	new id = -1,
        vid = -1,
        Float:x, Float:y, Float:z;

	if (IsPlayerInAnyVehicle(playerid))				 return SendErrorMessage(playerid, "Araçtan inmelisiniz.");
	if ((id = ParkMeter_Nearest(playerid)) == -1)     return SendErrorMessage(playerid, "Yakýnýnýzda parkmetre yok.");
    if (!pMeter[id][parkAvailable])                   return SendErrorMessage(playerid, "Parkmetreyi zaten ödemiþsiniz!");

    if (GetPlayerMoney(playerid) < CASH_PARKING)      return SendErrorMessage(playerid, "Yeterli paranýz yok. Parkmetre ücretini ödemek için $%d'ye ihtiyacýnýz var.", CASH_PARKING);

    for(new i = 1; i < MAX_VEHICLES; i++)
    {
        if (IsValidVehicle(i) && (!IsAPlane(i) || !IsABiker(i) || !IsAHelicopter(i) || !IsABoat(i) || !IsABicycle(i)))
        {
            GetVehiclePos(i, x, y, z);
            if (IsPlayerInRangeOfPoint(playerid, 6.0, x, y, z))
            {
                vid = i;
                break;
            }
        }
    }

    if (vid == -1) return SendErrorMessage(playerid, "Herhangi bir araçta deðilsiniz.");

    SendClientMessageEx(playerid, 0x33AA33FF, "> %s park yeri için $%d ödedinz..", VehicleNames[GetVehicleModel(vid)-400], CASH_PARKING);

    GivePlayerMoney(playerid, -CASH_PARKING);

    pMeter[id][parkVehicle] = vid;
    pMeter[id][parkAvailable] = false;

	return 1;
}

/* Kaykay sistemi */
CMD:kaykay(playerid, params[])
{
    new mes[128];

    if (!IsPlayerHasItem(playerid, INV_SKATE)) return SendErrorMessage(playerid, "Kaykaya sahip deðilsiniz.");

	if (InfoSkate[playerid][sActive] == true)
	{
		InfoSkate[playerid][sActive] = false;
        DestroyDynamicObject(InfoSkate[playerid][sSkate]);
        PlayerPlaySound(playerid,21000,0,0,0);
        format(mes, sizeof(mes),"kaykayý yerden alýr.");
		pc_cmd_me(playerid, mes);
	}
	else if (InfoSkate[playerid][sActive] == false)
	{
		InfoSkate[playerid][sActive] = true;
        CreateDynamicObject(InfoSkate[playerid][sSkate]);
        //PlayerPlaySound(playerid,21000,0,0,0);
        SendSyntaxMessage(playerid, "Kaykayý sürmek için mouse sað klik tuþuna basýn.");
	}

	return 1;
}

Skate_OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if (InfoSkate[playerid][sActive] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
        static bool:act;

        SetPlayerArmedWeapon(playerid,0);

        if (newkeys & KEY_HANDBRAKE)
		{
            #if MODE_SKATE == 0
                ApplyAnimation(playerid, "SKATE","skate_run",4.1,1,1,1,1,1,1);
            #else
            	ApplyAnimation(playerid, "SKATE","skate_sprint",4.1,1,1,1,1,1,1);
            #endif

			if (!act)
			{
                act = true;
                DestroyDynamicObject(InfoSkate[playerid][sSkate]);
                InfoSkate[playerid][sSkate] = CreateDynamicObject(19878,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
                AttachDynamicObjectToPlayer(InfoSkate[playerid][sSkate],playerid, -0.2,0,-0.9,0,0,90);
            }
		}
        if (oldkeys & KEY_HANDBRAKE)
		{
        	ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);

			if (act)
			{
                act = false;
                DestroyDynamicObject(InfoSkate[playerid][sSkate]);
            }
        }
	}
	return 1;
}

/* Poker sistemi */
ClearPackCards(playerid)
{
	for(new i = 0; i < MAX_PLAYER_CURRENT_CARDS; i++)
	{
		PlayerCurrentCards[playerid][i][0] = 0;
		PlayerCurrentCards[playerid][i][1] = 0;
	}

	DeletePVar(playerid, "SummCards");
	InsertPackCards(playerid);
	return 1;
}
InsertPackCards(playerid)
{
	for(new i = 0; i < MAX_TYPE_CARDS; i++)
	{
		PackCards[playerid][i] = i;

		for(new c = 0; c < MAX_CARDS_FOR_LEAR; c++)
		{
			PackCardsLears[playerid][i][c] = c+1;
		}
	}
	return 1;
}
GetPlayerSummCard(playerid)
{
	PlayerSumm[playerid] = 0;

	for(new i = 0; i < MAX_TYPE_CARDS; i++)
	{
		if (PackCards[playerid][i] == -1) continue;

		PlayerSumm[playerid]++;
		PlayerSummLear[playerid][i] = 0;

		for(new c = 0; c < MAX_CARDS_FOR_LEAR; c++)
		{
			if (PackCardsLears[playerid][i][c] == -1) continue;

			PlayerSummLear[playerid][i]++;
		}
	}
}
GivePlayerCard(playerid, &newcard, &newcardlear)
{
	new SummEx[2];
	new returnresult[2];

	returnresult[0] = random(PlayerSumm[playerid]);
	returnresult[1] = random(PlayerSummLear[playerid][returnresult[0]]);

	if (returnresult[0] == 0)	returnresult[0] += 1;
	if (returnresult[1] == 0) 	returnresult[1] += 1;

	for(new i = 0; i < MAX_TYPE_CARDS; i++)
	{
		if (PackCards[playerid][i] == -1) continue;

		SummEx[0]++;

		if (SummEx[0] == returnresult[0])
		{
			for(new c = 0; c < MAX_CARDS_FOR_LEAR; c++)
			{
				if (PackCardsLears[playerid][i][c] == -1) continue;

				SummEx[1]++;

				if (SummEx[1] == returnresult[1])
				{
					PackCardsLears[playerid][i][c] = -1;

					if (PlayerSummLear[playerid][i] == 1) PackCards[playerid][i] = -1;

					newcard = i; newcardlear = c+1;
					return 1;
				}
			}
		}
	}
	return 0;
}
ShowPlayerCards(playerid)
{
	new cardname[156], cardslist[186];

	for(new i = 0; i < GetPVarInt(playerid, "SummCards"); i++)
	{
		format(cardname, sizeof(cardname), "%s%s ", exicards[PlayerCurrentCards[playerid][i][0]][0], GetTypeCard(PlayerCurrentCards[playerid][i][1]));
		strcat(cardslist, cardname, sizeof(cardslist));
	}

	SendClientMessageEx(playerid, COLOR_YELLOW, "Elinizdeki kartlar: %s. Kartý göstermek için: /kartlarigoster", cardslist);
	return 1;
}
ShowPlayerCardsToAll(playerid)
{
	new cardname[156], cardslist[186];

	for(new i = 0; i < GetPVarInt(playerid, "SummCards"); i++)
	{
		format(cardname, sizeof(cardname), "%s%s ", exicards[PlayerCurrentCards[playerid][i][0]][0], GetTypeCard(PlayerCurrentCards[playerid][i][1]));
		strcat(cardslist, cardname, sizeof(cardslist));
	}

	SendNearbyMessage(Range_Normal, playerid, COLOR_WHITE, "* %s kartýný açar: %s", GetNameWithMask(playerid), cardslist);
	ClearPackCards(playerid);
	return 1;
}

GetTypeCard(learid)
{
	new leartext[15];

	if (learid == LEAR_HEARTS) { leartext = "[Kupa]"; }
	if (learid == LEAR_DIAMONDS) { leartext = "[Karo]"; }
	if (learid == LEAR_CLUBS) { leartext = "[Sinek]"; }
	if (learid == LEAR_SPADES) { leartext = "[Maça]"; }

	return leartext;
}

CMD:kartlarigoster(playerid, params[])
{
	if (GetPVarInt(playerid, "SummCards") < 1) return SendErrorMessage(playerid, "Kartýnýz yok.");
	ShowPlayerCardsToAll(playerid);
	ClearPackCards(playerid);
	return 1;
}

CMD:kartver(playerid, params[])
{
	new id;
	if (sscanf(params,"u",id))						return SendHelpMessage(playerid, "/kartver [ID / isim]");
	if (!IsPlayerLogged(id))						return SendNotConnected(playerid);
	if (!PlayerNearPlayer(5.0, playerid, id))		return SendNotNearPlayer(playerid);
	if (!IsPlayerHasItem(playerid, INV_CARDS))		return SendErrorMessage(playerid,"Oyun kartýnýz yok.");
	if (GetPVarInt(id, "SummCards") > 5)			return SendErrorMessage(playerid, "Bu oyuncunun yeterli kartý var.");

	new newcarid, newcaridlear;

	GetPlayerSummCard(playerid);

	if (PlayerSumm[playerid] < 1) return SendErrorMessage(playerid,"Destede baþka kart yok.");

	GivePlayerCard(playerid, newcarid, newcaridlear);
	PlayerCurrentCards[id][GetPVarInt(id, "SummCards")][0] = newcarid;
	PlayerCurrentCards[id][GetPVarInt(id, "SummCards")][1] = newcaridlear;
	SetPVarInt(id, "SummCards", GetPVarInt(id, "SummCards")+1);

	SendSyntaxMessage(id, "Kartý aldýnýz: %s%s", exicards[newcarid][0], GetTypeCard(newcaridlear));
	ShowPlayerCards(id);

	SendServerMessage(playerid, "%s adlý kiþiye kartý verdiniz.", GetNameEx(id));

	if (id == playerid) pc_cmd_server_ame(playerid, "kendisi için ters bir kart çýkardý.");
	else
	{
	    new mes[128];
	    format(mes, sizeof(mes), "kapalý kartý geçer %s.", GetNameWithMask(id));
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);
	}
	return 1;
}

/* Premium account sistemi */
Donate_OnGameModeInit()
{
	new query[256];
	format(query, sizeof(query), "DELETE FROM `donate` WHERE `status`='0' AND `dateDelete` > %i", gettime());
	mysql_tquery(dbHandle, query);

	bronze_str[sizeof(bronze_str)-1] = '\n';
	bronze_str_2[sizeof(bronze_str_2)-1] = '\0';

    silver_str[sizeof(silver_str)-1] = '\n';
	silver_str_2[sizeof(silver_str_2)-1] = '\n';
	silver_str_3[sizeof(silver_str_3)-1] = '\0';

    gold_str[sizeof(gold_str)-1] = '\n';
	gold_str_2[sizeof(gold_str_2)-1] = '\n';
	gold_str_3[sizeof(gold_str_3)-1] = '\0';
}


CMD:donate(playerid, params[])
{
    Dialog_Show(playerid, DonateMenu, DIALOG_STYLE_LIST, "Privileges", "1. Purchase\n\
	2. Information\n\
	{6EA3FF}"WeburlName"", "Seç", "Ýptal");
	return 1;
}

Dialog:DonateMenu(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return 1;

	switch(listitem)
	{
	    case 0:
	    {
			new title[32];
			format(title, sizeof(title), "Your account: {9ACD32}%i rub.", PlayerInfo[playerid][pDonate]);

	        Dialog_Show(playerid, DonateBuy, DIALOG_STYLE_TABLIST, title, "Premium \"BRONZE\"\t{9ACD32}[250 rubles]\n\
	        Premium \"SILVER\"\t{9ACD32}[350 rubles]\n\
	        Premium \"GOLD\"\t{9ACD32}[450 rubles]\n\
	        Nickname change\t{9ACD32}[80 rubles]\n\
	        Phone number change\t{9ACD32}[100 rubles]\n\
	        Change of vehicle number\t{9ACD32}[70 rubles]", "Seç", "Geri Dön");
	    }
	    case 1:
	    {
	        new mes[256];
	        format(mes, sizeof(mes), "{ffffff}On your account {9ACD32}%i {FFFFFF}donate rubles.\nAbility to change nickname: %i time. (/changenick)\nThe ability to change the vehicle number: %i time. (/changeplate)", PlayerInfo[playerid][pDonate], PlayerInfo[playerid][pNameChanges], PlayerInfo[playerid][pNumberChanges]);

	        new premium_info[4][8] =
				{"Usual", "BRONZE", "SILVER", "GOLD"};

			if (PlayerInfo[playerid][pPremium])
			{
				new Float:days = float(PlayerInfo[playerid][pPremiumTime] - gettime()) /86400.0;
			    format(mes, sizeof(mes), "%s\nBeneficiezi de cont {9ACD32}%s{FFFFFF}. {9ACD32}%i{FFFFFF}zile ramase.",mes, premium_info[PlayerInfo[playerid][pPremium]], floatround(days));
			}
			Dialog_Show(playerid, DonateCancel, DIALOG_STYLE_MSGBOX, "Information", mes, "Geri Dön", "");
	    }
		case 2: return pc_cmd_donate(playerid, "");

	}
	return 1;
}

Dialog:DonateBuy(playerid, response, listitem, inputtext[])
{
	if (!response)
		return pc_cmd_donate(playerid, "");

	switch(listitem)
	{
		case 0: Dialog_Show(playerid, BuyPremium, DIALOG_STYLE_MSGBOX, "Premium", bronze_str, "Buy", "Geri Dön");
		case 1: Dialog_Show(playerid, BuyPremium, DIALOG_STYLE_MSGBOX, "Premium", silver_str, "Buy", "Geri Dön");
		case 2: Dialog_Show(playerid, BuyPremium, DIALOG_STYLE_MSGBOX, "Premium", gold_str, "Buy", "Geri Dön");
		case 3: Dialog_Show(playerid, BuyName, DIALOG_STYLE_MSGBOX, "Nickname change", "{FFFFFF}Do you want to purchase the ability to change your nickname? Price: 80 rubles.", "Buy", "Geri Dön");
        case 4: Dialog_Show(playerid, BuyNumber, DIALOG_STYLE_INPUT, "Phone number change", "{FFFFFF}Enter your new number, minimum Characters is 4. Cost: 100 rubles.", "Buy", "Geri Dön");
        case 5: Dialog_Show(playerid, BuyNumberplate, DIALOG_STYLE_MSGBOX, "Vehicle number change", "{FFFFFF} Do you want to purchase the ability to change the vehicle number? Cost: 70 rubles.", "Buy", "Geri Dön");
	}
	SetPVarInt(playerid, #premium_buy, listitem+1);
	return 1;
}

Dialog:BuyName(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_donate(playerid, "");

	#define PRICE_CHANGE_NAME (80)

	if (PlayerInfo[playerid][pDonate] < PRICE_CHANGE_NAME) return SendErrorMessage(playerid, "There are not enough donate rubles on your account.");

	SendSyntaxMessage(playerid, "You have acquired the opportunity to change your nickname for %i rubles.", PRICE_CHANGE_NAME);

	PlayerInfo[playerid][pDonate] -= PRICE_CHANGE_NAME;
	PlayerInfo[playerid][pNameChanges]++;

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `donate`=%i,`name_changes`=%i WHERE `forum_id` = %i", PlayerInfo[playerid][pDonate], PlayerInfo[playerid][pNameChanges], PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);

	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] bought a nickname change",
	GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid));
 	insert_log(query, DONATE_LOG, 1, PlayerInfo[playerid][pAccID]);
	return 1;
}

Dialog:BuyNumberplate(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_donate(playerid, "");

	#define PRICE_CHANGE_NUMBERPLATE (70)

	if (PlayerInfo[playerid][pDonate] < PRICE_CHANGE_NUMBERPLATE) return SendErrorMessage(playerid, "There is not enough donation on your account rubles.");

	SendSyntaxMessage(playerid, "You have acquired the opportunity to change the license plate of the vehicle from %i rubles.", PRICE_CHANGE_NUMBERPLATE);

	PlayerInfo[playerid][pDonate] -= PRICE_CHANGE_NUMBERPLATE;
	PlayerInfo[playerid][pNumberChanges]++;

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `donate`=%i,`number_changes`=%i WHERE `forum_id` = %i", PlayerInfo[playerid][pDonate], PlayerInfo[playerid][pNumberChanges], PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);

	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] bought a change of license plate",
	GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid));
 	insert_log(query, DONATE_LOG, 3, PlayerInfo[playerid][pAccID]);
	return 1;
}

Dialog:BuyNumber(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_donate(playerid, "");

	if (strlen(inputtext) < 4 || strval(inputtext) < 1000)
	{
	    return Dialog_Show(playerid, BuyNumber, DIALOG_STYLE_MSGBOX, "{FFFFFF}Phone number change", "{FFFFFF}Enter your new number, minimum characters - 4. Cost: 100 rubles.", "Buy", "Geri Dön");
	}

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `number` FROM `users` WHERE `number` = %i", strval(inputtext));
	mysql_tquery(dbHandle, query, "OnPlayerBuyDonateNumber", "ii", playerid, strval(inputtext));
	return 1;
}

forward OnPlayerBuyDonateNumber(playerid, number);
public OnPlayerBuyDonateNumber(playerid, number)
{
	if (cache_num_rows())
	{
	    Dialog_Show(playerid, BuyNumber, DIALOG_STYLE_MSGBOX, "Change phone number", "Enter your new number, minimum characters - 4. Cost: 100 rubles.", "Buy", "Geri Dön");
	    return SendErrorMessage(playerid, "This number is already in use by someone.");
	}

	#define PRICE_CHANGE_NUMBER (100)

	if (PlayerInfo[playerid][pDonate] < PRICE_CHANGE_NUMBER) return SendErrorMessage(playerid, "There are not enough donate rubles on your account.");
	if (!CheckNumberAvailable(number))						 return SendErrorMessage(playerid, "This phone number is already in use! ");

	SendSyntaxMessage(playerid, "You purchased a room [%i] for %i rubles.", number, PRICE_CHANGE_NUMBER);
	PlayerInfo[playerid][pDonate] -= PRICE_CHANGE_NUMBERPLATE;
	PlayerInfo[playerid][pNumber] = number;

	new query[256];

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `donate`=%i WHERE `forum_id` = %i", PlayerInfo[playerid][pDonate], PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `number`=%i WHERE `id` = %i", number, PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query);

	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] bought a phone number- %i", GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), number);
 	insert_log(query, DONATE_LOG, 4, PlayerInfo[playerid][pAccID]);
	return 1;
}

Dialog:BuyPremium(playerid, response, listitem, inputtext[])
{
	if (!response) 						return pc_cmd_donate(playerid, "");
	if (PlayerInfo[playerid][pPremium])	return SendErrorMessage(playerid, "To buy a premium, you have to wait until it ends.");

	listitem = GetPVarInt(playerid, #premium_buy)-1;

	if (listitem < 0 || listitem > 2) return 1;

	new price_premium[3] = {150, 250, 350}, premium_name_changes[3] = {2, 3, 5}, premium_number_changes[3] = {3, 5, 7};
	new premium_info[3][8] = {"BRONZE", "SILVER", "GOLD"};

	if (PlayerInfo[playerid][pDonate] < price_premium[listitem]) return SendErrorMessage(playerid, "There are not enough donate rubles on your account.");

	SendSyntaxMessage(playerid, "You have purchased a premium %s for 30 days in advance %i rubles.", premium_info[listitem], price_premium[listitem]);

	PlayerInfo[playerid][pDonate] -= price_premium[listitem];
	PlayerInfo[playerid][pNameChanges] += premium_name_changes[listitem];
	PlayerInfo[playerid][pNumberChanges] += premium_number_changes[listitem];
	PlayerInfo[playerid][pPremium] = listitem + 1;
    PlayerInfo[playerid][pPremiumTime] = gettime() + 30 * 86400;

	new query[256];

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `donate`=%i,`name_changes`=%i,`number_changes`=%i WHERE `forum_id` = %i", PlayerInfo[playerid][pDonate], PlayerInfo[playerid][pNameChanges], PlayerInfo[playerid][pNumberChanges], PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `vip`=%i,`vip_time`=%i,`spawnhealth`=100.0 WHERE `id` = %i", PlayerInfo[playerid][pPremium], PlayerInfo[playerid][pPremiumTime], PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query);

	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] bought a premium %s", GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), premium_info[listitem]);
 	insert_log(query, DONATE_LOG, 2, PlayerInfo[playerid][pAccID]);
	return 1;
}

Dialog:DonateCancel(playerid, response, listitem, inputtext[])
{
	pc_cmd_donate(playerid, "");
	return 1;
}

CMD:changeplate(playerid, params[])
{
	if (PlayerInfo[playerid][pNumberChanges] < 1)		return SendErrorMessage(playerid, "To change the license plate, you must purchase this privilege. (/donate)");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))						return SendErrorMessage(playerid, "Your vehicle is not spawned.");
	if (vehicleid == 0)														return SendNotInVehicle(playerid);
	if (VehicleInfo[vehicleid][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "You are not the owner of this vehicle.");

	Dialog_Show(playerid, ChangeNumberplate, DIALOG_STYLE_INPUT, "{FFFFFF}Entering a new character ", "{FFFFFF}Enter a new license plate for your vehicle:", "Change", "Ýptal");
	return 1;
}


Dialog:ChangeNumberplate(playerid, response, listitem, inputtext[])
{
	if (!response)										return 1;
	if (strlen(inputtext) < 3 || strlen(inputtext) > 11)	return SendErrorMessage(playerid,"the number of characters in the license plate is from 3 to 11.");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `plate` FROM `cars` WHERE `plate` = '%e'", inputtext);
	mysql_tquery(dbHandle, query, "DonateSetPlate", "is", playerid, inputtext);
    return 1;
}

this::DonateSetPlate(playerid, plate[])
{
	if (cache_num_rows())							return SendErrorMessage(playerid, "The license plate is already in use by another vehicle.");
    if (PlayerInfo[playerid][pNumberChanges] < 1)	return SendErrorMessage(playerid, "To change the license plate, you must purchase this privilege. (/donate)");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))					return SendErrorMessage(playerid, "Your vehicle is not spawned.");
	if (vehicleid == 0)													return SendNotInVehicle(playerid);
	if (VehicleInfo[vehicleid][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "You are not the owner of this vehicle.");

	PlayerInfo[playerid][pNumberChanges]--;
    DeleteVehicleTickets(vehicleid);
    format(VehicleInfo[vehicleid][carPlate], 24, "%s", plate);
	SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][carPlate]);
	RespawnVehicle(vehicleid, 1);
	Save_Car(vehicleid);
	SendSyntaxMessage(playerid, "You changed your license plate %s. New plates: %s", VehicleNames[GetVehicleModel(vehicleid)-400], plate);
	SendSyntaxMessage(playerid, "Vehicleation fines have been paid.");

    new query[256];

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `number_changes`=%i WHERE `forum_id` = %i", PlayerInfo[playerid][pNumberChanges], PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);
	return 1;
}
/*
CMD:changenick(playerid, params[])
{
	if (PlayerInfo[playerid][pNameChanges] < 1) return SendErrorMessage(playerid, "To apply for a name change, you must purchase this privilege. (/donate)");

	if (strlen(pTemp[playerid][pChangeNick]))
	{
	    pTemp[playerid][pChangeNick] = EOS;
	    return SendErrorMessage(playerid, "You have canceled your nickname change application. ");
	}

	Dialog_Show(playerid, ChangeNick, DIALOG_STYLE_INPUT, "{FFFFFF}Entering a new name", "{FFFFFF}Enter a new nickname (Name_Surname):", ">>>", "Ýptal");
	return 1;
}*/

Dialog:ChangeNick(playerid, response, listitem, inputtext[])
{
	if (!response) 										return 1;
    if (!IsValidPlayerName(inputtext))					return SendErrorMessage(playerid, "Invalid nickname format. ");
	if (strlen(inputtext) < 4 || strlen(inputtext) > 24)	return SendErrorMessage(playerid, "Characters from 4 to 24.");

	format(pTemp[playerid][pChangeNick], MAX_PLAYER_NAME, inputtext);
	SendSyntaxMessage(playerid, "You have applied for a nickname change - %s", inputtext);
	SendAdmMessage("%s (ID: %i) applied for a nickname change - %s. (/acceptname - to confirm)", GetNameEx(playerid), playerid, inputtext);
	return 1;
}


/* Obje sistemi */
forward LoadDynamicObjects();
forward LoadObjectTexture(objectid);
forward OnObjectTextureInsert(playerid, id, slot, model, txdname[], texturename[]);
forward OnObjectInsert(ObjectID);

public LoadDynamicObjects()
{
	new rows = cache_num_rows(), time = GetTickCount(), total, query[256];

	if (!rows)
	{
	    print("[Objeler] Kayit bulunamadi.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "id", ObjectsInfo[i][oID]);
	    cache_get_value_int(i, "model", ObjectsInfo[i][oModel]);
		cache_get_value_float(i, "posx", ObjectsInfo[i][oPosX]);
	    cache_get_value_float(i, "posy", ObjectsInfo[i][oPosY]);
	    cache_get_value_float(i, "posz", ObjectsInfo[i][oPosZ]);
	    cache_get_value_float(i, "posrx", ObjectsInfo[i][oPosRX]);
	    cache_get_value_float(i, "posry", ObjectsInfo[i][oPosRY]);
	    cache_get_value_float(i, "posrz", ObjectsInfo[i][oPosRZ]);
	    cache_get_value_int(i, "interior", ObjectsInfo[i][oInt]);
	    cache_get_value_int(i, "virworld", ObjectsInfo[i][oVW]);

        ObjectsInfo[i][oObject] = CreateDynamicObject(ObjectsInfo[i][oModel], ObjectsInfo[i][oPosX], ObjectsInfo[i][oPosY], ObjectsInfo[i][oPosZ], ObjectsInfo[i][oPosRX], ObjectsInfo[i][oPosRY], ObjectsInfo[i][oPosRZ], ObjectsInfo[i][oVW], ObjectsInfo[i][oInt], -1, 200.0);
		ObjectsInfo[i][oObjectOn] = 1;

		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `objects_texture` WHERE `objectid` = %i", ObjectsInfo[i][oID]);
		mysql_tquery(dbHandle, query, "LoadObjectTexture", "i", i);

		total++;
	}
	printf("[Objeler] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public OnObjectInsert(ObjectID)
{
	ObjectsInfo[ObjectID][oID] = cache_insert_id();
	return 1;
}

public LoadObjectTexture(objectid)
{
	new rows = cache_num_rows(), slot, model, txdname[32], texturename[32];

	if (!rows) return 1;

    for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "slot", slot);
	    cache_get_value_int(i, "model", model);
		cache_get_value(i, "txd_name", txdname, 32);
		cache_get_value(i, "texture_name", texturename, 32);

		if (IsValidDynamicObject(ObjectsInfo[objectid][oObject])) SetDynamicObjectMaterial(ObjectsInfo[objectid][oObject], slot, model, txdname, texturename, 0);
	}
	return 1;
}

public OnObjectTextureInsert(playerid, id, slot, model, txdname[], texturename[])
{
	if (cache_num_rows())																			return SendErrorMessage(playerid, "Slot %i dokusu zaten belirlenmiþ. (/editobject deltexture - remove texture)", slot);
    if (!SetDynamicObjectMaterial(ObjectsInfo[id][oObject], slot, model, txdname, texturename, 0))	return SendErrorMessage(playerid, "Objenin texture durumu ayarlanýrken problem oluþtu.");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `objects_texture` (objectid, slot, model, txd_name, texture_name) VALUES (%i,%i,%i,'%e','%e')", ObjectsInfo[id][oID], slot, model, txdname, texturename);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid, COLOR_GREEN, "Obje texture durumunu [ID: %i] baþarýyla deðiþtirdin [Slot: %i | Model ID: %i | TXD Ýsmi: %s | Texture Ýsmi: %s]", id, slot, model, txdname, texturename);
	return 1;
}

AddObjectToFile(objectid, modelid, interior, virworld, Float:x, Float:y, Float:z)
{
    new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `objects` (model, posx, posy, posz, posrx, posry, posrz, interior, virworld) VALUES (%i, %f, %f, %f, 0.0, 0.0, 0.0, %i, %i)",modelid,x,y,z,interior,virworld);
	mysql_tquery(dbHandle, query, "OnObjectInsert", "d", objectid);
	return 1;
}

Object_Nearest(playerid)
{
	for(new i; i != MAX_OBJECTS; i++)
	{
	    if (GetWorld(playerid) == ObjectsInfo[i][oVW] && ObjectsInfo[i][oInt] == GetInterior(playerid) && IsPlayerInRangeOfPoint(playerid, 5.0, ObjectsInfo[i][oPosX], ObjectsInfo[i][oPosY], ObjectsInfo[i][oPosZ]) && ObjectsInfo[i][oObjectOn])
		{
			return i;
		}
	}
	return -1;
}

Obj_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;

    GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	if (GetPVarInt(playerid, #edit_object) && ObjectsInfo[GetPVarInt(playerid, #edit_object)-1][oObject] == objectid && ObjectsInfo[GetPVarInt(playerid, #edit_object)-1][oObjectOn])
	{
		if (response == EDIT_RESPONSE_FINAL)
		{
		    new objid = GetPVarInt(playerid, #edit_object)-1;

	    	DeletePVar(playerid, #edit_object);
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			GetDynamicObjectPos(objectid, ObjectsInfo[objid][oPosX], ObjectsInfo[objid][oPosY], ObjectsInfo[objid][oPosZ]);
			GetDynamicObjectRot(objectid, ObjectsInfo[objid][oPosRX], ObjectsInfo[objid][oPosRY], ObjectsInfo[objid][oPosRZ]);

            new query[256 + 56];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `objects` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %i", x, y, z, rx, ry, rz, ObjectsInfo[objid][oID]);
			mysql_tquery(dbHandle, query);

  			SendSyntaxMessage(playerid, "Obje pozisyonu [ID: %i] baþarýyla düzenlendi.", objid);
		}
		else if (response == EDIT_RESPONSE_CANCEL)
		{
	    	DeletePVar(playerid, #edit_object);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
	}
	return 1;
}

Ob_OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT objectid)
{
	if (GetPVarInt(playerid, #edit_objects) == 1)
	{
	    DeletePVar(playerid, #edit_objects);

	    new objid = -1;

		for(new i; i != MAX_OBJECTS; i++)
		{
		    if (!ObjectsInfo[i][oID] || !ObjectsInfo[i][oObjectOn] || ObjectsInfo[i][oObject] != objectid) continue;

			objid = i;
			break;
		}

		if (objid == -1)	return SendErrorMessage(playerid, "Bu obje admin komutuyla oluþturulmamýþ.");

        SetPVarInt(playerid, #edit_object, objid+1);
		EditDynamicObject(playerid, ObjectsInfo[objid][oObject]);
	}
	return 1;
}

Obj_OnGameModeInit()
{
	return mysql_tquery(dbHandle, "SELECT * FROM `objects`", "LoadDynamicObjects");
}

/* Müzik sistemi */
forward OnMusicInsert(playerid, slot);
forward OnPlayerLoadMusic(playerid);

public OnMusicInsert(playerid, slot)
{
	PlayerMusic[playerid][slot][mID] = cache_insert_id();
	return 1;
}

public OnPlayerLoadMusic(playerid)
{
    for(new i; i != MAX_PLAYER_MUSIC; i++)
   	{
    	PlayerMusic[playerid][i][mID] = 0;
    	PlayerMusic[playerid][i][mUrl] =
    	PlayerMusic[playerid][i][mName] = EOS;
    }

    if (!cache_num_rows()) return 1;

    for(new i = 0; i < cache_num_rows(); i++)
	{
     	if (i > MAX_PLAYER_MUSIC) break;

        cache_get_value_int(i, "id", PlayerMusic[playerid][i][mID]);
	    cache_get_value(i, "name", PlayerMusic[playerid][i][mName], 64);
	    cache_get_value(i, "url", PlayerMusic[playerid][i][mUrl], 156);
	}
	return 1;
}

ShowMusicList(playerid)
{
	new string[641];

    for(new i; i != MAX_PLAYER_MUSIC; i++)
   	{
    	if (PlayerMusic[playerid][i][mID] == 0)	format(string, sizeof(string), "%s\n{C3C3C3}Bir müzik linki ekle...", string);
		else									format(string, sizeof(string), "%s\n%s", string, PlayerMusic[playerid][i][mName]);
    }

	Dialog_Show(playerid, MusicList, DIALOG_STYLE_LIST, "Ses Kayýtlarý", string, "Seç", "Geri");
	return 1;
}

LoadPlayerMusic(playerid)
{
    new query[256];

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `player_music` WHERE `userid` = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "OnPlayerLoadMusic", "i", playerid);
	return 1;
}

OnPlayerAddMusic(playerid, slot, name[], url[])
{
    new query[128 + 56 + 156];

	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `player_music` (userid, name, url) VALUES (%i, '%e', '%e')", PlayerInfo[playerid][pID], name, url);
	mysql_tquery(dbHandle, query, "OnMusicInsert", "ii", playerid, slot);
	return 1;
}



Dialog:MusicList(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

    SetPVarInt(playerid, #edit_music, listitem);

    if (PlayerMusic[playerid][listitem][mID] == 0)
	{
		Dialog_Show(playerid, AddMusic, DIALOG_STYLE_INPUT, "Hazýr Müzik Kaydý", "{FFFFFF}Ses kaydý için bir baþlýk girin.\n\nÝzin verilen karakter listesi À-ß, A-Z, 0-9, \"-\", \"[\", \"]\", \"(\", \")\". Maksimum 64 karakter.", ">>>", "Geri Dön");
	}
	else
	{
		Dialog_Show(playerid, MyMusic, DIALOG_STYLE_LIST, PlayerMusic[playerid][listitem][mName], "Kaydý etkinleþtir\nGiriþi sil", "Seç", "Geri");
	}
	return 1;
}

Dialog:MyMusic(playerid, response, listitem, inputtext[])
{
	if (!response) return ShowBoomboxMenu(playerid);

	new music = GetPVarInt(playerid, #edit_music);

	if (listitem == 0)
	{
	    SendSyntaxMessage(playerid, "%s adlý ses kaydýný baþlattýnýz.", PlayerMusic[playerid][music][mName]);
	    ChangeUrlBoombox(playerid, PlayerMusic[playerid][music][mUrl]);
	    return 1;
	}

	SendSyntaxMessage(playerid, "%s adlý ses kayýdýný sildiniz.", PlayerMusic[playerid][music][mName]);

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `player_music` WHERE `id` = %i", PlayerMusic[playerid][music][mID]);
	mysql_tquery(dbHandle, query);

	PlayerMusic[playerid][music][mID] = 0;
	PlayerMusic[playerid][music][mName] = EOS;
	PlayerMusic[playerid][music][mUrl] = EOS;
	ShowMusicList(playerid);
	return 1;
}

Dialog:AddMusic(playerid, response, listitem, inputtext[])
{
	if (!response) return ShowMusicList(playerid);

	if (isnull(inputtext) || strlen(inputtext) >= 128)
	{
		return Dialog_Show(playerid, AddMusic, DIALOG_STYLE_INPUT, "Hazýr Müzik Kaydý", "{FFFFFF}Ses kayýdý için bir baþlýk girin\n\nIzin verilen karakter listesi: À-ß, A-Z, 0-9, \"-\", \"[\", \"]\", \"(\", \")\". Maksimum 128 karakter.", ">>>", "Iptal");
	}

	for(new i = 0; i < strlen(inputtext); i++)
	{
		switch(inputtext[i])
		{
			case '!', '@', '#', '$','%','^','&','*','_','+','=','|','{','}','.','`','~','<','>','?',',','/':
			{
				Dialog_Show(playerid, AddMusic, DIALOG_STYLE_INPUT, "Hazýr Müzik Kaydý", "{FFFFFF}Ses kayýdý için bir baþlýk girin\n\nIzin verilen karakter listesi: À-ß, A-Z, 0-9, \"-\", \"[\", \"]\", \"(\", \")\". Maksimum 128 karakter.", ">>>", "Iptal");
				return 1;
			}
			default: continue;
		}
	}

	SetPVarString(playerid, #music_add, inputtext);
	Dialog_Show(playerid, AddMusic1, DIALOG_STYLE_INPUT, "Hazýr Müzik Kaydý", "{FFFFFF}Boombax'a linki girin.\nBoomboxu nasýl kullanacaðýnýzý forumdan görüntüleyebilirsiniz:\n"WeburlName"", "Ekle", "Iptal");
	return 1;
}

Dialog:AddMusic1(playerid, response, listitem, inputtext[])
{
	if (!response) return ShowMusicList(playerid);

	if (isnull(inputtext) || strlen(inputtext) >= 128)
	{
		Dialog_Show(playerid, AddMusic1, DIALOG_STYLE_INPUT, "Hazýr Müzik Kaydý", "Boombax'a linki girin.\nForumda nasýl URL ekleyebileceðinizi bulabilirsiniz:\n"WeburlName"", "Ekle", "Iptal");
		return 1;
	}
	//ìóçûêà
	new music = GetPVarInt(playerid, #edit_music);

	if (music < 0 || music >= MAX_PLAYER_MUSIC || PlayerMusic[playerid][music][mID] != 0) return SendErrorMessage(playerid, "Ses Kaydý Hatasý");

	GetPVarString(playerid, #music_add, PlayerMusic[playerid][music][mName], 64);
	DeletePVar(playerid, #music_add);
	format(PlayerMusic[playerid][music][mUrl], 128, inputtext);
	OnPlayerAddMusic(playerid, music, PlayerMusic[playerid][music][mName], PlayerMusic[playerid][music][mUrl]);
	ShowMusicList(playerid);

	return 1;
}

/* Label sistemi */
forward LoadDynamicLabels();
forward OnLabelInsert(LabelID);

public LoadDynamicLabels()
{
	new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows)
	{
	    print("[Labels] Kayit bulunamadi.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
		if (i >= MAX_LABELS)	break;

	    cache_get_value_int(i, "id", LabelsInfo[i][tID]);
		cache_get_value_float(i, "posx", LabelsInfo[i][tPosX]);
		cache_get_value_float(i, "posy", LabelsInfo[i][tPosY]);
		cache_get_value_float(i, "posz", LabelsInfo[i][tPosZ]);
		//LabelsInfo[i][tColor] = cache_get_value_int(i, "color");
		cache_get_value_int(i, "vw", LabelsInfo[i][tVW]);
		cache_get_value_int(i, "interior", LabelsInfo[i][tInt]);
		cache_get_value(i, "labeltext", LabelsInfo[i][tText], 128);
		cache_get_value_int(i, "gametext", LabelsInfo[i][tGameText]);
		cache_get_value_int(i, "pickup", LabelsInfo[i][tPickupModel]);
		cache_get_value(i, "c_date", LabelsInfo[i][tCreateDate], 64);
		cache_get_value(i, "creator", LabelsInfo[i][tCreator], 32);
		cache_get_value_int(i, "edited", LabelsInfo[i][tEdited]);
		cache_get_value(i, "e_date", LabelsInfo[i][tEditDate], 64);
		cache_get_value(i, "editor", LabelsInfo[i][tEditor], 32);
		LabelsInfo[i][tLabelOn] = 1;

		if (!LabelsInfo[i][tGameText]) LabelsInfo[i][tLabel] = CreateDynamic3DTextLabel(LabelsInfo[i][tText], 0xFFFFFFFF, LabelsInfo[i][tPosX], LabelsInfo[i][tPosY], LabelsInfo[i][tPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LabelsInfo[i][tVW], LabelsInfo[i][tInt], -1, 100.0);
		else LabelsInfo[i][tLabel] = Text3D:INVALID_3DTEXT_ID;

		LabelsInfo[i][tPickUp] = CreateDynamicPickup(LabelsInfo[i][tPickupModel], 1, LabelsInfo[i][tPosX], LabelsInfo[i][tPosY], LabelsInfo[i][tPosZ], LabelsInfo[i][tVW], LabelsInfo[i][tInt], -1, 100.0);
		total++;
	}
	printf("[Labels] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public OnLabelInsert(LabelID)
{
	return LabelsInfo[LabelID][tID] = cache_insert_id();
}

AddLabelToFile(LabelID, LabelInfo[], virworld, color, gametext, Float:LX, Float:LY, Float:LZ, pickup, interior, date[], creator[])
{
    new query[512];

	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `labels` (posx,posy,posz,color,labeltext,vw,gametext,pickup,interior,c_date,creator,edited,e_date,editor) VALUES (%f,%f,%f,%i,'%e',%i,%i,%i,%i,'%s','%e',0,'NULL','NULL')",
	LX, LY, LZ, color, LabelInfo, virworld, gametext, pickup, interior, date, creator);
	mysql_tquery(dbHandle, query, "OnLabelInsert", "d", LabelID);
	return 1;
}

GetFreeLabelSlot()
{
	for(new i; i < MAX_LABELS; i++)
	{
		if (i >= MAX_LABELS) break;

		if (LabelsInfo[i][tLabelOn]) continue;

		return i;
	}
	return -1;
}

Label_Nearest(playerid)
{
	for(new i; i < MAX_LABELS; i++)
	{
		if (!LabelsInfo[i][tLabelOn]) continue;

		if (IsPlayerInRangeOfPoint(playerid, 15.0, LabelsInfo[i][tPosX], LabelsInfo[i][tPosY], LabelsInfo[i][tPosZ]) && GetInterior(playerid) == LabelsInfo[i][tInt] && GetWorld(playerid) == LabelsInfo[i][tVW])
		{
			return i;
		}
	}
	return -1;
}

CMD:alabel(playerid, params[]) //vova
{
	new option[16], secoption, thirdoption[128], fouroption, lab_text[80];

	if (!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (sscanf(params, "s[16]S()[127]", option, thirdoption))
	{
		SendHelpMessage(playerid, "/alabel [olustur / sil / duzenle / goto / bilgi]");
		return 1;
	}

	if (CompareStrings(option, "olustur"))
	{
		if (sscanf(thirdoption, "iis[79]", secoption, fouroption, lab_text)) return SendHelpMessage(playerid, "/label olustur [pickup model] [0 - 3DText | 1 - GameText] [text] Ornek Renk: ~FFFF00~");
		if (fouroption < 0 || fouroption > 1) 	return SendErrorMessage(playerid, "[0 - 3DText | 1 - GameText]");
		if (strlen(lab_text) > 127) 				return SendErrorMessage(playerid, "Maksimum karakter sayýsý 127'dir.");

		new labelid = GetFreeLabelSlot();

		if (labelid == -1) return SendErrorMessage(playerid, "Maksimum paket alým sayýsýna ulaþýldý.");

		GetPlayerPos(playerid, LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ]);
		LabelsInfo[labelid][tVW] = GetWorld(playerid);
		LabelsInfo[labelid][tInt] = GetInterior(playerid);
		LabelsInfo[labelid][tGameText] = fouroption;
		LabelsInfo[labelid][tPickupModel] = secoption;
		LabelsInfo[labelid][tLabelOn] = 1;
		format(LabelsInfo[labelid][tText], 128, "%s", lab_text);
		format(LabelsInfo[labelid][tCreateDate], 64, "%s", GetFullDate());
		format(LabelsInfo[labelid][tCreator], 32, "%s", GetAccName(playerid));

		if (!fouroption)
		{
			place_color(LabelsInfo[labelid][tText]);
			LabelsInfo[labelid][tLabel] = CreateDynamic3DTextLabel(LabelsInfo[labelid][tText], 0xFFFFFFFF, LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LabelsInfo[labelid][tVW], LabelsInfo[labelid][tInt], -1, 100.0);
		}
		else
		{
			LabelsInfo[labelid][tLabel] = Text3D:INVALID_3DTEXT_ID;
		}

		LabelsInfo[labelid][tPickUp] = CreateDynamicPickup(secoption, 1, LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ], LabelsInfo[labelid][tVW], LabelsInfo[labelid][tInt], -1, 100.0);
		AddLabelToFile(labelid, LabelsInfo[labelid][tText], GetWorld(playerid), 1, fouroption, LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ], secoption, GetInterior(playerid), GetFullDate(), GetAccName(playerid));
		SendSyntaxMessage(playerid, "Yeni bir pickup eklendi [ID: %i] | Metin: %s Model: %i.", labelid, lab_text, secoption);
		return 1;

	}
	else if (CompareStrings(option, "sil"))
	{
		if (sscanf(thirdoption, "i", secoption)) 										return SendHelpMessage(playerid, "/alabel sil [ID]");
		if (secoption < 0 || secoption > MAX_LABELS || !LabelsInfo[secoption][tLabelOn])	return SendErrorMessage(playerid, "Bu ID'ye ait bir label bulunamadý.");

		if (IsValidDynamic3DTextLabel(LabelsInfo[secoption][tLabel]))
		{
			DestroyDynamic3DTextLabel(LabelsInfo[secoption][tLabel]);
			LabelsInfo[secoption][tLabel] = Text3D:INVALID_3DTEXT_ID;
		}

		if (IsValidDynamicPickup(LabelsInfo[secoption][tPickUp]))
		{
			DestroyDynamicPickup(LabelsInfo[secoption][tPickUp]);
		}

		new query[256];

		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `labels` WHERE `id` = %i", LabelsInfo[secoption][tID]);
		mysql_tquery(dbHandle, query);

		LabelsInfo[secoption][tID] =
		LabelsInfo[secoption][tLabelOn] = 0;
		SendSyntaxMessage(playerid, "Label [ID: %i] silindi.", secoption);
		return 1;
	}
	else if (CompareStrings(option, "duzenle"))
	{
		if (sscanf(thirdoption, "iiS()[127]", secoption, fouroption, lab_text))		return SendHelpMessage(playerid, "/alabel duzenle [ID] [tip (1 - yazi | 2 - pos) [deðer]");
		if (secoption < 0 || secoption > MAX_LABELS || !LabelsInfo[secoption][tLabelOn])	return SendErrorMessage(playerid, "Bu ID'ye ait bir label bulunamadý.");
		if (fouroption < 1 || fouroption > 2)											return SendErrorMessage(playerid, "[1 - yazi | 2 - pos]");


		if (fouroption == 1)
		{
			if (strlen(lab_text) < 0) return SendErrorMessage(playerid, "Yeni metin girmediniz.");

			format(LabelsInfo[secoption][tText], 128, "%s", lab_text);

			if (LabelsInfo[secoption][tGameText] == 0 && IsValidDynamic3DTextLabel(LabelsInfo[secoption][tLabel]))
			{
				place_color(LabelsInfo[secoption][tText]);
				UpdateDynamic3DTextLabelText(LabelsInfo[secoption][tLabel], 0xFFFFFFFF, LabelsInfo[secoption][tText]);
			}

			new query[156];

			mysql_format(dbHandle, query, sizeof(query), "UPDATE `labels` SET `labeltext` = '%e', `edited` = '1', `e_date` = '%s', `editor` = '%e' WHERE `id` = %i",
			LabelsInfo[secoption][tText], GetFullDate(), GetAccName(playerid), LabelsInfo[secoption][tID]);
			mysql_tquery(dbHandle, query);

			LabelsInfo[secoption][tEdited] = 1;
			format(LabelsInfo[secoption][tEditDate], 64, "%s", GetFullDate());
			format(LabelsInfo[secoption][tEditor], 32, "%s", GetAccName(playerid));
			return 1;
		}
		if (fouroption == 2)
		{
			GetPlayerPos(playerid, LabelsInfo[secoption][tPosX], LabelsInfo[secoption][tPosY], LabelsInfo[secoption][tPosZ]);
			LabelsInfo[secoption][tVW] = GetWorld(playerid);
			LabelsInfo[secoption][tInt] = GetInterior(playerid);

			new query[384];

			mysql_format(dbHandle, query, sizeof(query), "UPDATE `labels` SET `posx` = %f, `posy` = %f, `posz` = %f, `interior` =%i, `vw` =%i, `edited` = '1', `e_date` = '%s', `editor` = '%e' WHERE `id` = %i",
			LabelsInfo[secoption][tPosX], LabelsInfo[secoption][tPosY], LabelsInfo[secoption][tPosZ], LabelsInfo[secoption][tInt], LabelsInfo[secoption][tVW], GetFullDate(), GetAccName(playerid), LabelsInfo[secoption][tID]);
			mysql_tquery(dbHandle, query);

			LabelsInfo[secoption][tEdited] = 1;
			format(LabelsInfo[secoption][tEditDate], 64, "%s", GetFullDate());
			format(LabelsInfo[secoption][tEditor], 32, "%s", GetAccName(playerid));

			if (IsValidDynamic3DTextLabel(LabelsInfo[secoption][tLabel]))
			{
				DestroyDynamic3DTextLabel(LabelsInfo[secoption][tLabel]);
				LabelsInfo[secoption][tLabel] = Text3D:INVALID_3DTEXT_ID;
			}

			if (IsValidDynamicPickup(LabelsInfo[secoption][tPickUp])) DestroyDynamicPickup(LabelsInfo[secoption][tPickUp]);

			if (LabelsInfo[secoption][tGameText] == 0)
			{
				LabelsInfo[secoption][tLabel] = CreateDynamic3DTextLabel(LabelsInfo[secoption][tText], 0xFFFFFFFF, LabelsInfo[secoption][tPosX], LabelsInfo[secoption][tPosY], LabelsInfo[secoption][tPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LabelsInfo[secoption][tVW], LabelsInfo[secoption][tInt], -1, 100.0);
			}
			LabelsInfo[secoption][tPickUp] = CreateDynamicPickup(LabelsInfo[secoption][tPickupModel], 1, LabelsInfo[secoption][tPosX], LabelsInfo[secoption][tPosY], LabelsInfo[secoption][tPosZ], LabelsInfo[secoption][tVW], LabelsInfo[secoption][tInt], -1, 100.0);
		}
		return 1;
	}
	else if (CompareStrings(option, "goto"))
	{
		if (sscanf(thirdoption, "i", secoption)) return SendHelpMessage(playerid, "/alabel goto [ID]");
		if (secoption < 0 || secoption > MAX_LABELS || !LabelsInfo[secoption][tLabelOn]) return SendErrorMessage(playerid, "Bu ID'ye ait bir label bulunamadý. ");

		SetPlayerPosEx(playerid, LabelsInfo[secoption][tPosX], LabelsInfo[secoption][tPosY], LabelsInfo[secoption][tPosZ]);
		SetWorld(playerid, LabelsInfo[secoption][tVW]);
		SetInterior(playerid, LabelsInfo[secoption][tInt]);
		return 1;
	}
	else if (CompareStrings(option, "bilgi"))
	{
		new labelid = Label_Nearest(playerid);

		if (labelid == -1) return SendErrorMessage(playerid, "Yakýnýnýzda hiç yazý yok. ");

		new label_txt[256], label_type[10];

		if (LabelsInfo[labelid][tGameText])	label_type = "GameText";
		else								label_type = "3DText";

		if (LabelsInfo[labelid][tEdited])
		{

			format(label_txt, sizeof(label_txt), "ID\t%i\nLabel Tip\t%s\nPickup\t%i [ID: %i]\n	\noluþturulma tarihi\t%s\n Oluþturan\t%s\n	\nSon düzenleme\t%s\nDüzenleyen\t%s",
			labelid, label_type, LabelsInfo[labelid][tPickupModel], LabelsInfo[labelid][tPickUp], LabelsInfo[labelid][tCreateDate], LabelsInfo[labelid][tCreator], LabelsInfo[labelid][tEditDate], LabelsInfo[labelid][tEditor]);
		}
		else
		{
			format(label_txt, sizeof(label_txt), "ID\t%i\nLabel Tip\t%s\nPickup\t%i [ID: %i]\n	\noluþturulma tarihi\t%s\n Oluþturan\t%s\n	\nSon düzenleme\t%s\nDüzenleyen\t%s",
			labelid, label_type, LabelsInfo[labelid][tPickupModel], LabelsInfo[labelid][tPickUp], LabelsInfo[labelid][tCreateDate], LabelsInfo[labelid][tCreator]);
		}

		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST, "{FFFFFF}Label Bilgisi", label_txt, "Kapat", "");
	}
	else
	{
		SendHelpMessage(playerid, "/alabel [seçenekler]");
		SendSyntaxMessage(playerid, "olustur / sil / duzenle / goto / bilgi");
	}
	return 1;
}

Lab_OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    for(new i = 0; i != MAX_LABELS; i++)
	{
	    if (LabelsInfo[i][tLabelOn] == 0 || pickupid != LabelsInfo[i][tPickUp] || LabelsInfo[i][tGameText] != 1) continue;

		GameTextForPlayer(playerid, LabelsInfo[i][tText], 4000, 4);
	}
	return 1;
}

Label_OnGameModeInit()
{
    return mysql_tquery(dbHandle, "SELECT * FROM `labels`", "LoadDynamicLabels");
}


/* Gate sistemi */
this::LoadDynamicGates()
{
    new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows)	return print("[Gates] Kayit bulunamadi.");

	for ( new i = 0; i < rows; i++)
	{
		cache_get_value_int(i, "id", Gates[i][gateID]);
		cache_get_value_int(i, "model", Gates[i][gateModel]);
		cache_get_value_int(i, "faction", Gates[i][gateFaction]);
        cache_get_value_float(i, "posx", Gates[i][gatePosX]);
        cache_get_value_float(i, "posy", Gates[i][gatePosY]);
        cache_get_value_float(i, "posz", Gates[i][gatePosZ]);
        cache_get_value_float(i, "posrx", Gates[i][gatePosRX]);
        cache_get_value_float(i, "posry", Gates[i][gatePosRY]);
        cache_get_value_float(i, "posrz", Gates[i][gatePosRZ]);
        cache_get_value_float(i, "speed", Gates[i][gateSpeed]);
        cache_get_value_float(i, "radius", Gates[i][gateRadius]);
        cache_get_value_float(i, "movex", Gates[i][gateMoveX]);
        cache_get_value_float(i, "movey", Gates[i][gateMoveY]);
        cache_get_value_float(i, "movez", Gates[i][gateMoveZ]);
        cache_get_value_float(i, "moverx", Gates[i][gateMoveRX]);
        cache_get_value_float(i, "movery", Gates[i][gateMoveRY]);
        cache_get_value_float(i, "moverz", Gates[i][gateMoveRZ]);
        cache_get_value_int(i, "interior", Gates[i][gateInt]);
		cache_get_value_int(i, "virworld", Gates[i][gateVW]);
        cache_get_value_int(i, "sound", Gates[i][gateSound]);
        Gates[i][gateObject] = CreateDynamicObject(Gates[i][gateModel], Gates[i][gatePosX], Gates[i][gatePosY], Gates[i][gatePosZ], Gates[i][gatePosRX], Gates[i][gatePosRY], Gates[i][gatePosRZ], Gates[i][gateVW], Gates[i][gateInt], -1, 200.0);
        Gates[i][gateOpened] = 0;
		Gates[i][gateObjectOn] = 1;

		total++;
	}
	printf("[Gates] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

AddGateToFile(gateid, modelid, faction, interior, virworld, Float:x, Float:y, Float:z)
{
    new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `gates` (model,faction,posx,posy,posz,interior,virworld) VALUES (%i,%i,%f,%f,%f,%i,%i)", modelid, faction, x, y, z, interior, virworld);
	mysql_tquery(dbHandle, query, "OnGateInsert", "d", gateid);
	return 1;
}

this::OnGateInsert(gateid) {
	return Gates[gateid][gateID] = cache_insert_id();
}

Gate_Nearest(playerid)
{
	for(new i; i != MAX_GATES; i++)
	{
	    if (GetWorld(playerid) == Gates[i][gateVW] && Gates[i][gateInt] == GetInterior(playerid) && IsPlayerInRangeOfPoint(playerid, Gates[i][gateRadius], Gates[i][gatePosX], Gates[i][gatePosY], Gates[i][gatePosZ]) && Gates[i][gateObjectOn])
	    {
			return i;
		}
	}
	return -1;
}

alias:gateac("gate");
CMD:gateac(playerid, params[])
{
	new gate = -1;

	if ((gate = Gate_Nearest(playerid)) == -1)	return 1;

	if (IsFactionDocs(Gates[gate][gateFaction]) && (!IsPlayerFactionPolice(playerid) || !IsPlayerFactionDocs(playerid))) return 1;
	else	if (Gates[gate][gateFaction] != 0 && Gates[gate][gateFaction] != PlayerInfo[playerid][pFaction]) return 1;

    Gates[gate][gateOpened] = (Gates[gate][gateOpened] == 1) ? (0) : (1);

	if (Gates[gate][gateOpened])	MoveDynamicObject(Gates[gate][gateObject], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ], Gates[gate][gateSpeed], Gates[gate][gatePosRX], Gates[gate][gatePosRY], Gates[gate][gatePosRZ]);
	else	 					MoveDynamicObject(Gates[gate][gateObject], Gates[gate][gateMoveX], Gates[gate][gateMoveY], Gates[gate][gateMoveZ], Gates[gate][gateSpeed], Gates[gate][gateMoveRX], Gates[gate][gateMoveRY], Gates[gate][gateMoveRZ]);

	if (Gates[gate][gateSound] != 0) PlayerPlaySoundEx(playerid, Gates[gate][gateSound]);
	return 1;
}

Gate_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;

    GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	if (GetPVarInt(playerid, #edit_gate) && Gates[GetPVarInt(playerid, #edit_gate)-1][gateObject] == objectid && Gates[GetPVarInt(playerid, #edit_gate)-1][gateObjectOn])
	{
		if (response == EDIT_RESPONSE_FINAL)
		{
		    new gate = GetPVarInt(playerid, #edit_gate)-1;

	    	DeletePVar(playerid, #edit_gate);
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			new query[128 + 56];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `gates` SET `posx`=%f,`posy`=%f,`posz`=%f,`posrx`=%f,`posry`=%f,`posrz`=%f WHERE `id`=%i", x, y, z, rx, ry, rz, Gates[gate][gateID]);
			mysql_tquery(dbHandle, query);

            GetDynamicObjectPos(objectid, Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
			GetDynamicObjectRot(objectid, Gates[gate][gatePosRX], Gates[gate][gatePosRY], Gates[gate][gatePosRZ]);
	        Gates[gate][gateOpened] = 0;
			SendSyntaxMessage(playerid, "Gate kapalý pozisyonu düzenlendi [ID: %i]", gate);
		}
		else if (response == EDIT_RESPONSE_CANCEL)
		{
	    	DeletePVar(playerid, #edit_gate);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
		return 1;
	}
	if (GetPVarInt(playerid, #2_edit_gate) && Gates[GetPVarInt(playerid, #2_edit_gate)-1][gateObject] == objectid && Gates[GetPVarInt(playerid, #2_edit_gate)-1][gateObjectOn])
	{
		if (response == EDIT_RESPONSE_FINAL)
		{
		    new gate = GetPVarInt(playerid, #2_edit_gate)-1;

			DeletePVar(playerid, #2_edit_gate);
            SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			new query[128 + 56];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `gates` SET `movex`=%f,`movey`=%f,`movez`=%f,`moverx`=%f,`movery`=%f,`moverz` = %f WHERE `id` = %i", x, y, z, rx, ry, rz, Gates[gate][gateID]);
			mysql_tquery(dbHandle, query);

			GetDynamicObjectPos(objectid, Gates[gate][gateMoveX], Gates[gate][gateMoveY], Gates[gate][gateMoveZ]);
			GetDynamicObjectRot(objectid, Gates[gate][gateMoveRX], Gates[gate][gateMoveRY], Gates[gate][gateMoveRZ]);
	        Gates[gate][gateOpened] = 1;

			SendSyntaxMessage(playerid, "Gate açýk pozisyonu düzenlendi [ID: %i]", gate);
		}
		else if (response == EDIT_RESPONSE_CANCEL)
		{
	    	DeletePVar(playerid, #2_edit_gate);
	    	DeletePVar(playerid, #edit_gate);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
	}
	return 1;
}

Gate_OnGameModeInit()
{
	mysql_tquery(dbHandle, "SELECT * FROM `gates`", "LoadDynamicGates");
	return 1;
}

/* Oyuncu sistemi */

PayDay(i)
{
	if (!IsPlayerLogged(i)) return 1;

	new oldbank = PlayerInfo[i][pBank], faction = PlayerInfo[i][pFaction], savings, tax_house, rent_house, debt, checks;

	if(ServerInfo[sDoublePayday]) checks = ServerInfo[sPricePayday] * 2;
	else checks = ServerInfo[sPricePayday];

	if (IsFactionLegal(faction)) checks += 150 + (PlayerInfo[i][pRank] * 50);

	if (PlayerInfo[i][pJob] == JOB_MECHANIC)		checks += 100;
	else if (PlayerInfo[i][pJob] == JOB_TAXI) 	checks += 100;

	if (PlayerInfo[i][pSavings] >= 50000 && PlayerInfo[i][pSavings] < 300000) savings = PlayerInfo[i][pSavings]*MEVDUAT_FAIZ_ORAN/100;
    PlayerInfo[i][pSavings] += savings;

	if (PlayerInfo[i][pBank] < 0)
	{
	    debt = floatround(float(checks) * 0.8);
	    PlayerInfo[i][pBank] += debt,
		checks -= debt;
	}

	new houses_tax[4] = {50, 100, 200, 400};

	for(new h; h != MAX_HOUSES; h++)
	{
	    if (HouseInfo[h][hID] == 0 || HouseInfo[h][hOwnerID] != PlayerInfo[i][pID])	continue;

		tax_house += houses_tax[HouseInfo[h][hClass]];
	}

	new houseid = -1;
    if (PlayerInfo[i][pRentPrice] != 0 && PlayerInfo[i][pRentKey] != 0 && (houseid = GetHouseIDByMysql(PlayerInfo[i][pRentKey])) != -1)
	{
	    rent_house += PlayerInfo[i][pRentPrice];
		HouseInfo[houseid][hCash] += PlayerInfo[i][pRentPrice];
	}
	PlayerInfo[i][pBank] -= tax_house + rent_house;

	DeletePVar(i, "BugKurtar");

	new msg[256];

    SendClientMessageEx(i, COLOR_SERVER2, "|______________LOS SANTOS BANK______________|");
	SendClientMessageEx(i, COLOUR_ALTO, "Hesap durumu: $%i, Aldýðýnýz maaþ: $%i", oldbank, checks);
	if (savings) SendClientMessageEx(i, COLOUR_ALTO, "Mevduat hesabý: $%i, gelen faiz: $%i", PlayerInfo[i][pSavings], savings);
	if (rent_house) SendClientMessageEx(i, COLOUR_ALTO, "Ev kirasý: -$%i", rent_house);
	if (tax_house) SendClientMessageEx(i, COLOUR_ALTO, "Emlak vergisi: -$%i", tax_house);
	SendClientMessageEx(i, COLOUR_ALTO, "Yeni maaþ hesabý bakiyeniz: $%i", PlayerInfo[i][pPayCheckMoney] + checks);
	SendClientMessageEx(i, COLOR_SERVER2, "|______________LOS SANTOS BANK______________|");

	SendSyntaxMessage(i, "Maaþýnýzý en yakýn ATM'den çekebilirsiniz.");

	if (debt) SendSyntaxMessage(i, "Bir miktar borcun var. Banka, borcunu ödemek için maaþýndan kesti.");

	PlayerInfo[i][pPayDayTime] = 0;
	PlayerInfo[i][pPayCheckMoney] += checks;
	PlayerInfo[i][pHours]++;
	PlayerInfo[i][pCareer]++;

	if (PlayerInfo[i][pWepLic] && PlayerInfo[i][pWepCount] > 0) {
		PlayerInfo[i][pWepCount]--;
		if (!PlayerInfo[i][pWepCount]) SendHelpMessage(i, "Tekrar silah satýn alabilirsiniz! (/gps)");
	}

	PlayerInfo[i][pExp]++;
	new expamount = (PlayerInfo[i][pLevel]+1) * LEVEL_EXP;

	if (PlayerInfo[i][pExp] >= expamount)
	{
		PlayerInfo[i][pLevel]++;
		PlaySound(i, 1052);

		format(msg, sizeof(msg), "~y~SEVIYE ATLADIN~n~~w~Yeni seviyen %i", PlayerInfo[i][pLevel]);
		GameTextForPlayer(i, msg, 5000, 1);

		SendServerMessage(i, "Seviye atladýnýz!");

		PlayerInfo[i][pExp] = 0;
		SetPlayerScore(i, PlayerInfo[i][pLevel]);

	}
	if (PlayerInfo[i][pHours] == 8)
	{
		PlaySound(i, 1052);

		SendServerMessage(i, "Artýk 'Çaylak' deðilsiniz, tüm iþlevlerinizi kullanabilirsiniz. ");
		SendServerMessage(i, "Hesabýnýza eklenen para: $%i, maaþýnýzla beraber bankadan çekebilirsiniz.", SERVER_BONUS);

		PlayerInfo[i][pPayCheckMoney] += SERVER_BONUS;
	}

	if (PlayerInfo[i][pForbid] > 0)
	{
		PlayerInfo[i][pForbid]--;
		SQL_SetInteger("users", "Forbid", PlayerInfo[i][pForbid], PlayerInfo[i][pID]);

		if (PlayerInfo[i][pForbid] == 0)
			SendClientMessage(i, COLOR_ORANGE, "[ ! ] {FFFFFF}Silah kullanma yasaðý sona erdi, þimdi tekrar kullanabilirsiniz.");

		Save_User(i);
	}
	return 1;
}

Player_OnPlayerUpdate(playerid)
{
    if (IsPlayerNPC(playerid) || !IsPlayerLogged(playerid)) 	return 1;

    if (IsPlayerAFK(playerid))
	{
	    if (!(PlayerInfo[playerid][pSettings] & togAFK))
	    SendSyntaxMessage(playerid, "%i saniye boyunca AFK kaldýnýz.", pTemp[playerid][pDarkAFK]-2);
	}

	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid), location[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
		for(new i; i != MAX_SPIKE; i++)
	    {
			if (!SpikeInfo[i][sCreated] && !IsPlayerInRangeOfPoint(playerid, 4.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ])) continue;
			new Float:objectX, Float:objectY, Float:objectZ;
			GetDynamicObjectPos(SpikeInfo[i][sObject], objectX, objectY, objectZ);

			if(IsPlayerInRangeOfPoint(playerid, 4.0, objectX, objectY, objectZ))
			{
				PlaySound(playerid, 1190);
				BumpTierBlowout(vehicleid);

                SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* HQ: %s[%s] model araç %s lokasyonunda çivi üzerinden geçti.", GetVehicleModelName(VehicleInfo[vehicleid][carModel]), VehicleInfo[vehicleid][carPlate], location);

			    SpikeInfo[i][sCreated] = 0;
			    SpikeInfo[i][sX] =
			    SpikeInfo[i][sY] =
			    SpikeInfo[i][sZ] = 0.0;

			    if (IsValidDynamicObject(SpikeInfo[i][sObject]))
			    {
				    DestroyDynamicObject(SpikeInfo[i][sObject]);
				    SpikeInfo[i][sObject] = INVALID_OBJECT_ID;
			    }
			}
		}
	}

	new vehicleid = GetPlayerSurfingVehicleID(playerid);

	if (vehicleid != INVALID_VEHICLE_ID && GetPlayerSpeed(vehicleid) >= 13 && !IsAdminDuty(playerid) && !IsASurfingVehicles(GetVehicleModel(vehicleid)))
    {
        new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
        SetPlayerPos(playerid, pos[0], pos[1], pos[2]+2.5);
	    AMSG(COLOR_LIGHTRED, "AdmCmd: %s adlý kiþi CarSurfing yapmaya çalýþýyor.", GetNameEx(playerid));
        GameTextForPlayer(playerid, "~w~Car Surfing ~r~Yasak!", 3000, 4);
    }


	if(PlayerInfo[playerid][pProbationSure] == 1) {
		PlayerInfo[playerid][pProbation] = 0;
		PlayerInfo[playerid][pProbationSure] = 0;
		SendServerMessage(playerid, "Probation / Þartlý tahliye süreciniz an itibariyle sona ermiþtir.");
	}

	if(gettime() > pTemp[playerid][HileKontrol])
	{
		new Float:oyuncu_pos[3];
		GetPlayerPos(playerid, oyuncu_pos[0], oyuncu_pos[1], oyuncu_pos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, 110.0, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]) && PlayerInfo[playerid][pAdmin] < 3)
		{
		    if((IsPlayerInAnyVehicle(playerid) && IsAPlane(GetPlayerVehicleID(playerid)) == 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleSpeed(GetPlayerVehicleID(playerid)) < 40.0) || GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && !IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
		    {
				if(!pTemp[playerid][pLogged] && (PlayerInfo[playerid][pPosX] != 1045.441040)) return KickLine(playerid, "Teleport hilesi.");
				if(GetPVarInt(playerid, "tpOnlem") != 1 && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0) SendAdmMessage("[Anti-Cheat] %s (%d), Teleport Hilesi kullanýyor olabilir.", GetNameEx(playerid), playerid);
				else DeletePVar(playerid, "tpOnlem");
				GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
			}
			else GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 110.0, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ])) GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
		pTemp[playerid][HileKontrol] = gettime() + 2;
	}

    new Float:health;
	GetPlayerHealth(playerid, health);
	if (health != PlayerInfo[playerid][pHealth] && PlayerInfo[playerid][pHealth] > 5)  SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);

	if (GetPlayerScore(playerid) != PlayerInfo[playerid][pLevel]) SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);

	pTemp[playerid][pDarkAFK] = 0;
    return 1;
}
this::KickPlayer(playerid)
{
    if (GetPVarInt(playerid,"kicked") != 1)	return 1;

    DeletePVar(playerid,"kicked");
	Kick(playerid);
	return 1;
}

this::Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(targetid, x, y, z);
	return GetPlayerDistanceFromPoint(playerid, x, y, z);
}

PlayerEnterFreeze(playerid)
{
	InfoMSG(playerid, "~w~Haritalar ~g~yukleniyor", 6);
	FreezePlayer(playerid);
	SetTimerEx("PlayerEnterUnFreeze", 1000, false, "i", playerid);
	return 1;
}

this::CBugFreezeOver(playerid)
{
	TogglePlayerControllable(playerid, true);

	pCBugging[playerid] = false;
	return 1;
}

this::PlayerEnterUnFreeze(playerid)
{
	UnFreezePlayer(playerid);
	return 1;
}

UnFreezePlayer(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

FreezePlayer(playerid)
{
	TogglePlayerControllable(playerid, 0);
	return 1;
}

SetPlayerSkinEx(playerid, skinid)
{
	PlayerInfo[playerid][pSkin] = skinid;
	//SetSpawnInfoEx(playerid, 1642.2006, -2334.4751, -2.6797);
	return SetPlayerSkin(playerid, skinid);
}

Float:GetPlayerHealthEx(playerid)
{
	new Float:hp;
	AntiCheatGetHealth(playerid, hp);
	return hp;
}

SetPlayerSkill(playerid, type = 1)
{
	if (type == 1) { // ï¿½ï¿½
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 899);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 1);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);

		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
	} else if (type == 2) { // +-
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 200);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);

		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 200);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 200);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 200);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 200);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 200);
	} else if (type == 3) { // ï¿½ï¿½ï¿½ï¿½ï¿½
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 100);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);

		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 50);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 50);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 100);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 50);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 50);
	}
	return 1;
}

IsPlayerAFK(playerid)
{
	return (pTemp[playerid][pDarkAFK] > 5)?(1):(0);
}

/*IsPlayerInCube(playerid, Float:min_x, Float:min_y, Float:max_x, Float:max_y)
{
    new Float: x, Float: y, Float: z;

    GetPlayerPos(playerid, x, y, z);
    return ((x <= max_x && x >= min_x) && (y <= max_y && y >= min_y))?(1):(0);
}*/

IsValidPlayerName(const str[])
{
	if (!str[0] || str[0] == '\1') return 0;

	for (new i = 0, l = strlen(str); i != l; i ++) {
	    if ((str[i] >= '0' && str[i] <= '9') || (str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z'))	continue;
		if (str[i] == '_' || str[i] == '$' || str[i] == '@' || str[i] == '[' || str[i] == ']')	continue;
		else return 0;
	}
	return 1;
}

SendPlayerToPlayer(playerid, targetid)
{
	new Float:x, Float:y, Float:z;

	GetPlayerPos(targetid, x, y, z);

    if (GetInterior(targetid) || GetWorld(targetid))
	{
   		PlayerInfo[playerid][pLocationPos][0] = PlayerInfo[targetid][pLocationPos][0];
	    PlayerInfo[playerid][pLocationPos][1] = PlayerInfo[targetid][pLocationPos][0];
		PlayerInfo[playerid][pLocationPos][2] = PlayerInfo[targetid][pLocationPos][0];
	}

	if(IsPlayerInAnyVehicle(playerid))
    {
        SetVehiclePos(GetPlayerVehicleID(playerid), x, y + 2, z);
        LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(targetid));
        SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), GetPlayerVirtualWorld(targetid));
		SetInterior(playerid, GetInterior(targetid));
		SetWorld(playerid, GetWorld(targetid));
    }
    else
	{
		SetPlayerPosEx(playerid, x + 1, y, z);
		SetInterior(playerid, GetInterior(targetid));
		SetWorld(playerid, GetWorld(targetid));
		pTemp[playerid][pHouseEntered] = pTemp[targetid][pHouseEntered];
		pTemp[playerid][pApartEntered] = pTemp[targetid][pApartEntered];
		pTemp[playerid][pBizEntered] = pTemp[targetid][pBizEntered];
	}
	return 1;
}

ShowSettings(playerid)
{
	new text[128], string[1024];

	switch(PlayerInfo[playerid][pWalk])//0
	{
	    case 0: format(text, sizeof(text), "Yürüme Stili\t[Kapalý]\n");
		default: format(text, sizeof(text), "Yürüme Stili\t[%i]\n", PlayerInfo[playerid][pWalk]);
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pTalk])//1
	{
	    case 0: format(text, sizeof(text), "Konuþma Tarzý\t[Kapalý]\n");
		default: format(text, sizeof(text), "Konuþma Tarzý\t[%i]\n", PlayerInfo[playerid][pTalk]);
	}
	strcat(string, text);

    format(text, sizeof(text), "Dövüþ Tarzý\t[%s]\n", GetFightStyleName(playerid));//2
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togOOC)//4
	{
	    case 0: text = "OOC Duyuru Kanalý\t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "OOC Duyuru Kanalý\t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togName)//4
	{
	    case 0: text = "Oyuncu isimleri\t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "Oyuncu isimleri\t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

    switch(PlayerInfo[playerid][pSettings] & togAdv)//5
	{
	    case 0: text = "Reklam metinleri\t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "Reklam metinleri\t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togJoin)//6
	{
	    case 0: text = "Oyuncu giriþ/çýkýþ metinleri\t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "Oyuncu giriþ/çýkýþ metinleri\t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togGov)//7
	{
	    case 0: text = "Hükümet Duyurularý (/gov)\t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "Hükümet Duyurularý (/gov)\t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togPM)//8
	{
	    case 0: text = "Özel Mesajlar \t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "Özel Mesajlar \t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togNews)//12
	{
	    case 0: text = "Haber metinleri\t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "Haber metinleri\t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

    switch(PlayerInfo[playerid][pSettings] & togAFK)//13
	{
	    case 0: text = "AFK geçirilen süreyi göster\t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "AFK geçirilen süreyi göster\t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togHUD)//14
	{
	    case 0: text = "Hud Göster\t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "Hud Göster\t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & yesMHUD)//15
	{
	    case 0: text = "Modern Hud Göster\t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "Modern Hud Göster\t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togFaction)//16
	{
	    case 0: text = "Birlik Sohbeti\t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "Birlik Sohbeti\t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togCustomBar)//17
	{
	    case 0: text = "Özel Can barý\t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "Özel Can Barý\t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togDoSetting)//18
	{
	    case 0: text = "/do Renk Ayarý\t[{79BFA3}Yeþil{FFFFFF}]\n";
		default: text = "/do Renk Ayarý\t[{C2A2DA}Mor{FFFFFF}]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togEnter)//19
	{
	    case 0: text = "Giriþ/çýkýþ için Y tuþu kullanýmý\t[{90EE90}Aktif{FFFFFF}]\n";
		default: text = "Giriþ/çýkýþ için Y tuþu kullanýmý\t[{FF6347}Deaktif{FFFFFF}]\n";
	}
	strcat(string, text);

	strcat(string, "Admin Yetkileri\tmenüye git\n"); // 20

	format(text, sizeof(text), "Harita Ayarlarý\tmenüye git\n");//21
	strcat(string, text);

	strcat(string, "Þifre Deðiþtir");//22

	Dialog_Show(playerid, MainSettings, DIALOG_STYLE_TABLIST, "Ayarlar", string, "Seç", "Geri Dön");
	return 1;
}

PlayerNearPlayer(Float:radi, playerid, targetid)
{
	new Float:fX, Float:fY, Float:fZ;
	GetPlayerPos(targetid, fX, fY, fZ);
	return (GetInterior(playerid) == GetInterior(targetid) && GetWorld(playerid) == GetWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radi, fX, fY, fZ);
}

SavePlayerPos(playerid)
{
	GetPlayerPos(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
	GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
	PlayerInfo[playerid][pWorld] = GetWorld(playerid);
	PlayerInfo[playerid][pInt] = GetInterior(playerid);
	SetSpawnInfoEx(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
	return 1;
}

GiveCash(playerid, cash)
{
 	PlayerInfo[playerid][pCash] += cash;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerInfo[playerid][pCash]);

	new __cash = cash;

	if (cash < 0)	cash = -cash;

    new mes[19];
	format(mes, sizeof(mes), "%s$%i", (__cash < 0)?("~r~-"):("~g~+"), cash);
	GameTextForPlayer(playerid, mes, 1000, 1);

    SQL_SetInteger("users", "cash", PlayerInfo[playerid][pCash], PlayerInfo[playerid][pID]);
	return 1;
}

SetCash(playerid, cash)
{
	PlayerInfo[playerid][pCash] = cash;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, cash);
	return 1;
}

GetCash(playerid)
{
	return PlayerInfo[playerid][pCash];
}

SendClientMessageEx(playerid, color, const str[], {Float,_}:...)
{
	static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		SendClientMessage(playerid, color, string);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	return SendClientMessage(playerid, color, str);
}

stock SendClientMessageToAllEx(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.pri args
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format

        #emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) {
			SendClientMessage(i, color, string);
		}
		return 1;
	}
	return SendClientMessageToAll(color, str);
}

SendNearbyMessage(Float:radius, playerid, color, const str[], {Float,_}:...)
{
	static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
		    if (0 == IsPlayerLogged(i) || 0 == PlayerNearPlayer(radius, i, playerid)) continue;
			SendClientMessage(i, color, string);
		}
		return 1;
	}

	foreach (new i : Player)
	{
	    if (0 == IsPlayerLogged(i) || 0 == PlayerNearPlayer(radius, i, playerid)) continue;
		SendClientMessage(i, color, str);
	}
	return 1;
}

SendLocalMessage(Float:radius, playerid, col1, col2, col3, col4, col5, const str[], {Float,_}:...)
{
	static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
		    if (0 == IsPlayerLogged(i)) 							continue;
			if (PlayerNearPlayer(radius/16, i, playerid))		SendClientMessage(i, col1, string);
            else if (PlayerNearPlayer(radius/8, i, playerid))	SendClientMessage(i, col2, string);
            else if (PlayerNearPlayer(radius/4, i, playerid))	SendClientMessage(i, col3, string);
            else if (PlayerNearPlayer(radius/2, i, playerid))	SendClientMessage(i, col4, string);
            else if (PlayerNearPlayer(radius, i, playerid))		SendClientMessage(i, col5, string);
			//SetPlayerChatBubble(i, string, col5, 5, 5000);
		}
		return 1;
	}

	foreach (new i : Player)
	{
	    if (0 == IsPlayerLogged(i))							continue;
	    if (PlayerNearPlayer(radius/16, i, playerid))		SendClientMessage(i, col1, string);
		else if (PlayerNearPlayer(radius/8, i, playerid))	SendClientMessage(i, col2, string);
		else if (PlayerNearPlayer(radius/4, i, playerid))	SendClientMessage(i, col3, string);
		else if (PlayerNearPlayer(radius/2, i, playerid))	SendClientMessage(i, col4, string);
		else if (PlayerNearPlayer(radius, i, playerid))		SendClientMessage(i, col5, string);
		//SetPlayerChatBubble(i, string, col5, 5, 5000);
	}
	return 1;
}

SendPMToPlayer(playerid, targetid, text[])
{
    new pos = MAXLEN;
	if (pos < MAXLEN-1) pos = MAXLEN;

	if (strlen(text) > MAXLEN)
	{
		if (IsAdminDuty(playerid))	SendClientMessageEx(targetid, COLOUR_TURBO, ">> {a92626}%s {F0F000}(%i): %.*s ...", GetNameEx(playerid), playerid, pos, (text));
		else						SendClientMessageEx(targetid, COLOUR_TURBO, ">> %s (%i): %.*s ...", GetNameEx(playerid), playerid, pos, (text));
		SendClientMessageEx(targetid, COLOUR_TURBO, ">> ... %s", (text)[pos]);

		if (IsAdminDuty(targetid))	SendClientMessageEx(playerid, COLOUR_TULIPTREE, "<< {a92626}%s (%i){E5C43E}: %.*s ...", GetNameEx(targetid), targetid, pos, (text));
		else						SendClientMessageEx(playerid, COLOUR_TULIPTREE, "<< %s (%i): %.*s ...", GetNameEx(targetid), targetid, pos, (text));
		SendClientMessageEx(playerid, COLOUR_TULIPTREE, ">> ... %s", (text)[pos]);
	}
	else
	{
	    if (IsAdminDuty(playerid)) 	SendClientMessageEx(targetid, COLOUR_TURBO, ">> {a92626}%s {F0F000}(%i): %s", GetNameEx(playerid), playerid, (text));
		else						SendClientMessageEx(targetid, COLOUR_TURBO, ">> %s (%i): %s", GetNameEx(playerid), playerid, (text));
		if (IsAdminDuty(targetid))	SendClientMessageEx(playerid, COLOUR_TULIPTREE, "<< {a92626}%s (%i){E5C43E}: %s", GetNameEx(targetid), targetid, (text));
		else						SendClientMessageEx(playerid, COLOUR_TULIPTREE, "<< %s (%i): %s", GetNameEx(targetid), targetid, (text));
	}

	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || !IsAdminDuty(i) || (pTemp[i][pPMPlayer] != playerid && GetPVarInt(i, #spypm_all) != 1)) continue;

        if (strlen(text) > MAXLEN)
		{
			SendClientMessageEx(i, COLOUR_TURBO, "[ELF GÖZÜ PM] >> %s > %s (%i): %.*s ...", GetNameEx(playerid), GetName(targetid), targetid, pos, (text));
			SendClientMessageEx(i, COLOUR_TURBO, "... %s", (text)[pos]);
		}
		else
		{
			SendClientMessageEx(i, COLOUR_TURBO, "[ELF GÖZÜ PM] >> %s > %s (%i): %s", GetNameEx(playerid), GetName(targetid), targetid, text);
		}
	}
	return 1;
}

GetPlayer2DZone(playerid, zone[], len)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	if (GetWorld(playerid) || GetInterior(playerid))
	{
		x = PlayerInfo[playerid][pLocationPos][0];
		y = PlayerInfo[playerid][pLocationPos][1];
		z = PlayerInfo[playerid][pLocationPos][2];
	}

	for(new i = 0; i != sizeof(gSAZones); i++)
	{
		if (x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4]) return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
	}
	return 0;
}

GetZone(Float:x, Float:y, zone[], len)
{
	for(new i = 0; i != sizeof(gSAZones); i++)
	{
		if (x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4]) return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
	}
	return format(zone, len, "Bilinmiyor");
}



ResetPlayerVariables(playerid)
{
	MDC_Hide(playerid);
    ResetDamages(playerid);
	for(new i = 0; i != MAX_CHARACTERS; i++)
	{
	    login_char_id[playerid][i] = 0;
	    format(login_char_name[playerid][i], MAX_PLAYER_NAME, "Boþ slot");
	}

    RadarHud_Sil(playerid);

    RemovePlayerMask(playerid);
	maskOn{playerid} = false;
	DeletePVar(playerid, "BugKurtar");

	new reportid;
	reportid = GetPVarInt(playerid, "reportidm");
	pTemp[playerid][pSendReport] = false;
	pTemp[playerid][pDestekTakip] = 0;

	if(reportid >= 0)
	{
        ReportInfo[reportid][rReportExists] = false;
	    ReportInfo[reportid][rReportBy] = INVALID_PLAYER_ID;
	}
	DeletePVar(playerid, "reportidm");

	new reportidx;
	reportidx = GetPVarInt(playerid, "questidm");
	pTemp[playerid][pSendQuest] = false;
	if(reportidx >= 0)
	{
	    QuestInfo[reportidx][qQuestExists] = false;
	    QuestInfo[reportidx][qQuestBy] = INVALID_PLAYER_ID;
	}
	DeletePVar(playerid, "questidm");
	DeletePVar(playerid, PVAR_DARKSCREEN_ISACTIVE);

    pTemp[playerid][pTruckerTime] = 0;
    pTemp[playerid][pTruckerPrice] = 0;
    pTemp[playerid][pTruckerOn] = 0;
	pTemp[playerid][pColorPage] = 0;
	pTemp[playerid][pTackleMode] = false;
	pTemp[playerid][pLastLogin] = 0;

	pTemp[playerid][pAdvertTime] = 0;
	pTemp[playerid][pDebugMode] = 0;

    // Hýrsýzlýk
	PlayerInfo[playerid][SafeObject][0] = PlayerInfo[playerid][SafeObject][1] = 0;

	// Uyuþturucu Baðýmlýlýðý
	PlayerInfo[playerid][pBagimlilikEXP] = PlayerInfo[playerid][pBagimlilikSeviye] = PlayerInfo[playerid][pUTedaviEXP] = PlayerInfo[playerid][pUTedaviSure] = PlayerInfo[playerid][pKrizSure] = PlayerInfo[playerid][UyusKullan] = 0;

	KillTimer(YuruyusTimer[playerid]);

	for(new j; j < 5; j++)
		PlayerInfo[playerid][pOlusumDivision][j] = -1;

    cameraSession[playerid] =
	JackingEngine[playerid] =
	JackingLock[playerid] =
	BreakingHouse[playerid] =
	JackingVehicle[playerid] = 0;

    ResetSpectateVariables(playerid);

	OnAnim{playerid} = false;

	Job_OnPlayerDisconnect(playerid);

	for(new i; i != MAX_PLAYERS; i++)
		people_blocking[playerid][i] = 0;

	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
		PlayerContacts[playerid][i][contactOn] = 0;

	for(new i = 0; i < MAX_PLAYER_NOTES; i++)
		PlayerNotes[playerid][i][noteOn] = 0;

	for(new i; i != 30; i++)
		pTemp[playerid][pWeaponListed][i] = 0;

    for(new i; i != 5; i++)
		pTemp[playerid][pListed][i] = 0;

	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		Inventory[playerid][i][pInvItem] = 0;
		Inventory[playerid][i][pInvItem] = 0;
		Inventory[playerid][i][pInvEx] = 0;
		Inventory[playerid][i][pInvQFloat] = 0;
		Inventory[playerid][i][pInvQ] = 0;
		Inventory[playerid][i][pInvName] = EOS;
	}

	for(new x; x < 12; x++)
	{
		PlayerInfo[playerid][pWeapons][x] = 0;
		PlayerInfo[playerid][pAmmo][x] = 0;
	}

    PlayerInfo[playerid][pUzerindekiSilah] = PlayerInfo[playerid][pSilahTick] = PlayerInfo[playerid][SilahTick] = 0;

    pTemp[playerid][pRentveh] = 0;
	PlayerInfo[playerid][pCarKey] = 0;
    pTemp[playerid][AntiHileSistemi] = -1;
	// Anti-Hile
	pTemp[playerid][OlumSayisi] = pTemp[playerid][OlumSuresi] = pTemp[playerid][pCarTick] = pTemp[playerid][pCarWarpTime] = pTemp[playerid][pCarWarpVehicleID] = 0;
	pTemp[playerid][HileKontrol] = gettime();

	pTemp[playerid][pChangeNick] = EOS;
	pTemp[playerid][pCallName] = EOS;
	pTemp[playerid][pCallKeypad] = EOS;

	pTemp[playerid][pPayphone] = -1;

	//pTemp[playerid][JackingVehID] =
	pTemp[playerid][pUnscrambleID] =
	pTemp[playerid][pScrambleFailed] =
	pTemp[playerid][pScrambleSuccess] =
	//pTemp[playerid][JackingCP] =
	pTemp[playerid][JackingType] =
	pTemp[playerid][JackingWarnings] =
	pTemp[playerid][pPizzaBoy] =
    pTemp[playerid][pDemolitionTime] =
	pTemp[playerid][pDrugUse] =
	pTemp[playerid][pDrugTime] =
	pTemp[playerid][pDrugChgWeather] =
	pTemp[playerid][pMicPerm] = false;
	pTemp[playerid][tempItem] =
	pTemp[playerid][tempEx] =
	pTemp[playerid][tempQ] =
	pTemp[playerid][pLicenseExam] =
	pTemp[playerid][pTesterDuty] =
    pTemp[playerid][pAdminDuty] =
	pTemp[playerid][pServeType] =
	pTemp[playerid][pGreetType] =
	pTemp[playerid][pFoodStand] =
	pTemp[playerid][pDMLog] =
	pTemp[playerid][pSpawned] =
	pTemp[playerid][pNews] =
	pTemp[playerid][pDarkAFK] =
	PlayerInfo[playerid][pKelepceli] =
	pTemp[playerid][pFireTime] =
	pTemp[playerid][pPlantTime] =
	pTemp[playerid][pPlantType] =
    pTemp[playerid][pFishTime] =
	pTemp[playerid][pPatrol] =
    pTemp[playerid][pReportTime] =
	pTemp[playerid][pLogged] =
	pTemp[playerid][pLoggedTime] =
	pTemp[playerid][pLoggedTry] =
	pTemp[playerid][pJob] =
	pTemp[playerid][pJobTime] =
	pTemp[playerid][pRentPrice] =
	pTemp[playerid][pHousePrice] =
	pTemp[playerid][pCarPrice] =
	pTemp[playerid][pTaser] =
	pTemp[playerid][pBeanbag] =
	pTemp[playerid][pLTL] =
	pTemp[playerid][pTaserTime] =
	pTemp[playerid][pEditBort] =
    pTemp[playerid][pCCTV] =
	pTemp[playerid][pZond] =
	pTemp[playerid][pDamagesCount] =
	pTemp[playerid][pInjuredTime] =
	pTemp[playerid][pInjuredLegTime] =
	pTemp[playerid][pHelpUp3dText] =
	pTemp[playerid][pFlashTime] =
	pTemp[playerid][pHealTime] =
	pTemp[playerid][pBuildHouse] =
	pTemp[playerid][pRamType] =
    pTemp[playerid][pRamTime] =
	pTemp[playerid][pCallStatus] =
	pTemp[playerid][pCallIncoming] =
	pTemp[playerid][pCallTime] =
	pTemp[playerid][pWepPrice] =
	PlayerInfo[playerid][pGanjaTime] =
	PlayerInfo[playerid][pPrescribe] =
	PlayerInfo[playerid][pDependence] =
	PlayerInfo[playerid][pDemolition] =
	PlayerInfo[playerid][pID] =
	PlayerInfo[playerid][pAccID] =
	pTemp[playerid][pInteriorHouse] =
	pTemp[playerid][pInteriorBiz] =
	pTemp[playerid][pInteriorID] =
	pTemp[playerid][pCargoID] =
	pTemp[playerid][pCallOn] =
	pTemp[playerid][pEmergency] =
	pTemp[playerid][pPoliceCalls] =
	pTemp[playerid][pPoliceJails] =
	pTemp[playerid][pPoliceFines] =
	pTemp[playerid][UsingBort] =
	pTemp[playerid][UsingCorpse] =
	pTemp[playerid][tempStatus] =
	pTemp[playerid][pTraceStage] = 0;
	pTemp[playerid][pBoombox_house] =
	SetPVarInt(playerid, "AtSpray", -1);
	pTemp[playerid][pBoombox_biz] =
	pTemp[playerid][pBizEntered] =
	pTemp[playerid][pApartEntered] =
	pTemp[playerid][pHouseEntered] =
	pTemp[playerid][pHouseHouse] =
	pTemp[playerid][pFurniture] =
	pTemp[playerid][pFurnitureB] =
	pTemp[playerid][p3DMenu] = -1;
    pTemp[playerid][pRamHouse] =
	pTemp[playerid][pRamVeh] =
    pTemp[playerid][pRamGarage] =
    pTemp[playerid][pRamBiz] =
	pTemp[playerid][pTraceGZ] = -1;

	pTemp[playerid][pBizPrice] = 0;
	pTemp[playerid][pBizID] = INVALID_PLAYER_ID;

	pTemp[playerid][pBoombox] =
	pTemp[playerid][pServePlayer] =
	pTemp[playerid][pGreetPlayer] =
	pTemp[playerid][pMDCPlayer] =
	pTemp[playerid][pWepPlayer] =
	pTemp[playerid][pRentPlayer] =
	pTemp[playerid][pPMPlayer] =
	pTemp[playerid][pHousePlayer] =
	pTemp[playerid][pInterview] =
	pTemp[playerid][pBizPlayer] =
	pTemp[playerid][pInterviewPlayer] =
	pTemp[playerid][pGozAlti] =
	pTemp[playerid][pHealPlayer] =
	pTemp[playerid][pFactionPlayer] =
	pTemp[playerid][pFriskPlayer] =
	pTemp[playerid][pSpecPlayer] =
	pTemp[playerid][pHirePlayer] =
	pTemp[playerid][pCarPlayer] =
	pTemp[playerid][pCallLine] =
	pTemp[playerid][pInjureText] =
	pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;

	pTemp[playerid][pDriver] = INVALID_VEHICLE_ID;
	pTemp[playerid][pZondActor] = INVALID_ACTOR_ID;
    pTemp[playerid][pRamObj] = INVALID_OBJECT_ID;

	for(new c = 0; c < 5; c++)
	{
		pTemp[playerid][MyCarSpawn][c] = 0;
		pTemp[playerid][MyCarSpawn][c] = 0;
	}

	for(new i = 0; i < MAX_WEAP-1; i++)	PlayerInfo[playerid][pHideWeap][i] = 0;

	PlayerInfo[playerid][pAccname] = EOS;
	PlayerInfo[playerid][pBirthdate] =
	PlayerInfo[playerid][pReportMute] =

	PlayerInfo[playerid][pFishTime] =
	PlayerInfo[playerid][pCarKey] =
	PlayerInfo[playerid][pTog][0] =
	PlayerInfo[playerid][pTog][1] =
	PlayerInfo[playerid][pTog][2] =
	PlayerInfo[playerid][pSwatDuty] =
	PlayerInfo[playerid][pOnDuty] =
	PlayerInfo[playerid][pCash] =
	PlayerInfo[playerid][pBank] =
	PlayerInfo[playerid][pSkin] =
	PlayerInfo[playerid][pSex] =
	PlayerInfo[playerid][pAge] =
	PlayerInfo[playerid][pRace] =
	PlayerInfo[playerid][pOrigin] =
	PlayerInfo[playerid][pLevel] =
	PlayerInfo[playerid][pExp] =
	PlayerInfo[playerid][pHours] =
	PlayerInfo[playerid][pMinutes] =
	PlayerInfo[playerid][pAdmin] =
	PlayerInfo[playerid][pAdminHide] =
	PlayerInfo[playerid][pHelper] =
	PlayerInfo[playerid][pHelperLead] =
	PlayerInfo[playerid][pFMAdmin] =
	PlayerInfo[playerid][pMapper] =
	PlayerInfo[playerid][pEbc] =
	PlayerInfo[playerid][pSkinYetki] =
	PlayerInfo[playerid][pRdscripter] =
	PlayerInfo[playerid][pInt] =
	PlayerInfo[playerid][pWorld] =
	PlayerInfo[playerid][pJailed] =
	PlayerInfo[playerid][pIsolateTime] =
	PlayerInfo[playerid][pJailTime] =
	PlayerInfo[playerid][pWarns] =
	PlayerInfo[playerid][pNameChanges] =
	PlayerInfo[playerid][pNumberChanges] =
	PlayerInfo[playerid][pCarLic] =
	PlayerInfo[playerid][pWepLic] =
	PlayerInfo[playerid][pFlyLic] =
	PlayerInfo[playerid][pTaxiLic] =
	PlayerInfo[playerid][pInjured] =
	PlayerInfo[playerid][pDeathReason] =
	PlayerInfo[playerid][pFightStyle] =
	PlayerInfo[playerid][pPayCheckMoney] =
	PlayerInfo[playerid][pPayDayTime] =
	PlayerInfo[playerid][pNumber] =
	PlayerInfo[playerid][pSavings] =
	PlayerInfo[playerid][pRentKey] =
	PlayerInfo[playerid][pRentPrice] =
	PlayerInfo[playerid][pChannel] =
	PlayerInfo[playerid][pOwnedChannel] =
	PlayerInfo[playerid][pAuthed] =
	PlayerInfo[playerid][pSpareKey] =
	PlayerInfo[playerid][pVerdigiReklam] = -1;
	PlayerInfo[playerid][pWorkOn] =
	PlayerInfo[playerid][pWalk] =
	PlayerInfo[playerid][pFaction] =
	PlayerInfo[playerid][pJob] =
	PlayerInfo[playerid][pCareer] =
	PlayerInfo[playerid][pRank] =
	PlayerInfo[playerid][pBadgeNumber] =
	PlayerInfo[playerid][pDriveWarns] =
	PlayerInfo[playerid][pWepWarns] =
	PlayerInfo[playerid][pWepCount] =
	PlayerInfo[playerid][pArrested] =
	PlayerInfo[playerid][pTalk] =
	PlayerInfo[playerid][pSwat] =
	PlayerInfo[playerid][pLawyer] =
	PlayerInfo[playerid][pAuthwep] =
	PlayerInfo[playerid][pPrisoned] =
	PlayerInfo[playerid][pHud] = 0;

	pTemp[playerid][pInvulnerable] =
	PlayerInfo[playerid][pPosX] =
	PlayerInfo[playerid][pPosY] =
	PlayerInfo[playerid][pPosZ] =
	PlayerInfo[playerid][pPosA] =
	PlayerInfo[playerid][pArmour] = 0.0;

	PlayerInfo[playerid][pSlot] = 1;

	if(IsValidDynamicObject(sandalyeobje[playerid])) DestroyDynamicObject(sandalyeobje[playerid]);
	if(IsValidDynamicObject(teksandalyeobje[playerid])) DestroyDynamicObject(teksandalyeobje[playerid]);

	sandalyeobje[playerid] = INVALID_OBJECT_ID;
	teksandalyeobje[playerid] = INVALID_OBJECT_ID;

	//Tog
	PlayerInfo[playerid][pSettings] &= ~togService;
	PlayerInfo[playerid][pSettings] &= ~togName;
	PlayerInfo[playerid][pSettings] &= ~togOOC;
	PlayerInfo[playerid][pSettings] &= ~togJoin;
	PlayerInfo[playerid][pSettings] &= ~togAdv;
	PlayerInfo[playerid][pSettings] &= ~togGov;
	PlayerInfo[playerid][pSettings] &= ~togPM;
    PlayerInfo[playerid][pSettings] &= ~togAdmCmds;
	PlayerInfo[playerid][pSettings] &= ~togAdmChat;
	PlayerInfo[playerid][pSettings] &= ~togHelperChat;
    PlayerInfo[playerid][pSettings] &= ~togNews;
    PlayerInfo[playerid][pSettings] &= ~togAFK;
    PlayerInfo[playerid][pSettings] &= ~togHUD;
	PlayerInfo[playerid][pSettings] &= ~yesMHUD;
    PlayerInfo[playerid][pSettings] &= ~togFaction;
    PlayerInfo[playerid][pSettings] &= ~togTester;
	PlayerInfo[playerid][pSettings] &= ~togCustomBar;
	PlayerInfo[playerid][pSettings] &= ~togDoSetting;
	PlayerInfo[playerid][pSettings] &= ~togEnter;


    DeletePVar(playerid, PVAR_LASTENTEREDVEH_SEAT);
	DeletePVar(playerid, PVAR_LASTENTEREDVEH_ID);
    DeletePVar(playerid, PVAR_LASTPM_ISACTIVE);
    DeletePVar(playerid, PVAR_LASTPM_ID);

	HUD_Created{playerid} = false;

	for(new i = 0; i < MAX_PLAYER_MARKS; i++)
	{
		PlayerInfo[playerid][pMark][i] = -1;
	}

	for(new i = 0; i < MAX_CCTV; i++)
	{
		PCamera[playerid][i][pc_used] =
		PCamera[playerid][i][pc_time] = 0;
	}

	/// silah
	for (new i; i < 17; i++)
	{
		WeaponSettings[playerid][i][Position][0] = -0.116;
		WeaponSettings[playerid][i][Position][1] = 0.189;
		WeaponSettings[playerid][i][Position][2] = 0.088;
		WeaponSettings[playerid][i][Position][3] = 0.0;
		WeaponSettings[playerid][i][Position][4] = 44.5;
		WeaponSettings[playerid][i][Position][5] = 0.0;
		WeaponSettings[playerid][i][Bone] = 1;
		WeaponSettings[playerid][i][Hidden] = false;
		WeaponSettings[playerid][i][duzenlendi] = 0;
	}
	WeaponTick[playerid] = 0;
	EditingWeapon[playerid] = 0;
	PlayerInfo[playerid][pSilahSistemi] = 0;
	/// silah

	Fuel_ResetPlayer(playerid);

	pCBugging[playerid] = false;
	KillTimer(ptmCBugFreezeOver[playerid]);
	ptsLastFiredWeapon[playerid] = 0;
	return 1;
}

RemovePlayerMask(playerid)
{
	if (IsValidDynamic3DTextLabel(cNametag[playerid])) DestroyDynamic3DTextLabel(cNametag[playerid]);
	maskOn{playerid} = false;
	ShowPlayerName(playerid, true);
	format(PlayerInfo[playerid][pMaskname], 32, PlayerInfo[playerid][pUsername_]);

	return 1;
}

stock IsPlayerLogged(playerid)
{
    new bool:result = false;

    if(playerid != INVALID_PLAYER_ID && IsPlayerConnected(playerid) && pTemp[playerid][pSpawned] == 1)
        result = true;

    return result;
}

BugResolverFalling(playerid)
{
	SendWarningMessage(playerid, "LOSWORLD Guard bir mekanda buga girdiðinizi tespit etti!");
	FreezePlayer(playerid);

    Dialog_Show(playerid, Bug_Resolver_Falling, DIALOG_STYLE_MSGBOX, "{FFFFFF}LOSWORLD Guard", "{FFFFFF}Bulunduðunuz konumdan aþaðý düþtüðünüzü tespit ettik.\nSizi nereye ýþýnlayalým?", "Mekan Ýç", "Mekan Dýþ");
	return 1;
}

Dialog:Bug_Resolver_Falling(playerid, response, listitem, inputtext[])
{
    new houseid = GetNearInsideHouse(playerid, 100.0);
	new bizid = GetNearInsideBiz(playerid, 100.0);

	if (!response)
	{
	    if(houseid != -1)
		{
		    SetPlayerPosEx(playerid,HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ] + 1.0);
			SetWorld(playerid, HouseInfo[houseid][hPosVW]);
			SetInterior(playerid, HouseInfo[houseid][hPosInt]);
		}

	    if(bizid != -1)
		{
			SetPlayerPosEx(playerid,BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ] + 1.0);
			SetWorld(playerid, BizInfo[bizid][bizPosVW]);
			SetInterior(playerid, BizInfo[bizid][bizPosInt]);
		}
		PlayerEnterFreeze(playerid);
	}
	else
	{
	    if(houseid != -1) SetPlayerPosEx(playerid,HouseInfo[houseid][hExitX],HouseInfo[houseid][hExitY],HouseInfo[houseid][hExitZ] + 1.0);

	    if(bizid != -1) SetPlayerPosEx(playerid,BizInfo[bizid][bizExitX], BizInfo[bizid][bizExitY], BizInfo[bizid][bizExitZ] + 1.0);
		PlayerEnterFreeze(playerid);
	}

	SM1(playerid, "LOSWORLD Guard seni bulunduðun durumdan kurtardý. Ýyi eðlenceler dileriz!");
	return 1;
}

ShowPlayerName(playerid, bool:show)
{
	if (show)
	{
		foreach(new i : Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
	}
	else
	{
		foreach(new i : Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 0);
		}
	}
	return 1;
}

SetPlayerBuyInterior(playerid, step, houseid = 0)
{
	if (!step)
	{
	    if (pTemp[playerid][pInteriorBiz] == 0) return 1;

	    TogglePlayerSpectating(playerid, 0);
		DestroyPlayerObject(playerid, pTemp[playerid][pInteriorObj]);
  		HideMenuForPlayer(buy_interior, playerid);
		return 1;
	}

    new bizid = -1;

	if ((bizid = GetNearInsideBiz(playerid)) == -1 || BizInfo[bizid][bizType] != BIZ_BUILD)	return SendErrorMessage(playerid, "Bir mimarlýk ofisinde olmalýsýnýz.");

	new start = -1;

    for(new i = 0; i < MAX_INTERIORS; i++)
	{
		if (!AdminTeles[i][telesOn] || HouseInfo[houseid][hClass] != AdminTeles[i][telesType]) continue;

		start = i;
		break;
	}

	if (start == -1)	 return SendErrorMessage(playerid, "Eviniz için uygun interior bulunamadý.");

	SavePlayerPos(playerid);
    GameTextForPlayer(playerid, "_", 1, 4);
	TogglePlayerSpectating(playerid, 1);
    pTemp[playerid][pInteriorBiz] = bizid+1;
    pTemp[playerid][pInteriorHouse] = houseid+1;
    pTemp[playerid][pInteriorID] = start;
    pTemp[playerid][pInteriorObj] = CreatePlayerObject(playerid, 19300, AdminTeles[start][telesPosX], AdminTeles[start][telesPosY], AdminTeles[start][telesPosZ], 0.0, 0.0, 0.0);
	AttachCameraToPlayerObject(playerid, pTemp[playerid][pInteriorObj]);
	SetInterior(playerid, AdminTeles[start][telesInt]);
	SetWorld(playerid, 5000 + playerid);
	ShowMenuForPlayer(buy_interior, playerid);
	SendServerMessage(playerid, "Butonlar arasýnda geçiþi ok tuþlarýyla yapýp, SPACE tuþuna basarak seçimleri gerçekleþtir.");
	return 1;
}

IsPlayerAtCarfix(playerid)
{
    if (PlayerInfo[playerid][pFaction] == 0) return 0;

	new i = PlayerInfo[playerid][pFaction];

	if (GetWorld(playerid) != Factions[i][Carfix][fixVW] || GetInterior(playerid) != Factions[i][Carfix][fixInt]) return 0;

	if (PlayerToPoint(15.0, playerid, Factions[i][Carfix][fixX], Factions[i][Carfix][fixY], Factions[i][Carfix][fixZ]) != 0) return 1;

	return 0;
}

PlaySoundEx(soundid, Float:x, Float:y, Float:z, range)
{
	foreach(new i : Player)
	{
		if(!IsPlayerInRangeOfPoint(i, range, x, y, z)) continue;
		PlayerPlaySound(i, soundid, 0, 0, 0);
	}
}

PlaySound(playerid, soundid)
{
	PlayerPlaySound(playerid, soundid, 0.0, 0.0, 0.0);
}

PlayerPlaySoundEx(playerid, sound)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player)
	{
	    if (!IsPlayerLogged(i) && IsPlayerInRangeOfPoint(i, 20.0, x, y, z) && GetWorld(i) != GetWorld(playerid) && GetInterior(playerid) != GetInterior(i)) continue;

	    PlayerPlaySound(i, sound, 0.0, 0.0, 0.0);
	}
	return 1;
}

q_GetPlayerIP(playerid)
{
	new IP[24];

	GetPlayerIp(playerid, IP, sizeof(IP));
	return IP;
}

Save_User(playerid)
{
	if (!IsPlayerLogged(playerid))	return 1;

    if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
		SavePlayerPos(playerid);
	}

	new Float:health, Float:armour;
	GetPlayerArmour(playerid, armour);
	GetPlayerHealth(playerid, health);

	SilahlariKaydet(playerid);
    new division_string[256];

	for(new j; j < 5; j++)
		format(division_string, sizeof(division_string), "%s%d|", division_string, PlayerInfo[playerid][pOlusumDivision][j]);

	new weapons[24];
	new ammo[24];
	new weapons_string[256];
	for(new x; x < 12; x++)
	{
		BWH_GetPlayerWeaponData(playerid, x, weapons[x], ammo[x]);
		if(!AC_PlayerHasWeapon(playerid, weapons[x]) || !ammo[x])
		{
			weapons[x] = 0;
			ammo[x] = 0;
		}

		if(PlayerInfo[playerid][pOnDuty])
			format(weapons_string, sizeof(weapons_string), "%s%d|%d|", weapons_string, weapons[x], ammo[x]);

		else
			format(weapons_string, sizeof(weapons_string), "%s%d|%d|", weapons_string, 0, 0);
	}

	new query[9096];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `health`=%f,`armour`=%f,`cash`=%i,`bank`=%i,`skin`=%i,`sex`=%i,`age` = %i, `origin` = %i, `race` = %i, `level`=%i,`exp`=%i, `birthdate` = %i, `hours`=%i,`minutes`=%i,`admin_hide`=%i,`int`=%i,`world`=%i,`channel`=%i,`owned_channel`=%i,`authed`=%i,`paydaytime`=%i,`number`=%i, `puncte`=%i WHERE `id`=%i",
		PlayerInfo[playerid][pHealth], armour, PlayerInfo[playerid][pCash], PlayerInfo[playerid][pBank],
		PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pSex], PlayerInfo[playerid][pAge], PlayerInfo[playerid][pOrigin], PlayerInfo[playerid][pRace], PlayerInfo[playerid][pLevel],
		PlayerInfo[playerid][pExp], PlayerInfo[playerid][pBirthdate], PlayerInfo[playerid][pHours], PlayerInfo[playerid][pMinutes], PlayerInfo[playerid][pAdminHide], PlayerInfo[playerid][pInt],
		PlayerInfo[playerid][pWorld], PlayerInfo[playerid][pChannel], PlayerInfo[playerid][pOwnedChannel],
		PlayerInfo[playerid][pAuthed], PlayerInfo[playerid][pPayDayTime], PlayerInfo[playerid][pNumber], PlayerInfo[playerid][pPunctePremium], PlayerInfo[playerid][pID]
	);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `ajailed`=%i,`ajailtime`=%i,`jailed`=%i,`isolatetime`=%i,`warns`=%i,`carlic`=%i,`weplic`=%i,`flylic`=%i,`savings`=%i,`rent_key`=%i,`rent_price`=%i,`taxilic`=%i,`dependence`=%i,`demolition`=%i WHERE `id`=%i",
		PlayerInfo[playerid][pAJailed], PlayerInfo[playerid][pAJailTime], PlayerInfo[playerid][pJailed],
		PlayerInfo[playerid][pIsolateTime], PlayerInfo[playerid][pWarns],
		PlayerInfo[playerid][pCarLic], PlayerInfo[playerid][pWepLic], PlayerInfo[playerid][pFlyLic],
		PlayerInfo[playerid][pSavings], PlayerInfo[playerid][pRentKey], PlayerInfo[playerid][pRentPrice],
		PlayerInfo[playerid][pTaxiLic], PlayerInfo[playerid][pDependence], PlayerInfo[playerid][pDemolition],PlayerInfo[playerid][pID]
	);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `arrested`=%i,`chat`=%i,`authwep`=%i,`swat`=%i,`swat_duty`=%i,`lawyer`=%i,`kelepceli`=%i,`job`=%i,`career`=%i,`fightstyle`=%i,`hud`=%i,`mutetime`=%i,`phone_off`=%i,`phone_airplane`=%i,`paycheck`=%i,`fishcount`=%i,`fish_time`=%i WHERE `id`=%i",
		PlayerInfo[playerid][pArrested], PlayerInfo[playerid][pTalk], PlayerInfo[playerid][pAuthwep],
		PlayerInfo[playerid][pSwat], PlayerInfo[playerid][pSwatDuty], PlayerInfo[playerid][pLawyer], PlayerInfo[playerid][pKelepceli], PlayerInfo[playerid][pJob],
		PlayerInfo[playerid][pCareer], PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pHud],
		PlayerInfo[playerid][pMutedTime], PlayerInfo[playerid][pPhoneOff], PlayerInfo[playerid][pPhoneAirplane],
		PlayerInfo[playerid][pPayCheckMoney], PlayerInfo[playerid][pFishCount], PlayerInfo[playerid][pFishTime],PlayerInfo[playerid][pID]
	);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `walk`=%i,`faction`=%i, `rank`=%i,`phone_sound`=%i,`phone_model`=%i,`phone_ringtone`=%i,`badgenumber`=%i,`drivewarns`=%i,`wepwarns`=%i,`wep_count`=%i,`jailtime`=%i,`slot`=%i WHERE `id`=%i",
		PlayerInfo[playerid][pWalk], PlayerInfo[playerid][pFaction], PlayerInfo[playerid][pRank],
		PlayerInfo[playerid][pPhoneSound], PlayerInfo[playerid][pPhoneModel], PlayerInfo[playerid][pPhoneRingtone],
		PlayerInfo[playerid][pBadgeNumber], PlayerInfo[playerid][pDriveWarns], PlayerInfo[playerid][pWepWarns],
		PlayerInfo[playerid][pWepCount],PlayerInfo[playerid][pJailTime],PlayerInfo[playerid][pSlot], PlayerInfo[playerid][pID]
	);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `sidejob`=%i,`prescribe`=%i,`ganja_time`=%i,`phone_style`=%i,`sparekey`=%i,`workon`=%i,`pos_X`=%f,`pos_Y`=%f,`pos_Z`=%f,`pos_A`=%f,`prisoned`=%i WHERE `id`=%i",
    	PlayerInfo[playerid][pSideJob], PlayerInfo[playerid][pPrescribe], PlayerInfo[playerid][pGanjaTime],
		PlayerInfo[playerid][pPhoneStyle], PlayerInfo[playerid][pSpareKey], PlayerInfo[playerid][pWorkOn],
		PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ],
		PlayerInfo[playerid][pPosA], PlayerInfo[playerid][pPrisoned],PlayerInfo[playerid][pID]
	);
	mysql_tquery(dbHandle, query);

    mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `weaphide0`=%i,`weaphide1`=%i,`weaphide2`=%i,`duty`=%i,`char`=%i,`drugaccess`=%i,`tog_0`=%i,`tog_1`=%i,`tog_2`=%i WHERE `id`=%i",
		PlayerInfo[playerid][pHideWeap][0], PlayerInfo[playerid][pHideWeap][1], PlayerInfo[playerid][pHideWeap][2],
		PlayerInfo[playerid][pOnDuty], PlayerInfo[playerid][pChar], PlayerInfo[playerid][pDrugLabAccess],
		PlayerInfo[playerid][pTog][0], PlayerInfo[playerid][pTog][1], PlayerInfo[playerid][pTog][2], PlayerInfo[playerid][pID]
	);
	mysql_tquery(dbHandle, query);

   	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET bagimlilik_exp = '%d', bagimlilik_seviye = '%d', tedavi_exp = '%d', tedavi_sure = '%d', kriz_sure = '%d' WHERE `id`=%i",
		PlayerInfo[playerid][pBagimlilikEXP],
		PlayerInfo[playerid][pBagimlilikSeviye],
		PlayerInfo[playerid][pUTedaviEXP],
		PlayerInfo[playerid][pUTedaviSure],
		PlayerInfo[playerid][pKrizSure],
		PlayerInfo[playerid][pID]
	);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET probation = '%d', probationsure = '%d' WHERE `forum_id`=%i",
		PlayerInfo[playerid][pProbation],
		PlayerInfo[playerid][pProbationSure],
		PlayerInfo[playerid][pAccID]
	);
	mysql_tquery(dbHandle, query);

	SaveUser_Inventory(playerid);
	//printf(playerid, "%s", query); Query Kontrol
	return 1;
}
stock Fuel_ResetPlayer(playerid)
{
    if (RefuelTimer[playerid] != -1)
    {
        KillTimer(RefuelTimer[playerid]);
        RefuelTimer[playerid] = -1;
        PlayerTextDrawHide(playerid, FuelText[playerid]);
    }

    DeletePVar(playerid, #UsePump);
    DeletePVar(playerid, #FuelBought);
    return 1;
}

SaveUser_Inventory(playerid)
{
	new query[256];

	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if (strlen(Inventory[playerid][i][pInvName]) < 2) format(Inventory[playerid][i][pInvName], 16, "None");

	    format(query, sizeof(query), "UPDATE `inventory` SET `id_%i`=%i,`a_%i`=%i,`f_%i`=%.1f,`ex_%i`=%i,`s_%i`=%i,`n_%i`='%s' WHERE `userid`=%i",
			i+1, Inventory[playerid][i][pInvItem], i+1, Inventory[playerid][i][pInvQ],
			i+1, Inventory[playerid][i][pInvQFloat], i+1, Inventory[playerid][i][pInvEx],
			i+1, Inventory[playerid][i][pInvS], i+1, Inventory[playerid][i][pInvName], PlayerInfo[playerid][pID]
		);
		mysql_tquery(dbHandle, query);
	}

	return 1;
}

ResetVariables(playerid)
{
    pTemp[playerid][pPizzaBoy] =
    pTemp[playerid][pDemolitionTime] =
	pTemp[playerid][pDrugUse] =
	pTemp[playerid][pDrugTime] =
	pTemp[playerid][pDrugChgWeather] =
    pTemp[playerid][pLicenseExam] =
	pTemp[playerid][pWaypoint] =
    pTemp[playerid][pWaypoint] =
	pTemp[playerid][pWepPrice] =
	pTemp[playerid][pRentPrice] =
	pTemp[playerid][pHousePrice] =
    pTemp[playerid][pRentveh] =
	pTemp[playerid][pServeType] =
	pTemp[playerid][pGreetType] =
    pTemp[playerid][pNews] =
	pTemp[playerid][pCallOn] =
	pTemp[playerid][pFishTime] =
    pTemp[playerid][pEditBort] =
	pTemp[playerid][pCarPrice] =
	pTemp[playerid][tempItem] =
	pTemp[playerid][tempEx] =
	pTemp[playerid][tempQ] =
    pTemp[playerid][pHealTime] =
    pTemp[playerid][pRamType] =
	pTemp[playerid][UsingBort] =
	pTemp[playerid][UsingCorpse] =
	pTemp[playerid][tempStatus] =
    pTemp[playerid][pRamTime] = 0;

	pTemp[playerid][pHouseHouse] = -1;

	pTemp[playerid][pBizPrice] = 0;
	pTemp[playerid][pBizID] = INVALID_PLAYER_ID;

    pTemp[playerid][pInterview] =
	pTemp[playerid][pInterviewPlayer] =
	pTemp[playerid][pHealPlayer] =
    pTemp[playerid][pFactionPlayer] =
	pTemp[playerid][pBizPlayer] =
    pTemp[playerid][pFriskPlayer] =
	pTemp[playerid][pSpecPlayer] =
	pTemp[playerid][pHirePlayer] =
	pTemp[playerid][pCarPlayer] =
	pTemp[playerid][pWepPlayer] =
	pTemp[playerid][pRentPlayer] =
	pTemp[playerid][pHousePlayer] =
	pTemp[playerid][pServePlayer] =
	pTemp[playerid][pGreetPlayer] = INVALID_PLAYER_ID;

	for(new c = 0; c < 5; c++)
	{
		pTemp[playerid][MyCarSpawn][c] = 0;
		pTemp[playerid][MyCarSpawn][c] = 0;
	}

  	PlayerInfo[playerid][pCadir] = -1;

	SetPVarInt(playerid, #attach_item, 0);

	if(IsPlayerPhoneCreated(playerid))
		Phone_Destroy(playerid);

	if (IsPlayerUseMDC(playerid))		MDC_Hide(playerid);

    if (IsValidDynamicObject(pTemp[playerid][pRamObj]))
	{
		DestroyDynamicObject(pTemp[playerid][pRamObj]);
		pTemp[playerid][pRamObj] = INVALID_OBJECT_ID;
	}

	PlayerInfo[playerid][pArmour] = 0.0;

	if (pTemp[playerid][pFlashTime]) pTemp[playerid][pFlashTime] = 1;

	if (pTemp[playerid][p3DMenu] != -1)
	{
    	Destroy3DMenu(pTemp[playerid][p3DMenu]);
		pTemp[playerid][p3DMenu] = -1;
	}

	if (IsPlayerPhoneCreated(playerid)) Phone_Destroy(playerid);

	if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    SendPhoneMessage(pTemp[playerid][pCallLine], "Baðlantý kesildi ...");
	    pc_cmd_telefonkapat(playerid, "");

	}
	pTemp[playerid][pEmergency] = 0;

	if (GetPVarInt(playerid, #selfie)) DeletePVar(playerid, #selfie);

    if (pTemp[playerid][pTracePlayer] != INVALID_PLAYER_ID)
	{
	    pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
		pTemp[playerid][pTraceStage] = 0;

		if (pTemp[playerid][pTraceGZ] != -1) GangZoneDestroy(pTemp[playerid][pTraceGZ]);

		pTemp[playerid][pTraceGZ] = -1;
	}

	if (pTemp[playerid][pCargoID]) pTemp[playerid][pCargoID] = 0;

	RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
	TogglePlayerAllDynamicRaceCPs(playerid, false);
	TogglePlayerAllDynamicCPs(playerid, false);
	EndJob(playerid);
	Fuel_ResetPlayer(playerid);
	return 1;
}

forward DragUpdate(playerid, targetid);
public DragUpdate(playerid, targetid)
{
	if (PlayerInfo[targetid][pDragged] && PlayerInfo[targetid][pDraggedBy] == playerid)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 1.5 * floatsin(-fAngle, degrees);
		fY -= 1.5 * floatcos(-fAngle, degrees);

		SetPlayerPos(targetid, fX, fY, fZ);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

forward DragUpdateSedye(playerid, targetid);
public DragUpdateSedye(playerid, targetid)
{
	if (PlayerInfo[targetid][pDragged] && PlayerInfo[targetid][pDraggedBy] == playerid)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX += 2 * floatsin(-fAngle, degrees);
		fY += 2 * floatcos(-fAngle, degrees);
		fY += 0.5 * floatcos(-fAngle, degrees);

		SetPlayerPos(targetid, fX, fY, fZ);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

KickEx(playerid)
{
	if (GetPVarInt(playerid,"kicked")) return 1;

    SendServerMessage(playerid, "Sistem tarafýndan oyundan atýldýnýz.");
    SetPVarInt(playerid,"kicked", 1);
    SetTimerEx("KickPlayer", 200, false, "d", playerid);
    return 1;
}

ShowStats(playerid, id)
{
	new nums[32], works[64], donate[50], fname[50], rname[50];
	new year, month, day, hour, minute, second;

	if (PlayerInfo[id][pNumber] == 0) 	nums = "Bulunamadý";
	else								format(nums, sizeof(nums), "%i", PlayerInfo[id][pNumber]);

	if (PlayerInfo[id][pWorkOn] == 0)	works = "Bulunamadý";
	else								format(works, sizeof(works), "%i", PlayerInfo[id][pWorkOn]);

	if (PlayerInfo[id][pFaction] == 0)	fname = "Bulunamadý";
	else								format(fname, 32, "%s", Factions[PlayerInfo[id][pFaction]][fName]);

	if (PlayerInfo[id][pRank] == 0)		rname = "Bulunamadý";
	else								format(rname, 32, "%s", GetRankName(id));

	getdate(year, month, day);
	gettime(hour, minute, second);

	new expamount = (PlayerInfo[id][pLevel]+1) * LEVEL_EXP;

	SendClientMessageEx(playerid, COLOR_SERVER2,"[%s (%i) | %02d %s %i, %02d:%02d:%02d]", GetNameEx(id), id, day, GetMonthName(month), year, hour, minute, second);
	SendClientMessageEx(playerid, COLOUR_ALTO,  "Forum Adý: [%s] Birlik: [%s] Rütbe: [%s]", GetAccName(id), fname, rname);
	SendClientMessageEx(playerid, COLOUR_WHITE, "Nakit: [$%i] Banka: [$%i] Maaþ Hesabý: [$%i] Mevduat Hesabý: [$%i]", GetCash(id), PlayerInfo[id][pBank], PlayerInfo[id][pPayCheckMoney], PlayerInfo[id][pSavings]);
	SendClientMessageEx(playerid, COLOUR_ALTO,  "Seviye: [%i] EXP: [%i / %i] Maaþa kalan süre: [%i dakika] ", PlayerInfo[id][pLevel], PlayerInfo[id][pExp], expamount, 60 - PlayerInfo[id][pPayDayTime]);
	SendClientMessageEx(playerid, COLOUR_WHITE, "Telefon Numarasý: [%s] Dövüþ Stili: [%s] Baðýþçý: [Yok]", nums, GetFightStyleName(id));
	SendClientMessageEx(playerid, COLOUR_ALTO, "Çalýþýlan Ýþletme: [%s] Ana Meslek: [%s] Ýkinci Meslek: [%s]", works, GetJobName(PlayerInfo[id][pJob]), GetJobName(PlayerInfo[id][pSideJob]));
	SendClientMessageEx(playerid, COLOUR_WHITE,  "Uyarýlar: [%i] IP: [%s] Admin: [%s] Supporter: [%s]", PlayerInfo[id][pWarns], q_GetPlayerIP(id), (PlayerInfo[id][pAdmin] != 0)?("Yönetici"):("Yönetici Deðil"), (PlayerInfo[id][pHelper] != 0)?("Supporter"):("Supporter Deðil"));
	if(PlayerInfo[id][pBagimlilikEXP] > 0 || PlayerInfo[id][pBagimlilikSeviye] > 0) SendClientMessageEx(playerid, COLOUR_ALTO, "Baðýmlýlýk EXP: %d/3 | Baðýmlýlýk Seviyesi: %d | Tedavi EXP: %d/10 | Tedaviye Kalan Süre: %d dakika | Krize Kalan Süre: %d dakika", PlayerInfo[id][pBagimlilikEXP], PlayerInfo[id][pBagimlilikSeviye], PlayerInfo[id][pUTedaviEXP], PlayerInfo[playerid][pUTedaviSure], PlayerInfo[id][pKrizSure]);
	if (CheckAdmin(playerid, ADMIN_LEVEL_1))
	{
		if (PlayerInfo[id][pJailed] != 0)		SendClientMessageEx(playerid, COLOUR_WHITE, "IC Hapis: [%i dakika]", PlayerInfo[id][pJailTime]);
    	if (PlayerInfo[id][pMutedTime] > 0)		SendClientMessageEx(playerid, COLOUR_WHITE, "Susturulma: [%i dakika]", PlayerInfo[id][pMutedTime]);
		if (PlayerInfo[id][pForbid] != 0)		SendClientMessageEx(playerid, COLOUR_WHITE, "Silah Yasaðý: [%i saat]", PlayerInfo[id][pForbid]);
		if (id != playerid)						SendHelpMessage(playerid,"Envanter kontrolü için {ffc46a}/check %i", id);
		SendClientMessageEx(playerid, COLOUR_WHITE, "Virtual World: [%d], Interior: [%d]", GetPlayerVirtualWorld(id), GetPlayerInterior(id));
	}

	SendClientMessageEx(playerid, COLOR_SERVER2,"[%s (%i) | %02d %s %i, %02d:%02d:%02d]", GetNameEx(id), id, day, GetMonthName(month), year, hour, minute, second);
	return 1;
}

SetSpawnInfoEx(playerid, Float:x, Float:y, Float:z, Float:Angle = 0.0)
{
    if (PlayerInfo[playerid][pChar] > 0)	SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pChar], x, y, z, Angle, 0, 0, 0, 0, 0, 0);
	else									SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], x, y, z, Angle, 0, 0, 0, 0, 0, 0);
	return 1;
}

GetNameForPlayer(playerid)
{
    GetPlayerName(playerid, PlayerInfo[playerid][pUsername], MAX_PLAYER_NAME+1);
    GetPlayerName(playerid, PlayerInfo[playerid][pUsername_], MAX_PLAYER_NAME+1);
    strreplace(PlayerInfo[playerid][pUsername_], '_', ' ');
    format(PlayerInfo[playerid][pMaskname], 32, PlayerInfo[playerid][pUsername_]);
    return 1;
}

GetIDByID(databaseid)
{
	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i)) 												continue;
		if (PlayerInfo[i][pID] == databaseid)								return i;
	}
	return INVALID_PLAYER_ID;
}

stock IsPlayerLoggedIn(playerid)
{
    new bool:result = false;

    if(playerid != INVALID_PLAYER_ID && IsPlayerConnected(playerid) && pTemp[playerid][pSpawned] == 1 && PlayerInfo[playerid][pID] >= 0 && PlayerInfo[playerid][pAccID] > 0)
        result = true;

    return result;
}

stock GetPlayerIDByAccountSqlID(sqlid)
{
    new id = INVALID_PLAYER_ID;

    foreach(new i : Player)
    {
        if(!IsPlayerLogged(i))
            continue;

        if(PlayerInfo[i][pAccID] != sqlid)
            continue;

        id = i;
        break;
    }

    return id;
}

this::KickTimerLine(playerid)
{
	Kick(playerid);
	return 1;
}

stock KickLine(playerid, reason[] = "")
{
    if(strlen(reason) > 3)
    {
        SCM(playerid, COLOUR_TOMATO, sprintf("%s", reason));
    }

    SetTimerEx("KickTimerLine", 1500, false, "d", playerid);
    return 1;
}

CheckPMBlockList(playerid)
{
	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || people_blocking[i][playerid] != 1)			continue;

        SendSyntaxMessage(i, "%s sunucuyla baðlantýsý kesildi ve PM blok listenizden kaldýrýldý.", GetNameEx(playerid), playerid);
		people_blocking[i][playerid] = 0;
	}
	return 1;
}

stock GetXYInFrontOfPlayer(playerid, &Float:X, &Float:Y, &Float:Z, Float:distance)
{
	new Float:A;
	GetPlayerPos(playerid, X, Y, Z);

	if (GetPlayerVehicleID(playerid))	GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
	else								GetPlayerFacingAngle(playerid, A);

	X += (distance * floatsin(-A, degrees));
	Y += (distance * floatcos(-A, degrees));
}

#define GetVectorSpeed(%0,%1,%2) floatround(VectorSize(%0, %1, %2) * 179.28625)
SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, freeze = 1)
{
	SetPVarInt(playerid, "tpOnlem", 1);
	pTemp[playerid][HileKontrol] = gettime() + 4;
	SetPlayerPos(playerid, x, y, z + 0.5);
 	SetCameraBehindPlayer(playerid);
	PlayerEnterFreeze(playerid);
	return 1;
}

SetPlayerCurrentTimeAndWeather(playerid)
{
	SetPlayerTime(playerid, server_hour, 0);
	SetPlayerWeather(playerid, server_weather);
	return 1;
}

GetFightStyleName(playerid)
{
	new style[9];
	switch(PlayerInfo[playerid][pFightStyle])
	{
		case FIGHT_STYLE_BOXING: format(style, sizeof(style), "Boxing");
		case FIGHT_STYLE_KUNGFU: format(style, sizeof(style), "Kungfu");
		case FIGHT_STYLE_GRABKICK: format(style, sizeof(style), "Grabkick");
		case FIGHT_STYLE_KNEEHEAD: format(style, sizeof(style), "Kneehead");
		case FIGHT_STYLE_NORMAL: format(style, sizeof(style), "Standart");
	}
	return style;
}

Dialog:MODEL_SEL_BUYCLOTHES(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new modelid = strval(inputtext);

	if (GetCash(playerid) < 100)	return SendNotCash(playerid);
	if (GetPlayerSkin(playerid) == modelid || PlayerInfo[playerid][pTog][0] == modelid || PlayerInfo[playerid][pTog][1] == modelid || PlayerInfo[playerid][pTog][2] == modelid)
	{
		return SendErrorMessage(playerid, "Bu kýyafeti zaten satýn almýþsýnýz.");
	}

	new mes[128];

	for(new i; i != 3; i++)
	{
		if (PlayerInfo[playerid][pTog][i] == 0)	strcat(mes, "\n[Boþ Slot]");
		else									format(mes, sizeof(mes), "%s\n[Skin #%i]", mes, PlayerInfo[playerid][pTog][i]);
	}

	Dialog_Show(playerid, BuyClothes, DIALOG_STYLE_LIST, "Kýyafet Dolabý", mes, "Deðiþtir", "X");
	SetPVarInt(playerid, "clothes_model", modelid);
	return 1;
}

CreateDynamicExplosion(Float:x,Float:y,Float:z,type,Float:radius,worldid = -1,interiorid = -1,playerid = -1,Float:distance = 200.0){
	if (playerid == -1){
		foreach(new i : Player){
			new Float:px, Float:py, Float:pz;
			if (IsPlayerInAnyVehicle(i)){
				GetVehiclePos(GetPlayerVehicleID(i),px,py,pz);
			} else {
				GetPlayerPos(i,px,py,pz);
			}
			if ((GetPlayerInterior(i) == interiorid || interiorid == -1) && (GetPlayerVirtualWorld(i) == worldid || worldid == -1) && (VectorSize(px-x,py-y,pz-z) <= distance)){
				CreateExplosionForPlayer(i,x,y,z,type,radius);
			}
		}
	} else {
		if (IsPlayerConnected(playerid)){
			new Float:px, Float:py, Float:pz;
			if (IsPlayerInAnyVehicle(playerid)){
				GetVehiclePos(GetPlayerVehicleID(playerid),px,py,pz);
			} else {
				GetPlayerPos(playerid,px,py,pz);
			}
			if ((GetPlayerInterior(playerid) == interiorid || interiorid == -1) && (GetPlayerVirtualWorld(playerid) == worldid || worldid == -1) && (VectorSize(px-x,py-y,pz-z) <= distance)){
				CreateExplosionForPlayer(playerid,x,y,z,type,radius);
			}
		}
	}
}

GetLocationZone(Float:x, Float:y, Float:z)
{
	new string[128], zone[28];

	GetZone(x, y, zone, sizeof(zone));

	if (IsPointInAnyDynamicArea(x, y, z)) {
		new areas[10], street_area[2], j = GetNumberDynamicAreasForPoint(x,y,z);
		GetDynamicAreasForPoint(x, y, z, areas, sizeof(areas));

		if (GetStreet(areas, j, street_area)) {
			if (street_area[1] == -1) format(string, sizeof(string), "%s, %s", zone, street_names[street_area[0]]);
			else					 format(string, sizeof(string), "%s, %s ve %s", zone, street_names[street_area[0]],street_names[street_area[1]]);
		}
	}
	format(string, sizeof(string), "%s", zone);

	return string;
}

stock bool:IsPlayerCrouching(playerid)
{
    if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) return false;
	return true;
}

CheckHanditem(playerid, model) {
	new result = 0;
	for(new i = 0; i < MAX_PLAYER_ATTACH; i++)
	{
		if (!AttachInfo[playerid][i][aUsed]) 										   continue;
		if (AttachInfo[playerid][i][aModel] != model)								   continue;
		if (AttachInfo[playerid][i][aBone] != 5 && AttachInfo[playerid][i][aBone] != 6) continue;
		return 1;
	}

	return result;
}

stock PlaySoundInArea(soundid,Float:x,Float:y,Float:z,Float:radi)
{
    foreach(new i : Player)
	{
        if (!IsPlayerLogged(i)) continue;
	    if (IsPlayerInRangeOfPoint(i,radi,x,y,z)) PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}

Float:XB_GetDistanceBetweenTPoints(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz)
{
	new Float:temp1, Float:temp2 , Float:temp3;
	temp1 = x-tx;temp2 = y-ty;
	temp3 = z-tz;
	return floatsqroot(temp1*temp1+temp2*temp2+temp3*temp3);
}

stock GetPlayerSpeed(vid)
{
    new Float:vx, Float:vy, Float:vz, Float:vel;
	vel = GetVehicleVelocity(vid, vx, vy, vz);
	vel = (floatsqroot(((vx*vx)+(vy*vy))+(vz*vz))* 181.5);
	return floatround(vel);
}

CheckNumberAvailable(number)
{
	new
		query[64]
	;

 	mysql_format(dbHandle, query, sizeof(query), "SELECT COUNT(id) as total FROM `users` WHERE `number`=%i", number);
	new Cache:cache = mysql_query(dbHandle, query),
		count;
	cache_get_value_int(0, "total", count);

	cache_delete(cache);
	cache = MYSQL_INVALID_CACHE;
	return count;
}

SetPlayerNumber(playerid) {
	mysql_tquery(dbHandle, "SELECT FLOOR(RAND()*(999999-100100)+100100) as randNumber \
							FROM `users` \
							HAVING (SELECT COUNT(*) FROM `users` WHERE number = randNumber) < 1 \
							LIMIT 1",
				"GetPlayerNumber", "i", playerid
	);
	return 1;
}

this::GetPlayerNumber(playerid) {
	if (!cache_num_rows()) return SetPlayerNumber(playerid);

	cache_get_value_int(0, "randNumber", PlayerInfo[playerid][pNumber]);
	SQL_SetInteger("users", "number", PlayerInfo[playerid][pNumber], PlayerInfo[playerid][pID]);

	SendSyntaxMessage(playerid, "Yeni bir telefon numarasý atandý: %i (/telefon)", PlayerInfo[playerid][pNumber]);
	return 1;
}

CreatePlayersFire(playerid, type, building)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	if (GetDistanceBetweenPoints(x,y,z,PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]) > 1.5
		&& PlayerInfo[playerid][pWorld] != GetWorld(playerid)
		&& PlayerInfo[playerid][pInt] != GetInterior(playerid)
	) {
		StopCreatingPlayersFire(playerid);
		return SendErrorMessage(playerid, "Ateþ yakýlamadý, tekrar deneyin!");
	}

	new
		location[128],
		where[12],
		Float:ExpPos[3]
	;

	switch(type) {
		case 0: {
			CreateFireInHouse(building);

			if (HouseInfo[building][hApart]) {
				ExpPos[0] = ApartInfo[HouseInfo[building][hApart]][aPosX];
				ExpPos[1] = ApartInfo[HouseInfo[building][hApart]][aPosY];
				ExpPos[2] = ApartInfo[HouseInfo[building][hApart]][aPosZ];

				where = "bina";
			} else {
				ExpPos[0] = HouseInfo[building][hPosX];
				ExpPos[1] = HouseInfo[building][hPosY];
				ExpPos[2] = HouseInfo[building][hPosZ];

				where = "ev";
			}
		}
		case 1: {
			CreateFireInBiz(building);

			ExpPos[0] = BizInfo[building][bizPosX];
			ExpPos[1] = BizInfo[building][bizPosY];
			ExpPos[2] = BizInfo[building][bizPosZ];

			where = "iþyeri";
		}
		case 2: {
			CreateFireInGarage(building);

			ExpPos[0] = GarageInfo[building][garageVeh_Enter][0];
			ExpPos[1] = GarageInfo[building][garageVeh_Enter][1];
			ExpPos[2] = GarageInfo[building][garageVeh_Enter][2];

			where = "garaj";
		}
	}

	format(location, sizeof(location), "%s", GetLocationZone(x,y,z));

	for(new i = FACTION_POLICE; i <= FACTION_FIRE; i++)
	{
		SendFactionMessage(i, COLOR_LIGHTBLUE, "|__________Acil Çaðrý__________|");
		SendFactionMessage(i, COLOR_LIGHTBLUE, "Aranma Yeri: Ankesörlü Telefon");
		SendFactionMessage(i, COLOR_LIGHTBLUE, "Talep: Polis, Ambulans / Ýtfaiye");
		SendFactionMessage(i, COLOR_LIGHTBLUE, "Lokasyon: %s %i", location, building);
		SendFactionMessage(i, COLOR_LIGHTBLUE, "Durum: Yangýn çýktý %s!", where);
	}

	for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
	    if (CallInfo[i][callExists] != 0) continue;

       	CallInfo[i][callPosX] = ExpPos[0];
		CallInfo[i][callPosY] = ExpPos[1];
		CallInfo[i][callPosZ] = ExpPos[2];

        CallInfo[i][callType] = 3;
		CallInfo[i][callPhone] = 0;

		format(CallInfo[i][callText], 128, "Yangýn çýktý: %s!", where);
		format(CallInfo[i][callName], MAX_PLAYER_NAME, "Ankesörlü Telefon");
        format(CallInfo[i][callDate], 32, "%s", GetFullDate());
        format(CallInfo[i][callLocation], MAX_ZONE_NAME, "%s %i", location, building);

        CallInfo[i][callDelete] = gettime() + 1200;
        CallInfo[i][callExists] = 1;
        break;
	}

	return 1;
}

StopCreatingPlayersFire(playerid)
{
	UnFreezePlayer(playerid);
	StopPlayerAnims(playerid);
	pTemp[playerid][pFireTime] = 0;
	DeletePVar(playerid, #firetype);
	DeletePVar(playerid, #firebuildID);
	return 1;
}

GetHealthDots(playerid)
{
    new
        dots[64], Float: HP;

    AntiCheatGetHealth(playerid, HP);

	if (HP >= 100)
        dots = "IIIIIIIIII";
    else if (HP >= 90)
        dots = "IIIIIIIII{660000}I";
    else if (HP >= 80)
        dots = "IIIIIIII{660000}II";
    else if (HP >= 70)
        dots = "IIIIIII{660000}III";
    else if (HP >= 60)
        dots = "IIIIII{660000}IIII";
    else if (HP >= 50)
        dots = "IIIII{660000}IIIII";
    else if (HP >= 40)
        dots = "IIII{660000}IIIIII";
    else if (HP >= 30)
        dots = "III{660000}IIIIIII";
    else if (HP >= 20)
        dots = "II{660000}IIIIIIII";
    else if (HP >= 10)
        dots = "I{660000}IIIIIIIII";
    else if (HP >= 0)
        dots = "{660000}IIIIIIIIII";

    /*if (HP >= 100)
        dots = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";
    else if (HP >= 90)
        dots = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½{660000}ï¿½";
    else if (HP >= 80)
        dots = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½{660000}ï¿½ï¿½";
    else if (HP >= 70)
        dots = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½{660000}ï¿½ï¿½ï¿½";
    else if (HP >= 60)
        dots = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½{660000}ï¿½ï¿½ï¿½ï¿½";
    else if (HP >= 50)
        dots = "ï¿½ï¿½ï¿½ï¿½ï¿½{660000}ï¿½ï¿½ï¿½ï¿½ï¿½";
    else if (HP >= 40)
        dots = "ï¿½ï¿½ï¿½ï¿½{660000}ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";
    else if (HP >= 30)
        dots = "ï¿½ï¿½ï¿½{660000}ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";
    else if (HP >= 20)
        dots = "ï¿½ï¿½{660000}ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";
    else if (HP >= 10)
        dots = "ï¿½{660000}ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";
    else if (HP >= 0)
        dots = "{660000}ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";*/

    return dots;
}

GetArmorDots(playerid)
{
    new
        dots[64], Float: AR;

    AntiCheatGetArmour(playerid, AR);

	if (AR >= 100)
        dots = "IIIIIIIIII";
    else if (AR >= 90)
        dots = "IIIIIIIII{666666}I";
    else if (AR >= 80)
        dots = "IIIIIIII{666666}II";
    else if (AR >= 70)
        dots = "IIIIIII{666666}III";
    else if (AR >= 60)
        dots = "IIIIII{666666}IIII";
    else if (AR >= 50)
        dots = "IIIII{666666}IIIII";
    else if (AR >= 40)
        dots = "IIII{666666}IIIIII";
    else if (AR >= 30)
        dots = "III{666666}IIIIIII";
    else if (AR >= 20)
        dots = "II{666666}IIIIIIII";
    else if (AR >= 10)
        dots = "I{666666}IIIIIIIII";
    else if (AR >= 0)
        dots = "{666666}IIIIIIIIII";

    /*if (AR >= 100)
        dots = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";
    else if (AR >= 90)
        dots = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½{666666}ï¿½";
    else if (AR >= 80)
        dots = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½{666666}ï¿½ï¿½";
    else if (AR >= 70)
        dots = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½{666666}ï¿½ï¿½ï¿½";
    else if (AR >= 60)
        dots = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½{666666}ï¿½ï¿½ï¿½ï¿½";
    else if (AR >= 50)
        dots = "ï¿½ï¿½ï¿½ï¿½ï¿½{666666}ï¿½ï¿½ï¿½ï¿½ï¿½";
    else if (AR >= 40)
        dots = "ï¿½ï¿½ï¿½ï¿½{666666}ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";
    else if (AR >= 30)
        dots = "ï¿½ï¿½ï¿½{666666}ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";
    else if (AR >= 20)
        dots = "ï¿½ï¿½{666666}ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";
    else if (AR >= 10)
        dots = "ï¿½{666666}ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";
    else if (AR >= 0)
        dots = "{666666}ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";*/

    return dots;
}

this::Invulnerable(playerid)
{
	if (pTemp[playerid][pInvulnerable] == 0.0) {
		pTemp[playerid][pInvulnerable] = 30.0;
	}

	PlayerInfo[playerid][pHealth] = pTemp[playerid][pInvulnerable];
	pTemp[playerid][pInvulnerable] = 0.0;
	return 1;
}

stock to_date( timestamp, _form=0 )
{
    /*
        ~ convert a Timestamp to a Date.
        ~ 10.07.2009

        date( 1247182451 )  will print >> 09.07.2009-23:34:11
        date( 1247182451, 1) will print >> 09/07/2009, 23:34
        date( 1247182451, 2) will print >> July 09, 2009, 23:34:11
        date( 1247182451, 3) will print >> 9 Jul 2009, 23:34
    */
    new year=1970, day=0, month=0, hour=0, mins=0, sec=0;

    new days_of_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    new names_of_month[12][10] = {"Oca","Sub","Mar","Nis","May","Haz","Tem","Agu","Eyl","Eki","Kas","Ara"};
    new returnstring[32];

    while(timestamp>31622400){
        timestamp -= 31536000;
        if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) timestamp -= 86400;
        year++;
    }

    if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )
        days_of_month[1] = 29;
    else
        days_of_month[1] = 28;


    while(timestamp>86400){
        timestamp -= 86400, day++;
        if (day==days_of_month[month]) day=0, month++;
    }

    while(timestamp>60){
        timestamp -= 60, mins++;
        if ( mins == 60) mins=0, hour++;
    }

    sec=timestamp;

    switch( _form ){
        case 1: format(returnstring, 31, "%02d/%02d/%d %02d:%02d", day+1, month+1, year, hour, mins);
        case 2: format(returnstring, 31, "%s %02d, %d, %02d:%02d:%02d", names_of_month[month],day+1,year, hour, mins, sec);
        case 3: format(returnstring, 31, "%d %c%c%c %d, %02d:%02d", day+1,names_of_month[month][0],names_of_month[month][1],names_of_month[month][2], year,hour,mins);

        default: format(returnstring, 31, "%02d.%02d.%d-%02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);
    }

    return returnstring;
}

stock GetSkin(const fields[] = "game_skins.*", const joins[] = "", const wheres[] = "", page = 1, limit = -1, sqlid = -1, model_id = -1, gender = -1, race = -1)
{
    new query[1024];

    format(query, sizeof(query), "SELECT %s FROM game_skins", fields);

    if(!isnull(joins))
    {
        format(query, sizeof(query), "%s %s", query, joins);
    }

    format(query, sizeof(query), "%s WHERE 1", query);

    if(sqlid != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND game_skins.id = '%d'", query, sqlid);
    }

    if(model_id != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND game_skins.model_id = '%d'", query, model_id);
    }

    if(gender != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND game_skins.gender = '%d'", query, gender);
    }

    if(race != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND game_skins.race = '%d'", query, race);
    }

    if(!isnull(wheres))
    {
        format(query, sizeof(query), "%s AND %s", query, wheres);
    }

    mysql_format(dbHandle, query, sizeof(query), "%s ORDER BY game_skins.id DESC", query);

    if(limit == -1)
        mysql_format(dbHandle, query, sizeof(query), "%s LIMIT %d, 10000", query, ((page - 1) * ITEM_PER_PAGE));
    else
        mysql_format(dbHandle, query, sizeof(query), "%s LIMIT %d, 1", query, ((page - 1) * ITEM_PER_PAGE) + limit);

    return query;
}

this::LoadModels()
{
	new rows = cache_num_rows();
	if(cache_num_rows())
	{
		new ozelmodel;

		for(new i = 0; i < rows; i++)
		{
			cache_get_value_int(i, "id", ozelmodel);

			RefreshModel(ozelmodel);
		}

		printf("[!] Sunucudan %d model verisi alindi.", rows);
	}

	else printf("[!] Sunucudan model verisi alinamadi.");

	return 1;
}

stock GetModel(const fields[] = "ozel_modeller.*", const joins[] = "", const wheres[] = "", page = 1, limit = -1, sqlid = -1, type = -1, baseid = -1, newid = -1)
{
    new query[512];

    format(query, sizeof(query), "SELECT %s FROM ozel_modeller", fields);

    if(!isnull(joins))
    {
        format(query, sizeof(query), "%s %s", query, joins);
    }

    format(query, sizeof(query), "%s WHERE 1", query);

    if(sqlid != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND ozel_modeller.id = '%d'", query, sqlid);
    }

    if(type != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND ozel_modeller.type = '%d'", query, type);
    }

    if(baseid != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND ozel_modeller.baseid = '%d'", query, baseid);
    }

    if(newid != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND ozel_modeller.newid = '%d'", query, newid);
    }

    if(!isnull(wheres))
    {
        format(query, sizeof(query), "%s AND %s", query, wheres);
    }

    mysql_format(dbHandle, query, sizeof(query), "%s ORDER BY ozel_modeller.id DESC", query);

    if(limit == -1)
        mysql_format(dbHandle, query, sizeof(query), "%s LIMIT %d, 10000", query, ((page - 1) * ITEM_PER_PAGE));
    else
        mysql_format(dbHandle, query, sizeof(query), "%s LIMIT %d, 1", query, ((page - 1) * ITEM_PER_PAGE) + limit);

    return query;
}

stock RefreshModel(ozelmodel)
{
    mysql_tquery(dbHandle, GetModel("ozel_modeller.type, ozel_modeller.baseid, ozel_modeller.newid", "", "", 1, -1, ozelmodel), "OnModelRefreshed", "d", ozelmodel);
    return 1;
}
stock GetPlayerDistanceToObject(playerid, objectid) // by blaze
{
	new Float:tmpdis;
    new Float:player_pos[3], Float:object_pos[3];
    GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);
    GetDynamicObjectPos(objectid, object_pos[0], object_pos[1], object_pos[2]);

	tmpdis = floatsqroot(floatpower(floatabs(floatsub(object_pos[0],player_pos[0])),2)+floatpower(floatabs(floatsub(object_pos[1],player_pos[1])),2)+floatpower(floatabs(floatsub(object_pos[2],player_pos[2])),2));
	return floatround(tmpdis);
}

forward YuruyusAnim(playerid);
public YuruyusAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid, keys, updown, leftright);
	if(PlayerInfo[playerid][pWalk] == YURUYUS_NORMAL)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(PlayerInfo[playerid][pWalk] == YURUYUS_PED)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if (PlayerInfo[playerid][pWalk] == YURUYUS_GANGSTER)
	{
		if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(PlayerInfo[playerid][pWalk] == YURUYUS_GANGSTER2)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(PlayerInfo[playerid][pWalk] == YURUYUS_YASLI)
	{
		if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(PlayerInfo[playerid][pWalk] == YURUYUS_SISKO_YASLI)
	{
		if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(PlayerInfo[playerid][pWalk] == YURUYUS_SISKO)
	{
		if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(PlayerInfo[playerid][pWalk] == YURUYUS_KADIN)
	{
		if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(PlayerInfo[playerid][pWalk] == YURUYUS_KADIN2)
	{
		if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(PlayerInfo[playerid][pWalk] == YURUYUS_FAHISE)
	{
		if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(PlayerInfo[playerid][pWalk] == YURUYUS_FAHISE2)
	{
		if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(PlayerInfo[playerid][pWalk] == YURUYUS_SARHOS)
	{
		if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(PlayerInfo[playerid][pWalk] == YURUYUS_KOR)
	{
		if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	else if(PlayerInfo[playerid][pWalk] == YURUYUS_ARMED)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(YuruyusTimer[playerid]);
			ApplyAnimation(playerid,"PED","WALK_armed",4.1,1,1,1,1,1);
			YuruyusTimer[playerid] = SetTimerEx("YuruyusAnim", 200, false, "d", playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_armed",4.0,0,0,0,0,1), KillTimer(YuruyusTimer[playerid]);
	}
	return true;
}

stock AntiCheatGetHealth(playerid, &Float:health)
{
	if(!IsPlayerConnected(playerid)) return 0;
	health = PlayerInfo[playerid][pHealth];
	return 1;
}

stock IllegalOlusumUyesi(playerid)
{
	if(PlayerInfo[playerid][pFaction] == 0) return 0;

	switch(OlusumTipGetir(PlayerInfo[playerid][pFaction]))
	{
		case FACTION_GANG, FACTION_MAFIA: return 1;
	}
	return 0;
}
this::PlayerTimer()
{
    new string[164], cont;
	foreach(new i : Player)
	{
	    cont = Login_PlayerTimer(i);
		if (!cont) continue;

    	/*if (pTemp[i][pPayphone] && 0 == IsPlayerAtPayphone(i, pTemp[i][pPayphone]))
		{
			PayphoneInfo[pTemp[i][pPayphone]][phUsed] = INVALID_PLAYER_ID;
			pTemp[i][pPayphone] = -1;
        }*/

		Death_PlayerTimer(i);
        House_PlayerTimer(i);
		CheckValidTextDraws(i);

		if (!(PlayerInfo[i][pSettings] & togHUD) && PlayerInfo[i][pSettings] & yesMHUD)	SyncHudTextDraw(i);
		else if (!(PlayerInfo[i][pSettings] & yesMHUD) && !(PlayerInfo[i][pSettings] & togHUD))	SyncHudTextDrawModern(i);

		if (StaffInfo[i][sSpecID] != INVALID_PLAYER_ID) SyncSpectatingPanel(i);

		//if (!IsPlayerAFK(i)) Fire_Check(i);

        if(IsPlayerFalling(i) && GetPlayerVirtualWorld(i) > 0)
		{
            new houseid = pTemp[i][pHouseEntered];
		    new bizid = pTemp[i][pBizEntered];

			if(bizid == -1 && houseid == -1) houseid = GetNearInsideHouse(i, 100.0), bizid = GetNearInsideBiz(i, 100.0);

			if(bizid == -1 && houseid == -1) return 0;

			new Float:oXa, Float:oYa, Float:oZa;
			GetPlayerPos(i, oXa, oYa, oZa);

			if(houseid != -1 && (oZa - HouseInfo[houseid][hExitZ]) < -10) return BugResolverFalling(i);

			else if(bizid != -1 && (oZa - BizInfo[bizid][bizExitZ]) < -10) return BugResolverFalling(i);

			else return 0;
		}


        if(IsPlayerFalling(i) && GetPlayerVirtualWorld(i) == 0 && GetPlayerInterior(i) == 0)
		{
            new Float:oXa, Float:oYa, Float:oZa;
			GetPlayerPos(i, oXa, oYa, oZa);
			if(oZa < -20.0)
			{
		        new first_login = randomEx(1,3);

		        switch(first_login)
		        {
					case 1:
					{
						SetWorld(i, 0);
						SetInterior(i, 0);
						SetPlayerPosEx(i,1764.8287,-1862.1288,13.5767);
					}
					case 2:
					{
						SetWorld(i, 0);
						SetInterior(i, 0);
						SetPlayerPosEx(i,1685.7706,-2335.0701,13.5469);
					}
					case 3:
					{
						SetWorld(i, 0);
						SetInterior(i, 0);
						SetPlayerPosEx(i,1500.8291,-1700.3857,14.5469);
					}
		       }
			   SendServerMessage(i, "LOSWORLD Bug Guard senin düþtüðünü anladý ve spawn bölgesine gönderdi.");
			}
		}

		if (maskOn{i}) {
			new nametag[128], Float:armour;
            AntiCheatGetArmour(i, armour);

            if (armour > 1.0)
            {
                format(nametag, sizeof(nametag), "%s (%i)\n{FFFFFF}%s\n{FF0000}%s", PlayerInfo[i][pMaskname], i, GetArmorDots(i), GetHealthDots(i));
            }
            else
            {
                format(nametag, sizeof(nametag), "%s (%i)\n{FF0000}%s", PlayerInfo[i][pMaskname], i, GetHealthDots(i));
            }
            UpdateDynamic3DTextLabelText(cNametag[i], 0xFFFFFFFF, nametag);
		}

		if(Silah_Bilgi[i][sMermiTD_UpdateTime] < gettime()) {
			Silah_Bilgi[i][sMermiTD_UpdateTime] = gettime();
			new BWH_weaponid = GetPlayerWeapon(i);
			if(BWH_weaponid >= 0) {
				new slot = SilahSlotuBul[BWH_weaponid], BWH_ammo_str[7];
				format(BWH_ammo_str, sizeof(BWH_ammo_str), " ");
				if(Silah_Bilgi[i][sSilahID][slot] == BWH_weaponid) {
					if((BWH_weaponid > 21 && BWH_weaponid < 35) || BWH_weaponid == 38) {
						if(Silah_Bilgi[i][sMermi][slot] > 0) format(BWH_ammo_str, sizeof(BWH_ammo_str), "%d", Silah_Bilgi[i][sMermi][slot]);
					}
				}
				PlayerTextDrawSetString(i, Silah_Bilgi[i][MermiTD], BWH_ammo_str);
			}
		}

		if(GetTickCount() - PlayerInfo[i][pSilahTick] > 500 && PlayerInfo[i][pLevel] > 2 && !pTemp[i][pPizzaBoy] && !pTemp[i][pTruckerOn] && PlayerInfo[i][pSilahSistemi] == 1) {
			PlayerInfo[i][pUzerindekiSilah] = GetPlayerWeapon(i);
			new weaponid, ammo, objectslot, count, index;
			for(new ix = 3; ix < 7; ix++) {
				BWH_GetPlayerWeaponData(i, ix, weaponid, ammo);
				index = weaponid - 22;
				if(weaponid && ammo && !WeaponSettings[i][index][Hidden] && IsWeaponWearable(weaponid) && EditingWeapon[i] != weaponid) {
					objectslot = GetWeaponObjectSlot(weaponid);
					if(GetPlayerWeapon(i) != weaponid) SetPlayerAttachedObject(i, objectslot, GetWeaponModelEx(weaponid), WeaponSettings[i][index][Bone], WeaponSettings[i][index][Position][0], WeaponSettings[i][index][Position][1], WeaponSettings[i][index][Position][2], WeaponSettings[i][index][Position][3], WeaponSettings[i][index][Position][4], WeaponSettings[i][index][Position][5], 1.0, 1.0, 1.0);
					else if(IsPlayerAttachedObjectSlotUsed(i, objectslot)) RemovePlayerAttachedObject(i, objectslot);
				}
			}
			for (new ix = 6; ix <= 9; ix++) if(IsPlayerAttachedObjectSlotUsed(i, ix)) {
				count = 0;
				for (new j = 22; j <= 34; j++) if(AC_PlayerHasWeapon(i, j) && GetWeaponObjectSlot(j) == ix) count++;
				if(!count) RemovePlayerAttachedObject(i, ix);
			}
			PlayerInfo[i][pSilahTick] = GetTickCount();
		}

		if(GetPlayerMoney(i) != PlayerInfo[i][pCash])
		{
	        ResetPlayerMoney(i);
	        GivePlayerMoney(i, PlayerInfo[i][pCash]);
		}

		if (GetPVarInt(i, #LableText) > 0)
		{
			SetPVarInt(i, #LableText, GetPVarInt(i, #LableText)-1);

			if (GetPVarInt(i, #LableText) == 0)
			{
				PlayerTextDrawHide(i, PlayerText:mulkbilgi[i]);
				PlayerTextDrawHide(i, PlayerText:mulktext[i][0]);
				PlayerTextDrawHide(i, PlayerText:mulktext[i][1]);
				DeletePVar(i, #LableText);
			}
		}

		//
        if (pTemp[i][pBoombox_house] != -1 && IsPlayerInsideHouse(i, pTemp[i][pBoombox_house], 25.0) == 0)
        {
            pTemp[i][pBoombox_house] = -1;
            StopAudioStreamForPlayer(i);
        }

        if (pTemp[i][pBoombox_biz] != -1 && IsPlayerBizInside(i, pTemp[i][pBoombox_biz], 25.0) == 0)
        {
            pTemp[i][pBoombox_biz] = -1;
            StopAudioStreamForPlayer(i);
        }

		if(!PlayerInfo[i][pAdmin] && IsPlayerInAnyVehicle(i) && IsPlayerLoggedIn(i)) {
			new vehicleid = GetPlayerVehicleID(i);
			if(vehicleid != pTemp[i][pCarWarpVehicleID] && pTemp[i][pCarWarpTime] > gettime())
			{
				SendClientMessageEx(i, COLOR_WHITE, "LOSWORLD-AC tarafýndan kalýcý olarak yasaklandýn. Sebep: Vehicle-Hack (#2)");

	            new query[256];
	            mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `block_name`='Blaze Guard', `block_reason` ='Vehicle Troll', `status` = '3' WHERE `id` = '%i'", PlayerInfo[i][pID]);
	            mysql_tquery(dbHandle, query);

	            new mes[128];
                format(mes, sizeof(mes), "(( %s adlý karakter LOSWORLD Guard tarafýndan yasaklandý. Sebep: Hile ))", GetNameEx(i));
	            SendClientMessageByAdmin(COLOUR_TOMATO, mes);

				KickEx(i);
				return 1;
			}
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && pTemp[i][AntiHileSistemi] != -1 && pTemp[i][AntiHileSistemi] != vehicleid) {
				SendClientMessageEx(i, COLOR_WHITE, "LOSWORLD-AC tarafýndan kalýcý olarak yasaklandýn. Sebep: Vehicle-Hack (#1)");

	            new query[256];
	            mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `block_name`='Blaze Guard', `block_reason` ='Vehicle Teleport', `status` = '3' WHERE `id` = '%i'", PlayerInfo[i][pID]);
	            mysql_tquery(dbHandle, query);

	            new mes[128];
                format(mes, sizeof(mes), "(( %s adlý karakter LOSWORLD Guard tarafýndan yasaklandý. Sebep: Hile ))", GetNameEx(i));
	            SendClientMessageByAdmin(COLOUR_TOMATO, mes);

				KickEx(i);
			}

			if (!VehicleInfo[vehicleid][carEngineOn] && GetSpeed(i) > 30 && IsDriver(i))
			{
				SendAdmMessage("%s [/spec %d] adlý oyuncu %d ID'li aracý motoru kapalý sürüyor olabilir.", GetNameEx(i), i, vehicleid);
			}

		}

        if (GetPVarInt(i, #try_engine))
		{
		    if (HoldingKey(i, KEY_SPRINT) == 0)
		    {
		        SetPVarInt(i, #try_engine, GetPVarInt(i, #try_engine)-1);
		        if (GetPVarInt(i, #try_engine) == 0)
		        {
		        	DeletePVar(i, #try_engine);
		        	GameTextForPlayer(i, "~r~CALISMIYOR! MOTOR COK HASARLI", 1000, 4);
				}
			}
		    else
		    {
		        PlaySound(i, 11200);
		        SetPVarInt(i, #try_engine, GetPVarInt(i, #try_engine)+1);
		        if (GetPVarInt(i, #try_engine) == 12)
		        {
		            DeletePVar(i, #try_engine);
		            VehicleEngine(GetPlayerVehicleID(i), true);
		            GameTextForPlayer(i, "~w~MOTOR ~g~CALISTI", 2500, 4);
		        }
		    }
		}

		Job_SecondTimer(i);

		if (pTemp[i][pTracePlayer] != INVALID_PLAYER_ID)	TracePlayer(i);


		for(new pp = 0; pp < MAX_PAYPHONES; pp++)
		{
			if (PayphoneInfo[pp][phState] == PAYPHONE_STATE_RINGING && PayphoneInfo[pp][phRing] < 59 && IsPlayerLogged(PayphoneInfo[pp][phCaller]))
			{
				PayphoneInfo[pp][phRing]++;
				if (PayphoneInfo[pp][phRing] % 5 == 0) Update_Payphone(pp);
			}
			else if (PayphoneInfo[pp][phState] == PAYPHONE_STATE_RINGING)
			{
				PayphoneInfo[pp][phState] = PAYPHONE_STATE_NONE;
				PayphoneInfo[pp][phRing] = 0;

				Update_Payphone(pp);

				PayphoneInfo[pp][phUsed] = INVALID_PLAYER_ID;
				PayphoneInfo[pp][phCaller] = INVALID_PLAYER_ID;
				PayphoneInfo[pp][phState] = PAYPHONE_STATE_NONE;

				if (IsPlayerLogged(PayphoneInfo[pp][phCaller]))
				{
					SendPhoneMessage(PayphoneInfo[pp][phCaller], "Kiþi cevap vermiyor.");
					HangupCall(PayphoneInfo[pp][phCaller]);
				}
			}
		}

		if (pTemp[i][pPayphone] != -1)
		{
			if (0 == IsPlayerAtPayphone(i, pTemp[i][pPayphone]))
			{
				SendWarningMessage(i, "Ankesörlü telefondan uzaklaþtýnýz.");
				cancelPayphone(i);
			}
        }

		if(0 != IsPlayerPhoneCreated(i))
			Update_Phone(i);

		if(pTemp[i][pCallStatus] == 2 && pTemp[i][pCallLine] != INVALID_PLAYER_ID)
		{
		    pTemp[i][pCallTime]++;
            if(0 != IsPlayerPhoneCreated(i))
            {
				new mes[52];
		    	format(mes, sizeof(mes), "%s~n~%s", pTemp[i][pCallName], ConvertSecond(pTemp[i][pCallTime]));

		    	PlayerTextDrawSetString(i, TD_iphone_name[i], mes);
		    	PlayerTextDrawShow(i, TD_iphone_name[i]);
			}
		}

		if (pTemp[i][pCallStatus] == 2 && (pTemp[i][pCallLine] != INVALID_PLAYER_ID || pTemp[i][pEmergency]))
		{
			if (PlayerInfo[i][pInjured] != 0)
			{
   				SendPhoneMessage(pTemp[i][pCallLine], "Hatta bulunduðunuz kiþi ile baðlantýnýz kesildi.");
   				SendPhoneMessage(i, "Hatta bulunduðunuz kiþi ile baðlantýnýz kesildi.");

				HangupCall(i);
				HangupCall(pTemp[i][pCallLine]);

				return 1;
			}
			if (Payphone_Nearest(i) == -1 && pTemp[i][pPayphone] != -1)
			{
				SendWarningMessage(i, "Ankesörlü telefondan uzaklaþtýnýz.");

				SendPhoneMessage(pTemp[i][pCallLine], "Hatta bulunduðunuz kiþi ile baðlantýnýz kesildi.");
   				SendPhoneMessage(i, "Hatta bulunduðunuz kiþi ile baðlantýnýz kesildi.");

				HangupCall(i);
				HangupCall(pTemp[i][pCallLine]);

				return 1;
			}


			new mes[52];

			if (pTemp[i][pPayphone] != -1)
			{
				format(mes, sizeof(mes), "%s", ConvertSecond(pTemp[i][pCallTime]));
				PlayerTextDrawSetString(i, PP_Btn[i][0], mes);
			}
		}

/*		if (GetPVarInt(i, #vehicle_info))
		{
		    SetPVarInt(i, #vehicle_info, GetPVarInt(i, #vehicle_info) - 1);
		    if (GetPVarInt(i, #vehicle_info) == 0)
		    {
        		TextDrawHideForPlayer(i, TD_vehicle_info[0]);
	    		TextDrawHideForPlayer(i, TD_vehicle_info[1]);
				PlayerTextDrawHide(i, TD_vehicle_name[i]);
				DeletePVar(i, #vehicle_info);
			}
		}*/

		if (pTemp[i][pFlashTime])
		{
		    pTemp[i][pFlashTime]--;
		    if (pTemp[i][pFlashTime] == 0)
		    {
		    	SetPlayerCurrentTimeAndWeather(i);
				StopPlayerAnims(i);
				UnFreezePlayer(i);
				SetPlayerDrunkLevel(i, 1999);
			}
		}

		if (pTemp[i][pInjuredLegTime]) pTemp[i][pInjuredLegTime]--;

		if (pTemp[i][pTaserTime])
		{
		    if (!PlayerToPoint(1.5, i, PlayerInfo[i][pPosX], PlayerInfo[i][pPosY], PlayerInfo[i][pPosZ]))
		        SetPlayerPosEx(i, PlayerInfo[i][pPosX], PlayerInfo[i][pPosY], PlayerInfo[i][pPosZ]);

		    ApplyAnimation(i, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 1, 0);

		    pTemp[i][pTaserTime]--;
		    if (0 == pTemp[i][pTaserTime]) SendSpecialMessage(i, "Artýk baygýn deðilsin."), StopPlayerAnims(i);
		}

		if (pTemp[i][pRamType] != 0 && pTemp[i][pRamTime] > 1)
		{
		    if (pTemp[i][pRamType] == 1
				&& ((pTemp[i][pRamHouse] != -1 && 0 == IsPlayerOutsideHouse(i, pTemp[i][pRamHouse], 1.5))
				|| (pTemp[i][pRamBiz] != -1 && 0 == IsPlayerBizOutside(i, pTemp[i][pRamBiz], 1.5))
				|| (pTemp[i][pRamGarage] != -1 && GetNearOutsideGarage(i, 5.0) != pTemp[i][pRamGarage])
				|| (pTemp[i][pRamVeh] != -1 && GetNearVehicle(i, 3.0) != pTemp[i][pRamVeh]))) {

		        SendErrorMessage(i, "Kapýdan çok uzaklaþtýnýz.");
		        pTemp[i][pRamType] = 0;
            	pTemp[i][pRamTime] = 0;
            	StopPlayerAnims(i);
		    }
		    else
	    	{
            	pTemp[i][pRamTime]--;
				GameTextForPlayer(i, "~w~Kapi kilidi kiriliyor ~y~30sn", 5000, 6, pTemp[i][pRamTime]);
			}
		}
		else if (pTemp[i][pRamType] == 1 && pTemp[i][pRamTime] == 1)
		{
		    pTemp[i][pRamType] = 0;
            pTemp[i][pRamTime] = 0;

            new location[MAX_ZONE_NAME];
			GetPlayer2DZone(i, location, MAX_ZONE_NAME);

			if (pTemp[i][pRamHouse] != -1 && IsPlayerOutsideHouse(i, pTemp[i][pRamHouse]))
            {
                new houseid = pTemp[i][pRamHouse];
                HouseInfo[houseid][hLocked] = 0;
				GameTextForPlayer(i, "~w~Kapi ~g~kilidi kirildi", 5000, 6);
				PlaySound(i, 1145);
				StopPlayerAnims(i);
                DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
                HouseInfo[houseid][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 100.0);



				new query[256];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] evin kapýsý açýldý (/ram) [H_MYSQL: %i]",
				GetName(i), PlayerInfo[i][pID], q_GetPlayerIP(i), HouseInfo[houseid][hID]);
			    insert_log(query, RAM_LOG, 1, PlayerInfo[i][pAccID]);
            }
            else if (pTemp[i][pRamBiz] != -1 && IsPlayerBizOutside(i, pTemp[i][pRamBiz]))
            {
                new bizid = pTemp[i][pRamBiz];
            	BizInfo[bizid][bizLocked] = 0;
				GameTextForPlayer(i, "~w~Kapi ~g~acildi", 5000, 6);
				PlaySound(i, 1145);
				StopPlayerAnims(i);

				new query[256];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] iþletme kapýsý açýldý (/ram) [B_MYSQL: %i]",
				GetName(i), PlayerInfo[i][pID], q_GetPlayerIP(i), BizInfo[bizid][bizID]);
			    insert_log(query, RAM_LOG, 2, PlayerInfo[i][pAccID]);
            }
			else if (pTemp[i][pRamGarage] != -1 && GetNearOutsideGarage(i, 5.0) == pTemp[i][pRamGarage])
            {
                new garageid = pTemp[i][pRamGarage];
            	GarageInfo[garageid][garageLocked] = 0;
				GameTextForPlayer(i, "~w~Kapi ~g~acildi", 5000, 6);
				PlaySound(i, 1145);
				StopPlayerAnims(i);

				new query[256];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] garaj kapýsý açýldý (/ram) [B_MYSQL: %i]",
				GetName(i), PlayerInfo[i][pID], q_GetPlayerIP(i), GarageInfo[garageid][garageID]);
			    insert_log(query, RAM_LOG, 3, PlayerInfo[i][pAccID]);
            }
			else if (pTemp[i][pRamVeh] != -1 && GetNearVehicle(i, 3.0) == pTemp[i][pRamVeh])
            {
                ToggleVehicleLock(pTemp[i][pRamVeh], false);
				GameTextForPlayer(i, "~w~Kapi ~g~acildi", 5000, 6);
				PlaySound(i, 1145);
				StopPlayerAnims(i);

				new query[256];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] araç açýldý (/ram) [B_MYSQL: %i]",
				GetName(i), PlayerInfo[i][pID], q_GetPlayerIP(i), VehicleInfo[pTemp[i][pRamVeh]][carID]);
			    insert_log(query, RAM_LOG, 3, PlayerInfo[i][pAccID]);
            }
			TextDrawHideForPlayer(i, infotxt[i]);
		}
		else if (pTemp[i][pRamType] == 3 && pTemp[i][pRamTime] == 1)
		{
		    pTemp[i][pRamType] = 0;
            pTemp[i][pRamTime] = 0;

            new location[MAX_ZONE_NAME];
			GetPlayer2DZone(i, location, MAX_ZONE_NAME);
			if (pTemp[i][pRamHouse] != -1)
            {
                new houseid = pTemp[i][pRamHouse];
                CreateDynamicExplosion(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 12, 5.0, HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt]);
				if (IsValidDynamicObject(pTemp[i][pRamObj]))
				{
					DestroyDynamicObject(pTemp[i][pRamObj]);
					pTemp[i][pRamObj] = INVALID_OBJECT_ID;
				}
				HouseInfo[houseid][hLocked] = 0;
				HouseInfo[houseid][hDDoor] = 2;
                DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
                HouseInfo[houseid][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 100.0);
				Save_House(houseid);
				UpdateHouseDoor(houseid);

				new query[256];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] evin kapýsýný havaya uçurdu (/ram) [H_MYSQL: %i]",
				GetName(i), PlayerInfo[i][pID], q_GetPlayerIP(i), HouseInfo[houseid][hID]);
			    insert_log(query, RAM_LOG, 3, PlayerInfo[i][pAccID]);
            }
            else if (pTemp[i][pRamBiz] != -1)
            {
                new bizid = pTemp[i][pRamBiz];
            	CreateDynamicExplosion(BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ], 12, 5.0, BizInfo[bizid][bizPosVW], BizInfo[bizid][bizPosInt]);
                if (IsValidDynamicObject(pTemp[i][pRamObj]))
				{
					DestroyDynamicObject(pTemp[i][pRamObj]);
					pTemp[i][pRamObj] = INVALID_OBJECT_ID;
				}
				BizInfo[bizid][bizLocked] = 0;
				BizInfo[bizid][bizDDoor] = 2;
				Save_Business(bizid);
				UpdateBusinessDoor(bizid);

                new query[256];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] iþletmenin kapýsýný havaya uçurdu (/ram) [B_MYSQL: %i]",
				GetName(i), PlayerInfo[i][pID], q_GetPlayerIP(i), BizInfo[bizid][bizID]);
			    insert_log(query, RAM_LOG, 4, PlayerInfo[i][pAccID]);
            }
			else if (pTemp[i][pRamGarage] != -1)
            {
                new garageid = pTemp[i][pRamGarage];

            	CreateDynamicExplosion(GarageInfo[garageid][garagePlayer_Enter][0], GarageInfo[garageid][garagePlayer_Enter][1], GarageInfo[garageid][garagePlayer_Enter][2], 12, 5.0, GarageInfo[garageid][garageEnterVW], GarageInfo[garageid][garageEnterInt]);

                if (IsValidDynamicObject(pTemp[i][pRamObj]))
				{
					DestroyDynamicObject(pTemp[i][pRamObj]);
					pTemp[i][pRamObj] = INVALID_OBJECT_ID;
				}

				GarageInfo[garageid][garageLocked] = 0;
				GarageInfo[garageid][garageDDoor] = 2;

				Save_Garage(garageid);
				UpdateGarageDoor(garageid);

                new query[256];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] garajýn kapýsýný havaya uçurdu (/ram) [B_MYSQL: %i]",
				GetName(i), PlayerInfo[i][pID], q_GetPlayerIP(i), GarageInfo[garageid][garageID]);
			    insert_log(query, RAM_LOG, 5, PlayerInfo[i][pAccID]);
            }
		}
		//
		new vehicle = GetPlayerVehicleID(i), Float:health;
        AntiCheatGetVehicleHealth(vehicle, health);
		//Vehicle Milliage
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && VehicleInfo[vehicle][carOwnerID] > 0 && VehicleInfo[vehicle][carOwnerID] != INVALID_PLAYER_ID && !IsPlayerAFK(i) && GetVehicleSpeed(vehicle) > 0)
		    VehicleInfo[vehicle][carMilliage] += GetVehicleSpeed(vehicle)/1.6/1609.344;
  		//Vehicle Milliage
		//Engine off
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && IsABicycle(vehicle) == 0 && VehicleInfo[vehicle][carEngineOn] && health < 430.0 && random(20) == 0)
		{
			GameTextForPlayer(i, "~w~Arac Hasarli ~r~Motor durdu!", 2500, 4);
			format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~w~Araciniz Hasarli: ~y~motorunuz ~w~durdu!");
			GameTextForPlayer(i, string, 1200, 3);
			SendSyntaxMessage(i,"Aracýnýz çok hasarlý olduðu için motoru stop etti. En yakýn zamanda bir tamirciye gidin.");
			SendNearbyMessage(Range_Normal, i, COLOR_PURPLE, "* Aracýn motoru hasarlý olduðu için durdu. (( %s [%s] ))", VehicleNames[GetVehicleModel(vehicle)-400], VehicleInfo[vehicle][carPlate]);

			VehicleEngine(vehicle, false);
		}

		//Fire
		if (pTemp[i][pFireTime] > 0)
		{
			if (pTemp[i][pFireTime] == 1)
			{
				GameTextForPlayer(i, "~w~Ates ~r~yaktin~w~!", 1000, 4);
				CreatePlayersFire(i, GetPVarInt(i, #firetype), GetPVarInt(i, #firebuildID));
				StopCreatingPlayersFire(i);
			}
			else if (GetPlayerAnimationIndex(i) == 168)
			{
				pTemp[i][pFireTime]--;

				new mes[32];
				format(mes, sizeof(mes), "~y~Ates yakiliyor ... %i", pTemp[i][pFireTime]);
				GameTextForPlayer(i, mes, 1000, 4);
				ApplyAnimation(i,"BOMBER","BOM_Plant_Loop", 4.0, 1, 0, 0, 0, 0, 1);
			}
			else
			{
				StopCreatingPlayersFire(i);
				SendErrorMessage(i, "Ateþ yakýlamadý, tekrar deneyin! ");
			}
		}

		Mechanic_SecondTimer(i);

		//AFK Timer
		pTemp[i][pDarkAFK]++;
		//AFK Timer

		//Driving license exam
		/*if (pTemp[i][pLicenseExam]) {
			if (GetPVarInt(i, #exam_second) > 0 && IsPlayerInAnyVehicle(i))
			{
				UpdateIntVar(i, #exam_second, -1);
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~w~kalan sure: ~y~%i ~w~saniye", GetPVarInt(i, #exam_second));
				GameTextForPlayer(i, string, 1200, 3);
			} else {
				new vehicleid = GetPlayerVehicleID(i);
				SendSyntaxMessage(i, "Sýnavda baþarsýz oldunuz. ");
				pTemp[i][pLicenseExam] = 0;
				DeletePVar(i, #exam_second);
				TogglePlayerAllDynamicRaceCPs(i, false);
				RemovePlayerFromVehicle(i);
				RespawnVehicle(vehicleid);
			}
		}
		*/
		//Driving license exam
		//Gas Station Refueling
		/*if (GetPVarInt(i, "RefuelTime") != 0)
		{
			if (GetPVarInt(i, "RefuelTime") == 1)
			{
				new toFill = 100 - VehicleInfo[vehicle][carFuel];
				UnFreezePlayer(i);
				new toFill = 100 - VehicleInfo[vehicle][carFuel];
				VehicleInfo[vehicle][carFuel] += toFill;
				SM2(i,"ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ $%i.", GetPVarInt(i, "RefuelCost"));
				GiveCash(i, - GetPVarInt(i, "RefuelCost"));
				DeletePVar(i, "RefuelCost");
				DeletePVar(i, "RefuelTime");
			}
			else
			{
				UpdateIntVar(i, "RefuelTime", -1);
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Refueling ~b~%i", GetPVarInt(i, "RefuelTime"));
				GameTextForPlayer(i, string, 1050, 3);
			}
		}*/
		//ERROR Message refresher
		/*for(new a = 0; a < 3; a ++)
		{
			if (ErrorInfo[i][a][eExpire] > 1)
			{
				ErrorInfo[i][a][eExpire]--;
				if (ErrorInfo[i][a][eExpire] == 1)
				{
					ErrorInfo[i][a][eExpire] = 0;
					RefreshErrorMsg(i);
				}
			}
		}*/
		//ERROR Message refresher
		//------------------------------------------------------------------
		//Checking jail time
		if (PlayerInfo[i][pMutedTime] > 0)
		{
			PlayerInfo[i][pMutedTime]--;
			if (!PlayerInfo[i][pMutedTime]) SCM(i, COLOR_LIGHTRED, "Chat sizin için tekrar kullanýlabilir.");
		}

		if (PlayerInfo[i][pAJailTime] > 1 && PlayerInfo[i][pAJailed] == 1)
		{
			PlayerInfo[i][pAJailTime]--;
			new mes[56];
			format(mes,sizeof(mes),"~r~kalan sure: ~w~%i saniye",PlayerInfo[i][pAJailTime]);
			GameTextForPlayer(i, mes, 1200, 4);
		}

		else if (PlayerInfo[i][pAJailTime] < 3 && PlayerInfo[i][pAJailed] == 1)
		{
			PlayerInfo[i][pAJailTime] = 0;
			PlayerInfo[i][pAJailed] = 0;
			pTemp[i][pLastLogin] = 0;
			SetPlayerSpawn(i);
			GameTextForPlayer(i,"~w~Artik ~g~ozgursun~w~!",5000,1);
		}


		//Checking isolate time
		if (PlayerInfo[i][pIsolateTime] > 1) PlayerInfo[i][pIsolateTime]--;
		else if (PlayerInfo[i][pIsolateTime] == 1)
		{
		    PlayerInfo[i][pIsolateTime] = 0;
		    PutPlayerInPrison(i);
		}
		//Checking jail time
		if (PlayerInfo[i][pJailTime] > 1 && 0 == PlayerInfo[i][pIsolateTime] && 0 == PlayerInfo[i][pAJailTime]) PlayerInfo[i][pJailTime]--;
		else if (PlayerInfo[i][pJailTime] == 1)
		{
		    if (PlayerInfo[i][pJailed] == PALOMINO_JAIL)
		        SetPlayerPosEx(i, 1128.3342,-1451.9856,15.7969);
			/*else if (PlayerInfo[i][pJailed] == LSPD_JAIL)
				SetPlayerPosEx(i, 1552.4921,-1675.6072,16.1953);*/
			else if (PlayerInfo[i][pJailed] == PRISON_JAIL)
				SetPlayerPosEx(i, 1128.3342,-1451.9856,15.7969);
			/*else if (PlayerInfo[i][pJailed] == SASD_JAIL)
				SetPlayerPosEx(i, 631.0485,-571.7219,16.3359);*/

			SetWorld(i, 0);
			SetInterior(i, 0);

			PlayerInfo[i][pIsolateTime] = 0;
			PlayerInfo[i][pJailTime] = 0;
			PlayerInfo[i][pJailed] = 0;
			if (IsValidDynamic3DTextLabel(PrisonLabel[i]))
			{
				DestroyDynamic3DTextLabel(PrisonLabel[i]);
		        PrisonLabel[i] = Text3D:INVALID_3DTEXT_ID;
			}
			GameTextForPlayer(i,"~g~Hapis suren bitti~n~~w~Kanunlara uyman dilegiyle!",5000,1);
		}
		//Checking jail time
		if (pTemp[i][pInjuredTime])
		{
			pTemp[i][pInjuredTime]--;

			if (0 == pTemp[i][pInjuredTime])
			{
				if (PlayerInfo[i][pInjured] == 1) SendHelpMessage(i, "Yerden kalkmak için: \"/tedaviol\"");
				if (PlayerInfo[i][pInjured] == 2) SendHelpMessage(i, "Yerden kalkmak için: \"/tedaviol\"");
				if (PlayerInfo[i][pInjured] == 3) {
					PlayerInfo[i][pInjured] = 0;
					StopPlayerAnims(i);
					UnFreezePlayer(i);
					SM1(i, "Artýk yaralý deðilsiniz.");
				}
			}
		}

		//Info TextDraw Exire
		if (infotxt_expire{i} > 0)
		{
			infotxt_expire{i}--;
			if (infotxt_expire{i} == 1)
			{
				TextDrawHideForPlayer(i, infotxt[i]);
				infotxt_expire{i} = 0;
			}
		}
		//Info TextDraw Exire

		if (!IsPlayerInAnyVehicle(i)) {
			if (ATM_Nearest(i) != -1) {
				InfoMSG(i, "ATM kullanmak icin ~y~'~k~~GROUP_CONTROL_BWD~'~w~ tusuna basin veya ~y~/atm~w~ komutunu kullanin.", 2);
			}
			/*else if (Payphone_Nearest(i) != -1) {
				InfoMSG(i, "Ankesorlu telefonu kullanmak icin ~y~'~k~~GROUP_CONTROL_BWD~'~w~ tusuna basin veya ~y~/ankesorlutelefon~w~ komutunu kullanin.", 2);
			}*/
			else if (Trash_Nearest(i, 2.0) != -1 && PlayerInfo[i][pJob] == JOB_TRASHMASTER && pTemp[i][pJob] && !HasTrash[i]) {
				InfoMSG(i, "Coplugu kullanmak icin ~y~'~k~~GROUP_CONTROL_BWD~'~w~ tusuna basin veya ~y~/copkutusu~w~ komutunu kullanin.", 2);
			}
		} else if (IsPlayerInAnyVehicle(i)) {
			if (Toll_Nearest(i) != -1) {
				InfoMSG(i, "Giseden gecmek icin ~y~'~k~~GROUP_CONTROL_BWD~'~w~ tusuna basin veya ~y~/gise~w~ komutunu kullanin.", 2);
			}
			else if (GetNearGarage(i) != -1) {
				InfoMSG(i, "Garaja girmek icin ~y~'~k~~GROUP_CONTROL_BWD~'~w~ tusuna basin veya ~y~/giris~w~ komutunu kullanin.", 2);
			}
			else if (ModShop_Nearest(i) != -1 || PAS_Nearest(i) != -1) {
				InfoMSG(i, "Menuyu acmak icin ~y~'~k~~GROUP_CONTROL_BWD~'~w~ tusuna basin veya ~y~/giris~w~ komutunu kullanin", 2);
			}
			else if (AZC_Nearest(i) != -1) {
				if (!GetPVarInt(i, #UsePump)) InfoMSG(i, "Yakit doldurmayi baslatmak icin ~y~'~k~~GROUP_CONTROL_BWD~'~w~ tusuna basin veya ~y~/benzin~w~ komutunu kullanin.", 2);
				else InfoMSG(i, "Yakit doldurmayi durdurmak icin ~y~'~k~~GROUP_CONTROL_BWD~'~w~ tusuna basin veya ~y~/benzin~w~ komutunu kullanin.", 1);
			}
		}



		if (JackingEngine[i] > 1)
		{
		    if (!IsPlayerInAnyVehicle(i) || VehicleInfo[GetPlayerVehicleID(i)][carEngineOn]) StopJackingEngine(i);
		    else
		    {
				JackingEngine[i]--;
				format(string, sizeof(string), "~y~/DUZKONTAK~w~ <SIFRELENMIS KELIME>~n~~r~SIFRELENMIS~w~ KOD: ~r~'~w~%s~r~'~n~~w~KALAN ~y~%i~w~ SANIYE", UnscrambleInfo[pTemp[i][pUnscrambleID]][eScrambledWord], JackingEngine[i]);
				InfoMSG(i, string, 2);
			}
		}
		else if (JackingEngine[i] == 1) pc_cmd_duzkontak(i, "");

		if (JackingLock[i] > 1)
		{
			if (pTemp[i][JackingType] == 1) {

				if (pTemp[i][JackingWarnings] >= 5)	return StopJackingLock(i);
				if (!CheckHanditem(i,18634))			return StopJackingLock(i);

				if (!IsPlayerInFrontVDoor(i, JackingVehicle[i])) {
					InfoMSG(i, "COK ~r~UZAKSIN~w~, GERI DON!", 3);
					return pTemp[i][JackingWarnings]++;
				}
			} else if (pTemp[i][JackingType] == 3 || pTemp[i][JackingType] == 4) {
				if (pTemp[i][JackingWarnings] >= 5)				 		  return StopBreakingLock(i);
				if (pTemp[i][JackingType] == 4 && !CheckHanditem(i,18634)) return StopBreakingLock(i);

				if (!IsPlayerOutsideHouse(i, BreakingHouse[i], 1.5)) {
					InfoMSG(i, "COK ~r~UZAKSIN~w~, GERI DON!", 3);
					return pTemp[i][JackingWarnings]++;
				}
			}
                else if (pTemp[i][JackingType] == 5 || pTemp[i][JackingType] == 6) {
				if (pTemp[i][JackingWarnings] >= 5)				 		  return StopStealing(i);
				if (pTemp[i][JackingType] == 6 && !CheckHanditem(i,18634)) return StopStealing(i);

				if (!IsPlayerInsideHouse(i, StealingHouse[i], 50.0)) {
					InfoMSG(i, "COK ~r~UZAKSIN~w~, GERI DON!", 3);
					return pTemp[i][JackingWarnings]++;
				}
			}
			else return 1;

			if (IsPlayerCrouching(i) == false && pTemp[i][JackingType] != 5 && pTemp[i][JackingType] != 6){
				InfoMSG(i, "~r~EGILMEK~w~ ZORUNDASIN!", 2);
				return pTemp[i][JackingWarnings]++;
			}

		    if (!IsPlayerAFK(i))
		    {
				pTemp[i][JackingWarnings] = 0;
				JackingLock[i]--;

				if (pTemp[i][JackingType] == 2 || pTemp[i][JackingType] == 1)		   format(string, sizeof(string), "ARAC KAPISINI KIRIYORSUNUZ ~y~%i~w~ SANIYE", JackingLock[i]);
				else if (pTemp[i][JackingType] == 3 || pTemp[i][JackingType] == 4) format(string, sizeof(string), "EV KAPISINI KIRIYORSUNUZ ~y~%i~w~ SANIYE", JackingLock[i]);
				else if (pTemp[i][JackingType] == 5 || pTemp[i][JackingType] == 6) format(string, sizeof(string), "SOYGUN YAPILIYOR ~y~%i~w~ SANIYE", JackingLock[i]);
				InfoMSG(i, string, 2);
			}
		}
		else if (JackingLock[i] == 1)
		{
			if (pTemp[i][JackingType] == 2 || pTemp[i][JackingType] == 1)
			{
				if (IsValidVehicle(JackingVehicle[i])) {
					ToggleVehicleLock(JackingVehicle[i], false);
					PlaySound(i, 1145);
					InfoMSG(i, "ARAC KAPISI ~g~KIRILDI~w~!", 3);
					SendServerMessage(i, "Araç kapýsýný kýrdýnýz.");
					AlarmOn(JackingVehicle[i]);

					TogglePlayerControllable(i, true);
					StopJackingLock(i, 0);
				}
			}
			else if (pTemp[i][JackingType] == 5 || pTemp[i][JackingType] == 6)
			{
				PlaySound(i, 1145);
				InfoMSG(i, "EV SOYGUNU ~g~SONA ERDI~w~!", 3);
				SendServerMessage(i, "Ev soygunu tamamlandý. Çuvalý araca /cuval ile býrakýn. Envanterinize eþyalar eklendi.");
				HouseAlarm(StealingHouse[i], true);

				pc_cmd_liftup(i, "");
                SetPlayerAttachedObject(i, ATTACH_HANDS, 2060, 5, 0.002953, 0.469660, -0.009797, 269.851104, 88.443557, 0.000000, 0.804894, 1.000000, 0.822361);
  	            SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

				JackingLock[i] = 0;
				StealingHouse[i] = 0;
				pTemp[i][JackingType] = 0;
				pTemp[i][JackingWarnings] = 0;
			}
			else {
				HouseInfo[BreakingHouse[i]][hLocked] = 0;
				PlaySound(i, 1145);
				InfoMSG(i, "EV KAPISI ~g~KIRILDI~w~!", 3);
				SendServerMessage(i, "Ev kapýsýný kýrdýnýz.");
				HouseAlarm(BreakingHouse[i], true);

				TogglePlayerControllable(i, true);

				JackingLock[i] = 0;
				BreakingHouse[i] = 0;
				pTemp[i][JackingType] = 0;
				pTemp[i][JackingWarnings] = 0;
			}
		}

		if (VehicleInfo[JackingVehicle[i]][ePhysicalAttack] && GetPlayerState(i) == PLAYER_STATE_ONFOOT)
	    {
			if (!IsValidVehicle(JackingVehicle[i]))				 	return StopJackingLock(i);
			if (VehicleInfo[JackingVehicle[i]][carLocked] == 0)  	return StopJackingLock(i);
			if (IsPlayerInAnyVehicle(i))							return StopJackingLock(i);

			if (IsValidVehicle(JackingVehicle[i]))
			{
				new Float:ccX, Float:ccY, Float:ccZ;
				GetVehiclePos(JackingVehicle[i], ccX, ccY, ccZ);

				if (GetVehicleDriver(JackingVehicle[i]) != -1 || !IsPlayerInRangeOfPoint(i, 1.9, ccX, ccY, ccZ))
				{
					InfoMSG(i, "COK ~r~UZAKTASIN~w~ ARACA YAKIN OLMALISIN!", 3);
					pTemp[i][JackingWarnings]++;

					if (pTemp[i][JackingWarnings] >= 5) return StopJackingLock(i);
				} else pTemp[i][JackingWarnings] = 0;
			}
			else return StopJackingLock(i);
		}

		if (PlayerInfo[i][MissionTarget][0] != INVALID_VEHICLE_ID && PlayerInfo[i][InMission] == CARJACKER_DELIVER)
		{
			if (!IsValidVehicle(PlayerInfo[i][MissionTarget][0]))	return StopJackingLock(i);
		    PlayerInfo[i][MissionTime] --;

		    new time[64];
			format(time, sizeof(time), "~r~ARAC PARCALANIYOR~n~~w~KALAN ~y~%d~w~ SANIYE", PlayerInfo[i][MissionTime]);
			InfoMSG(i, time, 2);

			new lights, doors, panels, tires;

			GetVehicleDamageStatus(PlayerInfo[i][MissionTarget][0], panels, doors, lights, tires);
			if (PlayerInfo[i][MissionTime] <= 0)
			{
			    PlayerInfo[i][MissionReward] = CJ_MissionReward(PlayerInfo[i][MissionTarget][0]); // temp reward
			    UpdateVehicleDamageStatus(PlayerInfo[i][MissionTarget][0], 53674035, 33686020, 5, 15);
			    PlayerInfo[i][InMission] = CARJACKER_DROPOFF;
				PlayerInfo[i][MissionTime] = 0;

				new idx = PlayerInfo[i][MissionTarget][1],
					Float:persent = float(chopshop_data[idx][chopshop_procent])*float(PlayerInfo[i][MissionReward])/100.0;

				PlayerInfo[i][MissionReward] -= floatround(persent);

				chopshop_data[idx][chopshop_money] += floatround(persent);
				chopshop_data[idx][chopshop_vehs]++;

				SQL_SetInteger("chopshop", "money", chopshop_data[idx][chopshop_money], chopshop_data[idx][chopshop_id]);
				SQL_SetInteger("chopshop", "vehicles", chopshop_data[idx][chopshop_vehs], chopshop_data[idx][chopshop_id]);

			    InfoMSG(i, "SIMDI ~w~ARACTAN KURTULUN.~n~LUTFEN DIKKAT EDIN VE UZAK BIR YERDE ~y~GIZLENIN~w~, ARDINDAN ~y~/aracibirak ~w~KOMUTUNU KULLANIN ~n~~y~/gorevibitir ~w~- YAZARAK GOREVI DURDURUN, ~r~PARA ALMAZSINIZ~n~[[ARACI YOK EDERSENIZ CEZALANDIRILIRSINIZ]]", 15);

				new engine,alarm,bonnet,boot,objective;
				GetVehicleParamsEx(GetPlayerVehicleID(i), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(i), VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);

				SendHelpMessage(i, "Araç parçalamasý bitti, arabadan kurtulmak için /aracibirak komutunu kullanýn. Görevi iptal etmek için: /gorevibitir");
			}
		}

		if(PlayerInfo[i][pKelepceli] == 1)
		{
			if (GetPlayerSpecialAction(i) != SPECIAL_ACTION_CUFFED) {
				SetPlayerAttachedObject(i, ATTACH_HANDS, 19418,6,0.003999,0.028000,-0.018000,-12.900005,0.000000,-65.100006,0.878000,1.890999,1.652001);
				SetPlayerSpecialAction(i, SPECIAL_ACTION_CUFFED);
				return 1;
			}
			return 1;
		}


	}
	return 1;
}
Dialog:ChangeWalk(playerid, response, listitem, inputtext[])
{
	if (!response) return ShowSettings(playerid);

	new str[5];
	format(str, sizeof(str), "1 %i", listitem);
	pc_cmd_stildegistir(playerid, str);
	ShowSettings(playerid);
	return 1;
}

Dialog:ChangeTalk(playerid, response, listitem, inputtext[])
{
	if (!response) return ShowSettings(playerid);

	new str[5];
	format(str, sizeof(str), "2 %i", listitem);
	pc_cmd_stildegistir(playerid, str);
	ShowSettings(playerid);
	return 1;
}

Dialog:ChangeFightstyle(playerid, response, listitem, inputtext[])
{
	if (!response) return ShowSettings(playerid);
	if (listitem == 3) return ShowSettings(playerid);

	new str[5];
	format(str, sizeof(str), "3 %i", listitem+1);
	pc_cmd_stildegistir(playerid, str);
	ShowSettings(playerid);
	return 1;
}

/*Dialog:ChangeHud(playerid, response, listitem, inputtext[])
{
	if (!response) return ShowSettings(playerid);

	new str[5];
	format(str, sizeof(str), "4 %i", listitem+1);
	pc_cmd_stildegistir(playerid, str);
	ShowSettings(playerid);

	HideHudTextDraw(playerid);
	return 1;
}*/

Dialog:MainSettings(playerid, response, listitem, inputtext[])
{
	if (!response)					return pc_cmd_mm(playerid, "");
	if (!IsPlayerLogged(playerid))	return 1;

	switch(listitem)
	{
	    case 0: Dialog_Show(playerid, ChangeWalk, DIALOG_STYLE_LIST, "{FFFFFF}Yürüme Stili", "Kapalý\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11", "Seç", "Geri Dön");
		case 1: Dialog_Show(playerid, ChangeTalk, DIALOG_STYLE_LIST, "{FFFFFF}Konuþma Tarzý", "Kapalý\n1\n2\n3\n4\n5\n6\n7\n8\n9", "Seç", "Geri Dön");
		case 2: Dialog_Show(playerid, ChangeFightstyle, DIALOG_STYLE_LIST, "{FFFFFF}Dövüþ Tarzý", "Varsayýlan\nBoxing\nKungfu\n-\nGrabkick", "Seç", "Geri Dön");
		case 3: pc_cmd_tog(playerid, "ooc");
		case 4: pc_cmd_tog(playerid, "isim");
		case 5: pc_cmd_tog(playerid, "reklamlar");
		case 6: pc_cmd_tog(playerid, "giriscikis");
		case 7: pc_cmd_tog(playerid, "hukumet");
		case 8: pc_cmd_tog(playerid, "pm");
		case 9: pc_cmd_tog(playerid, "haberler");
		case 10: pc_cmd_tog(playerid, "afkbilgi");
		case 11: pc_cmd_tog(playerid, "hud");
		case 12: pc_cmd_tog(playerid, "mhud");
		case 13: pc_cmd_tog(playerid, "birliksohbet");
		case 14: pc_cmd_tog(playerid, "canbar");
		case 15: pc_cmd_tog(playerid, "dorenk");
		case 16: pc_cmd_tog(playerid, "giris");
		case 17: {
			 if (PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SendErrorMessage(playerid, "Bu bölüme eriþemezsin.");
			 new string[188], text[144];
			switch(PlayerInfo[playerid][pSettings] & togAdmCmds)//17
			{
				case 0: text = "Admin Uyarýlarý\t[{90EE90}Aktif{FFFFFF}]\n";
				default: text = "Admin Uyarýlarý\t[{FF6347}Deaktif{FFFFFF}]\n";
			}
			strcat(string, text);
			switch(PlayerInfo[playerid][pSettings] & togTester)//11
			{
				case 0: text = "Tester Chat\t[{90EE90}Aktif{FFFFFF}]\n";
				default: text = "Tester Chat\t[{FF6347}Deaktif{FFFFFF}]\n";
			}
			strcat(string, text);
			switch(PlayerInfo[playerid][pSettings] & togAdmChat)//10
			{
				case 0: text = "Admin Chat\t[{90EE90}Aktif{FFFFFF}]\n";
				default: text = "Admin Chat\t[{FF6347}Deaktif{FFFFFF}]\n";
			}
			strcat(string, text);
			Dialog_Show(playerid, AdminSettings, DIALOG_STYLE_TABLIST, "{A9C4E4}Admin Ayarlarý", string, "Seç", "Kapat");
		}
		case 18:
		{
	        new string[188];
	        format(string, sizeof(string), "Seçenek\tAçýklama\n");
	        format(string, sizeof(string), "%s{A9C4E4}Görünebilecek Maksimum Obje Sayýsý\tharita üzerinde renderlanacak obje sayýsý\n", string);
	        format(string, sizeof(string), "%s{A9C4E4}Model Çizim Uzaklýðý\trender için gereken uzaklýk\n", string);

	        Dialog_Show(playerid, DIALOG_OBJECT_MENU, DIALOG_STYLE_TABLIST_HEADERS, "{A9C4E4}Obje Ayarlarý", string, "Seç", "Kapat");
		}
		case 19: pc_cmd_sifredegistir(playerid, "");
	}

	if (listitem < 0 && listitem > 19)  ShowSettings(playerid);

	return 1;
}

Dialog:AdminSettings(playerid, response, listitem, inputtext[])
{
	if(!response)
		return pc_cmd_ayarlar(playerid, "");

	switch(listitem)
	{
		case 0: pc_cmd_tog(playerid, "adminuyari");
		case 1: pc_cmd_tog(playerid, "helperchat");
		case 2: pc_cmd_tog(playerid, "adminchat");
	}
	return 1;
}

Dialog:DIALOG_OBJECT_MENU(playerid, response, listitem, inputtext[])
{
	if(!response)
		return pc_cmd_ayarlar(playerid, "");

	switch(listitem)
	{
		case 0:
		{
	        new string[350];
	        format(string, sizeof(string), "Seçenek\tAçýklama\n");
	        format(string, sizeof(string), "%s{A9C4E4}Varsayýlan (1000)\tvarsayýlan görünebilecek obje sayýsý\n", string);
			format(string, sizeof(string), "%s{A9C4E4}Orta (1250)\torta kalite iþlemciler için\n", string);
			format(string, sizeof(string), "%s{A9C4E4}Yüksek (1500)\tyüksek kaliteli görüntü için\n", string);
			format(string, sizeof(string), "%s{A9C4E4}Ultra (2000)\tultra kaliteli görüntü için (FPS düþüþü yaþanabilir)\n", string);

			SendServerMessage(playerid, "Belirtilen ayarlar kayýt edilmez, anlýk olarak oyununuza entegre edilir.");

	        Dialog_Show(playerid, DIALOG_OBJECT_MAXVISIBLE, DIALOG_STYLE_TABLIST_HEADERS, "{A9C4E4}Obje Ayarlarý", string, "Seç", "Kapat");
		}
		case 1:
		{
	        new string[350];
	        format(string, sizeof(string), "Seçenek\tAçýklama\n");
	        format(string, sizeof(string), "%s{A9C4E4}Varsayýlan (1.0)\tvarsayýlan render uzaklýðý\n", string);
	        format(string, sizeof(string), "%s{A9C4E4}Orta (2.0)\torta kalite iþlemciler için\n", string);
			format(string, sizeof(string), "%s{A9C4E4}Yüksek (5.0)\tyüksek kalite iþlemciler için\n", string);
			format(string, sizeof(string), "%s{A9C4E4}Ultra (7.0)\tultra kaliteli görüntü için\n", string);
			format(string, sizeof(string), "%s{A9C4E4}Extreme (10.0)\tekstrem görüntü için (FPS düþüþü yaþanabilir)\n", string);

			SendServerMessage(playerid, "Belirtilen ayarlar kayýt edilmez, anlýk olarak oyununuza entegre edilir.");

	        Dialog_Show(playerid, DIALOG_OBJECT_STREAM, DIALOG_STYLE_TABLIST_HEADERS, "{A9C4E4}Obje Ayarlarý", string, "Seç", "Kapat");
		}
	}

	return 1;
}

Dialog:DIALOG_OBJECT_STREAM(playerid, response, listitem, inputtext[])
{
	if(!response)
		return pc_cmd_ayarlar(playerid, "");

	new Float:maxf;

	switch(listitem)
	{
		case 0: maxf = 1.0;
		case 1: maxf = 2.0;
		case 2: maxf = 5.0;
		case 3: maxf = 7.0;
		case 4: maxf = 10.0;
	}

    Streamer_SetRadiusMultiplier(STREAMER_TYPE_OBJECT, maxf, playerid);

	SendServerMessage(playerid, "Obje render uzaklýðýnýz %f olarak deðiþtirilmiþtir.", maxf);
	SendServerMessage(playerid, "Bu deðer FPS düþüþü yaþatýyorsa varsayýlan deðere geçiniz.");

	return 1;
}

Dialog:DIALOG_OBJECT_MAXVISIBLE(playerid, response, listitem, inputtext[])
{
	if(!response)
		return pc_cmd_ayarlar(playerid, "");

	new maxx;

	switch(listitem)
	{
		case 0: maxx = 1000;
		case 1: maxx = 1250;
		case 2: maxx = 1500;
		case 3: maxx = 2000;
	}

    Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, maxx, playerid);

	SendServerMessage(playerid, "Maksimum obje görünürlük deðeriniz %d olarak deðiþtirilmiþtir.", maxx);
	SendServerMessage(playerid, "Bu deðer FPS düþüþü yaþatýyorsa varsayýlan deðere geçiniz.");

	return 1;
}

CMD:sifredegistir(playerid, params[])
{
	Dialog_Show(playerid, ChangePass, DIALOG_STYLE_PASSWORD, "Gizli bilgileri girme", "Deðiþtirmek için mevcut þifreyi girin:", ">>>", "Ýptal");
	return 1;
}

alias:mm("menu");
CMD:mm(playerid, params[])
{
	Dialog_Show(playerid, MainMenu, DIALOG_STYLE_LIST, "{FFFFFF}Menu", "1. Envanter\n\
	2. Karakter Ýstatistikleri\n\
	3. Oyuncu þikayet edin {ffc46a} (/rapor) {FFFFFF}\n\
	4. Yönetime soru sor {ffc46a} (/soru) {FFFFFF}\n\
	5. Sunucu komutlarýyla ilgili yardým\n\
	6. Ayarlar", "Seç", "Ýptal");
	return 1;
}

CMD:ayarlar(playerid, params[])
{
	ShowSettings(playerid);
	return 1;
}

CMD:ssmod(playerid, params[])
{
    switch(GetPVarInt(playerid, PVAR_DARKSCREEN_ISACTIVE))
    {
        case false:
        {
            TextDrawShowForPlayer(playerid, ServerTextdraws[std_DarkScreen]);
            SetPVarInt(playerid, PVAR_DARKSCREEN_ISACTIVE, 1);
        }

        case true:
        {
            TextDrawHideForPlayer(playerid, ServerTextdraws[std_DarkScreen]);
            DeletePVar(playerid, PVAR_DARKSCREEN_ISACTIVE);
        }
    }

    return 1;
}
alias:ssmod("gozkapat", "gozac", "ss");

Dialog:MainMenu(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	switch(listitem)
	{
		case 0: pc_cmd_envanter(playerid, "");
		case 1: pc_cmd_karakter(playerid, "");
		case 2: Dialog_Show(playerid, MakeReport, DIALOG_STYLE_INPUT, "{FFFFFF}Rapor"," {FFFFFF} Oyuncu ID'sini ve þikayetin içeriðini aþaðýda bulunan kutuya giriniz: ","Gönder", "Ýptal");
		case 3: Dialog_Show(playerid, MakeHelp, DIALOG_STYLE_INPUT, "{FFFFFF}Soru"," {FFFFFF} Soru içeriðinizi aþaðýda bulunan kutuya giriniz: "," Sor ", "Ýptal");
		case 4: pc_cmd_yardim(playerid);
		case 5: ShowSettings(playerid);
		//case 6: pc_cmd_donate(playerid, "");
		//case 7: return pc_cmd_mm(playerid, "");
	}
	return 1;
}

Dialog:MakeReport(playerid, response, listitem, inputtext[])
{
	if (!response)			return pc_cmd_mm(playerid, "");
    if (!strlen(inputtext))	return Dialog_Show(playerid, MakeReport, DIALOG_STYLE_INPUT, "{FFFFFF}Rapor", "{FFFFFF}Oyuncu ID'sini ve þikayetin içeriðini aþaðýda bulunan kutuya giriniz:\n{C3C3C3}Form: [Oyuncu ID] [Þikayet]", "Gönder", "Ýptal");

	pc_cmd_rapor(playerid, inputtext);
	return 1;
}

Dialog:CmdServer2(playerid, response, listitem, inputtext[])
{
	if (response) pc_cmd_yardim(playerid);

	return 1;
}

Dialog:MakeHelp(playerid, response, listitem, inputtext[])
{
	if (!response)			return pc_cmd_mm(playerid, "");
	if (!strlen(inputtext))	return Dialog_Show(playerid, MakeHelp, DIALOG_STYLE_INPUT, "{FFFFFF}Soru"," {FFFFFF} Soru içeriðinizi aþaðýda bulunan kutuya giriniz: "," Sor ", "Ýptal");

	pc_cmd_rapor(playerid, "");
	return 1;
}

Dialog:ChangePass(playerid, response, listitem, inputtext[])
{
	if (!response) 																return 1;
	if (isnull(inputtext) || strlen(inputtext) < 2 || strlen(inputtext) > 64)	return Dialog_Show(playerid, ChangePass, DIALOG_STYLE_PASSWORD, "{FFFFFF}Gizli bilgileri girme", "{FFFFFF}Deðiþtirmek için mevcut þifrenizi girin:", ">>>", "Ýptal");

	new query[128 + 129];

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `accounts` WHERE `forum_id`= %i AND `password`= '%e'", PlayerInfo[playerid][pAccID], MD5_Hash(inputtext));
	mysql_tquery(dbHandle, query, "OnPlayerChangePass", "i", playerid);
	return 1;
}

Dialog:ChangePass2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

    if (strlen(inputtext) < 6 || strlen(inputtext) > 32)
    {
        Dialog_Show(playerid, ChangePass2, DIALOG_STYLE_PASSWORD, "{FFFFFF}Yeni Þifre "," {FFFFFF} Yeni þifrenizi giriniz:", "Deðiþtir", "Ýptal");
		return SendErrorMessage(playerid, "Þifreniz en az 6, en fazla 32 karakter olmalýdýr.");
	}

	for(new i = 0; i < strlen(inputtext); i++)
	{
		switch(inputtext[i])
		{
			case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/':
			{
			    Dialog_Show(playerid, ChangePass2, DIALOG_STYLE_PASSWORD, "Yeni Þifre", "Yeni þifrenizi giriniz:", "Deðiþtir", "Ýptal");
				return SendErrorMessage(playerid, "Þifrenin içinde yasaklanmýþ bir simge kullandýnýz.");
			}
			default: continue;
		}
	}

	new query[128 + 129];

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `password`='%e' WHERE `forum_id` = %i", MD5_Hash(inputtext), PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);

	SendSyntaxMessage(playerid, "Þifreniz deðiþtirildi.");
	return 1;
}

Dialog:ChangeFight(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	SendAdmMessage("%s adlý yönetici %s adlý oyuncunun dövüþ tarzýný deðiþtirdi: %s.", GetAccName(playerid), GetNameEx(GetPVarInt(playerid, "ChangeFightTo")), fight_name[listitem]);
	SendErrorMessage(GetPVarInt(playerid, "ChangeFightTo"), "%s adlý yönetici tarafýndan dövüþ tarzýnýz deðiþtirildi: %s", GetAccName(playerid), fight_name[listitem]);
	SetPlayerFightingStyle(GetPVarInt(playerid, "ChangeFightTo"), fight_id[listitem]);
	PlayerInfo[GetPVarInt(playerid, "ChangeFightTo")][pFightStyle] = fight_id[listitem];
	DeletePVar(playerid, "ChangeFightTo");
	return 1;
}

Dialog:SendPM(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new userid = GetPVarInt(playerid, #pm_to), text[128];

	GetPVarString(playerid, #pm_text, text, 128);
	SendPMToPlayer(playerid, userid, text);
	return 1;
}

alias:greet("selamlas");
CMD:greet(playerid, params[])
{
	new userid, type;

	if (sscanf(params,"ud", userid, type))
	{
		SendHelpMessage(playerid, "/selamlas [ID / isim] [Tip]");
		SendSyntaxMessage(playerid, "[1] Öpüþme [2-9] Tokalaþma");
		return 1;
	}

	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (userid == playerid)								return 1;
	if (type > 9 || type < 1)							return SendErrorMessage(playerid, "Tip 1 ile 9 arasýnda olmalýdýr.");
	if (IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(userid)) return SendErrorMessage(playerid, "Aracýn içerisinde bu komut kullanýlamaz.");
	if (!PlayerNearPlayer(2.0, playerid, userid))		return SendNotNearPlayer(playerid);

    pTemp[userid][pGreetPlayer] = playerid;
	pTemp[userid][pGreetType] = type;
    SetPVarInt(userid, #accept_time, gettime() + 30);

	SendSyntaxMessage(playerid, "%s adlý kiþiye istek gönderdiniz.", GetNameWithMask(userid));
	SendSyntaxMessage(userid, "%s adlý kiþi (%s) teklifi gönderdi.", GetNameWithMask(playerid), (type == 1)?("öpüþme"):("tokalaþma"));

	InfoMSG(userid, "~h~~g~Y~w~ - kabul et~n~~h~~r~N~w~ - reddet", 5);
	return 1;
}

forward OnPlayerChangePass(playerid);
public OnPlayerChangePass(playerid)
{
	if (!cache_num_rows())	return Dialog_Show(playerid, ChangePass, DIALOG_STYLE_PASSWORD, "{FFFFFF}Gizli bilgilerin girilmesi "," {FFFFFF} Deðiþtirmek için mevcut þifreyi girin:", ">>>", "Ýptal");

	Dialog_Show(playerid, ChangePass2, DIALOG_STYLE_PASSWORD, "Yeni Þifre", "Yeni þifrenizi giriniz:", "Deðiþtir", "Ýptal");
	return 1;
}

Dialog:BuyClothes(playerid, response, listitem, inputtext[])
{
    new modelid = GetPVarInt(playerid, "clothes_model");

    if (modelid < 1) 	return 1;
	if (GetCash(playerid) < 100)			return SendErrorMessage(playerid, "Yeterli paranýz yok, en az 100$'a ihtiyacýnýz var.");
	if (response)
	{
	PlayerInfo[playerid][pTog][listitem] = PlayerInfo[playerid][pSkin];
    SendSyntaxMessage(playerid, "100$ karþýlýðýnda kýyafet satýn aldýnýz. Tebrikler!");
	SendSyntaxMessage(playerid, "(/kiyafetlerim) komutunu kullanarak dolabýnýzý görüntüleyebilirsiniz.");
	SendSyntaxMessage(playerid, "Komutu kullanmak için binco veya ev içerisinde olup, evinize dolap eklentisi almalýsýnýz..");
    SetPlayerSkinEx(playerid, modelid);
	GiveCash(playerid, -100);
	DeletePVar(playerid, "clothes_model");
	}
	else DeletePVar(playerid, "clothes_model");
	return 1;
}

Dialog:DIALOG_KIYAFETDOLAP(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	new modelid = strval(inputtext);
	if(modelid == 0) return 1;
	SetPlayerSkinEx(playerid, modelid);
	PlayerInfo[playerid][pSkin] = modelid;
	SendServerMessage(playerid, "Özel modelinizi giydiniz.");
	return 1;
}

Dialog:EditClothes(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

    if (PlayerInfo[playerid][pTog][listitem] == 0)
    {
        PlayerInfo[playerid][pTog][listitem] = PlayerInfo[playerid][pSkin];
        pc_cmd_soyun(playerid, "");
        PlayerInfo[playerid][pSkin] = 0;
        return 1;
    }
    new title[32];

    format(title, 32,"{FFFFFF}Kýyafet %i.", PlayerInfo[playerid][pTog][listitem]);
    Dialog_Show(playerid, EditClothes2, DIALOG_STYLE_LIST, title, "- Kullan\n- Sil", "Seç", "Ýptal");
	SetPVarInt(playerid, "select_tog", listitem);
	return 1;
}

Dialog:EditClothes2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new slot = GetPVarInt(playerid, "select_tog");

    if (PlayerInfo[playerid][pTog][slot] == 0) return 1;

	if (!listitem)
	{
	    new skin = PlayerInfo[playerid][pSkin];
    	SetPlayerSkinEx(playerid,PlayerInfo[playerid][pTog][slot]);
    	PlayerInfo[playerid][pTog][slot] = skin;
    	return 1;
	}

    PlayerInfo[playerid][pTog][slot] = 0;
    return 1;
}

Dialog:MasaVeSandalye(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new Float:pos[4], str[100];
     	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
     	GetPlayerFacingAngle(playerid, pos[3]);
      	pos[0] += (2 * floatsin(-pos[3], degrees));
   		pos[1] += (2 * floatcos(-pos[3], degrees));

	    switch (listitem)
	    {
	        case 0:
	        {
	            PlayerInfo[playerid][pMasa] = true;
	            PlayerInfo[playerid][pMasaObject] = CreateDynamicObject(2571, pos[0], pos[1], pos[2]-1.0, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				format(str, sizeof(str), "{bcbcbc}(( Masa(#%d) ))\n{afafaf}« Yerleþtiren: %s »",PlayerInfo[playerid][pMasa], GetNameEx(playerid));
				PlayerInfo[playerid][pMasaText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2]-0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	        }
    	    case 1:
	        {
	            PlayerInfo[playerid][pMasa] = true;
	            PlayerInfo[playerid][pMasaObject] = CreateDynamicObject(1432, pos[0], pos[1], pos[2]-1.0, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				format(str, sizeof(str), "{bcbcbc}(( Masa(#%d) ))\n{afafaf}« Yerleþtiren: %s »",PlayerInfo[playerid][pMasa], GetNameEx(playerid));
				PlayerInfo[playerid][pMasaText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2]-0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	        }
	        case 2:
	        {
	            PlayerInfo[playerid][pMasa] = true;
	            PlayerInfo[playerid][pMasaObject] = CreateDynamicObject(1825, pos[0], pos[1], pos[2]-1.0, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				format(str, sizeof(str), "{bcbcbc}(( Masa(#%d) ))\n{afafaf}« Yerleþtiren: %s »",PlayerInfo[playerid][pMasa], GetNameEx(playerid));
				PlayerInfo[playerid][pMasaText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2]-0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	        }
	    }
	}
	return 1;
}

Dialog:Standlar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new Float:pos[4], str[100];
     	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
     	GetPlayerFacingAngle(playerid, pos[3]);
      	pos[0] += (2 * floatsin(-pos[3], degrees));
   		pos[1] += (2 * floatcos(-pos[3], degrees));
	    switch (listitem)
	    {
	        case 0:
	        {
	            PlayerInfo[playerid][pStand] = true;
	            PlayerInfo[playerid][pStandObject] = CreateDynamicObject(1341, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				format(str, sizeof(str), "{bcbcbc}(( Stand (#%d) ))\n{afafaf}« Yerleþtiren: %s »",PlayerInfo[playerid][pStand], GetNameEx(playerid));
				PlayerInfo[playerid][pStandText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2]+1.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				SendSyntaxMessage(playerid, "Stand yerleþtirdiniz, (/stand) komutunu kullanarak kaldýrabilirsin.");
	        }
	        case 1:
	        {
	            PlayerInfo[playerid][pStand] = true;
	            PlayerInfo[playerid][pStandObject] = CreateDynamicObject(1342, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				format(str, sizeof(str), "{bcbcbc}(( Stand (#%d) ))\n{afafaf}« Yerleþtiren: %s »",PlayerInfo[playerid][pStand], GetNameEx(playerid));
				PlayerInfo[playerid][pStandText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2]+1.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				SendSyntaxMessage(playerid, "Stand yerleþtirdiniz, (/stand) komutunu kullanarak kaldýrabilirsin.");
	        }
	        case 2:
	        {
	            PlayerInfo[playerid][pStand] = true;
	            PlayerInfo[playerid][pStandObject] = CreateDynamicObject(1340, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				format(str, sizeof(str), "{bcbcbc}(( Stand (#%d) ))\n{afafaf}« Yerleþtiren: %s »",PlayerInfo[playerid][pStand], GetNameEx(playerid));
				PlayerInfo[playerid][pStandText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2]+1.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				SendSyntaxMessage(playerid, "Stand yerleþtirdiniz, (/stand) komutunu kullanarak kaldýrabilirsin.");
	        }
	    }
	}
	return 1;
}

Dialog:BugKurtar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				new houseid = GetNearInsideHouse(playerid, 500.0);
				new buildingid = GetNearInsideBiz(playerid, 500.0);
				new Float:pXa, Float:pYa, Float:pZa;
				GetPlayerPos(playerid, pXa, pYa, pZa);

				if(GetNearInsideHouse(playerid, 500.0) != -1 && houseid != -1 && !IsPlayerInRangeOfPoint(playerid, 100.0, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[houseid][hExitVW] && GetPlayerInterior(playerid) == HouseInfo[houseid][hExitInt])
				{
					if(PlayerInfo[playerid][pJailTime] > 1) return SendErrorMessage(playerid, "Bu komutu kullanamazsýn.");
					SetPlayerPosEx(playerid, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]);
					SetPlayerInterior(playerid, HouseInfo[houseid][hExitInt]);
					SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hExitVW]);
					Log_Kaydet("loglar/bugkurtar.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d), evdeyken /bugkurtar komutunu kullandi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID]));
				}
				else if(GetNearInsideBiz(playerid, 500.0) != -1 && buildingid != -1 && !IsPlayerInRangeOfPoint(playerid, 100.0, BizInfo[buildingid][bizExitX], BizInfo[buildingid][bizExitY], BizInfo[buildingid][bizExitZ]) && GetPlayerVirtualWorld(playerid) == BizInfo[buildingid][bizExitVW] && GetPlayerInterior(playerid) == BizInfo[buildingid][bizExitInt])
				{
					if(PlayerInfo[playerid][pJailTime] > 1) return SendErrorMessage(playerid, "Bu komutu kullanamazsýn.");
					SetPlayerPosEx(playerid, BizInfo[buildingid][bizExitX], BizInfo[buildingid][bizExitY], BizInfo[buildingid][bizExitZ]);
					SetPlayerInterior(playerid, BizInfo[buildingid][bizExitInt]);
					SetPlayerVirtualWorld(playerid, BizInfo[buildingid][bizExitVW]);
					Log_Kaydet("loglar/bugkurtar.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d), isletmedeyken /bugkurtar komutunu kullandi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID]));
				}
				else if(GetPlayerVirtualWorld(playerid) != 0 && GetPlayerInterior(playerid) == 0 && pZa > 200)
				{
					if(PlayerInfo[playerid][pJailTime] > 1) return SendErrorMessage(playerid, "Bu komutu kullanamazsýn.");
					SendClientMessageEx(playerid, COLOUR_TOMATO, "VW deðeriniz sýfýrlandý.");
					SetPlayerVirtualWorld(playerid, 0);
					Log_Kaydet("loglar/bugkurtar.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d), VW bugundayken /bugkurtar komutunu kullandi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID]));
				}
				else if(GetPlayerVirtualWorld(playerid) != 0 && GetPlayerInterior(playerid) == 0 && pZa < 200)
				{
					if(PlayerInfo[playerid][pJailTime] > 1) return SendErrorMessage(playerid, "Bu komutu kullanamazsýn.");
					SendClientMessageEx(playerid, COLOUR_TOMATO, "VW deðerini sýfýrlamak için Los Santos'a ýþýnlandýn.");
					SetPlayerPosEx(playerid, 785.9385,-868.3475,35.3712);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					Log_Kaydet("loglar/bugkurtar.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d), VW bugundayken /bugkurtar komutunu kullandi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID]));
				}
				else if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) != 0 && pZa < 200)
				{
					if(PlayerInfo[playerid][pJailTime] > 1) return SendErrorMessage(playerid, "Bu komutu kullanamazsýn.");
					SendClientMessageEx(playerid, COLOUR_TOMATO, "Interior deðerini sýfýrlamak için Los Santos'a ýþýnlandýn.");
					SetPlayerPosEx(playerid, 785.9385,-868.3475,35.3712);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					Log_Kaydet("loglar/bugkurtar.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d), INT bugundayken /bugkurtar komutunu kullandi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID]));
				}
				else if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) != 0 && pZa > 200.0)
				{
					if(PlayerInfo[playerid][pJailTime] > 1) return SendErrorMessage(playerid, "Bu komutu kullanamazsýn.");
					SendClientMessageEx(playerid, COLOUR_TOMATO, "Interior deðeriniz sýfýrlandý.");
					SetPlayerInterior(playerid, 0);
					Log_Kaydet("loglar/bugkurtar.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d), INT bugundayken /bugkurtar komutunu kullandi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID]));
				}
				else if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && pZa < 20.0)
				{
					if(PlayerInfo[playerid][pJailTime] > 1) return SendErrorMessage(playerid, "Bu komutu kullanamazsýn.");
					SendClientMessageEx(playerid, COLOUR_TOMATO, "Bulunduðun bug durumundan kurtuldun.");
					SetPlayerPosEx(playerid, 1538.6439,-1682.7789,13.5469);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					Log_Kaydet("genelLog.txt", sprintf("[/bugkurtar] %s (C_ID: %d | A_ID: %d), disaridayken /bugkurtar komutunu kullandi. (vw/int sifirla, lc gonder) [Tarih: %s]", GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetFullDate()));
				}
				else return SendErrorMessage(playerid, "Bu komutu þu anda kullanamazsýn, daha sonra tekrar deneyin.");

				if(PlayerInfo[playerid][pInjured] > 0)
				{
	                PlayerInfo[playerid][pHealth] = 100.0;
	                ResetDamages(playerid);
	                StopPlayerAnims(playerid);
	                UnFreezePlayer(playerid);
	                SetPlayerSkill(playerid);

					Log_Kaydet("genelLog.txt", sprintf("[/bugkurtar] %s (C_ID: %d | A_ID: %d), kullandigi /bugkurtar komutuyla birlikte canlandirildi. [Tarih: %s]", GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetFullDate()));
				}
			}
			case 1:
			{
				if(PlayerInfo[playerid][pJailTime] > 1 || PlayerInfo[playerid][pInjured] != 0)
					return SendErrorMessage(playerid, "Bu fonksiyondan þu anda yararlanamazsýn.");

				if(GetPVarInt(playerid, "BugKurtar") == 1)
					return SendErrorMessage(playerid, "Sonraki paydaye kadar ya da relog atana kadar bu komutu tekrar kullanamazsýn.");

				if(PlayerInfo[playerid][pInjured] > 0)
					return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");

				new Float:oXa, Float:oYa, Float:oZa;
				GetPlayerPos(playerid, oXa, oYa, oZa);
				SetPlayerPosEx(playerid, oXa, oYa, oZa + 2.0);
				SetPVarInt(playerid, "BugKurtar", 1);
				Log_Kaydet("genelLog.txt", sprintf("[/bugkurtar] %s (C_ID: %d | A_ID: %d), /bugkurtar > slap ozelligini kullandi. [Tarih: %s]", GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetFullDate()));

			}
			case 2:
			{
				if(PlayerInfo[playerid][pJailTime] > 1 || PlayerInfo[playerid][pInjured] != 0)
					return SendErrorMessage(playerid, "Bu fonksiyondan þu anda yararlanamazsýn.");

				if(GetPVarInt(playerid, "BugKurtar") == 1)
					return SendErrorMessage(playerid, "Sonraki paydaye kadar ya da relog atana kadar bu komutu tekrar kullanamazsýn.");

				if(PlayerInfo[playerid][pInjured] > 0)
					return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");

				if(GetPlayerVirtualWorld(playerid) == 0)
					return SendErrorMessage(playerid, "Bu komutu kullanamazsýn.");

				new Float:oXa, Float:oYa, Float:oZa;
				GetPlayerPos(playerid, oXa, oYa, oZa);
				SetPlayerPosEx(playerid, oXa, oYa, oZa - 2.0);
				SetPVarInt(playerid, "BugKurtar", 1);
				Log_Kaydet("genelLog.txt", sprintf("[/bugkurtar] %s (C_ID: %d | A_ID: %d), /bugkurtar > slap ozelligini kullandi. [Tarih: %s]", GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetFullDate()));
			}
			case 3:
			{
                Streamer_Update(playerid);
				SendServerMessage(playerid, "Çevrenizde bulunan objeler güncellenip, yenilendi.");
			}
		}
	}
	return 1;
}
alias:konum("lokasyon", "sokak");
CMD:konum(playerid, params[])
{
	new location[MAX_ZONE_NAME],
		Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
	GetZone(x, y, location, MAX_ZONE_NAME);

	if (IsPlayerInAnyDynamicArea(playerid)) {
		new areas[5], street_area[2], j = GetPlayerNumberDynamicAreas(playerid);
		GetPlayerDynamicAreas(playerid, areas, sizeof(areas));

		if (GetStreet(areas, j, street_area)) {
			if (street_area[1] == -1)
				return SendSpecialMessage(playerid, "%s, %s.", location, street_names[street_area[0]]);
			else
				return SendSpecialMessage(playerid, "%s, %s %s.", location, street_names[street_area[0]],street_names[street_area[1]]);
		}
	}

	SendSpecialMessage(playerid, "%s.", location);
	return 1;
}

alias:evgps("adres", "adress");
CMD:evgps(playerid, params[])
{
	new houseid;
	if (sscanf(params,"d", houseid)) 			return SendHelpMessage(playerid, "/evgps [Ev ID]");
	if (houseid < 0 || houseid >= MAX_HOUSES)	return SendErrorMessage(playerid,"Geçersiz Ev ID.");
	if (!HouseInfo[houseid][hID])				return SendErrorMessage(playerid, "Böyle bir adres bulunamadý.");

	if (HouseInfo[houseid][hApart])	Waypoint_Set(playerid, ApartInfo[HouseInfo[houseid][hApart]][aPosX], ApartInfo[HouseInfo[houseid][hApart]][aPosY], ApartInfo[HouseInfo[houseid][hApart]][aPosZ]);
	else 							Waypoint_Set(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);

	SendSyntaxMessage(playerid, "Ev (%s) GPS'te iþaretlendi. (/cpsifirla)", (!HouseInfo[houseid][hApart])?(GetHouseZone(houseid)):(GetApartmentZone(HouseInfo[houseid][hApart])));
	return 1;
}

alias:isyerigps("igps");
CMD:isyerigps(playerid, params[])
{
	new bizid;

	if (sscanf(params, "d", bizid))				return SendHelpMessage(playerid, "/igps [iþyeri ID]");
	if(bizid < 0 || bizid >= MAX_BIZ)			return SendErrorMessage(playerid, "Geçersiz iþyeri/iþyeri ID'si.");
	if(!BizInfo[bizid][bizID])					return SendErrorMessage(playerid, "Böyle bir iþletme/iþyeri bulunamadý.");

	Waypoint_Set(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	SendSyntaxMessage(playerid, "Belirtilen iþletme/iþyeri GPS'te iþaretlendi. (/cpsifirla)");

	return 1;
}

CMD:surukle(playerid, params[])
{
	new
	    userid;
    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
		return SendErrorMessage(playerid, "Þu anda bu özelliði kullanamazsýnýz.");

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/surukle [ID / isim]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirtilen kiþi oyunda deðil.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Kendi kendinizi surukleyemezsiniz.");

	if (!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if (PlayerInfo[userid][pInjured] == 0 && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !PlayerInfo[userid][pKelepceli])
    	return SendErrorMessage(playerid, "Bu kiþi etkisiz halde deðil.");

	if (PlayerInfo[userid][pDragged])
	{
	    PlayerInfo[userid][pDragged] = 0;
	    PlayerInfo[userid][pDraggedBy] = INVALID_PLAYER_ID;

	    KillTimer(PlayerInfo[userid][pDragTimer]);
	}
	else
	{
	    PlayerInfo[userid][pDragged] = 1;
	    PlayerInfo[userid][pDraggedBy] = playerid;

	    PlayerInfo[userid][pDragTimer] = SetTimerEx("DragUpdate", 10, true, "dd", playerid, userid);
	}
	return 1;
}

CMD:paraver(playerid, params[])
{
    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
		return SendErrorMessage(playerid, "Þu anda bu özelliði kullanamazsýnýz.");

	if (PlayerInfo[playerid][pProbation])
		return SendErrorMessage(playerid, "Probation sürecindeyken bu iþlemi yapamazsýnýz.");

	new userid, amount;

	if (sscanf(params,"ud", userid, amount))				return SendHelpMessage(playerid, "/paraver [ID / isim] [tutar]");
	if (userid == playerid)									return 1;
	if (PlayerInfo[playerid][pHours] < 2)					return SendErrorMessage(playerid, "Para gönderimi yapabilmek için sunucuda 2 saat oynamalýsýnýz.");
	if (GetPVarInt(playerid, #just_paid) > gettime())		return SendErrorMessage(playerid, "2 saniye bekleyin.");
	if (!IsPlayerLogged(userid))							return SendNotConnected(playerid);
	if (amount > GetCash(playerid) || amount <= 0)			return SendNotCash(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))			return SendNotNearPlayer(playerid);

	SetPVarInt(playerid, #just_paid, gettime() + 2);

	new money1 = PlayerInfo[playerid][pCash], money2 = PlayerInfo[userid][pCash];

	GiveCash(playerid, -amount);
	GiveCash(userid, amount);
	PlaySound(playerid, 1052);
	PlaySound(userid, 1052);
	SendSyntaxMessage(playerid, "%s [ID: %i] adlý kiþiye $%i para verdiniz.", GetNameWithMask(userid), userid, amount);
	SendSyntaxMessage(userid, "%s [ID: %i] adlý kiþi size $%i para verdi.", GetNameWithMask(playerid), playerid, amount);
	SendAdmMessage("%s (ID: %i) adlý kiþi %s (ID: %i) adlý kiþiye $%i elden para verdi.", GetNameEx(playerid), playerid, GetNameEx(userid), userid, amount);

	new mes[256];
	format(mes, 128, ", %s adlý kiþiye bir miktar para verir.", GetNameWithMask(userid));
	pc_cmd_me(playerid, mes);

    format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | Money(ONCEKI): %i | Money(SONRAKI): %i] elden para verdi %s [MYSQL: %i | IP: %s | Money(ONCEKI): %i | Money(SONRAKI): %i] -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money1, GetCash(playerid), GetName(userid), PlayerInfo[userid][pID], q_GetPlayerIP(userid), money2, GetCash(userid), amount);
    insert_log(mes, MONEY_LOG, 1, playerid);
	return 1;
}
alias:lisansgoster("kimlikgoster", "kimlik", "ehliyetgoster");
CMD:lisansgoster(playerid, params[])
{
	new userid;
	if (sscanf(params,"u", userid))	return SendHelpMessage(playerid, "/kimlikgoster [ID / isim]");
	if (userid == playerid)
	{
		pc_cmd_server_ame(playerid, "kimlik kartýna bakar.");
		ShowLicenses(playerid, playerid);
		return 1;
	}

	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (!PlayerNearPlayer(8.0, playerid, userid))	return SendNotNearPlayer(playerid);

	new mes[128];
	format(mes, sizeof(mes), "%s kimlik kartýný gösterir.", GetNameWithMask(playerid));
	SendServerMessage(playerid, "%s adlý kiþiye lisansýnýzý gösterdiniz.", GetNameEx(userid));
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);
	ShowLicenses(playerid, userid);
	return 1;
}
alias:avukatlisansgoster("algoster", "avukatlisans");
CMD:avukatlisansgoster(playerid, params[])
{
	new userid;
	if (sscanf(params,"u", userid))	return SendHelpMessage(playerid, "/avukatlisansgoster [ID / isim]");
	if (userid == playerid)
	{
		pc_cmd_server_ame(playerid, "avukat lisansýna kartýna bakar.");
		ShowLawyerLicenses(playerid, playerid);
		return 1;
	}

	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (!PlayerNearPlayer(8.0, playerid, userid))	return SendNotNearPlayer(playerid);

	new mes[128];
	format(mes, sizeof(mes), "%s avukat lisansýný gösterir.", GetNameWithMask(userid));
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);
	ShowLawyerLicenses(playerid, userid);
	return 1;
}

CMD:id(playerid, params[])
{
	if (isnull(params))		return SendHelpMessage(playerid, "/id [ID / isim]");
	if (isNumeric(params))
	{
	    new userid = strval(params);
	    if (!IsPlayerLogged(userid))	return SendErrorMessage(playerid, "Herhangi bir sonuç bulunamadý.");

	    SendClientMessageEx(playerid, COLOUR_TURBO, "%s (ID: %d, Seviye: %d)", GetNameEx(userid), userid, PlayerInfo[userid][pLevel]);
	    return 1;
	}

	new count;
	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || strfind(GetName(i), params, true) == -1) continue;

        SendClientMessageEx(playerid, COLOUR_TURBO, "%s (ID: %d, Seviye: %d)", GetNameEx(i), i, PlayerInfo[i][pLevel]);
        count = 1;
	}

	if (!count) SendErrorMessage(playerid, "Herhangi bir sonuç bulunamadý.");
	return 1;
}

alias:admins("yoneticiler", "adminler", "yetkililer");
CMD:admins(playerid)
{
	if (PlayerInfo[playerid][pProbation])
		return SendErrorMessage(playerid, "Probation sürecindeyken bu iþlemi yapamazsýnýz.");

    new count = 0, str[1000];
    foreach (new i:Player) if (PlayerInfo[i][pAdmin] >= 1 && PlayerInfo[i][pAdminHide] == 0)
    {
		new admin[32], prefix[32];

		if(!PlayerInfo[i][pAdmin]) continue;

		if (PlayerInfo[i][pRdscripter] == 1)                    		admin = "3rd Party Scripter";
        else if (PlayerInfo[i][pAdmin] == DEVELOPER_LEVEL)				admin = "Geliþtirici";
		else if (PlayerInfo[i][pAdmin] == HIGH_ADMIN_LEVEL) 			admin = "Genel Yetkili";
		else if (PlayerInfo[i][pAdmin] == 3)							admin = "Oyun Yetkilisi III";
		else if (PlayerInfo[i][pAdmin] == 2)							admin = "Oyun Yetkilisi II";
		else if (PlayerInfo[i][pRdscripter] == 3)						admin = "Party Scripter";
		else if (PlayerInfo[i][pAdmin] == 1 && !PlayerInfo[i][pMapper])	admin = "Oyun Yetkilisi";
		else if (PlayerInfo[i][pAdmin] == 1337)							admin = "Yönetici";
		else if (PlayerInfo[i][pMapper] == 1)                    		admin = "Mapper";

        count++;
        format(str, sizeof(str), "{f67b5a}%s{f67b5a}%s\t{f67b5a}%s\t%s\n", str, admin, GetAccName(i), (pTemp[i][pAdminDuty] == 1) ? ("{00cc66}Müsait") : ("{ef0202}Meþgul"));

    }
    if (count == 0) return SendErrorMessage(playerid, "Þu anda aktif Staff bulunmuyor.");
    Dialog_Show(playerid, StaffList, DIALOG_STYLE_TABLIST, "STAFF List", str, "Kapat", "");
	return 1;
}

alias:testers("helpers", "supports", "supporters");
CMD:testers(playerid, params[])
{
	SCM(playerid, COLOR_SERVER2, "Aktif Supporterlar");

	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i)) continue;

		if (PlayerInfo[i][pHelper] >= 1) {
			new admin[16];

			//if(!PlayerInfo[i]{pAdmin}) continue;
			if(!PlayerInfo[i][pHelper]) continue;

			new helper[32];

			if (PlayerInfo[i][pHelper] == 1)  helper = "Supporter I";
			else if (PlayerInfo[i][pHelper] == 2)  helper = "Supporter II";
			else if (PlayerInfo[i][pHelper] == 3)  helper = "Supporter III";
			else if (PlayerInfo[i][pHelper] == 4)  helper = "Supporter IV";
			else if (PlayerInfo[i][pHelper] == 5)  helper = "Supporter V";
			//else													format(admin, sizeof(admin), "%i Yetkili", PlayerInfo[i][pAdmin]);
			if (!IsTesterDuty(i))	SendClientMessageEx(playerid, COLOUR_ALTO, "(%s) %s (%s, ID: %i)", helper, GetNameEx(i), GetAccName(i), i);
			else					SendClientMessageEx(playerid, COLOUR_APPLE, "(%s) %s (%s, ID: %i) - Müsait", helper, GetNameEx(i), GetAccName(i), i);
		 }
	}
	return 1;
}

alias:pmengel("pmkapat", "pmengelle");
CMD:pmengel(playerid, params[])
{
	new userid;

	if (sscanf(params,"u", userid))	return SendHelpMessage(playerid, "/pmengel [ID / isim]");
	if (userid == playerid)			return 1;
	if (!IsPlayerLogged(userid)) 	return SendNotConnected(playerid);

    if (people_blocking[playerid][userid] == 1)
    {
		SendSyntaxMessage(playerid, "%s [ID: %i] adlý kiþiyi PM blok listesinden kaldýrdýnýz.", GetNameEx(userid), userid);
		people_blocking[playerid][userid] = 0;
		return 1;
	}

    SendSyntaxMessage(playerid, "PM blok listesine %s [ID: %i] adlý kiþiyi eklediniz.", GetNameEx(userid), userid);
	people_blocking[playerid][userid] = 1;
	return 1;
}

alias:engellistesi("pmengelliste", "listepmengel");
CMD:engellistesi(playerid, params[])
{
	SCM(playerid, COLOR_LIGHTRED, "|______PM ENGEL LÝSTESÝ "ProjectName"______|");
	foreach(new i : Player)
	{
		if (people_blocking[playerid][i] == 0) continue;

		SendClientMessageEx(playerid, COLOR_INFO, "[ID: %i] %s", i, GetNameEx(i));
	}
	return 1;
}

alias:sonarac("lastcar", "oldcar");
CMD:sonarac(playerid, params[])
{
	new targetid = playerid;

	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		sscanf(params, "u", targetid);
	}

	if(!IsPlayerConnected(targetid))
		return SendErrorMessage(playerid, "Karakter çevrimiçi deðil.");

	new lastEnteredVehicleID;

	lastEnteredVehicleID = GetPVarInt(targetid, PVAR_LASTENTEREDVEH_ID);

	if(!IsValidVehicle(lastEnteredVehicleID))
		return SendErrorMessage(playerid, "En son binilen araç bulunamadý.");

	SM1(playerid, "En son %d numaralý araca binildi.", lastEnteredVehicleID);

	return 1;
}

alias:saat("zaman", "tarih");
CMD:saat(playerid, params[])
{
	new hour, minute, mes[128];

	gettime(hour,minute);
	format(mes, sizeof(mes), "~w~%02d:%02d~n~Maas: %02i dakika", hour, minute, 60 - PlayerInfo[playerid][pPayDayTime]);

	if (PlayerInfo[playerid][pMutedTime] > 0)	format(mes, sizeof(mes), "%s~n~~r~Susturma Bitisi: %i", mes, PlayerInfo[playerid][pMutedTime]);

	if (PlayerInfo[playerid][pJailed] == PALOMINO_JAIL) //|| PlayerInfo[playerid][pJailed] == LSPD_JAIL || PlayerInfo[playerid][pJailed] == SASD_JAIL)
	{
		format(mes, sizeof(mes), "~y~Kalan hapis: %i~n~%s", PlayerInfo[playerid][pJailTime], mes);
		GameTextForPlayer(playerid, mes, 5000, 1);
		ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0,1);
		return 1;
	}
	else if (PlayerInfo[playerid][pIsolateTime] != 0)
	{
		format(mes, sizeof(mes), "~y~Kalan izole suresi: %i~n~%s", PlayerInfo[playerid][pIsolateTime], mes);
		GameTextForPlayer(playerid, mes, 5000, 1);
		ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0,1);
		return 1;
	}
	else if (PlayerInfo[playerid][pJailed] == PRISON_JAIL)
	{
		format(mes, sizeof(mes), "~y~Kalan hapis: %i~n~%s", PlayerInfo[playerid][pJailTime], mes);
		GameTextForPlayer(playerid, mes, 5000, 1);
		ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0,1);
		return 1;
	}
	else
	{
		GameTextForPlayer(playerid, mes, 5000, 1);
		pc_cmd_server_ame(playerid, "saatine bakar.");

		if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)	ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0,1);
	}
	return 1;
}

CMD:yazitura(playerid, params[])
{
	SendNearbyMessage(Range_Normal, playerid, COLOUR_VISTABLUE, "> %s bozuk parayý havaya atar. (( %s ))", GetNameWithMask(playerid), (random(2) == 0)?("Yazý"):("Tura"));
	return 1;
}
CMD:dene(playerid)
{
	new const status[2][18] = {EMBED_PASTELGREEN "Baþarýlý", EMBED_TOMATO "Baþarýsýz"};

	SendNearbyMessage(Range_Normal, playerid, COLOUR_VISTABLUE, sprintf("> %s " EMBED_VISTABLUE "oldu. (( %s ))", status[random(sizeof(status))], GetNameWithMask(playerid)));
	return 1;
}
CMD:zar(playerid, params[])
{
	new opt[12];

	if(sscanf(params, "s[12]", opt)) return SendHelpMessage(playerid, "/zar [tek/cift]");

	if(!strcmp(opt, "tek", true)){
		new playerdice;

		playerdice = random(6)+1;

		SendNearbyMessage(Range_Normal, playerid, COLOUR_VISTABLUE, "> %s zar atar (( %d ))", GetNameWithMask(playerid), playerdice);
	} else if(!strcmp(opt, "çift", true) || !strcmp(opt, "cift", true)){
		new firstDice, secondDice;

		firstDice = random(6)+1;
		secondDice = random(6)+1;

		SendNearbyMessage(Range_Normal, playerid, COLOUR_VISTABLUE, "> %s zar atar (( %d, %d ))", GetNameWithMask(playerid), firstDice, secondDice);
	}
	/*if (!IsPlayerHasItem(playerid, INV_DICE))	return SendErrorMessage(playerid, "Zarýn bulunmuyor.");

	SendNearbyMessage(Range_Normal, playerid, COLOUR_VISTABLUE, "> %s zar atar (( %i )).", GetNameWithMask(playerid), random(6)+1);*/
	return 1;
}
CMD:azar(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return 0;

	new opt;
	if(sscanf(params, "d", opt)) return SendHelpMessage(playerid, "/azar [sayý]");
	if(opt < 1 || opt > 6) return SendErrorMessage(playerid, "Girilen sayý deðer 1 ile 6 arasýnda olmalýdýr.");
	SendNearbyMessage(Range_Normal, playerid, COLOUR_VISTABLUE, "> %s zar atar (( %d ))", GetNameWithMask(playerid), opt);

	return 1;
}
CMD:azar2(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return 0;

	new opt, opt2;
	if(sscanf(params, "dd", opt, opt2)) return SendHelpMessage(playerid, "/azar2 [sayý] [sayý 2]");
	if(opt < 1 || opt > 6 || opt2 < 1 || opt > 6) return SendErrorMessage(playerid, "Girilen sayý deðerleri 1 ile 6 arasýnda olmalýdýr.");
	SendNearbyMessage(Range_Normal, playerid, COLOUR_VISTABLUE, "> %s zar atar (( %d, %d ))", GetNameWithMask(playerid), opt, opt2);

	return 1;
}
alias:maske("masketak","mask");
CMD:maske(playerid, params[])
{
	if (!IsPlayerHasItem(playerid, INV_MASK))	return SendErrorMessage(playerid, "Masken yok.");
	if (PlayerInfo[playerid][pOnDuty])			return SendErrorMessage(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn!");

	if (PlayerInfo[playerid][pProbation])
		return SendErrorMessage(playerid, "Probation sürecindeyken maske takamazsýnýz.");

	if (!maskOn{playerid})
	{


	    pc_cmd_server_ame(playerid, "* maskeyi yüzüne geçirir. ");
		GameTextForPlayer(playerid, "~w~MASKEYI ~g~TAKTIN", 4000, 4);
		maskOn{playerid} = true;
		ShowPlayerName(playerid, false);
		format(PlayerInfo[playerid][pMaskname], 32, "Maskeli_%i", randomEx(100000, 999999));
		cNametag[playerid] = CreateDynamic3DTextLabel("Maske Takýyor", 0xFFFFFFFF, 0.0, 0.0, 0.1, NT_DISTANCE, .attachedplayer = playerid, .testlos = 1);
	}
	else
	{


	    pc_cmd_server_ame(playerid, "* yüzündeki maskeyi çýkartýr. ");
		GameTextForPlayer(playerid, "~w~MASKEYI ~g~CIKARTTIN", 4000, 4);
		RemovePlayerMask(playerid);
	}
	return 1;
}

alias:isafk("afkkontrol", "afk");
CMD:isafk(playerid, params[])
{
	new id;

	if (sscanf(params, "u", id))	return SendHelpMessage(playerid, "/isafk [ID / isim]");
	if (!IsPlayerLogged(id))		return SendNotConnected(playerid);

	if (IsPlayerAFK(id))	SendClientMessageEx(playerid, COLOR_LIGHTRED, "%s (%i), %i saniyedir AFK.", GetNameEx(id), id, pTemp[id][pDarkAFK]-2);
	else					SendClientMessageEx(playerid, COLOR_LIGHTRED, "%s (%i), AFK deðil.", GetNameEx(id), id);
	return 1;
}

alias:karakter("karakterim", "bilgilerim");
CMD:karakter(playerid, params[])
{
	ShowStats(playerid, playerid);
	return 1;
}

alias:bagis("bagisyap");
CMD:bagis(playerid, params[])
{
	new amount;

	if (sscanf(params,"d",amount))					return SendHelpMessage(playerid, "/bagis [tutar]");
	if (amount > GetCash(playerid) || amount <= 0)	return SendNotCash(playerid);

	PlaySound(playerid, 1052);
	SendSyntaxMessage(playerid, "Devlet kasasýna $%i baðýþladýnýz.", amount);
	AMSG(COLOUR_ALTO, "Bilgi: %s tarafýndan devlet kasasýna baðýþ yapýldý: $%i.", GetNameEx(playerid), amount);

	new money = PlayerInfo[playerid][pCash];
	GiveCash(playerid, -amount);

	new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | Money(ONCEKI): %i | Money(SIMDIKI): %i] baðýþ yaptý (/charity) -- $%i", GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money, GetCash(playerid), amount);
    insert_log(mes, MONEY_LOG, 5, PlayerInfo[playerid][pAccID]);
	return 1;
}

alias:kogusnumaram("hapisnumaram", "hapisbilgi");
CMD:kogusnumaram(playerid, params[])
{
	if (PlayerInfo[playerid][pJailed] != PRISON_JAIL)	return SendErrorMessage(playerid, "Hapiste deðilsiniz.");

	SendClientMessageEx(playerid, COLOR_GRAD2, "Ýsim: %s | Kodes Numarasý: %s%i", GetNameEx(playerid), (PlayerInfo[playerid][pIsolateTime] != 0)?("B"):("A"),PlayerInfo[playerid][pPrisoned]+100);
	return 1;
}

/*alias:destek("destekbildirimi", "/ticket");
CMD:destek(playerid, params[])
{
	if (isnull(params)) 				return SendHelpMessage(playerid, "/destek [destek talebi]");
	if (request_time > gettime())	return SendSpecialMessage(playerid, "Lütfen %i saniye bekleyin.", request_time - gettime());

	request_time = gettime() + 60;
	SendSyntaxMessage(playerid, "Talebiniz müsait yöneticilere iletildi, lütfen sabýrla bekleyiniz.");

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		foreach(new i : Player)
		{
		    if (!IsPlayerLogged(i) || !CheckAdmin(i, ADMIN_LEVEL_1) || (PlayerInfo[i][pSettings] & togService)) continue;

			SendClientMessageEx(i, 0x00CC99AA, "[DESTEK] %s (ID: %i): %.*s ...", GetNameEx(playerid), playerid, pos, params);
			SendClientMessageEx(i, 0x00CC99AA, "... %s", params[pos]);
		}
	}
 	else
	{
	    foreach(new i : Player)
		{
		    if (!IsPlayerLogged(i) || !CheckAdmin(i, ADMIN_LEVEL_1) || (PlayerInfo[i][pSettings] & togService)) continue;

			SendClientMessageEx(i, 0x00CC99AA, "[DESTEK] %s (ID: %i): %s", GetNameEx(playerid), playerid, params);
		}
	}
	return 1;
}*/

CMD:satinal(playerid, params[])
{
	new string[1024], bizid = -1;

	if ((bizid = GetNearInsideBiz(playerid)) != -1)
	{
	    if (BizInfo[bizid][bizType] == BIZ_BUILD)
	    {
	        Dialog_Show(playerid, BuyInterior, DIALOG_STYLE_INPUT, "{FFFFFF}Dekorasyon", "{FFFFFF}Interiorunu deðiþtirmek istediðiniz evin ID'sini giriniz: \nAyrýca ev sana ait olmalýdýr (/mulklerim)", ">>>", "Kapat");
	    }

	    else if (BizInfo[bizid][bizType] == BIZ_STORE || BizInfo[bizid][bizType] == BIZ_PHARMACY || BizInfo[bizid][bizType] == BIZ_BAR || BizInfo[bizid][bizType] == BIZ_PAWN) //4
	    {
			new type;
			switch(BizInfo[bizid][bizType])
			{
				case BIZ_STORE: type = 4;
				case BIZ_BAR: type = 5;
				case BIZ_PHARMACY: type = 6;
				case BIZ_PAWN: type = 7;
			}
			if (!type)	return SendErrorMessage(playerid, "[#PL-493] Sistem Hatasý!"); //return 1;

			new diatxt[LIMIT_MAX_PRODUCTS*256];

			for(new i = 0; i < max_product[type]; i++)
			{
				format(diatxt, sizeof(diatxt), "%s%i(0.0, 0.0, 63.0, 0.8)\t~w~%s~n~~g~~h~$%i\n", diatxt, model_order[type][i], TurkishCharFix(name_order[type][i]), BizInfo[bizid][bizProductPrice][i]);
			}

			new title[32+23];
			format(title, sizeof(title), "%s____-____Urun Secimi", BizInfo[bizid][bizName]);

			Dialog_Show(playerid, StoreDialog, DIALOG_STYLE_PREVIEW_MODEL, title, diatxt, "Satin Al", "Iptal");
	    }
	    else if (BizInfo[bizid][bizType] == BIZ_BARBER)
	    {
	        if (GetPVarInt(playerid, #buy_attach))	return SendErrorMessage(playerid, "Geçerli iþlemi bitir.");
			if (GetNextToySlot(playerid) == -1)		return SendWarningMessage(playerid, "Tüm aksesuar slotlarýnýz dolu!");

			for(new x; x < sizeof(BarberShop); x++)
			{
				format(string, sizeof(string), "%s%s - $%i\n", string, BarberShop[x][toyName], BarberShop[x][toyPrice]);
			}

			Dialog_Show(playerid, BarberDialog, DIALOG_STYLE_LIST, "{FFFFFF}Secenekler", string, "Sec", "Iptal");
		}
		else if (BizInfo[bizid][bizType] == BIZ_PIZZA || BizInfo[bizid][bizType] == BIZ_CLUCKIN || BizInfo[bizid][bizType] == BIZ_BURGER || BizInfo[bizid][bizType] == BIZ_DONUT)
		{
			for(new i; i != 4; i++)
			{
			    TextDrawShowForPlayer(playerid, TD_restaurant[i]);
			}

			new mes[128], type = BizInfo[bizid][bizType] - BIZ_PIZZA;

			for(new i; i != max_product[type]; i++)
			{
			    format(mes, sizeof(mes), "%s~n~~r~Can: +%i~n~~r~Acligi giderir~n~~p~Fiyat: $%i~n~", TurkishCharFix(name_order[type][i]), 30 + (i * 10), BizInfo[bizid][bizProductPrice][i]);
				PlayerTextDrawSetString(playerid, TD_restaurant_prod[playerid][i], mes);
				PlayerTextDrawShow(playerid, TD_restaurant_prod[playerid][i]);
	            PlayerTextDrawSetPreviewModel(playerid, TD_restaurant_prod[playerid][i + 4], model_order[type][i]);
	            PlayerTextDrawShow(playerid, TD_restaurant_prod[playerid][i + 4]);
			}

			SelectTextDraw(playerid, 0x00cb77FF);
			SetPVarInt(playerid, #restaurant, 1);
		}
		else if (BizInfo[bizid][bizType] == BIZ_CLOTHES)
		{
			if (PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Ýþbaþýndayken bu komutu kullanamazsýnýz.");
	        if (GetCash(playerid) < 100) return SendErrorMessage(playerid, "Yeterli paranýz yok. ($100)");

			if (PlayerInfo[playerid][pSex] == 1)
			{
				new mes[sizeof(ErkekKiyafetleri)*16];
				for(new i = 0; i < sizeof(ErkekKiyafetleri); i++)
				{
					format(mes, sizeof(mes), "%s%i\tID: %i\n", mes, ErkekKiyafetleri[i], ErkekKiyafetleri[i]);
				}
				Dialog_Show(playerid, MODEL_SEL_BUYCLOTHES, DIALOG_STYLE_PREVIEW_MODEL, "Kiyafet Satin Al:", mes, "Satin Al", "Kapat");
			}
			else
			{
				new mes[sizeof(KadinKiyafetleri)*16];
				for(new i = 0; i < sizeof(KadinKiyafetleri); i++)
				{
					format(mes, sizeof(mes), "%s%i\tID: %i\n", mes, KadinKiyafetleri[i], KadinKiyafetleri[i]);
				}
				Dialog_Show(playerid, MODEL_SEL_BUYCLOTHES, DIALOG_STYLE_PREVIEW_MODEL, "Kiyafet Satin Al:", mes, "Satin Al", "Kapat");
			}
		}
		else if (pTemp[playerid][pBizEntered] != -1 && BizInfo[pTemp[playerid][pBizEntered]][bizType] == BIZ_BARBER)
		{
			if (GetPVarInt(playerid, #buy_attach))	return SendErrorMessage(playerid, "Mevcut iþlemi bitirin.");
			if (GetNextToySlot(playerid) == -1)		return SendErrorMessage(playerid, "Tüm giysi dolaplarý dolu.");

			for(new x; x < sizeof(BarberShop); x++)
			{
				format(string, sizeof(string), "%s%s - $%i\n", string, BarberShop[x][toyName], BarberShop[x][toyPrice]);
			}
			Dialog_Show(playerid, BarberDialog, DIALOG_STYLE_LIST, "{FFFFFF}Secenekler", string, "Sec", "Kapat");
		}
		else if (BizInfo[bizid][bizType] == BIZ_ATTACH)
		{
			if (GetPVarInt(playerid, #buy_attach))	return SendErrorMessage(playerid, "Mevcut iþlemi bitirin.");
			if (GetNextToySlot(playerid) == -1)		return SendErrorMessage(playerid, "Tüm giysi dolaplarý dolu.");

			Dialog_Show(playerid, BizAttachDialog, DIALOG_STYLE_LIST, "{FFFFFF}Kategori Seç", "1. Müzik Enstrümanlarý\n2. Saat\n3. Aletler\n4. Spor Ekipmanlarý\n5. Aksesuarlar", "Seç", "Kapat");
		}
	}

	return 1;
}

alias:atesyak("evyak", "ates", "atesekle", "isyeriyak", "mekanyak");
CMD:atesyak(playerid, params[])
{
	if (!FireOnline() || !PoliceOnline())	return SendErrorMessage(playerid,"Bu komutu kullanabilmek için iþbaþýnda %i LSPD ve %i LSFD üyesi olmalýdýr!", NEED_COPS_TO_CRIME, NEED_FIRE_TO_CRIME);

	if (PlayerInfo[playerid][pProbation])
		return SendErrorMessage(playerid, "Probation sürecindeyken bu iþlemi yapamazsýnýz.");

	if (!IsPlayerHasItem(playerid, INV_LIGHTER)) return SendErrorMessage(playerid, "Çakmaðýnýz yok.");
	if (!IsPlayerHasItem(playerid, INV_GASCAN))  return SendErrorMessage(playerid, "Benzin bidonunuz olmasý lazým.");
	if (pTemp[playerid][pFireTime] > 0)			return SendErrorMessage(playerid, "Zaten ateþ yakmýþsýnýz.");

	new type = GetNearBuilding(playerid, 0.0, 2.0), building;
	switch(type) {
		case 0: {
			building = GetNearOutsideHouse(playerid);
			if (building == -1 || (gettime()-HouseInfo[building][hFireTimer] <= 0)) return SendErrorMessage(playerid, "Tekrar dene!");
		}
		case 1: {
			building = GetNearOutsideGarage(playerid);
			if (building == -1 || (gettime()-BizInfo[building][bFireTimer] <= 0)) return SendErrorMessage(playerid,"Tekrar dene!");
		}
		case 2: {
			building = GetNearOutsideBiz(playerid);
			if (building == -1 || (gettime()-GarageInfo[building][gFireTimer] <= 0)) return SendErrorMessage(playerid, "Tekrar dene!");
		}

		default: return SendErrorMessage(playerid, "Binanýn giriþine gidin.");
	}

	if (building == -1) return SendErrorMessage(playerid, "Binanýn giriþine gidin.");

	pTemp[playerid][pFireTime] = 30;
	SetPVarInt(playerid, #firetype, type);
	SetPVarInt(playerid, #firebuildID, building);

	SendSyntaxMessage(playerid, "Ateþ yakmaya baþladýnýz. Ýþlemi geri almak için: {FF6347}/durdur");

	RemovePlayerItem(playerid, INV_GASCAN, 1);

	SavePlayerPos(playerid);
	FreezePlayer(playerid);
	ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop", 4.0, 1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:soyun(playerid, params[])
{
	new	race = PlayerInfo[playerid][pRace];

	if (PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Ýþbaþýnda bu komutu kullanamazsýn.");

	if (PlayerInfo[playerid][pSkin] != GetPlayerSkin(playerid))
	{
	    if (!PlayerInfo[playerid][pSkin]) return SendErrorMessage(playerid, "Kýyafetler size ait olmadýðý için iade edemezsiniz.");

	    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	    SendSyntaxMessage(playerid, "Kýyafetlerini geri aldýn.");
	    return 1;
	}

    switch (PlayerInfo[playerid][pSex])
   	{
  		case 1:
  		{
			switch(race)
			{
			    case 2: SendSyntaxMessage(playerid, "Kýyafetlerinizi çýkardýnýz."), SetPlayerSkin(playerid, 18);
			    case 1:
				{
				    switch(random(3))
				    {
				        case 0: SetPlayerSkin(playerid, 45);
				        case 1: SetPlayerSkin(playerid, 97);
				        case 2: SetPlayerSkin(playerid, 154);
				    }
					SendSyntaxMessage(playerid, "Kýyafetlerinizi çýkardýnýz.");
				}
			}
		}
		case 2:
		{
			switch(race)
			{
			    case 2: SendSyntaxMessage(playerid, "Elbisenizi çýkardýnýz."), SetPlayerSkin(playerid, 139);
			    case 1:
				{
				    switch(random(3))
				    {
				        case 0: SetPlayerSkin(playerid, 251);
				        case 1: SetPlayerSkin(playerid, 140);
				        case 2: SetPlayerSkin(playerid, 138);
				    }
					SendSyntaxMessage(playerid, "Elbisenizi çýkardýnýz.");
				}
			}
		}
  	}
	return 1;
}

alias:stildegistir("konusmastili", "yuruyusstili", "stiller");
CMD:stildegistir(playerid, params[])
{
	new option, secoption;

	if (sscanf(params,"iI(-1)", option, secoption))	return SendHelpMessage(playerid, "/stildegistir ([1] Yürüme Stili | [2] Konuþma Tarzý | [3] Dövüþ Tarzý | [4] Hud Göstergesi)");

	if (option == 1)
	{
		new style;

		if (sscanf(params,"{d}d",style))			return SendHelpMessage(playerid, "/stildegistir 1 [Yürüme tarzý (0-11)]");
		if (style < 0 || style > 11)				return SendErrorMessage(playerid, "Yürüme tarzý 0 ve 11 arasý olmalýdýr.");

		PlayerInfo[playerid][pWalk] = style;

		if (!style)		SendSyntaxMessage(playerid, "Yürüyüþ tarzýný devre dýþý býraktýn.");
		else			SendSyntaxMessage(playerid, "Yürüyüþ tarzýn %d numaralý stil ile deðiþtirildi.", style);
		return 1;
	}
	else if (option == 2)
	{
		new style;

		if (sscanf(params,"{d}d",style))		return SendHelpMessage(playerid, "/stildegistir [Konuþma Tarzý (0-9)]");
		if (style < 0 || style > 9)				return SendErrorMessage(playerid, "Konuþma tarzýnýz 0 ile 9 arasýnda olmalýdýr.");

		PlayerInfo[playerid][pTalk] = style;

		if (!style)		SendSyntaxMessage(playerid, "Konuþma animasyonunu kapattýnýz.");
		else			SendSyntaxMessage(playerid, "Konuþma animasyonunu deðiþtirdiniz. Yenisi: %i.", style);

		return 1;
	}
	else if (option == 3)
	{
		new style;

		if (sscanf(params,"{i}i",style))			return SendHelpMessage(playerid, "/stildegistir [Dövüþ Tarzý (1-5)]");
		if (style < 1 || style > 5)				return SendErrorMessage(playerid, "Dövüþ tarzýnýz 0 ile 5 arasýnda olmalýdýr.");

        SetPlayerFightingStyle(playerid, fight_id[style-1]);
        PlayerInfo[playerid][pFightStyle] = fight_id[style-1];
		SendSyntaxMessage(playerid, "Dövüþ tarzýnýzý deðiþtirdiniz. Yenisi: %s.", fight_name[style-1]);

		return 1;
	}
	else if (option == 4)
	{
		new style;

		if (sscanf(params,"{d}d",style))			return SendHelpMessage(playerid, "/stildegistir [Hud Göstergesi (1-4)]");
		if (style < 1 || style > 4)				return SendSyntaxMessage(playerid, "Hud göstergeniz 1 ile 4 arasýnda olmalýdýr.");

       // PlayerInfo[playerid][pHud] = style-1;
        HideHudTextDraw(playerid);

        if (!(PlayerInfo[playerid][pSettings] & togHUD))	ShowHudTextDraw(playerid);

	}
	return 1;
}


alias:bugkurtar("vwduzelt", "intduzelt", "vwsifirla", "vwkurtar", "intkurtar", "bugkurtar2", "bugkurtar3");
CMD:bugkurtar(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu özelliði þu anda kullanamazsýnýz.");

	Dialog_Show(playerid, BugKurtar, DIALOG_STYLE_LIST, "Bug Kurtarma Opsiyonlarý", "Objeleri göremiyorum/Haritadan düþüyorum.\nObjenin içine sýkýþtým. (Yukarý at)\nObjenin içine girdim. (Alta at)\nObjelerin bazýlarý gözükmüyor. (objeleriyeniler)", "Seç", "Ýptal");
	return 1;
}

CMD:mapfix(playerid, params[])
{
	new Float:pXa, Float:pYa, Float:pZa;
	GetPlayerPos(playerid, pXa, pYa, pZa);
	if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && pZa < -20.0)
	{
		if(PlayerInfo[playerid][pJailTime] > 1) return SendErrorMessage(playerid, "Bu komutu kullanamazsýn.");
		SendClientMessageEx(playerid, COLOUR_TOMATO, "Bulunduðun bug durumundan kurtuldun.");
		SetPlayerPosEx(playerid, 1127.9762,-1437.0320,15.7969);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		Log_Kaydet("genelLog.txt", sprintf("[/bugkurtar] %s (C_ID: %d | A_ID: %d), disaridayken /bugkurtar komutunu kullandi. (vw/int sifirla, lc gonder) [Tarih: %s]", GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetFullDate()));
	}
	else return SendErrorMessage(playerid, "Þu an bug durumunda deðilsin.");
	return 1;
}

/* Telefon sistemi */
stock FindBadWords(inputtext[])
{
    for(new s; s < sizeof(Yasaklikelime); s++)
    {
        new pos;
        while((pos = strfind(inputtext,Yasaklikelime[s],true)) != -1)
        {
            for(new i = pos, j = pos + strlen(Yasaklikelime[s]); i < j; i++)
            {
                return 1;
            }
			break;
        }
    }
    return 0;
}

Player_OnPlayerText(playerid, text[])
{
	new str[144], vehicle = GetPlayerVehicleID(playerid);
    if(FindBadWords(text))
    {
        SendErrorMessage(playerid,"Sohbet kutucuðuna girdiðiniz bir kelime yasaklýdýr. Tekrarlamayýnýz.");
		SendAdmMessage("%s adlý avel sohbet kutusuna yasaklý kelime girdi. ((%s))", GetNameEx(playerid), text);
        return 0;
    }

	if(!strcmp(text, ":D", true))
	{
		pc_cmd_me(playerid, "kahkaha atar.");
		return 0;
	}

	if(!strcmp(text, ":(", true))
	{
		pc_cmd_me(playerid, "somurtur.");
		return 0;
	}

	if(!strcmp(text, ":/", true))
	{
		pc_cmd_me(playerid, "dudak büzer.");
		return 0;
	}

	if(!strcmp(text, ":)", true))
	{
		pc_cmd_me(playerid, "gülümser.");
		return 0;
	}

	if(!strcmp(text, ";)", true))
	{
		pc_cmd_me(playerid, "göz kýrpar.");
		return 0;
	}

	if(!strcmp(text, ":O", true))
	{
		pc_cmd_me(playerid, "þaþýrýr.");
		return 0;
	}

	if(!strcmp(text, "xD", true))
	{
		pc_cmd_me(playerid, "sýrýtýr.");
		return 0;
	}

	if (PlayerInfo[playerid][UyusKullan] > gettime()) format(text, 160, "%s", MulStringHandler(text));

    if (pTemp[playerid][pEmergency] == 444)
	{
	    if (!strlen(text) || CheckTextDrawString(text))
		{
			SCM(playerid, COLOR_YELLOWG, "Operatör (telefon): Maalesef sizi anlamadým, lütfen tekrar edin. ");
			return 0;
		}

		SendMechanicHelp(playerid, text);

		SCM(playerid, COLOR_YELLOWG, "Operatör (telefon): Aramanýz çalýþanlarýmýza bildirilmiþtir, beklemede kalýn.");

		pTemp[playerid][pEmergency] = 0;
		pTemp[playerid][pCallStatus] = 0;
	    SendCellMessage(playerid, "Telefon kapandý.");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	    if (pTemp[playerid][pPayphone] != -1) cancelPayphone(playerid);
		else
		{
			RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
			Phone_Destroy(playerid);
		}
		return 0;
	}
	else if (pTemp[playerid][pEmergency] == 555)
	{
	    if (!strlen(text) || CheckTextDrawString(text))
		{
			SCM(playerid, COLOR_YELLOWG, "Operatör (telefon): Maalesef sizi anlamadým, lütfen tekrar edin. ");
			return 0;
		}

		SendTaxiRequest(playerid, text);

		SCM(playerid, COLOR_YELLOWG, "Operatör (telefon): Aramanýz sürücülerimize bildirildi, beklemede kalýn. ");

		SetPVarInt(playerid, "NeedTaxi", 1);

		pTemp[playerid][pEmergency] = 0;
		pTemp[playerid][pCallStatus] = 0;
	    SendCellMessage(playerid, "Telefon kapandý.");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		if (pTemp[playerid][pPayphone] != -1) cancelPayphone(playerid);
		else
		{
			RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
			Phone_Destroy(playerid);
		}
		return 0;
	}
	else if (pTemp[playerid][pEmergency] == 911)
	{
		if (!strlen(text) || CheckTextDrawString(text))
		{
			SCM(playerid, COLOR_YELLOWG, "911 Operatör (telefon): Maalesef anlayamadým, lütfen tekrar edin. ");
			return 0;
		}

		if (strval(text) != 1 && strval(text) != 2 && strval(text) != 3)
		{
		    SCM(playerid, COLOR_YELLOWG, "911 Operatör (telefon): Tekrar edin... Hangi departmana ihtiyacýnýz var? ");
		    return 0;
		}

		SCM(playerid, COLOR_YELLOWG, "911 Operatörü (telefon): Lütfen yerinizi ve durumunuzu açýklayýn. ");
		pTemp[playerid][pEmergency] = 911 + strval(text);
		return 0;
	}
	else if (pTemp[playerid][pEmergency] == 912)
	{
	    if (!strlen(text) || CheckTextDrawString(text))
		{
			SCM(playerid, COLOR_YELLOWG, "911 Operatör (telefon): Maalesef anlayamadým, ne oldu? ");
			return 0;
		}

		new location[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);

		SendFactionMessageF(FACTION_POLICE, COLOR_LIGHTBLUE, "|__________Acil Çaðrý__________|");

		if (pTemp[playerid][pPayphone] == -1)
		{
			SendFactionMessageF(FACTION_POLICE, COLOR_LIGHTBLUE, "Arayan: %s, No: %i", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
		}
		else
		{
			SendFactionMessageF(FACTION_POLICE, COLOR_LIGHTBLUE, "Arayan: Ankesörlü Telefon, No: %i", PayphoneInfo[pTemp[playerid][pPayphone]][phNumber]);
		}

		SendFactionMessageF(FACTION_POLICE, COLOR_LIGHTBLUE, "Servis: Polis");
		SendFactionMessageF(FACTION_POLICE, COLOR_LIGHTBLUE, "Konum: %s", location);

		if (strlen(text) > MAXLEN)
		{
			SendFactionMessageF(FACTION_POLICE, COLOR_LIGHTBLUE, "Durum: %.*s ...", MAXLEN, text);
			SendFactionMessageF(FACTION_POLICE, COLOR_LIGHTBLUE, "Durum: ... %s", text[MAXLEN]);
		}
		else
			SendFactionMessageF(FACTION_POLICE, COLOR_LIGHTBLUE, "Durum: %s", text);

		SendLocalMessage(25.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s (telefon): %s", GetNameEx(playerid), text);

		Add_Call(playerid, 1, text);


		SCM(playerid, COLOR_YELLOWG, "911 Operatör (telefon): Bölgenizdeki tüm ekiplere haber verdik, lütfen olduðunuz yerde kalýn. ");

		pTemp[playerid][pEmergency] = 0;
		pTemp[playerid][pCallStatus] = 0;
	    SendCellMessage(playerid, "Telefon kapandý.");
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		if (pTemp[playerid][pPayphone] != -1) cancelPayphone(playerid);
		else
		{
			RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
			Phone_Destroy(playerid);
		}
		return 0;
	}
	else if (pTemp[playerid][pEmergency] == 913)
	{
	    if (!strlen(text) || CheckTextDrawString(text))
		{
			SCM(playerid, COLOR_YELLOWG, "911 Operatör (telefon): Maalesef anlayamadým, durumu net anlatýr mýsýnýz?");
			return 0;
		}
        new location[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);

		for(new i = FACTION_MEDICS; i <= FACTION_FIRE; i++)
		{
			SendFactionMessageF(i, LSFD_DUTY, "|__________Acil Çaðrý__________|"); //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			if (pTemp[playerid][pPayphone] == -1)
			{
				SendFactionMessageF(i, LSFD_DUTY, "Arayan: %s, No: %i", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
			}
			else
			{
				SendFactionMessageF(i, LSFD_DUTY, "Arayan: Ankesörlü Telefon, No: %i", PayphoneInfo[pTemp[playerid][pPayphone]][phNumber]);
			}
			SendFactionMessageF(i, LSFD_DUTY, "Servis: Polis, Ambulans / Ýtfaiyeciler");
			SendFactionMessageF(i, LSFD_DUTY, "Konum: %s", location);
			if (strlen(text) > MAXLEN)
			{
				SendFactionMessageF(i, LSFD_DUTY, "Durum: %.*s ...", MAXLEN, text);
				SendFactionMessageF(i, LSFD_DUTY, "Durum: ... %s", text[MAXLEN]);
			}
			else
				SendFactionMessageF(i, LSFD_DUTY, "Durum: %s", text);
		}

		Add_Call(playerid, 2, text);

		SendLocalMessage(25.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s (telefon): %s", GetNameEx(playerid), text);

		SCM(playerid, COLOR_YELLOWG, "911 Operatörü (telefon): Bölgenizdeki tüm ekipleri uyardýk, lütfen olduðunuz yerde kalýn. ");

		pTemp[playerid][pEmergency] = 0;
		pTemp[playerid][pCallStatus] = 0;
	    SendCellMessage(playerid, "Telefon kapandý.");

	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		if (pTemp[playerid][pPayphone] != -1) cancelPayphone(playerid);
		else
		{
			RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
			Phone_Destroy(playerid);
		}
		return 0;
	}
	else if (pTemp[playerid][pEmergency] == 914)
	{
	    if (!strlen(text) || CheckTextDrawString(text))
		{
			SCM(playerid, COLOR_YELLOWG, "911 Operatör (telefon): Maalesef anlayamadým, ne oldu? ");
			return 0;
		}

		new location[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);

		for(new i = FACTION_POLICE; i <= FACTION_FIRE; i++)
		{
			SendFactionMessage(i, i == FACTION_POLICE ? COLOR_LIGHTBLUE : LSFD_DUTY, "|__________Acil Çaðrý__________|");
			printf("-1");
			if (pTemp[playerid][pPayphone] == -1)
			{
				printf("0");
				SendFactionMessage(i, i == FACTION_POLICE ? COLOR_LIGHTBLUE : LSFD_DUTY, "Arayan: %s, NO: %i", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);//, GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
				printf("1");
			}
			else
			{
				SendFactionMessage(i, i == FACTION_POLICE ? COLOR_LIGHTBLUE : LSFD_DUTY, "Arayan: Ankesörlü telefon, No: %i", PayphoneInfo[pTemp[playerid][pPayphone]][phNumber]);
			}
			SendFactionMessage(i, i == FACTION_POLICE ? COLOR_LIGHTBLUE : LSFD_DUTY, "Servis: Polis, Ambulans / Ýtfaiyeciler");
			SendFactionMessage(i, i == FACTION_POLICE ? COLOR_LIGHTBLUE : LSFD_DUTY, "Konum: %s", location);
			if (strlen(text) > MAXLEN)
			{
				SendFactionMessage(i, i == FACTION_POLICE ? COLOR_LIGHTBLUE : LSFD_DUTY, "Durum: %.*s ...", MAXLEN, text);
				SendFactionMessage(i, i == FACTION_POLICE ? COLOR_LIGHTBLUE : LSFD_DUTY, "Durum: ... %s", text[MAXLEN]);
			}
			else
				SendFactionMessage(i, i == FACTION_POLICE ? COLOR_LIGHTBLUE : LSFD_DUTY, "Durum: %s", text);
		}

		Add_Call(playerid, 3, text);

		SCM(playerid, COLOR_YELLOWG, "911 Operatör (telefon): Bölgenizdeki tüm ekiplere haber verdik, lütfen olduðunuz yerde kalýn. ");

		SendLocalMessage(25.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s (telefon): %s", GetNameEx(playerid), text);

		pTemp[playerid][pEmergency] = 0;
		pTemp[playerid][pCallStatus] = 0;
	    SendCellMessage(playerid, "Telefon kapandý.");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	    if (pTemp[playerid][pPayphone] != -1) cancelPayphone(playerid);
		else
		{
			RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
			Phone_Destroy(playerid);
		}
		return 0;
	}
	else if (pTemp[playerid][pEmergency] == 991)
	{
	    if (!strlen(text) || CheckTextDrawString(text))
		{
			SCM(playerid, COLOR_YELLOWG, "911 Operatör (telefon): Maalesef sizi anlamadým. ");
			return 0;
		}

		new location[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
        foreach(new i : Player)
		{
		    if (!IsPlayerLogged(i) || !IsPlayerFactionPolice(i) || (PlayerInfo[i][pSettings] & togFaction))
				continue;

			SendClientMessage(i, COLOR_POLICECHAT, "|____________ Acil arama ____________|");
			if (pTemp[playerid][pPayphone] == -1)
			{
				SendClientMessageEx(i, COLOR_POLICECHAT, "Arayan kiþi: %s, No: %i", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
			}
			else
			{
				SendClientMessageEx(i, COLOR_POLICECHAT, "Arayan kiþi: Ankesörlü telefon, No: %i", PayphoneInfo[pTemp[playerid][pPayphone]][phNumber]);
			}
			SendClientMessageEx(i, COLOR_POLICECHAT, "Konum: %s", location);
			if (strlen(text) > MAXLEN)
			{
				SendClientMessageEx(i, COLOR_POLICECHAT, "Durum: %.*s ...", MAXLEN, text);
				SendClientMessageEx(i, COLOR_POLICECHAT, "Durum: ... %s", text[MAXLEN]);
			}
			else
				SendClientMessageEx(i, COLOR_POLICECHAT, "Durum: %s", text);
		}
		GetPlayerPos(playerid, pTemp[playerid][pCallPosX], pTemp[playerid][pCallPosY], pTemp[playerid][pCallPosZ]);

		SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "ÝPUCU:{FFFFFF} Aramayý kabul etmek için: /ihbarkabul %i", playerid);

		SendLocalMessage(25.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s (telefon): %s", GetNameEx(playerid), text);

		pTemp[playerid][pCallOn] = 1;

		SCM(playerid, COLOR_YELLOWG, "Operatör (telefon): Bölgenizdeki tüm devriyeleri uyardýk, lütfen olduðunuz yerde kalýn. ");

		pTemp[playerid][pEmergency] = 0;
		pTemp[playerid][pCallStatus] = 0;
	    SendCellMessage(playerid, "Telefon kapandý.");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	    if (pTemp[playerid][pPayphone] != -1) cancelPayphone(playerid);
		else
		{
			RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
			Phone_Destroy(playerid);
		}
		return 0;
	}

	if (pTemp[playerid][pInterview] != INVALID_PLAYER_ID)
	{
	    if (strlen(text) > MAXLEN)
	    {
			format(str, sizeof(str), "** [Yayýn] Misafir %s: %.*s ...", GetNameWithMask(playerid), MAXLEN, text);
			NewsChat(0x76F134AA,str);
			format(str, sizeof(str), "... %s", text[MAXLEN]);
			NewsChat(0x76F134AA,str);
		}
		else
		{
		    format(str, sizeof(str), "** [Yayýn] Misafir %s: %s", GetNameWithMask(playerid), text);
			NewsChat(0x76F134AA,str);
		}
		return 0;
	}
	else if (pTemp[playerid][pNews] == 1)
	{
	    if (strlen(text) > MAXLEN)
	    {
			format(str, sizeof(str), "** [Yayýn] Muhabir %s: %.*s ...", GetNameWithMask(playerid), MAXLEN, text);
			NewsChat(0x76F134AA,str);
			format(str, sizeof(str), "... %s", text[MAXLEN]);
			NewsChat(0x76F134AA,str);
		}
		else
		{
		    format(str, sizeof(str), "** [Yayýn] Muhabir %s: %s", GetNameWithMask(playerid), text);
			NewsChat(0x76F134AA,str);
		}
		return 0;
	}

	if (IsPlayerInAnyVehicle(playerid) && !IsADontWindow(vehicle))
	{
		if (0 != IsWindowsClose(GetPlayerVehicleID(playerid))) {
			if (strlen(text) > MAXLEN-15)
			{
				format(str, sizeof(str), "%s (araç içi%s): %.*s ...", GetNameWithMask(playerid), ((pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2) || pTemp[playerid][pEmergency])?("  / telefon"):(""), MAXLEN-15, text);
				SendVehicleMessage(GetPlayerVehicleID(playerid),COLOR_FADE1,str);
				format(str, sizeof(str), "... %s", text[MAXLEN-15]);
				SendVehicleMessage(GetPlayerVehicleID(playerid),COLOR_FADE1,str);
			}
			else
			{
				format(str, sizeof(str), "%s (araç içi%s): %s", GetNameWithMask(playerid), ((pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2) || pTemp[playerid][pEmergency])?(" / telefon"):(""), text);
				SendVehicleMessage(GetPlayerVehicleID(playerid),COLOR_FADE1,str);
			}
		} else {
			if (strlen(text) > MAXLEN-15)
			{
				format(str, sizeof(str), "%s%s: %.*s ...", GetNameWithMask(playerid), ((pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2) || pTemp[playerid][pEmergency])?(" (telefon)"):(""), MAXLEN-15, text);
				SendLocalMessage(Range_VShort, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,str);
				format(str, sizeof(str), "... %s", text[MAXLEN-15]);
				SendLocalMessage(Range_VShort, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,str);
			}
			else
			{
				format(str, sizeof(str), "%s%s: %s", GetNameWithMask(playerid), ((pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2) || pTemp[playerid][pEmergency])?(" (telefon)"):(""), text);
				SendLocalMessage(Range_VShort, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,str);
			}
		}
	}
	else
	{
	    if (strlen(text) > MAXLEN)
	    {
	        if ((pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2) || pTemp[playerid][pEmergency])
	        {
				SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s (telefon): %.*s ...", GetNameWithMask(playerid), MAXLEN, text);
				SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", text[MAXLEN]);
	        }
	        else
	        {
				SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s: %.*s ...", GetNameWithMask(playerid), MAXLEN, text);
				SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", text[MAXLEN]);
			}
		}
		else
		{
		    if ((pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2) || pTemp[playerid][pEmergency])
				SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s (telefon): %s", GetNameWithMask(playerid), text);
	        else
				SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s: %s", GetNameWithMask(playerid), text);
		}
	}
	ChatAnimation(playerid, strlen(text));

	if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2)
	{
	    new targetid = pTemp[playerid][pCallLine];
	    if (IsPlayerLogged(targetid) == 0)
	    {
	        HangupCall(playerid);
	        return 0;
	    }
        if (strlen(text) > MAXLEN)
		{
			SendPhoneMessageEx(targetid, COLOR_YELLOWG, "%s %s (telefon): %.*s ...", GetPhoneSexName(targetid), pTemp[targetid][pCallName], MAXLEN, text);
			SendPhoneMessageEx(targetid, COLOR_YELLOWG, "%s %s (telefon): ... %s", GetPhoneSexName(targetid), pTemp[targetid][pCallName], text[MAXLEN]);

			if (GetPVarInt(targetid, #loud_speak) == 1)
			{
				SendLocalMessage(10.0, targetid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s (telefon): %.*s ...", pTemp[targetid][pCallName], MAXLEN, text);
				SendLocalMessage(10.0, targetid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s (telefon): ... %s", pTemp[targetid][pCallName], text[MAXLEN]);
			}
		}
		else
		{
			SendPhoneMessageEx(targetid, COLOR_YELLOWG, "%s %s (telefon): %s", GetPhoneSexName(targetid), pTemp[targetid][pCallName], text);

			if (GetPVarInt(targetid, #loud_speak) == 1)
				SendLocalMessage(10.0, targetid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s (telefon): %s", pTemp[targetid][pCallName], text);
		}
	}
    return 1;
}


Phone_OnPlayerUpdate(playerid)
{
    if (GetPVarInt(playerid, #selfie))
	{
		new keys[3];
		GetPlayerKeys(playerid, keys[0], keys[1], keys[2]);

	    if (keys[1] == KEY_UP)
	    {
	        new Float: pz =
	        	GetPVarFloat(playerid, #selfie_z);

			pz += 0.01;
			if (pz < 0.70)
			{
			    new Float: rot;
     			GetPlayerFacingAngle(playerid, rot);

                SetPVarFloat(playerid, #selfie_z, pz);

		        new Float: x,
					Float: y,
					Float: z,
					Float: new_x,
					Float: new_y,
					Float: radius = 0.9;

			    GetPlayerPos(playerid, x, y, z);
		        new_x = x + radius * floatcos(rot - 270.0, degrees);
		        new_y = y + radius * floatsin(rot - 270.0, degrees);

				SetPlayerCameraPos(playerid, new_x, new_y, z + 0.78);
				SetPlayerCameraLookAt(playerid, x, y, z + pz);
				SetPlayerFacingAngle(playerid, rot);
			}
	    }
	    else if (keys[1] == KEY_DOWN)
	    {
	        new Float: pz =
	        	GetPVarFloat(playerid, #selfie_z);

			pz -= 0.01;
			if (pz > 0.50)
			{
			    new Float: rot;
     			GetPlayerFacingAngle(playerid, rot);

                SetPVarFloat(playerid, #selfie_z, pz);

		        new Float: x,
					Float: y,
					Float: z,
					Float: new_x,
					Float: new_y,
					Float: radius = 0.9;

			    GetPlayerPos(playerid, x, y, z);
		        new_x = x + radius * floatcos(rot - 270.0, degrees);
		        new_y = y + radius * floatsin(rot - 270.0, degrees);

				SetPlayerCameraPos(playerid, new_x, new_y, z + 0.78);
				SetPlayerCameraLookAt(playerid, x, y, z + pz);
				SetPlayerFacingAngle(playerid, rot);
			}
	    }
	    if (keys[2] == KEY_LEFT)
	    {
	        new Float: rot;
	        GetPlayerFacingAngle(playerid, rot);

			rot += 1.0;
			if (rot >= 359.0) rot = 0.0;

	        new Float: x,
				Float: y,
				Float: z,
				Float: new_x,
				Float: new_y,
				Float: radius = 0.9;

		    GetPlayerPos(playerid, x, y, z);
	        new_x = x + radius * floatcos(rot - 270.0, degrees);
	        new_y = y + radius * floatsin(rot - 270.0, degrees);

			SetPlayerCameraPos(playerid, new_x, new_y, z + 0.78);
			SetPlayerCameraLookAt(playerid, x, y, z + GetPVarFloat(playerid, #selfie_z));
			SetPlayerFacingAngle(playerid, rot);
	    }
	    else if (keys[2] == KEY_RIGHT)
	    {
	        new Float: rot;
	        GetPlayerFacingAngle(playerid, rot);

	        rot -= 1.0;
			if (rot <= 1.0) rot = 359.0;

	        new Float: x,
				Float: y,
				Float: z,
				Float: new_x,
				Float: new_y,
				Float: radius = 0.9;

		    GetPlayerPos(playerid, x, y, z);
	        new_x = x + radius * floatcos(rot - 270.0, degrees);
	        new_y = y + radius * floatsin(rot - 270.0, degrees);

			SetPlayerCameraPos(playerid, new_x, new_y, z + 0.78);
			SetPlayerCameraLookAt(playerid, x, y, z + GetPVarFloat(playerid, #selfie_z));
			SetPlayerFacingAngle(playerid, rot);
	    }
	}
    return 1;
}

Ph_OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(playertextid == TD_iphone_keypad[playerid][9] && IsPlayerPhoneCreated(playerid) != 0 && PhoneInfo[playerid][phoneKeypad] != 0)
	{
	    if(strlen(pTemp[playerid][pCallKeypad]) < 1)
	    	return 1;

	    pc_cmd_ara(playerid, pTemp[playerid][pCallKeypad]);
		return 1;
	}

	if(playertextid == TD_iphone_keypad[playerid][22] && IsPlayerPhoneCreated(playerid) != 0 && PhoneInfo[playerid][phoneKeypad] != 0)
	{
	    if(strlen(pTemp[playerid][pCallKeypad]) < 1)
	    	return 1;

	    strdel(pTemp[playerid][pCallKeypad], strlen(pTemp[playerid][pCallKeypad])-1, 11);
 		PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], pTemp[playerid][pCallKeypad]);
 		PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);
		return 1;
	}

	if(playertextid == TD_iphone_setting[playerid][0] && IsPlayerPhoneCreated(playerid) != 0 && PlayerInfo[playerid][pPhoneOff] == 0)
	{
        PlayerInfo[playerid][pPhoneOff] = 1;

        Phone_Setting(playerid, 0);

        PlayerTextDrawBoxColor(playerid, TD_iphone[playerid][12], 0x000000FF);
        PlayerTextDrawShow(playerid, TD_iphone[playerid][12]);

        PlayerTextDrawHide(playerid, TD_iphone[playerid][17]);
        PlayerTextDrawHide(playerid, TD_iphone[playerid][18]);
        PlayerTextDrawHide(playerid, TD_iphone[playerid][19]);
        PlayerTextDrawHide(playerid, TD_iphone[playerid][20]);
        PlayerTextDrawHide(playerid, TD_iphone[playerid][21]);

        PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
		return 1;
	}

	if(playertextid == TD_iphone[playerid][22] && PlayerInfo[playerid][pPhoneOff] == 1 && IsPlayerPhoneCreated(playerid))
	{
	    PlayerInfo[playerid][pPhoneOff] = 0;

        PlayerTextDrawBoxColor(playerid, TD_iphone[playerid][12], phone_window[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone[playerid][12]);

        PlayerTextDrawShow(playerid, TD_iphone[playerid][17]);
        PlayerTextDrawShow(playerid, TD_iphone[playerid][18]);
        PlayerTextDrawShow(playerid, TD_iphone[playerid][19]);
        PlayerTextDrawShow(playerid, TD_iphone[playerid][20]);
        PlayerTextDrawShow(playerid, TD_iphone[playerid][21]);

        Phone_Block(playerid, 1);
        PlayerPlaySound(playerid, 21000, 0.0, 0.0, 0.0);

        new query[256];
   		mysql_format(dbHandle, query, sizeof(query), "UPDATE `sms` SET `read`='0' WHERE `to_number`=%i AND `read`='-1'", PlayerInfo[playerid][pNumber]);
		mysql_tquery(dbHandle, query);
		return 1;
	}

	if(playertextid == TD_iphone_setting[playerid][1] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    PlayerInfo[playerid][pPhoneAirplane] = (PlayerInfo[playerid][pPhoneAirplane])?(0):(1);

	    if(PlayerInfo[playerid][pPhoneAirplane] == 1 && (pTemp[playerid][pEmergency] || pTemp[playerid][pCallLine] != INVALID_PLAYER_ID))
	        pc_cmd_telefonkapat(playerid, "");

	    if(PlayerInfo[playerid][pPhoneAirplane] == 0)
	    {
	        new query[256];
   			mysql_format(dbHandle, query, sizeof(query), "UPDATE `sms` SET `read`='0' WHERE `to_number`=%i AND `read`='-1'", PlayerInfo[playerid][pNumber]);
			mysql_tquery(dbHandle, query);
	    }

	    PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][1], (PlayerInfo[playerid][pPhoneAirplane] == 0)?("Ucak Modu: Kapali"):("Ucak Modu: Acik"));
		PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][1]);
		PlayerPlaySound(playerid, 21000, 0.0, 0.0, 0.0);
		return 1;
	}
	if(playertextid == TD_iphone_setting[playerid][2] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    PlayerInfo[playerid][pPhoneSound] = (PlayerInfo[playerid][pPhoneSound])?(0):(1);
	    PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][2], (PlayerInfo[playerid][pPhoneSound] == 0)?("Ses: Acik"):("Ses: Kapali"));
		PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][2]);
		PlayerPlaySound(playerid, 21000, 0.0, 0.0, 0.0);
		return 1;
	}

	if(playertextid == TD_iphone_setting[playerid][8] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(PlayerInfo[playerid][pPhoneRingtone]-- < 1)
	        PlayerInfo[playerid][pPhoneRingtone] = sizeof(phone_ringtons)-1;

		PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
    	PlayerPlaySound(playerid, phone_ringtons[PlayerInfo[playerid][pPhoneRingtone]], 0.0, 0.0, 0.0);

		new mes[32];
		format(mes, sizeof(mes), "zil-%i.mp3", PlayerInfo[playerid][pPhoneRingtone]+1);
		PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][10], mes);
		PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][10]);
		return 1;
	}

	if(playertextid == TD_iphone_setting[playerid][9] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(PlayerInfo[playerid][pPhoneRingtone]++ >= sizeof(phone_ringtons)-1)
	        PlayerInfo[playerid][pPhoneRingtone] = 0;

		PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
    	PlayerPlaySound(playerid, phone_ringtons[PlayerInfo[playerid][pPhoneRingtone]], 0.0, 0.0, 0.0);

		new mes[32];
		format(mes, sizeof(mes), "zil-%i.mp3", PlayerInfo[playerid][pPhoneRingtone]+1);
		PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][10], mes);
		PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][10]);
		return 1;
	}

	if(playertextid == TD_iphone_setting[playerid][5] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(PlayerInfo[playerid][pPhoneStyle]-- < 1)
	        PlayerInfo[playerid][pPhoneStyle] = sizeof(phone_panel)-1;

		PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][4]);

		PlayerTextDrawBoxColor(playerid, TD_iphone[playerid][12], phone_window[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawShow(playerid, TD_iphone[playerid][12]);

		PlayerTextDrawBoxColor(playerid, TD_iphone[playerid][17], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawShow(playerid, TD_iphone[playerid][17]);

		PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][1]);

        PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][2]);

        for(new i; i != 34; i++)
        {
            if(i == 9)
                continue;

			switch(i)
			{
			    case 0..11, 23..33: PlayerTextDrawColor(playerid, TD_iphone_keypad[playerid][i], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
				default: PlayerTextDrawColor(playerid, TD_iphone_keypad[playerid][i], phone_window[PlayerInfo[playerid][pPhoneStyle]]);
			}
        }
		return 1;
	}

	if(playertextid == TD_iphone_setting[playerid][6] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(PlayerInfo[playerid][pPhoneStyle]++ >= sizeof(phone_panel)-1)
	        PlayerInfo[playerid][pPhoneStyle] = 0;

        PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][4]);

		PlayerTextDrawBoxColor(playerid, TD_iphone[playerid][12], phone_window[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawShow(playerid, TD_iphone[playerid][12]);

		PlayerTextDrawBoxColor(playerid, TD_iphone[playerid][17], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawShow(playerid, TD_iphone[playerid][17]);

		PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][1]);

        PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][2]);
		return 1;
	}

    if(playertextid == TD_iphone_contact[playerid][1] && IsPlayerPhoneCreated(playerid) != 0)
	{
        if(GetPVarInt(playerid, #select_sms) == 0)
	    {
	    	new mes[32];
	    	format(mes, sizeof(mes), "%i", PlayerContacts[playerid][GetPVarInt(playerid, #select_contact)][contactNumber]);
	    	pc_cmd_ara(playerid, mes);
		}
		else
		{
			new query[256];
			mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `sms` WHERE `id`=%i", GetPVarInt(playerid, #select_sms));
			mysql_tquery(dbHandle, query, "ShowSMS", "ii", playerid, GetPVarInt(playerid, #select_sms));
		}
		return 1;
	}
	if(playertextid == TD_iphone_contact[playerid][2] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(GetPVarInt(playerid, #select_sms) == 0)
	    {
	    	new mes[128];
	    	format(mes, sizeof(mes), "[%s]", PlayerContacts[playerid][GetPVarInt(playerid, #select_contact)][contactName]);
	    	Dialog_Show(playerid, SendSMS3, DIALOG_STYLE_INPUT, mes, "Mesajý girin:", "Ýlerle", "Geri Dön");
		}
		else
		{
		    new mes[32];
		    GetPVarString(playerid, #sms_number, mes, 32);
	    	Dialog_Show(playerid, SendSMS2, DIALOG_STYLE_INPUT, mes, "Mesajý girin:", "Ýlerle", "Geri Dön");
		}
		return 1;
	}
	if(playertextid == TD_iphone_contact[playerid][3] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(GetPVarInt(playerid, #select_sms) == 0)
	    {
   	 		new mes[128];
	    	format(mes, sizeof(mes), "Bu kiþiyi rehberden silmek istiyor musun? %s (%i)", PlayerContacts[playerid][GetPVarInt(playerid, #select_contact)][contactName], PlayerContacts[playerid][GetPVarInt(playerid, #select_contact)][contactNumber]);
	    	Dialog_Show(playerid, DeleteContact, DIALOG_STYLE_MSGBOX, "[Rehber]", mes, "Evet", "Hayýr");
		}
		else
		{
	    	Dialog_Show(playerid, DeleteSMS, DIALOG_STYLE_MSGBOX, "[Rehber]", "{ffffff}Bu mesajý silmek istediðinize emin misiniz?", "Evet", "Hayýr");
		}
		return 1;
	}
    if(playertextid == TD_iphone_contact[playerid][4] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(GetPVarInt(playerid, #select_sms) == 0)
	    {
	    	Phone_Contact_Info(playerid);
	   		Phone_Contacts(playerid, 0);
	   	}
	   	else
	   	{
	   	    Phone_SMS_Info(playerid);
	   	    Phone_SMS(playerid, 0);
	   	}
		return 1;
	}

	if(IsPlayerPhoneCreated(playerid) != 0)
	{
	    for(new i; i != 3; i++)
	    {
	        if(playertextid != TD_iphone_block[playerid][i + 3] || PhoneInfo[playerid][phoneBlockSMS][i] == 0)
	            continue;

			new id = PhoneInfo[playerid][phoneBlockSMS][i];

			Phone_Block(playerid, 0);
			Phone_SMS_Info(playerid, id);
			return 1;
	    }

	    for(new i; i != 3; i++)
	    {
	        if(playertextid != TD_iphone_list[playerid][i + 13] || PhoneInfo[playerid][phoneListed][i] == -1)
	            continue;

			new query[256];
			mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `history_calls` WHERE `id` = %i", PhoneInfo[playerid][phoneListed][i]);
			mysql_tquery(dbHandle, query, "ShowHistoryInfo", "ii", playerid, PhoneInfo[playerid][phoneListed][i]);
			return 1;
	    }

	    for(new i; i != 10; i++)
	    {
	        if(playertextid != TD_iphone_keypad[playerid][i + 12])
	            continue;

			if(strlen(pTemp[playerid][pCallKeypad]) > 10)
			    return 1;

			switch(i)
			{
			    case 0: strcat(pTemp[playerid][pCallKeypad], "1", 11);
			    case 1: strcat(pTemp[playerid][pCallKeypad], "2", 11);
			    case 2: strcat(pTemp[playerid][pCallKeypad], "3", 11);
			    case 3: strcat(pTemp[playerid][pCallKeypad], "4", 11);
			    case 4: strcat(pTemp[playerid][pCallKeypad], "5", 11);
			    case 5: strcat(pTemp[playerid][pCallKeypad], "6", 11);
			    case 6: strcat(pTemp[playerid][pCallKeypad], "7", 11);
			    case 7: strcat(pTemp[playerid][pCallKeypad], "8", 11);
			    case 8: strcat(pTemp[playerid][pCallKeypad], "9", 11);
			    case 9: strcat(pTemp[playerid][pCallKeypad], "0", 11);
			}
			PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], pTemp[playerid][pCallKeypad]);
	   		PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);
			return 1;
	    }

	    for(new i; i != 9; i++)
	    {
	        if(playertextid != TD_iphone_list[playerid][i + 4] || PhoneInfo[playerid][phoneListed][i] == -1)
	            continue;

			if(PhoneInfo[playerid][phoneContact] == 1)
			{
            	Phone_Contacts(playerid);
            	Phone_Contact_Info(playerid, PhoneInfo[playerid][phoneListed][i]);
			}
			if(PhoneInfo[playerid][phoneSMS] == 1)
			{
            	Phone_SMS(playerid);
            	Phone_SMS_Info(playerid, PhoneInfo[playerid][phoneListed][i]);
			}
			if(PhoneInfo[playerid][phoneGPS] == 1)
			{
			    new mes[128];
				format(mes, sizeof(mes), "{ffffff}GPS lokasyonu - %s. Checkpoint belirlensin mi?", gps_location[PhoneInfo[playerid][phoneListed][i]][gpsName]);
				Dialog_Show(playerid, SelectGPS, DIALOG_STYLE_MSGBOX, "[GPS]", mes, "Belirle", "Kapat");
				SetPVarInt(playerid, #select_gps, PhoneInfo[playerid][phoneListed][i]);
			}
			return 1;
	    }
	}
    if(playertextid == TD_iphone_list[playerid][2] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(PhoneInfo[playerid][phoneContact] == 1)
	    {
	    	if(GetPVarInt(playerid, #contacts_list) + 1 <= 4)
		    	Phone_Contacts(playerid, GetPVarInt(playerid, #contacts_list) + 1);
		}
		if(PhoneInfo[playerid][phoneSMS] == 1)
	    {
	    	Phone_SMS(playerid, GetPVarInt(playerid, #contacts_list) + 1);
		}
		if(PhoneInfo[playerid][phoneGPS] == 1)
	    {
	    	if(GetPVarInt(playerid, #contacts_list) + 1 <= 2)
		    	Phone_GPS(playerid, GetPVarInt(playerid, #contacts_list) + 1);
		}
        if(PhoneInfo[playerid][phoneHistory] == 1)
	    {
 			Phone_History(playerid, GetPVarInt(playerid, #contacts_list) + 1);
		}
		return 1;
	}
	if(playertextid == TD_iphone_list[playerid][1] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(PhoneInfo[playerid][phoneContact] == 1)
	    {
	    	if(GetPVarInt(playerid, #contacts_list) - 1 >= 0)
	        	Phone_Contacts(playerid, GetPVarInt(playerid, #contacts_list) - 1);
		}
		if(PhoneInfo[playerid][phoneSMS] == 1)
	    {
	        if(GetPVarInt(playerid, #contacts_list) - 1 >= 0)
	    		Phone_SMS(playerid, GetPVarInt(playerid, #contacts_list) - 1);
		}
		if(PhoneInfo[playerid][phoneGPS] == 1)
	    {
	        if(GetPVarInt(playerid, #contacts_list) - 1 >= 0)
	    		Phone_GPS(playerid, GetPVarInt(playerid, #contacts_list) - 1);
		}
		if(PhoneInfo[playerid][phoneHistory] == 1)
	    {
	        if(GetPVarInt(playerid, #contacts_list) - 1 >= 0)
	    		Phone_History(playerid, GetPVarInt(playerid, #contacts_list) - 1);
		}
		return 1;
	}
	if(playertextid == TD_iphone_list[playerid][3] && IsPlayerPhoneCreated(playerid) != 0 && PhoneInfo[playerid][phoneContact] != 0)
	{
	    Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "[Rehber]", "Numarayý girin:", "Ýlerle", "Geri Dön");
	    return 1;
	}
	if(playertextid == TD_iphone_list[playerid][3] && IsPlayerPhoneCreated(playerid) != 0 && PhoneInfo[playerid][phoneSMS] != 0)
	{
	    Dialog_Show(playerid, SendSMS, DIALOG_STYLE_INPUT, "[Mesaj]", "Numarayý girin:", "Ýlerle", "Geri Dön");
	    return 1;
	}
    if(playertextid == TD_iphone_menu[playerid][0] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    Phone_Menu(playerid, 0);
	    Phone_Contacts(playerid, 0);//0 - ñòðàíèöà
	    return 1;
	}
    if(playertextid == TD_iphone_menu[playerid][1] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    Phone_Menu(playerid, 0);
 		Phone_Setting(playerid, 1);
	    return 1;
	}
    if(playertextid == TD_iphone_menu[playerid][2] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    Phone_Menu(playerid, 0);
	    Phone_SMS(playerid, 0);//0 - ñòðàíèöà
	    return 1;
	}
    if(playertextid == TD_iphone_menu[playerid][3] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    Phone_Menu(playerid, 0);
	    Phone_History(playerid, 0);//0 - ñòðàíèöà
	    return 1;
	}
    if(playertextid == TD_iphone_menu[playerid][4] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    pc_cmd_selfie(playerid, "");
	    return 1;
	}
	if(playertextid == TD_iphone_menu[playerid][5] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    Phone_Menu(playerid, 0);
	    Phone_GPS(playerid, 0);//0 - ñòðàíèöà
	    return 1;
	}
    if(playertextid == TD_iphone_menu[playerid][6] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    Phone_Menu(playerid, 0);
 		Phone_Keypad(playerid, 1);
	    return 1;
	}

	if(playertextid == TD_iphone_button[playerid][4] && IsPlayerPhoneCreated(playerid) != 0)
		return pc_cmd_telefonac(playerid, "");

    if((playertextid == TD_iphone_button[playerid][0] || playertextid == TD_iphone_button[playerid][2]) && IsPlayerPhoneCreated(playerid) != 0)
		return pc_cmd_telefonkapat(playerid, "");

    if(playertextid == TD_iphone[playerid][22] && (PhoneInfo[playerid][phoneSetting] != 0 || PhoneInfo[playerid][phoneBlock] != 0 || PhoneInfo[playerid][phoneContact] != 0 || PhoneInfo[playerid][phoneSMS] != 0 || PhoneInfo[playerid][phoneHistory] != 0 || PhoneInfo[playerid][phoneKeypad] != 0 || PhoneInfo[playerid][phoneGPS] != 0) && IsPlayerPhoneCreated(playerid))
	{
	    Phone_Block(playerid, 0);
		Phone_Contacts(playerid);
		Phone_SMS(playerid);
		Phone_History(playerid);
		Phone_GPS(playerid);
		Phone_Setting(playerid, 0);
		Phone_Keypad(playerid, 0);
		Phone_Menu(playerid, 1);
		return 1;
	}
	return 1;
}
Tower_OnGameModeInit()
{
	mysql_tquery(dbHandle, "SELECT * FROM `towers`", "LoadDynamicTowers");
	return 1;
}

this::LoadDynamicTowers()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if (!rows)
	{
	    print("[Kuleler] Kayýt bulunamadý.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "id", TowerInfo[i][towerID]);
	    cache_get_value_int(i, "model", TowerInfo[i][towerModel]);
		cache_get_value_float(i, "x", TowerInfo[i][towerPosX]);
		cache_get_value_float(i, "y", TowerInfo[i][towerPosY]);
		cache_get_value_float(i, "z", TowerInfo[i][towerPosZ]);
		cache_get_value_float(i, "rx", TowerInfo[i][towerPosRX]);
		cache_get_value_float(i, "ry", TowerInfo[i][towerPosRY]);
		cache_get_value_float(i, "rz", TowerInfo[i][towerPosRZ]);

		TowerInfo[i][towerObject] =
			CreateDynamicObject(TowerInfo[i][towerModel], TowerInfo[i][towerPosX], TowerInfo[i][towerPosY], TowerInfo[i][towerPosZ], TowerInfo[i][towerPosRX], TowerInfo[i][towerPosRY], TowerInfo[i][towerPosRZ], 0, 0);

		TowerInfo[i][towerOn] = 1;
        total++;
	}
	printf("[Towers] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

this::OnTowerInsert(towerid)
{
	TowerInfo[towerid][towerID] = cache_insert_id();
	return 1;
}

Tow_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ,
	Float:oldRotX, Float:oldRotY, Float:oldRotZ;

    GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	if (GetPVarInt(playerid, #edit_tower) && TowerInfo[GetPVarInt(playerid, #edit_tower)-1][towerObject] == objectid && TowerInfo[GetPVarInt(playerid, #edit_tower)-1][towerOn])
	{
		if (response == EDIT_RESPONSE_FINAL)
		{
		    new tower = GetPVarInt(playerid, #edit_tower)-1;
	    	DeletePVar(playerid, #edit_tower);
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			new query[156];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `towers` SET `x` = %f, `y` = %f, `z` = %f, `rx` = %f, `ry` = %f, `rz` = %f WHERE `id` = %i",x,y,z,rx,ry,rz,TowerInfo[tower][towerID]);
			mysql_tquery(dbHandle, query);

			GetDynamicObjectPos(objectid, TowerInfo[tower][towerPosX], TowerInfo[tower][towerPosY], TowerInfo[tower][towerPosZ]);
			GetDynamicObjectRot(objectid, TowerInfo[tower][towerPosRX], TowerInfo[tower][towerPosRY], TowerInfo[tower][towerPosRZ]);

  			SendServerMessage(playerid, "Baz istasyonu düzenlendi: %i", tower);
		}
		else if (response == EDIT_RESPONSE_CANCEL)
		{
	    	DeletePVar(playerid, #edit_tower);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
	}
	return 1;
}
stock Update_Phone(playerid)
{
    if(0 == IsPlayerPhoneCreated(playerid) || PlayerInfo[playerid][pPhoneOff] == 1)
		return 1;

	new hours,
		minutes,
		str_time[16];

	gettime(hours, minutes);

	format(str_time, 6, "%02i:%02i", hours, minutes);
	PlayerTextDrawSetString(playerid, TD_iphone[playerid][18], str_time);
	PlayerTextDrawShow(playerid, TD_iphone[playerid][18]);

	new network[11];
	switch(GetPlayerNetwork(playerid))
	{
	    case 0: network = "_";
	    case 1: network = "o";
	    case 2: network = "oo";
	    case 3: network = "ooo";
	    case 4: network = "oooo";
	    case 5: network = "ooooo";
	}
	PlayerTextDrawSetString(playerid, TD_iphone[playerid][23], network);
	PlayerTextDrawShow(playerid, TD_iphone[playerid][23]);

	if(PhoneInfo[playerid][phoneBlock] != 0)
	{
	    format(str_time, 6, "%02i:%02i", hours, minutes);
		PlayerTextDrawSetString(playerid, TD_iphone_block[playerid][0], str_time);
		PlayerTextDrawShow(playerid, TD_iphone_block[playerid][0]);

		new month,
		    day;

		new month_name[12][12] = {"Ocak","Subat","Mart","Nisan","Mayis","Haziran","Temmuz","Agustos","Eylul","Ekim","Kasim","Aralik"};

		getdate(_, month, day);

		format(str_time, 16, "%02i %s", day, month_name[month-1]);
		PlayerTextDrawSetString(playerid, TD_iphone_block[playerid][1], str_time);
		PlayerTextDrawShow(playerid, TD_iphone_block[playerid][1]);
	}
	return 1;
}

stock Phone_Keypad(playerid, status)
{
	if(status)
	{
		PhoneInfo[playerid][phoneKeypad] = 1;
		format(pTemp[playerid][pCallKeypad], 12, "");
		PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], "_");
		PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);
	    for(new i; i != 34; i++) PlayerTextDrawShow(playerid, TD_iphone_keypad[playerid][i]);
	}
	else
	{
	    PhoneInfo[playerid][phoneKeypad] = 0;
	    format(pTemp[playerid][pCallKeypad], 12, "");
	    PlayerTextDrawHide(playerid, TD_iphone_name[playerid]);
    	for(new i; i != 34; i++) PlayerTextDrawHide(playerid, TD_iphone_keypad[playerid][i]);
	}
	return 1;
}


stock Phone_Menu(playerid, status)
{
	if(status)
	{
	    for(new i; i != 12; i++) PlayerTextDrawShow(playerid, TD_iphone_menu[playerid][i]);
	}
	else
	{
    	for(new i; i != 12; i++) PlayerTextDrawHide(playerid, TD_iphone_menu[playerid][i]);
	}
	return 1;
}

stock Phone_Setting(playerid, status)
{
	if(status)
	{
	    PhoneInfo[playerid][phoneSetting] = 1;

        PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][1], (PlayerInfo[playerid][pPhoneAirplane] == 0)?("Ucak Modu: Kapali"):("Ucak Modu: Acik"));

        PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][2], (PlayerInfo[playerid][pPhoneSound] == 0)?("Ses: Acik"):("Ses: Kapali"));

		PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);

		new mes[32];
		format(mes, sizeof(mes), "zil-%i.mp3", PlayerInfo[playerid][pPhoneRingtone]+1);
		PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][10], mes);

	    for(new i; i != 11; i++) PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][i]);
	}
	else
	{
	    PhoneInfo[playerid][phoneSetting] = 0;
    	for(new i; i != 11; i++) PlayerTextDrawHide(playerid, TD_iphone_setting[playerid][i]);
	}
	return 1;
}

stock Phone_Block(playerid, status)
{
	if(status)
	{
	    PhoneInfo[playerid][phoneBlock] = 1;
	    PhoneInfo[playerid][phoneBlockSMS][0] = 0;
	    PhoneInfo[playerid][phoneBlockSMS][1] = 0;
	    PhoneInfo[playerid][phoneBlockSMS][2] = 0;
	    for(new i; i != 3; i++) PlayerTextDrawShow(playerid, TD_iphone_block[playerid][i]);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `sms` WHERE `to_number` = '%i' AND `read`=0 ORDER BY `id` DESC LIMIT 3", PlayerInfo[playerid][pNumber]);
		mysql_tquery(dbHandle, query, "ShowBlockSMS", "i", playerid);
	}
	else
	{
	    PhoneInfo[playerid][phoneBlock] = 0;
	    PhoneInfo[playerid][phoneBlockSMS][0] = 0;
	    PhoneInfo[playerid][phoneBlockSMS][1] = 0;
	    PhoneInfo[playerid][phoneBlockSMS][2] = 0;
    	for(new i; i != 6; i++) PlayerTextDrawHide(playerid, TD_iphone_block[playerid][i]);
	}
	return 1;
}

forward ShowBlockSMS(playerid);
public ShowBlockSMS(playerid)
{
	if(PhoneInfo[playerid][phoneBlock] != 1 || cache_num_rows() == 0)
	    return 1;

	new name[128];
	for(new i; i != cache_num_rows(); i++)
	{
	    if(i > 2)
	        break;

		cache_get_value(i, "from_name", name, 24);
		cache_get_value_int(i, "id", PhoneInfo[playerid][phoneBlockSMS][i]);
		format(name, sizeof(name), "iMessage~n~~l~%s", name);

		PlayerTextDrawSetString(playerid, TD_iphone_block[playerid][i+3], TurkishCharFix(name));
		PlayerTextDrawShow(playerid, TD_iphone_block[playerid][i+3]);
	}
	return 1;
}

stock Phone_Button(playerid)
{
	for(new i; i != 6; i++) PlayerTextDrawHide(playerid, TD_iphone_button[playerid][i]);
	return 1;
}

stock Phone_Destroy(playerid)
{
    if(PhoneInfo[playerid][phoneCreated] == 0)
	    return 1;

    #include "../include/iphone_destroy.inc"
    PhoneInfo[playerid][phoneCreated] = 0;

    if(pTemp[playerid][pCallLine] == INVALID_PLAYER_ID && !GetPVarInt(playerid, #selfie))
        RemovePlayerAttachedObject(playerid, ATTACH_HANDS);

	return 1;
}

stock Phone_Create(playerid, type = 0)
{
	if(PhoneInfo[playerid][phoneCreated] != 0)
	    return 1;

	new mes[56];

    #include "../include/iphone_create.inc"
 	PhoneInfo[playerid][phoneCreated] = 1;
	PhoneInfo[playerid][phoneContact] = 0;
	PhoneInfo[playerid][phoneSMS] = 0;
	PhoneInfo[playerid][phoneHistory] = 0;
	PhoneInfo[playerid][phoneKeypad] = 0;
	PhoneInfo[playerid][phoneGPS] = 0;
	PhoneInfo[playerid][phoneSetting] = 0;

	if(!IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) SetPlayerAttachedObject(playerid, ATTACH_HANDS, phone_model[PlayerInfo[playerid][pPhoneModel]], 6, 0.111, -0.000999, 0.0, 77.9, -171.6, -3.40001, 1.0, 1.0, 1.0);

	if(type == 0)
	{
	    pc_cmd_ame(playerid, "telefonunu çýkarýr.");
 		SendClientMessage(playerid, -1, "[ ! ] /telefon ile menüyü tekrar kapatabilirsin. /pc komutu ile imleci aktif edebilirsin.");
		SendClientMessage(playerid, -1, "[ ! ] ESC tuþuna basarak yürüyüþ moduna geçebilirsin.");
		SelectTextDraw(playerid, -1);
	}

	if(PlayerInfo[playerid][pPhoneOff] == 1)
		return 1;

 	if(pTemp[playerid][pCallLine] != INVALID_PLAYER_ID)
 	{
		if(pTemp[playerid][pCallStatus] == 1)
		{
		    format(mes, sizeof(mes), "%s~n~hatta", pTemp[playerid][pCallName]);

		    PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], TurkishCharFix(mes));
		    PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);

		    PlayerTextDrawShow(playerid, TD_iphone_button[playerid][2]);
		    PlayerTextDrawShow(playerid, TD_iphone_button[playerid][3]);
		    PlayerTextDrawShow(playerid, TD_iphone_button[playerid][4]);
		    PlayerTextDrawShow(playerid, TD_iphone_button[playerid][5]);
		}
		else
		{
		    if(pTemp[playerid][pCallStatus] == 2)
		    	format(mes, sizeof(mes), "%s~n~%s", TurkishCharFix(pTemp[playerid][pCallName]), ConvertSecond(pTemp[playerid][pCallTime]));
			else
			    format(mes, sizeof(mes), "%s~n~araniyor...", TurkishCharFix(pTemp[playerid][pCallName]));

		    PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], mes);
		    PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);

		    PlayerTextDrawShow(playerid, TD_iphone_button[playerid][0]);
		    PlayerTextDrawShow(playerid, TD_iphone_button[playerid][1]);
		}
	}
 	else
 	{
 	    Update_Phone(playerid);
 	    Phone_Block(playerid, 1);
 	}
	return 1;
}

this::SmsToPlayerOff(sendernumber_str[], sender_str[], text[])
{
    new rows = cache_num_rows();
	if(!rows) return 1;
	new sendernumber = strval(sendernumber_str),
		month,
 		day,
 		year,
 		hour,
		number,
 		minute
	;

	cache_get_value_int(0, "number", number);

	gettime(hour, minute);
	getdate(year, month, day);

	new month_name[12][12] = {"Ocak","Subat","Mart","Nisan","Mayis","Haziran","Temmuz","Agustos","Eylul","Ekim","Kasim","Aralik"};

	new query[256 + 128];

	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `sms` (`to_name`,`from_name`,`to_number`,`from_number`,`text`,`date`,`read`) VALUES (%i,'%e',%i,%i,'%e','%s %02i %i, %02i:%02i',%i)",
	number,
	sender_str,
	number,
	sendernumber,
	text,
	month_name[month-1],
	day,
	year,
	hour,
	minute,
	0);
	mysql_tquery(dbHandle, query);

	return 1;
}

forward OfflineSMS(playerid, number, text[]);
public OfflineSMS(playerid, number, text[])
{
	if(!cache_num_rows())
	    return SCM(playerid, -1, "Bir hata oluþtu. Kod: #072");

    new find_phone,
		name_playerid[MAX_PLAYER_NAME],
		name_targetid[MAX_PLAYER_NAME];

    cache_get_value(0, "contact", name_targetid);

    for (new i = 0; i != MAX_PLAYER_CONTACTS; i ++)
	{
		if(PlayerContacts[playerid][i][contactOn] != 0 && PlayerContacts[playerid][i][contactNumber] == number)
		{
 			strmid(name_playerid, PlayerContacts[playerid][i][contactName], 0, strlen(PlayerContacts[playerid][i][contactName]), 32);
 			find_phone = 1;
		}
	}

	if(!find_phone) format(name_playerid, 24, "%i", number);
	if(!strlen(name_targetid) || CompareStrings(name_targetid, "NULL")) format(name_targetid, 24, "%i", PlayerInfo[playerid][pNumber]);

	new month,
 		day,
 		year,
 		hour,
 		minute;

	new month_name[12][12] = {"Ocak","Þubat","Mart","Nisan","Mayýs","Haziran","Temmuz","Aðustos","Eylül","Ekim","Kasým","Aralýk"};
	gettime(hour, minute);
	getdate(year, month, day);

	new query[256 + 128];
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `sms` (`to_name`,`from_name`,`to_number`,`from_number`,`text`,`date`,`read`) VALUES ('%e','%e',%i,%i,'%e','%s %02i %i, %02i:%02i','%i')",
	name_playerid,
	name_targetid,
	number,
	PlayerInfo[playerid][pNumber],
	text,
	month_name[month-1],
	day,
	year,
	hour,
	minute,
 	0);
	mysql_tquery(dbHandle, query);

	if(strlen(text) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: %.*s ...", pos, text);
		SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: ... %s Gönderen: %s.", text[pos], name_playerid);
	}
	else
		SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: %s Gönderen: %s.", text, name_playerid);

    pc_cmd_ame(playerid, "bir SMS gönderir.");
	return 1;
}

stock CancelCall(playerid)
{
	if(pTemp[playerid][pCallLine] == INVALID_PLAYER_ID)
	    return 1;

	new targetid = pTemp[playerid][pCallLine];

	new month,
 		day,
 		year,
 		hour,
 		minute,
 		name_1[24],
 		name_2[24];

	format(name_1, 24, "%s", pTemp[targetid][pCallName]);
	format(name_2, 24, "%s", pTemp[playerid][pCallName]);

	new month_name[12][12] = {"Oca","Sub","Mar","Nis","May","Haz","Tem","Agu","Eyl","Eki","Ksm","Ara"};
	gettime(hour, minute);
	getdate(year, month, day);

	new query[256];
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `history_calls` (`to_number`,`from_number`,`to_name`,`from_name`,`time`,`date_hour`,`date_month`) VALUES ('%i','%i','%s','%s','%i','%02i:%02i','%s %02i %i')",
	(pTemp[playerid][pCallIncoming] == 1)?(PlayerInfo[playerid][pNumber]):(PlayerInfo[targetid][pNumber]),
    (pTemp[playerid][pCallIncoming] == 0)?(PlayerInfo[targetid][pNumber]):(PlayerInfo[playerid][pNumber]),
    (pTemp[playerid][pCallIncoming] == 1)?(name_2):(name_1),
    (pTemp[playerid][pCallIncoming] == 0)?(name_1):(name_2),
    pTemp[playerid][pCallTime],
	hour,
	minute,
	month_name[month-1],
	day,
	year);
	mysql_tquery(dbHandle, query);

	pTemp[playerid][pCallLine] = INVALID_PLAYER_ID;
	pTemp[playerid][pCallStatus] = 0;
	pTemp[playerid][pCallIncoming] = 0;
	pTemp[playerid][pCallTime] = 0;
	format(pTemp[playerid][pCallName], 24, "");

	pTemp[targetid][pCallLine] = INVALID_PLAYER_ID;
	pTemp[targetid][pCallStatus] = 0;
	pTemp[targetid][pCallIncoming] = 0;
	pTemp[targetid][pCallTime] = 0;
	format(pTemp[targetid][pCallName], 24, "");


	if(0 != IsPlayerPhoneCreated(playerid))
		Phone_Destroy(playerid);

	if(0 != IsPlayerPhoneCreated(targetid))
	    Phone_Destroy(targetid);

	SetPVarInt(playerid, #loud_speak, 0);
	SetPVarInt(targetid, #loud_speak, 0);

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_STOPUSECELLPHONE);

	RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
	RemovePlayerAttachedObject(targetid, ATTACH_HANDS);

	return 1;
}

GetMaxPlayerContacts(playerid)
{
	return 50;
}

GetNumberOwner(number)
{
	if (number == 0)
		return INVALID_PLAYER_ID;

	foreach (new i : Player)
	{
		if (IsPlayerLogged(i) && PlayerInfo[i][pNumber] == number)
			return i;
	}
	return INVALID_PLAYER_ID;
}

GetPlayerNetwork(playerid)
{
    new
	    Float: fDistance[2] = {99999.0, 0.0},
	    iIndex = -1,
        Float:fX,
	    Float:fY,
		Float:fZ;

	if (GetInterior(playerid) || GetWorld(playerid))
	{
		fX = PlayerInfo[playerid][pLocationPos][0];
		fY = PlayerInfo[playerid][pLocationPos][1];
		fZ = PlayerInfo[playerid][pLocationPos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);

	for (new i = 0; i < MAX_TOWERS; i ++)
	{
	    if (TowerInfo[i][towerOn] == 0)
	        continue;

		fDistance[1] = GetDistanceBetweenPoints(fX, fY, fZ, TowerInfo[i][towerPosX], TowerInfo[i][towerPosY], TowerInfo[i][towerPosZ]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}

	if (iIndex == -1)
		return 0;

 	switch(floatround(fDistance[0]))
	{
 		case 0..400: return 5;
   		case 401..600: return 4;
     	case 601..800: return 3;
      	case 801..1000: return 2;
		case 1001..1200: return 1;
		default: return 0;
  	}
	return 0;
}

SendSMStoPlayer(playerid, sendernumber_str[], sender_str[], text[], showsmstxt = 1)
{
    if (PlayerInfo[playerid][pNumber] == 0)
		return 1;


	new sendernumber = strval(sendernumber_str),
		month,
 		day,
 		year,
 		hour,
 		minute
	;

    new month_name[12][12] = {"Ocak","Þubat","Mart","Nisan","Mayýs","Haziran","Temmuz","Aðustos","Eylül","Ekim","Kasým","Aralýk"};

	gettime(hour, minute);
	getdate(year, month, day);

	new query[256 + 128];

	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `sms` (`to_name`,`from_name`,`to_number`,`from_number`,`text`,`date`,`read`) VALUES (%i,'%e',%i,%i,'%e','%s %02i %i, %02i:%02i',%i)",
	PlayerInfo[playerid][pNumber],
	sender_str,
	PlayerInfo[playerid][pNumber],
	sendernumber,
	text,
	month_name[month-1],
	day,
	year,
	hour,
	minute,
    (PlayerInfo[playerid][pPhoneAirplane] == 0 && PlayerInfo[playerid][pPhoneOff] == 0 && IsPlayerLogged(playerid))?(0):(-1));
	mysql_tquery(dbHandle, query);

	if (PlayerInfo[playerid][pPhoneAirplane] == 0 && PlayerInfo[playerid][pPhoneOff] == 0)
	{
		if (PlayerInfo[playerid][pPhoneSound] != 0)
		{
		    pc_cmd_my(playerid, "telefonu çalar.");
			PlaySound(playerid, 1084);

			if (!IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
			{
				if (!IsPlayerPhoneCreated(playerid)) Phone_Create(playerid);
			}
		}
	}
	if (showsmstxt)
	{
		if (strlen(text) > MAXLEN)
		{
			new pos = MAXLEN;
			if (pos < MAXLEN-1) pos = MAXLEN;
			if (PlayerInfo[playerid][pPhoneAirplane] == 0 && PlayerInfo[playerid][pPhoneOff] == 0)
			{
				SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: %.*s ...", pos, text);
				SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: ... %s Gönderen: %s.", text[pos], sender_str);
			}
		}
		else
		{
			if (PlayerInfo[playerid][pPhoneAirplane] == 0 && PlayerInfo[playerid][pPhoneOff] == 0)
				SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: %s Gönderen: %s.", text, sender_str);
		}
	}
	return 1;
}

stock PlaySoundForPlayersInRange(soundid, Float:range, Float:x, Float:y, Float:z)
{
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if (IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,range,x,y,z))
        {
            PlayerPlaySound(i, soundid, x, y, z);
        }
    }
	return 1;
}


stock TextTab(text[], minlen = 32, maxlen = 40, cellphone = 1, n = 1)
{
    new string[256],
		temporystring[256]
	;

	format(temporystring, sizeof(temporystring), "%s", text);

	if (n) if (strfind(temporystring, "\n", true) != -1)	return temporystring;
	else
	{
		new pos = strfind(temporystring, "\n", true);
		format(string, sizeof(string), "%.*s", string, pos+1, temporystring);
		strdel(temporystring, 0, pos+1);

	}
	for(new i = 0; i < floatround(strlen(text)/maxlen, floatround_floor); i++)
	{
		new pos = maxlen;
		while(temporystring[--pos] != ' ') {}

		if (pos < minlen)
		{
			pos = maxlen;
			if (temporystring[pos] == ' ')
			{
				format(string, sizeof(string), "%s%.*s", string, pos, temporystring);
				format(temporystring, 256, "%s",temporystring[pos+1]);
			} else {
				format(string, sizeof(string), "%s%.*s-", string, pos, temporystring);
				format(temporystring, 256, "%s",temporystring[pos]);
			}
		}
		else
		{
			format(string, sizeof(string), "%s%.*s", string, pos, temporystring);
			format(temporystring, 256, "%s",temporystring[pos+1]);
		}

		if (i+1 <= floatround(strlen(text)/maxlen, floatround_floor))
		{
			if (cellphone)	format(string, sizeof(string), "%s\n", string);
			else			format(string, sizeof(string), "%s~n~", string);
		}
	}

	format(string, sizeof(string), "%s%s", string, temporystring);
	return string;
}

stock TextTabQ(text[])
{
    new string[400],
		temporystring[400],
		pos,
		i = 0
	;

	format(temporystring, sizeof(temporystring), "%s", text);

	while((pos = strfind(temporystring, "\n")) != -1)
	{
		if (!i)
		{
			format(string, sizeof(string), "{AFAFAF}| %.*s", pos+1, temporystring);
			strdel(temporystring, 0, pos+1);
		}
		else
		{
			format(string, sizeof(string), "%s{AFAFAF}|{FFFFFF} %.*s", string, pos+1, temporystring);
			strdel(temporystring, 0, pos+1);
		}
		i++;
	}

	format(string, sizeof(string), "%s{AFAFAF}|{FFFFFF} %s", string, temporystring);
	return string;
}

stock LoadPlayerContacts(playerid)
{
    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `player_contacts` WHERE `userid` = '%i'", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "OnPlayerLoadContacts", "i", playerid);
	return 1;
}

stock PlacePlayerContact(playerid, contactid, contact[], number)
{
    new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `player_contacts` (userid, contact, number) VALUES (%i, '%e', %i)", PlayerInfo[playerid][pID], SQL_ReturnEscaped(contact), number);
	mysql_tquery(dbHandle, query, "OnContactInsert", "ii", playerid, contactid);
	return 1;
}

forward OnContactInsert(playerid, contactid);
public OnContactInsert(playerid, contactid)
{
    PlayerContacts[playerid][contactid][contactID] = cache_insert_id();
	return 1;
}

forward OnPlayerLoadContacts(playerid);
public OnPlayerLoadContacts(playerid)
{
	if(!cache_num_rows())
	    return 1;

	for(new i = 0; i < cache_num_rows(); i++)
	{
	    cache_get_value_int(i, "id", PlayerContacts[playerid][i][contactID]);
	    cache_get_value(i, "contact", PlayerContacts[playerid][i][contactName], 32);
	    cache_get_value_int(i, "number", PlayerContacts[playerid][i][contactNumber]);

		PlayerContacts[playerid][i][contactOn] = 1;
	}
	return 1;
}

SetPlayerCellphoneAction(playerid, enable)
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
		return 0;
	else
	{
		if (VehicleHasDoors(GetPlayerVehicleID(playerid)) && PlayerInfo[playerid][pTalk])
			return 0;

	    if (enable)
	    {
	        if (VehicleHasDoors(GetPlayerVehicleID(playerid)))
	        {
				ApplyAnimation(playerid, "CAR_CHAT", "carfone_in", 4.1, 0, 0, 0, 1, 0, 1);
			}
			else
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			}
		}
		else
		{
		    if (VehicleHasDoors(GetPlayerVehicleID(playerid)))
	        {
				ApplyAnimation(playerid, "CAR_CHAT", "carfone_out", 4.1, 0, 0, 0, 0, 0, 1);
			}
			else
			{
		    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			}
		}
	}
	return 1;
}

HangupCall(playerid)
{
	SetPlayerCellphoneAction(playerid, false);

	if (pTemp[playerid][pPayphone] == -1)
	{
		if (IsPlayerPhoneCreated(playerid)) Phone_Destroy(playerid);

		SetPVarInt(playerid, #loud_speak, 0);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);

		if (!pTemp[playerid][pEmergency]) {
			SaveCall(playerid);
		}
	}

	new id = -1;
	for(new i = 0; i < MAX_PAYPHONES; i++)
	{
		if (PayphoneInfo[i][phCaller] == playerid)
		{
			id = i;
			break;
		}
	}
	if (id != -1)
	{
		PayphoneInfo[id][phState] = PAYPHONE_STATE_NONE;
		Update_Payphone(id);
	}

	pTemp[playerid][pCallLine] = INVALID_PLAYER_ID;
	pTemp[playerid][pCallStatus] = 0;
	pTemp[playerid][pCallIncoming] = 0;
	pTemp[playerid][pCallTime] = 0;
	format(pTemp[playerid][pCallName], 25, "");
	pTemp[playerid][pEmergency] = 0;

	if (pTemp[playerid][pPayphone] != -1) cancelPayphone(playerid);
	return 1;
}

SaveCall(playerid)
{
	if (pTemp[playerid][pCallLine] == INVALID_PLAYER_ID) return 1;

	new targetid = pTemp[playerid][pCallLine],
		month,
		day,
		year,
		hour,
	 	minute,
		name_1[24],
		name_2[24];

	format(name_1, 25, "%s", pTemp[targetid][pCallName]);
	format(name_2, 25, "%s", pTemp[playerid][pCallName]);

	new month_name[12][12] = {"Oca","Sub","Mar","Nis","May","Haz","Tem","Agu","Eyl","Eki","Ksm","Ara"};

	gettime(hour, minute);
	getdate(year, month, day);

	new query[256];
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `history_calls` (`to_number`,`from_number`,`to_name`,`from_name`,`time`,`date_hour`,`date_month`) VALUES (%i,%i,'%s','%s',%i,'%02i:%02i','%s %02i, %i')",
	(pTemp[playerid][pCallIncoming] == 1) ? (PlayerInfo[playerid][pNumber]) : (PlayerInfo[targetid][pNumber]),
	(pTemp[playerid][pCallIncoming] == 0) ? (PlayerInfo[targetid][pNumber]) : (PlayerInfo[playerid][pNumber]),
    (pTemp[playerid][pCallIncoming] == 1) ? (name_2) : (name_1),
	(pTemp[playerid][pCallIncoming] == 0) ? (name_1) : (name_2),
	pTemp[playerid][pCallTime],
	hour,
	minute,
	month_name[month-1],
	day,
	year);
	mysql_tquery(dbHandle, query);

	return 1;
}

stock Phone_Contact_Info(playerid, contact = -1)
{
	if(contact == -1)
	{
	    PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][0]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][1]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][2]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][3]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][4]);
		DeletePVar(playerid, #select_contact);
	    return 1;
	}

	if(PlayerContacts[playerid][contact][contactOn] == 0)
	    return 1;

	new mes[128];
	format(mes, sizeof(mes), "%s~n~(%i)", PlayerContacts[playerid][contact][contactName], PlayerContacts[playerid][contact][contactNumber]);
    PlayerTextDrawSetString(playerid, TD_iphone_contact[playerid][0], TurkishCharFix(mes));
    PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][0]);

    PlayerTextDrawSetString(playerid, TD_iphone_contact[playerid][1], "Ara");
    PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][1]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][2]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][3], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][3]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][4]);

	SetPVarInt(playerid, #select_contact, contact);
	return 1;
}

stock Phone_Contacts(playerid, list = -1)
{
	if(list == -1)
	{
	    for(new i; i != 13;i++) PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i]);
	    PhoneInfo[playerid][phoneContact] = 0;
	    return 1;
	}
    PhoneInfo[playerid][phoneContact] = 1;
	new
	    number,
		count = 0,
		mes[MAX_PLAYER_NAME + 4];

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][0], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][0]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][1]);

    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][2]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][3], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][3], "Kisi ekle");
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][3]);

	for(new i = list * 9; i != MAX_PLAYER_CONTACTS; i++)
	{
	    if(PlayerContacts[playerid][i][contactOn] == 0)
	        continue;

		count++;
		break;
 	}

	if(count == 0)
	    return 1;

	count = 0;

	for(new i; i != 9;i++)
	{
 		PhoneInfo[playerid][phoneListed][i] = -1;
  		PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i + 4]);
 	}

	for(new i = 0; i != MAX_PLAYER_CONTACTS; i++)
	{
	    if(PlayerContacts[playerid][i][contactOn] == 0)
	        continue;

        number++;
		if(i < (list * 9))
		    continue;

		format(mes, sizeof(mes), "%i. %s", number, PlayerContacts[playerid][i][contactName]);
	    PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][count + 4], TurkishCharFix(mes));
	    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][count + 4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone_list[playerid][count + 4]);

        PhoneInfo[playerid][phoneListed][count] = i;

		if(count++ >= 8)
			break;
	}

	SetPVarInt(playerid, #contacts_list, list);
	return 1;
}

stock Phone_GPS(playerid, list = -1)
{
    if(list == -1)
	{
	    for(new i; i != 13;i++) PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i]);
	    PhoneInfo[playerid][phoneGPS] = 0;
	    return 1;
	}
    PhoneInfo[playerid][phoneGPS] = 1;

	new count,
		mes[MAX_PLAYER_NAME + 4];

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][0], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][0]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][1]);

    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][2]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][3], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][3], "-GPS-");
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][3]);

	for(new i; i != 9;i++)
	{
 		PhoneInfo[playerid][phoneListed][i] = -1;
  		PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i + 4]);
 	}

	for(new i = list * 9; i != sizeof(gps_location); i++)
	{
		format(mes, sizeof(mes), "%i. %s", i+1, gps_location[i][gpsName]);
	    PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][count + 4], mes);
	    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][count + 4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone_list[playerid][count + 4]);

        PhoneInfo[playerid][phoneListed][count] = i;

		if(count++ >= 8)
			break;
	}

	SetPVarInt(playerid, #contacts_list, list);
	return 1;
}

stock Phone_History(playerid, list = -1)
{
	if(list == -1)
	{
	    PlayerTextDrawHide(playerid, TD_iphone_list[playerid][0]);
	    PlayerTextDrawHide(playerid, TD_iphone_list[playerid][1]);
	    PlayerTextDrawHide(playerid, TD_iphone_list[playerid][2]);

	    PlayerTextDrawHide(playerid, TD_iphone_list[playerid][13]);
	    PlayerTextDrawHide(playerid, TD_iphone_list[playerid][14]);
	    PlayerTextDrawHide(playerid, TD_iphone_list[playerid][15]);
	    PhoneInfo[playerid][phoneHistory] = 0;
	    return 1;
	}

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `history_calls` WHERE `to_number` = %i OR `from_number` = %i ORDER BY `id` DESC", PlayerInfo[playerid][pNumber], PlayerInfo[playerid][pNumber]);
	mysql_tquery(dbHandle, query, "ShowPhoneHistory", "ii", playerid, list);
	return 1;
}

forward ShowPhoneHistory(playerid, list);
public ShowPhoneHistory(playerid, list)
{
    PhoneInfo[playerid][phoneHistory] = 1;

	new
		count,
		mes[256],
		rows = cache_num_rows(),
		to_name[MAX_PLAYER_NAME],
		from_name[MAX_PLAYER_NAME],
		to_number,
		date_hour[24],
		date_month[24],
		time;


    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][0], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][0]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][1]);

    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][2]);

	if(!rows || rows < (list * 3))
	    return 1;

	for(new i; i != 3;i++)
	{
 		PhoneInfo[playerid][phoneListed][i] = -1;
  		PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i + 13]);
 	}

	for(new i = list * 3; i != rows; i++)
	{

	    cache_get_value_int(i, "to_number", to_number);
        cache_get_value(i, "to_name", to_name);
        cache_get_value(i, "from_name", from_name);
        cache_get_value(i, "date_hour", date_hour);
        cache_get_value(i, "date_month", date_month);
		cache_get_value_int(i, "time", time);

		format(mes, sizeof(mes), "Tarih: %s    %s~n~%s~n~~n~%s~n~", date_hour, date_month, (to_number == PlayerInfo[playerid][pNumber])?("Gelen arama"):("Giden arama"), (to_number == PlayerInfo[playerid][pNumber])?(to_name):(from_name));
		if(to_number == PlayerInfo[playerid][pNumber] && time == 0)
		{
		    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][count + 13], -1523963137);
		    strcat(mes, "Cevapsiz arama");
		}
		else
		{
		    format(mes, sizeof(mes), "%sCagri suresi: %s", mes, ConvertSecond(time));
		    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][count + 13], 8388863);
		}
	    PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][count + 13], TurkishCharFix(mes));
        PlayerTextDrawShow(playerid, TD_iphone_list[playerid][count + 13]);

        cache_get_value_int(i, "id", PhoneInfo[playerid][phoneListed][count]);

        count++;
		if(count >= 3)
			break;
	}
	SetPVarInt(playerid, #contacts_list, list);
	return 1;
}

this::ShowHistoryInfo(playerid)
{
    if (!cache_num_rows())
    	return 1;

	new
		mes[256],
		to_name[MAX_PLAYER_NAME],
		from_name[MAX_PLAYER_NAME],
		to_number,
		from_number,
		date_hour[24],
		date_month[24],
		time
	;

    cache_get_value_int(0, "to_number", to_number);
    cache_get_value(0, "to_name", to_name);

	cache_get_value_int(0, "from_number", from_number);
    cache_get_value(0, "from_name", from_name);

	cache_get_value(0, "date_hour", date_hour);
 	cache_get_value(0, "date_month", date_month);
    cache_get_value_int(0, "time", time);

	new callstatus[70],
		numberstatus[55];

	if (time == 0)
	{
		if (to_number == PlayerInfo[playerid][pNumber])
		{
			format(callstatus, sizeof(callstatus), "%s\t\t{c12a2a}Cevapsýz çaðrý\t\t{FFFFFF}-", date_hour);
			format(numberstatus, sizeof(numberstatus), "%s", from_name);
			if (from_number != strval(numberstatus))
				format(numberstatus, sizeof(numberstatus), "%s (%i)", numberstatus, from_number);
		}
		else
		{
			format(callstatus, sizeof(callstatus), "%s\t\t{c12a2a}Ýptal edilen çaðrý\t\t{FFFFFF}-", date_hour);
			format(numberstatus, sizeof(numberstatus), "%s", to_name);
			if (to_number != strval(numberstatus))
				format(numberstatus, sizeof(numberstatus), "%s (%i)", numberstatus, to_number);
		}
	}
	else
	{
		if (to_number == PlayerInfo[playerid][pNumber])
		{
			format(callstatus, sizeof(callstatus), "%s\t\t{a9c4e4}Gelen{FFFFFF}\t\t%s", date_hour, ConvertSecond(time));
			format(numberstatus, sizeof(numberstatus), "%s", from_name);
			if (from_number != strval(numberstatus))
				format(numberstatus, sizeof(numberstatus), "%s (%i)", numberstatus, from_number);
		}
		else
		{
			format(callstatus, sizeof(callstatus), "%s\t\t{a9c4e4}Giden{FFFFFF}\t\t%s", date_hour, ConvertSecond(time));
			format(numberstatus, sizeof(numberstatus), "%s", to_name);
			if (to_number != strval(numberstatus))
				format(numberstatus, sizeof(numberstatus), "%s (%i)", numberstatus, to_number);
		}
	}

	format(mes, sizeof(mes), "Telefon:{FFFFFF} %s\n\n%s\n{FFFFFF}%s", numberstatus, date_month, callstatus);
	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "Çaðrý bilgileri", mes, "X", "");
	return 1;
}

stock Phone_SMS(playerid, list = -1)
{
	if(list == -1)
	{
	    for(new i; i != 13;i++) PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i]);
	    PhoneInfo[playerid][phoneSMS] = 0;
	    return 1;
	}

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `sms` WHERE `to_number`='%i' AND `read`!='-1' ORDER BY `id` DESC", PlayerInfo[playerid][pNumber]);
	mysql_tquery(dbHandle, query, "ShowPhoneSMS", "ii", playerid, list);
	return 1;
}

stock Phone_SMS_Info(playerid, sms = -1)
{
	if(sms == -1)
	{
	    PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][0]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][1]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][2]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][3]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][4]);
		DeletePVar(playerid, #select_sms);
	    return 1;
	}

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `sms` SET `read`=1 WHERE `id` = %i", sms);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `sms` WHERE `id` = %i", sms);
	mysql_tquery(dbHandle, query, "ShowPhoneSMSInfo", "ii", playerid, sms);
	return 1;
}

this::ShowSMS(playerid)
{
	if (!cache_num_rows())
	{
	    pc_cmd_telefon(playerid, "");
	    return SendErrorMessage(playerid, "Mesaj bulunamadý.");
	}

	new
		from_name[24],
		to_name[24],
	    from_number,
		to_number,
	    date[30],
	    text[256],
	    mes[500]
	;

    cache_get_value_int(0, "from_number", from_number);
	cache_get_value(0, "from_name", from_name);
	cache_get_value_int(0, "to_number", to_number);
	cache_get_value(0, "to_name", to_name);
	cache_get_value(0, "date", date);
	cache_get_value(0, "text", text);

	if (from_number == PlayerInfo[playerid][pNumber])
	{
		if (to_number == strval(to_name))
		{
			format(mes, sizeof(mes), "{a9c4e4}Alýcý:\t\t\t{ffffff}%s\n\
			{a9c4e4}Tarih:\t\t\t{ffffff}%s\n\n", to_name, date);
		}
		else
		{
			format(mes, sizeof(mes), "{a9c4e4}Alýcý:\t\t\t{ffffff}%s (%i)\n\
			{a9c4e4}Tarih:\t\t\t{ffffff}%s\n\n", to_name, to_number, date);
		}
	}
	else
	{
		if (from_number == strval(from_name))
		{
			format(mes, sizeof(mes), "{a9c4e4}Gönderen:\t\t{ffffff}%s\n\
			{a9c4e4}Tarih:\t\t\t{ffffff}%s\n\n", from_name, date);
		}
		else
		{
			format(mes, sizeof(mes), "{a9c4e4}Gönderen:\t\t{ffffff}%s (%i)\n\
			{a9c4e4}Tarih:\t\t\t{ffffff}%s\n\n", from_name, from_number, date);
		}
	}

	new forward_id, id;
	cache_get_value_int(0, "forward", forward_id);
	cache_get_value_int(0, "id", id);

	if (forward_id)	format(mes, sizeof(mes), "%s%s", mes, TextTabQ(TextTab(text)));
	else 											format(mes, sizeof(mes), "%s%s", mes, TextTab(text));

	SetPVarString(playerid, #sms_number, from_name);
	SetPVarInt(playerid, #select_sms, id);

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `sms` SET `read`='1' WHERE `id`=%i", id);
	mysql_tquery(dbHandle, query);

	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "Mesaj", mes, "", "Ýptal");

	return 1;
}

forward ShowPhoneSMSInfo(playerid, sms);
public ShowPhoneSMSInfo(playerid, sms)
{
	if(!cache_num_rows())
	    return 1;

    new mes[128],
        name[24],
		from_number,
        date[21];

	cache_get_value(0, "from_name", name);
	cache_get_value(0, "date", date);
	cache_get_value_int(0, "from_number", from_number);

	format(mes, sizeof(mes), "%s~n~(%i)~n~%s", name, from_number, date);
    PlayerTextDrawSetString(playerid, TD_iphone_contact[playerid][0], TurkishCharFix(mes));
    PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][0]);

    PlayerTextDrawSetString(playerid, TD_iphone_contact[playerid][1], "Goster");
	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][1]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][2]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][3], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][3]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][4]);

	SetPVarInt(playerid, #select_sms, sms);
	SetPVarString(playerid, #sms_number, name);
	return 1;
}

forward ShowPhoneSMS(playerid, list);
public ShowPhoneSMS(playerid, list)
{
    PhoneInfo[playerid][phoneSMS] = 1;

	new
		count,
		mes[MAX_PLAYER_NAME + 4],
		rows = cache_num_rows(),
		name[MAX_PLAYER_NAME];


    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][0], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][0]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][1]);

    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][2]);

	PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][3], "Cevapla");
	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][3], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][3]);

	if(!rows || rows < (list * 9))
	    return 1;

	for(new i; i != 9;i++)
	{
 		PhoneInfo[playerid][phoneListed][i] = -1;
  		PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i + 4]);
 	}

	for(new i = list * 9; i != rows; i++)
	{
		new read;
		cache_get_value_int(i, "read", read);
        cache_get_value(i, "from_name", name);

		format(mes, sizeof(mes), "%i. %s", i+1, name);
	    PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][count + 4], mes);

	    if(read == 1)
		    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][count + 4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		else
		    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][count + 4], 0xFFFF00FF);

		PlayerTextDrawShow(playerid, TD_iphone_list[playerid][count + 4]);

        cache_get_value_int(i, "id", PhoneInfo[playerid][phoneListed][count]);

        count++;
		if(count >= 8)
			break;
	}
	SetPVarInt(playerid, #contacts_list, list);
	return 1;
}
Dialog:SelectGPS(playerid, response, listitem, inputtext[])
{
	listitem = GetPVarInt(playerid, #select_gps);

	if(!response)
	    return 1;

   	Waypoint_Set(playerid, gps_location[listitem][gpsX], gps_location[listitem][gpsY], gps_location[listitem][gpsZ]);
	SendClientMessageEx(playerid, COLOR_GREEN, "%s lokasyonu haritada belirlendi.", gps_location[listitem][gpsName]);
	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:DeleteSMS(playerid, response, listitem, inputtext[])
{
    if(!response)
    	return 1;

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `sms` WHERE `id` = %i", GetPVarInt(playerid, #select_sms));
	mysql_tquery(dbHandle, query);

	Phone_SMS_Info(playerid);
    Phone_SMS(playerid, 0);
	return 1;
}

Dialog:SendSMS(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(strlen(inputtext) < 1 || strlen(inputtext) > 24)
 		return Dialog_Show(playerid, SendSMS, DIALOG_STYLE_INPUT, "Mesaj", "Mesajý girin:", "Gönder", "Geri");

    SetPVarString(playerid, #sms_number, inputtext);
    new mes[24];
    format(mes, sizeof(mes), "[%s]", inputtext);
	Dialog_Show(playerid, SendSMS2, DIALOG_STYLE_INPUT, mes, "Mesajý girin:", "Gönder", "Geri");
	return 1;
}

Dialog:SendSMS2(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(strlen(inputtext) < 1 || strlen(inputtext) > 127)
	{
	    new mes[32];
	    GetPVarString(playerid, #sms_number, mes, 32);
	    Dialog_Show(playerid, SendSMS2, DIALOG_STYLE_INPUT, mes, "Mesajý girin:", "Gönder", "Geri");
	    return 1;
	}

	new mes[128 + 32],
	    name[32];

    GetPVarString(playerid, #sms_number, name, 32);

	format(mes, sizeof(mes), "%s %s", name, inputtext);
	pc_cmd_sms(playerid, mes);
	return 1;
}

Dialog:SendSMS3(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new contact = GetPVarInt(playerid, #select_contact);

	if(contact < 0 || contact >= MAX_PLAYER_CONTACTS || PlayerContacts[playerid][contact][contactOn] == 0)
	    return 1;

	if(strlen(inputtext) < 1 || strlen(inputtext) > 127)
	{
	    new mes[128];
	    format(mes, sizeof(mes), "[%s]", PlayerContacts[playerid][contact][contactName]);
	    Dialog_Show(playerid, SendSMS3, DIALOG_STYLE_INPUT, mes, "Mesajý girin:", "Gönder", "Geri");
	    return 1;
	}

	new mes[128 + 12];
	format(mes, sizeof(mes), "%i %s", PlayerContacts[playerid][contact][contactNumber], inputtext);
	pc_cmd_sms(playerid, mes);
	return 1;
}

Dialog:DeleteContact(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new contact = GetPVarInt(playerid, #select_contact);

	if(contact < 0 || contact >= MAX_PLAYER_CONTACTS || PlayerContacts[playerid][contact][contactOn] == 0)
	    return 1;

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `player_contacts` WHERE `id` = %i", PlayerContacts[playerid][contact][contactID]);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `sms` SET `from_name` = `from_number` WHERE `to_number` = '%i' AND `from_number`='%i'", PlayerInfo[playerid][pNumber], PlayerContacts[playerid][contact][contactNumber]);
	mysql_tquery(dbHandle, query);

    mysql_format(dbHandle, query, sizeof(query), "UPDATE `history_calls` SET `from_name` = `from_number` WHERE `to_number` = '%i' AND `from_number`='%i'", PlayerInfo[playerid][pNumber], PlayerContacts[playerid][contact][contactNumber]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid, COLOR_GREEN, "%s (%i) kiþisi rehberden silindi.", PlayerContacts[playerid][contact][contactName], PlayerContacts[playerid][contact][contactNumber]);
	PlayerContacts[playerid][contact][contactNumber] = 0;
	PlayerContacts[playerid][contact][contactOn] = 0;
	PlayerContacts[playerid][contact][contactID] = 0;

	Phone_Contact_Info(playerid);
	Phone_Contacts(playerid, 0);

	DeletePVar(playerid, #select_contact);
	return 1;
}

Dialog:AddContact(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new
		number = strval(inputtext);

	if(number < 1 || number > 999999999)
	    return SendErrorMessage(playerid, "Geçersiz numara girdiniz.");

	SetPVarInt(playerid, #contact_number, number);

	new mes[128];
	format(mes, sizeof(mes), "Numara: %i.\nÝsim girin:", number);
	Dialog_Show(playerid, AddContact2, DIALOG_STYLE_INPUT, "Rehber", mes, "Ýlerle", "Geri");
	return 1;
}

Dialog:AddContact2(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(strlen(inputtext) < 1 || strlen(inputtext) > 23)
	{
	    new mes[128];
		format(mes, sizeof(mes), "Numara: %i.\nÝsim girin:", GetPVarInt(playerid, #contact_number));
		Dialog_Show(playerid, AddContact2, DIALOG_STYLE_INPUT, "Rehber", mes, "Ýlerle", "Geri");
		return SendErrorMessage(playerid, "Ýsim 23 karakterden uzun 1 karakterden kýsa olamaz.");
	}

	new contact = -1,
	    count;

	for(new i = 0; i != MAX_PLAYER_CONTACTS; i++)
    {
        if(PlayerContacts[playerid][i][contactOn] != 0)
            count++;

        if(PlayerContacts[playerid][i][contactOn] == 0 && contact == -1)
        	contact = i;
    }

	if(count >= GetMaxPlayerContacts(playerid) || contact == -1)
	    return SendErrorMessage(playerid, "Rehberine daha fazla kiþi ekleyemezsin.");

	PlayerContacts[playerid][contact][contactNumber] = GetPVarInt(playerid, #contact_number);
	format(PlayerContacts[playerid][contact][contactName], 32, "%s", inputtext);
	PlayerContacts[playerid][contact][contactOn] = 1;

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `sms` SET `from_name` = '%e' WHERE `to_number` = '%i' AND `from_number`='%i'", inputtext, PlayerInfo[playerid][pNumber], PlayerContacts[playerid][contact][contactNumber]);
	mysql_tquery(dbHandle, query);

    mysql_format(dbHandle, query, sizeof(query), "UPDATE `history_calls` SET `from_name` = '%e' WHERE `to_number` = '%i' AND `from_number`='%i'", inputtext, PlayerInfo[playerid][pNumber], PlayerContacts[playerid][contact][contactNumber]);
	mysql_tquery(dbHandle, query);

	PlacePlayerContact(playerid, contact, inputtext, GetPVarInt(playerid, #contact_number));

	Phone_Contacts(playerid, GetPVarInt(playerid, #contacts_list));
	return 1;
}
CMD:rehbergoster(playerid, params[])
{
    if (PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "Bir telefona sahip deðilsin.");

    if (PlayerInfo[playerid][pPhoneOff] != 0)
        return SendErrorMessage(playerid, "Telefon kapalý.");

	new userid;
	if (sscanf(params,"u", userid)) 				return SendHelpMessage(playerid, "/rehbergoster [ID / isim]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);

	new count;
	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
	{
		if (PlayerContacts[playerid][i][contactOn] == 0)
		    continue;

		count++;
		break;
	}

	if (count == 0)
	    return SendErrorMessage(playerid, "Kiþi yok!");


	SendClientMessageEx(userid, COLOR_HELPS, "%s sana kiþilerimin bir listesini gösterdim.", GetNameWithMask(playerid));
   	SendClientMessageEx(playerid, COLOR_HELPS, "%s adlý kiþiye kiþilerinizin listesini gösterdiniz. ", GetNameWithMask(userid));

	count = 0;
	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
	{
		if (PlayerContacts[playerid][i][contactOn] == 0)
		    continue;

		count++;
		SendClientMessageEx(userid, COLOR_GRAD2, "%i. %s - telefon numarasý: %i", count, PlayerContacts[playerid][i][contactName], PlayerContacts[playerid][i][contactNumber]);
	}

    new mes[128];
	format(mes, sizeof(mes), "%s %s adlý kiþiye rehberini gösterir.", GetNameWithMask(playerid), GetNameWithMask(userid));
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 15.0, 3000);
	return 1;
}

CMD:rehberkisigoster(playerid, params[])
{
    if (PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "Bir telefona sahip deðilsin.");

    if (PlayerInfo[playerid][pPhoneOff] != 0)
        return SendErrorMessage(playerid, "Telefon kapalý.");

    new userid,
        contact[32];

	if (sscanf(params,"us[32]", userid, contact)) 	return SendHelpMessage(playerid, "/rehberkisigoster [ID / isim] [rehberde kayýtlý isim]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);

	new count = -1;
	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
	{
		if (PlayerContacts[playerid][i][contactOn] == 0 || !CompareStrings(contact, PlayerContacts[playerid][i][contactName]))
		    continue;

		count = i;

        SendClientMessageEx(userid, COLOR_HELPS, "%s size %s adlý kiþinin bilgilerini gösterdi", GetNameWithMask(playerid), PlayerContacts[playerid][i][contactName]);
   		SendClientMessageEx(playerid, COLOR_HELPS, "%s adlý kiþiye %s adlý kiþinin bilgilerini gösterdin.", GetNameWithMask(userid), PlayerContacts[playerid][i][contactName]);

		SendClientMessageEx(userid, COLOR_GRAD2, "1. %s - telefon numarasý: %i", PlayerContacts[playerid][i][contactName], PlayerContacts[playerid][i][contactNumber]);

        new mes[128];
		format(mes, sizeof(mes), "%s %s adlý kiþiye rehberi gösterir.", GetNameWithMask(playerid), GetNameWithMask(userid));
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 15.0, 3000);
		break;
	}

	if (count == -1)
	    return SendWarningMessage(playerid, "Bu kiþi bulunamadý.");

	return 1;
}

CMD:hoparlor(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu özelliði þu anda kullanamazsýnýz.");

    if (PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "Bir telefona sahip deðilsin.");

	if (pTemp[playerid][pCallLine] == INVALID_PLAYER_ID || pTemp[playerid][pCallStatus] != 2)
	    return SendWarningMessage(playerid, "Herhangi bir aramada deðilsin.");

	if (GetPVarInt(playerid, #loud_speak) == 0)
	{
		SetPVarInt(playerid, #loud_speak, 1);
		SM2(playerid, "Hoparlörü açtýnýz.");
	}
	else
	{
		SetPVarInt(playerid, #loud_speak, 0);
		SM2(playerid, "Hoparlörü kapattýnýz.");
	}
	return 1;
}

alias:telefon("telef");
CMD:telefon(playerid, params[])
{
	if (PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "Bir telefona sahip deðilsin.");

	if (GetPVarInt(playerid, #pDelay))	return 1;
	if (IsPlayerUseMDC(playerid)) 		return SendErrorMessage(playerid, "MDC açýkken telefonu kullanamazsýn.");

	if (IsPlayerPhoneCreated(playerid))
	{
		if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID || pTemp[playerid][pEmergency])
			pc_cmd_telefonkapat(playerid, "");

	    return Phone_Destroy(playerid);
	}

	if(GetPVarInt(playerid, #selfie))
	    pc_cmd_selfie(playerid, "");

	if (pTemp[playerid][pPayphone] != -1)
		return SendErrorMessage(playerid, "Zaten ankesörlü telefon kullanýyorsunuz.");

	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu özelliði þu anda kullanamazsýnýz.");

	Phone_Create(playerid);
	return 1;
}

alias:fare("pc", "imlec");
CMD:fare(playerid, params[])
{
	if (IsPlayerPhoneCreated(playerid)) SelectTextDraw(playerid, COLOR_LIGHTRED);
	else SelectTextDraw(playerid, 255);
	return 1;
}

alias:sms("smsgonder");
CMD:sms(playerid, params[])
{
    if(PlayerInfo[playerid][pInjured] != 0  || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
		return SCM(playerid, COLOR_GREY, "Bu komutu þu an kullanamazsýnýz.");

    if (PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "Bir telefona sahip deðilsin.");

    if (PlayerInfo[playerid][pPhoneOff] != 0)
        return SendCellMessage(playerid, "Telefon kapalý.");

	if (PlayerInfo[playerid][pPhoneAirplane] == 1)
	    return SendCellMessage(playerid, "Arama ve SMS yapýlamaz - telefonunuz uçuþ modundadýr.");

	new number_str[24],
	    number,
	    targetid,
	    text[128];

	if (sscanf(params,"s[24]s[128]", number_str, text))
		return SendHelpMessage(playerid, "/sms [telefon numarasý / rehberde kayýtlý isim] [mesaj]");

	number = strval(number_str);

	for(new i = 0; i != MAX_PLAYER_CONTACTS; i++)
    {
        if(PlayerContacts[playerid][i][contactOn] == 0 || strcmp(PlayerContacts[playerid][i][contactName], number_str, true) != 0)
            continue;

        number = PlayerContacts[playerid][i][contactNumber];
        break;
    }

    if (number == PlayerInfo[playerid][pNumber])
    	return SendErrorMessage(playerid, "Kendinize SMS atamazsýnýz.");

    targetid = GetNumberOwner(number);
	if(!IsPlayerLogged(targetid))
	{
	    new query[201];
	    mysql_format(dbHandle, query, sizeof(query), "\
	    SELECT number, (SELECT `contact` FROM `player_contacts` WHERE users.id = player_contacts.userid AND player_contacts.number = '%i') as contact \
 		FROM `users` WHERE `number` = '%i'", PlayerInfo[playerid][pNumber], number);

 		mysql_tquery(dbHandle, query, "OfflineSMS", "iis", playerid, number, text);
	    return 1;
	}

    new find_phone[2] = {0, 0},
		name_playerid[MAX_PLAYER_NAME],
		name_targetid[MAX_PLAYER_NAME];

    for (new i = 0; i != MAX_PLAYER_CONTACTS; i ++)
	{
		if(PlayerContacts[playerid][i][contactOn] != 0 && PlayerContacts[playerid][i][contactNumber] == number)
		{
 			strmid(name_playerid, PlayerContacts[playerid][i][contactName], 0, strlen(PlayerContacts[playerid][i][contactName]), 32);
 			find_phone[0] = 1;
		}
		if(PlayerContacts[targetid][i][contactOn] != 0 && PlayerContacts[targetid][i][contactNumber] == PlayerInfo[playerid][pNumber])
		{
 			strmid(name_targetid, PlayerContacts[targetid][i][contactName], 0, strlen(PlayerContacts[targetid][i][contactName]), 32);
	        find_phone[1] = 1;
		}
	}

	if(!find_phone[0]) format(name_playerid, 24, "%i", number);
	if(!find_phone[1]) format(name_targetid, 24, "%i", PlayerInfo[playerid][pNumber]);

	new month,
 		day,
 		year,
 		hour,
 		minute;

	new month_name[12][12] = {"Ocak","Þubat","Mart","Nisan","Mayýs","Haziran","Temmuz","Aðustos","Eylül","Ekim","Kasým","Aralýk"};
	gettime(hour, minute);
	getdate(year, month, day);

	new query[256 + 128];
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `sms` (`to_name`,`from_name`,`to_number`,`from_number`,`text`,`date`,`read`) VALUES ('%e','%e',%i,%i,'%e','%s %02i %i, %02i:%02i','%i')",
	name_playerid,
	name_targetid,
	number,
	PlayerInfo[playerid][pNumber],
	SQL_ReturnEscaped(text),
	month_name[month-1],
	day,
	year,
	hour,
	minute,
    (PlayerInfo[targetid][pPhoneAirplane] == 0 && PlayerInfo[targetid][pPhoneOff] == 0)?(0):(-1));
	mysql_tquery(dbHandle, query);

	if(PlayerInfo[targetid][pPhoneAirplane] == 0 && PlayerInfo[targetid][pPhoneOff] == 0)
	{
		if(PlayerInfo[targetid][pPhoneSound] == 0)
		{
		    pc_cmd_do(targetid, "Telefonuna mesaj bildirim sesi geldi.");
			PlaySound(targetid, 1084);
		}

    	else if(PlayerInfo[targetid][pPhoneSound] == 1)
		{
		    if(0 == IsPlayerPhoneCreated(targetid)) Phone_Create(targetid, 1);
		}
	}

	if(strlen(text) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		if(PlayerInfo[targetid][pPhoneAirplane] == 0 && PlayerInfo[targetid][pPhoneOff] == 0)
		{
			SendClientMessageEx(targetid, COLOR_YELLOWG, "SMS: %.*s ...", pos, text);
			SendClientMessageEx(targetid, COLOR_YELLOWG, "SMS: ... %s Kiþi: %s.", text[pos], name_targetid);
		}
		SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: %.*s ...", pos, text);
		SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: ... %s Kiþi: %s.", text[pos], name_playerid);
	}
	else
	{
	    if(PlayerInfo[targetid][pPhoneAirplane] == 0 && PlayerInfo[targetid][pPhoneOff] == 0)
			SendClientMessageEx(targetid, COLOR_YELLOWG, "SMS: %s Kiþi: %s.", text, name_targetid);

		SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: %s Kiþi: %s.", text, name_playerid);
	}

	pc_cmd_ame(playerid, "birisine SMS atar.");
	return 1;
}

CMD:selfie(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu özelliði þu anda kullanamazsýnýz.");

    if(!GetPVarInt(playerid, #selfie))
    {
		if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID || IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Þu anda kamerayý kullanamazsýnýz.");

        new Float: x,
			Float: y,
			Float: z,
			Float: new_x,
			Float: new_y,
			Float: radius = 0.9,
			Float: rot;

        TogglePlayerControllable(playerid, 0);

	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, rot);
     	new_x = x + radius * floatcos(rot, degrees);
	    new_y = y + radius * floatsin(rot, degrees);

		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
	   	SetPlayerAttachedObject(playerid, ATTACH_HANDS, phone_model[PlayerInfo[playerid][pPhoneModel]], 6, 0.06, 0.01, 0.08, 180.0, 90.0, 0.0);

		SetPlayerCameraPos(playerid, new_x, new_y, z + 0.78);
		SetPlayerCameraLookAt(playerid, x, y, z + 0.60);
	    SetPlayerFacingAngle(playerid, rot -90.0);

		SetPVarFloat(playerid, #selfie_z, 0.60);

		ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
  		SetPVarInt(playerid, #selfie, 1);

		SetPlayerArmedWeapon(playerid, 0);

        InfoMSG(playerid, "~y~F8~w~ tusuna basarak ekran goruntusu alabilir, ~y~F7~w~ tusuna basarak sohbeti gizleyebilirsiniz.~n~~r~W, A, S~w~ ve ~r~D~w~ tuslariyla kamerayi kontrol edebilir, ~y~ENTER~w~ tusuyla geri donebilirsiniz.~n~~r~/headmove~w~ komutuyla karakterinizin kafasini sabitleyebilirsiniz.", 5);
		CancelSelectTextDraw(playerid);
		return 1;
 	}
	TogglePlayerControllable(playerid, 1);
 	SetCameraBehindPlayer(playerid);

	RemovePlayerAttachedObject(playerid, ATTACH_HANDS);

	if(IsPlayerPhoneCreated(playerid))
 		SetPlayerAttachedObject(playerid, ATTACH_HANDS, phone_model[PlayerInfo[playerid][pPhoneModel]], 6, 0.111, -0.000999, 0.0, 77.9, -171.6, -3.40001, 1.0, 1.0, 1.0);

	ApplyAnimation(playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1);
 	DeletePVar(playerid, #selfie);
	return 1;
}

alias:telefonac("tac");
CMD:telefonac(playerid, params[])
{
    if (PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "Bir telefona sahip deðilsin.");

    new targetid = pTemp[playerid][pCallLine],
        mes[128];

    if(pTemp[playerid][pCallStatus] == 2)
        return SendCellMessage(playerid, "Baþkasýyla konuþuyorsun.");

	if(targetid == INVALID_PLAYER_ID || pTemp[playerid][pCallStatus] != 1)
        return SendCellMessage(playerid, "Geçersiz numara.");

	if(pTemp[targetid][pCallLine] != playerid)
	    return SendErrorMessage(playerid, "Bir hata oluþtu.");

	//SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

    pTemp[playerid][pCallIncoming] = 1;
    pTemp[targetid][pCallIncoming] = 0;

    pTemp[playerid][pCallStatus] = 2;
    pTemp[targetid][pCallStatus] = 2;

    pTemp[playerid][pCallTime] = 0;
    pTemp[targetid][pCallTime] = 0;

    if(0 == IsPlayerPhoneCreated(targetid))
	    Phone_Create(targetid);
	else
	{
	    Phone_Menu(targetid, 0);
	    Phone_Block(targetid, 0);

	   	format(mes, sizeof(mes), "%s~n~%s", pTemp[targetid][pCallName], ConvertSecond(pTemp[targetid][pCallTime]));
   		PlayerTextDrawSetString(targetid, TD_iphone_name[targetid], mes);
	   	PlayerTextDrawShow(targetid, TD_iphone_name[targetid]);
	}

    if(0 == IsPlayerPhoneCreated(playerid))
	    Phone_Create(playerid);
	else
	{
	    Phone_Menu(playerid, 0);
	    Phone_Block(playerid, 0);

	   	format(mes, sizeof(mes), "%s~n~%s", pTemp[playerid][pCallName], ConvertSecond(pTemp[playerid][pCallTime]));
   		PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], mes);
	   	PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);

	   	PlayerTextDrawShow(playerid, TD_iphone_button[playerid][0]);
  		PlayerTextDrawShow(playerid, TD_iphone_button[playerid][1]);

  		PlayerTextDrawHide(playerid, TD_iphone_button[playerid][2]);
  		PlayerTextDrawHide(playerid, TD_iphone_button[playerid][3]);
  		PlayerTextDrawHide(playerid, TD_iphone_button[playerid][4]);
  		PlayerTextDrawHide(playerid, TD_iphone_button[playerid][5]);
	}

	SCM(targetid, -1, "> Kiþi telefonu açtý.");

    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	return 1;
}

alias:telefonkapat("tkapat", "/telkapat");
CMD:telefonkapat(playerid, params[])
{
    if(PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "Telefonunuz bulunmuyor.");

	if(pTemp[playerid][pEmergency])
	{
	    pTemp[playerid][pEmergency] = 0;
	    SCM(playerid, -1, "> Görüþmeyi sonlandýrdýnýz.");

	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
	    return 1;
	}

	if(pTemp[playerid][pCallLine] == INVALID_PLAYER_ID)
	    return 1;

	new targetid = pTemp[playerid][pCallLine];

	if (!pTemp[playerid][pEmergency] && pTemp[playerid][pCallStatus] == 2)
	{
	    SendCellMessage(playerid, "%s kiþisiyle görüþmeni sonlandýrdýn.", pTemp[playerid][pCallName]);
	    SendCellMessage(targetid, "Kýsa bip sesleri duyuldu.");
 	}

	else if (!pTemp[playerid][pEmergency] && pTemp[playerid][pCallStatus] == 1)
	{
	    SendCellMessage(targetid, "Aradýðýnýz numara çaðrýyý reddetti.");
	    SendCellMessage(playerid, "Telefon çaðrýsý sona erdi.");

 	}
	CancelCall(playerid);
	return 1;
}

CMD:ara(playerid, params[])
{
    if(PlayerInfo[playerid][pInjured] != 0  || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
		return SCM(playerid, COLOR_GREY, "Bu durumdayken arama yapamazsýn.");

    if (PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "Bir telefona sahip deðilsin.");

    if (PlayerInfo[playerid][pPhoneOff] != 0)
        return SendCellMessage(playerid, "Telefon kapalý.");

	if (PlayerInfo[playerid][pPhoneAirplane] == 1)
	    return SendCellMessage(playerid, "Arama ve SMS yapýlamaz - telefonunuz uçuþ modundadýr.");

    if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID || pTemp[playerid][pEmergency])
	    return SendCellMessage(playerid, "Bitirilmemiþ bir aramanýz var. Kapatmak için '/tkapat' yazýn.");

	if (pTemp[playerid][pPayphone] != -1)
		return SendErrorMessage(playerid, "Zaten ankesörlü telefon kullanýyorsunuz.");

	new number_str[32],
	    number,
	    targetid,
	    mes[52];

	if (sscanf(params,"s[32]", number_str))
	{
		SendHelpMessage(playerid, "/ara [numara / rehberde kayýtlý isim / liste]");

		if (CompareStrings(number_str, "liste"))
		{
			SM2(playerid, "Acil Durum: 911");
			//SM2(playerid, "Polis: 991");
			SM2(playerid, "Taksi: 555");
			//SM2(playerid, "Tamirhane: 444");
		}
		return 1;
	}

	number = strval(number_str);

	for(new i = 0; i != MAX_PLAYER_CONTACTS; i++)
    {
        if(PlayerContacts[playerid][i][contactOn] == 0 || strcmp(PlayerContacts[playerid][i][contactName], number_str, true) != 0)
            continue;

        number = PlayerContacts[playerid][i][contactNumber];
        break;
    }

	if((number == 544 || number == 555 || number == 911 || number == 991) && PlayerInfo[playerid][pJailed] == 0 && PlayerInfo[playerid][pAJailed] == 0)
	{
	    if(IsPlayerPhoneCreated(playerid))
	    	Phone_Destroy(playerid);

	    pTemp[playerid][pEmergency] = number;
	    switch(number)
	    {
	        case 444: SCM(playerid, COLOR_YELLOWG, "Operatör (telefon): Merhaba, Los Santos Tamirci Servisi, size nasýl yardýmcý olabiliriz?");
	        case 555: SCM(playerid, COLOR_YELLOWG, "Operatör (telefon): Alo, taksi servisini aradýnýz, sizi nereden alalým?");
	        case 911:
			{
				SCM(playerid, COLOR_YELLOWG, "911 Operatörü (telefon): Acil servise hoþ geldiniz. Hangi hizmetlere ihtiyacýnýz var? Rakamý tuþlayýn.");
			    SCM(playerid, COLOR_YELLOWG, "(1) Polis, (2) Ambulans ve Ýtfaiye, (3) Her ikisi. (( Rakamý sohbete yazýn ))");
			}
	        case 991: SCM(playerid, COLOR_YELLOWG, "911 Operatör (telefon): Polis hattýný aradýnýz, size nasýl yardýmcý olabilirim?");
	    }

	    pc_cmd_ame(playerid, "telefonla birisini arar.");
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, phone_model[PlayerInfo[playerid][pPhoneModel]], 6, 0.111, -0.000999, 0.0, 77.9, -171.6, -3.40001, 1.0, 1.0, 1.0);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	    return 1;
	}

	if((targetid = GetNumberOwner(number)) == INVALID_PLAYER_ID)
	{
	    SCM(playerid, -1, "Geçersiz numara.");
		return SCM(playerid, -1, "Hat düþtü.");
	}

    if (targetid == playerid)
    	return SendErrorMessage(playerid, "Kendinizi arayamazsýnýz.");

	if(pTemp[targetid][pCallLine] != INVALID_PLAYER_ID || pTemp[targetid][pEmergency])
	    return SendErrorMessage(playerid, "Kiþi þu an baþkasýyla görüþüyor.");

    if(PlayerInfo[targetid][pPhoneOff] != 0 || PlayerInfo[targetid][pPhoneAirplane] != 0)
        return SendErrorMessage(playerid, "Kiþinin telefon sinyali alýnamadý.");

    new find_phone[2] = {0, 0};
    for (new i = 0; i != MAX_PLAYER_CONTACTS; i ++)
	{
		if(PlayerContacts[playerid][i][contactOn] != 0 && PlayerContacts[playerid][i][contactNumber] == number)
		{
 			strmid(pTemp[playerid][pCallName], PlayerContacts[playerid][i][contactName], 0, strlen(PlayerContacts[playerid][i][contactName]), 32);
 			find_phone[0] = 1;
		}
		if(PlayerContacts[targetid][i][contactOn] != 0 && PlayerContacts[targetid][i][contactNumber] == PlayerInfo[playerid][pNumber])
		{
 			strmid(pTemp[targetid][pCallName], PlayerContacts[targetid][i][contactName], 0, strlen(PlayerContacts[targetid][i][contactName]), 32);
	        find_phone[1] = 1;
		}
	}

	if(!find_phone[0]) format(pTemp[playerid][pCallName], 24, "%i", number);
	if(!find_phone[1]) format(pTemp[targetid][pCallName], 24, "%i", PlayerInfo[playerid][pNumber]);


	pTemp[playerid][pCallLine] = targetid;
	pTemp[playerid][pCallStatus] = 0;
	pTemp[playerid][pCallTime] = 0;
	//
	pTemp[targetid][pCallLine] = playerid;
	pTemp[targetid][pCallStatus] = 1;
	pTemp[targetid][pCallTime] = 0;

	if(0 == IsPlayerPhoneCreated(targetid))
	    Phone_Create(targetid, 1);
	else
	{
	    Phone_Menu(targetid, 0);
	    Phone_Block(targetid, 0);
	    Phone_Contacts(targetid);
	    Phone_SMS(targetid);
	    Phone_History(targetid);
	    Phone_Contact_Info(targetid);
	    Phone_Setting(targetid, 0);
	    Phone_Keypad(targetid, 0);

	    format(mes, sizeof(mes), "%s~n~hatta", pTemp[targetid][pCallName]);

		PlayerTextDrawSetString(targetid, TD_iphone_name[targetid], mes);
	   	PlayerTextDrawShow(targetid, TD_iphone_name[targetid]);

	   	PlayerTextDrawShow(targetid, TD_iphone_button[targetid][2]);
	    PlayerTextDrawShow(targetid, TD_iphone_button[targetid][3]);
	    PlayerTextDrawShow(targetid, TD_iphone_button[targetid][4]);
	    PlayerTextDrawShow(targetid, TD_iphone_button[targetid][5]);
	}

    if(0 == IsPlayerPhoneCreated(playerid))
	    Phone_Create(playerid, 1);
	else
	{
	    Phone_Menu(playerid, 0);
	    Phone_Block(playerid, 0);
	    Phone_Contacts(playerid);
	    Phone_SMS(playerid);
	    Phone_History(playerid);
	    Phone_Contact_Info(playerid);
	    Phone_SMS_Info(playerid);
	    Phone_Setting(playerid, 0);
	    Phone_Keypad(playerid, 0);

	    format(mes, sizeof(mes), "%s~n~araniyor...", pTemp[playerid][pCallName]);

		PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], mes);
	   	PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);

	   	PlayerTextDrawShow(playerid, TD_iphone_button[playerid][0]);
  		PlayerTextDrawShow(playerid, TD_iphone_button[playerid][1]);
	}

    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

	if(PlayerInfo[targetid][pPhoneSound] == 0)
 		PlayerPlaySound(targetid, phone_ringtons[PlayerInfo[targetid][pPhoneRingtone]], 0.0, 0.0, 0.0);


    pc_cmd_my(targetid, "telefonu çalýyor.");
	SendCellMessage(targetid, "Not: Telefonu /telefon ile çýkarýn. Ýmleci kullanmak için /fare.");
	SendCellMessage(targetid, "Aramayý cevaplamak için /tac kullanýn.");

	pc_cmd_ame(playerid, "telefonla birisini arar.");
	CancelSelectTextDraw(playerid);
	return 1;
}

CMD:telefonat(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu özelliði þu anda kullanamazsýnýz.");

 	if (PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "Bir telefona sahip deðilsin.");

	if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID || pTemp[playerid][pEmergency] != 0)
	    return SendErrorMessage(playerid, "Aramayý sonlandýr. - /tkapat.");

	if (IsPlayerPhoneCreated(playerid))
		Phone_Destroy(playerid);

    new query[256];
   	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `sms` WHERE `to_number` = %i", PlayerInfo[playerid][pNumber]);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `player_contacts` WHERE `userid` = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query);

	for(new i; i != MAX_PLAYER_CONTACTS; i++)
	{
	    PlayerContacts[playerid][i][contactNumber] = 0;
		PlayerContacts[playerid][i][contactOn] = 0;
		PlayerContacts[playerid][i][contactID] = 0;
	}

	SendCellMessage(playerid, "Cep telefonunu çöpe attýn.");
	SendHelpMessage(playerid, "Telefonunuzu tekrar kullanabilmeniz için - yeni bir SIM kart satýn alýn.");

	SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s telefonunu yere atar ve sert bir tekme atarak kýrar.", GetNameWithMask(playerid));

	PlayerInfo[playerid][pNumber] = 0;
	PlayerInfo[playerid][pPhoneModel] = 0;
	return 1;
}

/* Payphone sistemi */
PP_OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if (clickedid == PP_Framework[2])
	{
	    new hour, minute, second, str[64];
		gettime(hour, minute, second);
		format(str, sizeof(str), "%02d:%02d", hour, minute);

	    PlayerTextDrawSetString(playerid, PP_Btn[playerid][0], str);
  		pTemp[playerid][pPayphoneNumStr] = EOS;

		//PlayerTextDrawHide(playerid, PP_Btn[playerid][0]);
		//PlayerTextDrawShow(playerid, PP_Btn[playerid][0]);
  		return 1;
	}
	if (clickedid == PP_Framework[8])
	{
		return cancelPayphone(playerid);
	}
	if (clickedid == PP_Framework[7])
	{
	    if (GetCash(playerid) < 2) return SendErrorMessage(playerid, "Yeterli paranýz yok, üzerinizde 2 dolarýnýz olmalý.");
		if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID || pTemp[playerid][pEmergency])
	    	return SendCellMessage(playerid, "Devam eden bir çaðrýnýz mevcut. Sonlandýrmak için /tkapat");

	    PlayerTextDrawSetString(playerid, PP_Btn[playerid][0], "Aranýyor ..");

		pc_cmd_server_ame(playerid, "ankesörlü telefona bozuk para attý.");
		GiveCash(playerid,-2);
		GameTextForPlayer(playerid, "~r~-$2.", 3000, 1);

		pc_cmd_ara(playerid, sprintf("%s", pTemp[playerid][pPayphoneNumStr]));
		pTemp[playerid][pPayphoneNumStr] = EOS;
	    return 1;
	}
	return 1;
}

PP_OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	new qustr[128];

	for(new i = 1; i < 10; i ++)
    {
    	if (playertextid == PP_Btn[playerid][i])
    	{
			if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID || pTemp[playerid][pEmergency])
	    		return SendCellMessage(playerid, "Devam eden bir çaðrýnýz mevcut. Sonlandýrmak için /tkapat");

			if (strlen(pTemp[playerid][pPayphoneNumStr]) >= 8) return 1;
    	    format(pTemp[playerid][pPayphoneNumStr], 64, "%s%d", pTemp[playerid][pPayphoneNumStr], i);
			format(qustr, sizeof(qustr), "%s", pTemp[playerid][pPayphoneNumStr]);
		    PlayerTextDrawSetString(playerid, PP_Btn[playerid][0], qustr);

			//PlayerTextDrawHide(playerid, PP_Btn[playerid][0]);
			//PlayerTextDrawShow(playerid, PP_Btn[playerid][0]);
    	}
    }
   	if (playertextid == PP_Btn[playerid][10])
   	{
		if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID || pTemp[playerid][pEmergency])
			return SendCellMessage(playerid, "Devam eden bir çaðrýnýz mevcut. Sonlandýrmak için /tkapat");

		if (strlen(pTemp[playerid][pPayphoneNumStr]) >= 8) return 1;
   	    format(pTemp[playerid][pPayphoneNumStr], 64, "%s0", pTemp[playerid][pPayphoneNumStr]);
		format(qustr, sizeof(qustr), "%s", pTemp[playerid][pPayphoneNumStr]);
	    PlayerTextDrawSetString(playerid, PP_Btn[playerid][0], qustr);

		//PlayerTextDrawHide(playerid, PP_Btn[playerid][0]);
		//PlayerTextDrawShow(playerid, PP_Btn[playerid][0]); // íå îá
   	}
	return 1;
}

PP_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rz)
{
    if (GetPVarInt(playerid, #edit_pp) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
		new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;

		GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
		GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	    new id = GetPVarInt(playerid, #edit_pp)-1;

		DeletePVar(playerid, #edit_pp);
	    if (id < 0 || id >= MAX_PAYPHONES || !PayphoneInfo[id][phID]) 	return SendErrorMessage(playerid, "Ankesörlü telefon bulunamadý.");
	    if (objectid != PayphoneInfo[id][phObj])						return SendErrorMessage(playerid, "Ankesörlü telefon düzenlenirken hata oluþtu");

		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, 0.0, 0.0, rz);

        GetDynamicObjectPos(objectid, PayphoneInfo[id][phX], PayphoneInfo[id][phY], PayphoneInfo[id][phZ]);
       	PayphoneInfo[id][phRZ] = rz;

		Update_Payphone(id);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `payphones` SET `x`=%f,`y`=%f,`z`=%f,`rz`=%f WHERE `id`=%i", x, y, z, rz, PayphoneInfo[id][phID]);
		mysql_tquery(dbHandle, query);

		SendAdmMessageToPlayer(playerid, "Ankesörlü telefon pozisyonu güncellendi: [ID: %i]", id);
	}
    return 1;
}

PayPhone_OnGameModeInit()
{
    mysql_tquery(dbHandle, "SELECT * FROM `payphones`", "LoadDynamicPayphones");
    return 1;
}

this::LoadDynamicPayphones()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if (!rows)
	{
	    print("[Payphones] Kayit bulunamadi.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
        cache_get_value_int(i, "id", PayphoneInfo[i][phID]);
        cache_get_value_int(i, "type", PayphoneInfo[i][phType]);
        cache_get_value_int(i, "number", PayphoneInfo[i][phNumber]);
        cache_get_value_float(i, "x", PayphoneInfo[i][phX]);
        cache_get_value_float(i, "y", PayphoneInfo[i][phY]);
        cache_get_value_float(i, "z", PayphoneInfo[i][phZ]);
        cache_get_value_float(i, "rx", PayphoneInfo[i][phRX]);
        cache_get_value_float(i, "ry", PayphoneInfo[i][phRY]);
        cache_get_value_float(i, "rz", PayphoneInfo[i][phRZ]);
        cache_get_value_int(i, "vw", PayphoneInfo[i][phVW]);
        cache_get_value_int(i, "int", PayphoneInfo[i][phInt]);

		if (PayphoneInfo[i][phType])
			PayphoneInfo[i][phObj] = CreateDynamicObject(PayphoneInfo[i][phType], PayphoneInfo[i][phX], PayphoneInfo[i][phY], PayphoneInfo[i][phZ], PayphoneInfo[i][phRX], PayphoneInfo[i][phRY], PayphoneInfo[i][phRZ], PayphoneInfo[i][phVW], PayphoneInfo[i][phInt]);

    	PayphoneInfo[i][phLabel] =
			CreateDynamic3DTextLabel("[Payphone]\n/ankesorlutelefon", COLOR_YELLOWMY, PayphoneInfo[i][phX], PayphoneInfo[i][phY], PayphoneInfo[i][phZ]+1.3, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PayphoneInfo[i][phVW], PayphoneInfo[i][phInt], -1, 75.0);

		PayphoneInfo[i][phUsed] = INVALID_PLAYER_ID;
		PayphoneInfo[i][phCaller] = INVALID_PLAYER_ID;
		PayphoneInfo[i][phState] = PAYPHONE_STATE_NONE;
		PayphoneInfo[i][pp_exist] = true;

		total++;
	}
	printf("[Payphones] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

this::OnPayphoneInsert(id)
{
    PayphoneInfo[id][phID] = cache_insert_id();
	return 1;
}

//[23:38:47] [MySQL]: <|| error: Failed to read auto-increment value from storage engine | callback: OnPayphoneInsert | query: INSERT INTO `payphones` (`type`,`number`,`x`,`y`,`z`,`rx`,`ry`,`rz`,`vw`,`int`) VALUES (1216,112, 2194.139, 21.601, 26.504, 0.0, 0.0, 0.0, 0, 0) ||>
//[23:38:56] [MySQL]: <|| error: Failed to reàd auto-increment value from storage engine | callback: OnPayphoneInsert | query: INSERT INTO `payphones` (`type`,`number`,`x`,`y`,`z`,`rx`,`ry`,`rz`,`vw`,`int`) VALUES (1216,1122, 2185.918, 24.94, 26.504, 0.0, 0.0, 0.0, 0, 0) ||>


CreatePayphone(bool: crt, type, number, Float: x, Float: y, Float: z, Float: rx, Float: ry, Float: rz, vw, interior, sqlid = 0)
{
	new id;
	for(new i; i != MAX_PAYPHONES; i++)
	{
	    if (PayphoneInfo[i][phID] != 0)
	        continue;

		id = i;
		break;
	}

	if (id == -1) return -1;

    PayphoneInfo[id][phType] = type;
    PayphoneInfo[id][phNumber] = number;
	PayphoneInfo[id][phX] = x,
	PayphoneInfo[id][phY] = y,
	PayphoneInfo[id][phZ] = z,
	PayphoneInfo[id][phRX] = rx,
	PayphoneInfo[id][phRY] = ry,
	PayphoneInfo[id][phRZ] = rz;
	PayphoneInfo[id][phVW] = vw;
	PayphoneInfo[id][phInt] = interior;

	PayphoneInfo[id][phObj] = CreateDynamicObject(type, x, y, z, rx, ry, rz, vw, interior);

    PayphoneInfo[id][phLabel] =
		CreateDynamic3DTextLabel("[Ankesorlu Telefon]\n/ankesorlutelefon", COLOR_GOLD, x, y, z + 1.3, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, vw, interior, -1, 15.0);

	PayphoneInfo[id][phUsed] = INVALID_PLAYER_ID;
	PayphoneInfo[id][phCaller] = INVALID_PLAYER_ID;
	PayphoneInfo[id][phState] = PAYPHONE_STATE_NONE;
	PayphoneInfo[id][pp_exist] = true;

	if (crt)
	{
	    new query[128 + 128];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `payphones` (`type`,`number`,`x`,`y`,`z`,`rx`,`ry`,`rz`,`vw`,`int`) VALUES (%i,%i,%f,%f,%f,%f,%f,%f,%i,%i)",
		type, number, x,y,z,rx,ry,rz, vw, interior);
		mysql_tquery(dbHandle, query, "OnPayphoneInsert", "d", id);
	}
	else PayphoneInfo[id][phID] = sqlid;

	return id;
}

Update_Payphone(id)
{
	//if (PayphoneInfo[id][pp_exist] == true) return 0;
    if (IsPlayerConnected(PayphoneInfo[id][phCaller]) && PayphoneInfo[id][phState] == PAYPHONE_STATE_RINGING)
	{
	    if (IsValidDynamic3DTextLabel(PayphoneInfo[id][phLabel])) DestroyDynamic3DTextLabel(PayphoneInfo[id][phLabel]);

		PlaySoundForPlayersInRange(20600, 15.0, PayphoneInfo[id][phX], PayphoneInfo[id][phY], PayphoneInfo[id][phZ]);

		PayphoneInfo[id][phLabel] = CreateDynamic3DTextLabel("** Ankesorlu telefon caliyor **\n{F6C861}/ankesorlutelefon - yanitla", COLOR_PURPLE, PayphoneInfo[id][phX], PayphoneInfo[id][phY], PayphoneInfo[id][phZ]+1.3, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PayphoneInfo[id][phVW], PayphoneInfo[id][phInt], -1, 50.0);//15.0);
	}
	else
	{
		if (IsValidDynamic3DTextLabel(PayphoneInfo[id][phLabel])) DestroyDynamic3DTextLabel(PayphoneInfo[id][phLabel]);
		PayphoneInfo[id][phLabel] =	CreateDynamic3DTextLabel("[Ankesorlu Telefon]\n/ankesorlutelefon", COLOR_GOLD, PayphoneInfo[id][phX], PayphoneInfo[id][phY], PayphoneInfo[id][phZ]+1.3, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PayphoneInfo[id][phVW], PayphoneInfo[id][phInt], -1, 50.0);//15.0);
	}
	return 1;
}

PlayerOnPayphone(playerid)
{
	new
		hour,
		minute,
		second,
		str[64]
	;

	gettime(hour, minute, second);
	format(str, sizeof(str), "%02d:%02d", hour, minute);
    PlayerTextDrawSetString(playerid, PP_Btn[playerid][0], str);

	SelectTextDraw(playerid, -1);

	for(new i = 0; i < 11; i++) TextDrawShowForPlayer(playerid, PP_Framework[i]);
	for(new e = 0; e < 11; e++) PlayerTextDrawShow(playerid, PP_Btn[playerid][e]);
	for(new j = 0; j < 4; j++) PlayerTextDrawShow(playerid, NumberLetters[playerid][j]);

	return 1;
}

cancelPayphone(playerid)
{
	if (pTemp[playerid][pEmergency] || pTemp[playerid][pCallLine] != INVALID_PLAYER_ID) return pc_cmd_telefonkapat(playerid, "");

	CancelSelectTextDraw(playerid);

	new id = pTemp[playerid][pPayphone];

	PayphoneInfo[id][phUsed] = INVALID_PLAYER_ID;
	PayphoneInfo[id][phCaller] = INVALID_PLAYER_ID;
	PayphoneInfo[id][phState] = PAYPHONE_STATE_NONE;

	pTemp[playerid][pPayphone] = -1;
	pTemp[playerid][pPayphoneNumStr] = EOS;

	for(new i = 0; i < 11; i++) TextDrawHideForPlayer(playerid, PP_Framework[i]);
	for(new e = 0; e < 11; e++) PlayerTextDrawHide(playerid, PP_Btn[playerid][e]);
	for(new j = 0; j < 4; j++) PlayerTextDrawHide(playerid, NumberLetters[playerid][j]);

	return 1;
}

IsPlayerAtPayphone(playerid, i)
	return (IsPlayerInRangeOfPoint(playerid, 2.0, PayphoneInfo[i][phX], PayphoneInfo[i][phY], PayphoneInfo[i][phZ]) && PayphoneInfo[i][phInt] == GetInterior(playerid) && PayphoneInfo[i][phVW] == GetWorld(playerid))?(1):(0);

Payphone_Nearest(playerid)
{
	for(new i; i != MAX_PAYPHONES; i++)
	{
        if (IsPlayerInRangeOfPoint(playerid, 2.0, PayphoneInfo[i][phX], PayphoneInfo[i][phY], PayphoneInfo[i][phZ]) && PayphoneInfo[i][phInt] == GetInterior(playerid) && PayphoneInfo[i][phVW] == GetWorld(playerid))
            return i;
	}
	return -1;
}

IsNumberPayphone(number)
{
	if (number == 0)	return 1;

	for(new i = 0; i < MAX_PAYPHONES; i++)
	{
		if (PayphoneInfo[i][phNumber] == 0) 		continue;
		if (number == PayphoneInfo[i][phNumber]) return i;
	}
	return -1;
}

stock LoadPayPhoneTD()
{
	PP_Framework[0] = TextDrawCreate(484.436248, 207.500045, "box");
	TextDrawLetterSize(PP_Framework[0], 0.000000, 22.228401);
	TextDrawTextSize(PP_Framework[0], 612.000000, 0.000000);
	TextDrawAlignment(PP_Framework[0], 1);
	TextDrawColor(PP_Framework[0], -1);
	TextDrawUseBox(PP_Framework[0], 1);
	TextDrawBoxColor(PP_Framework[0], -2139062017);
	TextDrawSetShadow(PP_Framework[0], 0);
	TextDrawSetOutline(PP_Framework[0], 0);
	TextDrawBackgroundColor(PP_Framework[0], -2004317953);
	TextDrawFont(PP_Framework[0], 1);
	TextDrawSetProportional(PP_Framework[0], 1);
	TextDrawSetShadow(PP_Framework[0], 0);

	PP_Framework[1] = TextDrawCreate(492.401275, 218.000061, "box");
	TextDrawLetterSize(PP_Framework[1], 0.000000, 2.456809);
	TextDrawTextSize(PP_Framework[1], 587.000000, 0.000000);
	TextDrawAlignment(PP_Framework[1], 1);
	TextDrawColor(PP_Framework[1], -1);
	TextDrawUseBox(PP_Framework[1], 1);
	TextDrawBoxColor(PP_Framework[1], -858993409);
	TextDrawSetShadow(PP_Framework[1], 0);
	TextDrawSetOutline(PP_Framework[1], 0);
	TextDrawBackgroundColor(PP_Framework[1], 255);
	TextDrawFont(PP_Framework[1], 1);
	TextDrawSetProportional(PP_Framework[1], 1);
	TextDrawSetShadow(PP_Framework[1], 0);

	PP_Framework[2] = TextDrawCreate(588.748046, 215.666687, "_");
	TextDrawLetterSize(PP_Framework[2], 0.000000, 0.000000);
	TextDrawTextSize(PP_Framework[2], 16.000000, 27.000000);
	TextDrawAlignment(PP_Framework[2], 1);
	TextDrawColor(PP_Framework[2], -1);
	TextDrawSetShadow(PP_Framework[2], 0);
	TextDrawSetOutline(PP_Framework[2], 0);
	TextDrawBackgroundColor(PP_Framework[2], 1431655935);
	TextDrawFont(PP_Framework[2], 5);
	TextDrawSetProportional(PP_Framework[2], 0);
	TextDrawSetShadow(PP_Framework[2], 0);
	TextDrawSetSelectable(PP_Framework[2], true);
	TextDrawSetPreviewModel(PP_Framework[2], 298);
	TextDrawSetPreviewRot(PP_Framework[2], 0.000000, 0.000000, 0.000000, -1.000000);

	PP_Framework[3] = TextDrawCreate(591.259521, 216.833312, "<");
	TextDrawLetterSize(PP_Framework[3], 0.301610, 2.515832);
	TextDrawAlignment(PP_Framework[3], 1);
	TextDrawColor(PP_Framework[3], -1);
	TextDrawSetShadow(PP_Framework[3], 0);
	TextDrawSetOutline(PP_Framework[3], 0);
	TextDrawBackgroundColor(PP_Framework[3], 255);
	TextDrawFont(PP_Framework[3], 2);
	TextDrawSetProportional(PP_Framework[3], 1);
	TextDrawSetShadow(PP_Framework[3], 0);

	PP_Framework[4] = TextDrawCreate(482.093994, 248.333358, "box");
	TextDrawLetterSize(PP_Framework[4], 0.000000, 2.175696);
	TextDrawTextSize(PP_Framework[4], 616.000000, 0.000000);
	TextDrawAlignment(PP_Framework[4], 1);
	TextDrawColor(PP_Framework[4], -1);
	TextDrawUseBox(PP_Framework[4], 1);
	TextDrawBoxColor(PP_Framework[4], 479182822);
	TextDrawSetShadow(PP_Framework[4], 0);
	TextDrawSetOutline(PP_Framework[4], 0);
	TextDrawBackgroundColor(PP_Framework[4], 255);
	TextDrawFont(PP_Framework[4], 1);
	TextDrawSetProportional(PP_Framework[4], 1);
	TextDrawSetShadow(PP_Framework[4], 0);

	PP_Framework[5] = TextDrawCreate(485.841827, 247.750030, "Want_to_advertise_here?_Call~n~1-800-Advertise_with_a_phone!");
															  //".Îáúÿâëåíèå");
	TextDrawLetterSize(PP_Framework[5], 0.235080, 1.063332);
	TextDrawAlignment(PP_Framework[5], 1);
	TextDrawColor(PP_Framework[5], -1);
	TextDrawSetShadow(PP_Framework[5], 0);
	TextDrawSetOutline(PP_Framework[5], 0);
	TextDrawBackgroundColor(PP_Framework[5], 255);
	TextDrawFont(PP_Framework[5], 1);
	TextDrawSetProportional(PP_Framework[5], 1);
	TextDrawSetShadow(PP_Framework[5], 0);

	PP_Framework[6] = TextDrawCreate(495.212249, 276.916717, "box");
	TextDrawLetterSize(PP_Framework[6], 0.000000, 12.811126);
	TextDrawTextSize(PP_Framework[6], 598.000000, 0.000000);
	TextDrawAlignment(PP_Framework[6], 1);
	TextDrawColor(PP_Framework[6], -1);
	TextDrawUseBox(PP_Framework[6], 1);
	TextDrawBoxColor(PP_Framework[6], -858993409);
	TextDrawSetShadow(PP_Framework[6], 0);
	TextDrawSetOutline(PP_Framework[6], 0);
	TextDrawBackgroundColor(PP_Framework[6], 255);
	TextDrawFont(PP_Framework[6], 1);
	TextDrawSetProportional(PP_Framework[6], 1);
	TextDrawSetShadow(PP_Framework[6], 0);

	PP_Framework[7] = TextDrawCreate(524.092285, 365.000000, "_");
	TextDrawLetterSize(PP_Framework[7], 0.000000, 0.000000);
	TextDrawTextSize(PP_Framework[7], 72.000000, 22.000000);
	TextDrawAlignment(PP_Framework[7], 1);
	TextDrawColor(PP_Framework[7], -1);
	TextDrawSetShadow(PP_Framework[7], 0);
	TextDrawSetOutline(PP_Framework[7], 0);
	TextDrawBackgroundColor(PP_Framework[7], 762659839);
	TextDrawFont(PP_Framework[7], 5);
	TextDrawSetProportional(PP_Framework[7], 0);
	TextDrawSetShadow(PP_Framework[7], 0);
	TextDrawSetSelectable(PP_Framework[7], true);
	TextDrawSetPreviewModel(PP_Framework[7], 0);
	TextDrawSetPreviewRot(PP_Framework[7], 0.000000, 0.000000, 0.000000, -1.000000);

	PP_Framework[8] = TextDrawCreate(575.161193, 282.749908, "_");
	TextDrawLetterSize(PP_Framework[8], 0.000000, 0.000000);
	TextDrawTextSize(PP_Framework[8], 21.000000, 77.000000);
	TextDrawAlignment(PP_Framework[8], 1);
	TextDrawColor(PP_Framework[8], -1);
	TextDrawSetShadow(PP_Framework[8], 0);
	TextDrawSetOutline(PP_Framework[8], 0);
	TextDrawBackgroundColor(PP_Framework[8], 255);
	TextDrawFont(PP_Framework[8], 5);
	TextDrawSetProportional(PP_Framework[8], 0);
	TextDrawSetShadow(PP_Framework[8], 0);
	TextDrawSetSelectable(PP_Framework[8], true);
	TextDrawSetPreviewModel(PP_Framework[8], 299);
	TextDrawSetPreviewRot(PP_Framework[8], 0.000000, 0.000000, 0.000000, -1.000000);

	PP_Framework[9] = TextDrawCreate(561.742492, 366.750000, "CALL");
	TextDrawLetterSize(PP_Framework[9], 0.462313, 1.792500);
	TextDrawAlignment(PP_Framework[9], 2);
	TextDrawColor(PP_Framework[9], -1);
	TextDrawSetShadow(PP_Framework[9], 0);
	TextDrawSetOutline(PP_Framework[9], 0);
	TextDrawBackgroundColor(PP_Framework[9], 255);
	TextDrawFont(PP_Framework[9], 2);
	TextDrawSetProportional(PP_Framework[9], 1);
	TextDrawSetShadow(PP_Framework[9], 0);

	PP_Framework[10] = TextDrawCreate(525.197937, 395.916442, "____Angeles_TELEKOM");
															//"Provided_by_LS_Telefonica");
	TextDrawLetterSize(PP_Framework[10], 0.195724, 1.226665);
	TextDrawAlignment(PP_Framework[10], 1);
	TextDrawColor(PP_Framework[10], -1482184705);
	TextDrawSetShadow(PP_Framework[10], 0);
	TextDrawSetOutline(PP_Framework[10], 0);
	TextDrawBackgroundColor(PP_Framework[10], 255);
	TextDrawFont(PP_Framework[10], 1);
	TextDrawSetProportional(PP_Framework[10], 1);
	TextDrawSetShadow(PP_Framework[10], 0);

	return 1;
}
stock LoadPayPhoneBtnTD(playerid)
{
	PP_Btn[playerid][0] = CreatePlayerTextDraw(playerid, 497.554870, 219.749984, "00:00");
	PlayerTextDrawLetterSize(playerid, PP_Btn[playerid][0], 0.494641, 1.932500);
	PlayerTextDrawAlignment(playerid, PP_Btn[playerid][0], 1);
	PlayerTextDrawColor(playerid, PP_Btn[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PP_Btn[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PP_Btn[playerid][0], 255);
	PlayerTextDrawFont(playerid, PP_Btn[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PP_Btn[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][0], 0);

	PP_Btn[playerid][1] = CreatePlayerTextDraw(playerid, 498.323608, 283.333190, "_");
	PlayerTextDrawLetterSize(playerid, PP_Btn[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PP_Btn[playerid][1], 20.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PP_Btn[playerid][1], 1);
	PlayerTextDrawColor(playerid, PP_Btn[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PP_Btn[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PP_Btn[playerid][1], 1431655935);
	PlayerTextDrawFont(playerid, PP_Btn[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, PP_Btn[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, PP_Btn[playerid][1], true);
	PlayerTextDrawSetPreviewModel(playerid, PP_Btn[playerid][1], 0);
	PlayerTextDrawSetPreviewRot(playerid, PP_Btn[playerid][1], 0.000000, 0.000000, 0.000000, -1.000000);

	PP_Btn[playerid][2] = CreatePlayerTextDraw(playerid, 524.092468, 283.333221, "_");
	PlayerTextDrawLetterSize(playerid, PP_Btn[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PP_Btn[playerid][2], 20.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PP_Btn[playerid][2], 1);
	PlayerTextDrawColor(playerid, PP_Btn[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PP_Btn[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PP_Btn[playerid][2], 1431655935);
	PlayerTextDrawFont(playerid, PP_Btn[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, PP_Btn[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, PP_Btn[playerid][2], true);
	PlayerTextDrawSetPreviewModel(playerid, PP_Btn[playerid][2], 0);
	PlayerTextDrawSetPreviewRot(playerid, PP_Btn[playerid][2], 0.000000, 0.000000, 0.000000, -1.000000);

	PP_Btn[playerid][3] = CreatePlayerTextDraw(playerid, 550.329467, 283.333190, "_");
	PlayerTextDrawLetterSize(playerid, PP_Btn[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PP_Btn[playerid][3], 20.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PP_Btn[playerid][3], 1);
	PlayerTextDrawColor(playerid, PP_Btn[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, PP_Btn[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PP_Btn[playerid][3], 1431655935);
	PlayerTextDrawFont(playerid, PP_Btn[playerid][3], 5);
	PlayerTextDrawSetProportional(playerid, PP_Btn[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, PP_Btn[playerid][3], true);
	PlayerTextDrawSetPreviewModel(playerid, PP_Btn[playerid][3], 0);
	PlayerTextDrawSetPreviewRot(playerid, PP_Btn[playerid][3], 0.000000, 0.000000, 0.000000, -1.000000);

	PP_Btn[playerid][4] = CreatePlayerTextDraw(playerid, 498.791992, 311.916625, "_");
	PlayerTextDrawLetterSize(playerid, PP_Btn[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PP_Btn[playerid][4], 20.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PP_Btn[playerid][4], 1);
	PlayerTextDrawColor(playerid, PP_Btn[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, PP_Btn[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PP_Btn[playerid][4], 1431655935);
	PlayerTextDrawFont(playerid, PP_Btn[playerid][4], 5);
	PlayerTextDrawSetProportional(playerid, PP_Btn[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, PP_Btn[playerid][4], true);
	PlayerTextDrawSetPreviewModel(playerid, PP_Btn[playerid][4], 0);
	PlayerTextDrawSetPreviewRot(playerid, PP_Btn[playerid][4], 0.000000, 0.000000, 0.000000, -1.000000);

	PP_Btn[playerid][5] = CreatePlayerTextDraw(playerid, 524.560607, 311.333282, "Btn");
	PlayerTextDrawLetterSize(playerid, PP_Btn[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PP_Btn[playerid][5], 20.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PP_Btn[playerid][5], 1);
	PlayerTextDrawColor(playerid, PP_Btn[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, PP_Btn[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PP_Btn[playerid][5], 1431655935);
	PlayerTextDrawFont(playerid, PP_Btn[playerid][5], 5);
	PlayerTextDrawSetProportional(playerid, PP_Btn[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, PP_Btn[playerid][5], true);
	PlayerTextDrawSetPreviewModel(playerid, PP_Btn[playerid][5], 0);
	PlayerTextDrawSetPreviewRot(playerid, PP_Btn[playerid][5], 0.000000, 0.000000, 0.000000, -1.000000);

	PP_Btn[playerid][6] = CreatePlayerTextDraw(playerid, 550.328979, 310.749938, "Btn");
	PlayerTextDrawLetterSize(playerid, PP_Btn[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PP_Btn[playerid][6], 20.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PP_Btn[playerid][6], 1);
	PlayerTextDrawColor(playerid, PP_Btn[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, PP_Btn[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PP_Btn[playerid][6], 1431655935);
	PlayerTextDrawFont(playerid, PP_Btn[playerid][6], 5);
	PlayerTextDrawSetProportional(playerid, PP_Btn[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, PP_Btn[playerid][6], true);
	PlayerTextDrawSetPreviewModel(playerid, PP_Btn[playerid][6], 0);
	PlayerTextDrawSetPreviewRot(playerid, PP_Btn[playerid][6], 0.000000, 0.000000, 0.000000, -1.000000);

	PP_Btn[playerid][7] = CreatePlayerTextDraw(playerid, 498.791534, 338.749969, "_");
	PlayerTextDrawLetterSize(playerid, PP_Btn[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PP_Btn[playerid][7], 20.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PP_Btn[playerid][7], 1);
	PlayerTextDrawColor(playerid, PP_Btn[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, PP_Btn[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PP_Btn[playerid][7], 1431655935);
	PlayerTextDrawFont(playerid, PP_Btn[playerid][7], 5);
	PlayerTextDrawSetProportional(playerid, PP_Btn[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, PP_Btn[playerid][7], true);
	PlayerTextDrawSetPreviewModel(playerid, PP_Btn[playerid][7], 0);
	PlayerTextDrawSetPreviewRot(playerid, PP_Btn[playerid][7], 0.000000, 0.000000, 0.000000, -1.000000);

	PP_Btn[playerid][8] = CreatePlayerTextDraw(playerid, 525.028747, 338.749969, "_");
	PlayerTextDrawLetterSize(playerid, PP_Btn[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PP_Btn[playerid][8], 20.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PP_Btn[playerid][8], 1);
	PlayerTextDrawColor(playerid, PP_Btn[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, PP_Btn[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PP_Btn[playerid][8], 1431655935);
	PlayerTextDrawFont(playerid, PP_Btn[playerid][8], 5);
	PlayerTextDrawSetProportional(playerid, PP_Btn[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, PP_Btn[playerid][8], true);
	PlayerTextDrawSetPreviewModel(playerid, PP_Btn[playerid][8], 0);
	PlayerTextDrawSetPreviewRot(playerid, PP_Btn[playerid][8], 0.000000, 0.000000, 0.000000, -1.000000);

	PP_Btn[playerid][9] = CreatePlayerTextDraw(playerid, 550.329162, 338.749938, "_");
	PlayerTextDrawLetterSize(playerid, PP_Btn[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PP_Btn[playerid][9], 20.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PP_Btn[playerid][9], 1);
	PlayerTextDrawColor(playerid, PP_Btn[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, PP_Btn[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PP_Btn[playerid][9], 1431655935);
	PlayerTextDrawFont(playerid, PP_Btn[playerid][9], 5);
	PlayerTextDrawSetProportional(playerid, PP_Btn[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, PP_Btn[playerid][9], true);
	PlayerTextDrawSetPreviewModel(playerid, PP_Btn[playerid][9], 0);
	PlayerTextDrawSetPreviewRot(playerid, PP_Btn[playerid][9], 0.000000, 0.000000, 0.000000, -1.000000);

	PP_Btn[playerid][10] = CreatePlayerTextDraw(playerid, 498.791595, 365.583282, "_");
	PlayerTextDrawLetterSize(playerid, PP_Btn[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PP_Btn[playerid][10], 20.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PP_Btn[playerid][10], 1);
	PlayerTextDrawColor(playerid, PP_Btn[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, PP_Btn[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, PP_Btn[playerid][10], 1431655935);
	PlayerTextDrawFont(playerid, PP_Btn[playerid][10], 5);
	PlayerTextDrawSetProportional(playerid, PP_Btn[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, PP_Btn[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, PP_Btn[playerid][10], true);
	PlayerTextDrawSetPreviewModel(playerid, PP_Btn[playerid][10], 0);
	PlayerTextDrawSetPreviewRot(playerid, PP_Btn[playerid][10], 0.000000, 0.000000, 0.000000, -1.000000);

	return 1;
}
stock LoadNumPayPhoneTD(playerid)
{
	NumberLetters[playerid][0] = CreatePlayerTextDraw(playerid, 505.550048, 283.014862, "1____2____3");
	PlayerTextDrawLetterSize(playerid, NumberLetters[playerid][0], 0.484582, 2.325924);
	PlayerTextDrawAlignment(playerid, NumberLetters[playerid][0], 1);
	PlayerTextDrawColor(playerid, NumberLetters[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, NumberLetters[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, NumberLetters[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, NumberLetters[playerid][0], 255);
	PlayerTextDrawFont(playerid, NumberLetters[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, NumberLetters[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, NumberLetters[playerid][0], 0);

	NumberLetters[playerid][1] = CreatePlayerTextDraw(playerid, 503.716644, 311.153564, "4____5____6");
	PlayerTextDrawLetterSize(playerid, NumberLetters[playerid][1], 0.477915, 2.280369);
	PlayerTextDrawAlignment(playerid, NumberLetters[playerid][1], 1);
	PlayerTextDrawColor(playerid, NumberLetters[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, NumberLetters[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, NumberLetters[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, NumberLetters[playerid][1], 255);
	PlayerTextDrawFont(playerid, NumberLetters[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, NumberLetters[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, NumberLetters[playerid][1], 0);

	NumberLetters[playerid][2] = CreatePlayerTextDraw(playerid, 504.533355, 338.518249, "7____8____9");
	PlayerTextDrawLetterSize(playerid, NumberLetters[playerid][2], 0.469999, 2.254814);
	PlayerTextDrawAlignment(playerid, NumberLetters[playerid][2], 1);
	PlayerTextDrawColor(playerid, NumberLetters[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, NumberLetters[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, NumberLetters[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, NumberLetters[playerid][2], 255);
	PlayerTextDrawFont(playerid, NumberLetters[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, NumberLetters[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, NumberLetters[playerid][2], 0);

	NumberLetters[playerid][3] = CreatePlayerTextDraw(playerid, 504.533355, 364.619842, "0");
	PlayerTextDrawLetterSize(playerid, NumberLetters[playerid][3], 0.469999, 2.254814);
	PlayerTextDrawAlignment(playerid, NumberLetters[playerid][3], 1);
	PlayerTextDrawColor(playerid, NumberLetters[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, NumberLetters[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, NumberLetters[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, NumberLetters[playerid][3], 255);
	PlayerTextDrawFont(playerid, NumberLetters[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, NumberLetters[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, NumberLetters[playerid][3], 0);

	return 1;
}

alias:ankesorlutelefon("paypyhone");
CMD:ankesorlutelefon(playerid, params[])
{
    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
		return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

	new id = -1;
	if ((id = Payphone_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "Yakýnýnýzda ankesörlü telefon bulunmuyor.");

	if (PayphoneInfo[id][phUsed] != INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ankesörlü telefon zaten kullanýmda.");

	if (IsPlayerPhoneCreated(playerid))
	    return SendErrorMessage(playerid, "Telefonunuzu zaten kullanýyorsunuz.");

	if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID || pTemp[playerid][pEmergency])
	    return SendErrorMessage(playerid, "Devam eden bir çaðrýnýz var. Kapatmak için: /tkapat");

	pTemp[playerid][pPayphone] = id;
	PayphoneInfo[id][phUsed] = playerid;

	new info[128];
	format(info, sizeof(info), "Imleci kullanmak icin '~y~/fare~w~' komutunu ~y~kullanin~w~.~n~Ankesorlu telefonun numarasi:~y~ %i", PayphoneInfo[id][phNumber]);
	InfoMSG(playerid, info, 5);

	SetPlayerFacingAngle(playerid, PayphoneInfo[id][phRZ]);
	SetCameraBehindPlayer(playerid);

	if (PayphoneInfo[id][phState] == PAYPHONE_STATE_RINGING)
	{
		PayphoneInfo[id][phState] = PAYPHONE_STATE_INCALL;

		new targetid = PayphoneInfo[id][phCaller];

		pTemp[playerid][pCallLine] = targetid;
		pTemp[targetid][pCallLine] = playerid;

		pTemp[playerid][pCallStatus] = 2;
		pTemp[playerid][pCallTime] = 0;

		pTemp[targetid][pCallStatus] = 2;
		pTemp[targetid][pCallTime] = 0;

		Update_Payphone(id);

		if (0 == IsPlayerPhoneCreated(targetid))
	    	Phone_Create(targetid);
		else
		{
			Update_Phone(targetid);
		}

		SM2(playerid,"Aramayý cevapladýnýz.");
		SM2(targetid,"Karþý taraf aramayý cevapladý.");
	}

	PlayerOnPayphone(playerid);
	return 1;
}


/* Not sistemi */
forward OnNoteInsert(playerid, noteid);
forward OnPlayerLoadNotes(playerid);

public OnPlayerLoadNotes(playerid)
{
	new rows = cache_num_rows();

	if (!rows) return 1;

	for(new i; i < rows; i++)
	{
	    if (i >= MAX_PLAYER_NOTES) break;

		cache_get_value_int(i, "id", PlayerNotes[playerid][i][noteID]);
		cache_get_value(i, "text", PlayerNotes[playerid][i][noteText], 128);
		PlayerNotes[playerid][i][noteOn] = 1;
	}
	return 1;
}

public OnNoteInsert(playerid, noteid)
{
	return PlayerNotes[playerid][noteid][noteID] = cache_insert_id();
}

LoadPlayerNotes(playerid)
{
    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `player_notes` WHERE `userid` = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "OnPlayerLoadNotes", "i", playerid);
	return 1;
}
CMD:not(playerid, params[])
{
	new option[10], secoption[128];
	if (sscanf(params, "s[8]s[128]", option, secoption)) return SendHelpMessage(playerid, "/not [goster / olustur / sil / duzenle / ver]");

	if (CompareStrings(option, "goster"))
	{
		new count = 0;

		for(new i = 0; i < MAX_PLAYER_NOTES; i++)
		{
			if (PlayerNotes[playerid][i][noteOn] != 1) continue;

			SendClientMessageEx(playerid, COLOR_HELPS, "[Not Defteri] [ID: %d]: %s", i+1, PlayerNotes[playerid][i][noteText]);

			count++;
		}

		if (count == 0) return SendErrorMessage(playerid, "Hiç notun yok.");

		pc_cmd_server_ame(playerid, "cebinden defteri çýkarýp bakar.");
		return 1;
	}
	else if (CompareStrings(option, "duzenle"))
	{
		new slot, text[128];

		if (sscanf(params, "s[8]ds[128]", slot, text)) return SendHelpMessage(playerid, "/not duzenle [slot] [yeni metin]");
		if (!IsPlayerHasItem(playerid, INV_PEN)) 		return SendErrorMessage(playerid, "Kaleminiz yok");
		if (slot < 1 || slot > MAX_PLAYER_NOTES) 		return SendErrorMessage(playerid, "Slot 1 ile 10 arasýnda olmalýdýr.");
		if (strlen(text) < 1 || strlen(text) > 127)		return SendErrorMessage(playerid, "Metin minimum 1, maksimum 127 karakter olmalýdýr.");

		slot = slot - 1;

		if (PlayerNotes[playerid][slot][noteOn] != 1) 	return SendSyntaxMessage(playerid, "Belirtilen slotta not yok.");

		format(PlayerNotes[playerid][slot][noteText], 128, "%s", text);
		SQL_SetString("player_notes", "text", text, PlayerNotes[playerid][slot][noteID]);
		pc_cmd_server_ame(playerid, "cebinden bir not defteri çýkardý ve içine bir þeyler yazdý.");
		SendSyntaxMessage(playerid, "Notu baþarýyla deðiþtirdiniz: [ID: %i] Not: %s", slot+1, text);
		return 1;
	}
	else if (CompareStrings(option, "olustur"))
	{
		new text[128];

		if (sscanf(params, "s[8]s[128]", text)) 		return SendHelpMessage(playerid, "/not olustur [metin]");
		if (!IsPlayerHasItem(playerid, INV_PEN)) 		return SendErrorMessage(playerid, "Kaleminiz yok");
		if (strlen(text) < 1 || strlen(text) > 127)		return SendErrorMessage(playerid, "Metin minimum 1, maksimum 127 karakter olmalýdýr.");

		new noteid = -1;

		for(new i = 0; i < MAX_PLAYER_NOTES; i++)
		{
			if (PlayerNotes[playerid][i][noteOn] == 1) continue;

			noteid = i;
			break;
		}

		if (noteid == -1) return SendErrorMessage(playerid, "Defterde yazacak yer yok.");

		format(PlayerNotes[playerid][noteid][noteText], 128, "%s", text);
        PlayerNotes[playerid][noteid][noteOn] = 1;

		new query[128 + 128];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `player_notes` (userid, text) VALUES (%i, '%e')", PlayerInfo[playerid][pID], text);
		mysql_tquery(dbHandle, query, "OnNoteInsert", "ii", playerid, noteid);

        pc_cmd_server_ame(playerid, "cebinden bir not defteri çýkardý ve içine bir þeyler yazdý.");
		SendSyntaxMessage(playerid, "Baþarýyla not oluþturuldu: [ID: %i]", noteid+1);

		return 1;
	}
	else if (CompareStrings(option, "sil"))
	{
		new slot;

		if (sscanf(params, "s[8]d", slot)) 			return SendHelpMessage(playerid, "/not sil [slot]");
		if (slot < 1 || slot > MAX_PLAYER_NOTES)			return SendErrorMessage(playerid, "Geçerli slot giriniz: 1 - %i.", MAX_PLAYER_NOTES);

		slot = slot - 1;

		if (PlayerNotes[playerid][slot][noteOn] != 1)	return SendSyntaxMessage(playerid, "Belirtilen slotta not yok.");
		PlayerNotes[playerid][slot][noteOn] = 0;
		PlayerNotes[playerid][slot][noteID] = 0;
		format(PlayerNotes[playerid][slot][noteText], 128, "");

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `player_notes` WHERE `id` = %i", PlayerNotes[playerid][slot][noteID]);
		mysql_tquery(dbHandle, query);

		pc_cmd_server_ame(playerid, "cebinden bir not defteri çýkardý, sonra içinden bir sayfa yýrttý ve yere attý.");
		SendSyntaxMessage(playerid, "Not baþarýyla silindi: [ID: %i]", slot+1);
		return 1;
	}
	else if (CompareStrings(option, "ver"))
	{
		new targetid, slot;

		if (sscanf(params, "s[8]du", slot, targetid)) 	return SendHelpMessage(playerid, "/not ver [slot] [ID / isim]");
		if (slot < 1 || slot > MAX_PLAYER_NOTES)			return SendErrorMessage(playerid, "Slot 1 ile 10 arasýnda olmalýdýr.", MAX_PLAYER_NOTES);

		slot = slot - 1;

		if (PlayerNotes[playerid][slot][noteOn] != 1) 	return SendSyntaxMessage(playerid, "Belirtilen slotta not yok.");
		if (targetid == playerid) 						return SendErrorMessage(playerid, "Kendinize not veremezsiniz.");
		if (!IsPlayerLogged(targetid)) 					return SendNotConnected(playerid);
		if (!PlayerNearPlayer(3.0, playerid, targetid))	return SendNotNearPlayer(playerid);

        new noteid = -1;

		for(new i = 0; i < MAX_PLAYER_NOTES; i++)
		{
			if (PlayerNotes[targetid][i][noteOn] == 1) continue;

			noteid = i;
			break;
		}

		if (noteid == -1) 								return SendErrorMessage(playerid, "Oyuncunun defterinde yazmak için yer yok.");

		PlayerNotes[targetid][noteid][noteID] = PlayerNotes[playerid][slot][noteID];
		format(PlayerNotes[targetid][noteid][noteText], 128, "%s", PlayerNotes[playerid][slot][noteText]);
		PlayerNotes[targetid][noteid][noteOn] = 1;
		PlayerNotes[playerid][slot][noteID] = 0;
		PlayerNotes[playerid][slot][noteOn] = 0;

		SQL_SetInteger("player_notes", "userid", PlayerInfo[targetid][pID], PlayerNotes[playerid][slot][noteID]);
		SendSyntaxMessage(playerid, "Notunuzu [ID: %i] %s [ID: %i] adlý oyuncuya verdiniz.", slot+1, GetNameWithMask(targetid), targetid);
		SendSyntaxMessage(targetid, "Size bir not geldi: [ID: %i] Gönderen: %s [ID: %i].", noteid+1, GetNameWithMask(playerid), playerid);

		new mes[128];
		format(mes, sizeof(mes), "cebinden bir not defteri çýkardý, sonra sayfayý yýrttý ve %s adlý kiþiye verdi.", GetNameWithMask(targetid));
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);
		return 1;
	}
	SendHelpMessage(playerid, "/not [goster / olustur / sil / duzenle / ver]");
	return 1;
}

/* Uyuþturucu sistemi */
SNPC_OnGameModeInit()
{
    mysql_tquery(dbHandle, "SELECT * FROM `trade_prices`", "SNPC_LoadTradePrices");
    DNPC_OnGameModeInit();
}

SNPC_GetFreeID()
{
    for(new i = 0; i < MAX_SERVER_ACTORS; i++)
    {
        if (!E_ACTOR[i][aON]) return i;
    }
    return -1;
}

SNPC_Nearest(playerid)
{
    for(new i = 0; i < MAX_SERVER_ACTORS; i++)
    {
        if (E_ACTOR[i][aON])
        {
            if (IsPlayerInRangeOfPoint(playerid, 5.0, E_ACTOR[i][aPosX], E_ACTOR[i][aPosY], E_ACTOR[i][aPosZ) && GetWorld(playerid) == E_ACTOR[i][aWorld] && GetInterior(playerid) == E_ACTOR[i][aInterior])
            {
                return i;
            }
        }
    }
    return -1;
}

SNPC_SetActorType(actorid, actor_type)
{
    if (!IsValidDynamicActor(actorid)) return -1;
    if (actor_type < ACTOR_TYPE_NONE || actor_type > ACTOR_TYPE_DRUGS) return -2;

    E_ACTOR[actorid][aType] = actor_type;

    return 1;
}

SNPC_GetActorType(actorid)
{
    if (!IsValidDynamicActor(actorid)) return -1;

    return E_ACTOR[actorid][aType];
}

SNPC_SetActorPos(actorid, Float:a_px, Float:a_py, Float:a_pz)
{
    if (!IsValidDynamicActor(actorid)) return -1;

    E_ACTOR[actorid][aPosX] = a_px;
    E_ACTOR[actorid][aPosY] = a_py;
    E_ACTOR[actorid][aPosZ] = a_pz;

    SNPC_OnActorUpdate(actorid);
    return SetDynamicActorPos(actorid, a_px, a_py, a_pz);
}

SNPC_GetActorPos(actorid, &Float:a_px, &Float:a_py, &Float:a_pz)
{
    a_px = E_ACTOR[actorid][aPosX];
    a_py = E_ACTOR[actorid][aPosY];
    a_pz = E_ACTOR[actorid][aPosZ];
}

SNPC_SetActorFacingAngle(actorid, Float:a_pr)
{
    if (!IsValidDynamicActor(actorid))   return -1;
    if (a_pr < 0.0 || a_pr > 360.0)      return -2;

    E_ACTOR[actorid][aPosR] = a_pr;

    SNPC_OnActorUpdate(actorid);
    return SetDynamicActorFacingAngle(actorid, a_pr);
}

SNPC_GetActorFacingAngle(actorid, &Float:a_pr)
{
    if (!IsValidDynamicActor(actorid)) return -1;
    if (E_ACTOR[actorid][aPosR] < 0.0 || E_ACTOR[actorid][aPosR] > 360.0) return -2;

    return E_ACTOR[actorid][aPosR];
}

SNPC_SetActorInterior(actorid, a_int)
{
    if (!IsValidDynamicActor(actorid)) return -1;

    E_ACTOR[actorid][aInterior] = a_int;
    DestroyDynamicActor(actorid);
    actorid = CreateDynamicActor(E_ACTOR[actorid][aSkin], E_ACTOR[actorid][aPosX], E_ACTOR[actorid][aPosY], E_ACTOR[actorid][aPosZ], E_ACTOR[actorid][aPosR], 1, 100.0, E_ACTOR[actorid][aWorld], E_ACTOR[actorid][aInterior]);

    SNPC_OnActorUpdate(actorid);
    return a_int;
}

SNPC_GetActorInterior(actorid)
{
    if (!IsValidDynamicActor(actorid)) return -1;

    return E_ACTOR[actorid][aInterior];
}

SNPC_SetActorVirtualWorld(actorid, a_vw)
{
    if (!IsValidDynamicActor(actorid)) return -1;

    E_ACTOR[actorid][aWorld] = a_vw;

    SNPC_OnActorUpdate(actorid);
    return SetDynamicActorVirtualWorld(actorid, a_vw);
}

SNPC_GetActorVirtualWorld(actorid)
{
    if (!IsValidDynamicActor(actorid)) return -1;

    return E_ACTOR[actorid][aWorld];
}

SNPC_SetActorSkin(actorid, skinid)
{
    if (!IsValidDynamicActor(actorid)) return -1;
    if (skinid <= 0 || skinid > 311) return -2;

    E_ACTOR[actorid][aSkin] = skinid;
    DestroyDynamicActor(actorid);
    actorid = CreateDynamicActor(E_ACTOR[actorid][aSkin], E_ACTOR[actorid][aPosX], E_ACTOR[actorid][aPosY], E_ACTOR[actorid][aPosZ], E_ACTOR[actorid][aPosR], 1, 100.0, E_ACTOR[actorid][aWorld], E_ACTOR[actorid][aInterior]);
    return 1;
}

SNPC_GetActorSkin(actorid)
{
    if (!IsValidDynamicActor(actorid)) return -1;
    if (E_ACTOR[actorid][aSkin] <= 0 || E_ACTOR[actorid][aSkin] > 311) return -2;

    return E_ACTOR[actorid][aSkin];
}

SNPC_SetActorSex(actorid, sex = ACTOR_SEX_MALE)
{
    if (!IsValidDynamicActor(actorid)) return -1;
    if (sex < ACTOR_SEX_MALE || sex > ACTOR_SEX_FEMALE) return -2;

    E_ACTOR[actorid][aSex] = sex;
}

SNPC_GetActorSex(actorid)
{
    if (!IsValidDynamicActor(actorid)) return -1;
    if (sex < ACTOR_SEX_MALE || sex > ACTOR_SEX_FEMALE) return -2;

    return E_ACTOR[actorid][aSex];
}

SNPC_SetActorName(actorid, actor_name[])
{
    if (!IsValidDynamicActor(actorid)) return -1;
    if (strlen(actor_name) < 4 || strlen(actor_name) > 11) return -2;

    format(E_ACTOR[actorid][aName], 32, "%s", actor_name);

    SNPC_OnActorUpdate(actorid);
    return 1;
}

SNPC_GetActorName(actorid, act_name[])
{
    if (!IsValidDynamicActor(actorid)) return -1;
    if (strlen(act_name) < 4 || strlen(actor_name) > 11) return -2;

    format(act_name, sizeof(act_name), "%s", E_ACTOR[actorid][aName]);
}

SNPC_GenerateRandomActor(actorid, act_name[], act_surname[], act_skin)
{
    format(act_name, sizeof(act_name), "%s", SNPC_GenerateRandomName(actorid));
    act_skin = SNPC_GenerateRandomSkin(actorid);
}


SNPC_GenerateRandomSex(actorid)
{
    if (!IsValidDynamicActor(actorid)) return -1;

    new rand = random(2);

    return rand;
}

SNPC_GenerateRandomName(actorid)
{
    if (!IsValidDynamicActor(actorid)) return -1;

    new rand, aname[32];

    if (GetActorSex(actorid) == ACTOR_SEX_MALE)
    {
        rand = random(sizeof(ACTOR_MNAMES));
        format(aname, 12, "%s", ACTOR_MNAMES[rand][dName]);
    }
    else
    {
        rand = random(sizeof(ACTOR_FNAMES));
        format(aname, 12, "%s", ACTOR_FNAMES[rand][dName]);
    }

    rand = random(sizeof(ACTOR_SURNAMES));
    format(aname, sizeof(aname), "%s %s", aname, ACTOR_SURNAMES[rand][dSurname]);

    return aname;
}

SNPC_GenerateRandomSkin(actorid)
{
    if (!IsValidDynamicActor(actorid)) return -1;

    if (SNPC_GetActorType(actorid) == ACTOR_TYPE_DRUGS)
    {
        if (E_ACTOR[actorid][aSex] == ACTOR_SEX_MALE)
        {
            new rand = random(sizeof(DRUGS_MALE_ACTOR_SKINS));
            return rand;
        }
        else
        {
            new rand = random(sizeof(DRUGS_FEMALE_ACTOR_SKINS));
            return rand;
        }
    }
    return -1;
}

SNPC_OnActorUpdate(actorid)
{
    if (!IsValidDynamicActor(actorid)) return 1;

    new label_name[64];
    format(label_name, sizeof(label_name), "%s\n(( /say ))", E_ACTOR[actorid][aName], E_ACTOR[actorid][aSurname]);

    if (IsValidDynamic3DTextLabel(E_ACTOR[actorid][aLabel]))
    {
        DestroyDynamic3DTextLabel(E_ACTOR[actorid][aLabel]);
        E_ACTOR[actorid][aLabel] = CreateDynamic3DTextLabel(label_name, 0xFFFFFFFF, E_ACTOR[actorid][aPosX], E_ACTOR[actorid][aPosY], E_ACTOR[actorid][aPosZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, E_ACTOR[actorid][aWorld], E_ACTOR[actorid][aInterior]);
    }
    else
    {
        E_ACTOR[actorid][aLabel] = CreateDynamic3DTextLabel(label_name, 0xFFFFFFFF, E_ACTOR[actorid][aPosX], E_ACTOR[actorid][aPosY], E_ACTOR[actorid][aPosZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, E_ACTOR[actorid][aWorld], E_ACTOR[actorid][aInterior]);
    }
    return 1;
}

DNPC_OnActorInit(actorid)
{
    new a_name[32], a_skin, Float:x, Float:y, Float:z, Float:r, a_int, a_world;

    SNPC_SetActorSex(actorid, SNPC_GenerateRandomSex(actorid));

    SNPC_GenerateRandomActor(actorid, a_name, a_surname, a_skin);
    DNPC_GetActorRandomPos(actorid, x, y, z, r, a_int, a_world);

    SNPC_SetActorType(actorid, ACTOR_TYPE_DRUGS);
    SNPC_SetActorName(actorid, a_name);
    SNPC_SetActorSkin(actorid, a_skin);
    SNPC_SetActorPos(actorid, x, y, z);
    SNPC_SetActorFacingAngle(actorid, r);
    SNPC_SetActorVirtualWorld(actorid, a_world);
    SNPC_SetActorInterior(actorid, a_int);
    printf("Actor Created");
    return 1;
}

DNPC_GetActorRandomPos(actorid, &Float:a_px, &Float:a_py, &Float:a_pz, &Float:a_r, a_int, a_world)
{
    new rand = random(sizeof(D_ACTOR_POS));

    while(D_ACTOR_POS[rand][aPosUsed])
    {
        rand = random(sizeof(D_ACTOR_POS));
    }

    a_px = D_ACTOR_POS[rand][dX];
    a_py = D_ACTOR_POS[rand][dY];
    a_pz = D_ACTOR_POS[rand][dZ];
    a_r = D_ACTOR_POS[rand][dR];
    a_int = D_ACTOR_POS[rand][dInterior];
    a_world = D_ACTOR_POS[rand][dWorld];
    D_ACTOR_POS[rand][dPosUsed] = 1;
}

OyuncuUyusturucuGoster(playerid, sqlid, tip)
{
	new sorgu[400];
	mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT name, hammadde FROM users WHERE id = %d", sqlid);
	mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, sqlid, 0, tip, 0, "");
}

OyuncuUyusturucuSayi(sqlid)
{
	new sayi, sorgu[100], Cache: onbellek;
	mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT sqlid FROM uyusturucular WHERE sqlid = %d", sqlid);
	onbellek = mysql_query(dbHandle, sorgu);
	sayi = cache_num_rows();
	cache_delete(onbellek);
	return sayi;
}

OyuncuPaketSayi(sqlid)
{
	new sayi, sorgu[100], Cache: onbellek;
	mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT sqlid FROM paketler WHERE sqlid = %d", sqlid);
	onbellek = mysql_query(dbHandle, sorgu);
	sayi = cache_num_rows();
	cache_delete(onbellek);
	return sayi;
}

OyuncuUyusturucuVer(sqlid, uindex, gram, kalite)
{
	new sorgu[120];
	mysql_format(dbHandle, sorgu, sizeof(sorgu), "INSERT INTO uyusturucular (sqlid, uindex, gram, kalite) VALUES (%d, %d, %d, %d)", sqlid, uindex, gram, kalite);
	mysql_tquery(dbHandle, sorgu);
}

OyuncuPaketIstekSil(playerid)
{
	new hedefid = PlayerInfo[playerid][PaketVer][0];
	if(hedefid != INVALID_PLAYER_ID)
	{
		PlayerInfo[playerid][PaketVer][0] = PlayerInfo[hedefid][PaketVer][0] = INVALID_PLAYER_ID;
		PlayerInfo[playerid][PaketVer][1] = PlayerInfo[hedefid][PaketVer][1] = 0;
	}
}

OyuncuYerdenPaketAl(playerid)
{
	new Float:x, Float:y, Float:z, obje[2], Text3D: label[2];
	GetPlayerPos(playerid, Float:x, Float:y, Float:z);
	Streamer_GetNearbyItems(x, y, z, STREAMER_TYPE_OBJECT, obje, sizeof(obje), 4.0, GetPlayerVirtualWorld(playerid));
	Streamer_GetNearbyItems(x, y, z, STREAMER_TYPE_3D_TEXT_LABEL, label, sizeof(label), 4.0, GetPlayerVirtualWorld(playerid));
	if(IsValidDynamicObject(obje[0]))
	{
		new array[2], sorgu[130];
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, obje[0], E_STREAMER_EXTRA_ID, array);
		if(array[0] != 85) return SendErrorMessage(playerid, "Herhangi bir pakete yakýn deðilsiniz.");
		if(array[1] <= 0) return SendErrorMessage(playerid, "Bir hata oluþtu.");
		mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT * FROM paketler WHERE ID = %d", array[1]);
		if((OlusumTipGetir(PlayerInfo[playerid][pFaction]) == FACTION_POLICE) && PlayerInfo[playerid][pOnDuty])
		{
			mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, PlayerInfo[playerid][pID], 20, 0, 1, "");
		}
		else
		{
			if(OyuncuPaketSayi(PlayerInfo[playerid][pID]) >= MAX_OYUNCU_PAKET_SAYI) return SendErrorMessage(playerid, "Üzerinize daha fazla uyuþturucu paketi alamazsýnýz.");
			mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, PlayerInfo[playerid][pID], 20, 0, 0, "");
		}
		DestroyDynamicObject(obje[0]);
	}
	return 1;
}

bosTohumID()
{
	new temp[123], Cache: result, lastid, id, returnable = 1, maxid = 1;
	result = mysql_query(dbHandle, "SELECT tohumID FROM tohumlar ORDER BY tohumID ASC");
	for(new i = 0; i < cache_num_rows(); i++)
	{
		maxid++;
		cache_get_value_name(i, "tohumID", temp), id = strval(temp);
		if(id - lastid > 1)
		{
			returnable = lastid + 1;
			cache_delete(result);
			return returnable;
		}
		lastid = id;
	}
	cache_delete(result);
	return maxid;
}

OyuncuUyusturucuKullan(playerid, tur, kalite)
{
	new Float: hp, dakika, havadurumu;
	switch(tur)
	{
		case 0: // LSD | Eski HP: 7
		{
			havadurumu = 273;
			if(kalite >= 1 && kalite <= 39) hp = 2.0;
			else if(kalite >= 40 && kalite <= 69) hp = 4.0;
			else if(kalite >= 70) hp = 5.0;
		}
		case 1: // Kokain | Eski HP: 9
		{
			havadurumu = 186;
			if(kalite >= 1 && kalite <= 39) hp = 3.0;
			else if(kalite >= 40 && kalite <= 69) hp = 6.0;
			else if(kalite >= 70) hp = 9.0;
		}
		case 2: // Eroin | Eski HP: 7
		{
			havadurumu = -66;
			if(kalite >= 1 && kalite <= 39) hp = 3.0;
			else if(kalite >= 40 && kalite <= 69) hp = 5.0;
			else if(kalite >= 70) hp = 7.0;
		}
		case 3: // Amfetamin | Kaldýrýldý, Metamfetamin olarak güncellendi.
		{
			havadurumu = 244;
			hp = 8.0;
		}
		case 4: // Metamfetamin | Eski HP: 4
		{
			havadurumu = 234;

			if(kalite >= 1 && kalite <= 39) hp = 1.0;
			else if(kalite >= 40 && kalite <= 69) hp = 2.0;
			else if(kalite >= 70) hp = 4.0;
		}
		case 5: // ekstazi
		{
			havadurumu = 383;
			if(kalite >= 1 && kalite <= 39) hp = 1.0;
			else if(kalite >= 40 && kalite <= 69) hp = 2.0;
			else if(kalite >= 70) hp = 3.0;
		}
		case 6: // pcp | Kaldýrýldý, LSD olarak güncellendi.
		{
			havadurumu = 245;
			hp = 5.0;
		}
		case 7: // ketamin | Kaldýrýldý, Kokain olarak güncellendi.
		{
			havadurumu = 251;
			hp = 8.0;
		}
		case 8: // mari
		{
			havadurumu = 221;
			hp = 1.0;
		}
		case 9: // Haþhaþ | Kaldýrýldý, Marijuana olarak güncellendi.
		{
			havadurumu = 221;
			hp = 1.0;
		}
		case 10: // aþk suyu
		{
			havadurumu = 1001;
			hp = 15.0;
		}
	}

	if(PlayerInfo[playerid][pBagimlilikSeviye] > 0)
	{
		PlayerInfo[playerid][pKrizSure] = 240;
		SendClientMessageEx(playerid, COLOR_WHITE, "Kullandýðýn uyuþturucu '240 dakika oyun süresi' için seni idare ediyor olacaktýr. (Peþ peþe uyuþturucu kullanmanýz süreyi uzatmaz.)");
		if(PlayerInfo[playerid][pUTedaviEXP] > 0)
		{
			PlayerInfo[playerid][pUTedaviEXP] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Tedavi sürecinde uyuþturucu kullandýðýn için tüm tedaviler boþa gitti. Baþtan baþlýyorsun.");
		}
	}

	new bagimlilikorani = random(500);
	if(bagimlilikorani <= kalite)
	{
		PlayerInfo[playerid][pBagimlilikEXP]++;
		if(PlayerInfo[playerid][pBagimlilikEXP]%3 != 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Kullandýðýn uyuþturucu, üzerinde 'baðýmlýlýk etkisi' göstermeye baþladý. %d kez daha..", 3 - PlayerInfo[playerid][pBagimlilikEXP]);
			SendClientMessageEx(playerid, COLOR_WHITE, "Bu mesajý görecek olursan, artýk bir 'baðýmlý' olacaksýn.");
		}
		else
		{
			PlayerInfo[playerid][pBagimlilikSeviye]++;
			PlayerInfo[playerid][pBagimlilikEXP] = 0;
			PlayerInfo[playerid][pKrizSure] = 240;
			SendClientMessageEx(playerid, COLOR_WHITE, "Defalarca kez uyuþturucu kullandýðýn için artýk uyuþturucu baðýmlýsý oldun.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Belirsiz zamanlarda uyuþturucuya ihtiyaç duyabilir, kendini kötü hissedebilirsin.");
			SendClientMessageEx(playerid, COLOR_GREEN, "Saðlýk kuruluþlarý çalýþanlarý tarafýndan tedavi olmak istersen, 911'i aramayý ihmal etme.");
		}
	}

	if(!(1 <= kalite <= 39)) dakika = 3;
	if(!(40 <= kalite <= 69)) dakika = 4;
	if(!(70 <= kalite <= 100)) dakika = 5;

    PlayerInfo[playerid][pHealth] = PlayerInfo[playerid][pHealth]+hp;
	SetPVarInt(playerid, "uyusgettime", gettime() + (dakika * 58));
	PlayerInfo[playerid][UyusKullan] = gettime() + (60 * 60);
	new sorgu[120];
	mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE users SET uyusgettime = %d WHERE id = %d", PlayerInfo[playerid][UyusKullan], PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, sorgu);
	SetTimerEx("OyuncuUyusturucuKullanFunc", 60000, false, "df", playerid, hp);
	SetTimerEx("OyuncuUyusturucuEfekt", 3000, false, "dd", playerid, havadurumu);
	return 1;
}

forward OyuncuUyusturucuEfekt(playerid, havadurum);
public OyuncuUyusturucuEfekt(playerid, havadurum)
{
	SetPlayerDrunkLevel(playerid, 1500);
	SetPlayerWeather(playerid, havadurum);
	SetPlayerTime(playerid, 15, 0);
	SetTimerEx("OyuncuUyusturucuEfektKaldir", 15000, false, "dd", playerid);
	return 1;
}

forward OyuncuUyusturucuEfektKaldir(playerid, Float: hp);
public OyuncuUyusturucuEfektKaldir(playerid, Float: hp)
{
	SetPlayerCurrentTimeAndWeather(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	return 1;
}

forward OyuncuUyusturucuKullanFunc(playerid, Float: hp);
public OyuncuUyusturucuKullanFunc(playerid, Float: hp)
{
	if(!IsPlayerConnected(playerid) || GetPVarInt(playerid, "uyusgettime") < gettime())
	{
		SetPlayerCurrentTimeAndWeather(playerid);
		SetPlayerDrunkLevel(playerid, 0);
		return 1;
	}
	SetPlayerDrunkLevel(playerid, 1500);
/*	new Float: can;
	AC_GetPlayerHealth(playerid, can);
	AC_SetPlayerHealth(playerid, can+hp);
	if((can+hp) > (PlayerInfo[playerid][pSpawnHealth]+50))
		AC_SetPlayerHealth(playerid, PlayerInfo[playerid][pSpawnHealth]+50);*/

	SetTimerEx("OyuncuUyusturucuKullanFunc", 60000, false, "df", playerid, hp);
	return 1;
}

forward PaketYukle();
public PaketYukle()
{
	new veriler = cache_num_rows();
	if(veriler)
	{
		new pid, objeid, yukle, pindex, vw, interior, Float: x, Float: y, Float: z, label[60], array[2];
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "ID", pid);
			cache_get_value_int(yukle, "pindex", pindex);
			cache_get_value_float(yukle, "x", x);
			cache_get_value_float(yukle, "y", y);
			cache_get_value_float(yukle, "z", z);
			cache_get_value_int(yukle, "vw", vw);
			cache_get_value_int(yukle, "interior", interior);
			objeid = CreateDynamicObject(PaketTipleri[pindex][PaketObje], x, y, z - 0.6, 0.0, 0.0, 0.0, vw, interior);
			array[0] = 85;
			array[1] = pid;
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objeid, E_STREAMER_EXTRA_ID, array);
			format(label, 60, "%s [%s]", PaketTipleri[pindex][PaketAd], PaketTipleri[pindex][Boyut][0]);
			yukle++;
		}
		printf("[PAKETLER] Toplam: %d", yukle);
	}
	else print("[PAKETLER] Toplam: Yok");
	return 1;
}

forward UyusturucuSorgu(playerid, sqlid, islem, tip, listitem, inputtext[]);
public UyusturucuSorgu(playerid, sqlid, islem, tip, listitem, inputtext[])
{
	new veriler = cache_num_rows(), yukle, baslik[100], liste[2000], karakteradi[24], index, gram, kalite, pindex, pgram, pkalite;
	new sorgu[600], uid; //, hammadde;
	UyusturucuDialog[playerid][0] = sqlid;
	UyusturucuDialog[playerid][1] = islem;
	UyusturucuDialog[playerid][2] = tip;
	if(veriler)
	{
		switch(islem)
		{
			case 0: // Oyuncu uyuþturucu seçenek
			{
				cache_get_value(yukle, "name", karakteradi, 24);
				format(baslik, sizeof(baslik), "Uyuþturucularým");
				format(liste, sizeof(liste), "Seçenek\tAçýklama\t#####\n");
				format(liste, sizeof(liste), "%s{A9C4E4}Uyuþturucular\t{FFFFFF}paketlenmemiþ uyuþturucularýnýzý yönetebilirsiniz (paketlemeden veremezsiniz)\t \n", liste);
				format(liste, sizeof(liste), "%s{A9C4E4}Paketler\t{FFFFFF}paketlenmiþ uyuþturucularýnýzý yönetebilirsiniz\t \n", liste);
				format(liste, sizeof(liste), "%s{A9C4E4}Hammaddeler\t{FFFFFF}uyuþturucu üretmek için kullanýlýr\t{b9f2ff}%d adet\t", liste, PlayerInfo[playerid][pHammadde]);

				Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_TABLIST_HEADERS, baslik, liste, "Seç", "Kapat");
			}
			case 1: // Oyuncu uyuþturucular
			{
				cache_get_value(yukle, "name", karakteradi, 24);

				new kalite_text[30];

				format(kalite_text, sizeof(kalite_text), "[?]");
				format(liste, sizeof(liste), "Uyuþturucu\tGram\tKalite\n");
				while(yukle < veriler)
				{
					cache_get_value_int(yukle, "uindex", index);
					cache_get_value_int(yukle, "gram", gram);
					cache_get_value_int(yukle, "kalite", kalite);

					if(kalite > 0 && kalite < 40) format(kalite_text, sizeof(kalite_text), "düþük kalite");
					else if(kalite > 39 && kalite < 70) format(kalite_text, sizeof(kalite_text), "normal kalite");
					else if(kalite > 69) format(kalite_text, sizeof(kalite_text), "yüksek kalite");
					format(liste, sizeof(liste), "%s%s\t%d\t%s (%d)\n", liste, UyusTipleri[index][Ad], gram, kalite_text, kalite);
					yukle++;
				}
				format(baslik, sizeof(baslik), "%s adlý karaktere ait uyuþturucular", karakteradi);
				Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_TABLIST_HEADERS, baslik, liste, "Seç", "Kapat");
			}
			case 2: // Oyuncu paketler
			{
				cache_get_value(yukle, "name", karakteradi, 24);

				new kalite_text[30];

				format(liste, sizeof(liste), "Paket\tGram\tKalite\n");
				while(yukle < veriler)
				{
					cache_get_value_int(yukle, "uindex", index);
					cache_get_value_int(yukle, "pindex", pindex);
					cache_get_value_int(yukle, "gram", pgram);
					cache_get_value_int(yukle, "kalite", pkalite);

					if(pkalite > 0 && pkalite < 40) format(kalite_text, sizeof(kalite_text), "düþük kalite");
					else if(pkalite > 39 && pkalite < 70) format(kalite_text, sizeof(kalite_text), "normal kalite");
					else if(pkalite > 69) format(kalite_text, sizeof(kalite_text), "yüksek kalite");

					format(liste, sizeof(liste), "%s%s [%c] (%s)\t%d\t%s (%d)\n", liste, PaketTipleri[pindex][PaketAd], PaketTipleri[pindex][Boyut], UyusTipleri[index][Ad], pgram, kalite_text, pkalite);
					yukle++;
				}
				format(baslik, sizeof(baslik), "%s adlý karaktere ait paketler", karakteradi);
				Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_TABLIST_HEADERS, baslik, liste, "Seç", "Kapat");
			}
			case 3: // Uyuþturucu detay iþlem
			{
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				format(liste, sizeof(liste), " \t \n");
				format(liste, sizeof(liste), "%s%s\t%dgr [%d kalite]\n", liste, UyusTipleri[index][Ad], gram, kalite);
				format(liste, sizeof(liste), "%s \t \n", liste);
				if(tip)
				{
					format(liste, sizeof(liste), "%s{A9C4E4}Tip Deðiþtir\t{FFFFFF}tip deðiþtirmeye yarar\n", liste);
					format(liste, sizeof(liste), "%sUyuþturucu tipini deðiþtir\t \n", liste);
					format(liste, sizeof(liste), "%sGram düzenle\t \n", liste);
					format(liste, sizeof(liste), "%sKalite düzenle\t \n", liste);
					format(liste, sizeof(liste), "%sSil\t \n", liste);
				}
				else
				{
					format(liste, sizeof(liste), "%s{A9C4E4}Kullan\t{FFFFFF}uyuþturucuyu kullanmaya yarar\n", liste);
					format(liste, sizeof(liste), "%s \t \n", liste);
					format(liste, sizeof(liste), "%s{A9C4E4}Birleþtir\t{FFFFFF}paketlenmiþ ayný tür uyuþturucuyla birleþtirmeye yarar\n", liste);
					format(liste, sizeof(liste), "%s{A9C4E4}Paketle\t{FFFFFF}uyuþturucunuzu bir pakete koymaya yarar, bu sayede verebilirsiniz\n", liste);
					format(liste, sizeof(liste), "%s{A9C4E4}At\t{FFFFFF}uyuþturucunuzu imha etmeye yarar, geri alýnamaz", liste);
				}
				format(baslik, sizeof(baslik), "%s adlý karaktere ait uyuþturucu", karakteradi);
				Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_TABLIST_HEADERS, baslik, liste, "Seç", "Kapat");
			}
			case 4: // Uyuþturucu detay iþlem
			{
				cache_get_value_int(yukle, "ID", uid);
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				if(!strcmp(inputtext, "Uyuþturucu tipini deðiþtir"))
				{
					for(new i; i < sizeof(UyusTipleri); i++)
						format(liste, sizeof(liste), "%s%s\n", liste, UyusTipleri[i][Ad]);

					UyusturucuDialog[playerid][1] = 5;
					format(baslik, sizeof(baslik), "%s adlý karaktere ait uyuþturucu deðiþtir", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_LIST, baslik, liste, "Seç", "Kapat");
				}
				else if(!strcmp(inputtext, "Gram düzenle"))
				{
					UyusturucuDialog[playerid][1] = 6;
					format(liste, sizeof(liste), "%s (%dgr [%d kalite]) adlý uyuþturucunun gramýný deðiþtirmek için aþaðýdaki kutuya yeni gram deðerini girin:", UyusTipleri[index][Ad], gram, kalite);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait uyuþturucu düzenle", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
				}
				else if(!strcmp(inputtext, "Kalite düzenle"))
				{
					UyusturucuDialog[playerid][1] = 7;
					format(liste, sizeof(liste), "%s (%dgr [%d kalite]) adlý uyuþturucunun kalitesini deðiþtirmek için aþaðýdaki kutuya yeni kalite deðerini girin:", UyusTipleri[index][Ad], gram, kalite);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait uyuþturucu düzenle", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
				}
				else if(!strcmp(inputtext, "Sil"))
				{
					UyusturucuDialog[playerid][1] = 8;
					format(liste, sizeof(liste), "%s (%dgr [%d kalite]) adlý uyuþturucuyu silmek istiyor musun?", UyusTipleri[index][Ad], gram, kalite);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait uyuþturucu düzenle", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_MSGBOX, baslik, liste, "Evet", "Hayýr");
				}
				else if(!strcmp(inputtext, "Kullan"))
				{
					gram -= 1;
					OyuncuUyusturucuKullan(playerid, index, kalite);
					PlayerAME2(playerid, "uyuþturucu kullanýr.");
					if(gram < 1) mysql_format(dbHandle, sorgu, sizeof(sorgu), "DELETE FROM uyusturucular WHERE ID = %d", uid);
					else mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE uyusturucular SET gram = %d WHERE ID = %d", gram, uid);
					mysql_tquery(dbHandle, sorgu);
				}
				else if(!strcmp(inputtext, "Paketle"))
				{
					new paketsayi;
					cache_get_value_int(yukle, "paketsayi", paketsayi);
					if(paketsayi >= MAX_OYUNCU_PAKET_SAYI) return SendErrorMessage(playerid, "Boþ paket slotun yok.");
					UyusturucuDialog[playerid][1] = 9;
					format(liste, sizeof(liste), "Paket\tBoyut\tKapasite\n");
					for(new i; i < sizeof(PaketTipleri); i++)
						format(liste, sizeof(liste), "%s%s\t%s\t%dgr\n", liste, PaketTipleri[i][PaketAd], PaketTipleri[i][Boyut], PaketTipleri[i][MaxGram]);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait uyuþturucu yeni paket", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_TABLIST_HEADERS, baslik, liste, "Seç", "Kapat");
				}
				else if(!strcmp(inputtext, "Birleþtir"))
				{
					new paketsayi;
					cache_get_value_int(yukle, "paketsayi", paketsayi);
					if(!paketsayi) return SendErrorMessage(playerid, "Mevcut paketin yok.");
					UyusturucuDialog[playerid][5] = uid;
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = paketler.sqlid LIMIT 1) as name");
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT paketler.*, uyusturucular.uindex as uyusindex, uyusturucular.gram as uyusgram, uyusturucular.kalite as uyuskalite, %s FROM paketler LEFT JOIN uyusturucular ON uyusturucular.ID = %d WHERE paketler.sqlid = %d", sorgu, uid, UyusturucuDialog[playerid][0]);
					mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 11, UyusturucuDialog[playerid][2], 0, inputtext);
				}
				else if(!strcmp(inputtext, "At"))
				{
					UyusturucuDialog[playerid][1] = 14;
					format(liste, sizeof(liste), "%s (%dgr [%d kalite]) adlý uyuþturucuyu atmak istiyor musun?", UyusTipleri[index][Ad], gram, kalite);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait uyuþturucuyu at", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_MSGBOX, baslik, liste, "Evet", "Hayýr");
				}
			}
			case 5: // Uyuþturucu tipini deðiþtir
			{
				cache_get_value_int(yukle, "ID", uid);
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE uyusturucular SET uindex = %d WHERE ID = %d", listitem, uid);
				mysql_tquery(dbHandle, sorgu);
				SendServerMessage(playerid, "%s adlý oyuncunun %s (%dgr [%d kalite]) uyuþturucusunu %s olarak deðiþtirdin.", karakteradi, UyusTipleri[index][Ad], gram, kalite, UyusTipleri[listitem][Ad]);
			}
			case 6: // Uyuþturucu gram düzenle
			{
				new yenigram = strval(inputtext);
				cache_get_value_int(yukle, "ID", uid);
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				if(!(0 <= yenigram <= MAX_UYUSTURUCU_GRAM))
				{
					format(liste, sizeof(liste), "Gram 0 ve "#MAX_UYUSTURUCU_GRAM" arasýnda olmalýdýr.\n%s (%dgr [%d kalite]) adlý uyuþturucunun gramýný deðiþtirmek için aþaðýdaki kutuya yeni gram deðerini girin:", UyusTipleri[index][Ad], gram, kalite);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait uyuþturucu düzenle", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
					return 1;
				}
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE uyusturucular SET gram = %d WHERE ID = %d", yenigram, uid);
				mysql_tquery(dbHandle, sorgu);
				SendServerMessage(playerid, "%s adlý oyuncunun %s (%dgr [%d kalite]) uyuþturucusunun gramýný %d olarak deðiþtirdin.", karakteradi, UyusTipleri[index][Ad], gram, kalite, yenigram);
			}
			case 7: // Uyuþturucu kalite düzenle
			{
				new yenikalite = strval(inputtext);
				cache_get_value_int(yukle, "ID", uid);
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				if(!(1 <= yenikalite <= MAX_UYUSTURUCU_KALITE))
				{
					format(liste, sizeof(liste), "Kalite 1 ve "#MAX_UYUSTURUCU_KALITE" arasýnda olmalýdýr.\n%s (%dgr [%d kalite]) adlý uyuþturucunun kalitesini deðiþtirmek için aþaðýdaki kutuya yeni kalite deðerini girin:", UyusTipleri[index][Ad], gram, kalite);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait uyuþturucu düzenle", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
					return 1;
				}
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE uyusturucular SET kalite = %d WHERE ID = %d", yenikalite, uid);
				mysql_tquery(dbHandle, sorgu);
				SendServerMessage(playerid, "%s adlý oyuncunun %s (%dgr [%d kalite]) uyuþturucusunun kalitesini %d olarak deðiþtirdin.", karakteradi, UyusTipleri[index][Ad], gram, kalite, yenikalite);
			}
			case 8: // Uyuþturucu sil
			{
				cache_get_value_int(yukle, "ID", uid);
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "DELETE FROM uyusturucular WHERE ID = %d", uid);
				mysql_tquery(dbHandle, sorgu);
				SendServerMessage(playerid, "%s adlý oyuncunun %s (%dgr [%d kalite]) uyuþturucusunu sildin.", karakteradi, UyusTipleri[index][Ad], gram, kalite);
			}
			case 9: // Uyuþturucu yeni paket oluþtur
			{
				cache_get_value_int(yukle, "ID", uid);
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				UyusturucuDialog[playerid][1] = 10;
				format(liste, sizeof(liste), "%s (%s) paketine %s koymak için uyuþturucu miktarýný girin.\nBu paket %d gram alabilir.", PaketTipleri[listitem][PaketAd], UyusTipleri[index][Ad], PaketTipleri[listitem][Boyut], PaketTipleri[listitem][MaxGram]);
				format(baslik, sizeof(baslik), "%s (%dgr [%d kalite]) uyuþturucu için yeni paket oluþtur", UyusTipleri[index][Ad], gram, kalite);
				Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
			}
			case 10: // Uyuþturucu yeni paket oluþtur onay
			{
				new paketsayi, paketgram = strval(inputtext);
				pindex = UyusturucuDialog[playerid][4];
				cache_get_value_int(yukle, "ID", uid);
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				cache_get_value_int(yukle, "paketsayi", paketsayi);
				if(paketgram <= 0)
				{
					format(baslik, sizeof(baslik), "%s (%dgr [%d kalite]) uyuþturucu için yeni paket oluþtur", UyusTipleri[index][Ad], gram, kalite);
					format(liste, sizeof(liste), "Paket gramý 0'dan büyük olmalýdýr.\n%s (%s) paketine %s koymak için uyuþturucu miktarýný girin.\nBu paket %d gram alabilir.", PaketTipleri[pindex][PaketAd], PaketTipleri[pindex][Boyut], UyusTipleri[index][Ad], PaketTipleri[pindex][MaxGram]);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
					return 1;
				}
				if(paketgram > PaketTipleri[pindex][MaxGram])
				{
					format(baslik, sizeof(baslik), "%s (%dgr [%d kalite]) uyuþturucu için yeni paket oluþtur", UyusTipleri[index][Ad], gram, kalite);
					format(liste, sizeof(liste), "Bu paket bu kadar miktarý alamaz.\n%s (%s) paketine %s koymak için uyuþturucu miktarýný girin.\nBu paket %d gram alabilir.", PaketTipleri[pindex][PaketAd], PaketTipleri[pindex][Boyut], UyusTipleri[index][Ad], PaketTipleri[pindex][MaxGram]);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
					return 1;
				}
				if(paketsayi >= MAX_OYUNCU_PAKET_SAYI) return SendErrorMessage(playerid, "Boþ paket slotun yok.");
				if(paketgram > gram) return SendErrorMessage(playerid, "Girdiðin miktar kadar uyuþturucun yok.");
				if(gram == paketgram)
				{
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "DELETE FROM uyusturucular WHERE ID = %d", uid);
					mysql_tquery(dbHandle, sorgu);
				}
				else
				{
					gram -= paketgram;
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE uyusturucular SET gram = %d WHERE ID = %d", gram, uid);
					mysql_tquery(dbHandle, sorgu);
				}
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "INSERT INTO paketler (sqlid, pindex, uindex, gram, kalite) VALUES (%d, %d, %d, %d, %d)", sqlid, pindex, index, paketgram, kalite);
				mysql_tquery(dbHandle, sorgu);
				SendServerMessage(playerid, "Paketiniz oluþturuldu.");
			}
			case 11: // Uyuþturucu mevcut pakete koy
			{
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uyusindex", index);
				cache_get_value_int(yukle, "uyusgram", gram);
				cache_get_value_int(yukle, "uyuskalite", kalite);
				format(liste, sizeof(liste), "Paket\tGram\tKalite\tKapasite\n");
				while(yukle < veriler)
				{
					cache_get_value_int(yukle, "uindex", index);
					cache_get_value_int(yukle, "pindex", pindex);
					cache_get_value_int(yukle, "gram", pgram);
					cache_get_value_int(yukle, "kalite", pkalite);
					format(liste, sizeof(liste), "%s%s [%c] (%s)\t%d\t%d\t%d / %d\n", liste, PaketTipleri[pindex][PaketAd], PaketTipleri[pindex][Boyut], UyusTipleri[index][Ad], pgram, pkalite, pgram, PaketTipleri[pindex][MaxGram]);
					yukle++;
				}
				format(baslik, sizeof(baslik), "%s (%dgr [%d kalite]) uyuþturucu mevcut pakete koy", UyusTipleri[index][Ad], gram, kalite);
				Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_TABLIST_HEADERS, baslik, liste, "Seç", "Kapat");
			}
			case 12: // Uyuþturucu mevcut pakete koy
			{
				cache_get_value_int(yukle, "uyusindex", index);
				cache_get_value_int(yukle, "uyusgram", gram);
				cache_get_value_int(yukle, "uyuskalite", kalite);
				cache_get_value_int(yukle, "pindex", pindex);
				cache_get_value_int(yukle, "gram", pgram);
				format(liste, sizeof(liste), "%s (%s) paketine %s koymak için uyuþturucu gramýný girin.\n%d gram daha koyabilirsiniz.", PaketTipleri[pindex][PaketAd], PaketTipleri[pindex][Boyut], UyusTipleri[index][Ad], PaketTipleri[pindex][MaxGram] - pgram);
				format(baslik, sizeof(baslik), "%s (%dgr [%d kalite]) uyuþturucu mevcut pakete koy", UyusTipleri[index][Ad], gram, kalite);
				Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
			}
			case 13: // Uyuþturucu mevcut pakete koy gram
			{
				new pid, gramkoy = strval(inputtext), paketuindex;
				cache_get_value_int(yukle, "ID", pid);
				cache_get_value_int(yukle, "uid", uid);
				cache_get_value_int(yukle, "uyusindex", index);
				cache_get_value_int(yukle, "uyusgram", gram);
				cache_get_value_int(yukle, "uyuskalite", kalite);
				cache_get_value_int(yukle, "pindex", pindex);
				cache_get_value_int(yukle, "uindex", paketuindex);
				cache_get_value_int(yukle, "gram", pgram);
				cache_get_value_int(yukle, "kalite", pkalite);
				if(gramkoy <= 0)
				{
					format(liste, sizeof(liste), "Gram 0'dan büyük olmalýdýr.\n%s (%s) paketine %s koymak için uyuþturucu gramýný girin.\n%d gram daha koyabilirsiniz.", PaketTipleri[pindex][PaketAd], PaketTipleri[pindex][Boyut], UyusTipleri[index][Ad], PaketTipleri[pindex][MaxGram] - pgram);
					format(baslik, sizeof(baslik), "%s (%dgr [%d kalite]) uyuþturucu mevcut pakete koy", UyusTipleri[index][Ad], gram, kalite);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
					return 1;
				}
				if(gramkoy > PaketTipleri[pindex][MaxGram] || (pgram + gramkoy) > PaketTipleri[pindex][MaxGram])
				{
					format(liste, sizeof(liste), "Girilen gram paket kapasitesini aþýyor.\n%s (%s) paketine %s koymak için uyuþturucu gramýný girin.\n%d gram daha koyabilirsiniz.", PaketTipleri[pindex][PaketAd], PaketTipleri[pindex][Boyut], UyusTipleri[index][Ad], PaketTipleri[pindex][MaxGram] - pgram);
					format(baslik, sizeof(baslik), "%s (%dgr [%d kalite]) uyuþturucu mevcut pakete koy", UyusTipleri[index][Ad], gram, kalite);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
					return 1;
				}
				if(paketuindex != index) return SendErrorMessage(playerid, "Bu pakete farklý tür uyuþturucu koyamazsýn.");
				if(gramkoy > gram) return SendErrorMessage(playerid, "Girdiðin miktar kadar uyuþturucun yok.");

				new yenikalite = ((pgram * pkalite) + (gramkoy * kalite)) / (pgram + gramkoy);
				pgram += gramkoy;
				if(gram == gramkoy)
				{
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "DELETE FROM uyusturucular WHERE ID = %d", uid);
					mysql_tquery(dbHandle, sorgu);
				}
				else
				{
					gram -= gramkoy;
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE uyusturucular SET gram = %d WHERE ID = %d", gram, uid);
					mysql_tquery(dbHandle, sorgu);
				}
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE paketler SET gram = %d, kalite = %d WHERE ID = %d", pgram, yenikalite, pid);
				mysql_tquery(dbHandle, sorgu);
				SendServerMessage(playerid, "%s paketine %s %dgr uyuþturucu koydun.", PaketTipleri[pindex][PaketAd], UyusTipleri[index][Ad], gramkoy);
			}
			case 14: // Oyuncu uyuþturucu at
			{
				cache_get_value_int(yukle, "ID", uid);
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "DELETE FROM uyusturucular WHERE ID = %d", uid);
				mysql_tquery(dbHandle, sorgu);
				SendServerMessage(playerid, "%s (%dgr [%d kalite]) uyuþturucu yere atýldý.", UyusTipleri[index][Ad], gram, kalite);
			}
			case 15: // Paket detay iþlem
			{
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "pindex", pindex);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				format(liste, sizeof(liste), " \t \n");
				format(liste, sizeof(liste), "%s%s %s\t%dgr [%d kalite]\n", liste, PaketTipleri[pindex][PaketAd], UyusTipleri[index][Ad], gram, kalite);
				format(liste, sizeof(liste), "%s \t \n", liste);
				format(liste, sizeof(liste), "%sPaketten al\t \n", liste);
				format(liste, sizeof(liste), "%sPaketi yere býrak\t \n", liste);
				format(liste, sizeof(liste), "%sBaþkasýna ver\t \n", liste);
				format(liste, sizeof(liste), "%sAraca koy\t \n", liste);
				format(baslik, sizeof(baslik), "%s adlý karaktere ait paket", karakteradi);
				Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_TABLIST_HEADERS, baslik, liste, "Seç", "Kapat");
			}
			case 16: // Paket detay iþlem
			{
				new pid;
				cache_get_value_int(yukle, "ID", pid);
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "pindex", pindex);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				if(PlayerInfo[playerid][PaketVer][0] != INVALID_PLAYER_ID && PlayerInfo[playerid][PaketVer][1] == pid)
					return SendErrorMessage(playerid, "Bu paket için istek gönderilmiþ, iþlem yapamazsýn.");
				if(!strcmp(inputtext, "Paketten al"))
				{
					UyusturucuDialog[playerid][1] = 17;
					format(liste, sizeof(liste), "%s paketten %s (%dgr [%d kalite]) adlý uyuþturucu almak için gram girin:", PaketTipleri[pindex][PaketAd], UyusTipleri[index][Ad], gram, kalite);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait paketten al", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
				}
				else if(!strcmp(inputtext, "Paketi yere býrak"))
				{
					new label[60], objeid, Float: x, Float: y, Float: z, array[2];
					GetPlayerPos(playerid, x, y, z);
					format(label, 60, "%s [%s]", PaketTipleri[pindex][PaketAd], PaketTipleri[pindex][Boyut][0]);
					objeid = CreateDynamicObject(PaketTipleri[pindex][PaketObje], x, y, z - 1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
					array[0] = 85;
					array[1] = pid;
					Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objeid, E_STREAMER_EXTRA_ID, array);
					SendServerMessage(playerid, "%s adlý paketi yere býraktýn.", PaketTipleri[pindex][PaketAd]);
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE paketler SET olusturan = '%e', sqlid = 0, x = %f, y = %f, z = %f, vw = %d, interior = %d WHERE ID = %d", GetName(playerid), x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), pid);
					mysql_tquery(dbHandle, sorgu);
				}
				else if(!strcmp(inputtext, "Baþkasýna ver"))
				{
					UyusturucuDialog[playerid][1] = 18;
					format(liste, sizeof(liste), "%s paketini içindeki %s (%dgr [%d kalite]) uyuþturucu ile baþkasýna vermek için karakter adý veya ID girin:", PaketTipleri[pindex][PaketAd], UyusTipleri[index][Ad], gram, kalite);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait paket baþkasýna ver", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
				}
				else if(!strcmp(inputtext, "Araca koy"))
				{
					if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Bu iþlemi yapabilmek için bir araçta olmalýsýn.");
					new aracpaketsayi, vid = GetPlayerVehicleID(playerid);
					cache_get_value_int(yukle, "aracpaketsayi", aracpaketsayi);
					if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_BIKE || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Bu iþlemi bir aracýn sürücü koltuðundayken yapabilirsin.");
					if(Arac_Sahip(playerid, vid, false) == 0) return SendErrorMessage(playerid, "Sana ait olmayan araçlarda bunu yapamazsýn.");
					if(aracpaketsayi >= MAX_ARAC_PAKET_SAYI) return SendErrorMessage(playerid, "Bu aracýn boþ paket slotu yok.");
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE paketler SET sqlid = 0, aracsqlid = %d WHERE ID = %d", VehicleInfo[vid][carID], pid);
					mysql_tquery(dbHandle, sorgu);
					SendServerMessage(playerid, "%s paketini %s model aracýna koydun.", PaketTipleri[pindex][PaketAd], GetVehicleModelName(VehicleInfo[vid][carModel]));
				}
			}
			case 17: // Paketten al
			{
				new pid, gramal = strval(inputtext), uyusturucusayi;
				cache_get_value_int(yukle, "ID", pid);
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "pindex", pindex);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				cache_get_value_int(yukle, "uyusturucusayi", uyusturucusayi);
				if(gramal <= 0)
				{
					format(liste, sizeof(liste), "Gram 0'dan büyük olmalýdýr.\n%s paketten %s (%dgr [%d kalite]) adlý uyuþturucu almak için gram girin:", PaketTipleri[pindex][PaketAd], UyusTipleri[index][Ad], gram, kalite);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait paketten al", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
					return 1;
				}
				if(gramal > gram)
				{
					format(liste, sizeof(liste), "Pakette girilen gramda uyuþturucu yok.\n%s paketten %s (%dgr [%d kalite]) adlý uyuþturucu almak için gram girin:", PaketTipleri[pindex][PaketAd], UyusTipleri[index][Ad], gram, kalite);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait paketten al", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
					return 1;
				}
				if(uyusturucusayi >= MAX_OYUNCU_UYUSTURUCU_SAYI) return SendErrorMessage(playerid, "Boþ uyuþturucu slotun yok.");
				if(gramal == gram)
				{
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "DELETE FROM paketler WHERE ID = %d", pid);
					mysql_tquery(dbHandle, sorgu);
				}
				else
				{
					gram -= gramal;
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE paketler SET gram = %d WHERE ID = %d", gram, pid);
					mysql_tquery(dbHandle, sorgu);
				}
				OyuncuUyusturucuVer(sqlid, index, gramal, kalite);
				SendServerMessage(playerid, "%s paketinden %s %dgr uyuþturucu aldýn.", PaketTipleri[pindex][PaketAd], UyusTipleri[index][Ad], gramal);
			}
			case 18: // Paketi baþkasýna ver
			{
				new pid, hedefid;
				cache_get_value_int(yukle, "ID", pid);
				cache_get_value(yukle, "name", karakteradi, 24);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "pindex", pindex);
				cache_get_value_int(yukle, "gram", gram);
				cache_get_value_int(yukle, "kalite", kalite);
				if(sscanf(inputtext, "u", hedefid))
				{
					format(liste, sizeof(liste), "Geçersiz karakter adý veya ID girdin.\n%s paketini içindeki %s (%dgr [%d kalite]) uyuþturucu ile baþkasýna vermek için karakter adý veya ID girin:", PaketTipleri[pindex][PaketAd], UyusTipleri[index][Ad], gram, kalite);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait paket baþkasýna ver", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
					return 1;
				}
				if(!IsPlayerConnected(hedefid) || !pTemp[hedefid][pLogged])
				{
					format(liste, sizeof(liste), "Bu kiþi oyunda deðil veya giriþ yapmamýþ.\n%s paketini içindeki %s (%dgr [%d kalite]) uyuþturucu ile baþkasýna vermek için karakter adý veya ID girin:", PaketTipleri[pindex][PaketAd], UyusTipleri[index][Ad], gram, kalite);
					format(baslik, sizeof(baslik), "%s adlý karaktere ait paket baþkasýna ver", karakteradi);
					Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_INPUT, baslik, liste, "Gir", "Kapat");
					return 1;
				}
				if(hedefid == playerid) return SendErrorMessage(playerid, "Kendine paket veremezsin.");
				if(PlayerInfo[hedefid][PaketVer][0] != INVALID_PLAYER_ID && PlayerInfo[hedefid][PaketVer][1] == pid)
					return SendErrorMessage(playerid, "Bu kiþiye zaten paket isteði göndermiþsin.");
				if(PlayerInfo[hedefid][PaketVer][0] != INVALID_PLAYER_ID && PlayerInfo[hedefid][PaketVer][1] != pid)
					return SendErrorMessage(playerid, "Bu kiþiye baþkasý paket isteði göndermiþ, istek gönderemezsin daha sonra tekrar deneyin.");
				if(!PlayerNearPlayer(4.0, playerid, hedefid)) return SendErrorMessage(playerid, "Girdiðin oyuncuya yakýn deðilsin.");
				PlayerInfo[playerid][PaketVer][0] = hedefid;
				PlayerInfo[hedefid][PaketVer][0] = playerid;
				PlayerInfo[playerid][PaketVer][1] = pid;
				PlayerInfo[hedefid][PaketVer][1] = pid;
				SendClientMessageEx(hedefid, COLOR_YELLOW, "%s, sana %s(%s, %d gram %d kalite) vermek istiyor. (/kabulet & /reddet paket)", GetNameEx(playerid), PaketTipleri[pindex][PaketAd], UyusTipleri[index][Ad], gram, kalite);
				SendClientMessageEx(playerid, COLOR_YELLOW, "%s'e %s(%s, %d gram %d kalite) verme isteði gönderdin.", GetNameEx(hedefid), PaketTipleri[pindex][PaketAd], UyusTipleri[index][Ad], gram, kalite);
			}
			case 19: // Paket istek kabul
			{
				new pid;
				cache_get_value_int(yukle, "ID", pid);
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE paketler SET sqlid = %d WHERE ID = %d", sqlid, pid);
				mysql_tquery(dbHandle, sorgu);
			}
			case 20: // Paket yerden al
			{
				new pid;
				cache_get_value_int(yukle, "ID", pid);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "pindex", pindex);
				if(listitem) SendServerMessage(playerid, "Yerdeki %s paketine el koydun.", PaketTipleri[pindex][PaketAd]);
				else SendServerMessage(playerid, "Yerden %s paketini aldýn.", PaketTipleri[pindex][PaketAd]);
				if(listitem) mysql_format(dbHandle, sorgu, sizeof(sorgu), "DELETE FROM paketler WHERE ID = %d", pid);
				else mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE paketler SET sqlid = %d, x = 0.0, y = 0.0, z = 0.0, vw = 0, interior = 0 WHERE ID = %d", sqlid, pid);
				mysql_tquery(dbHandle, sorgu);
			}
			case 21: // Uyuþturucular chat göster
			{
				while(yukle < veriler)
				{
					cache_get_value_int(yukle, "uindex", index);
					cache_get_value_int(yukle, "gram", gram);
					cache_get_value_int(yukle, "kalite", kalite);
					format(liste, sizeof(liste), "%s%s (%d gram, %d kalite) | ", liste, UyusTipleri[index][Ad], gram, kalite);
					yukle++;
				}
				SendServerMessage(playerid, "%s", liste);
			}
			case 22: // Paketler chat göster
			{
				while(yukle < veriler)
				{
					cache_get_value_int(yukle, "uindex", index);
					cache_get_value_int(yukle, "pindex", pindex);
					cache_get_value_int(yukle, "gram", pgram);
					cache_get_value_int(yukle, "kalite", pkalite);
					format(liste, sizeof(liste), "%s[%c] %s: %s (%d gram, %d kalite) | ", liste, PaketTipleri[pindex][Boyut], PaketTipleri[pindex][PaketAd], UyusTipleri[index][Ad], pgram, pkalite);
					yukle++;
				}
				SendServerMessage(playerid, "%s", liste);
			}
			case 23: // Araç paketleri
			{
				new model, aracsqlid, paketsayi;
				cache_get_value_int(yukle, "model", model);
				cache_get_value_int(yukle, "aracsqlid", aracsqlid);
				cache_get_value_int(yukle, "paketsayi", paketsayi);
				if(paketsayi >= MAX_OYUNCU_PAKET_SAYI) return SendErrorMessage(playerid, "Boþ paket slotun yok.");
				format(liste, sizeof(liste), "Paket\tGram\tKalite\n");
				while(yukle < veriler)
				{
					cache_get_value_int(yukle, "uindex", index);
					cache_get_value_int(yukle, "pindex", pindex);
					cache_get_value_int(yukle, "gram", pgram);
					cache_get_value_int(yukle, "kalite", pkalite);
					format(liste, sizeof(liste), "%s%s [%c] (%s)\t%d\t%d\n", liste, PaketTipleri[pindex][PaketAd], PaketTipleri[pindex][Boyut], UyusTipleri[index][Ad], pgram, pkalite);
					yukle++;
				}
				format(baslik, sizeof(baslik), "%s [SQLID: %d] model araca ait paketler", GetVehicleModelName(model), aracsqlid);
				Dialog_Show(playerid, DialogUyusturucu, DIALOG_STYLE_TABLIST_HEADERS, baslik, liste, "Al", "Kapat");
			}
			case 24: // Araç paket al
			{
				new model, aracsqlid, pid;
				cache_get_value_int(yukle, "ID", pid);
				cache_get_value_int(yukle, "model", model);
				cache_get_value_int(yukle, "aracsqlid", aracsqlid);
				cache_get_value_int(yukle, "pindex", pindex);
				cache_get_value_int(yukle, "uindex", index);
				cache_get_value_int(yukle, "gram", pgram);
				cache_get_value_int(yukle, "kalite", pkalite);
				if((OlusumTipGetir(PlayerInfo[playerid][pFaction]) == FACTION_POLICE) && PlayerInfo[playerid][pOnDuty])
				{
					SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, "[EL KOYMA] %s, %d SQL ID'li araçtaki uyuþturucuya el koydu. (%s - %d gram - %d kalite)", GetNameEx(playerid), aracsqlid, UyusTipleri[index][Ad], pgram, pkalite);
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "DELETE FROM paketler WHERE ID = %d", pid);
				}
				else
				{
					SendServerMessage(playerid, "%s [SQLID: %d] model araçtan %s paketi aldýn.", GetVehicleModelName(model), aracsqlid, PaketTipleri[pindex][PaketAd]);
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE paketler SET aracsqlid = 0, sqlid = %d WHERE ID = %d", PlayerInfo[playerid][pID], pid);
				}
				mysql_tquery(dbHandle, sorgu);
			}
		}
	}
	else
	{
		if(islem == 1) SendErrorMessage(playerid, "Uyuþturucu bulunamadý.");
		else if(islem == 2 || islem == 23) SendErrorMessage(playerid, "Paket bulunamadý.");
	}
	return 1;
}

Dialog:DialogUyusturucu(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new sorgu[600];
		switch(UyusturucuDialog[playerid][1])
		{
			case 0: // Oyuncu uyuþturucu seçenek
			{
				if(!strcmp(inputtext, "Uyuþturucular"))
				{
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = uyusturucular.sqlid LIMIT 1) as name");
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM uyusturucular WHERE sqlid = %d", sorgu, UyusturucuDialog[playerid][0]);
					mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 1, UyusturucuDialog[playerid][2], 0, inputtext);
				}
				else if(!strcmp(inputtext, "Paketler"))
				{
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = paketler.sqlid LIMIT 1) as name");
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM paketler WHERE sqlid = %d", sorgu, UyusturucuDialog[playerid][0]);
					mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 2, UyusturucuDialog[playerid][2], 0, inputtext);
				}
			}
			case 1: // Oyuncu uyuþturucular
			{
				UyusturucuDialog[playerid][3] = listitem;
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = uyusturucular.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM uyusturucular WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], listitem);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 3, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 2: // Oyuncu paketler
			{
				UyusturucuDialog[playerid][3] = listitem;
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = paketler.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM paketler WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], listitem);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 15, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 3: // Oyuncu uyuþturucu iþlem
			{
				if(!strcmp(inputtext, "Paketle") || !strcmp(inputtext, "Birleþtir"))
				{
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT COUNT(*) FROM paketler WHERE sqlid = uyusturucular.sqlid LIMIT 1) as paketsayi");
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "%s, (SELECT name FROM users WHERE id = uyusturucular.sqlid LIMIT 1) as name", sorgu);
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM uyusturucular WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				}
				else
				{
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = uyusturucular.sqlid LIMIT 1) as name");
					mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM uyusturucular WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				}
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 4, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 5: // Oyuncu uyuþturucu tipini deðiþtir
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = uyusturucular.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM uyusturucular WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 5, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 6: // Oyuncu uyuþturucu gram düzenle
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = uyusturucular.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM uyusturucular WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 6, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 7: // Oyuncu uyuþturucu kalite düzenle
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = uyusturucular.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM uyusturucular WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 7, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 8: // Oyuncu uyuþturucu sil
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = uyusturucular.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM uyusturucular WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 8, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 9: // Oyuncu uyuþturucu yeni paket oluþtur
			{
				UyusturucuDialog[playerid][4] = listitem;
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = uyusturucular.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM uyusturucular WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 9, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 10: // Oyuncu uyuþturucu yeni paket oluþtur
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT COUNT(*) FROM paketler WHERE sqlid = uyusturucular.sqlid LIMIT 1) as paketsayi");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "%s, (SELECT name FROM users WHERE id = uyusturucular.sqlid LIMIT 1) as name", sorgu);
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM uyusturucular WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 10, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 11: // Oyuncu uyuþturucu mevcut pakete koy
			{
				UyusturucuDialog[playerid][4] = listitem;
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = paketler.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT paketler.*, uyusturucular.uindex as uyusindex, uyusturucular.gram as uyusgram, uyusturucular.kalite as uyuskalite, %s FROM paketler LEFT JOIN uyusturucular ON uyusturucular.ID = %d WHERE paketler.sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][5], UyusturucuDialog[playerid][0], listitem);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 12, UyusturucuDialog[playerid][2], 0, inputtext);
			}
			case 12: // Oyuncu uyuþturucu mevcut pakete koy
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = paketler.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT paketler.*, uyusturucular.ID as uid, uyusturucular.uindex as uyusindex, uyusturucular.gram as uyusgram, uyusturucular.kalite as uyuskalite, %s FROM paketler LEFT JOIN uyusturucular ON uyusturucular.ID = %d WHERE paketler.sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][5], UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][4]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 13, UyusturucuDialog[playerid][2], 0, inputtext);
			}
			case 14: // Oyuncu uyuþturucu at
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = uyusturucular.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM uyusturucular WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 14, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 15: // Oyuncu paket detay
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT COUNT(*) FROM cars WHERE id = paketler.aracsqlid LIMIT 1) as aracpaketsayi");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "%s, (SELECT name FROM users WHERE id = paketler.sqlid LIMIT 1) as name", sorgu);
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM paketler WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 16, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 17: // Oyuncu paketten al
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT COUNT(*) FROM uyusturucular WHERE sqlid = paketler.sqlid LIMIT 1) as uyusturucusayi");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "%s, (SELECT name FROM users WHERE id = paketler.sqlid LIMIT 1) as name", sorgu);
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM paketler WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 17, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 18: // Oyuncu paketi baþkasýna ver
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = paketler.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM paketler WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 18, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 23: // Araç paketleri
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT model FROM cars WHERE id = paketler.aracsqlid LIMIT 1) as model");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM paketler WHERE aracsqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], listitem);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 24, UyusturucuDialog[playerid][2], 0, inputtext);
			}
			case 25: // Oyuncu uyuþturucu teslim
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = uyusturucular.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM uyusturucular WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 25, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
			case 26: // Oyuncu paket teslim
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "(SELECT name FROM users WHERE id = paketler.sqlid LIMIT 1) as name");
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT *, %s FROM paketler WHERE sqlid = %d LIMIT %d, 1", sorgu, UyusturucuDialog[playerid][0], UyusturucuDialog[playerid][3]);
				mysql_tquery(dbHandle, sorgu, "UyusturucuSorgu", "ddddds", playerid, UyusturucuDialog[playerid][0], 26, UyusturucuDialog[playerid][2], listitem, inputtext);
			}
		}
	}
	return 1;
}

CMD:u(playerid) return pc_cmd_uyusturucularim(playerid);
CMD:uyusturucularim(playerid)
{
	OyuncuUyusturucuGoster(playerid, PlayerInfo[playerid][pID], 0);
	return 1;
}

CMD:paketsil(playerid)
{
    if(!IsPlayerFactionPolice(playerid)) return false;
	new Float: x, Float: y, Float: z, obje[2], Text3D: label[2];
	GetPlayerPos(playerid, x, y, z);
	Streamer_GetNearbyItems(x, y, z, STREAMER_TYPE_OBJECT, obje, sizeof(obje), 3.0, GetPlayerVirtualWorld(playerid));
	Streamer_GetNearbyItems(x, y, z, STREAMER_TYPE_3D_TEXT_LABEL, label, sizeof(label), 3.0, GetPlayerVirtualWorld(playerid));
	if(IsValidDynamicObject(obje[0]))
	{
		new array[2];
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, obje[0], E_STREAMER_EXTRA_ID, array);
		if(array[0] != 85) return SendErrorMessage(playerid, "Pakete yeterince yakýn deðilsiniz.");
		new sorgu[80];
		DestroyDynamicObject(obje[0]);
		mysql_format(dbHandle, sorgu, sizeof(sorgu), "DELETE FROM paketler WHERE ID = %d", array[1]);
		mysql_tquery(dbHandle, sorgu);
	}
	return 1;
}

TohumYakin(playerid, Float: mesafe = 3.0)
{
	new id, Float: OyuncuKonum, Float: mesafe2 = 9999.0;
	for(new tohumid = 1; tohumid < MAX_TOHUM; tohumid++)
	{
		if(Tohum[tohumid][tohumSahip] < 0) continue;
		OyuncuKonum = GetPlayerDistanceFromPoint(playerid, Tohum[tohumid][tohumX], Tohum[tohumid][tohumY], Tohum[tohumid][tohumZ]);
		if(OyuncuKonum > mesafe) continue;
		if(OyuncuKonum <= mesafe2 && GetPlayerVirtualWorld(playerid) == Tohum[tohumid][tohumVW] && GetPlayerInterior(playerid) == Tohum[tohumid][tohumInt])
		{
			mesafe2 = OyuncuKonum;
			id = tohumid;
			break;
		}
	}
	return id;
}

TohumlariGuncelle()
{
	for(new i = 0; i < MAX_TOHUM; i++)
	{
		if(Tohum[i][tohumSahip] >= 0)
		{
			if(Tohum[i][tohumSure] <= 361) Tohum[i][tohumSure]++;
			TohumGuncelle(i);
		}
	}
}

stock TohumGuncelle(tohumID)
{
	new mesaj[120];

	if(Tohum[tohumID][tohumSure] <= 60) format(mesaj, sizeof(mesaj), "[Marijuana Tohumu]\n{AA0000}yeni ekildi");
	else if(Tohum[tohumID][tohumSure] > 60 && Tohum[tohumID][tohumSure] < 121) format(mesaj, sizeof(mesaj), "[Marijuana Tohumu]\n{FF6347}filizleniyor");
	else if(Tohum[tohumID][tohumSure] > 120 && Tohum[tohumID][tohumSure] < 181) format(mesaj, sizeof(mesaj), "[Marijuana Tohumu]\n{FFFF00}olgunlaþýyor");
	else if(Tohum[tohumID][tohumSure] > 180 && Tohum[tohumID][tohumSure] < 241) format(mesaj, sizeof(mesaj), "[Marijuana Tohumu]\n{50C878}olgun");
	else if(Tohum[tohumID][tohumSure] > 240 && Tohum[tohumID][tohumSure] < 301) format(mesaj, sizeof(mesaj), "[Marijuana Tohumu]\n{FFFF00}solgunlaþýyor");
	else if(Tohum[tohumID][tohumSure] > 300 && Tohum[tohumID][tohumSure] < 361) format(mesaj, sizeof(mesaj), "[Marijuana Tohumu]\n{Ff6347}ölüyor");
	else format(mesaj, sizeof(mesaj), "{AA0000}solmuþ tohum");

	UpdateDynamic3DTextLabelText(Tohum[tohumID][tohumLabel], COLOR_WHITE, mesaj);
	return 1;
}

CMD:tohum(playerid, params[])
{
	new secenek[20], sorgu[650], tohumid = TohumYakin(playerid);

	if(sscanf(params, "s[20]", secenek))
	{
		SendHelpMessage(playerid, "/tohum [seçenek]");
		SendHelpMessage(playerid, "topla, ek");
		if(OlusumTipGetir(PlayerInfo[playerid][pFaction]) == FACTION_POLICE || OlusumTipGetir(PlayerInfo[playerid][pFaction]) == FACTION_CITY) SendHelpMessage(playerid, "temizle");
		if(PlayerInfo[playerid][pAdmin] >= HIGH_ADMIN_LEVEL) SendHelpMessage(playerid, "atemizle [admin komutu]");
		return 1;
	}
	if(!strcmp(secenek, "atemizle"))
	{
		if(PlayerInfo[playerid][pAdmin] < HIGH_ADMIN_LEVEL) return SendErrorMessage(playerid, "Bu komutu kullanmak için Admin 5 ve üstü yetkiye sahip olmalýsýnýz.");
		if(!tohumid) return SendErrorMessage(playerid, "Yakýnýnýzda silinebilecek bir tohum bulunmuyor.");
		SendAdmMessage("[UYUÞTURUCU] %s, %d ID'li tohumu sildi. (Sahip: %s)", PlayerInfo[playerid][pUsername], tohumid, GetCharacterName(Tohum[tohumid][tohumSahip]));
		TohumSil(tohumid);
	}
	else if(!strcmp(secenek, "temizle"))
	{
		if(OlusumTipGetir(PlayerInfo[playerid][pFaction]) != FACTION_POLICE && OlusumTipGetir(PlayerInfo[playerid][pFaction]) != FACTION_CITY) return SendErrorMessage(playerid, "Bu komutu LSPD, LSSD ve FBI üyeleri kullanabilir.");
		if(!PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Bu komutu kullanmak için birlik iþbaþýnda olmalýsýnýz.");
		if(!tohumid) return SendErrorMessage(playerid, "Yakýnýnýzda silinebilecek bir tohum bulunmuyor.");
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, "[BÝRLÝK] %s, %d ID'li tohuma el koydu.", GetNameEx(playerid), tohumid);
		TohumSil(tohumid);
	}
	else if(!strcmp(secenek, "suredoldur"))
	{
		if(PlayerInfo[playerid][pAdmin] < HIGH_ADMIN_LEVEL) return SendNotAdmin(playerid);
		if(!tohumid) return SendErrorMessage(playerid, "Yakýnýnýzda bir tohum bulunmuyor.");
		Tohum[tohumid][tohumSure] = 300;
	}
	else if(!strcmp(secenek, "topla"))
	{
		if(!tohumid) return SendErrorMessage(playerid, "Herhangi bir tohuma yakýn deðilsiniz.");
		if(Tohum[tohumid][tohumSahip] != PlayerInfo[playerid][pID]) return SendErrorMessage(playerid, "Bu tohumu siz ekmemiþsiniz.");
		if(OyuncuUyusturucuSayi(PlayerInfo[playerid][pID]) >= MAX_OYUNCU_UYUSTURUCU_SAYI) return SendErrorMessage(playerid, "Boþ uyuþturucu slotun yok.");
		new dakika = Tohum[tohumid][tohumSure], gram, kalite;
		if(dakika < 60) return SendErrorMessage(playerid, "Bu tohum büyümemiþ.");
		if(dakika > 360)
		{
			SendServerMessage(playerid, "Bu tohum çürümüþ.");
			TohumSil(tohumid);
			return 1;
		}
		switch(dakika)
		{
			case 61..120: // filizleniyor
			{
				gram = 4;
				kalite = randomEx(0, 30);
			}
			case 121..180: // olgunlaþýyor
			{
				gram = 8;
				kalite = randomEx(25, 65);
			}
			case 181..240: // olgun
			{
				gram = 15;
				kalite = randomEx(60, 100);
			}
			case 241..300: // solgunlaþýyor
			{
				gram = 8;
				kalite = randomEx(25, 65);
			}
			case 301..360: // ölüyor
			{
				gram = 4;
				kalite = randomEx(25, 65);
			}
		}
		OyuncuUyusturucuVer(PlayerInfo[playerid][pID], Tohum[tohumid][tohumHammadde], gram, kalite);
		SendServerMessage(playerid, "Yerden %s %dgr %d kalite topladýn.", UyusTipleri[Tohum[tohumid][tohumHammadde]][Ad], gram, kalite);
		TohumSil(tohumid);
	}
	else if(!strcmp(secenek, "ek"))
	{
		if(PlayerInfo[playerid][pHammadde] < 5) return SendErrorMessage(playerid, "Bunun için üzerinde yeterli hammadde yok.");
		//if(!Olusum[PlayerInfo[playerid][pFaction]][oTohumIzin]) return SendErrorMessage(playerid, "Bulunduðunuz oluþumun uyuþturucu izin statüsü bulunmuyor.");
		new tohumID = bosTohumID(), tohumsayi = 0;
		if(tohumID >= MAX_TOHUM) return SendErrorMessage(playerid, "Tohum oluþturulamadý, tekrar deneyin.");

	    for(new tohumkontrol = 1; tohumkontrol < MAX_TOHUM; tohumkontrol++)
	    {
	        if(Tohum[tohumkontrol][tohumSahip] == PlayerInfo[playerid][pID])
			tohumsayi++;
		}

		if(tohumsayi >= 3) return SendErrorMessage(playerid, "Ayný anda en fazla '3 adet' tohum ekebilirsiniz.");

		new mesaj[200];
		Tohum[tohumID][tohumSahip] = PlayerInfo[playerid][pID];
		Tohum[tohumID][tohumHammadde] = 8;
		Tohum[tohumID][tohumVW] = GetPlayerVirtualWorld(playerid);
		Tohum[tohumID][tohumInt] = GetPlayerInterior(playerid);
		Tohum[tohumID][tohumSure] = 0;
		GetPlayerPos(playerid, Tohum[tohumID][tohumX], Tohum[tohumID][tohumY], Tohum[tohumID][tohumZ]);
		mysql_format(dbHandle, sorgu, sizeof(sorgu), "INSERT INTO tohumlar (tohumID, hammadde, kalansure, sahip, x, y, z, vw, interior) VALUES (%d, 5, %d, %d, %f, %f, %f, %d, %d)", tohumID, Tohum[tohumID][tohumSure], Tohum[tohumID][tohumSahip], Tohum[tohumID][tohumX], Tohum[tohumID][tohumY], Tohum[tohumID][tohumZ], Tohum[tohumID][tohumVW], Tohum[tohumID][tohumInt]);
		mysql_tquery(dbHandle, sorgu);
		format(mesaj, sizeof(mesaj), "Marijuana tohumu\nDurum: {F82D02} Filizlenme (Toplanamaz)");
		Tohum[tohumID][tohumObjeID] = CreateDynamicObject(TOHUM_OBJE, Tohum[tohumID][tohumX], Tohum[tohumID][tohumY], Tohum[tohumID][tohumZ] - 0.4, 0.0, 0.0, 0.0, Tohum[tohumID][tohumVW], Tohum[tohumID][tohumInt]);
		Tohum[tohumID][tohumLabel] = CreateDynamic3DTextLabel(mesaj, COLOR_WHITE, Tohum[tohumID][tohumX], Tohum[tohumID][tohumY], Tohum[tohumID][tohumZ] - 0.4, 7.0);
		SendServerMessage(playerid, "Marijuana tohumu ektin.");
		PlayerInfo[playerid][pHammadde] -= 5;
		Save_User(playerid);
	}
	return 1;
}

// CMD:tohum(playerid, params[])
// {
// 	new secim[20];
// 	if(sscanf(params, "s[20]", secim))
// 	{
// 		SendHelpMessage(playerid, "/tohum [seçim]");
// 		if(OlusumTipGetir(PlayerInfo[playerid][pFaction]) == FACTION_POLICE)
// 			SendHelpMessage(playerid, "topla - ek - temizle");
// 		else if(PlayerInfo[playerid][pAdmin] >= YETKI_GENELYETKILI)
// 			SendHelpMessage(playerid, "topla - ek - atemizle");
// 		else SendHelpMessage(playerid, "topla - ek");
// 		return 1;
// 	}
// 	if(!strcmp(secim, "atemizle"))
// 	{
// 		if(PlayerInfo[playerid][pAdmin] < YETKI_GENELYETKILI) return SendErrorMessage(playerid, "Bu komutu kullanmak için admin olmalýsýnýz.");
// 		new tohumid = TohumYakin(playerid), sorgu[120];
// 		if(!tohumid) return SendErrorMessage(playerid, "Herhangi bir tohuma yakýn deðilsiniz.");
// 		mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT * FROM tohumlar WHERE tohumID = %d", tohumid);
// 		mysql_tquery(dbHandle, sorgu, "TohumSorgu", "dddds", playerid, tohumid, 2, 1, "");
// 	}
// 	else if(!strcmp(secim, "temizle"))
// 	{
// 		if(OlusumTipGetir(PlayerInfo[playerid][pFaction]) != FACTION_POLICE) return SendErrorMessage(playerid, "Polis deðilsin.");
// 		if(!PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Bu komutu kullanmak için iþbaþýnda olmalýsýnýz.");
// 		new tohumid = TohumYakin(playerid), sorgu[120];
// 		if(!tohumid) return SendErrorMessage(playerid, "Herhangi bir tohuma yakýn deðilsiniz.");
// 		mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT * FROM tohumlar WHERE tohumID = %d", tohumid);
// 		mysql_tquery(dbHandle, sorgu, "TohumSorgu", "dddds", playerid, tohumid, 2, 0, "");
// 	}

// 	return 1;
// }

TohumSil(tohumid)
{
	new sorgu[120];
	mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT * FROM tohumlar WHERE tohumID = %d", tohumid);
	mysql_tquery(dbHandle, sorgu, "TohumSorgu", "dddds", 0, tohumid, 1, 0, "");
}

forward TohumSorgu(playerid, tohumid, islem, listitem, inputtext[]);
public TohumSorgu(playerid, tohumid, islem, listitem, inputtext[])
{
	new veriler = cache_num_rows(), yukle, sorgu[300];
	if(veriler)
	{
		switch(islem)
		{
			case 0: // Tohumlarý yükle
			{
				while(yukle < veriler)
				{
					cache_get_value_int(yukle, "tohumID", tohumid);
					cache_get_value_int(yukle, "hammadde", Tohum[tohumid][tohumHammadde]);
					cache_get_value_int(yukle, "kalansure", Tohum[tohumid][tohumSure]);
					cache_get_value_int(yukle, "sahip", Tohum[tohumid][tohumSahip]);
					cache_get_value_float(yukle, "x", Tohum[tohumid][tohumX]);
					cache_get_value_float(yukle, "y", Tohum[tohumid][tohumY]);
					cache_get_value_float(yukle, "z", Tohum[tohumid][tohumZ]);
					cache_get_value_int(yukle, "vw", Tohum[tohumid][tohumVW]);
					cache_get_value_int(yukle, "interior", Tohum[tohumid][tohumInt]);
					Tohum[tohumid][tohumObjeID] = CreateDynamicObject(TOHUM_OBJE, Tohum[tohumid][tohumX], Tohum[tohumid][tohumY], Tohum[tohumid][tohumZ] - 0.4, 0.0, 0.0, 0.0, Tohum[tohumid][tohumVW], Tohum[tohumid][tohumInt]);
					Tohum[tohumid][tohumLabel] = CreateDynamic3DTextLabel(".", COLOR_WHITE, Tohum[tohumid][tohumX], Tohum[tohumid][tohumY], Tohum[tohumid][tohumZ] - 0.4, 7.0);
					TohumGuncelle(tohumid);
					yukle++;
				}
				printf("[TOHUMLAR] Toplam: %d", veriler);
			}
			case 1: // Tohum sil
			{
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "DELETE FROM tohumlar WHERE tohumID = %d", tohumid);
				mysql_tquery(dbHandle, sorgu);
				Tohum[tohumid][tohumSahip] = -1;
				Tohum[tohumid][tohumX] = Tohum[tohumid][tohumY] = Tohum[tohumid][tohumZ] = 0.0;
				DestroyDynamicObject(Tohum[tohumid][tohumObjeID]);
				DestroyDynamic3DTextLabelEx(Tohum[tohumid][tohumLabel]);
			}
		}
	}
	else
	{
		if(islem == 0) print("[TOHUMLAR] Toplam: Yok");
	}
	return 1;
}

/* Radyo sistemi */
forward LoadDynamicRadios();
forward OnChannelInsert(playerid, channel);

public LoadDynamicRadios()
{
    new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows)	return print("[Radio] Kayit bulunamadi.");

	for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "id", RadiosInfo[i][radioID]);
		cache_get_value_int(i, "channelid", RadiosInfo[i][radioChannel]);
		cache_get_value_int(i, "owner", RadiosInfo[i][radioOwner]);
		cache_get_value(i, "pass", RadiosInfo[i][radioPass], 33);

		RadiosInfo[i][radioOn] = 1;
		total++;
	}
	printf("[Radio] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public OnChannelInsert(playerid, channel)
{
	if (!IsPlayerLogged(playerid)) return 1;

    RadiosInfo[channel][radioOn] = 1;
	RadiosInfo[channel][radioID] = cache_insert_id();
	PlayerInfo[playerid][pOwnedChannel] = RadiosInfo[channel][radioID];
	return 1;
}


SetRadioChannel(playerid, channel)
{
	if (channel == 0) PlayerInfo[playerid][pAuthed] = 0;
	PlayerInfo[playerid][pChannel] = channel;
	SQL_SetInteger("users", "channel", channel, PlayerInfo[playerid][pID]);
	return 1;
}

SetRadioSlot(playerid, slot)
{
	PlayerInfo[playerid][pSlot] = slot;
    SQL_SetInteger("users", "slot", slot, PlayerInfo[playerid][pID]);
	return 1;
}

GetPlayerChannel(playerid)
{
	return PlayerInfo[playerid][pChannel];
}

GetPlayerSlot(playerid)
{
	return PlayerInfo[playerid][pSlot];
}

ChannelExists(channelid)
{
	switch(channelid)
	{
	    case 911, 999, 912, 998: return 1;
	}

	for(new i = 0; i != MAX_RADIOS; i++)
	{
		if (RadiosInfo[i][radioOn] != 0 && RadiosInfo[i][radioChannel] == channelid) return 1;
	}
	return 0;
}

GetChannelID(mysql_id)
{
	for(new i = 0; i != MAX_RADIOS; i++)
	{
		if (RadiosInfo[i][radioOn] && RadiosInfo[i][radioID] == mysql_id) return i;
	}
	return -1;
}

SendRadioMessage(channel, color, string[])
{
	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || !PlayerInfo[i][pAuthed] || PlayerInfo[i][pChannel] != channel) continue;

        SCM(i, color, string);
	}
	return 1;
}

SendSlotRadioMessage(channel, slot, color, string[])
{
	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || PlayerInfo[i][pAuthed] != 1 || PlayerInfo[i][pChannel] != channel || PlayerInfo[i][pSlot] != slot) continue;

        SCM(i, color, string);
	}
	return 1;
}

AddChannelToFile(playerid, channelid, pass[], id)
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `radios` (channelid, owner, pass) VALUES (%i, %i, '%e')", channelid, PlayerInfo[playerid][pID], pass);
	mysql_tquery(dbHandle, query, "OnChannelInsert", "ii", playerid, id);
	return 1;
}

//////////////// YENÝ TELSÝZ SÝSTEMÝ /////////// -MCALLEN

alias:r("radio","telsiz");
CMD:r(playerid, params[])
{
 	if (PlayerInfo[playerid][pFaction] > 0)
    {
        if (!PlayerInfo[playerid][pOnDuty])
            return SendErrorMessage(playerid, "Görevde olmadýðýn için telsiz kullanamazsýn.");
    }
    else
    {
        if (!IsPlayerHasItem(playerid, INV_RADIO))
            return SendErrorMessage(playerid, "Telsize sahip deðilsin.");
    }
	new Float:ppos[3];
	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "(/r)adio [Mesaj]");

	static string[128];
	new mes[650];
	if(OyuncuBirlik(playerid) == FACTION_POLICE)
	{
		new tag[6], arg[25];
		if (!sscanf(params, "s[6]s[24]", tag, arg)) {
			if (CompareStrings(tag, "10-27")) {
				new userid;
				if (sscanf(arg, "u", userid)) return SendErrorMessage(playerid, "/r 10-27 [ID / isim]");
				if (!IsPlayerLogged(userid))	 return SendClientMessageEx(playerid, COLOR_POLICECHAT, "* HQ: Sonuç bulunamadý.");

				SendClientMessageEx(playerid, COLOR_POLICECHAT, "* HQ: %s, cinsi: %s, ödenmemiþ cezalar: %s, aranma durumu: %s.", GetNameEx(userid), (PlayerInfo[userid][pSex]==1)?("erkek"):("kadýn"), (CountPlayerTickets(userid))?("{FF6347}%i{9189EF}"):("Hayýr"), (IsPlayerWanted(userid))?("Evet"):("Hayýr"));
				SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(Telsiz) %s: Dispatcher, 10-27 %s.", GetNameWithMask(playerid), GetNameEx(userid));
				return 1;
			} else if (CompareStrings(tag, "10-28")) {
				new plates[12], vehicle;
				if (sscanf(arg, "s[102]", plates))				 return SendErrorMessage(playerid, "/r 10-28 [plaka]");
				if ((vehicle = FindVehicleByPlate(plates)) == -1) return SendClientMessageEx(playerid, COLOR_POLICECHAT, "* HQ: Sonuç bulunamadý.");

				PlayCrimeReportForPlayer(playerid, playerid, 13);

				SendClientMessageEx(playerid, COLOR_POLICECHAT, "* HQ: %s [%s], sahip: %s, ödenmemiþ cezalar: %s, aranma durumu: %s.", VehicleNames[GetVehicleModel(vehicle)-400], VehicleInfo[vehicle][carPlate], VehicleInfo[vehicle][carOwner], (CountVehicleTickets(vehicle))?("%i"):("Hayýr"), (VehicleInfo[vehicle][carWanted])?("Evet"):("Hayýr"));
				SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(Telsiz) %s: Dispatcher, 10-28 %s.", GetNameWithMask(playerid), VehicleInfo[vehicle][carPlate]);
				return 1;
			}
		}
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pFaction] == 0) continue;
			if(!PlayerInfo[i][pOnDuty]) continue;
			if(PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction]) continue;

	        if (strlen(params) > MAXLEN)
	        {
		        new pos = MAXLEN;

		        if (pos < MAXLEN-1) pos = MAXLEN;

				SendClientMessageEx(i, COLOR_RADIO, "** [CH: BASE, S: 911] %s: %.*s ...", GetNameEx(playerid), pos, params);
				SendClientMessageEx(i, COLOR_RADIO, "... %s", params[pos]);
	        }
	        else
	        {
  		        SendClientMessageEx(i, COLOR_RADIO, "** [CH: BASE, S: 911] %s: %s", GetNameEx(playerid), params);
	        }
			format(string, sizeof string, "%s telsizinin mandalýna basarak konuþmaya baþlar.", GetNameWithMask(playerid));
			SetPlayerChatBubble(playerid, string, COLOR_CYAN, 15.0, 3000);

			format(mes, sizeof(mes), "%s (Telsiz Kullandý) %i, %i: %s.",
			GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), params);
			insert_log(mes, ITEM_LOG, 7, PlayerInfo[playerid][pAccID]);
	    }
	    if (strlen(params) > MAXLEN)
	    {
		     new pos = MAXLEN;

		    if (pos < MAXLEN-1) pos = MAXLEN;

			SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(Telsiz) %s: %.*s ...", GetNameWithMask(playerid), pos, params);
		    SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", params[pos]);
	    }
	    else
	    {
			SendLocalMessage(Range_VShort, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3, "(Telsiz) %s: %s", GetNameEx(playerid), params);
	    }
		return 1;
	}
	else if(OyuncuBirlik(playerid) == FACTION_MEDICS || OyuncuBirlik(playerid) == FACTION_FIRE)
	{
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pFaction] == 0) continue;
			if(!PlayerInfo[i][pOnDuty]) continue;
			if(PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction]) continue;

	        if (strlen(params) > MAXLEN)
	        {
		        new pos = MAXLEN;

		        if (pos < MAXLEN-1) pos = MAXLEN;

				SendClientMessageEx(i, COLOR_RADIO, "** [CH: FIRE/MD, S: 911] %s: %.*s ...", GetNameEx(playerid), pos, params);
				SendClientMessageEx(i, COLOR_RADIO, "... %s", params[pos]);
	        }
	        else
	        {
  		        SendClientMessageEx(i, COLOR_RADIO, "** [CH: FIRE/MD, S: 911] %s: %s", GetNameEx(playerid), params);
	        }
			format(string, sizeof string, "%s telsizinin mandalýna basarak konuþmaya baþlar.", GetNameWithMask(playerid));
			SetPlayerChatBubble(playerid, string, COLOR_CYAN, 15.0, 3000);

			format(mes, sizeof(mes), "%s (Telsiz Kullandý) %i, %i: %s.",
			GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), params);
			insert_log(mes, ITEM_LOG, 7, PlayerInfo[playerid][pAccID]);
		}
	    if (strlen(params) > MAXLEN)
	    {
		     new pos = MAXLEN;

		    if (pos < MAXLEN-1) pos = MAXLEN;

			SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(Telsiz) %s: %.*s ...", GetNameWithMask(playerid), pos, params);
		    SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", params[pos]);
	    }
	    else
	    {
			SendLocalMessage(Range_VShort, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3, "(Telsiz) %s: %s", GetNameEx(playerid), params);
	    }
		format(string, sizeof string, "%s telsizinin mandalýna basarak konuþmaya baþlar.", GetNameWithMask(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_CYAN, 15.0, 3000);

		format(mes, sizeof(mes), "%s (Telsiz Kullandý) %i, %i: %s.",
		GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), params);
		insert_log(mes, ITEM_LOG, 7, PlayerInfo[playerid][pAccID]);
		return 1;
	}
	else if(OyuncuBirlik(playerid) == FACTION_CITY)
	{
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pFaction] == 0) continue;
			if(!PlayerInfo[i][pOnDuty]) continue;
			if(PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction]) continue;

	        if (strlen(params) > MAXLEN)
	        {
		        new pos = MAXLEN;

		        if (pos < MAXLEN-1) pos = MAXLEN;

				SendClientMessageEx(i, COLOR_RADIO, "** [CH: CITY, S: 333] %s: %.*s ...", GetNameEx(playerid), pos, params);
				SendClientMessageEx(i, COLOR_RADIO, "... %s", params[pos]);
	        }
	        else
	        {
  		        SendClientMessageEx(i, COLOR_RADIO, "** [CH: CITY, S: 333] %s: %s", GetNameEx(playerid), params);
	        }
			format(string, sizeof string, "%s telsizinin mandalýna basarak konuþmaya baþlar.", GetNameWithMask(playerid));
			SetPlayerChatBubble(playerid, string, COLOR_CYAN, 15.0, 3000);

			format(mes, sizeof(mes), "%s (Telsiz Kullandý) %i, %i: %s.",
			GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), params);
			insert_log(mes, ITEM_LOG, 7, PlayerInfo[playerid][pAccID]);
		}
	    if (strlen(params) > MAXLEN)
	    {
		     new pos = MAXLEN;

		    if (pos < MAXLEN-1) pos = MAXLEN;

			SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(Telsiz) %s: %.*s ...", GetNameWithMask(playerid), pos, params);
		    SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", params[pos]);
	    }
	    else
	    {
			SendLocalMessage(Range_VShort, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3, "(Telsiz) %s: %s", GetNameEx(playerid), params);
	    }
		format(string, sizeof string, "%s telsizinin mandalýna basarak konuþmaya baþlar.", GetNameWithMask(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_CYAN, 15.0, 3000);

		format(mes, sizeof(mes), "%s (Telsiz Kullandý) %i, %i: %s.",
		GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), params);
		insert_log(mes, ITEM_LOG, 7, PlayerInfo[playerid][pAccID]);
		return 1;
	}
	new playerchannel = GetPlayerChannel(playerid);
	new playerslot = GetPlayerSlot(playerid);

	if (playerchannel == 0)							return SendErrorMessage(playerid, "Frekansta deðilsin.");
	if (!PlayerInfo[playerid][pAuthed])			return SendErrorMessage(playerid, "Frekansa giriþ yapmadýnýz.");

	if (sscanf(params, "s[144]", params)) 		return SendHelpMessage(playerid, "/r [yazý]");

  	format(string, sizeof string, "%s telsizinin mandalýna basarak konuþmaya baþlar.", GetNameWithMask(playerid));
	SetPlayerChatBubble(playerid, string, COLOR_CYAN, 15.0, 3000);

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		if (pTemp[playerid][pPatrol] && playerchannel == 911) {
			format(mes, sizeof(mes), "** [CH: %i, S: %i] [%s] %s: %.*s ...", playerchannel, playerslot, PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], GetNameEx(playerid), pos, params);
		} else {
			format(mes, sizeof(mes), "** [CH: %i, S: %i] %s: %.*s ...", playerchannel, playerslot, GetNameEx(playerid), pos, params);
		}

		SendRadioMessage(playerchannel, COLOR_RADIO, mes);
		format(mes, sizeof(mes), "... %s", params[pos]);
		SendRadioMessage(playerchannel, COLOR_RADIO, mes);
		SendLocalMessage(7.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(Telsiz) %s: %.*s ...", GetNameWithMask(playerid), pos, params);
		SendLocalMessage(7.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", params[pos]);
	}
	else
	{
	    if (pTemp[playerid][pPatrol] && playerchannel == 911) {
			format(mes, sizeof(mes), "** [CH: %i, S: %i] [%s] %s: %s", playerchannel, playerslot, PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], GetNameEx(playerid), params);
		} else {
			format(mes, sizeof(mes), "** [CH: %i, S: %i] %s: %s", playerchannel, playerslot, GetNameEx(playerid), params);
		}

		SendRadioMessage(playerchannel, COLOR_RADIO, mes);
		SendLocalMessage(7.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(Telsiz) %s: %s", GetNameWithMask(playerid), params);
	}

	format(mes, sizeof(mes), "%s (Telsiz Kullandý) %i, %i: %s.",
	GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), params);
	insert_log(mes, ITEM_LOG, 7, PlayerInfo[playerid][pAccID]);
	return 1;
}

alias:yt("yakintelsiz","yakint");
CMD:yt(playerid, params[])
{
    if (OyuncuBirlik(playerid) != FACTION_POLICE && OyuncuBirlik(playerid) != FACTION_MEDICS && OyuncuBirlik(playerid) != FACTION_FIRE && OyuncuBirlik(playerid) != FACTION_DOCS && OyuncuBirlik(playerid) != FACTION_CITY)
		return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz!");

	if (PlayerInfo[playerid][pFaction] > 0)
    {
        if (!PlayerInfo[playerid][pOnDuty])
            return SendErrorMessage(playerid, "Görevde olmadýðýn için telsiz kullanamazsýn.");
    }
    else
    {
        if (!IsPlayerHasItem(playerid, INV_RADIO))
            return SendErrorMessage(playerid, "Telsize sahip deðilsin.");
    }

    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
		return SendErrorMessage(playerid, "Þu anda bunu yapamazsýnýz.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/yt [Mesaj]");

	new Float:ppos[3], string[250];
	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	new mes[125];

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(Telsiz) %s: %.*s ...", GetNameWithMask(playerid), pos, params);
		SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", params[pos]);
	}
	else
	{
		SendLocalMessage(Range_VShort, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3, "(Telsiz) %s: %s", GetNameEx(playerid), params);
	}
  	format(string, sizeof string, "%s telsizinin mandalýna basarak konuþmaya baþlar.", GetNameWithMask(playerid));
	SetPlayerChatBubble(playerid, string, COLOR_CYAN, 15.0, 3000);

	format(mes, sizeof(mes), "%s (Yakýn Telsiz Kullandý) %i, %i: %s.",
	GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), params);
	insert_log(mes, ITEM_LOG, 7, PlayerInfo[playerid][pAccID]);

	foreach (new i: Player)
	{
	    if (IsPlayerInRangeOfPoint(i, 35.0, ppos[0], ppos[1], ppos[2]) && (OyuncuBirlik(i) == FACTION_POLICE || OyuncuBirlik(i) == FACTION_MEDICS || OyuncuBirlik(i) == FACTION_FIRE) || OyuncuBirlik(i) == FACTION_DOCS || OyuncuBirlik(i) == FACTION_CITY)
		{
 			format(string, sizeof(string), "** [CH: 911 S: CLOSE] %s: %s **", GetNameWithMask(playerid), params);
			SendClientMessage(i, 0xE0BA91FF, string);
		}
	}
	return 1;
}
alias:frekans("frekansdegistir","ch","yenifrekans","chdegistir");
CMD:frekans(playerid, params[])
{
	new frekans;

    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
		return SendErrorMessage(playerid, "Þu anda frekans deðiþtiremezsiniz.");

    if (!IsPlayerConnected(playerid)) return 1;
	if (!IsPlayerHasItem(playerid, INV_RADIO))	return SendErrorMessage(playerid, "Telsize sahip deðilsin.");
	if (sscanf(params,"d",frekans))			return SendHelpMessage(playerid, "/frekans [Frekans Numarasý (0-100)]");
	if (frekans < 0 || frekans > 100000)			return SendErrorMessage(playerid, "Geçersiz slot numarasý. (0-100000) ");

	if (frekans == 911 && !IsPlayerFactionPolice(playerid))		return SendErrorMessage(playerid,"Bu telsiz frekansýný kullanamazsýnýz.");
	if (frekans == 912 && !IsPlayerFactionMedic(playerid))		return SendErrorMessage(playerid, "Bu telsiz frekansýný kullanamazsýnýz.");
	if (frekans == 998 && !IsPlayerFactionFire(playerid))		return SendErrorMessage(playerid, "Bu telsiz frekansýný kullanamazsýnýz.");
	if (frekans == GetPlayerChannel(playerid))					return SendErrorMessage(playerid, "Zaten bu telsiz frekansýna baðlýsýnýz.");

	if (frekans == 911 && IsPlayerFactionPolice(playerid))
	{
		SendRadioMsg(playerid, "Frekans deðiþtirildi [CH: %i]", frekans);
		PlayerInfo[playerid][pAuthed] = 1;
		SetRadioChannel(playerid, frekans);
		return 1;
	}

	else if (frekans == 912 && IsPlayerFactionMedic(playerid))
	{
		SendRadioMsg(playerid, "Frekans deðiþtirildi [CH: %i]", frekans);
		PlayerInfo[playerid][pAuthed] = 1;
		SetRadioChannel(playerid, frekans);
		return 1;
	}

	else if (frekans == 998 && IsPlayerFactionFire(playerid))
	{
		SendRadioMsg(playerid, "Frekans deðiþtirildi [CH: %i]", frekans);
		PlayerInfo[playerid][pAuthed] = 1;
		SetRadioChannel(playerid, frekans);
		return 1;
	}
	if(frekans == 0) {
		if (!GetPlayerChannel(playerid)) return SendErrorMessage(playerid, "Herhangi bir frekansa baðlý deðilsiniz.");
		SendRadioMsg(playerid, "Telsiz kanalýndan ayrýldýnýz. [CH: %i]", GetPlayerChannel(playerid));
		PlayerInfo[playerid][pAuthed] = 0;
		SetRadioChannel(playerid, 0);
		PlaySound(playerid, 6400);
	}

	PlayerInfo[playerid][pAuthed] = 1;
	SetRadioChannel(playerid, frekans);
	SendRadioMsg(playerid, "Frekans deðiþtirildi [CH: %i]", frekans);
	return 1;
}
alias:slotdegistir("slot", "chslot");
CMD:slotdegistir(playerid, params[])
{
    if (!IsPlayerHasItem(playerid, INV_RADIO))	return SendErrorMessage(playerid, "Telsize sahip deðilsiniz.");

	new slot;

	if (sscanf(params,"d",slot))			return SendHelpMessage(playerid, "/(slot)degistir [Slot Numarasý (0-100)]");
	if (slot < 0 || slot > 100)			return SendErrorMessage(playerid, "Geçersiz slot numarasý. ");
	if (slot == GetPlayerSlot(playerid))	return SendErrorMessage(playerid, "Zaten bu slottasýnýz. ");

	SetRadioSlot(playerid, slot);
	SendRadioMsg(playerid, "Frekans slotunuz deðiþtirildi. [SLOT: %i]", slot);
	return 1;
}

/* Speedcap */

SC_OnGameModeInit()
{
	return mysql_tquery(dbHandle, "SELECT * FROM `speedcams`", "LoadDynamicSpeed");
}

SC_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;
    new scid = GetPVarInt(playerid, "SC:ID") - 1;

    GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	if (GetPVarInt(playerid, "SC:Edit") && speedcam[scid][sc_object] == objectid)
	{
		if (response == EDIT_RESPONSE_FINAL)
		{
	    	DeletePVar(playerid, "SC:Edit");
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			new query[256];

			mysql_format(dbHandle, query, sizeof(query), "UPDATE `speedcams` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %i", x, y, z, rx, ry, rz, speedcam[scid][sc_id]);
			mysql_tquery(dbHandle, query);

			GetDynamicObjectPos(objectid, speedcam[scid][sc_x], speedcam[scid][sc_y], speedcam[scid][sc_z]);
            GetDynamicObjectRot(objectid, speedcam[scid][sc_rx], speedcam[scid][sc_ry], speedcam[scid][sc_rz]);

  			SendSyntaxMessage(playerid, "Radarý düzenlendiniz. [ID: %i | %s].", scid, speedcam[scid][sc_name]);
            SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "(( %s adlý kiþi hýz kamerasýný düzenledi: [ID: %i | %s] ))", GetName(playerid), scid, speedcam[scid][sc_name]);
		}
		else if (response == EDIT_RESPONSE_CANCEL)
		{
		    DeletePVar(playerid, "SC:Edit");
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
	}
	return 1;
}

SpeedCam_OnPlayerEnterArea(playerid, areaid)
{
	if (VehicleInfo[GetPlayerVehicleID(playerid)][carAdmin]) return 1;

	new sp_camid = -1;
    for(new i = 0; i < Iter_Count(speedcamObjects); i++)
	{
		if (areaid == speedcam[i][sc_areaid])
		{
			sp_camid = i;
			break;
		}
	}
	if (sp_camid == -1) return 1;

    new faction = PlayerInfo[playerid][pFaction],
        sc_vehid = GetPlayerVehicleID(playerid)
    ;
    if ((IsFactionPolice(faction) || IsFactionMedic(faction) || IsFactionFire(faction)) && PlayerInfo[playerid][pOnDuty]) return 1;
	if (IsFactionPolice(VehicleInfo[sc_vehid][carFaction]))	    return 1;
    if (!IsPlayerInAnyVehicle(playerid))						return 1;
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)		return 1;
	if (VehicleInfo[sc_vehid][carType] > 0)                     return 1;
    if (IsNotAEngineCar(sc_vehid))							    return 1;

    if (speedcam[sp_camid][sc_speed]+20+random(10) > GetVehicleSpeed(sc_vehid))	return 1;

	SM2(playerid, "Radar sizi yakaladý: %s. Hýz sýnýrýný aþtýnýz.", speedcam[sp_camid][sc_name]);

	PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);

	new msg[150];

	if (!VehicleInfo[sc_vehid][carRent])
	{
		if (VehicleInfo[sc_vehid][carPlate] == '_')
			return SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: Radar [ID: %i | %s]: %s model plakasýz araç radara yakalandý - %i km/h. **", sp_camid, speedcam[sp_camid][sc_name], VehicleNames[GetVehicleModel(sc_vehid)-400], GetVehicleSpeed(sc_vehid));
		else if (VehicleInfo[sc_vehid][carFakePlate])
			return SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: Radar [ID: %i | %s]: %s model sisteme kayýt edilmemiþ plakalý araç radara yakalandý - %i km/h. **", sp_camid, speedcam[sp_camid][sc_name], VehicleNames[GetVehicleModel(sc_vehid)-400], GetVehicleSpeed(sc_vehid));
		else if (VehicleInfo[sc_vehid][carWanted])
			SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: Radar [ID: %i | %s]: %s [%s], aranýyor - %i km/h. **", sp_camid, speedcam[sp_camid][sc_name], VehicleNames[GetVehicleModel(sc_vehid)-400], VehicleInfo[sc_vehid][carPlate], GetVehicleSpeed(sc_vehid));

		GiveVehicleTicket(0, sc_vehid, SC_DEF_TICKET_SUM, "Hýz sýnýrýný aþmak", 1);
		format(msg, sizeof(msg), "%s [%s] aracýnýz hýz sýnýrýný aþtýðý için radara yakalandý ve radar aracýnýza $%d ceza kesti. Tespit Edilen Hýz: %i km/h.", VehicleNames[GetVehicleModel(sc_vehid)-400], VehicleInfo[sc_vehid][carPlate], SC_DEF_TICKET_SUM, GetVehicleSpeed(sc_vehid));
		new find = 0;
		foreach(new i : Player)
		{
			if (VehicleInfo[sc_vehid][carOwnerID] == PlayerInfo[i][pID])
			{
				playerid = i;
				find++;
			}
		}
		if (!find)
		{
			new query[256];
			mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `id`=%i", VehicleInfo[sc_vehid][carRent]);
			mysql_tquery(dbHandle, query, "SmsToPlayerOff", "sss", "1199", "LSPD", msg);
		}
		else SendSMStoPlayer(playerid, "1199", "LSPD", msg);

		return SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: Radar [ID: %i | %s]: %s [%s] - %i km/h. **", sp_camid, speedcam[sp_camid][sc_name], VehicleNames[GetVehicleModel(sc_vehid)-400], VehicleInfo[sc_vehid][carPlate], GetVehicleSpeed(sc_vehid));
	}
	else
	{
		GivePlayerTicket(0, VehicleInfo[sc_vehid][carRent], SC_DEF_TICKET_SUM, "Hýz sýnýrýný aþmak.", 1);
		format(msg, sizeof(msg), "%s [%s] kiralýk aracýnýz ile hýz sýnýrý aþýldýðý için radara yakalandý ve radar aracýnýza $%d ceza kesti. Tespit Edilen Hýz: %i km/h.", VehicleNames[GetVehicleModel(sc_vehid)-400], VehicleInfo[sc_vehid][carPlate], SC_DEF_TICKET_SUM, GetVehicleSpeed(sc_vehid)-speedcam[sp_camid][sc_speed]);
		new find = 0;
		foreach(new i : Player)
		{
			if (VehicleInfo[sc_vehid][carRent] == PlayerInfo[i][pID])
			{
				playerid = i;
				find++;
			}
		}
		if (!find)
		{
			new query[256];
			mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `id`=%i", VehicleInfo[sc_vehid][carOwnerID]);
			mysql_tquery(dbHandle, query, "SmsToPlayerOff", "sss", "1199", "LCPD", msg);
		}
		else SendSMStoPlayer(playerid, "1199", "LCPD", msg);

		//return SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: Radar [ID: %i | %s]: %s [%s] - %i km/h. **", sp_camid, speedcam[sp_camid][sc_name], VehicleNames[GetVehicleModel(sc_vehid)-400], VehicleInfo[sc_vehid][carPlate], GetVehicleSpeed(sc_vehid));
		//return SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: SpeedCam [ID: %i | %s] çàôèêñèðîâàëà àðåíäîâàííûé àâòîìîáèëü ìàðêè %s [%s]. **", sp_camid, speedcam[sp_camid][sc_name], VehicleNames[GetVehicleModel(sc_vehid)-400], VehicleInfo[sc_vehid][carPlate]);
	}
    //return 1;
}

forward LoadDynamicSpeed();
forward OnSpeedInsert(speedid);

public LoadDynamicSpeed()
{
    new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows) return print("[Speedcams] Kayit bulunamadi.");

	for(new i; i < rows; i++)
	{
        cache_get_value_int(i, "id", speedcam[i][sc_id] );
        cache_get_value_int(i, "speed", speedcam[i][sc_speed]);

        cache_get_value(i, "name", speedcam[i][sc_name], 32);

        cache_get_value_float(i, "posx", speedcam[i][sc_x]);
        cache_get_value_float(i, "posy", speedcam[i][sc_y]);
        cache_get_value_float(i, "posz", speedcam[i][sc_z]);
        cache_get_value_float(i, "posrx", speedcam[i][sc_rx]);
        cache_get_value_float(i, "posry", speedcam[i][sc_ry]);
        cache_get_value_float(i, "posrz", speedcam[i][sc_rz]);
        cache_get_value_int(i, "interior", speedcam[i][sc_int]);
        cache_get_value_int(i, "virworld", speedcam[i][sc_vw]);

        Iter_Add(speedcamObjects, i);

	    speedcam[i][sc_object] = CreateDynamicObject(18880, speedcam[i][sc_x], speedcam[i][sc_y], speedcam[i][sc_z], speedcam[i][sc_rx], speedcam[i][sc_ry], speedcam[i][sc_rz], speedcam[i][sc_vw], speedcam[i][sc_int]);
        speedcam[i][sc_areaid] = CreateDynamicSphere(speedcam[i][sc_x], speedcam[i][sc_y], speedcam[i][sc_z], SC_DEF_RADIUS, speedcam[i][sc_vw], speedcam[i][sc_int]);

        total++;
	}
	printf("[Speedcams] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public OnSpeedInsert(speedid)
{
	speedcam[speedid][sc_id] = cache_insert_id();
	return 1;
}

AddSpeedcamToFile(scam, speed_fl, speed_name[], Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, speedint, speedvw)
{
    new query[612];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `speedcams` (`speed`,`name`,`posx`,`posy`,`posz`,`posrx`,`posry`,`posrz`,`interior`,`virworld`) VALUES (%i,'%s',%f,%f,%f,%f,%f,%f,%i,%i)", speed_fl, speed_name, x, y, z, rx, ry, rz, speedint, speedvw);
    mysql_tquery(dbHandle, query, "OnSpeedInsert", "d", scam);
	return 1;
}

SC_GetFreeID()
{
	new i = -1;
	for(new p=0; p < MAX_SPEEDCAMS; p++)
	{
		if (!Iter_Contains(speedcamObjects, p))
        {
			i=p;
			break;
		}
	}
    return i;
}

GetNearestSpeed(playerid, Float:speed_range, speed_status = 0)
{
    if (speed_status)
    {
        if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return -1;
    }

    for(new i = 0; i < Iter_Count(speedcamObjects); i++)
    {
        if (!IsValidDynamicObject(speedcam[i][sc_object]))                                                           continue;
        if (!IsPlayerInRangeOfPoint(playerid, speed_range, speedcam[i][sc_x], speedcam[i][sc_y], speedcam[i][sc_z])) continue;

        if (speed_status)
        {
            if (speedcam[i][sc_speed] >= GetVehicleSpeed(GetPlayerVehicleID(playerid)))  return -1;
        }
        return i;
    }
    return -1;
}

alias:hizkamerasi("speedcam");
CMD:hizkamerasi(playerid, params[])
{
    new option[16], secoption[128], faction = PlayerInfo[playerid][pFaction];

    if (!IsFactionPolice(faction))       return SendErrorMessage(playerid, "Bu komutu kullanmak için polis memuru olmalýsýnýz.");
    if (!PlayerInfo[playerid][pOnDuty])  return SendErrorMessage(playerid, "Bu komutu kullanmak için iþbaþýnda olmalýsýnýz.");
    if (!isLeader(playerid) && !GetTowRight(playerid)) return SendErrorMessage(playerid, "Rütbenizin bu komutu kullanmaya yetkisi yok.");

    if (sscanf(params, "s[16]S()[128]", option, secoption))
    {
        SendHelpMessage(playerid, "/speedcam [seçenekler]");
        SendHelpMessage(playerid, "ekle / kaldir / duzenle / liste");
        return 1;
    }

    if (CompareStrings(option, "ekle"))
    {
        new id = SC_GetFreeID(), sp_limit, sp_name[32], sp_near = GetNearestSpeed(playerid, 20.0), sp_zone[64];

        if (id == -1)                                        return SendErrorMessage(playerid, "Bütün kamera slotlarý dolu.");
        if (sp_near != -1)                                   return SendErrorMessage(playerid, "Bu yarýçapta zaten aktif bir radar var");
        if (PlayerInfo[playerid][pRank] < SC_MIN_INSTALL)    return SendErrorMessage(playerid, "Bu komutu kullanmak için %i yetkisinde olmalýsýnýz.", SC_MIN_INSTALL);
        if (sscanf(secoption, "d", sp_limit))                return SendHelpMessage(playerid, "/speedcam ekle [hýz limiti]");
        if (sp_limit <= 0 || sp_limit > SC_MAX_SPEED)        return SendErrorMessage(playerid, "Hýz limiti 1 ile %d arasýnda olmalýdýr.", SC_MAX_SPEED);

        GetPlayerPos(playerid, speedcam[id][sc_x], speedcam[id][sc_y], speedcam[id][sc_z]);
        GetPlayer2DZone(playerid, sp_zone, sizeof(sp_zone));

        format(speedcam[id][sc_name], 64, "%s %i", sp_zone, id);
        new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

        speedcam[id][sc_speed] = sp_limit;
        speedcam[id][sc_x] = x;
        speedcam[id][sc_y] = y+1;
        speedcam[id][sc_z] = z;
		speedcam[id][sc_rx] = 0;
        speedcam[id][sc_ry] = 0;
        speedcam[id][sc_rz] = 0;
        speedcam[id][sc_int] = GetPlayerInterior(playerid);
        speedcam[id][sc_vw] = GetPlayerVirtualWorld(playerid);
        speedcam[id][sc_object] = CreateDynamicObject(18880, speedcam[id][sc_x], speedcam[id][sc_y], speedcam[id][sc_z], speedcam[id][sc_rx], speedcam[id][sc_ry], speedcam[id][sc_rz], speedcam[id][sc_vw], speedcam[id][sc_int]);
        Iter_Add(speedcamObjects, id);

        speedcam[id][sc_areaid] = CreateDynamicSphere(speedcam[id][sc_x], speedcam[id][sc_y], speedcam[id][sc_z], SC_DEF_RADIUS, speedcam[id][sc_vw], speedcam[id][sc_int]);

        AddSpeedcamToFile(id, sp_limit, sp_name, speedcam[id][sc_x], speedcam[id][sc_y], speedcam[id][sc_z], 0.0, 0.0, 0.0, speedcam[id][sc_int], speedcam[id][sc_vw]);
        SM2(playerid, "Hýz kamerasý oluþturuldu: [ID: %i] %s | Hýz limiti: %d.", id, speedcam[id][sc_name], sp_limit);
        SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "(( %s adlý kiþi %s hýz kamerasýný kurdu. | Hýz Limiti: %d. ))", GetName(playerid), speedcam[id][sc_name], sp_limit);
        return 1;
    }

    else if (CompareStrings(option, "kaldir"))
    {
        new sp_near = GetNearestSpeed(playerid, 20.0);

        if (sp_near == -1)                                   return SendErrorMessage(playerid, "Bu yarýçapta herhangi bir hýz kamerasý yok.");
        if (PlayerInfo[playerid][pRank] < SC_MIN_INSTALL)    return SendErrorMessage(playerid, "Bu komutu kullanmak için %i yetkisinde olmalýsýnýz.", SC_MIN_INSTALL);

        if (IsValidDynamicObject(speedcam[sp_near][sc_object]))
        {
            DestroyDynamicObject(speedcam[sp_near][sc_object]);
            speedcam[sp_near][sc_object] = INVALID_OBJECT_ID;
        }

        new sql_query[256];

        SendWarningMessage(playerid, "Kamerayý kaldýrdýn. [ID: %i | %s].", sp_near, speedcam[sp_near][sc_name]);
        SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "(( %s adlý kiþi hýz kamerasýný [%s] kaldýrdý. ))", GetName(playerid), speedcam[sp_near][sc_name]);

        speedcam[sp_near][sc_name] = EOS;
        Iter_Remove(speedcamObjects, sp_near);

        mysql_format(dbHandle, sql_query, sizeof(sql_query), "DELETE FROM `speedcams` WHERE `id` = %i", sp_near);
        mysql_tquery(dbHandle, sql_query);
        return 1;
    }

    else if (CompareStrings(option, "duzenle"))
    {
        new sp_near = GetNearestSpeed(playerid, 15.0), thirdoption[64], fouroption[64];

        if (sp_near == -1)                                   return SendErrorMessage(playerid, "Bu yarýçapta herhangi bir hýz kamerasý yok.");
        if (PlayerInfo[playerid][pRank] < SC_MIN_INSTALL)    return SendErrorMessage(playerid, "Bu komutu kullanmak için %i yetkisinde olmalýsýnýz.", SC_MIN_INSTALL);

        if (sscanf(secoption, "s[64]S()[64]", thirdoption, fouroption))
        {
            SendHelpMessage(playerid, "/sc duzenle [ayarlar]");
            SendHelpMessage(playerid, "pozisyon/limit");
            return 1;
        }

        else if (CompareStrings(thirdoption, "limit"))
        {
            new sp_limit;

            if (sscanf(fouroption, "d", sp_limit))           return SendHelpMessage(playerid, "/sc edit limit [hýz limiti]");
            if (sp_limit <= 0 || sp_limit > SC_MAX_SPEED)    return SendErrorMessage(playerid, "Hýz limiti 1 ile %d arasýnda olmalýdýr.", SC_MAX_SPEED);

            speedcam[sp_near][sc_speed] = sp_limit;
            SQL_SetInteger("speedcams", "speed", speedcam[sp_near][sc_speed], speedcam[sp_near][sc_id]);
            SendSyntaxMessage(playerid, "Yakýnýnýzda bulunan hýz kamerasýnýn limitini deðiþtirdiniz: %s [ID: %i] | Yeni Limit: %d.", speedcam[sp_near][sc_name], sp_near, sp_limit);
            SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "(( %s adlý kiþi hýz kamerasýnýn limiti deðiþtirdi: %s [ID: %i]| Yeni Limit: %d. ))", GetName(playerid), speedcam[sp_near][sc_name], sp_near, sp_limit);
            return 1;
        }

        else if (CompareStrings(thirdoption, "pozisyon"))
        {
            SetPVarInt(playerid, "SC:ID", sp_near + 1);
            SetPVarInt(playerid, "SC:Edit", 1);
            EditDynamicObject(playerid, speedcam[sp_near][sc_object]);
            return 1;
        }
    }

    else if (CompareStrings(option, "liste"))
    {
		new dialog_header[96] = "{FFFFFF}Kamera\t{FFFFFF}ID\t{FFFFFF}Hýz Limiti\n", dialog_body[3072];

		format(dialog_body, sizeof(dialog_body), "%s", dialog_header);

        for(new i = 0; i < Iter_Count(speedcamObjects); i++)
		{
			format(dialog_body, sizeof(dialog_body), "%s%s\t%i\t%d\n", dialog_body, speedcam[i][sc_name], i, speedcam[i][sc_speed]);
		}

		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Kamera listesi", dialog_body, "Kapat", "");
    }
    return 1;
}//î

/* Silah sistemi */

Weapon_EditAttachedObject(playerid, response, index, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new weaponid = EditingWeapon[playerid];
	if(weaponid)
	{
		if(response)
		{
			new enum_index = weaponid - 22, weaponname[18], name[MAX_PLAYER_NAME], string[340];

			GetWeaponName(weaponid, weaponname, sizeof(weaponname));
			GetPlayerName(playerid, name, MAX_PLAYER_NAME);

			WeaponSettings[playerid][enum_index][Position][0] = fOffsetX;
			WeaponSettings[playerid][enum_index][Position][1] = fOffsetY;
			WeaponSettings[playerid][enum_index][Position][2] = fOffsetZ;
			WeaponSettings[playerid][enum_index][Position][3] = fRotX;
			WeaponSettings[playerid][enum_index][Position][4] = fRotY;
			WeaponSettings[playerid][enum_index][Position][5] = fRotZ;
			new slot = GetWeaponObjectSlot(weaponid);
			if(slot != -1) SetPlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid), GetWeaponModelEx(weaponid), WeaponSettings[playerid][enum_index][Bone], fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, 1.0, 1.0, 1.0);
			else return SendErrorMessage(playerid, "Tüm aksesuar slotlarýný kullanýyorsunuz, bir aksesuar çýkartýp tekrar deneyin.");
			SendServerMessage(playerid, "%s isimli silahýnýzýn pozisyonunu baþarýyla deðiþtirdiniz.", weaponname);

			if(WeaponSettings[playerid][enum_index][duzenlendi])
			{
				mysql_format(dbHandle, string, sizeof(string), "DELETE FROM weaponsettings WHERE sOwner = '%d' AND WeaponID = '%d'", PlayerInfo[playerid][pID], weaponid);
				mysql_tquery(dbHandle, string);
				WeaponSettings[playerid][enum_index][duzenlendi] = 0;
			}

			if(!WeaponSettings[playerid][enum_index][duzenlendi])
			{
				WeaponSettings[playerid][enum_index][duzenlendi] = 1;
				mysql_format(dbHandle, string, sizeof(string), "INSERT INTO weaponsettings (sOwner, WeaponID, PosX, PosY, PosZ, RotX, RotY, RotZ, Bone, duzenlendi) VALUES (%d, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, 1, %d)", PlayerInfo[playerid][pID], weaponid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, WeaponSettings[playerid][enum_index][duzenlendi]);
				mysql_tquery(dbHandle, string);
			}
		}
		EditingWeapon[playerid] = 0;
		return 1;
	}
	return 1;
}

Weapon_OnPlayerDamage(&playerid, &Float:amount, &issuerid, &WEAPON:weapon, &bodypart)
{
	if (IsPlayerAFK(playerid))				   return 1;
	if (pTemp[playerid][pInvulnerable] != 0.0) return 1;

	if (issuerid != INVALID_PLAYER_ID)
	{
		if (PlayerInfo[issuerid][pInjured] > 0) return 1;
	    if (issuerid != INVALID_PLAYER_ID && weapon != 54 && IsPlayerAFK(issuerid))                 return 1;

		new Float:health, Float:armour;

		health = PlayerInfo[playerid][pHealth];
		AntiCheatGetArmour(playerid, armour);

        pTemp[playerid][pInjureText] = 1;

		new Float:target_x, Float:target_y, Float:target_z, Float:distance;

		GetPlayerPos(playerid, target_x, target_y, target_z);
		distance = floatround(GetPlayerDistanceFromPoint(issuerid, target_x, target_y, target_z), floatround_round);

	    if (PlayerInfo[playerid][pInjured] == 1 || PlayerInfo[playerid][pInjured] == 3)
		{
		    PlayerInfo[playerid][pHealth] = 100.0;

		    PlayerInfo[playerid][pInjured] = 2;
			PlayerInfo[issuerid][pDeathReason] = weapon;

			SQL_SetInteger("users", "deathreason", weapon, PlayerInfo[issuerid][pID]);

			AC_ResetPlayerWeapons(playerid);
			SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);

			SM3(playerid, "Yaralýyken hasar aldýðýnýz için karakteriniz aðýr yaralý duruma geçti.");
			ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive_DIE",3.5,0,0,0,1,0);
			return 1;
		}

		if (PlayerInfo[playerid][pInjured] == 2)
		{
		    PlayerInfo[playerid][pHealth] = 9999.0;
		    return 1;
		}

        if (weapon == 23 && pTemp[issuerid][pTaser])
		{
		    //health = health;
            SetPlayerArmour(playerid, armour);

            if (!PlayerNearPlayer(10.0, playerid, issuerid))	return SM1(issuerid, "Kiþinin mesafesi size çok uzak.");

            new vehicle = GetPlayerVehicleID(playerid);

			if (vehicle && !IsABiker(vehicle) && !IsABicycle(vehicle))	return 1;
            if (pTemp[playerid][pTaserTime])							return SM1(issuerid, "Bu kiþi zaten taser etkisinde.");
            if (vehicle)												RemovePlayerFromVehicle(playerid);

            PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
            SavePlayerPos(playerid);
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 1, 0);
            pTemp[playerid][pTaserTime] = 10;
			pc_cmd_me(playerid, "elektrik þokuyla birlikte yere yýðýlýr.");
			SetPlayerDrunkLevel(playerid, 2500);
		    return 1;
		}
		else if (weapon == 25 && pTemp[issuerid][pBeanbag])
		{
		    //SetPlayerHealth(playerid, health);
            SetPlayerArmour(playerid, armour);

            if (!PlayerNearPlayer(20.0, playerid, issuerid))	return SM1(issuerid, "Kiþinin mesafesi size çok uzak.");

            new vehicle = GetPlayerVehicleID(playerid);

			if (vehicle && !IsABiker(vehicle) && !IsABicycle(vehicle))	return 1;
            if (pTemp[playerid][pTaserTime])							return SM1(issuerid, "Bu kiþi zaten beanbag etkisinde.");
            if (vehicle)												RemovePlayerFromVehicle(playerid);

            SavePlayerPos(playerid);
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 1, 0);
            pTemp[playerid][pTaserTime] = 15;
			pc_cmd_me(playerid, "plastik merminin etkisiyle yere yýðýlýr.");
			SetPlayerDrunkLevel(playerid, 2500);
		    return 1;
		}
		else if (weapon == 33 && pTemp[issuerid][pLTL])
		{
		    //SetPlayerHealth(playerid, health);
            SetPlayerArmour(playerid, armour);

            if (!PlayerNearPlayer(30.0, playerid, issuerid))	return SM1(issuerid, "Kiþinin mesafesi size çok uzak.");

            new vehicle = GetPlayerVehicleID(playerid);

			if (vehicle && !IsABiker(vehicle) && !IsABicycle(vehicle))	return 1;
            if (pTemp[playerid][pTaserTime])							return SM1(issuerid, "Bu kiþi zaten beanbag etkisinde.");
            if (vehicle)												RemovePlayerFromVehicle(playerid);

            SavePlayerPos(playerid);
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 1, 0);
            pTemp[playerid][pTaserTime] = 20;
			pc_cmd_me(playerid, "plastik kapsülün etkisiyle yere yýðýlýr.");
			SetPlayerDrunkLevel(playerid, 2500);
		    return 1;
		}
        else if ((weapon == 0 || weapon == 3) && pTemp[issuerid][pTackleMode])
		{
		    //SetPlayerHealth(playerid, health);
            SetPlayerArmour(playerid, armour);

            if (!PlayerNearPlayer(10.0, playerid, issuerid))	return SM1(issuerid, "Kiþinin mesafesi size çok uzak.");

            new vehicle = GetPlayerVehicleID(playerid);

			if (vehicle && !IsABiker(vehicle) && !IsABicycle(vehicle))	return 1;
            if (pTemp[playerid][pTaserTime])							return SM1(issuerid, "Bu kiþi zaten baygýnlýk etkisinde.");
            if (vehicle)												RemovePlayerFromVehicle(playerid);

            SavePlayerPos(playerid);
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 1, 0);
            pTemp[playerid][pTaserTime] = 10;

			pTemp[issuerid][pTackleMode] = !pTemp[issuerid][pTackleMode];

			pc_cmd_me(playerid, "üzerine yýðýlan polis memurunun etkisiyle yere düþer.");
			SetPlayerDrunkLevel(playerid, 2500);
		    return 1;
		}

        if ((bodypart == 7 || bodypart == 8) && pTemp[playerid][pInjuredLegTime] == 0)
		{
		    SM3(playerid, "Bacaðýnýzdan hasar aldýnýz ve 30 saniye boyunca koþamayacaksýnýz.");
    		pTemp[playerid][pInjuredLegTime] = INJURED_LEG_TIME;
		}

		switch(weapon)
		{
		    case 0: amount = float(randomEx(15, 30))/10.0; // Fist
			case 1: amount = 5.0; // Brass Knuckles
			case 2: amount = 5.0; // Gîlf Club
			case 3: amount = 6.0; // Nightstick
			case 4: amount = 7.0; // Knife
			case 5: amount = 5.0; // Baseball Bat
			case 6: amount = 5.0; // Shovel
			case 7: amount = 5.0; // Pool Cue
			case 8: amount = 8.0; // Katana
			case 9: amount = 10.0; // Chainsaw
			case 14: amount = 2.0; // Flowers
			case 15: amount = 5.0; // Cane
			case 16: amount = 50.0; // Grenade
			case 18: amount = 20.0; // Molotov
			case 22: amount = float(randomEx(15, 20)); 				// M1911
			case 23, 28, 29, 32: amount = float(randomEx(17, 23)); 	// SD Pistol, UZI, MP5, Tec
			case 24: amount = float(randomEx(38, 43)); 				// Desert Eagle
			case 25, 26, 27: // Shotgun, Sawnoff Shotgun, CombatShotgun
			{
			    new Float: p_x, Float: p_y, Float: p_z;
			    GetPlayerPos(issuerid, p_x, p_y, p_z);
			    new Float: dist = GetPlayerDistanceFromPoint(playerid, p_x, p_y, p_z);

			    if (dist < 5.0)			amount = float(randomEx(50, 55));
				else if (dist < 10.0)	amount = float(randomEx(23, 35));
				else if (dist < 15.0)	amount = float(randomEx(15, 25));
				else if (dist < 20.0)	amount = float(randomEx(10, 15));
				else if (dist < 30.0)	amount = float(randomEx(5, 8));
			}
			case 30: amount = float(randomEx(20, 25)); // AK47
			case 31: amount = float(randomEx(20, 22)); // M4A1
			case 33, 34: amount = float(randomEx(70, 75)); // Country Rifle, Sniper Rifle
			case 35: amount = 0.0; // RPG
			case 36: amount = 0.0; // HS Rocket
			case 38: amount = 0.0; // Minigun
		}

		switch(bodypart)
        {
			case BODY_PART_HEAD: amount = amount * 1.2;
			case BODY_PART_LEFT_LEG, BODY_PART_RIGHT_LEG: amount = amount * 0.8;
		}

		switch(distance)
		{
			case 46..70:
			{
				if(weapon != WEAPON_SNIPER && weapon != WEAPON_RIFLE) amount = amount * 0.74;
				else if(weapon == WEAPON_M4 || weapon == WEAPON_AK47 || weapon == WEAPON_SHOTGUN) amount = amount * 0.79;
			}
			case 71..200:
			{
				if(weapon != WEAPON_SNIPER && weapon != WEAPON_RIFLE) amount = amount * 0.70;
				else if(weapon == WEAPON_M4 || weapon == WEAPON_AK47 || weapon == WEAPON_SHOTGUN) amount = amount * 0.74;
			}
		}

        if (bodypart == BODY_PART_TORSO && armour > 0.0 && (22 <= weapon <= 38))
		{
		    if (armour - amount <= 0.0)	SetPlayerArmour(playerid, 0.0);
	 		else						SetPlayerArmour(playerid, armour - (amount / 2));

            //SetPlayerHealth(playerid, health);
			RecordDamage(issuerid, playerid, weapon, bodypart, amount, 1);
		}
		else
		{
		    if (PlayerInfo[playerid][pHealth] - amount < 5.0)
			{
				PlayerInfo[playerid][pHealth] = 30;
				SilahlariKaydet(playerid);
				InjuredPlayer(playerid, issuerid, weapon);
				RecordDamage(issuerid, playerid, weapon, bodypart, amount, 0);
				return 1;
			}
			else {
				new Float:hyperx;
				hyperx = PlayerInfo[playerid][pHealth];
				PlayerInfo[playerid][pHealth] = hyperx - amount;
			}
			if (armour) SetPlayerArmour(playerid, armour);

			if (pTemp[playerid][pInjureText] == 1  && health - amount <= 30.0 && health - amount >= 16.0)
			{
				SM3(playerid, "Canýnýz çok azaldý, silah yeteneðinin normal seviyeye düþtü.");
				SetPlayerSkill(playerid, 2);
				pTemp[playerid][pInjureText] = 2;
			}
			else if (pTemp[playerid][pInjureText] == 2 && health - amount < 16.0)
			{
				SM3(playerid, "Canýnýz çok azaldý, silah yeteneklerin en minimal hale getirildi.");
				SetPlayerSkill(playerid, 3);
				pTemp[playerid][pInjureText] = 3;
			}

			RecordDamage(issuerid, playerid, weapon, bodypart, amount, 0);
		}
	}
    return 1;
}

Weapon_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if (IsPlayerAFK(playerid))	return 0;

    if (PlayerInfo[playerid][pProbation] == 1)
    {
        SendAdmMessage("ADM: %s Probationdayken silah ateþlemeye çalýþtý. (Silah: %s)", GetNameEx(playerid), ReturnWeaponName(GetPlayerWeapon(playerid)));
        ClearAnimations(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		TogglePlayerControllable(playerid, false);
		SetTimerEx("CarJackFREEZE", 1500, false, "i", playerid);
		SendErrorMessage(playerid,"Probationdayken zarar verici eþyalar kullanamazsýn!");
        return 0;
    }

	if(!Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[weaponid]]) // Not given by the server or removed? Don't sync the bullets.
	{
		if(Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] <= 0)
			PlayerTextDrawSetString(playerid, Silah_Bilgi[playerid][MermiTD], " ");

		return 0;
	}
	else // Otherwise...
	{
		if(Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] > 1) // The idea here is to remove the weapon if there is no server ammo, so bullets won't be synced.
		{
			Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]]--;
			if(Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] <= 0) PlayerTextDrawSetString(playerid, Silah_Bilgi[playerid][MermiTD], " ");

			if(PlayerInfo[playerid][pOnDuty] == 0)
			{
				new omur_kontrol[200];
				mysql_format(dbHandle, omur_kontrol, sizeof(omur_kontrol), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0' AND omur < 6", PlayerInfo[playerid][pID]);
				new Cache:veri = mysql_query(dbHandle, omur_kontrol, true);
				new rows;
				cache_get_row_count(rows);
				if(rows)
				{
					SetPlayerAmmo(playerid, weaponid, 0);
					Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[weaponid]] = false;
					PlayerTextDrawSetString(playerid, Silah_Bilgi[playerid][MermiTD], " ");
					if(!PlayerInfo[playerid][pOnDuty] && SilahSlotBul(weaponid) > 1 && PlayerInfo[playerid][pSilahSistemi])
					{
						new sorgu[250];
						mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE weapons SET status = '10', omur = '0' WHERE weaponid = '%d' AND owner = '%d' AND status = '0'", weaponid, PlayerInfo[playerid][pID]);
						mysql_tquery(dbHandle, sorgu);
						SendClientMessageEx(playerid, COLOUR_TOMATO, "%s model silahýnýzýn ömrü tükendi ve kullanýlmaz hale geldi.", GetWeaponNameEx(weaponid));
					}
				}
				cache_delete(veri);
			}


			if(!PlayerInfo[playerid][pOnDuty] && SilahSlotBul(weaponid) > 1 && PlayerInfo[playerid][pSilahSistemi])
			{
				new sorgu[100];
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE weapons SET ammo = ammo - 1 WHERE weaponid = '%d' AND owner = '%d' AND status = '0'", weaponid, PlayerInfo[playerid][pID]);
				mysql_tquery(dbHandle, sorgu);
				if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 || weaponid == 33 || weaponid == 34)
				{
					new sorgu_omur[150];
					mysql_format(dbHandle, sorgu_omur, sizeof(sorgu_omur), "UPDATE weapons SET omur = omur - %d WHERE weaponid = '%d' AND owner = '%d' AND status = '0' AND lisans = '0'", randomEx(7, 18), weaponid, PlayerInfo[playerid][pID]);
					mysql_tquery(dbHandle, sorgu_omur);
				}
				else if(weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32)
				{
					new sorgu_omur[150];
					mysql_format(dbHandle, sorgu_omur, sizeof(sorgu_omur), "UPDATE weapons SET omur = omur - %d WHERE weaponid = '%d' AND owner = '%d' AND status = '0' AND lisans = '0'", randomEx(3, 9), weaponid, PlayerInfo[playerid][pID]);
					mysql_tquery(dbHandle, sorgu_omur);
				}
			}
		}
		else
		{
			PlayerTextDrawSetString(playerid, Silah_Bilgi[playerid][MermiTD], " ");
			Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[weaponid]] = false;
			SetPlayerAmmo(playerid, weaponid, 0); // To ensure it is removed.
			if(!PlayerInfo[playerid][pOnDuty] && SilahSlotBul(weaponid) != 0 && PlayerInfo[playerid][pSilahSistemi])
			{
				new sorgu[100];
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE weapons SET ammo = '0' WHERE weaponid = '%d' and owner = '%d' and status = '0'", weaponid, PlayerInfo[playerid][pID]);
				mysql_tquery(dbHandle, sorgu);
			}
		}

		if(weaponid == 25 && Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] <= 1 || weaponid == 26 && Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] <= 1)
		{
			Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] = 0;
			PlayerTextDrawSetString(playerid, Silah_Bilgi[playerid][MermiTD], " ");
			Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[weaponid]] = false;
			SetPlayerAmmo(playerid, weaponid, 0); // To ensure it is removed.
			if(!PlayerInfo[playerid][pOnDuty] && SilahSlotBul(weaponid) != 0 && PlayerInfo[playerid][pSilahSistemi])
			{
				new sorgu[100];
				mysql_format(dbHandle, sorgu, sizeof(sorgu), "UPDATE weapons SET ammo = '0' WHERE weaponid = '%d' and owner = '%d' and status = '0'", weaponid, PlayerInfo[playerid][pID]);
				mysql_tquery(dbHandle, sorgu);
			}
		}
	}

    if (hittype == BULLET_HIT_TYPE_PLAYER)
    {
        if ((floatcmp(floatabs(fX), 20.0) == 1) || (floatcmp(floatabs(fY), 20.0) == 1) || (floatcmp(floatabs(fZ), 20.0) == 1)) return KickEx(playerid), 0;
    }

	if (weaponid < 22 || weaponid > 38) return 0;

	if(!IsPlayerInAnyVehicle(playerid) && hittype == BULLET_HIT_TYPE_PLAYER && !IsPlayerInAnyVehicle(hitid) && GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingVehicleID(hitid) == INVALID_VEHICLE_ID && NetStats_PacketLossPercent(hitid) < 0.7 && NetStats_PacketLossPercent(playerid) < 0.7)
	{
		new Float:g_fOriginX, Float:g_fOriginY, Float:g_fOriginZ;
		new Float:g_fHitPosX, Float:g_fHitPosY, Float:g_fHitPosZ;

		GetPlayerLastShotVectors(playerid, g_fOriginX, g_fOriginY, g_fOriginZ, g_fHitPosX, g_fHitPosY, g_fHitPosZ);

		if(IsPlayerInRangeOfPoint(hitid, 3.0, g_fHitPosX, g_fHitPosY, g_fHitPosZ) == 0)
			SendAdmMessage("%s adlý kiþi silent-aim olabilir.", GetNameEx(playerid));
	}

	if (weaponid == 23 && pTemp[playerid][pTaser])
	{
	    PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
	    ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0, 1);
	}

	if (PlayerInfo[playerid][pInjured] != 0)
	{
	    if (!PlayerToPoint(2.0, playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ])) SetPlayerPosEx(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);

		//ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0, 1);
	    return 0;
	}

	if (hittype == BULLET_HIT_TYPE_VEHICLE && hitid != INVALID_VEHICLE_ID)
	{
	    new Float: health;

	    AntiCheatGetVehicleHealth(hitid, health);

	    return (health < 350.0)?(0):(1);
	}

	if(GetPlayerVehicleSeat(playerid) == 0)
	{
		SendAdmMessage("%s [%d] adlý oyuncu þoför koltuðunda drive bya kalktý. (/spec %d)", GetNameEx(playerid), playerid, playerid);
    	KickEx(playerid);
		return 0;
	}


    return 1;
}

Weapon_OnPlayerStateChange(playerid, newstate)
{
    if (newstate == PLAYER_STATE_DRIVER)
    {
        if (GetPlayerWeapon(playerid) == 24) SetPlayerArmedWeapon(playerid, 0);
    }
    return 1;
}

Weapon_OnPlayerExitVehicle(playerid, vehicleid)
{
    if (IsAPlane(vehicleid) || IsAHelicopter(vehicleid)) ResetPlayerWeapons(playerid);

    return 1;
}

Dialog:SilahSistemeSat(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2260.4148, 63.1703, 26.4844) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1248.9823, 365.7434, 19.5547)) return SendErrorMessage(playerid, "Silah satma noktasýnda deðilsiniz.");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Bu komutu sadece ayakta kullanabilirsiniz.");
		if(PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz.");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);
		if(!rows)
			return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), PlayerInfo[playerid][pSilahSistemi] = 0, cache_delete(veri);

		new xid, weaponid, ammo, fiyat, count = -1;

		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "id", xid);
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);

				switch(weaponid)
				{
					case 22: fiyat = 6000;
					case 23: fiyat = 8000;
					case 24: fiyat = 12000;
					case 25: fiyat = 10000;
					case 28: fiyat = 13000;
					case 30: fiyat = 17000;
					case 32: fiyat = 13000;
					default: fiyat = 0;
				}
				count++;
				if(listitem == count)break;
			}

			if(ammo != 0) return SendErrorMessage(playerid, "Þarjörü dolu olan bir silahý ya da yakýn dövüþ silahýný sisteme satamazsýn."), cache_delete(veri);
			if(fiyat < 0) return SendErrorMessage(playerid, "Negatif deðer oluþturuldu, gerekli ekran görüntüleriyle Bug Bildirimi oluþturun."), cache_delete(veri);

			mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e%d', NOW())", xid, PlayerInfo[playerid][pID], -1, "silah sisteme satýldý ", fiyat);
			mysql_tquery(dbHandle, queryx);

			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '6' WHERE id = '%d'", xid);
			mysql_query(dbHandle, queryx);

			GiveCash(playerid, fiyat);
			SendClientMessageEx(playerid, COLOUR_TOMATO, "Silah Satýcýsý: {AFAFAF}Ticaretten memnun kaldým, tekrar bir þeyler satacak olursan buralardayým.");
			SendServerMessage(playerid, "Silah tüccarýna %s model silahýný verdin ve karþýlýðýnda sana $%d verdi.", GetWeaponNameEx(weaponid), fiyat);
			Log_Kaydet("loglar/silah.txt", "[%s] %s (C_ID: %d), %s model (%d SQL ID) silahini sisteme satti ve $%d kazandi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(weaponid), xid, fiyat);
			cache_delete(veri);
		}
	}
	return 1;
}

Dialog:MermisizSilahlar(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	if(isnull(inputtext)) return SendErrorMessage(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

	if(!strcmp("EVET", inputtext, true))
	{
		if(PlayerInfo[playerid][pOnDuty])
			return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz.");

		if(GetTickCount() - PlayerInfo[playerid][SilahTick] > 10000)
		{
			mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND ammo = '0' AND status = '0'", PlayerInfo[playerid][pID]);
			new Cache:veri = mysql_query(dbHandle, queryx, true);
			new rows;
			cache_get_row_count(rows);

			if(!rows)
			{
				PlayerInfo[playerid][pSilahSistemi] = 0;
				SendErrorMessage(playerid, "Üzerinize kayýtlý mermisiz silah bulunamadý. (%s)", GetFullDate());
			}
			else
			{
				new id, weaponid, idstr[6], string[512];

				for(new j; j < rows; j++)
				{
					cache_get_value_int(j, "id", id);
					cache_get_value_int(j, "weaponid", weaponid);
					format(idstr, 6, "%d", id);

					if(id < 1000) format(idstr, 6, "0%d", id);
					else if(id < 100) format(idstr, 6, "00%d", id);
					else if(id < 10) format(idstr, 6, "000%d", id);

					format(string, sizeof(string), "%s%d) %s(%s)", string, j+1, GetWeaponNameEx(weaponid), idstr);
				}
				Dialog_Show(playerid, MermisizSilahYerlestir, DIALOG_STYLE_LIST, "Alternatif Silah Yerleþtirme", string, "Býrak", "Ýptal");
			}
			cache_delete(veri);
			PlayerInfo[playerid][SilahTick] = GetTickCount();
		}
		else SendErrorMessage(playerid, "Bu komutu bu kadar sýk kullanmayýn.");
	}
	else SendErrorMessage(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
	return 1;
}

Dialog:MermisizSilahYerlestir(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND ammo = '0' AND status = '0'", PlayerInfo[playerid][pID]);
	new Cache:veri = mysql_query(dbHandle, queryx, true);
	new rows, islem = 0;
	cache_get_row_count(rows);

	new id, weaponid;
	if(!rows)
	{
		PlayerInfo[playerid][pSilahSistemi] = 0;
		SendErrorMessage(playerid, "Üzerinize kayýtlý mermisiz silah bulunamadý. (%s)", GetFullDate());
	}
	else
	{
		for(new j; j < rows; j++)
		{
			cache_get_value_int(j, "id", id);
			cache_get_value_int(j, "weaponid", weaponid);
			if(listitem == j) islem = 1; break;
		}
	}
	cache_delete(veri);
	if(islem == 1)
	{
		new vid = Arac_Yakin(playerid, 5.0);
		new h = GetNearInsideHouse(playerid);

		if(h != -1 && GetPlayerVirtualWorld(playerid) > 0)
		{
			if(Silah_SayiKontrol(1, h) >= MAX_WEAPON_HOUSE) return SendErrorMessage(playerid, "Bu eve daha fazla silah yerleþtiremezsiniz.");

			SendClientMessageEx(playerid, COLOR_GREY, "%s model silahýnýzý %d (SQL ID: %d) ID'li eve yerleþtirdiniz.", GetWeaponNameEx(weaponid), h, HouseInfo[h][hID]);
			Log_Kaydet("loglar/silah.txt", "[%s] %s (C_ID: %d), %d ID'li %s model silahini %d ID'li eve yerlestirdi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], id, GetWeaponNameEx(weaponid), HouseInfo[h][hID]);

			new string[150];
			format(string, 150, "elindeki %s model silahý evin kasasýna koydu.", GetWeaponNameEx(weaponid));
			PlayerAME(playerid, string);

			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '1', house = '%d' WHERE weaponid = '%d' AND owner = '%d' AND status = '0'", HouseInfo[h][hID], weaponid, PlayerInfo[playerid][pID]);
			mysql_query(dbHandle, queryx);

			mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e', NOW())", id, PlayerInfo[playerid][pID], HouseInfo[h][hID], "silah eve yerleþtirildi");
			mysql_tquery(dbHandle, queryx);
		}
		else if(vid != -1)
		{
			if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_BIKE) return SendErrorMessage(playerid, "Bisiklete silah yerleþtiremezsiniz.");

			if(Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && !VehicleInfo[vid][carTrunkLock] || Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && VehicleInfo[vid][carLocked]) return SendErrorMessage(playerid, "Bu iþlem için araç kilitsiz ve bagajý açýk olmalýdýr.");

			if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_MBIKE && !VehicleInfo[vid][carEngineOn] || Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_MBIKE && VehicleInfo[vid][carLocked]) return SendErrorMessage(playerid, "Bu iþlem için aracýn motoru açýk ve araç kilitsiz olmalý.");

			new Float:tX, Float:tY, Float:tZ;
			GetPosBehindVehicle(vid, tX, tY, tZ, 0.0);
			if(Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && !IsPlayerInRangeOfPoint(playerid, 2.5, tX, tY, tZ)) return SendErrorMessage(playerid, "Aracýn bagajýna yakýn deðilsin.");
			if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_MBIKE && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Silah yerleþtirmek için motorda sürücü olmalýsýn.");
			if(Silah_SayiKontrol(2, VehicleInfo[vid][carID]) >= AracSilahLimiti(VehicleInfo[vid][carModel])) return SendErrorMessage(playerid, "Bu araca daha fazla silah yerleþtiremezsiniz.");

			SendServerMessage(playerid, "%s model silahýný baþarýyla araca (ID: %d / SQLID: %d) yerleþtirdin. (%s)", GetWeaponNameEx(weaponid), vid, VehicleInfo[vid][carID], GetFullDate());
			Log_Kaydet("arac.txt", "%s: %s model silahýný baþarýyla araca (ID:%d/SQLID:%d) yerleþtirdi. (%s)", GetNameEx(playerid), GetWeaponNameEx(weaponid), VehicleInfo[vid][carID], VehicleInfo[vid][carID], GetFullDate());

			PlayerAME(playerid, "aracýnýn içerisine bir þey býrakýr.");

			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '2', vehicle = '%d' WHERE weaponid = '%d' AND owner = '%d' AND status = '0'", VehicleInfo[vid][carID], weaponid, PlayerInfo[playerid][pID]);
			mysql_query(dbHandle, queryx);

			mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e', NOW())", id, PlayerInfo[playerid][pID], VehicleInfo[vid][carID], "silah araca yerleþtirildi");
			mysql_tquery(dbHandle, queryx);
		}
		else SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz.");
	}
	return 1;
}

Dialog:SilahListeGoruntule(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	if(isnull(inputtext)) return SendErrorMessage(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");

	if(!strcmp("EVET", inputtext, true))
	{
		if(PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz.");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);

		if(!rows)
		{
			PlayerInfo[playerid][pSilahSistemi] = 0;
			SendErrorMessage(playerid, "%s adlý karaktere kayýtlý silah bulunamadý. (%s)", GetNameEx(playerid), GetFullDate());
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_SERVER2, "_____________________[%s (%s) | %s]_____________________", GetNameEx(playerid), PlayerInfo[playerid][pAccname], GetFullDate());

			new id, weaponid, ammo, status, house, vehicle, olusumid, biz, idstr[6], statusstr[24], omur;

			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "id", id);
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);
				cache_get_value_int(j, "status", status);
				cache_get_value_int(j, "house", house);
				cache_get_value_int(j, "vehicle", vehicle);
				cache_get_value_int(j, "faction_id", olusumid);
				cache_get_value_int(j, "biz", biz);
				cache_get_value_int(j, "omur", omur);
				format(idstr, 6, "%d", id);

				if(id < 10000)
					format(idstr, 6, "0%d", id);

				if(id < 1000)
					format(idstr, 6, "00%d", id);

				if(id < 100)
					format(idstr, 6, "000%d", id);

				if(id < 10)
					format(idstr, 6, "0000%d", id);

				switch(status)
				{
					case 0: format(statusstr, 24, "Üzerinizde");
					case 1: format(statusstr, 24, "Evde (%d)", house);
					case 2: format(statusstr, 24, "Araçta (%d)", vehicle);
					case 3: format(statusstr, 24, "Ýþletmede (%d)", biz);
					case 4: format(statusstr, 24, "Polis Zimmeti");
					case 5: format(statusstr, 24, "Yönetici Müdahalesi");
					case 6: format(statusstr, 24, "Geri Ödeme Yapýldý");
					case 7: format(statusstr, 24, "Oluþum kasasý (%d)", olusumid);
					case 8: format(statusstr, 24, "Vergili Evde Silindi (%d)", house);
					case 9: format(statusstr, 24, "Vergili Araçta Silindi (%d)", vehicle);
					case 10: format(statusstr, 24, "Bozuldu");
				}
				/*if(status == 0) {
					if(PlayerInfo[playerid][pOnDuty]) return 1;
					AC_GivePlayerWeapon(playerid, weaponid, ammo);
				}*/
				SendClientMessageEx(playerid, COLOR_GREY, "Slot ID: [%d] - Seri Numarasý: [%s] - Silah Adý: [%s] - Mermi: [%d] - Silah Ömrü: [%d] - Durum: [%s]", j+1, idstr, GetWeaponNameEx(weaponid), ammo, omur, statusstr);
				//SendClientMessageEx(playerid, COLOR_GREY, "Silah: %s | Mermi: %d | Seri Numarasý: %d | Durum: %s | Ömür: %d", GetWeaponNameEx(weaponid), ammo, id, statusstr, omur);
			}
			SendClientMessageEx(playerid, COLOR_GREY, "Herhangi bir silahýnýzý çýkartmak için (/silah kullan) komutunu kullanabilirsiniz ve çýkartmak istediðiniz silahý seçebilirsiniz.");
		}

		cache_delete(veri);
		PlayerInfo[playerid][SilahTick] = GetTickCount();
	}
	else SendErrorMessage(playerid, "Hatalý onay kodu giriþi, iþlem baþarýsýz.");
	return 1;
}

Dialog:SilahAracEnvanterPD(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new vid = Arac_Yakin(playerid, 5.0);

		if(vid != -1)
		{
			if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_BIKE) return SendErrorMessage(playerid, "Bisikletlere silah yerleþtirilemediði için bu iþlemi yapamazsýnýz.");

			new Float:tX, Float:tY, Float:tZ;
			GetPosBehindVehicle(vid, tX, tY, tZ, 0.0);
			if(Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && !IsPlayerInRangeOfPoint(playerid, 2.2, tX, tY, tZ)) return SendErrorMessage(playerid, "Aracýn bagajýna yakýn deðilsin.");

			mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE vehicle = '%d'", VehicleInfo[vid][carID]);
			new Cache:veri = mysql_query(dbHandle, queryx, true);
			new rows;
			cache_get_row_count(rows);

			if(rows)
			{
				new xid, weaponid, xammo, xstatus, count, idstr[6];

				count = -1;
				for(new j; j < rows; j++)
				{
					cache_get_value_int(j, "id", xid);
					cache_get_value_int(j, "weaponid", weaponid);
					cache_get_value_int(j, "ammo", xammo);
					cache_get_value_int(j, "status", xstatus);
					format(idstr, 6, "%d", xid);
					if(xid < 1000) format(idstr, 6, "0%d", xid);
					if(xid < 100) format(idstr, 6, "00%d", xid);
					if(xid < 10) format(idstr, 6, "000%d", xid);

					if(xstatus != 2)continue;
					count++;
					if(listitem == count)break;
				}
				mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e', NOW())", xid, PlayerInfo[playerid][pID], VehicleInfo[vid][carID], "silaha araçtan el koyuldu");
				mysql_tquery(dbHandle, queryx);

				mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '4' WHERE id = '%d'", xid);
				mysql_query(dbHandle, queryx);

				mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET vehicle = '-1' WHERE id = '%d'", xid);
				mysql_query(dbHandle, queryx);
			}
			cache_delete(veri);
		}
	}
	return 1;
}

Dialog:SilahAracEnvanter(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new vid = Arac_Yakin(playerid, 5.0);

		if(vid != -1)
		{
			if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_BIKE) return SendErrorMessage(playerid, "Bisikletlere silah yerleþtirilemediði için bu iþlemi yapamazsýnýz.");
			if(Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && !VehicleInfo[vid][carTrunkLock] || Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && VehicleInfo[vid][carLocked]) return SendErrorMessage(playerid, "Bu iþlem için araç kilitsiz ve bagajý açýk olmalýdýr.");
			if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_MBIKE && !VehicleInfo[vid][carEngineOn] || Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_MBIKE && VehicleInfo[vid][carLocked]) return SendErrorMessage(playerid, "Bu iþlem için aracýn motoru açýk ve araç kilitsiz olmalý.");

			new Float:tX, Float:tY, Float:tZ;
			GetPosBehindVehicle(vid, tX, tY, tZ, 0.0);
			if(Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && !IsPlayerInRangeOfPoint(playerid, 2.2, tX, tY, tZ)) return SendErrorMessage(playerid, "Aracýn bagajýna yakýn deðilsin.");
			if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_MBIKE && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Silahý araçtan almak için motorda sürücü olmalýsýn.");

			mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE vehicle = '%d'", VehicleInfo[vid][carID]);
			new Cache:veri = mysql_query(dbHandle, queryx, true);
			new rows;
			cache_get_row_count(rows);

			if(rows)
			{
				new xid, weaponid, xammo, xstatus, lisans, count, owner;

				count = -1;
				for(new j; j < rows; j++)
				{
					cache_get_value_int(j, "id", xid);
					cache_get_value_int(j, "weaponid", weaponid);
					cache_get_value_int(j, "ammo", xammo);
					cache_get_value_int(j, "status", xstatus);
					cache_get_value_int(j, "lisans", lisans);
					cache_get_value_int(j, "owner", owner);

					if(xstatus != 2)continue;
					count++;
					if(listitem == count)break;
				}
				cache_delete(veri);

				if(lisans == 1 && owner != PlayerInfo[playerid][pID])
					return SendErrorMessage(playerid, "Lisanslý silahlar çalýnamaz.");

				mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
				new Cache:yveri = mysql_query(dbHandle, queryx, true);
				cache_get_row_count(rows);

				if(!rows)
				{
					SendServerMessage(playerid, "%s (mermi: %d) model silahýný araçtan (ID: %d / SQLID: %d) aldýnýz. (%s)", GetWeaponNameEx(weaponid), xammo, vid, VehicleInfo[vid][carID], GetFullDate());

					new string[150];
					format(string, 150, "%s model silahý %s model araçtan alýr.", GetWeaponNameEx(weaponid), GetVehicleModelName(VehicleInfo[vid][carModel]));

					PlayerME(playerid, string);
					SetPlayerChatBubble(playerid, string, 0xD0AEEBFF, 15.0, 10000);

					if(xammo > 0) AC_GivePlayerWeapon(playerid, weaponid, xammo);
					cache_delete(yveri);

					mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '0', vehicle = '-1', owner = '%d' WHERE id = '%d'", PlayerInfo[playerid][pID], xid);
					mysql_query(dbHandle, queryx);
				}
				else
				{
					new xweaponid;

					for(new j; j < rows; j++)
					{
						cache_get_value_int(j, "weaponid", xweaponid);
						if(weaponid == xweaponid)break;
					}

					if(weaponid == xweaponid) return SendErrorMessage(playerid, "Zaten sizde ayný silahtan var, bunu yapamazsýnýz."), cache_delete(yveri);
					if(SilahSlotBul(weaponid) == SilahSlotBul(xweaponid)) return SendErrorMessage(playerid, "Zaten sizde ayný tip silahtan var, bunu yapamazsýnýz."), cache_delete(yveri);
					SendServerMessage(playerid, "%s (mermi: %d) model silahýný araçtan (ID: %d / SQLID: %d) aldýnýz. (%s)", GetWeaponNameEx(weaponid), xammo, vid, VehicleInfo[vid][carID], GetFullDate());

					new string[150];
					format(string, 150, "%s model silahý %s model araçtan alýr.", GetWeaponNameEx(weaponid), GetVehicleModelName(VehicleInfo[vid][carModel]));

					PlayerME(playerid, string);
					SetPlayerChatBubble(playerid, string, 0xD0AEEBFF, 15.0, 10000);

					if(xammo > 0) AC_GivePlayerWeapon(playerid, weaponid, xammo);
					PlayerInfo[playerid][pSilahSistemi] = 1;
					cache_delete(yveri);

					mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '0', vehicle = '-1', owner = '%d' WHERE id = '%d'", PlayerInfo[playerid][pID], xid);
					mysql_query(dbHandle, queryx);
				}

				mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e', NOW())", xid, PlayerInfo[playerid][pID], VehicleInfo[vid][carID], "silah araçtan alýndý");
				mysql_tquery(dbHandle, queryx);
			}
		}
	}
	return 1;
}

Dialog:SilahEnvanter(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Bu komutu sadece ayakta kullanabilirsiniz.");
		if(PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz.");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);
		if(!rows) return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), PlayerInfo[playerid][pSilahSistemi] = 0, cache_delete(veri);

		new weaponid, ammo, status;
		new string[1024];

		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "status", status);
				cache_get_value_int(j, "ammo", ammo);

				format(string, 800, "%s%s / Mermi: %d\n", string, GetWeaponNameEx(weaponid), ammo);
			}
			cache_delete(veri);
			Dialog_Show(playerid, SilahEnvanterSecildi, DIALOG_STYLE_LIST, "LOSWORLD - Silah Envanteri", string, "Ýleri", "Iptal");
		}
	}
	return 1;
}

Dialog:SilahEnvanterSecildi(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);
		if(!rows)
			return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), cache_delete(veri), PlayerInfo[playerid][pSilahSistemi] = 0;

		new weaponid;
		new status;
		new ammo;
		new count = -1;
		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);
				cache_get_value_int(j, "status", status);
				count++;
				if(count == listitem)break;
			}
			cache_delete(veri);
			SetPVarInt(playerid, "SilahID", weaponid);
			SetPVarInt(playerid, "Mermi", ammo);
			SetPVarInt(playerid, "SilahStatus", status);
		}
		Dialog_Show(playerid, SilahCikartiliyorOnay, DIALOG_STYLE_MSGBOX, "LOSWORLD - Silah Envanter", "%s model silahýnýzý envanterden çýkartmak istediðinize emin misiniz?", "Evet", "Iptal", GetWeaponNameEx(weaponid));
	}
	return 1;
}

Dialog:SilahCikartiliyorOnay(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if(response)
	{
		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);

		if(!rows)
			return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), cache_delete(veri), PlayerInfo[playerid][pSilahSistemi] = 0;

		if(PlayerInfo[playerid][pOnDuty])
			return SendErrorMessage(playerid, "Ýþbaþýndayken bu sistemden yararlanamazsýnýz."), DeletePVar(playerid, "Mermi"), DeletePVar(playerid,"SilahStatus"), DeletePVar(playerid, "SilahID");

		new weaponid = GetPVarInt(playerid, "SilahID");
		new weaponstatus = GetPVarInt(playerid, "SilahStatus");
		new weaponammo = GetPVarInt(playerid, "Mermi");

		if(weaponammo < 1) return SendErrorMessage(playerid,"Bu silahýn mermisi yok, mermi satýn almalýsýnýz.");
		if(weaponstatus != 0) return SendErrorMessage(playerid, "Silah üzerinizde deðil.");

		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Bu komutu sadece ayakta kullanabilirsiniz."), DeletePVar(playerid, "Mermi"), DeletePVar(playerid,"SilahStatus"), DeletePVar(playerid, "SilahID");
		if(PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz."), DeletePVar(playerid, "Mermi"), DeletePVar(playerid,"SilahStatus"), DeletePVar(playerid, "SilahID");

		new xweaponid;

		for(new j; j < rows; j++)
		{
			cache_get_value_int(j, "weaponid", xweaponid);
			if(weaponid == xweaponid) break;
		}

		// if(weaponid == xweaponid) return SendErrorMessage(playerid, "Karþýdaki kullanýcýnýn üzerinde ayný silahtan var, bunu yapamazsýnýz."), DeletePVar(playerid, "Mermi"), DeletePVar(playerid,"SilahStatus"), DeletePVar(playerid, "SilahID");
		// if(SilahSlotBul(weaponid) == SilahSlotBul(xweaponid)) return SendErrorMessage(playerid, "Karþýdaki kullanýcýnýn üzerinde ayný tip silahtan var, bunu yapamazsýnýz."), DeletePVar(playerid, "Mermi"), DeletePVar(playerid,"SilahStatus"), DeletePVar(playerid, "SilahID");
		if (GetPlayerWeapon(playerid) == weaponid) return SendErrorMessage(playerid,"Üstünüzde zaten bu tür bir silah bulunuyor.");

		SendServerMessage(playerid, "%s (Mermi: %d) model silahýnýnýzý silah envanterinizden çýkarttýnýz. (%s)", GetWeaponNameEx(weaponid), weaponammo, GetFullDate());

		if(weaponid == -1 && weaponid == 0) return SendErrorMessage(playerid,"Silah çýkartýlýrken bir sorun oluþtu. Yeniden deneyiniz.");

//		new string[150];
//		if(weaponid == 22 & weaponid == 23 && weaponid == 24 && weaponid == 28 && weaponid == 32 && weaponid == 26) format(string, 150, "kýyafetini biraz kaldýrýr, belindeki %s model silahýný çýkartýr ve eline alýr.", GetWeaponNameEx(weaponid));
//		if(weaponid == 31 & weaponid == 30 && weaponid == 34 && weaponid == 33 && weaponid == 25 && weaponid == 27 && weaponid == 29) format(string, 150, "üstünde asýlý olan %s isimli silahýný çýkartýr ve eline alýr.", GetWeaponNameEx(weaponid));

//		PlayerME(playerid, string);
//		SetPlayerChatBubble(playerid, string, 0xD0AEEBFF, 15.0, 5500);

		AC_GivePlayerWeapon(playerid, weaponid, weaponammo);
		ClearAnimations(playerid);
	}
	return 1;
}

Dialog:SilahEvEnvanter(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new h = GetNearInsideHouse(playerid);
		if(h != -1 && GetPlayerVirtualWorld(playerid) > 0)
		{
			mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE house = '%d'", HouseInfo[h][hID]);
			new Cache:veri = mysql_query(dbHandle, queryx, true);
			new rows;
			cache_get_row_count(rows);

			if(rows)
			{
				new xid, weaponid, xammo, xstatus, lisansq, count, ownerid;

				count = -1;
				for(new j; j < rows; j++)
				{
					cache_get_value_int(j, "id", xid);
					cache_get_value_int(j, "weaponid", weaponid);
					cache_get_value_int(j, "ammo", xammo);
					cache_get_value_int(j, "status", xstatus);
					cache_get_value_int(j, "lisans", lisansq);
					cache_get_value_int(j, "owner", ownerid);

					if(xstatus != 1)continue;
					count++;
					if(listitem == count)break;
				}
				cache_delete(veri);

				if(lisansq == 1 && ownerid != PlayerInfo[playerid][pID]) return SendErrorMessage(playerid, "Lisanslý silahlar çalýnamaz.");

				mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
				new Cache:yveri = mysql_query(dbHandle, queryx, true);
				cache_get_row_count(rows);

				if(!rows)
				{
					mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET owner = '%d', status = '0', house = '-1' WHERE id = '%d'", PlayerInfo[playerid][pID], xid);
					mysql_query(dbHandle, queryx);

					new string[150];
					format(string, 150, "%s model silahý evin kasasýndan alýr.", GetWeaponNameEx(weaponid));
					PlayerME(playerid, string);
					SetPlayerChatBubble(playerid, string, 0xD0AEEBFF, 15.0, 10000);

					if(xammo > 0) AC_GivePlayerWeapon(playerid, weaponid, xammo);
					cache_delete(yveri);
					SendServerMessage(playerid, "%s (mermi: %d) model %d SQL ID'li silahý, %d SQL ID'li evden aldýn.", GetWeaponNameEx(weaponid), xammo, xid, HouseInfo[h][hID]);
				}
				else
				{
					new xweaponid;

					for(new j; j < rows; j++)
					{
						cache_get_value_int(j, "weaponid", xweaponid);
						if(weaponid == xweaponid)break;
					}

					if(weaponid == xweaponid) return SendErrorMessage(playerid, "Zaten sizde ayný silahtan var, bunu yapamazsýnýz."), cache_delete(yveri);
					if(SilahSlotBul(weaponid) == SilahSlotBul(xweaponid)) return SendErrorMessage(playerid, "Zaten sizde ayný tip silahtan var, bunu yapamazsýnýz."), cache_delete(yveri);

					mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET owner = '%d', status = '0', house = '-1' WHERE id = '%d'", PlayerInfo[playerid][pID], xid);
					mysql_query(dbHandle, queryx);

					new string[150];
					format(string, 150, "%s model silahý evin kasasýndan alýr.", GetWeaponNameEx(weaponid));

					PlayerME(playerid, string);
					SetPlayerChatBubble(playerid, string, 0xD0AEEBFF, 15.0, 10000);

					if(xammo > 0) AC_GivePlayerWeapon(playerid, weaponid, xammo);
					PlayerInfo[playerid][pSilahSistemi] = 1;
					SendServerMessage(playerid, "%s (mermi: %d) model %d SQL ID'li silahý, %d SQL ID'li evden aldýn.", GetWeaponNameEx(weaponid), xammo, xid, HouseInfo[h][hID]);
					cache_delete(yveri);
				}

				mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e', NOW())", xid, PlayerInfo[playerid][pID], HouseInfo[h][hID], "silah evden alýndý");
				mysql_tquery(dbHandle, queryx);
			}
			else SendErrorMessage(playerid, "Ev silah envanteri boþ, iþlem yapamadýnýz."), cache_delete(veri);
		}
		else SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz.");
	}
	return 1;
}

Dialog:SilahEvEnvanterPD(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new h = GetNearInsideHouse(playerid);
		if(h != -1 && GetPlayerVirtualWorld(playerid) > 0)
		{
			mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE house = '%d'", HouseInfo[h][hID]);
			new Cache:veri = mysql_query(dbHandle, queryx, true);
			new rows;
			cache_get_row_count(rows);

			if(rows)
			{
				new xid, weaponid, xammo, xstatus, count, idstr[6];
				count = -1;
				for(new j; j < rows; j++)
				{
					cache_get_value_int(j, "id", xid);
					cache_get_value_int(j, "weaponid", weaponid);
					cache_get_value_int(j, "ammo", xammo);
					cache_get_value_int(j, "status", xstatus);
					format(idstr, 6, "%d", xid);

					if(xid < 1000)
						format(idstr, 6, "0%d", xid);

					if(xid < 100)
						format(idstr, 6, "00%d", xid);

					if(xid < 10)
						format(idstr, 6, "000%d", xid);

					if(xstatus != 1)continue;
					count++;
					if(listitem == count) break;
				}

				mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '4', house = '-1' WHERE id = '%d'", xid);
				mysql_query(dbHandle, queryx);

				mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e', NOW())", xid, PlayerInfo[playerid][pID], HouseInfo[h][hID], "silah evden el konuldu");
				mysql_tquery(dbHandle, queryx);

				cache_delete(veri);
			}
			else SendErrorMessage(playerid, "Ev silah envanteri boþ, iþlem yapamadýnýz."), cache_delete(veri);
		}
		else SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz.");
	}
	return 1;
}

Dialog:SilahVer(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(isnull(inputtext))
			return SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz.");

		new id, weaponid = AC_GetPlayerWeapon(playerid);
		sscanf(inputtext, "u", id);

		if(!IsPlayerConnected(id) || !pTemp[id][pLogged]) return SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz.");
		if(PlayerInfo[id][pLevel] < 3) return SendErrorMessage(playerid, "Kullanýcý 3 seviye olmadýðý için silah veremezsiniz.");
		if(GetPlayerState(id) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Sadece ayakta olan kullanýcýlara silah verebilirsin.");
		if(!PlayerNearPlayer(3.0, playerid, id)) return SendErrorMessage(playerid, "Oyuncuya yakýn deðilsiniz, bu iþlemi yapamazsýnýz.");
		if(!weaponid) return SendErrorMessage(playerid, "Elinizde silah yokken bu iþlemi yapamazsýnýz.");
		if(!Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[weaponid]] || Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] < 1) return SendErrorMessage(playerid, "Bu silah ile bu iþlemi yapamazsýnýz!");
		if(Silah_Bilgi[id][sSilahID][SilahSlotuBul[weaponid]] && Silah_Bilgi[id][sMermi][SilahSlotuBul[weaponid]] >= 0) return SendErrorMessage(playerid, "Bu kullanýcý bu tip bir silaha sahip olduðu için veremezsin.");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[id][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);

		new xid;

		if(rows)
		{
			new xweaponid;

			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "id", xid); // 1 mayis
				cache_get_value_int(j, "weaponid", xweaponid);
				if(weaponid == xweaponid)break;
			}

			if(weaponid == xweaponid) return SendErrorMessage(playerid, "Karþýdaki kullanýcýda ayný silahtan var, bunu yapamazsýnýz."), cache_delete(veri);
			if(SilahSlotBul(weaponid) == SilahSlotBul(xweaponid)) return SendErrorMessage(playerid, "Karþýdaki kullanýcýda ayný tip silahtan var, bunu yapamazsýnýz."), cache_delete(veri);
		}
		cache_delete(veri);

		xid = PlayerInfo[playerid][SilahVerDialogID];
		new ammo = Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]];

		PlayerTextDrawSetString(playerid, Silah_Bilgi[playerid][MermiTD], " ");
		Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] = 0;
		Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[weaponid]] = false;
		SetPlayerAmmo(playerid, weaponid, 0);
		AC_RemovePlayerWeapon(playerid, weaponid);

		AC_GivePlayerWeapon(id, weaponid, ammo);

		PlayerInfo[id][pSilahSistemi] = 1;

		SendServerMessage(playerid, "%s kiþisine %s model silahýnýzý verdiniz.", GetNameEx(id), GetWeaponNameEx(weaponid));
		SendServerMessage(id, "%s kiþisinden %s model silah aldýnýz.", GetNameEx(playerid), GetWeaponNameEx(weaponid));

		mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET owner = '%d' WHERE weaponid = '%d' AND owner = '%d' AND status = '0'", PlayerInfo[id][pID], weaponid, PlayerInfo[playerid][pID]);
		mysql_query(dbHandle, queryx);

		mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e', NOW())", xid, PlayerInfo[id][pID], PlayerInfo[playerid][pID], "silah alýndý");
		mysql_tquery(dbHandle, queryx);

		mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e', NOW())", xid, PlayerInfo[playerid][pID], PlayerInfo[id][pID], "silah verildi");
		mysql_tquery(dbHandle, queryx);
	}
	return 1;
}


Dialog:MermiAl(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Bu komutu sadece ayakta kullanabilirsiniz.");
		if(PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz.");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);
		if(!rows) return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), PlayerInfo[playerid][pSilahSistemi] = 0, cache_delete(veri);

		new weaponid, ammo, fiyat, maxmermi;
		new string[1024];

		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);

				switch(weaponid)
				{
					case 22: fiyat = 3000, maxmermi = MAX_MERMI_COLT;
					case 23: fiyat = 3000, maxmermi = MAX_MERMI_SILENCED;
					case 24: fiyat = 3000, maxmermi = MAX_MERMI_DEAGLE;
					case 25: fiyat = 3000, maxmermi = MAX_MERMI_SHOTGUN;
					case 26: fiyat = 3000, maxmermi = MAX_MERMI_SAWNOFF;
					case 28: fiyat = 3000, maxmermi = MAX_MERMI_UZI;
					case 29: fiyat = 3000, maxmermi = MAX_MERMI_MP5;
					case 30: fiyat = 3000, maxmermi = MAX_MERMI_AK47;
					case 31: fiyat = 3000, maxmermi = MAX_MERMI_M4;
					case 32: fiyat = 3000, maxmermi = MAX_MERMI_TEC9;
					case 33: fiyat = 3000, maxmermi = MAX_MERMI_RIFLE;
					case 34: fiyat = 3000, maxmermi = MAX_MERMI_SNIPER;
					default: fiyat = 5, maxmermi = 0;
				}

				format(string, 800, "%s%s(%d/%d) (Mermi fiyatý: $%d)\n", string, GetWeaponNameEx(weaponid), ammo, maxmermi, fiyat);
			}
			cache_delete(veri);
			Dialog_Show(playerid, MermiSatinAl, DIALOG_STYLE_LIST, "LOSWORLD - Mermi Sistemi", string, "Ýleri", "Iptal");
		}
	}
	return 1;
}

Dialog:MermiSatinAl(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);
		if(!rows)
			return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), cache_delete(veri), PlayerInfo[playerid][pSilahSistemi] = 0;

		new weaponid;
		new ammo;
		new count = -1;
		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);
				count++;
				if(count == listitem)break;
			}
			cache_delete(veri);
			SetPVarInt(playerid, "SilahID", weaponid);
			SetPVarInt(playerid, "Mermi", ammo);
		}
		Dialog_Show(playerid, MermiSatinAl2, DIALOG_STYLE_INPUT, "LOSWORLD - Mermi Sistemi", "%s silahýna almak istediðiniz mermi tutarýný girin:", "Satýn al", "Iptal", GetWeaponNameEx(weaponid));
	}
	return 1;
}

Dialog:MermiSatinAl2(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!isNumeric(inputtext) || isnull(inputtext))
			return SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz."), DeletePVar(playerid, "Mermi"), DeletePVar(playerid, "SilahID");

		if(PlayerInfo[playerid][pOnDuty])
			return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz."), DeletePVar(playerid, "Mermi"), DeletePVar(playerid, "SilahID");

		new weaponid = GetPVarInt(playerid, "SilahID");
		DeletePVar(playerid, "SilahID");

		//if(!Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[weaponid]])return SendErrorMessage(playerid, "Bu silaha mermi satýn alamazsýn.");

		new ammo = strval(inputtext);
		new mermi = GetPVarInt(playerid, "SilahID");
		DeletePVar(playerid, "Mermi");

		if(ammo <= 0) return SendErrorMessage(playerid, "Hatalý mermi sayýsý giriþi tespit edildi.");

		if(weaponid == 24 && mermi + ammo > 180) return SendErrorMessage(playerid, "Desert Eagle silahý maksimum 180 mermi alabilir.");
		else if(weaponid == 30 && mermi + ammo > 250) return SendErrorMessage(playerid, "AK-47 silahý maksimum 250 mermi alabilir.");
		else if(weaponid == 31 && mermi + ammo > 250) return SendErrorMessage(playerid, "M4 silahý maksimum 250 mermi alabilir.");
		else if(weaponid == 25 && mermi + ammo > 75) return SendErrorMessage(playerid, "Shotgun silahý maksimum 75 mermi alabilir.");
		else if(weaponid == 22 && mermi + ammo > 110) return SendErrorMessage(playerid, "Pistol silahý maksimum 110 mermi alabilir.");
		else if(weaponid == 23 && mermi + ammo > 90) return SendErrorMessage(playerid, "Silenced Pistol silahý maksimum 90 mermi alabilir.");
		else if(weaponid == 32 && mermi + ammo > 150) return SendErrorMessage(playerid, "Tec-9 silahý maksimum 150 mermi alabilir.");
		else if(weaponid == 28 && mermi + ammo > 180) return SendErrorMessage(playerid, "Uzi silahý maksimum 180 mermi alabilir.");
		else if(weaponid == 29 && mermi + ammo > 200) return SendErrorMessage(playerid, "MP5 silahý maksimum 200 mermi alabilir.");
		else if(weaponid == 33 && mermi + ammo > 50) return SendErrorMessage(playerid, "County Rifle silahý maksimum 50 mermi alabilir.");
		else if(weaponid == 34 && mermi + ammo > 20) return SendErrorMessage(playerid, "Sniper silahý maksimum 20 mermi alabilir.");
		else if(weaponid == 26 && mermi + ammo > 40) return SendErrorMessage(playerid, "Sawnoff Shotgun silahý maksimum 40 mermi alabilir.");

		new maxmermi = 0, fiyat = 0;

		switch(weaponid)
		{
			case 22: fiyat = 300, maxmermi = MAX_MERMI_COLT;
			case 23: fiyat = 300, maxmermi = MAX_MERMI_SILENCED;
			case 24: fiyat = 300, maxmermi = MAX_MERMI_DEAGLE;
			case 25: fiyat = 300, maxmermi = MAX_MERMI_SHOTGUN;
			case 26: fiyat = 300, maxmermi = MAX_MERMI_SAWNOFF;
			case 28: fiyat = 300, maxmermi = MAX_MERMI_UZI;
			case 29: fiyat = 300, maxmermi = MAX_MERMI_MP5;
			case 30: fiyat = 300, maxmermi = MAX_MERMI_AK47;
			case 31: fiyat = 300, maxmermi = MAX_MERMI_M4;
			case 32: fiyat = 300, maxmermi = MAX_MERMI_TEC9;
			case 33: fiyat = 300, maxmermi = MAX_MERMI_RIFLE;
			case 34: fiyat = 300, maxmermi = MAX_MERMI_SNIPER;
			default: fiyat = 5, maxmermi = 0;
		}

		if(maxmermi == 0 || fiyat == 5) return SendErrorMessage(playerid, "Bu silaha mermi satýn alýnamaz.");
		if(Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] + ammo > maxmermi) return SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz, hatalý deðer girdiniz.");
		if(PlayerInfo[playerid][pCash] < ammo * fiyat) return SendErrorMessage(playerid, "Üzerinizde yeterli miktarda para yok. ($%d)", ammo * fiyat);

		Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] += ammo;
		if(Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] > maxmermi)
			Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] = maxmermi;

		new odesunu = ammo * fiyat;
		if(odesunu < 0) odesunu = 850;
		SendClientMessageEx(playerid, COLOR_SERVER2, "%s isimli silaha %d adet mermi satýn aldýnýz. Ödediðiniz ücret $%i", GetWeaponNameEx(weaponid), ammo, odesunu);

		GiveCash(playerid, -odesunu);
		Log_Kaydet("loglar/silah.txt", "[%s] %s (ID: %d), %s model silahina $%d karsiliginda %d adet mermi aldi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetWeaponNameEx(weaponid), ammo * fiyat, ammo);

		mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET ammo = '%d' WHERE weaponid = '%d' AND owner = '%d' AND status = '0'", Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]], weaponid, PlayerInfo[playerid][pID]);
		mysql_query(dbHandle, queryx);

		AC_ResetPlayerWeapons(playerid);
		SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);
	}
	return 1;
}
/*
Dialog:MermiAl_Fabrika(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Bu komutu sadece ayakta kullanabilirsiniz.");
		if(PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz.");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);
		if(!rows) return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), PlayerInfo[playerid][pSilahSistemi] = 0, cache_delete(veri);

		new weaponid, ammo, fiyat, maxmermi;
		new string[1024];

		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);

				switch(weaponid)
				{
					case 22: fiyat = 60, maxmermi = MAX_MERMI_COLT;
					case 23: fiyat = 60, maxmermi = MAX_MERMI_SILENCED;
					case 24: fiyat = 95, maxmermi = MAX_MERMI_DEAGLE;
					case 25: fiyat = 105, maxmermi = MAX_MERMI_SHOTGUN;
					case 26: fiyat = 105, maxmermi = MAX_MERMI_SAWNOFF;
					case 28: fiyat = 60, maxmermi = MAX_MERMI_UZI;
					case 29: fiyat = 60, maxmermi = MAX_MERMI_MP5;
					case 30: fiyat = 120, maxmermi = MAX_MERMI_AK47;
					case 31: fiyat = 120, maxmermi = MAX_MERMI_M4;
					case 32: fiyat = 60, maxmermi = MAX_MERMI_TEC9;
					case 33: fiyat = 90, maxmermi = MAX_MERMI_RIFLE;
					case 34: fiyat = 90, maxmermi = MAX_MERMI_SNIPER;
					default: fiyat = 0, maxmermi = 0;
				}

				format(string, 800, "%s%s(%d/%d) (Mermi fiyatý: $%d)\n", string, GetWeaponNameEx(weaponid), ammo, maxmermi, fiyat);
			}
			cache_delete(veri);
			Dialog_Show(playerid, MermiSatinAl_Fabrika, DIALOG_STYLE_LIST, "LOSWORLD - Mermi Sistemi", string, "Ýleri", "Iptal");
		}
	}
	return 1;
}

Dialog:MermiSatinAl_Fabrika(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);
		if(!rows)
			return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), cache_delete(veri), PlayerInfo[playerid][pSilahSistemi] = 0;

		new weaponid;
		new ammo;
		new count = -1;
		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);
				count++;
				if(count == listitem)break;
			}
			cache_delete(veri);
			SetPVarInt(playerid, "SilahID", weaponid);
			SetPVarInt(playerid, "Mermi", ammo);
		}
		Dialog_Show(playerid, MermiSatinAl2_Fabrika, DIALOG_STYLE_INPUT, "LOSWORLD - Mermi Sistemi", "%s silahýna almak istediðiniz mermi tutarýný girin:", "Satýn al", "Iptal", GetWeaponNameEx(weaponid));
	}
	return 1;
}

Dialog:MermiSatinAl2_Fabrika(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext) || isnull(inputtext))
			return SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz."), DeletePVar(playerid, "Mermi"), DeletePVar(playerid, "SilahID");

		if(PlayerInfo[playerid][pOnDuty])
			return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz."), DeletePVar(playerid, "Mermi"), DeletePVar(playerid, "SilahID");

		new weaponid = GetPVarInt(playerid, "SilahID");
		DeletePVar(playerid, "SilahID");

		//if(!Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[weaponid]])return SendErrorMessage(playerid, "Bu silaha mermi satýn alamazsýn.");

		new ammo = strval(inputtext);
		new mermi = GetPVarInt(playerid, "SilahID");
		DeletePVar(playerid, "Mermi");

		if(ammo <= 0) return SendErrorMessage(playerid, "Hatalý mermi sayýsý giriþi tespit edildi.");

		if(weaponid == 24 && mermi + ammo > 50) return SendErrorMessage(playerid, "Desert Eagle silahý maksimum 50 mermi alabilir.");
		else if(weaponid == 30 && mermi + ammo > 90) return SendErrorMessage(playerid, "AK-47 silahý maksimum 90 mermi alabilir.");
		else if(weaponid == 31 && mermi + ammo > 90) return SendErrorMessage(playerid, "M4 silahý maksimum 90 mermi alabilir.");
		else if(weaponid == 25 && mermi + ammo > 35) return SendErrorMessage(playerid, "Shotgun silahý maksimum 35 mermi alabilir.");
		else if(weaponid == 22 && mermi + ammo > 68) return SendErrorMessage(playerid, "Pistol silahý maksimum 68 mermi alabilir.");
		else if(weaponid == 23 && mermi + ammo > 68) return SendErrorMessage(playerid, "Silenced Pistol silahý maksimum 68 mermi alabilir.");
		else if(weaponid == 32 && mermi + ammo > 150) return SendErrorMessage(playerid, "Tec-9 silahý maksimum 150 mermi alabilir.");
		else if(weaponid == 28 && mermi + ammo > 150) return SendErrorMessage(playerid, "Uzi silahý maksimum 150 mermi alabilir.");
		else if(weaponid == 29 && mermi + ammo > 90) return SendErrorMessage(playerid, "MP5 silahý maksimum 90 mermi alabilir.");
		else if(weaponid == 33 && mermi + ammo > 30) return SendErrorMessage(playerid, "County Rifle silahý maksimum 30 mermi alabilir.");
		else if(weaponid == 34 && mermi + ammo > 30) return SendErrorMessage(playerid, "Sniper silahý maksimum 30 mermi alabilir.");
		else if(weaponid == 26 && mermi + ammo > 40) return SendErrorMessage(playerid, "Sawnoff Shotgun silahý maksimum 40 mermi alabilir.");

		new maxmermi = 0, fiyat = 0;


		switch(weaponid)
		{
			case 22: fiyat = 60, maxmermi = MAX_MERMI_COLT;
			case 23: fiyat = 60, maxmermi = MAX_MERMI_SILENCED;
			case 24: fiyat = 95, maxmermi = MAX_MERMI_DEAGLE;
			case 25: fiyat = 105, maxmermi = MAX_MERMI_SHOTGUN;
			case 26: fiyat = 105, maxmermi = MAX_MERMI_SAWNOFF;
			case 28: fiyat = 60, maxmermi = MAX_MERMI_UZI;
			case 29: fiyat = 60, maxmermi = MAX_MERMI_MP5;
			case 30: fiyat = 120, maxmermi = MAX_MERMI_AK47;
			case 31: fiyat = 120, maxmermi = MAX_MERMI_M4;
			case 32: fiyat = 60, maxmermi = MAX_MERMI_TEC9;
			case 33: fiyat = 90, maxmermi = MAX_MERMI_RIFLE;
			case 34: fiyat = 90, maxmermi = MAX_MERMI_SNIPER;
			default: fiyat = 0, maxmermi = 0;
		}

		if(maxmermi == 0 || fiyat == 0) return SendErrorMessage(playerid, "Bu silaha mermi satýn alýnamaz.");
		if(Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] + ammo > maxmermi) return SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz, hatalý deðer girdiniz.");
		if(PlayerInfo[playerid][pCash] < ammo * fiyat) return SendErrorMessage(playerid, "Üzerinizde yeterli miktarda para yok. ($%d)", ammo * fiyat);

		Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] += ammo;
		if(Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] > maxmermi)
			Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] = maxmermi;

		new odesunu = ammo * fiyat;
		if(odesunu < 0) odesunu = 1000;
		SendClientMessageEx(playerid, COLOR_GREY, "$%d karþýlýðýnda %s model silahýna %d adet mermi satýn aldýn.", odesunu, GetWeaponNameEx(weaponid), ammo);
		GiveCash(playerid, -odesunu);
		Log_Kaydet("loglar/silah.txt", "[%s] %s (C_ID: %d), %s model silahina $%d karsiliginda %d adet mermi aldi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetWeaponNameEx(weaponid), ammo * fiyat, ammo);

		mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET ammo = '%d' WHERE weaponid = '%d' AND owner = '%d' AND status = '0'", Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]], weaponid, PlayerInfo[playerid][pID]);
		mysql_query(dbHandle, queryx);

		AC_ResetPlayerWeapons(playerid);
		SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);
	}
	return 1;
}

Dialog:MermiAl_KaraPara(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Bu komutu sadece ayakta kullanabilirsiniz.");
		if(PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz.");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true), rows;
		cache_get_row_count(rows);
		if(!rows) return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), PlayerInfo[playerid][pSilahSistemi] = 0, cache_delete(veri);

		new weaponid, ammo, fiyat, maxmermi;
		new string[1024];

		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);

				switch(weaponid)
				{
					case 22: fiyat = 144, maxmermi = MAX_MERMI_COLT;
					case 23: fiyat = 144, maxmermi = MAX_MERMI_SILENCED;
					case 24: fiyat = 228, maxmermi = MAX_MERMI_DEAGLE;
					case 25: fiyat = 252, maxmermi = MAX_MERMI_SHOTGUN;
					case 26: fiyat = 252, maxmermi = MAX_MERMI_SAWNOFF;
					case 28: fiyat = 144, maxmermi = MAX_MERMI_UZI;
					case 29: fiyat = 150, maxmermi = MAX_MERMI_MP5;
					case 30: fiyat = 288, maxmermi = MAX_MERMI_AK47;
					case 31: fiyat = 288, maxmermi = MAX_MERMI_M4;
					case 32: fiyat = 144, maxmermi = MAX_MERMI_TEC9;
					case 33: fiyat = 216, maxmermi = MAX_MERMI_RIFLE;
					case 34: fiyat = 216, maxmermi = MAX_MERMI_SNIPER;
					default: fiyat = 0, maxmermi = 0;
				}

				format(string, 800, "%s%s(%d/%d) (Mermi fiyatý: $%d)\n", string, GetWeaponNameEx(weaponid), ammo, maxmermi, fiyat);
			}
			cache_delete(veri);
			Dialog_Show(playerid, MermiSatinAl_KaraPara, DIALOG_STYLE_LIST, "LOSWORLD - Mermi Sistemi", string, "Ýleri", "Iptal");
		}
	}
	return 1;
}

Dialog:MermiSatinAl_KaraPara(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);
		if(!rows)
			return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), cache_delete(veri), PlayerInfo[playerid][pSilahSistemi] = 0;

		new weaponid;
		new ammo;
		new count = -1;
		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);
				count++;
				if(count == listitem)break;
			}
			cache_delete(veri);
			SetPVarInt(playerid, "SilahID", weaponid);
			SetPVarInt(playerid, "Mermi", ammo);
		}
		Dialog_Show(playerid, MermiSatinAl2_KaraPara, DIALOG_STYLE_INPUT, "LOSWORLD - Mermi Sistemi", "%s silahýna almak istediðiniz mermi tutarýný girin:", "Satýn al", "Iptal", GetWeaponNameEx(weaponid));
	}
	return 1;
}

Dialog:MermiSatinAl2_KaraPara(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!IsNumeric(inputtext) || isnull(inputtext))
			return SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz."), DeletePVar(playerid, "Mermi"), DeletePVar(playerid, "SilahID");

		if(PlayerInfo[playerid][pOnDuty])
			return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz."), DeletePVar(playerid, "Mermi"), DeletePVar(playerid, "SilahID");

		new weaponid = GetPVarInt(playerid, "SilahID");
		DeletePVar(playerid, "SilahID");

		//if(!Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[weaponid]])return SendErrorMessage(playerid, "Bu silaha mermi satýn alamazsýn.");

		new ammo = strval(inputtext);
		new mermi = GetPVarInt(playerid, "SilahID");
		DeletePVar(playerid, "Mermi");

		if(ammo <= 0) return SendErrorMessage(playerid, "Hatalý mermi sayýsý giriþi tespit edildi.");

		if(weaponid == 24 && mermi + ammo > 50) return SendErrorMessage(playerid, "Desert Eagle silahý maksimum 50 mermi alabilir.");
		else if(weaponid == 30 && mermi + ammo > 90) return SendErrorMessage(playerid, "AK-47 silahý maksimum 90 mermi alabilir.");
		else if(weaponid == 31 && mermi + ammo > 90) return SendErrorMessage(playerid, "M4 silahý maksimum 90 mermi alabilir.");
		else if(weaponid == 25 && mermi + ammo > 35) return SendErrorMessage(playerid, "Shotgun silahý maksimum 35 mermi alabilir.");
		else if(weaponid == 22 && mermi + ammo > 68) return SendErrorMessage(playerid, "Pistol silahý maksimum 68 mermi alabilir.");
		else if(weaponid == 23 && mermi + ammo > 68) return SendErrorMessage(playerid, "Silenced Pistol silahý maksimum 68 mermi alabilir.");
		else if(weaponid == 32 && mermi + ammo > 150) return SendErrorMessage(playerid, "Tec-9 silahý maksimum 150 mermi alabilir.");
		else if(weaponid == 28 && mermi + ammo > 150) return SendErrorMessage(playerid, "Uzi silahý maksimum 150 mermi alabilir.");
		else if(weaponid == 29 && mermi + ammo > 90) return SendErrorMessage(playerid, "MP5 silahý maksimum 90 mermi alabilir.");
		else if(weaponid == 33 && mermi + ammo > 30) return SendErrorMessage(playerid, "County Rifle silahý maksimum 30 mermi alabilir.");
		else if(weaponid == 34 && mermi + ammo > 30) return SendErrorMessage(playerid, "Sniper silahý maksimum 30 mermi alabilir.");
		else if(weaponid == 26 && mermi + ammo > 40) return SendErrorMessage(playerid, "Sawnoff Shotgun silahý maksimum 40 mermi alabilir.");

		new maxmermi = 0, fiyat = 0;

		switch(weaponid)
		{
			case 22: fiyat = 144, maxmermi = MAX_MERMI_COLT;
			case 23: fiyat = 144, maxmermi = MAX_MERMI_SILENCED;
			case 24: fiyat = 228, maxmermi = MAX_MERMI_DEAGLE;
			case 25: fiyat = 252, maxmermi = MAX_MERMI_SHOTGUN;
			case 26: fiyat = 252, maxmermi = MAX_MERMI_SAWNOFF;
			case 28: fiyat = 144, maxmermi = MAX_MERMI_UZI;
			case 29: fiyat = 150, maxmermi = MAX_MERMI_MP5;
			case 30: fiyat = 288, maxmermi = MAX_MERMI_AK47;
			case 31: fiyat = 288, maxmermi = MAX_MERMI_M4;
			case 32: fiyat = 144, maxmermi = MAX_MERMI_TEC9;
			case 33: fiyat = 216, maxmermi = MAX_MERMI_RIFLE;
			case 34: fiyat = 216, maxmermi = MAX_MERMI_SNIPER;
			default: fiyat = 0, maxmermi = 0;
		}

		if(maxmermi == 0 || fiyat == 0) return SendErrorMessage(playerid, "Bu silaha mermi satýn alýnamaz.");
		if(Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] + ammo > maxmermi) return SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz, hatalý deðer girdiniz.");
		if(PlayerInfo[playerid][pKaraPara] < ammo * fiyat) return SendErrorMessage(playerid, "Üzerinizde yeterli miktarda kara para yok. ($%d)", ammo * fiyat);

		Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] += ammo;
		if(Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] > maxmermi)
			Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]] = maxmermi;

		new odesunu = ammo * fiyat;
		if(odesunu < 0) odesunu = 1000;
		new aktor = Get_Nearest_Dynamic_Actor(playerid);
		SendClientMessageEx(playerid, COLOR_LIGHTGREEN2, "%s, sana %d adet %s mermisi verdi. Bunun karþýlýðýnda $%d ödeme yaptýn.", AktorBilgi[aktor][dynamicActorName], ammo, GetWeaponNameEx(weaponid), odesunu);

		Save_Dynamic_Actor(aktor);
		KaraGiveCash(playerid, -odesunu);
		Log_Kaydet("loglar/silah.txt", "[%s] %s (C_ID: %d), %s model silahina $%d kara para karsiliginda %d adet mermi aldi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetWeaponNameEx(weaponid), ammo * fiyat, ammo);

		mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET ammo = '%d' WHERE weaponid = '%d' AND owner = '%d' AND status = '0'", Silah_Bilgi[playerid][sMermi][SilahSlotuBul[weaponid]], weaponid, PlayerInfo[playerid][pID]);
		mysql_query(dbHandle, queryx);

		AC_ResetPlayerWeapons(playerid);
		SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);
	}
	return 1;
}*/

Dialog:DialogSilahPozisyon(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Araçtayken bu komutu kullanamazsýn.");

		new weaponid = GetPlayerWeapon(playerid);
		if(!weaponid) return SendErrorMessage(playerid, "Elinizde silah yok.");
		if(!IsWeaponWearable(weaponid)) return SendErrorMessage(playerid, "Elinizdeki silah düzenlenemez.");

		switch(listitem)
		{
			case 0:
			{
				if(EditingWeapon[playerid]) return SendErrorMessage(playerid, "Düzenlediðiniz bir silahý gizleyemezsiniz, lütfen önce düzenlemeyi bitirin.");
				if(!IsWeaponHideable(weaponid)) return SendErrorMessage(playerid, "Bu silah gizlenemez.");

				new index = weaponid - 22, weaponname[18], string[150];

				GetWeaponName(weaponid, weaponname, sizeof(weaponname));

				if(WeaponSettings[playerid][index][Hidden])
				{
					SendServerMessage(playerid, "%s artýk üstünüzde görünecek.", weaponname);
					WeaponSettings[playerid][index][Hidden] = false;
				}
				else
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, GetWeaponObjectSlot(weaponid))) RemovePlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid));

					SendServerMessage(playerid, "%s artýk üstünüzde görünmeyecek.", weaponname);
					WeaponSettings[playerid][index][Hidden] = true;
				}
				if(WeaponSettings[playerid][index][duzenlendi])
				{
					mysql_format(dbHandle, string, sizeof(string), "UPDATE weaponsettings SET Hidden = '%d' WHERE sOwner = '%d' AND WeaponID = '%d'", WeaponSettings[playerid][index][Hidden], PlayerInfo[playerid][pID], weaponid);
					mysql_tquery(dbHandle, string);
				}
			}
			case 1:
			{
				if(EditingWeapon[playerid]) return SendErrorMessage(playerid, "Zaten bir silah düzenliyorsunuz.");

				Dialog_Show(playerid, DialogKemikDuzenle, DIALOG_STYLE_LIST, "Kemik", "Gövde\nKafa\nSol üst kol\nSað üst kol\nSol el\nSað el\nSol kalça\nSað kalça\nSol ayak\nSað ayak\nSað baldýr\nSol baldýr\nSol ön kol\nSað ön kol\nSol omuz\nSað omuz\nBoyun\nÇene", "Seç", "Ýptal");
				EditingWeapon[playerid] = weaponid;
			}
			case 2:
			{
				if(EditingWeapon[playerid]) return SendErrorMessage(playerid, "Zaten bir silah düzenliyorsunuz.");
				if(WeaponSettings[playerid][weaponid - 22][Hidden]) return SendErrorMessage(playerid, "Gizli bir silahý düzenleyemezsiniz.");

				new index = weaponid - 22;

				SetPlayerArmedWeapon(playerid, 0); // Bu kod sorunlu olabilir.
				new slot = GetWeaponObjectSlot(weaponid);
				if(slot != -1)
				{
					SetPlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid), GetWeaponModelEx(weaponid), WeaponSettings[playerid][index][Bone], WeaponSettings[playerid][index][Position][0], WeaponSettings[playerid][index][Position][1], WeaponSettings[playerid][index][Position][2], WeaponSettings[playerid][index][Position][3], WeaponSettings[playerid][index][Position][4], WeaponSettings[playerid][index][Position][5], 1.0, 1.0, 1.0);
					EditAttachedObject(playerid, GetWeaponObjectSlot(weaponid));

					EditingWeapon[playerid] = weaponid;
				}
				else return SendErrorMessage(playerid, "Tüm aksesuar slotlarýný kullanýyorsunuz, lütfen bir aksesuar çýkartýp tekrar deneyin.");
			}
			case 3:
			{
				new string[200];
				mysql_format(dbHandle, string, sizeof(string), "DELETE FROM weaponsettings WHERE sOwner = '%d' AND WeaponID = '%d'", PlayerInfo[playerid][pID], weaponid);
				mysql_tquery(dbHandle, string);
				WeaponSettings[playerid][weaponid - 22][duzenlendi] = 0;
				SendServerMessage(playerid, "Silah pozisyon sistemini sýfýrladýnýz, re-log atmanýz tavsiye edilir.");
			}
		}
	}
	return 1;
}

Dialog:DialogKemikDuzenle(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new weaponid = EditingWeapon[playerid], weaponname[18], string[150];

		GetWeaponName(weaponid, weaponname, sizeof(weaponname));

		WeaponSettings[playerid][weaponid - 22][Bone] = listitem + 1;

		SendServerMessage(playerid, "%s adlý silahýnýzýn kemik seçeneðini deðiþtirdiniz.", weaponname);

		if(WeaponSettings[playerid][weaponid - 22][duzenlendi])
		{
			mysql_format(dbHandle, string, sizeof(string), "UPDATE weaponsettings SET Bone = '%d' WHERE sOwner = '%d' AND WeaponID = '%d'", listitem + 1, PlayerInfo[playerid][pID], weaponid);
			mysql_tquery(dbHandle, string);
		}
	}
	EditingWeapon[playerid] = 0;
	return 1;
}

stock Silah_SayiKontrol(tip, id)
{
	new sorgu[80];
	switch(tip) {
		case 1: mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT COUNT(*) as sayi FROM weapons WHERE status = %d AND house = %d", tip, id);
		case 2: mysql_format(dbHandle, sorgu, sizeof(sorgu), "SELECT COUNT(*) as sayi FROM weapons WHERE status = %d AND vehicle = %d", tip, id);
		default: return 0;
	}
	new Cache:silah_sayi = mysql_query(dbHandle, sorgu);
	new sayi = 0;
	if(cache_num_rows()) sayi = vericek_int(0, "sayi");
	cache_delete(silah_sayi);
	return sayi;
}

stock Silah_Ver(playerid, silahid, ammo, admin = -1, adminsql = -1, lisans = 0)
{
	mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
	new Cache:veri = mysql_query(dbHandle, queryx, true);
	new rows;
	cache_get_row_count(rows);
	if(!rows)
	{
		if(admin != -1)
		{
			SendClientMessageEx(admin, COLOR_GREY, "%s adlý oyuncuya %s (mermi: %d) verdin.", GetNameEx(playerid), SilahAdi(silahid), ammo);
			SendClientMessageEx(playerid, COLOR_GREY, "%s, sana %s (mermi: %d) verdi.", PlayerInfo[admin][pAccname], SilahAdi(silahid), ammo);
			mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapons (owner, weaponid, ammo, status, admin, lisans) VALUES ('%d', '%d', '%d', '%d', '%d', '%d')", PlayerInfo[playerid][pID], silahid, ammo, 0, adminsql, lisans);
			mysql_query(dbHandle, queryx);
			PlayerInfo[playerid][pSilahSistemi] = 1;
			AC_GivePlayerWeapon(playerid, silahid, ammo);
			Log_Kaydet("admin/silah.txt", "[%s] %s, %s (C_ID: %d | A_ID: %d) adli oyuncuya %s (mermi: %d) verdi.", GetFullDate(), PlayerInfo[admin][pAccname], GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], SilahAdi(silahid), ammo);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "%s model silahýný teslim aldýn.", SilahAdi(silahid));
			mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapons (owner, weaponid, ammo, status, admin, lisans) VALUES ('%d', '%d', '%d', '%d', '%d', '%d')", PlayerInfo[playerid][pID], silahid, ammo, 0, adminsql, lisans);
			mysql_query(dbHandle, queryx);
			PlayerInfo[playerid][pSilahSistemi] = 1;
			AC_GivePlayerWeapon(playerid, silahid, ammo);
		}
	}
	else
	{
		new xweaponid;

		for(new j; j < rows; j++)
		{
			cache_get_value_int(j, "weaponid", xweaponid);
			if(silahid == xweaponid)break;
		}
		if(admin != -1)
		{
			if(silahid == xweaponid) return SendErrorMessage(admin, "Karþýdaki kullanýcýnýn üzerinde ayný silahtan var, bunu yapamazsýnýz."), cache_delete(veri);
			if(SilahSlotBul(silahid) == SilahSlotBul(xweaponid)) return SendErrorMessage(admin, "Karþýdaki kullanýcýnýn üzerinde ayný tip silahtan var, bunu yapamazsýnýz."), cache_delete(veri);
			SendClientMessageEx(admin, COLOR_GREY, "%s adlý oyuncuya %s (mermi: %d) verdin.", GetNameEx(playerid), SilahAdi(silahid), ammo);
			SendClientMessageEx(playerid, COLOR_GREY, "%s, sana %s (mermi: %d) verdi.", PlayerInfo[admin][pAccname], SilahAdi(silahid), ammo);
			mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapons (owner, weaponid, ammo, status, admin, lisans) VALUES ('%d', '%d', '%d', '%d', '%d', '%d')", PlayerInfo[playerid][pID], silahid, ammo, 0, adminsql, lisans);
			mysql_query(dbHandle, queryx);

			PlayerInfo[playerid][pSilahSistemi] = 1;
			AC_GivePlayerWeapon(playerid, silahid, ammo);
			Log_Kaydet("admin/silah.txt", "[%s] %s, %s (C_ID: %d | A_ID: %d) adli oyuncuya %s (mermi: %d) verdi.", GetFullDate(), PlayerInfo[admin][pAccname], GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], SilahAdi(silahid), ammo);
		}
		else
		{
			if(silahid == xweaponid) return SendErrorMessage(playerid, "Ayný silahýn üzerine silah koyulamaz."), cache_delete(veri);
			if(SilahSlotBul(silahid) == SilahSlotBul(xweaponid)) return SendErrorMessage(playerid, "Ayný tip silahýn üzerine silah koyulamaz."), cache_delete(veri);
			SendClientMessageEx(playerid, COLOR_GREY, "%s model silahýný teslim aldýn.", SilahAdi(silahid));
			mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapons (owner, weaponid, ammo, status, admin, lisans) VALUES ('%d', '%d', '%d', '%d', '%d', '%d')", PlayerInfo[playerid][pID], silahid, ammo, 0, adminsql, lisans);
			mysql_query(dbHandle, queryx);

			PlayerInfo[playerid][pSilahSistemi] = 1;
			AC_GivePlayerWeapon(playerid, silahid, ammo);
		}
	}

	cache_delete(veri);
	return 1;
}

SilahAdi(silahid)
{
	new silahadi[40];
	GetWeaponName(silahid, silahadi, sizeof(silahadi));
	return silahadi;
}

OnPlayerSetData(playerid); public OnPlayerSetData(playerid)
{
	if(!pTemp[playerid][pLogged])return 1;

	if(SilahSistemleri == 1)
	{
		if(!PlayerInfo[playerid][pOnDuty])
		{
			AC_ResetPlayerWeapons(playerid);

			mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d'", PlayerInfo[playerid][pID]);
			mysql_tquery(dbHandle, queryx, "SilahlariYukle", "i", playerid);
		}
		else
		{
			for(new j; j < 12; j++)
			{
				PlayerInfo[playerid][pWeapons][j] = 0;
				PlayerInfo[playerid][pAmmo][j] = 0;
			}
		}
	}
	return 1;
}

AC_GivePlayerWeapon(playerid, gunid, ammo)
{
	if(gunid == 19 || gunid == 20 || gunid == 21)return 1;
	if(SilahYapabilirMi(playerid, gunid) == 0) return SendErrorMessage(playerid, "Ayný tip silahtan üzerinizde zaten var.");
	new slot = GetWeaponSlot(gunid);
	PlayerInfo[playerid][pScriptedGun][slot] = gunid;
	PlayerInfo[playerid][pScriptedAmmo][slot] += ammo;
	My_GivePlayerWeapon(playerid, gunid, ammo);
	return 1;
}

AC_GetPlayerWeapon(playerid)
{
	new gunid = GetPlayerWeapon(playerid);
	new slot = GetWeaponSlot(gunid);

	new strname[32];
	format(strname, sizeof(strname), "weapon%d", slot);

	if(PlayerInfo[playerid][pScriptedGun][slot] != gunid || GetPVarInt(playerid, strname) != gunid)return 0;

	return gunid;
}

stock AC_GetPlayerAmmo(playerid)
{
	new gunid = AC_GetPlayerWeapon(playerid);

	if(!gunid)return 0;

	new slot = GetWeaponSlot(gunid);
	new weapon, ammo;
	new strname[32];

	BWH_GetPlayerWeaponData(playerid, slot, weapon, ammo);

	format(strname, sizeof(strname), "ammo%d", slot);
	// if(PlayerInfo[playerid][pScriptedAmmo][slot] < ammo || GetPVarInt(playerid, strname) < ammo) CheatTimer(playerid);

	return ammo;
}

AC_PlayerHasWeapon(playerid, gunid)
{
	if(!gunid) return 1;

	new slot = GetWeaponSlot(gunid);
	new str[32];

	format(str, sizeof(str), "weapon%d", slot);

	if(PlayerInfo[playerid][pScriptedGun][slot] == gunid && GetPVarInt(playerid, str) == gunid)return 1;

	return 0;
}

AC_PlayerHasAmmo(playerid, gunid) {
	if(!gunid) return 0;
	new ammo;
	new slot = GetWeaponSlot(gunid);
	new str[32];

	format(str, sizeof(str), "weapon%d", slot);

	if(PlayerInfo[playerid][pScriptedGun][slot] == gunid && GetPVarInt(playerid, str) == gunid)
		ammo = PlayerInfo[playerid][pScriptedAmmo];
	return ammo;
}

AC_ResetPlayerWeapons(playerid)
{
	My_ResetPlayerWeapons(playerid);

	for(new i; i < 12; i++)
	{
		PlayerInfo[playerid][pScriptedGun][i] = 0;
		PlayerInfo[playerid][pScriptedAmmo][i] = 0;
	}

	return 1;
}

AC_RemovePlayerWeapon(playerid, gunid)
{
	if(gunid < 0 || gunid > 50)return 0;

	new weapons[12];
	new ammo[12];

	for(new i; i < 12; i++)
		BWH_GetPlayerWeaponData(playerid, i, weapons[i], ammo[i]);

	AC_ResetPlayerWeapons(playerid);

	for(new w; w < 12; w++)
	{
		if(weapons[w] == gunid)
		{
			PlayerInfo[playerid][pScriptedGun][w] = 0;
			PlayerInfo[playerid][pScriptedAmmo][w] = 0;
			continue;
		}

		AC_GivePlayerWeapon(playerid, weapons[w], ammo[w]);
	}

	return 1;
}

Dialog:aSilahDuzenle(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new sahip = GetPVarInt(playerid, "aSilahSahip");
		new silahid = GetPVarInt(playerid, "aSilahID");
		new mermi = GetPVarInt(playerid, "aSilahMermi");
		new omur = GetPVarInt(playerid, "aSilahOmur");

		switch(listitem)
		{
			case 0: Dialog_Show(playerid, aSilahMermi, DIALOG_STYLE_INPUT, "Silah Mermisi Deðiþtir", "%s model silahýn þu anda %d adet mermisi bulunuyor, yeni miktarý girin:", ">>", "<<", GetWeaponNameEx(silahid), mermi);
			case 1: Dialog_Show(playerid, aSilahSahip, DIALOG_STYLE_INPUT, "Silah Sahibi Deðiþtir", "%s model silahýn sahibi þu anda %s, yeni sahibi girin:", ">>", "<<", GetWeaponNameEx(silahid), GetNameEx(sahip));
			case 2: Dialog_Show(playerid, aSilahDurum, DIALOG_STYLE_LIST, "Silah Durumu Deðiþtir", "Üzerinde\nEvde\nAraçta\nÝþletmede\nPolis Zimmeti\nYönetici Müdahalesi\nGeri Ýade Yapýldý", ">>", "<<");
			case 3: Dialog_Show(playerid, aSilahOmur, DIALOG_STYLE_INPUT, "Silah Ömrü Deðiþtir", "%s model silahýn ömrü %d olarak tespit edildi, yeni miktarý girin:", ">>", "<<", GetWeaponNameEx(silahid), omur);
		}
	}
	else
	{
		DeletePVar(playerid, "aSilahSQLID");
		DeletePVar(playerid, "aSilahSahip");
		DeletePVar(playerid, "aSilahID");
		DeletePVar(playerid, "aSilahMermi");
		DeletePVar(playerid, "aSilahDurum");
	}
	return 1;
}

Dialog:aSilahOmur(playerid, response, listitem, inputtext[])
{
	if(response && isNumeric(inputtext))
	{
		new sqlid = GetPVarInt(playerid, "aSilahSQLID"), sahip = GetPVarInt(playerid, "aSilahSahip"), silahid = GetPVarInt(playerid, "aSilahID"), omur = GetPVarInt(playerid, "aSilahOmur"), yeniomur = strval(inputtext);

		new targetid = IDKarakterOnline(sahip);
		if(targetid != -1)
		{
			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET omur = '%d' WHERE id = '%d'", yeniomur, sqlid);
			mysql_query(dbHandle, queryx);
			SendServerMessage(playerid, "%d nolu %s model silahýn mermisi %d olarak deðiþtirildi. (Eski Ömrü: %d)", sqlid, GetWeaponNameEx(silahid), yeniomur, omur);
			SendServerMessage(targetid, "Administrator tarafýndan %d nolu %s model silahýnýn mermisi %d olarak deðiþtirildi.", sqlid, GetWeaponNameEx(silahid), yeniomur);
			Log_Kaydet("admin/silah.txt", "[%s] %s, %d SQL ID'li %s model silahin omrunu %d olarak degistirdi. (Eski Omur: %d)", GetFullDate(), PlayerInfo[playerid][pAccname], sqlid, GetWeaponNameEx(silahid), yeniomur, omur);
		}
		else
		{
			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET ammo = '%d' WHERE id = '%d'", yeniomur, sqlid);
			mysql_query(dbHandle, queryx);
			SendServerMessage(playerid, "%d nolu %s model silahýn ömrü %d olarak deðiþtirildi. (Eski Ömrü: %d)", sqlid, GetWeaponNameEx(silahid), yeniomur, omur);
			Log_Kaydet("admin/silah.txt", "[%s] %s, %d SQL ID'li %s model silahin omrunu %d olarak degistirdi. (Eski Omur: %d)", GetFullDate(), PlayerInfo[playerid][pAccname], sqlid, GetWeaponNameEx(silahid), yeniomur, omur);
		}
	}
	DeletePVar(playerid, "aSilahSQLID"), DeletePVar(playerid, "aSilahSahip"), DeletePVar(playerid, "aSilahID"), DeletePVar(playerid, "aSilahOmur"), DeletePVar(playerid, "aSilahDurum");
	return 1;
}

Dialog:aSilahMermi(playerid, response, listitem, inputtext[])
{
	if(response && isNumeric(inputtext))
	{
		new sqlid = GetPVarInt(playerid, "aSilahSQLID");
		new sahip = GetPVarInt(playerid, "aSilahSahip");
		new silahid = GetPVarInt(playerid, "aSilahID");
		new mermi = GetPVarInt(playerid, "aSilahMermi");
		new durum = GetPVarInt(playerid, "aSilahDurum");
		new yenimermi = strval(inputtext);

		new targetid = IDKarakterOnline(sahip);
		if(targetid != -1)
		{
			if(durum == 0)
			{
				SendErrorMessage(playerid, "Silah kullanýcýnýn üzerindeyken mermi sayýsýný deðiþtiremezsiniz.");
				DeletePVar(playerid, "aSilahSQLID");
				DeletePVar(playerid, "aSilahSahip");
				DeletePVar(playerid, "aSilahID");
				DeletePVar(playerid, "aSilahMermi");
				DeletePVar(playerid, "aSilahDurum");
				return 1;
			}
			else
			{
				mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET ammo = '%d' WHERE id = '%d'", yenimermi, sqlid);
				mysql_query(dbHandle, queryx);
				SendClientMessageEx(targetid, COLOR_GREY, "%s, %d SQL ID'li %s model silahýnýn mermisini %d olarak güncelledi.", PlayerInfo[playerid][pAccname], sqlid, GetWeaponNameEx(silahid), yenimermi);
				SendAdmMessage("AdmCmd: %s, %d SQL ID'li %s model silahýn mermisini %d olarak deðiþtirdi. (Eski Mermi: %d)", PlayerInfo[playerid][pAccname], sqlid, GetWeaponNameEx(silahid), yenimermi, mermi);
				Log_Kaydet("admin/silah.txt", "[%s] %s, %d SQL ID'li %s model silahin mermisini %d olarak degistirdi. (Eski Mermi: %d)", GetFullDate(), PlayerInfo[playerid][pAccname], sqlid, GetWeaponNameEx(silahid), yenimermi, mermi);
			}
		}
		else
		{
			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET ammo = '%d' WHERE id = '%d'", yenimermi, sqlid);
			mysql_query(dbHandle, queryx);
			SendAdmMessage("AdmCmd: %s, %d SQL ID'li %s model silahýn mermisini %d olarak deðiþtirdi. (Eski Mermi: %d)", PlayerInfo[playerid][pAccname], sqlid, GetWeaponNameEx(silahid), yenimermi, mermi);
			Log_Kaydet("admin/silah.txt", "[%s] %s, %d SQL ID'li %s model silahin mermisini %d olarak degistirdi. (Eski Mermi: %d)", GetFullDate(), PlayerInfo[playerid][pAccname], sqlid, GetWeaponNameEx(silahid), yenimermi, mermi);
		}
	}
	DeletePVar(playerid, "aSilahSQLID");
	DeletePVar(playerid, "aSilahSahip");
	DeletePVar(playerid, "aSilahID");
	DeletePVar(playerid, "aSilahMermi");
	DeletePVar(playerid, "aSilahDurum");
	return 1;
}

Dialog:Silah_Ev_Ayarla(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, aSilahDurum, DIALOG_STYLE_LIST, "Silah Durumu Deðiþtir", "Üzerinde\nEvde\nAraçta\nÝþletmede\nPolis Zimmeti\nYönetici Müdahalesi\nGeri Ýade Yapýldý", ">>", "<<");
	new sorgu[200];
	new evid = strval(inputtext);
	new sqlid = GetPVarInt(playerid, "aSilahSQLID");
	new sahip = GetPVarInt(playerid, "aSilahSahip");
	new silahid = GetPVarInt(playerid, "aSilahID");
	new durum = GetPVarInt(playerid, "aSilahDurum");

	if(evid < 0) return Dialog_Show(playerid, Silah_Ev_Ayarla, DIALOG_STYLE_INPUT, "Silah Ev Ayarla", "{FFFFFF}Belirliðiniz silahýn hangi evde olmasýný istiyorsunuz? Aþaðýda yer alan boþluða ID'sini girin.", "Tamamla", "Ýptal");


	format(sorgu, sizeof(sorgu), "UPDATE weapons SET vehicle = '-1', house = '%d', status = '1' WHERE id = '%d'", HouseInfo[evid][hID], sqlid);
	mysql_tquery(dbHandle, sorgu);

	SendAdmMessage("[/asilah duzenle] %s, %d ID'li silahýn evini %d olarak güncelledi. (Sahip: %s | Model: %s)", PlayerInfo[playerid][pAccname], sqlid, HouseInfo[evid][hID], GetNameEx(sahip), GetWeaponNameEx(silahid));

	if(IDKarakterOnline(sahip) != -1)
	{
		new targetid = IDKarakterOnline(sahip);

		if(durum == 0)
		{
			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '1' WHERE id = '%d'", sqlid);
			mysql_query(dbHandle, queryx);

			AC_ResetPlayerWeapons(targetid);
			SetTimerEx("OnPlayerSetData", 1000, false, "d", targetid);
		}
	}
	return 1;
}

Dialog:Silah_Arac_Ayarla(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, aSilahDurum, DIALOG_STYLE_LIST, "Silah Durumu Deðiþtir", "Üzerinde\nEvde\nAraçta\nÝþletmede\nPolis Zimmeti\nYönetici Müdahalesi\nGeri Ýade Yapýldý", ">>", "<<");
	new sorgu[200];
	new aracid = strval(inputtext);
	new sqlid = GetPVarInt(playerid, "aSilahSQLID");
	new sahip = GetPVarInt(playerid, "aSilahSahip");
	new silahid = GetPVarInt(playerid, "aSilahID");
	new durum = GetPVarInt(playerid, "aSilahDurum");

	if(aracid < 0) return Dialog_Show(playerid, Silah_Arac_Ayarla, DIALOG_STYLE_INPUT, "Silah Araç Ayarla", "{FFFFFF}Belirliðiniz silahýn hangi araçta olmasýný istiyorsunuz? Aþaðýda yer alan boþluða SQL ID'sini girin.", "Tamamla", "Ýptal");

	format(sorgu, sizeof(sorgu), "UPDATE weapons SET vehicle = '%d', house = '-1', status = '2' WHERE id = '%d'", aracid, sqlid);
	mysql_tquery(dbHandle, sorgu);

	SendAdmMessage("AdmCmd: %s, %d SQL ID'li silahýn aracýný %d olarak deðiþtirdi.", PlayerInfo[playerid][pAccname], sqlid, aracid);
	Log_Kaydet("admin/silah.txt", "[%s] %s, %d ID'li %s model silahin ait oldugu araci %d olarak guncelledi.", GetFullDate(), PlayerInfo[playerid][pAccname], sqlid, GetWeaponNameEx(silahid), aracid);

	if(IDKarakterOnline(sahip) != -1)
	{
		new targetid = IDKarakterOnline(sahip);

		if(durum == 0)
		{
			AC_ResetPlayerWeapons(targetid);
			SetTimerEx("OnPlayerSetData", 1000, false, "d", targetid);
		}
	}
	return 1;
}

Dialog:aSilahDurum(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new sqlid = GetPVarInt(playerid, "aSilahSQLID");
		new sahip = GetPVarInt(playerid, "aSilahSahip");
		new silahid = GetPVarInt(playerid, "aSilahID");
		new durum = GetPVarInt(playerid, "aSilahDurum");

		if(listitem == 0)
		{
			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET vehicle = '-1', house = '-1' WHERE id = '%d'", sqlid);
			mysql_query(dbHandle, queryx);
		}

		if(listitem == 1) return Dialog_Show(playerid, Silah_Ev_Ayarla, DIALOG_STYLE_INPUT, "Silah Ev Ayarla", "{FFFFFF}Belirliðiniz silahýn hangi evde olmasýný istiyorsunuz? Aþaðýda yer alan boþluða girin.", "Tamamla", "Ýptal");
		else if(listitem == 2) return Dialog_Show(playerid, Silah_Arac_Ayarla, DIALOG_STYLE_INPUT, "Silah Araç Ayarla", "{FFFFFF}Belirliðiniz silahýn hangi araçta olmasýný istiyorsunuz? Aþaðýda yer alan boþluða SQL ID'sini girin.", "Tamamla", "Ýptal");
		else if(listitem == 3)
		{
			SendErrorMessage(playerid, "Ýþletmelere silah yerleþtirme özelliði pasif durumdadýr.");
			DeletePVar(playerid, "aSilahSQLID");
			DeletePVar(playerid, "aSilahSahip");
			DeletePVar(playerid, "aSilahID");
			DeletePVar(playerid, "aSilahMermi");
			DeletePVar(playerid, "aSilahDurum");
			return 1;
		}

		if(IDKarakterOnline(sahip) != -1)
		{
			new targetid = IDKarakterOnline(sahip);

			if((durum == 0 && listitem != 0) || (durum != 0 && listitem == 0))
			{
				mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '%d' WHERE id = '%d'", listitem, sqlid);
				mysql_query(dbHandle, queryx);

				AC_ResetPlayerWeapons(targetid);
				SetTimerEx("OnPlayerSetData", 1000, false, "d", targetid);
			}
			else
			{
				mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '%d' WHERE id = '%d'", listitem, sqlid);
				mysql_query(dbHandle, queryx);
			}
		}
		else
		{
			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '%d' WHERE id = '%d'", listitem, sqlid);
			mysql_query(dbHandle, queryx);
		}
		SendServerMessage(playerid, "%d nolu %s model silahýn durumunu deðiþtirdiniz.", sqlid, GetWeaponNameEx(silahid));
	}
	DeletePVar(playerid, "aSilahSQLID");
	DeletePVar(playerid, "aSilahSahip");
	DeletePVar(playerid, "aSilahID");
	DeletePVar(playerid, "aSilahMermi");
	DeletePVar(playerid, "aSilahDurum");
	return 1;
}
Dialog:aSilahSahip(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new sqlid = GetPVarInt(playerid, "aSilahSQLID");
		new sahip = GetPVarInt(playerid, "aSilahSahip");
		new silahid = GetPVarInt(playerid, "aSilahID");
		new durum = GetPVarInt(playerid, "aSilahDurum");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM users WHERE name = '%e'", inputtext);
		new Cache:idveri = mysql_query(dbHandle, queryx, true), rows;
		cache_get_row_count(rows);

		new yenisahip;
		if(!rows)
		{
			SendErrorMessage(playerid, "%s adlý karakter bulunamadý. (%s)", inputtext, GetFullDate());
			cache_delete(idveri);
			DeletePVar(playerid, "aSilahSQLID");
			DeletePVar(playerid, "aSilahSahip");
			DeletePVar(playerid, "aSilahID");
			DeletePVar(playerid, "aSilahMermi");
			DeletePVar(playerid, "aSilahDurum");
			return 1;
		}
		else
		{
			cache_get_value_int(0, "id", yenisahip);
			cache_delete(idveri);
		}

		new targetid = IDKarakterOnline(sahip);
		if(targetid != -1)
		{
			if(durum == 0)
			{
				SendErrorMessage(playerid, "Bu silahýn sahibi %s þu anda çevrimiçi ve silah üzerinde, bu iþlemi yapamazsýnýz.", GetNameEx(targetid));
				DeletePVar(playerid, "aSilahSQLID"), DeletePVar(playerid, "aSilahSahip"), DeletePVar(playerid, "aSilahID"), DeletePVar(playerid, "aSilahMermi"), DeletePVar(playerid, "aSilahDurum");
				return 1;
			}
			else
			{
				mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET owner = '%d' WHERE id = '%d'", yenisahip, sqlid);
				mysql_query(dbHandle, queryx);
			}
		}
		else
		{
			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET owner = '%d' WHERE id = '%d'", yenisahip, sqlid);
			mysql_query(dbHandle, queryx);
		}
		SendServerMessage(playerid, "%d nolu %s model silahýn sahibini %s olarak deðiþtirdiniz. (Eski: %s)", sqlid, GetWeaponNameEx(silahid), GetNameEx(yenisahip), GetNameEx(sahip));
		Log_Kaydet("admin/silah.txt", "[%s] %s, %d SQL ID'li %s model silahin sahibini %s olarak degistirdi. (Eski Sahip: %s)", GetFullDate(), PlayerInfo[playerid][pAccname], sqlid, GetWeaponNameEx(silahid), GetNameEx(yenisahip), GetNameEx(sahip));
	}
	DeletePVar(playerid, "aSilahSQLID"), DeletePVar(playerid, "aSilahSahip"), DeletePVar(playerid, "aSilahID"), DeletePVar(playerid, "aSilahMermi"), DeletePVar(playerid, "aSilahDurum");
	return 1;
}

IDKarakterOnline(id)
{
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pID] == id)
		{
			return i;
		}
	}
	return -1;
}
CMD:silahlarim(playerid)
{
	if (PlayerInfo[playerid][pProbation])
		return SendErrorMessage(playerid, "Probationda bu iþlemi yapamazsýnýz.");

	pc_cmd_silah(playerid, "liste");
	return 1;
}

CMD:silah(playerid, params[]) // Loglanacak
{
	new opsiyon[32];
	if(PlayerInfo[playerid][pLevel] < 3) return SendErrorMessage(playerid, "Bu sistemden sadece 3. seviye ve üstü kullanýcýlar yararlanabilir.");

	if (PlayerInfo[playerid][pProbation])
		return SendErrorMessage(playerid, "Probationda bu iþlemi yapamazsýnýz.");

	if(sscanf(params, "s[32]", opsiyon)){
        SendSyntaxMessage(playerid, "/silah [seçenek]");
		SendClientMessageEx(playerid, COLOR_GREY, "{9FA8C7}SEÇENEK: {C8C8C8}liste / birak / kullan / envanter / ver / mermial / pozisyon / sistemesat");
       // SendClientMessageEx(playerid, COLOR_GREY, "siparis(PASIF): Ýllegal birlik üyelerinin sipariþ verebileceði komut.");
       // SendClientMessageEx(playerid, COLOR_GREY, "siparisdurum(PASIF): Sipariþleri kontrol etmeye yarayan komut.");
       // SendClientMessageEx(playerid, COLOR_GREY, "teslimal(PASIF): Sipariþi teslim almanýza yarayan komut.");
        return 0;
	}
	SilahlariKaydet(playerid); // Silah kayýt
	if(!strcmp(opsiyon, "liste", true)) Dialog_Show(playerid, SilahListeGoruntule, DIALOG_STYLE_INPUT, "Silah Sistemi", "Bu karaktere kayýtlý tüm silahlarý listelemek istediðinize emin misiniz?\nEminseniz aþaðýdaki kutucuða onay için 'EVET' yazmalýsýnýz.", "Evet", "Hayýr");
	else if(!strcmp(opsiyon, "pozisyon", true))
	{
		new weaponid = AC_GetPlayerWeapon(playerid);
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Bu komutu sadece ayakta kullanabilirsiniz.");
		if(!weaponid) return SendErrorMessage(playerid, "Elinizde silah yokken pozisyon düzenleyemezsiniz.");
		if(!IsWeaponWearable(weaponid)) return SendErrorMessage(playerid, "Elinizde bulunan silah pozisyon sistemine dahil deðil.");

		Dialog_Show(playerid, DialogSilahPozisyon, DIALOG_STYLE_LIST, "Silah Pozisyon Sistemi", "Silahý Gizle / Göster\nKemik Ayarla\nPozisyon Düzenle\nPozisyon Sýfýrla", "OK", "<<");
	}
	else if(!strcmp(opsiyon, "mermial", true))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Bu komutu sadece ayakta kullanabilirsiniz.");
		if(PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz.");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);
		if(!rows) return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), PlayerInfo[playerid][pSilahSistemi] = 0, cache_delete(veri);

		new weaponid, ammo, fiyat, maxmermi;
		new string[1024];

		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);

				switch(weaponid)
				{
					case 22: fiyat = 1200, maxmermi = MAX_MERMI_COLT;
					case 23: fiyat = 1200, maxmermi = MAX_MERMI_SILENCED;
					case 24: fiyat = 1900, maxmermi = MAX_MERMI_DEAGLE;
					case 25: fiyat = 2100, maxmermi = MAX_MERMI_SHOTGUN;
					case 26: fiyat = 2100, maxmermi = MAX_MERMI_SAWNOFF;
					case 28: fiyat = 1900, maxmermi = MAX_MERMI_UZI;
					case 29: fiyat = 1950, maxmermi = MAX_MERMI_MP5;
					case 30: fiyat = 5000, maxmermi = MAX_MERMI_AK47;
					case 31: fiyat = 5000, maxmermi = MAX_MERMI_M4;
					case 32: fiyat = 1600, maxmermi = MAX_MERMI_TEC9;
					case 33: fiyat = 1800, maxmermi = MAX_MERMI_RIFLE;
					case 34: fiyat = 1800, maxmermi = MAX_MERMI_SNIPER;
					default: fiyat = 0, maxmermi = 0;
				}

				format(string, 800, "%s%s(%d/%d) (Mermi fiyatý: $%d)\n", string, GetWeaponNameEx(weaponid), ammo, maxmermi, fiyat);
			}
			cache_delete(veri);
			Dialog_Show(playerid, MermiSatinAl, DIALOG_STYLE_LIST, "LOSWORLD - Mermi Sistemi", string, "Ýleri", "Iptal");
		}
		return 1;
	}
	else if(!strcmp(opsiyon, "kullan", true) || !strcmp(opsiyon, "elineal", true))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Bu komutu sadece ayakta kullanabilirsiniz.");
		if(PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz.");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);
		if(!rows) return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), PlayerInfo[playerid][pSilahSistemi] = 0, cache_delete(veri);

		new weaponid, ammo;
		new string[1024];
		for(new j; j < rows; j++)
		{
			cache_get_value_int(j, "weaponid", weaponid);
			cache_get_value_int(j, "ammo", ammo);

			format(string, 800, "%s%s\t Mermi: %d\n", string, GetWeaponNameEx(weaponid), ammo);
		}
		cache_delete(veri);
		Dialog_Show(playerid, SilahEnvanter, DIALOG_STYLE_LIST, "LOSWORLD - Silah Envanteri", string, "Al", "Kapat");
		return 1;
	}
	else if(!strcmp(opsiyon, "birak", true) || !strcmp(opsiyon, "yerlestir", true))
	{
		if(PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Ýþbaþýnda bu sistemden yararlanamazsýnýz.");

		new bweaponid = AC_GetPlayerWeapon(playerid), rows, tempwid, tempsqlid, vid = Arac_Yakin(playerid, 5.0), h = GetNearInsideHouse(playerid);

		if(!bweaponid)
		{
			Dialog_Show(playerid, MermisizSilahlar, DIALOG_STYLE_INPUT, "Alternatif Silah Yerleþtirme", "Eðer mermisi olmayan bir silaha sahipseniz ve mülkünüze bu silahý yerleþtirmek istiyorsanýz bu fonksiyondan yararlanabilirsiniz.\nAþaðýdaki kutucuða onay için 'EVET' yazmalýsýnýz.", "Evet", "Hayýr");
			return SendErrorMessage(playerid, "Elinizde silah yokken bu iþlemi yapamazsýnýz.");
		}

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0' AND weaponid = '%d'", PlayerInfo[playerid][pID], bweaponid);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		cache_get_row_count(rows);
		if(!rows) return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), PlayerInfo[playerid][pSilahSistemi] = 0, cache_delete(veri);

		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "id", tempsqlid);
				cache_get_value_int(j, "weaponid", tempwid);

				if(tempwid == bweaponid)break;
			}
		}
		cache_delete(veri);

		if(h != -1 && GetPlayerVirtualWorld(playerid) > 0)
		{
			if(HouseInfo[h][hLocked] == 1 && PlayerInfo[playerid][pID] != HouseInfo[h][hOwner]) return SendErrorMessage(playerid, "Kapýsý kilitli evlere silah koyamazsýnýz.");
			if(Silah_SayiKontrol(1, h) >= MAX_WEAPON_HOUSE) return SendErrorMessage(playerid, "Bu eve daha fazla silah yerleþtiremezsiniz.");

			new ammo = Silah_Bilgi[playerid][sMermi][SilahSlotuBul[bweaponid]];

			PlayerTextDrawSetString(playerid, Silah_Bilgi[playerid][MermiTD], " ");
			Silah_Bilgi[playerid][sMermi][SilahSlotuBul[bweaponid]] = 0;
			Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[bweaponid]] = false;
			SetPlayerAmmo(playerid, bweaponid, 0);
			AC_RemovePlayerWeapon(playerid, bweaponid);

			new string[150];
			format(string, 150, "elindeki %s model silahý evin kasasýna koydu.", GetWeaponNameEx(bweaponid));
			PlayerAME(playerid, string);

			SendClientMessageEx(playerid, COLOR_GREY, "%s model silahýnýzý %d (SQL ID: %d) ID'li eve yerleþtirdiniz.", GetWeaponNameEx(bweaponid), h, HouseInfo[h][hID]);

			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET ammo = '%d', status = '1', house = '%d' WHERE weaponid = '%d' AND owner = '%d' AND status = '0'", ammo, HouseInfo[h][hID], bweaponid, PlayerInfo[playerid][pID]);
			mysql_query(dbHandle, queryx);

			mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e', NOW())", tempsqlid, PlayerInfo[playerid][pID], HouseInfo[h][hID], "silah eve yerleþtirildi");
			mysql_tquery(dbHandle, queryx);

			Log_Kaydet("loglar/silah.txt", "[%s] %s (C_ID: %d), %d ID'li %s model silahini %d ID'li eve yerlestirdi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], tempsqlid, GetWeaponNameEx(bweaponid), HouseInfo[h][hID]);
		}
		else if(vid != -1)
		{
			if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_BIKE) return SendErrorMessage(playerid, "Bisiklete silah yerleþtiremezsiniz.");
			if(Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && !VehicleInfo[vid][carTrunkLock] || Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && VehicleInfo[vid][carLocked]) return SendErrorMessage(playerid, "Bu iþlem için araç kilitsiz ve bagajý açýk olmalýdýr.");
			if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_MBIKE && !VehicleInfo[vid][carEngineOn] || Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_MBIKE && VehicleInfo[vid][carLocked]) return SendErrorMessage(playerid, "Bu iþlem için aracýn motoru açýk ve araç kilitsiz olmalý.");

			new Float:tX, Float:tY, Float:tZ;
			GetPosBehindVehicle(vid, tX, tY, tZ, 0.0);
			if(Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && !IsPlayerInRangeOfPoint(playerid, 2.5, tX, tY, tZ)) return SendErrorMessage(playerid, "Aracýn bagajýna yakýn deðilsin.");

			if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_MBIKE && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Silah yerleþtirmek için motorda sürücü olmalýsýn.");

			if(Silah_SayiKontrol(2, VehicleInfo[vid][carID]) >= AracSilahLimiti(VehicleInfo[vid][carModel])) return SendErrorMessage(playerid, "Bu araca daha fazla silah yerleþtiremezsiniz.");

			new ammo = Silah_Bilgi[playerid][sMermi][SilahSlotuBul[bweaponid]];

			PlayerTextDrawSetString(playerid, Silah_Bilgi[playerid][MermiTD], " ");
			Silah_Bilgi[playerid][sMermi][SilahSlotuBul[bweaponid]] = 0;
			Silah_Bilgi[playerid][sSilahID][SilahSlotuBul[bweaponid]] = false;
			SetPlayerAmmo(playerid, bweaponid, 0);
			AC_RemovePlayerWeapon(playerid, bweaponid);

			SendClientMessageEx(playerid, COLOR_GREY, "%s model silahýnýzý %d (SQL ID: %d) ID'li araca yerleþtirdiniz.", GetWeaponNameEx(bweaponid), vid, VehicleInfo[vid][carID]);

			PlayerAME(playerid, "aracýnýn içerisine bir þey býrakýr.");

			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET ammo = '%d', status = '2', vehicle = '%d' WHERE weaponid = '%d' AND owner = '%d' AND status = '0'", ammo, VehicleInfo[vid][carID], bweaponid, PlayerInfo[playerid][pID]);
			mysql_query(dbHandle, queryx);

			mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e', NOW())", tempsqlid, PlayerInfo[playerid][pID], VehicleInfo[vid][carID], "silah araca yerleþtirildi");
			mysql_tquery(dbHandle, queryx);

			Log_Kaydet("loglar/silah.txt", "[%s] %s (C_ID: %d), %d ID'li %s model silahini %d ID'li araca yerlestirdi.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], tempsqlid, GetWeaponNameEx(bweaponid), VehicleInfo[vid][carID]);
		}
		else SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz. Silahlar ev, araç veya kasalara konabilir.");
	}
	else if(!strcmp(opsiyon, "envanter", true) || !strcmp(opsiyon, "env", true) || !strcmp(opsiyon, "al", true) || !strcmp(opsiyon, "cal", true))
	{
		new vid = Arac_Yakin(playerid, 5.0);
		new h = GetNearInsideHouse(playerid);

		if(!PlayerInfo[playerid][pOnDuty]) // Envanterden (C)alma
		{
			mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE id = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
			new Cache:veri = mysql_query(dbHandle, queryx, true);
			new rows, string[1599];
			cache_get_row_count(rows);
		    if(h != -1 && GetPlayerVirtualWorld(playerid) > 0)
			{
				if(HouseInfo[h][hOwner] <= 0 && PlayerInfo[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Sisteme ait evlerden silah alamazsýnýz.");
				if(HouseInfo[h][hLocked] == 1 && PlayerInfo[playerid][pID] != HouseInfo[h][hOwner]) return SendErrorMessage(playerid, "Kapýsý kilitli evlerden silah alamazsýnýz.");

				mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE house = '%d' AND status = '1'", HouseInfo[h][hID]);
				new Cache:veri = mysql_query(dbHandle, queryx, true);
				new rows, string[1599];
				cache_get_row_count(rows);

				if(rows)
				{
					new xid, xweaponid, xammo, xstatus;

					for(new j; j < rows; j++)
					{
						cache_get_value_int(j, "id", xid);
						cache_get_value_int(j, "weaponid", xweaponid);
						cache_get_value_int(j, "ammo", xammo);
						cache_get_value_int(j, "status", xstatus);

						if(xstatus == 1) format(string, 1599, "%s%s (Mermi: %d - ID: %d)\n", string, GetWeaponNameEx(xweaponid), xammo, xid);
					}
					Dialog_Show(playerid, SilahEvEnvanter, DIALOG_STYLE_LIST, "LOSWORLD - Silah Sistemi", string, "Al", "Iptal"), cache_delete(veri);
				}
				else SendErrorMessage(playerid, "Ev silah envanteri boþ."), cache_delete(veri);
			}
			else if(vid != -1)
			{
				if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_BIKE) return SendErrorMessage(playerid, "Bisikletlere silah yerleþtirilemediði için bu iþlemi yapamazsýnýz.");

				if(Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && !VehicleInfo[vid][carTrunkLock] || Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && VehicleInfo[vid][carLocked]) return SendErrorMessage(playerid, "Bir arabadan silah almak için, o aracýn bagajý ve kilidi açýk olmalýdýr.");
				if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_MBIKE && !VehicleInfo[vid][carEngineOn] || Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_MBIKE && VehicleInfo[vid][carLocked])
					return SendErrorMessage(playerid, "Bu iþlem için aracýn motoru açýk ve araç kilitsiz olmalý.");

				new Float:tX, Float:tY, Float:tZ;
				GetPosBehindVehicle(vid, tX, tY, tZ, 0.0);
				if(Arac_Model(VehicleInfo[vid][carModel]) != VEHICLE_TYPE_MBIKE && !IsPlayerInRangeOfPoint(playerid, 2.2, tX, tY, tZ)) return SendErrorMessage(playerid, "Aracýn bagajýna yakýn deðilsin.");
				else if(Arac_Model(VehicleInfo[vid][carModel]) == VEHICLE_TYPE_MBIKE && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Silahý araçtan almak için motorda sürücü olmalýsýn.");

				mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE vehicle = '%d' AND status = '2'", VehicleInfo[vid][carID]);
				new Cache:veri = mysql_query(dbHandle, queryx, true);
				new rows, string[1599];
				cache_get_row_count(rows);

				if(rows)
				{
					new xid, xweaponid, xammo, xstatus;

					for(new j; j < rows; j++)
					{
						cache_get_value_int(j, "id", xid);
						cache_get_value_int(j, "weaponid", xweaponid);
						cache_get_value_int(j, "ammo", xammo);
						cache_get_value_int(j, "status", xstatus);

						if(xstatus == 2)
							format(string, 1599, "%s%s (Mermi: %d - SQLID: %d)\n", string, GetWeaponNameEx(xweaponid), xammo, xid);
					}
					Dialog_Show(playerid, SilahAracEnvanter, DIALOG_STYLE_LIST, "LOSWORLD - Silah Sistemi", string, "Al", "Iptal"), cache_delete(veri);
				}
				else SendErrorMessage(playerid, "Araç silah envanteri boþ."), cache_delete(veri);
			}
			else SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz.");

		}
		else if(OlusumTipGetir(PlayerInfo[playerid][pFaction]) == FACTION_POLICE) // El koyma
		{
			if(h != -1 && GetPlayerVirtualWorld(playerid) > 0)
			{
				mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE house = '%d'", HouseInfo[h][hID]);
				new Cache:veri = mysql_query(dbHandle, queryx, true);
				new rows, string[1599];
				cache_get_row_count(rows);

				if(rows)
				{
					new xid, xweaponid, xammo, xstatus;

					for(new j; j < rows; j++)
					{
						cache_get_value_int(j, "id", xid);
						cache_get_value_int(j, "weaponid", xweaponid);
						cache_get_value_int(j, "ammo", xammo);
						cache_get_value_int(j, "status", xstatus);

						if(xstatus == 1)
							format(string, 1599, "%s%s (Mermi: %d - SQLID: %d)\n", string, GetWeaponNameEx(xweaponid), xammo, xid);
					}
					Dialog_Show(playerid, SilahEvEnvanterPD, DIALOG_STYLE_LIST, "LOSWORLD - Silah Sistemi", string, "Al", "Iptal"), cache_delete(veri);
				}
				else SendErrorMessage(playerid, "Ev silah envanteri boþ."), cache_delete(veri);
			}
			else if(vid != -1)
			{
				new Float:tX, Float:tY, Float:tZ;
				GetPosBehindVehicle(vid, tX, tY, tZ, 0.0);
				if(!IsPlayerInRangeOfPoint(playerid, 2.2, tX, tY, tZ))
					return SendErrorMessage(playerid, "Araca yakýn deðilsin.");

				mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE vehicle = '%d'", VehicleInfo[vid][carID]);
				new Cache:veri = mysql_query(dbHandle, queryx, true);
				new rows, string[1599];
				cache_get_row_count(rows);

				if(rows)
				{
					new xid, xweaponid, xammo, xstatus;

					for(new j; j < rows; j++)
					{
						cache_get_value_int(j, "id", xid);
						cache_get_value_int(j, "weaponid", xweaponid);
						cache_get_value_int(j, "ammo", xammo);
						cache_get_value_int(j, "status", xstatus);

						if(xstatus == 2)
							format(string, 1599, "%s%s (Mermi: %d - SQLID: %d)\n", string, GetWeaponNameEx(xweaponid), xammo, xid);
					}
					Dialog_Show(playerid, SilahAracEnvanterPD, DIALOG_STYLE_LIST, "LOSWORLD - Silah Sistemi", string, "Al", "Iptal"), cache_delete(veri);
				}
				else SendErrorMessage(playerid, "Araç silah envanteri boþ."), cache_delete(veri);
			}
			else SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz.");
		}
		else SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz.");
	}
	else if(!strcmp(opsiyon, "ver", true))
	{
		if(PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Oluþum iþbaþýnda olan kullanýcýlar bu sistemden yararlanamaz.");
		new vweaponid = AC_GetPlayerWeapon(playerid);
		if(!vweaponid) return SendErrorMessage(playerid, "Elinizde silah yokken bu iþlemi yapamazsýnýz.");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0' AND weaponid = '%d'", PlayerInfo[playerid][pID], vweaponid);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);
		if(!rows)
			return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."),  PlayerInfo[playerid][pSilahSistemi] = 0, cache_delete(veri);

		new twidc, statuc, lisansc;

		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "weaponid", twidc);
				cache_get_value_int(j, "lisans", lisansc);
				cache_get_value_int(j, "status", statuc);
				cache_get_value_int(j, "id", PlayerInfo[playerid][SilahVerDialogID]);

				if(twidc == vweaponid && statuc == 0 && lisansc == 1)break;
			}
			cache_delete(veri);
		}

		if(lisansc == 0) Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "LOSWORLD - Silah Sistemi", "%s silahýný vermek istediðiniz kiþinin adýný ya da ID bilgisini girin:", "Ver", "Iptal", GetWeaponNameEx(vweaponid));
		else SendErrorMessage(playerid, "Bu silahý veremezsiniz.");
	}
	else if(!strcmp(opsiyon, "sistemesat", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2260.4148, 63.1703, 26.4844) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1248.9823, 365.7434, 19.5547)) return SendErrorMessage(playerid, "Silah satma noktasýnda deðilsiniz.");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Bu komutu sadece ayakta kullanabilirsiniz.");
		if(PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Oluþum iþbaþýnda olan kullanýcýlar bu sistemden yararlanamaz.");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
		new Cache:veri = mysql_query(dbHandle, queryx, true);
		new rows;
		cache_get_row_count(rows);
		if(!rows)
			return SendErrorMessage(playerid, "Bu fonksiyondan yararlanamazsýnýz."), PlayerInfo[playerid][pSilahSistemi] = 0, cache_delete(veri);

		new weaponid, ammo, fiyat, string[1024];
		format(string, sizeof(string), "Silah\tMermi Sayýsý\tFiyat\n");

		if(rows)
		{
			for(new j; j < rows; j++)
			{
				cache_get_value_int(j, "weaponid", weaponid);
				cache_get_value_int(j, "ammo", ammo);

				switch(weaponid)
				{
					case 22: fiyat = 6000;
					case 23: fiyat = 8000;
					case 24: fiyat = 12000;
					case 25: fiyat = 10000;
					case 28: fiyat = 13000;
					case 30: fiyat = 17000;
					case 32: fiyat = 13000;
					default: fiyat = 0;
				}

				format(string, sizeof(string), "%s%s\t%d adet\t$%d\n", string, GetWeaponNameEx(weaponid), ammo, fiyat);
			}
			Dialog_Show(playerid, SilahSistemeSat, DIALOG_STYLE_TABLIST_HEADERS, "Silah Sisteme Sat", string, "Sat", "Ýptal");
			cache_delete(veri);
		}
	}
	/*
	else if(!strcmp(opsiyon, "siparis", true))
	{
		if(SunucuBilgi[SilahSatisDurum]) return SendErrorMessage(playerid, "IFM tarafýndan silah satýþlarý pasife çekilmiþtir.");
	    new olusum = PlayerInfo[playerid][pFaction], string[256], aktor = Get_Nearest_Weapon_Actor(playerid);

	    if(olusum < 1) return SendErrorMessage(playerid, "Bu komutu sadece birlik üyeleri kullanabilir.");
		if(aktor == -1) return SendErrorMessage(playerid, "Silah satýþý yapan bir aktöre yakýn olmalýsýn.");
	    if(PlayerInfo[playerid][pJailTime] > 1) return SendErrorMessage(playerid, "Þu an bu komutu kullanamazsýnýz.");
		if(!Olusum[olusum][oSilahIzin]) return SendErrorMessage(playerid, "Bu birliðin silah satýn alma izni bulunmuyor.");
		if(PlayerInfo[playerid][pOlusumRutbe] > 3) return SendErrorMessage(playerid, "Bu opsiyondan sadece birlikteki ilk 3 rütbe faydalanabilir, diðer üyeler faydalanamazlar.");
		if(GetFactionWeaponStock(olusum) < 1) return SendErrorMessage(playerid, "Bulunduðunuz birlik IFM tarafýndan tanýmlanan silah hakkýný doldurmuþ.");

        if(AktorBilgi[aktor][aktorTip] != AKTOR_TIP_SILAH) return SendErrorMessage(playerid, "Bu aktör silah satýþý yapmýyor.");

	    if(Siparis_Kontrol(playerid)) return SendErrorMessage(playerid, "Zaten bir silah sipariþ etmiþsiniz. /silah siparisdurum ile durumunu öðrenebilirsiniz.");

        if(olusum > 0 && IllegalOlusumUyesi(playerid) && Olusum[olusum][oDurum] > 0)
	    {
	        for(new i; i < 2; i++)
	        {
	            format(string, sizeof(string), "%s%s\t%d adet\t$%d\t%d Payday\n", string, GetWeaponNameEx(silahlar[i]), mermiler[i], lvl3fiyatlar[i], lvl3sureler[i]);
			    Dialog_Show(playerid, SilahSiparisi, DIALOG_STYLE_TABLIST_HEADERS, "Silah Sipariþ Sistemi", "Silah adý\tMermi miktarý\tFiyat\tTeslim süresi(PayDay)\n%s", "Sipariþ", "Geri", string);
	        }
	    }
	    else SendErrorMessage(playerid, "Bu sistemden sadece tanýtým onaylý illegal birlikler yararlanabilir.");
	}
	else if(!strcmp(opsiyon, "siparisdurum", true))
	{
	    new olusum = PlayerInfo[playerid][pFaction], string[3500], siparisdurum[128];

	    if(olusum < 1) return SendErrorMessage(playerid, "Bu komutu sadece birlik üyeleri kullanabilir.");
	    if(PlayerInfo[playerid][pJailTime] > 1) return SendErrorMessage(playerid, "Þu an bu komutu kullanamazsýnýz.");
	    if(!Siparis_Durum(playerid)) return SendErrorMessage(playerid, "Herhangi bir silah sipariþiniz yok.");

        if(olusum > 0 && IllegalOlusumUyesi(playerid) && Olusum[olusum][oDurum] > 0)
	    {
	        foreach(new si : Siparisler)
	        {
				if(SilahSiparisi[si][siparisSahip] == PlayerInfo[playerid][pID] && SilahSiparisi[si][siparisDurum] == 0)

                switch(SilahSiparisi[si][siparisDurum])
				{
					case 0: siparisdurum = sprintf("%d PayDay", SilahSiparisi[si][siparisKalan]);
					case 1: siparisdurum = sprintf("Sipariþ Hazýr");
					case 2: siparisdurum = sprintf("Teslim Alýnmýþ");
				}

	            format(string, sizeof(string), "%s%s\t%d adet\t$%d (ödenmiþ)\t%s\n", string, GetWeaponNameEx(SilahSiparisi[si][siparisSilah]), SilahSiparisi[si][siparisMermi], SilahSiparisi[si][siparisFiyat], siparisdurum);
			    Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "Sipariþ Durumu", "Silah adý\tMermi miktarý\tFiyat\tSipariþ Durumu\n%s", ">>", "Kapat", string);
				break;
	        }
			SendClientMessage(playerid, "Sokaklar arasýndan bir fýsýltý kulaðýna geldi ve sipariþinin durumunu öðrendin.");
	    }
	    else SendErrorMessage(playerid, "Bu sistemden sadece tanýtým onaylý illegal birlikler yararlanabilir.");
	}
	else if(!strcmp(opsiyon, "teslimal", true))
	{
	    new olusum = PlayerInfo[playerid][pFaction], aktor = Get_Nearest_Weapon_Actor(playerid);

	    if(olusum < 1) return SendErrorMessage(playerid, "Bu komutu sadece birlik üyeleri kullanabilir.");
		if(aktor == -1) return SendErrorMessage(playerid, "Silah satýþý yapan bir aktöre yakýn olmalýsýn.");
	    if(PlayerInfo[playerid][pJailTime] > 1) return SendErrorMessage(playerid, "Þu an bu komutu kullanamazsýnýz.");

        if(AktorBilgi[aktor][aktorTip] != AKTOR_TIP_SILAH) return SendErrorMessage(playerid, "Bu aktör silah satýþý yapmýyor.");

	    if(!Siparis_Durum(playerid)) return SendErrorMessage(playerid, "Teslim edilmeye hazýr bir sipariþiniz yok.");

        if(olusum > 0 && IllegalOlusumUyesi(playerid))
	    {
	        foreach(new sipo : Siparisler)
	        {
	            if(SilahSiparisi[sipo][siparisSahip] == PlayerInfo[playerid][pID] && SilahSiparisi[sipo][siparisDurum] == 1)
				{
                    mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[playerid][pID]);
                    new Cache:veri = mysql_query(dbHandle, queryx, true);
                    new rows;
                    cache_get_row_count(rows);

                    if(rows)
                    {
                        new xweaponid;

                        for(new j; j < rows; j++)
                        {
                            cache_get_value_int(j, "weaponid", xweaponid);
                            if(SilahSiparisi[sipo][siparisSilah] == xweaponid)break;
                        }

					    if(SilahSiparisi[sipo][siparisSilah] == xweaponid) return SendClientMessageEx(playerid, COLOR_GREY, "Üzerinizde ayný silahtan bulunuyor, bu sebepten ötürü silah alamazsýnýz."), cache_delete(veri);
                        if(SilahSlotBul(SilahSiparisi[sipo][siparisSilah]) == SilahSlotBul(xweaponid)) return SendClientMessageEx(playerid, COLOR_GREY, "Üzerinizde ayný tip silahtan bulunuyor, bu sebepten ötürü silahý alamazsýnýz."), cache_delete(veri);
                   }

					Silah_Ver(playerid, SilahSiparisi[sipo][siparisSilah], SilahSiparisi[sipo][siparisMermi]);
					SilahSiparisi[sipo][siparisDurum] = 2;
				}
				break;
	        }
	    }
	    else SendErrorMessage(playerid, "Bu sistemden sadece tanýtým onaylý illegal birlikler yararlanabilir.");
	}*/
	else SendErrorMessage(playerid, "Hatalý parametre giriþi tespit edildi.");
	return 1;
}

alias:asilah("aweapon");
CMD:asilah(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Bu komut sadece Game Admin 3 ve üstü yetkililer tarafýndan kullanýlabilir.");
	new option[20], id, weaponid, ammo;
	if(sscanf(params, "S[20]D(-1)D(-1)D(-1)", option, id, weaponid, ammo))
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "[GA1+] {FFFFFF}sil | temizle | kontrol | id | sifirla");
		SendClientMessageEx(playerid, COLOR_YELLOW, "[GA5+] {FFFFFF}ver | duzenle");
		SendClientMessageEx(playerid, COLOR_GREEN, "[!] {AFAFAF}/asilah [Seçenek Adý] þeklinde komutu kullanabilir, kalan boþluklarý doldurarak iþleminizi gerçekleþtirebilirsiniz.");
		return 1;
	}

	if(!strcmp(option, "ver", true))
	{
		if(PlayerInfo[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Bu komut sadece Game Admin 5 ve üstü yetkililer tarafýndan kullanýlabilir.");
		if(id < 0) return SendSyntaxMessage(playerid, "/asilah ver (Oyuncu ID) (Silah ID) (Mermi Miktar)");

		if(!IsPlayerConnected(id) || !pTemp[id][pLogged]) return SendSyntaxMessage(playerid, "Geçersiz ID giriþi tespit edildi.");
		if(weaponid <= 0) return SendSyntaxMessage(playerid, "/asilah ver %d (Silah ID) (Mermi Miktar)", id);

		if(ammo < 1) return SendErrorMessage(playerid, "1'den az mermili bir silah veremezsin.");
		if(weaponid == 24 && ammo > 50) return SendErrorMessage(playerid, "Desert Eagle silahý maksimum 50 mermi alabilir.");
		if(weaponid == 30 && ammo > 90)return SendErrorMessage(playerid, "AK-47 silahý maksimum 90 mermi alabilir.");
		if(weaponid == 31 && ammo > 150) return SendErrorMessage(playerid, "M4 silahý maksimum 150 mermi alabilir.");
		if(weaponid == 25 && ammo > 35) return SendErrorMessage(playerid, "Shotgun silahý maksimum 35 mermi alabilir.");
		if(weaponid == 22 && ammo > 68) return SendErrorMessage(playerid, "Pistol silahý maksimum 68 mermi alabilir.");
		if(weaponid == 23 && ammo > 68) return SendErrorMessage(playerid, "Silenced Pistol silahý maksimum 68 mermi alabilir.");
		if(weaponid == 32 && ammo > 150) return SendErrorMessage(playerid, "Tec-9 silahý maksimum 150 mermi alabilir.");
		if(weaponid == 28 && ammo > 150) return SendErrorMessage(playerid, "Uzi silahý maksimum 150 mermi alabilir.");
		if(weaponid == 33 && ammo > 30) return SendErrorMessage(playerid, "County Rifle silahý maksimum 30 mermi alabilir.");
		if(weaponid == 34 && ammo > 30) return SendErrorMessage(playerid, "Sniper silahý maksimum 30 mermi alabilir.");
		if(weaponid == 26 && ammo > 40) return SendErrorMessage(playerid, "Sawnoff Shotgun silahý maksimum 40 mermi alabilir.");

		Silah_Ver(id, weaponid, ammo, playerid, PlayerInfo[playerid][pAccID]);
		// mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE owner = '%d' AND status = '0'", PlayerInfo[id][pID]);
		// new Cache:veri = mysql_query(dbHandle, queryx, true);
		// new rows;
		// cache_get_row_count(rows);

		// if(!rows)
		// {
		// 	mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapons (owner, weaponid, ammo, status, admin) VALUES ('%d', '%d', '%d', '%d', '%d')", PlayerInfo[id][pID], weaponid, ammo, 0, PlayerInfo[playerid][pID]);
		// 	mysql_query(dbHandle, queryx);
		// 	SendClientMessageEx(playerid, COLOR_WHITE, "%s adlý oyuncuya {80F5B1}%s (Mermi: %d){FFFFFF} verdin.", GetNameEx(id), SilahAdi(weaponid), ammo);
		// 	SendClientMessageEx(id, COLOR_WHITE, "%s adlý yetkili sana {80F5B1}%s (Mermi: %d){FFFFFF} verdi.", GetNameEx(id), SilahAdi(weaponid), ammo);
		// 	Log_Kaydet("adminLog.txt", "[/asilah ver] %s (C_ID: %d | A_ID: %d), %s (C_ID: %d | A_ID: %d) adli oyuncuya %s (Mermi: %d) verdi. [Tarih: %s]", PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetNameEx(id), PlayerInfo[id][pID], PlayerInfo[id][pAccID], SilahAdi(weaponid), ammo, ReturnDate());
		// 	PlayerInfo[id][pSilahSistemi] = 1;
		// 	AC_GivePlayerWeapon(id, weaponid, ammo);
		// }
		// else
		// {
		// 	new xweaponid;

		// 	for(new j; j < rows; j++)
		// 	{
		// 		cache_get_value_int(j, "weaponid", xweaponid);
		// 		if(weaponid == xweaponid)break;
		// 	}

		// 	if(weaponid == xweaponid) return SendErrorMessage(playerid, "Karþýdaki kullanýcýnýn üzerinde ayný silahtan var, bunu yapamazsýnýz."), cache_delete(veri);
		// 	if(SilahSlotBul(weaponid) == SilahSlotBul(xweaponid)) return SendErrorMessage(playerid, "Karþýdaki kullanýcýnýn üzerinde ayný tip silahtan var, bunu yapamazsýnýz."), cache_delete(veri);

		// 	mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapons (owner, weaponid, ammo, status, admin) VALUES ('%d', '%d', '%d', '%d', '%d')", PlayerInfo[id][pID], weaponid, ammo, 0, PlayerInfo[playerid][pID]);
		// 	mysql_query(dbHandle, queryx);

		// 	PlayerInfo[id][pSilahSistemi] = 1;
		// 	AC_GivePlayerWeapon(id, weaponid, ammo);
		// 	SendClientMessageEx(playerid, COLOR_WHITE, "%s adlý oyuncuya {80F5B1}%s (Mermi: %d){FFFFFF} verdin.", GetNameEx(id), SilahAdi(weaponid), ammo);
		// 	SendClientMessageEx(id, COLOR_WHITE, "%s adlý yetkili sana {80F5B1}%s (Mermi: %d){FFFFFF} verdi.", GetNameEx(id), SilahAdi(weaponid), ammo);
		// 	Log_Kaydet("adminLog.txt", "[/asilah ver] %s (C_ID: %d | A_ID: %d), %s (C_ID: %d | A_ID: %d) adli oyuncuya %s (Mermi: %d) verdi. [Tarih: %s]", PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetNameEx(id), PlayerInfo[id][pID], PlayerInfo[id][pAccID], SilahAdi(weaponid), ammo, ReturnDate());
		// }
		// cache_delete(veri);
	}
	else if(!strcmp(option, "temizle", true))
	{
		if(id < 0) return SendSyntaxMessage(playerid, "/asilah temizle (Oyuncu ID)");
		if(IsPlayerConnected(id) && pTemp[id][pLogged]) SilahElkoyFonksiyon(playerid, id, 2);
		else SendErrorMessage(playerid, "Hatalý ID girdiniz.");
	}
	else if(!strcmp(option, "sil", true))
	{
		if(id <= 0) return SendSyntaxMessage(playerid, "/asilah sil (Silah SQLID)");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE id = '%d'", id);
		new Cache:veri = mysql_query(dbHandle, queryx, true);

		new rows;
		cache_get_row_count(rows);

		if(!rows) SendErrorMessage(playerid, "%d nolu silah veritabanýnda bulunamadý.", id);
		else
		{
			new status, owner, weapontype;
			cache_get_value_name_int(0, "status", status);
			cache_get_value_name_int(0, "owner", owner);
			cache_get_value_name_int(0, "weaponid", weapontype);

			mysql_format(dbHandle, queryx, sizeof(queryx), "UPDATE weapons SET status = '5' WHERE id = '%d'", id);
			mysql_query(dbHandle, queryx);

			mysql_format(dbHandle, queryx, sizeof(queryx), "INSERT INTO weapon_logs (sqlid, playerid, targetid, log, created_at) VALUES ('%d', '%d', '%d', '%e', NOW())", id, PlayerInfo[playerid][pID], -1, "silaha el koyuldu");
			mysql_tquery(dbHandle, queryx);

			SendServerMessage(playerid, "%d nolu silaha yönetici müdahalesi uyguladýnýz.", id);
			Log_Kaydet("adminLog.txt", "[/asilah sil] %s, %d ID'li silaha yonetici mudahalesi uyguladi. [Tarih: %s]", PlayerInfo[playerid][pUsername], id, ReturnDate());

			if(status == 0)
			{
				foreach(new i : Player) if(pTemp[i][pLogged] && PlayerInfo[i][pID] == owner)
				 {
					AC_ResetPlayerWeapons(i);
					SetTimerEx("OnPlayerSetData", 1000, false, "d", i);
					SendErrorMessage(i, "%s silahýn %s adlý yetkili tarafýndan silindi.", GetWeaponNameEx(weapontype), PlayerInfo[playerid][pUsername]);
					SendAdmMessage("AdmCmd: %s %s isimli oyuncunun %s(%d) silahýný sildi.", PlayerInfo[playerid][pUsername], GetNameEx(i), GetWeaponNameEx(weapontype), id);
					break;
				}
			}
		}
		cache_delete(veri);
	}
	else if(!strcmp(option, "duzenle", true))
	{
		if(PlayerInfo[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Bu komut sadece Game Admin 5 ve üstü yetkililer tarafýndan kullanýlabilir.");
		if(id <= 0)return SendSyntaxMessage(playerid, "/asilah duzenle (Silah SQLID)");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE id = '%d'", id);
		new Cache:veri = mysql_query(dbHandle, queryx, true);

		new rows;
		cache_get_row_count(rows);

		if(!rows) SendErrorMessage(playerid, "%d nolu silah veritabanýnda bulunamadý.", id);
		else
		{
			new ownerid, xweaponid, xammo, status, omur;
			cache_get_value_int(0, "owner", ownerid);
			cache_get_value_int(0, "weaponid", xweaponid);
			cache_get_value_int(0, "ammo", xammo);
			cache_get_value_int(0, "status", status);
			cache_get_value_int(0, "omur", omur);

			SetPVarInt(playerid, "aSilahSQLID", id);
			SetPVarInt(playerid, "aSilahSahip", ownerid);
			SetPVarInt(playerid, "aSilahID", xweaponid);
			SetPVarInt(playerid, "aSilahMermi", xammo);
			SetPVarInt(playerid, "aSilahDurum", status);
			SetPVarInt(playerid, "aSilahOmur", omur);

			Dialog_Show(playerid, aSilahDuzenle, DIALOG_STYLE_LIST, "Silah Düzenleme Menüsü", "Mermi Sayýsýný Düzenle\nSahibi Düzenle\nDurumu Düzenle\nSilah Ömrünü Düzenle", ">>", "<<");
		}
		cache_delete(veri);
	}
	else if(!strcmp(option, "kontrol", true))
	{
		if(id < 0) return SendSyntaxMessage(playerid, "/asilah kontrol (Oyuncu ID) || //osilahkontrol (Karakter adý)");

		if(IsPlayerConnected(id) && pTemp[id][pLogged])
			SilahKontrolEt(playerid, id, 0);
	}
	else if(!strcmp(option, "id", true))
	{
		if(id <= 0) return SendSyntaxMessage(playerid, "/asilah id (Silah SQLID)");

		mysql_format(dbHandle, queryx, sizeof(queryx), "SELECT * FROM weapons WHERE id = '%d'", id);
		new Cache:veri = mysql_query(dbHandle, queryx, true);

		new rows;
		cache_get_row_count(rows);

		if(!rows) SendErrorMessage(playerid, "%d nolu silah veritabanýnda bulunamadý.", id);
		else
		{
			new ownerid, mweaponid, mammo, status, house, vehicle, biz, olusumid, idstr[6], statusstr[24], bm, sistemdenalan, admin;

			cache_get_value_int(0, "owner", ownerid);
			cache_get_value_int(0, "weaponid", mweaponid);
			cache_get_value_int(0, "ammo", mammo);
			cache_get_value_int(0, "status", status);
			cache_get_value_int(0, "house", house);
			cache_get_value_int(0, "vehicle", vehicle);
			cache_get_value_int(0, "biz", biz);
			cache_get_value_int(0, "faction_id", olusumid);
			cache_get_value_int(0, "bm", bm);
			cache_get_value_int(0, "sistemdenalan", sistemdenalan);
			cache_get_value_int(0, "admin", admin);

			if(id < 1000) format(idstr, 6, "0%d", id);
			else if(id < 100) format(idstr, 6, "00%d", id);
			else if(id < 10) format(idstr, 6, "000%d", id);

			switch(status)
			{
				case 0: format(statusstr, 24, "Üzerinde");
				case 1: format(statusstr, 24, "Evde (%d)", house);
				case 2: format(statusstr, 24, "Araçta (%d)", vehicle);
				case 3: format(statusstr, 24, "Ýþletmede (%d)", biz);
				case 4: format(statusstr, 24, "Polis Zimmeti");
				case 5: format(statusstr, 24, "Yönetici Müdahalesi");
				case 6: format(statusstr, 24, "Geri Ödeme Yapýlmýþ");
				case 7: format(statusstr, 24, "Birlik kasasýnda (%d)", olusumid);
			}

			SendClientMessageEx(playerid, COLOR_GREY, "Sistemden Alan: %s, Blackmarket ID: %d, Oluþturan Admin: %s", GetNameEx(sistemdenalan), bm, GetNameEx(admin));

			SendClientMessageEx(playerid, COLOR_GREY, "ID[%s] - Sahip[%s] - Silah[%s] - Mermi[%d] - Durum[%s] - Ev[%d] - Araç[%d]", idstr, GetNameEx(ownerid), GetWeaponNameEx(mweaponid), mammo, statusstr, house, vehicle);
		}
		cache_delete(veri);
	}
	else SendSyntaxMessage(playerid, "/asilah <ver/sil/temizle/duzenle/kontrol/id/sifirla> || /osilahkontrol (Karakter adý)");
	return 1;
}


/* Çadýr sistemi */
stock CadirID(playerid)
{
	for (new i; i<MAX_CADIR; i++) if (CadirData[i][cadirExists] == true && CadirData[i][cadirSahip] == playerid)
	{
	    return i;
	}
	return -1;
}
stock Cadir_Yakin(playerid)
{
	for (new i; i<MAX_CADIR; i++) if (CadirData[i][cadirExists] == true)
	{
	    if (IsPlayerInRangeOfPoint(playerid, 5.0, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2])) return i;
	}
	return -1;
}
stock Cadir_Sil(playerid)
{
	for (new i; i<MAX_CADIR; i++) if (CadirData[i][cadirExists] == true && CadirData[i][cadirSahip] == playerid)
	{
	    CadirData[i][cadirExists] = false;
	    CadirData[i][cadirSahip] = -1;
		CadirData[i][cadirKilit] = true;
	    CadirData[i][cadirPos][0] = 0.0;
	    CadirData[i][cadirPos][1] = 0.0;
	    CadirData[i][cadirPos][2] = 0.0;
	    DestroyDynamicObject(CadirData[i][cadirObject]);
	    DestroyDynamic3DTextLabel(CadirData[i][cadirText]);
	    break;
	}
	return 1;
}
stock Cadir_Kur(playerid)
{
	for (new i; i<MAX_CADIR; i++) if (CadirData[i][cadirExists] == false)
	{
	    new Float:angle;
	    CadirData[i][cadirExists] = true;
	    CadirData[i][cadirSahip] = playerid;
		CadirData[i][cadirKilit] = false;
	    GetPlayerPos(playerid, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2]);
	    GetPlayerFacingAngle(playerid, angle);
	    CadirData[i][cadirPos][0] += (5 * floatsin(-angle, degrees));
    	CadirData[i][cadirPos][1] += (5 * floatcos(-angle, degrees));
    	CadirData[i][cadirPos][2] -= 1.0;
	    CadirData[i][cadirObject] = CreateDynamicObject(3243, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	    new str[80];
	    format(str, sizeof(str), "{bcbcbc}(( Çadýr (%d) ))\n{afafaf}« Yerleþtiren: %s(%d) »", i, GetNameEx(playerid), playerid);
	    CadirData[i][cadirText] = CreateDynamic3DTextLabel(str, -1, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2]+1.2, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	    return 1;
	}
	return 0;
}
stock IsPlayerInLosAngeles(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (x >= 44.60 && y >= -2892.90 && x <= 2997.00 && y <= -768.00) return 1;
    else return 0;
}

CMD:cadir(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Þu anda çadýr komutlarýna eriþemezsiniz.");

	new type[24], string[128];
    if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    SendSyntaxMessage(playerid, "/cadir [seçenek]");
	    SendClientMessageEx(playerid, COLOR_SERVER2, "[SEÇENEKLER]:{DADADA} kur / bul / topla / kilit / gir / cik");
		if(OyuncuBirlik(playerid) == FACTION_POLICE) SendClientMessageEx(playerid, COLOR_SERVER2, "BIRLIK(PD):{DADADA} kilitkir");
		if(PlayerInfo[playerid][pAdmin] > 1) SendClientMessageEx(playerid, COLOR_SERVER2,"YETKILI:{DADADA} admgir / admcik / admsil");
	    return 1;
	}
	if (!strcmp(type, "kur", true))
	{
	    if (CadirID(playerid) != -1) return SendErrorMessage(playerid, "Zaten bir çadýr kurmuþsunuz!");
	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return SendErrorMessage(playerid, "Ýnterior deðeriniz veya Virtualworld deðeriniz 0'dan yüksek, çadýr koyamazsýnýz.");
	    if (IsPlayerInLosAngeles(playerid)) return SendErrorMessage(playerid, "Þehir içerisinde çadýr kuramazsýnýz.");

	    Cadir_Kur(playerid);
	    SendSyntaxMessage(playerid, "Çadýrýnýz oluþturuldu. Çadýra girmek için (/cadir gir) komutunu kullanýn.");
	}
	if (!strcmp(type, "topla", true))
	{
	    new id = CadirID(playerid);
        if (id == -1) return SendErrorMessage(playerid, "Çadýr kurmamýþsýnýz.");
        if (!IsPlayerInRangeOfPoint(playerid, 5.0, CadirData[id][cadirPos][0], CadirData[id][cadirPos][1], CadirData[id][cadirPos][2])) return SendErrorMessage(playerid, "Çadýra yeterince yakýn deðilsiniz.");
        foreach (new i:Player) if (PlayerInfo[i][pCadir] == id)
        {
            SetPlayerPosEx(i, CadirData[id][cadirPos][0], CadirData[id][cadirPos][1], CadirData[id][cadirPos][2]);
            SetPlayerInterior(i, 0);
            SetPlayerVirtualWorld(i, 0);
            PlayerInfo[i][pCadir] = -1;
        }
        Cadir_Sil(playerid);
        SendSyntaxMessage(playerid, "Çadýr kaldýrýldý.");
	}
	if (!strcmp(type, "bul", true))
	{
	    new id = CadirID(playerid);
        if (id == -1) return SendErrorMessage(playerid, "Çadýr kurmamýþsýnýz.");
        if (IsPlayerInRangeOfPoint(playerid, 5.0, CadirData[id][cadirPos][0], CadirData[id][cadirPos][1], CadirData[id][cadirPos][2])) return SendErrorMessage(playerid, "Çadýrýnýza yakýnsýnýz.");
		SetPlayerCheckpoint(playerid,CadirData[id][cadirPos][0], CadirData[id][cadirPos][1], CadirData[id][cadirPos][2], 10.0);
        SendSyntaxMessage(playerid, "Çadýrýnýz haritanýzda iþaretlendi.");
	}
	if (!strcmp(type, "kilit", true))
	{
		if (PlayerInfo[playerid][pCadir] == -1) return SendErrorMessage(playerid, "Çadýrýn içinde olmalýsýnýz.");

		new id = PlayerInfo[playerid][pCadir];
		if(CadirData[id][cadirKilit] == true) {
			CadirData[id][cadirKilit] = false;
			SendSyntaxMessage(playerid,"Çadýrýn kilidi açýldý.");
			return 1;
		}
		if(CadirData[id][cadirKilit] == false) {
			CadirData[id][cadirKilit] = true;
			SendSyntaxMessage(playerid,"Çadýrýnýz kilitlendi.");
			return 1;
		}
		return 1;
	}
	if (!strcmp(type, "cik", true))
	{
		if (PlayerInfo[playerid][pCadir] == -1) return SendErrorMessage(playerid, "Çadýrýn içinde olmalýsýnýz.");

		new id = PlayerInfo[playerid][pCadir];
		if(CadirData[id][cadirKilit] == true) return SendErrorMessage(playerid,"Çadýr kilitli olduðu için çýkamazsýnýz.");
		SetPlayerPosEx(playerid, CadirData[id][cadirPos][0]+2, CadirData[id][cadirPos][1]+2, CadirData[id][cadirPos][2]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pCadir] = -1;
	}
	if (!strcmp(type, "gir", true))
	{
		new id = Cadir_Yakin(playerid);
		if (id == -1) return SendErrorMessage(playerid, "Çadýra yakýn olmalýsýn.");
		if(CadirData[id][cadirKilit] == true) return SendErrorMessage(playerid,"Çadýr kilitli olduðu için giremezsin.");
		SetPlayerPosEx(playerid, -822.0929,2615.8479,76.8869);
		SetPlayerFacingAngle(playerid, 359.4133);
		SetPlayerInterior(playerid, 77);
		SetPlayerVirtualWorld(playerid, id+18138);
		PlayerInfo[playerid][pCadir] = id;
		SendSyntaxMessage(playerid, "Çadýra girdiniz çadýrdan çýkmak için (/cadir cik) komutunu kullanabilirsiniz.");
	}
	if (!strcmp(type, "kilitkir", true))
	{
		if(OyuncuBirlik(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "Çadýr kilidini sadece polisler kýrabilir.");
		if (!PlayerInfo[playerid][pOnDuty])			return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýn. ");
		new id = Cadir_Yakin(playerid);
		if (id == -1) return SendErrorMessage(playerid, "Çadýra yakýn olmalýsýn.");
		if(CadirData[id][cadirKilit] == false) return SendErrorMessage(playerid,"Çadýr kilitli deðil.");
		CadirData[id][cadirKilit] = false;
		ClearAnimations(playerid);
		SendSyntaxMessage(playerid, "Çadýrýn kilidini kýrdýnýz!");
	}
	if (!strcmp(type, "admgir", true))
	{
		new id = Cadir_Yakin(playerid);
		if (id == -1) return SendErrorMessage(playerid, "Çadýra yakýn olmalýsýn.");
		if (PlayerInfo[playerid][pAdmin] < 1) return SendErrorMessage(playerid, "Bunu sadece yetkililer yapabilir.");
		SetPlayerPosEx(playerid, -822.0929,2615.8479,76.8869);
		SetPlayerFacingAngle(playerid, 359.4133);
		SetPlayerInterior(playerid, 77);
		SetPlayerVirtualWorld(playerid, id+18138);
		PlayerInfo[playerid][pCadir] = id;
		SendSyntaxMessage(playerid, "Çadýra girdiniz.");
	}
	if (!strcmp(type, "admcik", true))
	{
		if (PlayerInfo[playerid][pCadir] == -1) return SendErrorMessage(playerid, "Çadýrýn içinde olmalýsýnýz.");
		if (PlayerInfo[playerid][pAdmin] < 1) return SendErrorMessage(playerid, "Bunu sadece yetkililer yapabilir.");
		new id = PlayerInfo[playerid][pCadir];
		SetPlayerPosEx(playerid, CadirData[id][cadirPos][0]+2, CadirData[id][cadirPos][1]+2, CadirData[id][cadirPos][2]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pCadir] = -1;
	}
	if (!strcmp(type, "admsil", true))
	{
		if (PlayerInfo[playerid][pAdmin] < 1) return SendErrorMessage(playerid, "Bunu sadece yetkililer yapabilir.");
		new id = Cadir_Yakin(playerid);
		if (id == -1) return SendErrorMessage(playerid, "Çadýra yakýn olmalýsýn.");
        foreach (new i:Player) if (PlayerInfo[i][pCadir] == id)
        {
            SetPlayerPosEx(i, CadirData[id][cadirPos][0], CadirData[id][cadirPos][1], CadirData[id][cadirPos][2]);
            SetPlayerInterior(i, 0);
            SetPlayerVirtualWorld(i, 0);
			SendSyntaxMessage(i,"Çadýr yetkili tarafýndan silindi dýþarýya çýkartýldýnýz.");
            PlayerInfo[i][pCadir] = -1;
        }
        Cadir_Sil(playerid);
        SendSyntaxMessage(playerid, "Çadýr silindi.");
	}
	return 1;
}

/* Aksesuar sistemi */

forward OnPlayerLoadAttach(playerid);
forward OnAttachInsert(playerid, slot, model, bone, name[]);

public OnPlayerLoadAttach(playerid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACH; i++)
	{
		AttachInfo[playerid][i][aID] = 0;
		AttachInfo[playerid][i][aUsed] = 0;
	}

	if (!cache_num_rows()) return 1;

    for(new i = 0; i < cache_num_rows(); i++)
	{
     	if (i > MAX_PLAYER_ATTACH) break;

	    cache_get_value_int(i, "id", AttachInfo[playerid][i][aID]);
	    cache_get_value(i, "name", AttachInfo[playerid][i][aName], 32);
		cache_get_value_int(i, "model", AttachInfo[playerid][i][aModel]);
		cache_get_value_int(i, "bone", AttachInfo[playerid][i][aBone]);
		cache_get_value_float(i, "offestx", AttachInfo[playerid][i][aOffsetX]);
		cache_get_value_float(i, "offesty", AttachInfo[playerid][i][aOffsetY]);
		cache_get_value_float(i, "offestz", AttachInfo[playerid][i][aOffsetZ]);
		cache_get_value_float(i, "rotx", AttachInfo[playerid][i][aRotX]);
		cache_get_value_float(i, "roty", AttachInfo[playerid][i][aRotY]);
		cache_get_value_float(i, "rotz", AttachInfo[playerid][i][aRotZ]);
		cache_get_value_float(i, "scalex", AttachInfo[playerid][i][aScaleX]);
		cache_get_value_float(i, "scaley", AttachInfo[playerid][i][aScaleY]);
		cache_get_value_float(i, "scalez", AttachInfo[playerid][i][aScaleZ]);
		cache_get_value_int(i, "used", AttachInfo[playerid][i][aUsed]);
	}
	return 1;
}

public OnAttachInsert(playerid, slot, model, bone, name[])
{
	AttachInfo[playerid][slot][aID] = cache_insert_id();
	AttachInfo[playerid][slot][aModel] = model;
	AttachInfo[playerid][slot][aBone] = bone;
	format(AttachInfo[playerid][slot][aName], 128, "%s", name);
	AttachInfo[playerid][slot][aUsed] = 1;
	return 1;
}

InsertPlayerAttach(playerid, slot, model, bone, name[])
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `player_attach` (userid, name, model, bone) VALUES (%i, '%s', %i, %i)", PlayerInfo[playerid][pID], SQL_ReturnEscaped(name), model, bone);
	mysql_tquery(dbHandle, query, "OnAttachInsert", "iiiis", playerid, slot, model, bone, name);
	return 1;
}

UpdatePlayerAttach(playerid, slot, Float:X, Float:Y, Float:Z, Float:RX, Float:RY, Float:RZ, Float:SC, Float:SY, Float:SZ, bone)
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `player_attach` SET `offestx`=%f,`offesty`=%f,`offestz`=%f,`rotx`=%f,`roty`=%f,`rotz`=%f,`scalex`=%f,`scaley`=%f,`scalez`=%f,`used`=%i,`bone`=%i WHERE `id` = %i", X, Y, Z, RX, RY, RZ, SC, SY, SZ, AttachInfo[playerid][slot][aUsed], bone, AttachInfo[playerid][slot][aID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

LoadPlayerAttach(playerid)
{
    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `player_attach` WHERE `userid` = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "OnPlayerLoadAttach", "i", playerid);
	return 1;
}

RemovePlayerAttachFromSlot(playerid, slot)
{
    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `player_attach` WHERE `id` = %i", AttachInfo[playerid][slot][aID]);
	mysql_tquery(dbHandle, query);

	AttachInfo[playerid][slot][aID] = 0;
	AttachInfo[playerid][slot][aName] = EOS;
	AttachInfo[playerid][slot][aModel] = 0;
	AttachInfo[playerid][slot][aBone] = 0;
	AttachInfo[playerid][slot][aOffsetX] = 0.0;
	AttachInfo[playerid][slot][aOffsetY] = 0.0;
	AttachInfo[playerid][slot][aOffsetZ] = 0.0;
	AttachInfo[playerid][slot][aRotX] = 0.0;
	AttachInfo[playerid][slot][aRotY] = 0.0;
	AttachInfo[playerid][slot][aRotZ] = 0.0;
	AttachInfo[playerid][slot][aScaleX] = 0.0;
	AttachInfo[playerid][slot][aScaleY] = 0.0;
	AttachInfo[playerid][slot][aScaleZ] = 0.0;
	AttachInfo[playerid][slot][aUsed] = 0;

	if (IsPlayerAttachedObjectSlotUsed(playerid, slot))	RemovePlayerAttachedObject(playerid, slot);
	return 1;
}

Save_AttachWeapon(playerid, i)
{
	new query[256];

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `weap_%i_bone` = %i, `weap_%i_x` = %f, `weap_%i_y` = %f, `weap_%i_z` = %f, `weap_%i_rx` = %f, `weap_%i_ry` = %f, `weap_%i_rz` = %f WHERE `id` = %i",
	i, PlayerInfo[playerid][pWeaponBone][i], i, PlayerInfo[playerid][pWeaponX][i], i, PlayerInfo[playerid][pWeaponY][i], i, PlayerInfo[playerid][pWeaponZ][i], i, PlayerInfo[playerid][pWeaponRX][i], i, PlayerInfo[playerid][pWeaponRY][i],
	i, PlayerInfo[playerid][pWeaponRZ][i], PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

GetNextToySlot(playerid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACH; i++)
	{
		if (AttachInfo[playerid][i][aID] == 0) return i;
	}
	return -1;
}

Dialog:MODEL_SELECTION_FA(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionLegal(faction))	return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru / saðlýk görevlisi / hükümet olmalýsýnýz.");

	Dialog_Show(playerid, SelectBone, DIALOG_STYLE_LIST, "Vücut Bölgeleri","- Deðiþmeden Býrak\n1: Arka\n2: Kafa\n3: Sol Omuz\n4: Sað Omuz\n5: Sol Kol\n6:Sað Kol\n7: Sol Uyluk\n8: Sað Uyluk\n9: Sol Bacak\n10: Sað Bacak\n11: Sað Baldýr\n12: Sol Baldýr\n13: Sol Ön Kol\n14: Sað Ön Kol\n15: Sol Köprücük Kemiði\n16: Sol Köprücük Kemiði\n17: Boyun\n18: Çene","Seç","Ýptal");
	SetPVarInt(playerid, #select_attach, listitem);
	return 1;
}//î

Dialog:MODEL_SELECTION_OBJATT(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new
		vehicle = GetPVarInt(playerid, #veh_editor),
		carslot = GetPVarInt(playerid, #veh_slot),
		attobj = car_attach[listitem],

		Float:x,
		Float:y,
		Float:z
	;

	GetVehiclePos(vehicle, x, y, z);
	VehicleInfo[vehicle][carAttach][carslot] = CreateDynamicObject(attobj, x, y, z+2, 0.0, 0.0, 0.0);

	SetPVarInt(playerid, #veh_obj, attobj);
	SetPVarInt(playerid, "Vehicle:AttEdit", 0);

	EditDynamicObject(playerid, VehicleInfo[vehicle][carAttach][carslot]);

	if (IsPlayerInAnyVehicle(playerid))	InfoMSG(playerid, "kamerayi hareket ettirmek icin \"~y~W~w~\"~n~tuslarini kullanabilirsiniz", 5);
	else								InfoMSG(playerid, "kamerayi hareket ettirmek icin \"~y~SPACE~w~\",~n~tuslarini kullanabilirsiniz", 5);

	return 1;
}

Attach_EditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if (GetPVarInt(playerid, #edit_attach) == 1)
	{
	    DeletePVar(playerid, #edit_attach);

	    if (index < 0 || index > 4)
	        return SendErrorMessage(playerid, "Aksesuarlar/kýyafetler düzenlenirken hata oluþtu.");

		if (response)
		{
		    AttachInfo[playerid][index][aBone] = boneid;
			AttachInfo[playerid][index][aOffsetX] = fOffsetX;
			AttachInfo[playerid][index][aOffsetY] = fOffsetY;
			AttachInfo[playerid][index][aOffsetZ] = fOffsetZ;
			AttachInfo[playerid][index][aRotX] = fRotX;
			AttachInfo[playerid][index][aRotY] = fRotY;
			AttachInfo[playerid][index][aRotZ] = fRotZ;
			AttachInfo[playerid][index][aScaleX] = fScaleX;
			AttachInfo[playerid][index][aScaleY] = fScaleY;
			AttachInfo[playerid][index][aScaleZ] = fScaleZ;

			UpdatePlayerAttach(playerid, index, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, boneid);

			RemovePlayerAttachedObject(playerid, index);
			SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
		}
		else
		{
			RemovePlayerAttachedObject(playerid, index);
			SetPlayerAttachedObject(playerid, index, modelid, boneid, AttachInfo[playerid][index][aOffsetX], AttachInfo[playerid][index][aOffsetY], AttachInfo[playerid][index][aOffsetZ], AttachInfo[playerid][index][aRotX], AttachInfo[playerid][index][aRotY], AttachInfo[playerid][index][aRotZ], AttachInfo[playerid][index][aScaleX], AttachInfo[playerid][index][aScaleY], AttachInfo[playerid][index][aScaleZ]);
		}
		pc_cmd_aksesuar(playerid, "");
		return 1;
	}

	if (GetPVarInt(playerid, #buy_attach) != 0)
	{
	    new price = GetPVarInt(playerid, #buy_attach);
 		DeletePVar(playerid, #buy_attach);

	    if (index < 0 || index > 4)
	        return SendErrorMessage(playerid, "Aksesuarlar/kýyafetler satýn alýnýrken hata oluþtu.");

		if (response && GetCash(playerid) >= price)
		{
			AttachInfo[playerid][index][aBone] = boneid;
			AttachInfo[playerid][index][aOffsetX] = fOffsetX;
			AttachInfo[playerid][index][aOffsetY] = fOffsetY;
			AttachInfo[playerid][index][aOffsetZ] = fOffsetZ;
			AttachInfo[playerid][index][aRotX] = fRotX;
			AttachInfo[playerid][index][aRotY] = fRotY;
			AttachInfo[playerid][index][aRotZ] = fRotZ;
			AttachInfo[playerid][index][aScaleX] = fScaleX;
			AttachInfo[playerid][index][aScaleY] = fScaleY;
			AttachInfo[playerid][index][aScaleZ] = fScaleZ;

			UpdatePlayerAttach(playerid, index, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, boneid);

			AttachInfo[playerid][index][aUsed] = 1;

   			RemovePlayerAttachedObject(playerid, index);
   			SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);

			GiveCash(playerid, -price);
			InfoMSG(playerid, "~w~Yeni bir urun aldiniz", 5);
			return 1;
		}
		else
		{
			RemovePlayerAttachFromSlot(playerid, index);
			InfoMSG(playerid, "~w~Satin almayi iptal ettiniz", 5);
		} //î
	}
    return 1;
}

Attach_OnPlayerKeyStateChange(playerid, newkeys)
{
	if (HOLDING(KEY_SECONDARY_ATTACK) && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) && pTemp[playerid][pPizzaBoy])
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		return 1;
	}

    if (HOLDING(KEY_SECONDARY_ATTACK) && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) && GetPVarInt(playerid, #use_ganja))
	{
	    DeletePVar(playerid, #use_ganja);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		return 1;
	}
	return 1;
}

Dialog:Clothing(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new string[128], count;

	for(new i = 0; i < MAX_PLAYER_ATTACH; i++)
	{
	    if (AttachInfo[playerid][i][aID] == 0) continue;
		if (count == listitem)
		{
		    listitem = i;
		    break;
		}
		count++;
	}

	SetPVarInt(playerid, #edit_slot_attach, listitem);

	format(string, sizeof(string), "%s\nAksesuar Düzenle\nAksesuar Sil", (AttachInfo[playerid][listitem][aUsed]) ? ("Aksesuarý Çýkart") : ("Aksesuarý Tak"));
	Dialog_Show(playerid, Clothing1, DIALOG_STYLE_LIST, AttachInfo[playerid][listitem][aName], string, "Seç", "Kapat");
	return 1;
}

Dialog:Clothing1(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

    new slot = GetPVarInt(playerid, #edit_slot_attach);

	switch(listitem)
	{
		case 0:
		{
			if (IsPlayerAttachedObjectSlotUsed(playerid, slot))
			{
				InfoMSG(playerid, "~w~Aksesuar ~r~cikartildi", 5);
				RemovePlayerAttachedObject(playerid, slot);
				AttachInfo[playerid][slot][aUsed] = 0;

				new query[256];
				mysql_format(dbHandle, query, sizeof(query), "UPDATE `player_attach` SET `used`=0 WHERE `id` = %i", AttachInfo[playerid][slot][aID]);
				mysql_tquery(dbHandle, query);
			}
			else
			{
				InfoMSG(playerid, "~w~Aksesuar ~g~takildi", 5);
				AttachInfo[playerid][slot][aUsed] = 1;
				SetPlayerAttachedObject(playerid, slot, AttachInfo[playerid][slot][aModel], AttachInfo[playerid][slot][aBone], AttachInfo[playerid][slot][aOffsetX], AttachInfo[playerid][slot][aOffsetY], AttachInfo[playerid][slot][aOffsetZ], AttachInfo[playerid][slot][aRotX], AttachInfo[playerid][slot][aRotY], AttachInfo[playerid][slot][aRotZ], AttachInfo[playerid][slot][aScaleX], AttachInfo[playerid][slot][aScaleY], AttachInfo[playerid][slot][aScaleZ]);

                new query[256];
				mysql_format(dbHandle, query, sizeof(query), "UPDATE `player_attach` SET `used`=1 WHERE `id` = %i", AttachInfo[playerid][slot][aID]);
				mysql_tquery(dbHandle, query);
			}
			pc_cmd_aksesuar(playerid, "");
		}
		case 1:
		{
			if (!IsPlayerAttachedObjectSlotUsed(playerid, slot))		return SendErrorMessage(playerid, "Belirtilen slota bir obje koyulmamýþ.");
			if (GetPVarInt(playerid, #edit_attach) == 1)				return SendErrorMessage(playerid, "Zaten bir obje düzenliyorsunuz, yeni bir düzenleme yapmak için aktif olaný iptal ediniz.");

            Dialog_Show(playerid, SelectEditBone, DIALOG_STYLE_LIST, "Vücut Bölgeleri","- Deðiþmeden Býrak\n1: Arka\n2: Kafa\n3: Sol Omuz\n4: Sað Omuz\n5: Sol Kol\n6:Sað Kol\n7: Sol Uyluk\n8: Sað Uyluk\n9: Sol Bacak\n10: Sað Bacak\n11: Sað Baldýr\n12: Sol Baldýr\n13: Sol Ön Kol\n14: Sað Ön Kol\n15: Sol Köprücük Kemiði\n16: Sol Köprücük Kemiði\n17: Boyun\n18: Çene","Seç","Ýptal");
		}
		case 2:
		{
			InfoMSG(playerid, "~w~Aksesuar ~r~cikartildi", 5);
			RemovePlayerAttachFromSlot(playerid, slot);
		}
	}
	return 1;
}

Dialog:ClothesCategory(playerid, response, listitem, inputtext[])
{
	new str[1024];

	if (!response)	return 1;

	switch(listitem)
	{
		case 0:
		{
			for(new x;x<sizeof(HatsInfo);x++)
			{
				format(str, sizeof(str), "%s%s - $%i\n", str, HatsInfo[x][toyName], HatsInfo[x][toyPrice]);
			}
			Dialog_Show(playerid, HatsDialog, DIALOG_STYLE_LIST, "Ýhtiyacýnýz olan ürünü seçin", str, "Seç", "Kapat");
		}
		case 1:
		{
			for(new x;x<sizeof(GlassesInfo);x++)
			{
				format(str, sizeof(str), "%s%s - $%i\n", str, GlassesInfo[x][toyName], GlassesInfo[x][toyPrice]);
			}
			Dialog_Show(playerid, GlassesDialog, DIALOG_STYLE_LIST, "Ýhtiyacýnýz olan ürünü seçin", str, "Seç", "Kapat");
		}
		case 2:
		{
			for(new x;x<sizeof(BandanasInfo);x++)
			{
				format(str, sizeof(str), "%s%s - $%i\n", str, BandanasInfo[x][toyName], BandanasInfo[x][toyPrice]);
			}
			Dialog_Show(playerid, BandanasDialog, DIALOG_STYLE_LIST, "Ýhtiyacýnýz olan ürünü seçin", str, "Seç", "Kapat");
		}
		case 3:
		{
			for(new x;x<sizeof(HeadphonesInfo);x++)
			{
				format(str, sizeof(str), "%s%s - $%i\n", str, HeadphonesInfo[x][toyName], HeadphonesInfo[x][toyPrice]);
			}
			Dialog_Show(playerid, HeadphonesDialog, DIALOG_STYLE_LIST, "Ýhtiyacýnýz olan ürünü seçin", str, "Seç", "Kapat");
		}
	}
	return 1;
}

Dialog:SelectEditBone(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_aksesuar(playerid, "");

    new slot = GetPVarInt(playerid, #edit_slot_attach);

	if (!IsPlayerAttachedObjectSlotUsed(playerid, slot))	return SendErrorMessage(playerid, "Belirtilen slota bir obje koyulmamýþ.");
	if (GetPVarInt(playerid, #edit_attach) == 1)			return SendErrorMessage(playerid, "Zaten bir obje düzenliyorsunuz, yeni bir düzenleme yapmak için aktif olaný iptal ediniz.");

	if (listitem != 0)
	{
	    RemovePlayerAttachedObject(playerid, slot);
		SetPlayerAttachedObject(playerid, slot, AttachInfo[playerid][slot][aModel], listitem);
	}

	InfoMSG(playerid, "~w~Su an karakterin uzerindeki esyayý ~y~ duzenliyorsunuz", 5);
	SetPVarInt(playerid, #edit_attach, 1);
	EditAttachedObject(playerid, slot);
	return 1;
}

Dialog:SelectBone(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

    new faction = PlayerInfo[playerid][pFaction];

   	if (!IsFactionLegal(faction))	return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru olmalýsýnýz.");

    new i = -1;

	if ((i = GetNextToySlot(playerid)) == -1)	return SendErrorMessage(playerid, "Tüm kýyafet/aksesuar slotlarý dolu.");

    new index = GetPVarInt(playerid, #select_attach);

	if (IsFactionMedic(faction) || IsFactionFire(faction))
	{
	    SetPlayerAttachedObject(playerid, i, attach_fd_model[index], listitem+1);
		EditAttachedObject(playerid, i);
		InsertPlayerAttach(playerid, i, attach_fd_model[index], listitem+1, attach_fd_name[index]);
		SetPVarInt(playerid, #edit_faction, 1);
	}
	else if (IsFactionCity(faction))
	{
	    SetPlayerAttachedObject(playerid, i, attach_city_model[index], listitem+1);
		EditAttachedObject(playerid, i);
		InsertPlayerAttach(playerid, i, attach_city_model[index], listitem+1, attach_city_name[index]);
		SetPVarInt(playerid, #edit_faction, 1);
	}
	else
	{
		SetPlayerAttachedObject(playerid, i, attach_police_model[index], listitem+1);
		EditAttachedObject(playerid, i);
		InsertPlayerAttach(playerid, i, attach_police_model[index], listitem+1, attach_police_name[index]);
		SetPVarInt(playerid, #edit_faction, 1);
	}
	return 1;
}

Dialog:BizAttachDialog(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new string[1024];

	switch(listitem) {
        case 0: {	// Ìóçûêàëüíûå èíñòðóìåíòû
            for(new x; x < sizeof(GuitarsInfo); x++)
            {
                format(string, sizeof(string), "%s%s - $%i\n", string, GuitarsInfo[x][toyName], GuitarsInfo[x][toyPrice]);
            }
            Dialog_Show(playerid, GuitarsDialog, DIALOG_STYLE_LIST, "{FFFFFF}Bir ürün seçin", string, "Seç", "Kapat");
        }
        case 1: {	// ×àñû
            for(new x; x < sizeof(ClockInfo); x++)
            {
                format(string, sizeof(string), "%s%s - $%i\n", string, ClockInfo[x][toyName], ClockInfo[x][toyPrice]);
            }
            Dialog_Show(playerid, ClockDialog, DIALOG_STYLE_LIST, "{FFFFFF}Bir ürün seçin", string, "Seç", "Kapat");
        }
        case 2: {	// Èíñòðóìåíòû
            for(new x; x < sizeof(HardwareStore); x++)
            {
                format(string, sizeof(string), "%s%s - $%i\n", string, HardwareStore[x][toyName], HardwareStore[x][toyPrice]);
            }
            Dialog_Show(playerid, HardwareStore, DIALOG_STYLE_LIST, "{FFFFFF}Bir ürün seçin", string, "Seç", "Kapat");
        }
        case 3: {	// Ñïîðòèíâåíòàðü
            for(new x; x < sizeof(SportsInfo); x++)
            {
                format(string, sizeof(string), "%s%s - $%i\n", string, SportsInfo[x][toyName], SportsInfo[x][toyPrice]);
            }
            Dialog_Show(playerid, SportsDialog, DIALOG_STYLE_LIST, "{FFFFFF}Bir ürün seçin", string, "Satýn Al", "Kapat");
        }
        case 4: {	// Àêñåññóàðû
            Dialog_Show(playerid, ClothesCategory, DIALOG_STYLE_LIST, "{FFFFFF}Bir kategori seçin", "Þapkalar\nGözlük\nBandana\nKulaklýklar", "Seç", "Kapat");
        }
    }
	return 1;
}

Dialog:HatsDialog(playerid, response, listitem, inputtext[])
{
    if (!response)	return 1;

	new i = -1;

	if ((i = GetNextToySlot(playerid)) == -1)				return SendErrorMessage(playerid, "Tüm kýyafet/aksesuar slotlarý dolu.");
    if (GetCash(playerid) < HatsInfo[listitem][toyPrice])	return SendNotCash(playerid);

	SetPlayerAttachedObject(playerid, i, HatsInfo[listitem][toyModel], HatsInfo[listitem][toyBone], HatsInfo[listitem][toyOffestX], HatsInfo[listitem][toyOffestY], HatsInfo[listitem][toyOffestZ], HatsInfo[listitem][toyRotX],
	HatsInfo[listitem][toyRotY], HatsInfo[listitem][toyRotZ], HatsInfo[listitem][toyScaleX], HatsInfo[listitem][toyScaleY], HatsInfo[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);
	SetPVarInt(playerid, #buy_attach, HatsInfo[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, HatsInfo[listitem][toyModel], HatsInfo[listitem][toyBone], HatsInfo[listitem][toyName]);
	return 1;
}

Dialog:GlassesDialog(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new i = -1;

	if ((i = GetNextToySlot(playerid)) == -1)				return SendErrorMessage(playerid, "Tüm kýyafet/aksesuar slotlarý dolu.");
    if (GetCash(playerid) < GlassesInfo[listitem][toyPrice])	return SendNotCash(playerid);

	SetPlayerAttachedObject(playerid, i, GlassesInfo[listitem][toyModel], GlassesInfo[listitem][toyBone], GlassesInfo[listitem][toyOffestX], GlassesInfo[listitem][toyOffestY], GlassesInfo[listitem][toyOffestZ],
	GlassesInfo[listitem][toyRotX], GlassesInfo[listitem][toyRotY], GlassesInfo[listitem][toyRotZ], GlassesInfo[listitem][toyScaleX], GlassesInfo[listitem][toyScaleY], GlassesInfo[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);
	SetPVarInt(playerid, #buy_attach, GlassesInfo[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, GlassesInfo[listitem][toyModel], GlassesInfo[listitem][toyBone], GlassesInfo[listitem][toyName]);
	return 1;
}

Dialog:BandanasDialog(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new i = -1;

	if ((i = GetNextToySlot(playerid)) == -1)					return SendErrorMessage(playerid, "Tüm kýyafet/aksesuar slotlarý dolu.");
    if (GetCash(playerid) < BandanasInfo[listitem][toyPrice])	return SendNotCash(playerid);

	SetPlayerAttachedObject(playerid, i, BandanasInfo[listitem][toyModel], BandanasInfo[listitem][toyBone], BandanasInfo[listitem][toyOffestX], BandanasInfo[listitem][toyOffestY], BandanasInfo[listitem][toyOffestZ],
	BandanasInfo[listitem][toyRotX], BandanasInfo[listitem][toyRotY], BandanasInfo[listitem][toyRotZ], BandanasInfo[listitem][toyScaleX], BandanasInfo[listitem][toyScaleY], BandanasInfo[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);
	SetPVarInt(playerid, #buy_attach, BandanasInfo[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, BandanasInfo[listitem][toyModel], BandanasInfo[listitem][toyBone], BandanasInfo[listitem][toyName]);
	return 1;
}
Dialog:HeadphonesDialog(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new i = -1;

	if ((i = GetNextToySlot(playerid)) == -1)					return SendErrorMessage(playerid, "Tüm kýyafet/aksesuar slotlarý dolu.");
    if (GetCash(playerid) < HeadphonesInfo[listitem][toyPrice])	return SendNotCash(playerid);

	SetPlayerAttachedObject(playerid, i, HeadphonesInfo[listitem][toyModel], HeadphonesInfo[listitem][toyBone], HeadphonesInfo[listitem][toyOffestX], HeadphonesInfo[listitem][toyOffestY], HeadphonesInfo[listitem][toyOffestZ],
	HeadphonesInfo[listitem][toyRotX], HeadphonesInfo[listitem][toyRotY], HeadphonesInfo[listitem][toyRotZ], HeadphonesInfo[listitem][toyScaleX], HeadphonesInfo[listitem][toyScaleY], HeadphonesInfo[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);
	SetPVarInt(playerid, #buy_attach, HeadphonesInfo[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, HeadphonesInfo[listitem][toyModel], HeadphonesInfo[listitem][toyBone], HeadphonesInfo[listitem][toyName]);
	return 1;
}

Dialog:SportsDialog(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new i = -1;

	if ((i = GetNextToySlot(playerid)) == -1)				return SendErrorMessage(playerid, "Tüm kýyafet/aksesuar slotlarý dolu.");
    if (GetCash(playerid) < SportsInfo[listitem][toyPrice])	return SendNotCash(playerid);

    /*if (SportsInfo[listitem][toyModel] == 19878)
	{
	    if (GiveInvItem(playerid, 77, 1) == -1)	return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");

		SendSyntaxMessage(playerid, "Kaykay envantere eklendi.");
		return 1;
	}*/
	SetPlayerAttachedObject(playerid, i, SportsInfo[listitem][toyModel], SportsInfo[listitem][toyBone], SportsInfo[listitem][toyOffestX], SportsInfo[listitem][toyOffestY], SportsInfo[listitem][toyOffestZ], SportsInfo[listitem][toyRotX],
	SportsInfo[listitem][toyRotY], SportsInfo[listitem][toyRotZ], SportsInfo[listitem][toyScaleX], SportsInfo[listitem][toyScaleY], SportsInfo[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);
	SetPVarInt(playerid, #buy_attach, SportsInfo[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, SportsInfo[listitem][toyModel], SportsInfo[listitem][toyBone], SportsInfo[listitem][toyName]);
	return 1;
}


Dialog:ClockDialog(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new i = -1;

	if ((i = GetNextToySlot(playerid)) == -1)				return SendErrorMessage(playerid, "Tüm kýyafet/aksesuar slotlarý dolu.");
    if (GetCash(playerid) < ClockInfo[listitem][toyPrice])	return SendNotCash(playerid);

	SetPlayerAttachedObject(playerid, i, ClockInfo[listitem][toyModel], ClockInfo[listitem][toyBone], ClockInfo[listitem][toyOffestX], ClockInfo[listitem][toyOffestY], ClockInfo[listitem][toyOffestZ], ClockInfo[listitem][toyRotX],
	ClockInfo[listitem][toyRotY], ClockInfo[listitem][toyRotZ], ClockInfo[listitem][toyScaleX], ClockInfo[listitem][toyScaleY], ClockInfo[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);
	SetPVarInt(playerid, #buy_attach, ClockInfo[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, ClockInfo[listitem][toyModel], ClockInfo[listitem][toyBone], ClockInfo[listitem][toyName]);
	return 1;
}


Dialog:BarberDialog(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new i = -1;

	if ((i = GetNextToySlot(playerid)) == -1)				return SendErrorMessage(playerid, "Tüm kýyafet/aksesuar slotlarý dolu.");
    if (GetCash(playerid) < BarberShop[listitem][toyPrice])	return SendNotCash(playerid);

	SetPlayerAttachedObject(playerid, i, BarberShop[listitem][toyModel], BarberShop[listitem][toyBone], BarberShop[listitem][toyOffestX], BarberShop[listitem][toyOffestY], BarberShop[listitem][toyOffestZ], BarberShop[listitem][toyRotX],
	BarberShop[listitem][toyRotY], BarberShop[listitem][toyRotZ], BarberShop[listitem][toyScaleX], BarberShop[listitem][toyScaleY], BarberShop[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);
	SetPVarInt(playerid, #buy_attach, BarberShop[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, BarberShop[listitem][toyModel], BarberShop[listitem][toyBone], BarberShop[listitem][toyName]);
	return 1;
}

Dialog:HardwareStore(playerid, response, listitem, inputtext[])
{
	// TO DO = MOVE TO VEHICLES

	if (!response) 												return 1;
    if (GetCash(playerid) < HardwareStore[listitem][toyPrice])	return SendNotCash(playerid);

	/*if (listitem == 14)
	{
	    if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))	return SendErrorMessage(playerid, "Aracýnz spawnlanmamýþ.");

		static const str_size[] = "{ffffff}%s için kopyala. {C3C3C3}[ID / isim] {ffffff}anahtarlarý kime vermek istiyorsunuz:";
		new mes[sizeof(str_size) - 2 + 1 + 32];

		format(mes, sizeof(mes), str_size, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
	    Dialog_Show(playerid, DuplicateKey, DIALOG_STYLE_INPUT, "Kopyala", mes, "Satýn Al", "Ýptal");
	    return 1;
	}*/

    new i = -1;

	if ((i = GetNextToySlot(playerid)) == -1)	return SendErrorMessage(playerid, "Tüm kýyafet/aksesuar slotlarý dolu.");

	SetPlayerAttachedObject(playerid, i, HardwareStore[listitem][toyModel], HardwareStore[listitem][toyBone], HardwareStore[listitem][toyOffestX], HardwareStore[listitem][toyOffestY], HardwareStore[listitem][toyOffestZ],
	HardwareStore[listitem][toyRotX], HardwareStore[listitem][toyRotY], HardwareStore[listitem][toyRotZ], HardwareStore[listitem][toyScaleX], HardwareStore[listitem][toyScaleY], HardwareStore[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);
	SetPVarInt(playerid, #buy_attach, HardwareStore[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, HardwareStore[listitem][toyModel], HardwareStore[listitem][toyBone], HardwareStore[listitem][toyName]);
	return 1;
}

Dialog:GuitarsDialog(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	if (listitem == 3)
	{
		if (GetCash(playerid) < GuitarsInfo[listitem][toyPrice])	return SendNotCash(playerid);
		if (GiveInvItem(playerid, INV_BOOMBOX, 1) == -1)		return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");

		GiveCash(playerid, -GuitarsInfo[listitem][toyPrice]);
		SendSyntaxMessage(playerid, "Müzik seti aldýnýz, tutar: $%i.", GuitarsInfo[listitem][toyPrice]);
	}
	else
	{
	    new i = -1;

		if ((i = GetNextToySlot(playerid)) == -1)				return SendErrorMessage(playerid, "Tüm kýyafet/aksesuar slotlarý dolu.");
    	if (GetCash(playerid) < GuitarsInfo[listitem][toyPrice])	return SendNotCash(playerid);

		SetPlayerAttachedObject(playerid, i, GuitarsInfo[listitem][toyModel], 1, 0.0, -0.145, 0.0, 14.8, 85.1, -19.2, 1.0, 1.0, 1.0);
        EditAttachedObject(playerid, i);
		SetPVarInt(playerid, #buy_attach, GuitarsInfo[listitem][toyPrice]);
		InsertPlayerAttach(playerid, i, GuitarsInfo[listitem][toyModel], 1, GuitarsInfo[listitem][toyName]);
	}
	return 1;
}


CMD:aracaksesuar(playerid, params[])
{
	new option[24], secoption, thirdoption, fourthoption;

	if (sscanf(params, "s[24]D(-1)D(-1)D(-1)", option, secoption, thirdoption, fourthoption))
	{
		SendHelpMessage(playerid, "/aracaksesuar [ayarlar]");
		SendSyntaxMessage(playerid, "liste / satinal / sat / duzenle");
		return 1;
	}

    new vehicle = GetNearVehicle(playerid, 5.0);

    if (vehicle && IsDriver(playerid))								return SendErrorMessage(playerid, "Bu iþlem için araçtan inmelisin.");
    if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu aracýn sahibi deðilsiniz.");

	if (CompareStrings(option, "satinal"))
	{
		new slot, mes[sizeof(car_attach)*64];

		if (sscanf(params, "{s[7]}d", slot))				return SendHelpMessage(playerid, "/aracaksesuar satinal [slot ID]");
        if (VehicleInfo[vehicle][carAttachObj][slot] != 0)	return SendErrorMessage(playerid, "Belirtilen slot kullanýlýyor.");

        SetPVarInt(playerid, #veh_editor, vehicle);
		SetPVarInt(playerid, #veh_slot, slot);

		for(new i = 0; i < sizeof(car_attach); i++)
		{
			format(mes, sizeof(mes), "%s%i(0.0, 0.0, 90.0, 1.0)\t~g~~h~$250\n", mes, car_attach[i]);
		}

		Dialog_Show(playerid, MODEL_SELECTION_OBJATT, DIALOG_STYLE_PREVIEW_MODEL, "Araç Eklenti Listesi", mes, "Sec", "Kapat");
		return 1;
	}

	else if (CompareStrings(option, "sat"))
	{
		new slot;

		if (sscanf(params, "{s[7]}d", slot))							return SendHelpMessage(playerid, "/aracaksesuar sat [slot ID]");
        if (VehicleInfo[vehicle][carAttach][slot] == INVALID_OBJECT_ID)	return SendErrorMessage(playerid, "Belirtilen slot boþ.");

        VehicleInfo[vehicle][carAttachObj][slot] = 0;
		VehicleInfo[vehicle][carAttachPosX][slot] = 0.0;
		VehicleInfo[vehicle][carAttachPosY][slot] = 0.0;
		VehicleInfo[vehicle][carAttachPosZ][slot] = 0.0;
		VehicleInfo[vehicle][carAttachRotX][slot] = 0.0;
		VehicleInfo[vehicle][carAttachRotY][slot] = 0.0;
		VehicleInfo[vehicle][carAttachRotZ][slot] = 0.0;
        DestroyDynamicObject(VehicleInfo[vehicle][carAttach][slot]);
		VehicleInfo[vehicle][carAttach][slot] = INVALID_OBJECT_ID;
        SendSyntaxMessage(playerid, "Öðeyi baþarýyla sildiniz.");
		Save_CarAttach(vehicle, slot);
		return 1;
	}

	else if (CompareStrings(option, "duzenle"))
	{
		new slot;

		if (sscanf(params, "{s[7]}d", slot))							return SendHelpMessage(playerid, "/aracaksesuar duzenle [slot ID]");
        if (VehicleInfo[vehicle][carAttach][slot] == INVALID_OBJECT_ID)	return SendErrorMessage(playerid, "Belirtilen slot boþ.");

		new Float:x, Float:y, Float:z;
		AntiCheatGetVehiclePos(vehicle, x, y, z);

		SetPVarInt(playerid, #veh_editor, vehicle);
		SetPVarInt(playerid, #veh_slot, slot);
		SetPVarInt(playerid, #veh_obj, VehicleInfo[vehicle][carAttachObj][slot]);
		SetPVarInt(playerid, "Vehicle:AttEdit", 1);

		DestroyDynamicObject(VehicleInfo[vehicle][carAttach][slot]);
		VehicleInfo[vehicle][carAttach][slot] = INVALID_OBJECT_ID;
		VehicleInfo[vehicle][carAttach][slot] = CreateDynamicObject(VehicleInfo[vehicle][carAttachObj][slot], x, y, z + 2.0, 0.0, 0.0, 0.0);
		EditDynamicObject(playerid, VehicleInfo[vehicle][carAttach][slot]);
		return 1;
	}

	else if (CompareStrings(option, "liste"))
	{
		new message[1024] = "{FFFFFF}Slot\t{FFFFFF}Obje ID";

		for(new i = 0; i < MAX_TRUNK_INVENTORY; i++)
		{
			if (VehicleInfo[vehicle][carAttach][i] == INVALID_OBJECT_ID)
			{
				format(message, sizeof(message), "%s\n%i\tHayýr", message, i);
			}
			else
			{
				format(message, sizeof(message), "%s\n%i\t%d", message, i, VehicleInfo[vehicle][carAttachObj][i]);
			}
		}
		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Araç Eklenti Listesi", message, "Kapat", "");
	}

	else
	{
		SendHelpMessage(playerid, "/aracaksesuar [ayarlar]");
		SendSyntaxMessage(playerid, "liste / satinal / sat / duzenle");
	}
	return 1;
}

alias:aksesuar("acc", "/aksesuarlar");
CMD:aksesuar(playerid, params[])
{
    if (GetPVarInt(playerid, #edit_attach) == 1 || GetPVarInt(playerid, #buy_attach) != 0)	return SendErrorMessage(playerid, "Alýþveriþi / kýyafetleri düzenlemeyi sonlandýrýn.");

	new count, string[750];

	for(new i; i < MAX_PLAYER_ATTACH; i++)
	{
	    if (AttachInfo[playerid][i][aID] == 0) continue;

		format(string, sizeof(string), "%s\n{FFFFFF}%i: %s %s", string, i+1, AttachInfo[playerid][i][aName], (AttachInfo[playerid][i][aUsed]) ? ("{30A90F}[Kullanýmda]") : ("{AFAFAF}[Kullanýmda Deðil]"));
	    count++;
	}

	if (!count)	return SendErrorMessage(playerid, "Hiçbir aksesuarýn/kýyafetin yok.");

    Dialog_Show(playerid, Clothing, DIALOG_STYLE_LIST, "{FF8000}Slot seç", string, "Seç", "Kapat");
	return 1;
}

CMD:paraobje(playerid, params[])
{
    if (GetPVarInt(playerid, #money_hand) && (
		IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) ||
		IsPlayerAttachedObjectSlotUsed(playerid, 8)
	))
    {
        SetPVarInt(playerid, #money_hand, 0);

 		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		RemovePlayerAttachedObject(playerid, 8);
 		return 1;
    }

	if (GetCash(playerid) < 300)								return SendNotCash(playerid);
    if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))	return SendWarningMessage(playerid, "Elinizde bir þey varken bunu yapamazsýnýz.");

	new type;
	if (sscanf(params, "d", type)) return SendHelpMessage(playerid, "/paraobje [1 - sað el | 2 - sol el]");

	if (type == 1)		SetPlayerAttachedObject(playerid, ATTACH_HANDS, 1212, 6, 0.062999, 0.004999, 0.013000, -106.300003, -3.699995, -84.700004, 0.766000, 1.000000, 0.773000);
	else if (type == 2)	SetPlayerAttachedObject(playerid, 8, 1212, 5, 0.083999, -0.005000, -0.015000, -106.300003, -3.699995, -84.700004, 0.766000, 1.000000, 0.829999);
	else 				return SendHelpMessage(playerid, "/paraobje [1 - sað el | 2 - sol el]");

    SetPVarInt(playerid, #money_hand, 1);
	return 1;
}

/* Banka sistemi */

ATM_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rz)
{
    new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;

    GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

    if (GetPVarInt(playerid, #edit_atm) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
	    new id = GetPVarInt(playerid, #edit_atm)-1;

		DeletePVar(playerid, #edit_atm);
	    if (id < 0 || id >= MAX_ATMS || !ATMInfo[id][atmID]) return SendErrorMessage(playerid, "ATM bulunamadý");
	    if (objectid != ATMInfo[id][atmObject])				return SendErrorMessage(playerid, "ATM düzenlenirken hata oluþtu.");

		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, 0.0, 0.0, rz);

        GetDynamicObjectPos(objectid, ATMInfo[id][atmPosX], ATMInfo[id][atmPosY], ATMInfo[id][atmPosZ]);
        ATMInfo[id][atmPosRZ] = rz;

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `atms` SET `posx`=%f,`posy`=%f,`posz`=%f,`posrz`=%f WHERE `id`=%i", x, y, z, rz, ATMInfo[id][atmID]);
		mysql_tquery(dbHandle, query);

		SendAdmMessageToPlayer(playerid, "ATM pozisyonu deðiþtirildi: [ID:%i]", id);
	} //î
    return 1;
}

ATM_OnGameModeInit()
{
    return mysql_tquery(dbHandle, "SELECT * FROM `atms`", "LoadDynamicATMS");
}

forward LoadDynamicBanks();
forward LoadDynamicATMS();
forward OnATMInsert(AtmID);

public LoadDynamicATMS()
{
    new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows)	return print("[ATM] Kayit bulunamadi.");


	for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "id", ATMInfo[i][atmID]);
		cache_get_value_float(i, "posx", ATMInfo[i][atmPosX]);
		cache_get_value_float(i, "posy", ATMInfo[i][atmPosY]);
		cache_get_value_float(i, "posz", ATMInfo[i][atmPosZ]);
		cache_get_value_float(i, "posrz", ATMInfo[i][atmPosRZ]);
		cache_get_value_int(i, "interior", ATMInfo[i][atmInt]);
	    cache_get_value_int(i, "vw", ATMInfo[i][atmVW]);
		ATMInfo[i][atmObject] = CreateDynamicObject(19324, ATMInfo[i][atmPosX], ATMInfo[i][atmPosY], ATMInfo[i][atmPosZ], 0.0, 0.0, ATMInfo[i][atmPosRZ], ATMInfo[i][atmVW], ATMInfo[i][atmInt]);
		total++;
	}
	printf("[ATM] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public OnATMInsert(AtmID)
{
	return ATMInfo[AtmID][atmID] = cache_insert_id();
}

GiveBankCash(playerid, cash)
{
	return PlayerInfo[playerid][pBank] = PlayerInfo[playerid][pBank] + cash;
}

GetBankCash(playerid)
{
	return PlayerInfo[playerid][pBank];
}


BankTransfer(playerid, userid, amount)
{
    if (GetPVarInt(playerid, #just_transfer) > gettime())	return SendErrorMessage(playerid, "25 saniye bekleyiniz.");
    if (userid == playerid)									return 1;
	if (!IsPlayerLogged(userid))							return SendNotConnected(playerid);
	if (GetBankCash(playerid) < amount || amount < 1)		return SendNotCash(playerid);

    new money1 = PlayerInfo[playerid][pBank], money2 = PlayerInfo[userid][pBank];

	GiveBankCash(playerid, -amount);
	GiveBankCash(userid, amount);
	SendClientMessageEx(playerid, COLOR_YELLOWG, "[ATM] {FFFFFF}%s adlý kiþiye $%i transfer ettiniz.", GetNameEx(userid), amount);
	SendClientMessageEx(userid, COLOR_YELLOWG, "[ATM] {FFFFFF}%s adlý kiþi size $%i transfer etti", GetNameEx(playerid), amount);

	new mes[256];
    format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | Bank(ONCEKI): %i | Bank(SUANKI): %i] adlý kiþi %s adlý kiþiye banka transferi yaptý. [MYSQL: %i | IP: %s | Bank(ONCEKI): %i | Bank(SUANKI): %i] -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money1, PlayerInfo[playerid][pBank], GetName(userid), PlayerInfo[userid][pID], q_GetPlayerIP(userid), money2, PlayerInfo[userid][pBank], amount);
    insert_log(mes, MONEY_LOG, 2, PlayerInfo[playerid][pAccID], PlayerInfo[userid][pAccID]);

    SetPVarInt(playerid, #just_transfer, gettime() + 25);
    SendAdmMessage("%s [ID: %i] adlý oyuncu %s [ID: %i] adlý oyuncuya banka transferi yaptý | Tutar: $%i", GetNameEx(playerid), playerid, GetNameEx(userid), userid, amount);
	return 1;
}

BankDeposit(playerid, amount)
{
    if (amount > GetCash(playerid) || amount < 1) return 1;

    new money = PlayerInfo[playerid][pCash], bank = PlayerInfo[playerid][pBank];

	GiveCash(playerid,-amount);
	GiveBankCash(playerid, amount);
	SendClientMessageEx(playerid, COLOR_YELLOWG, "[ATM] {FFFFFF}Banka hesabýnýza $%i para yatýrdýnýz. Yeni bakiye: $%i.", amount, GetBankCash(playerid));

    new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | Money(ONCEKI): %i | Money(SIMDIKI): %i | Bank(ONCEKI): %i | Bank(SIMDIKI): %i] bankaya para yatýrdý -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money, GetCash(playerid), bank, PlayerInfo[playerid][pBank], amount);
    insert_log(mes, MONEY_LOG, 3, PlayerInfo[playerid][pAccID], 0);
	return 1;
}

BankWithdraw(playerid, amount)
{
    if (amount > GetBankCash(playerid) || amount < 1) return 1;

    new money = PlayerInfo[playerid][pCash], bank = PlayerInfo[playerid][pBank];

	GiveCash(playerid,amount);
	GiveBankCash(playerid, -amount);
	SendClientMessageEx(playerid, COLOR_YELLOWG, "[ATM] {FFFFFF}Banka hesabýnýzdan $%i tutarýnda para çektiniz. Yeni bakiye: $%i.", amount,GetBankCash(playerid));

    new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | Money(ONCEKI): %i | Money(SIMDIKI): %i | Bank(ONCEKI): %i | Bank(SIMDIKI): %i] bankadan para çekti -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), money, GetCash(playerid), bank, PlayerInfo[playerid][pBank], amount);
    insert_log(mes, MONEY_LOG, 4, PlayerInfo[playerid][pAccID], 0);
	return 1;
}

Bank_Nearest(playerid)
{
 	if (!IsPlayerLogged(playerid)) return 0;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if (BizInfo[i][bizID] == 0 || BizInfo[i][bizType] != BIZ_BANK)	continue;

		if (PlayerToPoint(20.0,playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == BizInfo[i][bizExitVW] && GetInterior(playerid) == BizInfo[i][bizExitInt])	return 1;
	}
	return 0;
}

AddATMToFile(atmid, Float:x, Float:y, Float:z, Float: rz, interior, vw)
{
    new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `atms` (posx, posy, posz, posrz, interior, vw) VALUES (%f, %f, %f, %f, %i, %i)", x, y, z, rz, interior, vw);
	mysql_tquery(dbHandle, query, "OnATMInsert", "d", atmid);
	return 1;
}

ATM_Nearest(playerid)
{
	for(new i; i != MAX_ATMS; i++)
	{
	    if (ATMInfo[i][atmID] == 0) continue;

        if (IsPlayerInRangeOfPoint(playerid, 2.0, ATMInfo[i][atmPosX], ATMInfo[i][atmPosY], ATMInfo[i][atmPosZ]) && ATMInfo[i][atmInt] == GetInterior(playerid) && ATMInfo[i][atmVW] == GetWorld(playerid)) return i;
	}
	return -1;
}

Dialog:ATMMenu(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	switch(listitem)
	{
	    case 0:
		{
		    static const str_size[] = "[BANKA] {"COL_GREEN"}$%i.\n[MEVDUAT] {"COL_GREEN"}$%i\n[MAAÞ HESABI] {"COL_GREEN"}$%i";
		    new mes[sizeof(str_size) - 4 + 24];

			format(mes, sizeof(mes), str_size, PlayerInfo[playerid][pBank], PlayerInfo[playerid][pSavings], PlayerInfo[playerid][pPayCheckMoney]);
			Dialog_Show(playerid, ATMBack, DIALOG_STYLE_LIST, "{FFFFFF}Hesap Durumu", mes, "Geri Dön", "");
		}
		case 1: Dialog_Show(playerid, ATMWithdraw, DIALOG_STYLE_INPUT, "{FFFFFF} Para Çek", "{FFFFFF} Banka hesabýnýzdan çekmek istediðiniz tutarý giriniz:", "Para Çek", "Geri Dön");
		case 2: Dialog_Show(playerid, ATMDeposit, DIALOG_STYLE_INPUT, "{FFFFFF} Para Yatýr", "{FFFFFF} Banka hesabýnýza yatýrmak istediðiniz tutarý giriniz:", "Para Yatýr", "Geri Dön");
		case 3: Dialog_Show(playerid, ATMTransfer, DIALOG_STYLE_INPUT, "{FFFFFF} Para Transferi", "{FFFFFF}Transfer yapmak istediðiniz kiþinin adýný veya ID'sini giriniz:", ">>>", "Geri Dön");
		case 4: pc_cmd_maascek(playerid, "");
	}
	return 1;
}//î

Dialog:BankMenu(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	switch(listitem)
	{
	    case 0:
		{
		    static const str_size[] = "[BANKA] {"COL_GREEN"}$%i.\n[MEVDUAT] {"COL_GREEN"}$%i\n[MAAÞ HESABI] {"COL_GREEN"}$%i";
		    new mes[sizeof(str_size) - 4 + 24];

			format(mes, sizeof(mes), str_size, PlayerInfo[playerid][pBank], PlayerInfo[playerid][pSavings], PlayerInfo[playerid][pPayCheckMoney]);
			Dialog_Show(playerid, ATMBack, DIALOG_STYLE_LIST, "{FFFFFF}Hesap Durumu", mes, "Geri Dön", "");
		}
		case 1: Dialog_Show(playerid, ATMWithdraw, DIALOG_STYLE_INPUT, "{FFFFFF} Para Çek", "{FFFFFF} Banka hesabýnýzdan çekmek istediðiniz tutarý giriniz:", "Para Çek", "Geri Dön");
		case 2: Dialog_Show(playerid, ATMDeposit, DIALOG_STYLE_INPUT, "{FFFFFF} Para Yatýr", "{FFFFFF} Banka hesabýnýza yatýrmak istediðiniz tutarý giriniz:", "Para Yatýr", "Geri Dön");
		case 3: Dialog_Show(playerid, ATMTransfer, DIALOG_STYLE_INPUT, "{FFFFFF} Para Transferi", "{FFFFFF}Transfer yapmak istediðiniz kiþinin adýný veya ID'sini giriniz:", ">>>", "Geri Dön");
		case 4: pc_cmd_maascek(playerid, "");
		case 5:	Dialog_Show(playerid, BankMevduat, DIALOG_STYLE_LIST, "{FFFFFF} Mevduat", "Para Çek(Hepsini)\nPara Yatýr", "Seç", "Geri Dön");
	}
	return 1;
}

Dialog:BankMevduat(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_banka(playerid, "");
	switch(listitem)
	{
	    case 0:
		{
			SendSyntaxMessage(playerid, "Mevduatta bulunan paranýzý geri çektiniz: $%i.", PlayerInfo[playerid][pSavings]);
			GiveCash(playerid, PlayerInfo[playerid][pSavings]);
			PlayerInfo[playerid][pSavings] = 0;
		}
		case 1: Dialog_Show(playerid, BankMevduatYatir, DIALOG_STYLE_INPUT, "{FFFFFF} Mevduat Yatýr", "{FFFFFF} Mevduat hesabýna yatýrýlacak parayý yazýnýz:\nMevduat tutarý 50.000$ ile 150.000$ arasýnda olmalýdýr.", "Yatýr", "Geri Dön");
	}
	return 1;
}

Dialog:BankMevduatYatir(playerid, listitem, response, inputtext[])
{
	if (!response) return pc_cmd_banka(playerid, "");
	new amount = strval(inputtext);
    if (amount < 50000 || amount > 150000)	return SendErrorMessage(playerid, "Mevduat tutarý $50.000 ile $150.000 arasýnda olmalý!");
	if (GetCash(playerid) < amount) 		return SendNotCash(playerid);
	if (amount + PlayerInfo[playerid][pSavings] > 150000)    return SendErrorMessage(playerid, "Mevduat tutarý $50.000 ile 150.000 arasýnda olmalýdýr.");
	SendSyntaxMessage(playerid, "$%d tutarýný mevduat hesabýnýza yatýrdýnýz. Faiz oraný: 1%%", amount);
	GiveCash(playerid, -amount);
	PlayerInfo[playerid][pSavings] += amount;
	pc_cmd_banka(playerid, "");
	return 1;
}

Dialog:ATMBack(playerid, response, listitem, inputtext[])
{
	if (response)	pc_cmd_atm(playerid, "");

	return 1;
}

Dialog:ATMTransfer(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_atm(playerid, "");

	new userid;

	sscanf(inputtext, "u", userid);

	if (!IsPlayerLogged(userid) || userid == playerid)
	{
	    Dialog_Show(playerid, ATMTransfer, DIALOG_STYLE_INPUT, "{FFFFFF}Para Transferi", "{FFFFFF}Transfer yapmak istediðiniz kiþinin adýný veya ID'sini giriniz:", ">>>", "Geri Dön");
	    return SendErrorMessage(playerid, "Alýcý bulunamadý.");
	}

	static const str_size[] = "{FFFFFF}Para Transferi - {FFFF00}%s";
	new mes[sizeof(str_size) - 2 + MAX_PLAYER_NAME + 1];

	format(mes, sizeof(mes), str_size, GetNameEx(userid));
	SetPVarInt(playerid, #transfer_player, userid);
	Dialog_Show(playerid, ATMTransfer2, DIALOG_STYLE_INPUT, mes, "{FFFFFF}Transfer yapmak istediðiniz tutarý giriniz:", "Transfer Yap", "Ýptal");
	return 1;
}

Dialog:ATMTransfer2(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_atm(playerid, "");

	new userid = GetPVarInt(playerid, #transfer_player), amount = strval(inputtext);

	DeletePVar(playerid, #transfer_player);

	if (!IsPlayerLogged(userid) || userid == playerid)
	{
	    Dialog_Show(playerid, ATMTransfer, DIALOG_STYLE_INPUT, "{FFFFFF}Para Transferi", "{FFFFFF}Transfer yapmak istediðiniz kiþinin adýný veya ID'sini giriniz:", ">>>", "Geri Dön");
	    return SendErrorMessage(playerid, "Alýcý bulunamadý.");
	}
	if (GetBankCash(playerid) < amount || amount < 1)
	{
	    static const str_size[] = "{FFFFFF}Para Transferi - {FFFF00}%s";
		new mes[sizeof(str_size) - 2 + MAX_PLAYER_NAME + 1];

		format(mes, sizeof(mes), str_size, GetNameEx(userid));
		SetPVarInt(playerid, #transfer_player, userid);
		Dialog_Show(playerid, ATMTransfer2, DIALOG_STYLE_INPUT, mes, "{FFFFFF}Transfer yapmak istediðiniz tutarý giriniz:", "Transfer Yap", "Ýptal");
 		return SendErrorMessage(playerid, "Girdiðiniz tutar banka hesabýnýzda bulunmuyor veya geçersiz bir tutar girdiniz.");
	}

	BankTransfer(playerid, userid, amount);
	pc_cmd_atm(playerid, "");
	return 1;
}

Dialog:ATMWithdraw(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_atm(playerid, "");

	new amount = strval(inputtext);

    if (amount > GetBankCash(playerid) || amount < 1)
	{
        Dialog_Show(playerid, ATMWithdraw, DIALOG_STYLE_INPUT, "{FFFFFF}Para Çek", "{FFFFFF}Banka hesabýnýzdan çekmek istediðiniz tutarý giriniz:", "Para Çek", "Geri Dön");
		return SendErrorMessage(playerid, "Girdiðiniz tutar banka hesabýnýzda bulunmuyor veya geçersiz bir tutar girdiniz.");
	}

	BankWithdraw(playerid, amount);
	pc_cmd_atm(playerid, "");
	return 1;
}

Dialog:ATMDeposit(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_atm(playerid, "");

	new amount = strval(inputtext);

    if (amount > GetCash(playerid) || amount < 1)
	{
        Dialog_Show(playerid, ATMDeposit, DIALOG_STYLE_INPUT, "{FFFFFFF}Para Yatýr", "Banka hesabýnýza yatýrmak istediðiniz tutarý giriniz:", "Para Yatýr", "Geri Dön");
		return SendErrorMessage(playerid, "Girdiðiniz tutar üzerinizde bulunmuyor veya geçersiz bir tutar girdiniz.");
	}

	BankDeposit(playerid, amount);
	pc_cmd_atm(playerid, "");
	return 1;
}

CMD:hesapdurumu(playerid, params[])
{
	if (!Bank_Nearest(playerid)) return SendErrorMessage (playerid, "Bankada deðilsiniz.");

	SendClientMessageEx(playerid, COLOR_FADE1, "[BANKA] Banka hesabýnýzda $%i bulunuyor.", PlayerInfo[playerid][pBank]);
    SendClientMessageEx(playerid, COLOR_FADE1, "[BANKA] Birikim Hesabý: $%i", PlayerInfo[playerid][pSavings]);
	SendClientMessageEx(playerid, COLOR_FADE1, "[BANKA] Maaþ Hesabý: $%i", PlayerInfo[playerid][pPayCheckMoney]);
	return 1;
}

CMD:paratransferi(playerid, params[])
{
	new userid, amount;
	if (PlayerInfo[playerid][pProbation])
		return SendErrorMessage(playerid, "Probationda olduðunuz için sadece bankayý kullanabilirsiniz ve sadece para/maaþ çekme iþlemleri yapabilirsiniz.");

	if (!Bank_Nearest(playerid)) return SendErrorMessage(playerid, "Bankada deðilsiniz.");
	if (sscanf(params, "ud", userid, amount))
	{
		SendHelpMessage(playerid, "/paratransferi [ID/Karakter Adý] [Tutar]");
		SendSyntaxMessage(playerid,"[BANKA] Banka hesabýnýzda $%i bulunuyor.", PlayerInfo[playerid][pBank]);
		return 1;
	}

	if (userid == playerid)								return SendErrorMessage (playerid, "Kendinize para transferi yapamazsýnýz.");
	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (GetBankCash(playerid) < amount || amount < 1)	return SendErrorMessage (playerid, "Girdiðiniz tutar banka hesabýnýzda yok veya geçersiz bir tutar girdiniz.");

	BankTransfer(playerid, userid, amount);
	return 1;
}

CMD:parayatir(playerid, params[])
{
	new amount;
	if (PlayerInfo[playerid][pProbation])
		return SendErrorMessage(playerid, "Probationda olduðunuz için sadece bankayý kullanabilirsiniz ve sadece para/maaþ çekme iþlemleri yapabilirsiniz.");

	if (!Bank_Nearest(playerid)) return SendErrorMessage (playerid, "Bankada deðilsiniz.");

	if (sscanf(params, "d", amount))
	{
		SendHelpMessage(playerid, "/parayatir [Tutar]");
		SendSyntaxMessage(playerid, "[BANKA] Banka hesabýnýzda $%i bulunuyor.", PlayerInfo[playerid][pBank]);
		return 1;
	}

    if (amount > GetCash(playerid) || amount < 1) return SendErrorMessage(playerid, "Girdiðiniz tutar üzerinizde yok veya geçersiz bir tutar girdiniz.");

	BankDeposit(playerid, amount);
	return 1;
}

CMD:paracek(playerid, params[])
{
	new amount;

	if (!Bank_Nearest(playerid)) return SendErrorMessage(playerid, "Bankada deðilsiniz.");

	if (sscanf(params, "d", amount))
	{
		SendHelpMessage(playerid, "/paracek [Tutar]");
		SendClientMessageEx(playerid, COLOR_FADE1, "[BANKA] Banka hesabýnýzda $%i bulunuyor.", PlayerInfo[playerid][pBank]);
		return 1;
	}

    if (amount > GetBankCash(playerid) || amount < 1)	return SendErrorMessage(playerid, "Girdiðiniz tutar banka hesabýnýzda yok veya geçersiz bir tutar girdiniz.");

	BankWithdraw(playerid, amount);
	return 1;
}

CMD:mevduat(playerid, params[])
{
	new amount;
	if (!Bank_Nearest(playerid)) return SendErrorMessage(playerid, "Bankada deðilsiniz.");

	if (PlayerInfo[playerid][pSavings] == 0)
	{
		if (sscanf(params, "d", amount))		return SendHelpMessage(playerid, "/mevduat [tutar]");
		if (amount < 50000 || amount > 150000)	return SendErrorMessage(playerid, "Mevduat tutarý $50.000 ile $150.000 arasýnda olmalýdýr.");
		if (GetCash(playerid) < amount) 		return SendNotCash(playerid);

		SendSyntaxMessage(playerid, "$%d tutarýný mevduat hesabýnýza yatýrdýnýz. Faiz oraný: 1%%", amount);
		GiveCash(playerid, -amount);
		PlayerInfo[playerid][pSavings] = amount;
		return 1;
	}
	else
	{
		SendSyntaxMessage(playerid, "Mevduatta bulunan paranýzý geri çektiniz: $%i.", PlayerInfo[playerid][pSavings]);
		GiveCash(playerid, PlayerInfo[playerid][pSavings]);
		PlayerInfo[playerid][pSavings] = 0;
	}
	return 1;
}

CMD:maascek(playerid, params[])
{
	if (!ATM_Nearest(playerid))					return SendErrorMessage(playerid, "Bankada deðilsiniz.");

	if (PlayerInfo[playerid][pPayCheckMoney] < 1)	return SendErrorMessage(playerid, "Maaþ hesabýndan çekebileceðiniz para bulunmuyor.");

	SendSyntaxMessage(playerid, "[MAAÞ HESABI] Hesabýnýzdan $%i tutarýnda para çektiniz.", PlayerInfo[playerid][pPayCheckMoney]);
	GiveCash(playerid, PlayerInfo[playerid][pPayCheckMoney]);
	PlayerInfo[playerid][pPayCheckMoney] = 0;
	return 1;
}

CMD:atm(playerid, params[])
{
    if (ATM_Nearest(playerid) == -1) return 1;
	if (PlayerInfo[playerid][pProbation])
		return SendErrorMessage(playerid, "Probationda olduðunuz için sadece bankayý kullanabilirsiniz ve sadece para/maaþ çekme iþlemleri yapabilirsiniz.");

	Dialog_Show(playerid, ATMMenu, DIALOG_STYLE_LIST, "{FFFFFF}ATM", "- Bakiye\n- Para Çek\n- Para Yatýr\n- Para Transferi\n- Maaþ Çek", "Seç", "Ýptal");
	return 1;
}

CMD:banka(playerid, params[])
{
   if (!Bank_Nearest(playerid)) return SendErrorMessage (playerid, "Bankada deðilsiniz.");

	Dialog_Show(playerid, BankMenu, DIALOG_STYLE_LIST, "{FFFFFF}Banka", "- Hesap Durumu\n- Para Çek\n- Para Yatýr\n- Para Transferi\n- Maaþ Çek\n- Mevduat", "Seç", "Ýptal");
	return 1;
}

/* Teknikerlik sistemi */

/*Repair_Init()
{
	for(new i; i < MAX_REPAIR_ZONES; i++)
	{
    	gz_repair[i] = GangZoneCreate(repair_zones[i][0], repair_zones[i][1], repair_zones[i][2]);
    	GangZoneHideForAll(gz_repair[i]);
	}
	return 1;
}*/

CMD:tamirbolgeleri(playerid, params[])
{
	if (GetPVarInt(playerid, #show_repair) == 1)
	{
	    DeletePVar(playerid, #show_repair);
		for(new i; i < MAX_REPAIR_ZONES; i++) GangZoneHideForPlayer(playerid, gz_repair[i]);

	    SendSyntaxMessage(playerid, "Onarým alanlarý devre dýþý býrakýldý.");
	    return 1;
	}

	SetPVarInt(playerid, #show_repair, 1);
	for(new i; i < MAX_REPAIR_ZONES; i++) GangZoneShowForPlayer(playerid, gz_repair[i], 0xFF0000AA);

	SendSyntaxMessage(playerid, "Tamir edilecek alanlar haritada iþaretlendi. (ESC > Harita).");
	return 1;
}

/* CCTV sistemi */

CCTV_OnGameModeInit()
{
	return mysql_tquery(dbHandle, "SELECT * FROM `cctvs`", "LoadDynamicCCTV");
}

CCTV_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ,
	Float:oldRotX, Float:oldRotY, Float:oldRotZ;

    GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	if (GetPVarInt(playerid, #edit_cctv) && CCTVInfo[GetPVarInt(playerid, #edit_cctv)-1][tvObject] == objectid && CCTVInfo[GetPVarInt(playerid, #edit_cctv)-1][tvObjectOn])
	{
		if (response == EDIT_RESPONSE_FINAL)
		{
		    new cctvid = GetPVarInt(playerid, #edit_cctv)-1;

	    	DeletePVar(playerid, #edit_cctv);
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			new query[128 + 56];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `cctvs` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %i", x, y, z, rx, ry, rz, CCTVInfo[cctvid][tvID]);
			mysql_tquery(dbHandle, query);

			GetDynamicObjectPos(objectid, CCTVInfo[cctvid][tvPosX], CCTVInfo[cctvid][tvPosY], CCTVInfo[cctvid][tvPosZ]);
			GetDynamicObjectRot(objectid, CCTVInfo[cctvid][tvPosRX], CCTVInfo[cctvid][tvPosRY], CCTVInfo[cctvid][tvPosRZ]);

            DestroyDynamicObject(CCTVInfo[cctvid][tvCollision]);
            CCTVInfo[cctvid][tvCollision] = CreateDynamicObject(3800, CCTVInfo[cctvid][tvPosX], CCTVInfo[cctvid][tvPosY], CCTVInfo[cctvid][tvPosZ]-1.0, CCTVInfo[cctvid][tvPosRX], CCTVInfo[cctvid][tvPosRY], CCTVInfo[cctvid][tvPosRZ], CCTVInfo[cctvid][tvVW], CCTVInfo[cctvid][tvInt]);
            SetDynamicObjectMaterial(CCTVInfo[cctvid][tvCollision], 0, 16644, "a51_detailstuff", "roucghstonebrtb", 0x00000000);

            if (CCTVInfo[cctvid][tvBreak])
            {
                if (IsValidDynamic3DTextLabel(CCTVInfo[cctvid][tvText]))
                {
                    DestroyDynamic3DTextLabel(CCTVInfo[cctvid][tvText]);
                    CCTVInfo[cctvid][tvText] = CreateDynamic3DTextLabel("(( ARIZALI ))", COLOR_GREY, CCTVInfo[cctvid][tvPosX], CCTVInfo[cctvid][tvPosY], CCTVInfo[cctvid][tvPosZ]-0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CCTVInfo[cctvid][tvVW], CCTVInfo[cctvid][tvInt]);
                }
                else
                {
                    CCTVInfo[cctvid][tvText] = CreateDynamic3DTextLabel("(( ARIZALI ))", COLOR_GREY, CCTVInfo[cctvid][tvPosX], CCTVInfo[cctvid][tvPosY], CCTVInfo[cctvid][tvPosZ]-0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CCTVInfo[cctvid][tvVW], CCTVInfo[cctvid][tvInt]);
                }
            }

  			SendSyntaxMessage(playerid, "CCTV düzenlendi: [ID: %i]", cctvid);
		}
		else if (response == EDIT_RESPONSE_CANCEL)
		{
		    DeletePVar(playerid, #edit_cctv);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
	}
	return 1;
}

CCTV_OnPlayerShootDynamicObject(playerid, weaponid, STREAMER_TAG_OBJECT objectid)
{
    if (playerid == INVALID_PLAYER_ID)   return 1;
    if (weaponid < 22 || weaponid > 36)  return 1;

    for(new i = 0; i < MAX_CCTV; i++)
    {
        if (objectid != CCTVInfo[i][tvCollision])            continue;
        if (!CCTVInfo[i][tvObjectOn])                        continue;
        if (!IsValidDynamicObject(CCTVInfo[i][tvCollision])) continue;
        if (CCTVInfo[i][tvBreak])                            continue;

        SetCameraBreakState(i, 1);
        SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: CCTV arýzalandý: [ID: %i | %s] **", i, CCTVInfo[i][tvName]);

        foreach(new j : Player)
        {
            new cameraid = GetPVarInt(j, "CCTV:ID")-1;

            if (cameraid == i)
            {
                pTemp[playerid][pCCTV] = 0;
                DeletePVar(playerid, "CCTV:ID");
		        TogglePlayerSpectating(playerid, 0);
                SendSyntaxMessage(playerid, "Baktýðýnýz kamera arýzalanmýþ.");
            }
        }
    }
    return 1;
}

CCTV_OnPlayerWeaponShot(playerid, weaponid)
{
    if (playerid == INVALID_PLAYER_ID) return 1;

    new camid = GetNearestCamera(playerid, 40.0, 1), cam_zone[64];

    if (camid == -1)                                                      return 1;
    if (IsPlayerFactionPolice(playerid) && PlayerInfo[playerid][pOnDuty]) return 1;
    if (weaponid < 22 || weaponid > 36)                                   return 1;

    CCTVInfo[camid][tvSignal] =
    PCamera[playerid][camid][pc_used] = 1;
    CCTVInfo[camid][tvSignalTime] =
    PCamera[playerid][camid][pc_time] = 300;

    GetPlayer2DZone(playerid, cam_zone, sizeof(cam_zone));

    if (maskOn{playerid})
    {
        SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: CCTV 'ye ateþ açýldý: [ID: %i | %s] **", camid, CCTVInfo[camid][tvName]);
        SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: Ateþ açan: Bilinmiyor / Lokasyon: %s **", cam_zone);
    }
    else
    {
        SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: CCTV 'ye ateþ açýldý: [ID: %i | %s] **", camid, CCTVInfo[camid][tvName]);
        SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: Ateþ açan: %s / Lokasyon: %s **", GetNameEx(playerid), cam_zone);

        //new charge_res[64];
        //format(charge_res, sizeof(charge_res), "Êàìåðà [%s] çàôèêñèðîâàëà âûñòðåë.", CCTVInfo[camid][tvName]);
        //AddCriminalRecord(playerid, charge_res, 0);
    }
    return 1;
}

forward OnCameraInsert(cameraid);

this::LoadDynamicCCTV()
{
    new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows) return print("[CCTV] Kayit bulunamadi.");

	for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "id", CCTVInfo[i][tvID]);
		cache_get_value_float(i, "posx", CCTVInfo[i][tvPosX]);
		cache_get_value_float(i, "posy", CCTVInfo[i][tvPosY]);
		cache_get_value_float(i, "posz", CCTVInfo[i][tvPosZ]);
		cache_get_value_float(i, "posrx", CCTVInfo[i][tvPosRX]);
		cache_get_value_float(i, "posry", CCTVInfo[i][tvPosRY]);
		cache_get_value_float(i, "posrz", CCTVInfo[i][tvPosRZ]);
		cache_get_value_int(i, "interior", CCTVInfo[i][tvInt]);
		cache_get_value_int(i, "virworld", CCTVInfo[i][tvVW]);
        cache_get_value_int(i, "break", CCTVInfo[i][tvBreak]);

        CCTVInfo[i][tvObjectOn] = 1;
		cache_get_value(i, "info", CCTVInfo[i][tvName], 32);

	    CCTVInfo[i][tvObject] = CreateDynamicObject(1886, CCTVInfo[i][tvPosX], CCTVInfo[i][tvPosY], CCTVInfo[i][tvPosZ], CCTVInfo[i][tvPosRX], CCTVInfo[i][tvPosRY], CCTVInfo[i][tvPosRZ], CCTVInfo[i][tvVW], CCTVInfo[i][tvInt]);
        CCTVInfo[i][tvCollision] = CreateDynamicObject(3800, CCTVInfo[i][tvPosX], CCTVInfo[i][tvPosY], CCTVInfo[i][tvPosZ]-1.0, CCTVInfo[i][tvPosRX], CCTVInfo[i][tvPosRY], CCTVInfo[i][tvPosRZ], CCTVInfo[i][tvVW], CCTVInfo[i][tvInt]);
        SetDynamicObjectMaterial(CCTVInfo[i][tvCollision], 0, 16644, "a51_detailstuff", "roucghstonebrtb", 0x00000000);

        if (CCTVInfo[i][tvBreak])    CCTVInfo[i][tvText] = CreateDynamic3DTextLabel("(( ARIZALI ))", COLOR_GREY, CCTVInfo[i][tvPosX], CCTVInfo[i][tvPosY], CCTVInfo[i][tvPosZ]-0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CCTVInfo[i][tvVW], CCTVInfo[i][tvInt]);

        total++;
	}
	printf("[CCTV] Satir - %i. Yuklendi - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public OnCameraInsert(cameraid)
{
	CCTVInfo[cameraid][tvID] = cache_insert_id();
	return 1;
}

AddCameraToFile(cameraid, interior, virworld, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, name[])
{
    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `cctvs` (posx, posy, posz, posrx, posry, posrz, interior, virworld, break, info) VALUES (%f, %f, %f, %f, %f, %f, %i, %i, 0, '%e')",x,y,z, rx, ry, rz, interior,virworld,name);
	mysql_tquery(dbHandle, query, "OnCameraInsert", "d", cameraid);
	return 1;
}

SetCameraBreakState(cameraid, camerastate)
{
    if (camerastate < 0 || camerastate > 1) return 1;

    CCTVInfo[cameraid][tvBreak] = camerastate;
    SQL_SetInteger("cctvs", "break", CCTVInfo[cameraid][tvBreak], CCTVInfo[cameraid][tvID]);

    if (!camerastate)
    {
        if (IsValidDynamic3DTextLabel(CCTVInfo[cameraid][tvText]))
        {
            DestroyDynamic3DTextLabel(CCTVInfo[cameraid][tvText]);
            CCTVInfo[cameraid][tvText] = Text3D:INVALID_3DTEXT_ID;
        }
    }

    else
    {
        if (!IsValidDynamic3DTextLabel(CCTVInfo[cameraid][tvText]))
        {
            CCTVInfo[cameraid][tvText] = CreateDynamic3DTextLabel("(( ARIZALI ))", COLOR_GREY, CCTVInfo[cameraid][tvPosX], CCTVInfo[cameraid][tvPosY], CCTVInfo[cameraid][tvPosZ]-0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CCTVInfo[cameraid][tvVW], CCTVInfo[cameraid][tvInt]);
        }
    }
    return 1;
}

GetNearestCamera(playerid, Float:near_cam = 15.0, camera_state = 0)
{
    for(new i = 0; i < MAX_CCTV; i++)
    {
        if (!CCTVInfo[i][tvObjectOn])                        continue;
        if (!IsValidDynamicObject(CCTVInfo[i][tvCollision])) continue;
        if (camera_state)
        {
            if (CCTVInfo[i][tvBreak])                        continue;
            if (CCTVInfo[i][tvSignal])                       continue;
            if (PCamera[playerid][i][pc_used])               continue;
        }

        if (IsPlayerInRangeOfPoint(playerid, near_cam, CCTVInfo[i][tvPosX], CCTVInfo[i][tvPosY], CCTVInfo[i][tvPosZ]) && GetPlayerInterior(playerid) == CCTVInfo[i][tvInt] && GetPlayerVirtualWorld(playerid) == CCTVInfo[i][tvVW])
        {
            return i;
        }
    }
    return -1;
}

CheckCCTVEquals(cctv_name[])
{
    for(new i = 0; i < MAX_CCTV; i++)
    {
        if (!CCTVInfo[i][tvObjectOn])    continue;
        if (isequal(CCTVInfo[i][tvName], cctv_name)) return 0;
    }
    return 1;
} //î

CCTV_PlayerTimer(playerid)
{
    for(new j = 0; j < MAX_CCTV; j++)
	{
        new cam_arr = PCamera[playerid][j];

		if (cam_arr[pc_used])
		{
			if (cam_arr[pc_time] > 0) cam_arr[pc_time]--;
			else
			{
				cam_arr[pc_used] =
				cam_arr[pc_time] = 0;
			}
		}
    }
    return 1;
}

CMD:cctv(playerid, params[])
{
	new id;

	if (!IsPlayerFactionPolice(playerid))	return SendErrorMessage(playerid, "Polis memuru olmalýsýnýz.");

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/cctv [goruntule / ayril / liste]");
		return 1;
	}

	if (CompareStrings(option, "goruntule"))
	{
		new factionid = PlayerInfo[playerid][pFaction];
		if (!IsPlayerInRangeOfPoint(playerid, 30.0, 2278.5244,-225.3959,987.3411)) {
			return SendErrorMessage(playerid, "Bu özelliði LSPD Office 1 odasýnda kullanabilirsiniz.");
		}

		if (sscanf(secoption,"d", id))								return SendHelpMessage(playerid, "/cctv goruntule [ID]");
		if (id < 0 || id > MAX_CCTV-1 || !CCTVInfo[id][tvObjectOn])	return SendErrorMessage(playerid, "CCTV bulunamadý.");
		if (CCTVInfo[id][tvBreak])	{
			Waypoint_Set(playerid, CCTVInfo[id][tvPosX],CCTVInfo[id][tvPosY],CCTVInfo[id][tvPosZ], 3.0);
			return SendErrorMessage(playerid, "CCTV arýzalý.");
		}

    	if (!pTemp[playerid][pCCTV])
		{
			SavePlayerPos(playerid);
			pTemp[playerid][pCCTV] = 1;
            SetPVarInt(playerid, "CCTV:ID", id + 1);

			if (IsPlayerInAnyVehicle(playerid)) {
				SetPVarInt(playerid, #CCTV_VEH, GetPlayerVehicleID(playerid));
				SetPVarInt(playerid, #CCTV_VEH_SEAT, GetPlayerVehicleSeat(playerid));
				RemovePlayerFromVehicle(playerid);
			}

			SetInterior(playerid, CCTVInfo[id][tvInt]);
			SetWorld(playerid, CCTVInfo[id][tvVW]);
			for(new i; i < 12; i++) GetPlayerWeaponData(playerid, i, PlayerInfo[playerid][pScriptedGun][i], PlayerInfo[playerid][pScriptedAmmo][i]);

			if (MdcInfo[playerid][mdcCreated]) {
				MDC_Hide(playerid);
				SetPVarInt(playerid, #CCTV_MDC_USE, 1);
			}

			for(new i; i < 11;i++) TextDrawShowForPlayer(playerid, zond_cam[i]);

			SetTimerEx("CCTV_PLA_TIMER", 1000, false, "ii", playerid, id);
		}
	}

	else if (CompareStrings(option, "liste"))
	{
		new dialog_header[96] = "{FFFFFF}CCTV\t{FFFFFF}CCTV ID\t{FFFFFF}Durum\n", dialog_body[3072];

		format(dialog_body, sizeof(dialog_body), "%s", dialog_header);

		new count;
		for(new i = 0; i < MAX_CCTV; i++)
		{
			if (CCTVInfo[i][tvObjectOn])
			{
                new break_str[24];
				count++;

                if (CCTVInfo[i][tvBreak])    format(break_str, sizeof(break_str), "{CC0000}Deaktif");
                else                        format(break_str, sizeof(break_str), "{00B200}Aktif");

				format(dialog_body, sizeof(dialog_body), "%s%s\t%i\t%s\n", dialog_body, CCTVInfo[i][tvName], i, break_str);
			}
		}
		if (!count)	dialog_body = "CCTV yok.";
		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}CCTV Listesi", dialog_body, "Kapat", "");
		return 1;
	}

	else if (CompareStrings(option, "ayril"))
	{
		if (!pTemp[playerid][pCCTV]) return SendErrorMessage(playerid, "CCTV izlemiyorsunuz.");

		TogglePlayerSpectating(playerid, 0);

		SetInterior(playerid, PlayerInfo[playerid][pInt]);
		SetWorld(playerid, PlayerInfo[playerid][pWorld]);

		for(new i; i < 11; i++) TextDrawHideForPlayer(playerid, zond_cam[i]);

		for(new i; i < 12; i++) GivePlayerWeapon(playerid, PlayerInfo[playerid][pScriptedGun][i], PlayerInfo[playerid][pScriptedAmmo][i]);

		if (GetPVarInt(playerid, #CCTV_MDC_USE) && !MdcInfo[playerid][mdcCreated]) {
			MDC_Show(playerid, PAGE_CCTV);
			DeletePVar(playerid, #CCTV_MDC_USE);
		}

		if (GetPVarInt(playerid, #CCTV_VEH)) SetTimerEx("CCTV_VEH_TIMER", 1000, false, "i", playerid);
	}

	else
	{
		SendHelpMessage(playerid, "/cctv [ayarlar]");
		SendSyntaxMessage(playerid, "goruntule/ayril/liste");
	}
	return 1;
}

this::CCTV_VEH_TIMER(playerid) {
	PutPlayerInVeh(playerid, GetPVarInt(playerid, #CCTV_VEH), GetPVarInt(playerid, #CCTV_VEH_SEAT));
	DeletePVar(playerid, #CCTV_VEH);
	DeletePVar(playerid, #CCTV_VEH_SEAT);
	return 1;
}

this::CCTV_PLA_TIMER(playerid, id) {
	TogglePlayerSpectating(playerid, 1);
	AttachCameraToDynamicObject(playerid, CCTVInfo[id][tvObject]);
	SendHelpMessage(playerid, "CCTV'yi kontrol etmek için farenizi kullanabilirsiniz. CCTV modundan çýkmak için: {DABB3E}/cctv ayril");
	return 1;
}//î

/* Chopshop sistemi */

ChopShop_OnGameModeInit()
{
	return mysql_tquery(dbHandle, "SELECT * FROM `chopshop` ORDER BY id", "Query_LoadChopshop");
}

this::OnCSCreated(playerid, faction, Float: offX, Float: offY, Float: offZ, Float: rotX, Float: rotY, Float: rotZ)
{
	new idx = -1;
	for(new i = 0; i < MAX_CHOPSHOP; i++)
	{
		if (chopshop_data[i][chopshop_exist] == true) continue;

		idx = i;
		break;
	}

	chopshop_data[idx][chopshop_id] = cache_insert_id();
	chopshop_data[idx][chopshop_pos][0] = offX;
	chopshop_data[idx][chopshop_pos][1] = offY;
	chopshop_data[idx][chopshop_pos][2] = offZ;
	chopshop_data[idx][chopshop_pos][3] = rotX;
	chopshop_data[idx][chopshop_pos][4] = rotY;
	chopshop_data[idx][chopshop_pos][5] = rotZ;
	chopshop_data[idx][chopshop_faction] = faction;
	chopshop_data[idx][chopshop_money] = 0;
	chopshop_data[idx][chopshop_vehs] = 0;
	chopshop_data[idx][chopshop_procent] = 50;
	chopshop_data[idx][chopshop_exist] = true;

    chopshop_data[idx][chopshop_object][0] = CreateDynamicObject(3077, offX, offY, offZ, rotX, rotY, rotZ);

	GetRandomModel(idx);
	SaveChopshop(idx);

	return 1;
}

ShowChopShopInfo(playerid, id)
{

    static string[] = "Sahip (birlik): %s [%i]\n\
							Demonte makineler: %i\n\
							Gelir: +$%i";
	new msg[sizeof(string) + 64];

	format(msg, sizeof(msg), string, GetInitials(Factions[chopshop_data[id][chopshop_faction]][fName]), chopshop_data[id][chopshop_faction], chopshop_data[id][chopshop_vehs], chopshop_data[id][chopshop_money]);

	Dialog_Show(playerid, ChopShopInfo, DIALOG_STYLE_MSGBOX, "Chopshop Bilgi", msg, "<<", "");
    return 1;
}

this::Query_LoadChopshop()
{
	if (!cache_num_rows()) return printf("[ChopShop] Kayýt Bulunamadý");

	new rows, fields;
	rows = cache_num_rows();
	fields = cache_num_fields();
	new count = 0;

	for(new i = 0; i < rows && i < MAX_CHOPSHOP; i++)
	{
        cache_get_value_int(i, "id", chopshop_data[i][chopshop_id]);
        cache_get_value_float(i, "offsetX", chopshop_data[i][chopshop_pos][0]);
        cache_get_value_float(i, "offsetY", chopshop_data[i][chopshop_pos][1]);
        cache_get_value_float(i, "offsetZ", chopshop_data[i][chopshop_pos][2]);
        cache_get_value_float(i, "rotX", chopshop_data[i][chopshop_pos][3]);
        cache_get_value_float(i, "rotY", chopshop_data[i][chopshop_pos][4]);
        cache_get_value_float(i, "rotZ", chopshop_data[i][chopshop_pos][5]);
        cache_get_value_int(i, "faction", chopshop_data[i][chopshop_faction]);
        cache_get_value_int(i, "money", chopshop_data[i][chopshop_money]);
        cache_get_value_int(i, "vehicles", chopshop_data[i][chopshop_vehs]);
        cache_get_value_int(i, "procent", chopshop_data[i][chopshop_procent]);
		chopshop_data[i][chopshop_exist] = true;

    	chopshop_data[i][chopshop_object][0] = CreateDynamicObject(3077, chopshop_data[i][chopshop_pos][0], chopshop_data[i][chopshop_pos][1], chopshop_data[i][chopshop_pos][2], chopshop_data[i][chopshop_pos][3], chopshop_data[i][chopshop_pos][4], chopshop_data[i][chopshop_pos][5]);

		GetRandomModel(i);
		count ++;
	}
	printf("[ChopShop] Satir - %i. Yuklenen - %i. Sure - 0 ms.", cache_num_rows(), count);
	return 1;
}

RemoveChopShop(i)
{
	new query[64];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `chopshop` WHERE id = %d", chopshop_data[i][chopshop_id]);
	mysql_tquery(dbHandle, query);

	chopshop_data[i][chopshop_id] = 0;
	chopshop_data[i][chopshop_pos][0] = 0.0;
	chopshop_data[i][chopshop_pos][1] = 0.0;
	chopshop_data[i][chopshop_pos][2] = 0.0;
	chopshop_data[i][chopshop_pos][3] = 0.0;
	chopshop_data[i][chopshop_pos][4] = 0.0;
	chopshop_data[i][chopshop_pos][5] = 0.0;
	chopshop_data[i][chopshop_faction] = 0;
	chopshop_data[i][chopshop_money] = 0;
	chopshop_data[i][chopshop_vehs] = 0;
	chopshop_data[i][chopshop_procent] = 0;
	chopshop_data[i][chopshop_exist] = false;

	DestroyDynamicObject(chopshop_data[i][chopshop_object][0]);
	DestroyDynamicObject(chopshop_data[i][chopshop_object][1]);

	return 1;
}

stock SaveChopshop(id)
{
	new query[300];

	mysql_format(dbHandle, query, sizeof(query), "UPDATE chopshop SET offsetX = %f, offsetY = %f, offsetZ = %f, rotX = %f, rotY = %f, rotZ = %f, faction = %i, money = %i, vehicles = %i, procent = %i WHERE id = %i",
		chopshop_data[id][chopshop_pos][0],
		chopshop_data[id][chopshop_pos][1],
		chopshop_data[id][chopshop_pos][2],
		chopshop_data[id][chopshop_pos][3],
		chopshop_data[id][chopshop_pos][4],
		chopshop_data[id][chopshop_pos][5],
		chopshop_data[id][chopshop_faction],
		chopshop_data[id][chopshop_money],
		chopshop_data[id][chopshop_vehs],
		chopshop_data[id][chopshop_procent],
		chopshop_data[id][chopshop_id]);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock GetChopshopID(playerid)
{
	for(new i; i < MAX_CHOPSHOP; i ++)
	{
	    if (!chopshop_data[i][chopshop_exist])
			continue;

	    if (IsPlayerInRangeOfPoint(playerid, 5.0, chopshop_data[i][chopshop_pos][0], chopshop_data[i][chopshop_pos][1], chopshop_data[i][chopshop_pos][2]))
	    {
	        return i;
	    }
	}
	return -1;
}

stock IsFactionHasChopShop(faction)
{
	for(new i = 0; i < MAX_CHOPSHOP; i ++)
	{
		if (chopshop_data[i][chopshop_faction] == faction) return 1;
	}
	return 0;
}

stock CheckWantedModel(cs_id, modelid)
{
	if (cs_id == -1)		return 1;
	if (modelid < 400)	return 1;

	for(new i = 0; i < 10; i ++)
	{
		if (chopshop_data[cs_id][chopshop_wanted][i] == modelid)
		{
		    return 1;
		}
	}
	return 0;
}

stock GetRandomModel(id)
{
	if (id == -1) return 1;

	for(new i = 0; i < 10; i ++)
	{
		if (chopshop_data[id][chopshop_exist])
		{
		    chopshop_data[id][chopshop_wanted][i] = vehicles_info[random(sizeof(vehicles_info))][cCarModel]; //47îð;//
		}
	}

	DestroyDynamicObject(chopshop_data[id][chopshop_object][1]);

	if (chopshop_data[id][chopshop_pos][5] > 0) chopshop_data[id][chopshop_object][1] = CreateDynamicObject(19482, chopshop_data[id][chopshop_pos][0], chopshop_data[id][chopshop_pos][1]+0.1, chopshop_data[id][chopshop_pos][2]+1.9, chopshop_data[id][chopshop_pos][3], chopshop_data[id][chopshop_pos][4], chopshop_data[id][chopshop_pos][5]-90);
	else           							   chopshop_data[id][chopshop_object][1] = CreateDynamicObject(19482, chopshop_data[id][chopshop_pos][0], chopshop_data[id][chopshop_pos][1]+0.1, chopshop_data[id][chopshop_pos][2]+1.9, chopshop_data[id][chopshop_pos][3], chopshop_data[id][chopshop_pos][4], chopshop_data[id][chopshop_pos][5]+90);

	UpdateChopShopText(id);

	chopshop_data[id][chopshop_timer] = 0;
	return 0;
}

UpdateChopShopText(id)
{
	new string[512];
	format(string, sizeof(string), "Aranan araclar\n(( /aracteslim ))\n%s     %s\n%s     %s\n%s     %s\n%s     %s\n%s     %s",
		VehicleNames[chopshop_data[id][chopshop_wanted][0]-400],
		VehicleNames[chopshop_data[id][chopshop_wanted][1]-400],
		VehicleNames[chopshop_data[id][chopshop_wanted][2]-400],
		VehicleNames[chopshop_data[id][chopshop_wanted][3]-400],
		VehicleNames[chopshop_data[id][chopshop_wanted][4]-400],
		VehicleNames[chopshop_data[id][chopshop_wanted][5]-400],
		VehicleNames[chopshop_data[id][chopshop_wanted][6]-400],
		VehicleNames[chopshop_data[id][chopshop_wanted][7]-400],
		VehicleNames[chopshop_data[id][chopshop_wanted][8]-400],
		VehicleNames[chopshop_data[id][chopshop_wanted][9]-400]
	);

	SetDynamicObjectMaterialText(chopshop_data[id][chopshop_object][1], 0, string, OBJECT_MATERIAL_SIZE_512x256, "Comic Sans MS", 26, 1, -1, 0, 1);
}


stock CJ_MissionReward(vehicleid)
{
	new
		car_price = GetVehiclePrice(GetVehicleModel(vehicleid)),
		count,
		final_money = 1000,
		Float: vehHP
	;

	GetVehicleHealth(vehicleid, vehHP);
	final_money += floatround(car_price * 0.1 * vehHP/GetVehicleMaxHealth(vehicleid));

	new component;
	for(new j; j < 14; j++)
	{
	    component = GetVehicleComponentInSlot(vehicleid, j);
	    if (!component) continue;
	    RemoveVehicleComponent(vehicleid, component);
        VehicleInfo[vehicleid][carComponent][GetVehicleComponentType(component)] = 0;
        SaveComponent(vehicleid, j);

		count++;
	}

	final_money += (count * 150);
	return final_money;
}

stock EditChopShop(playerid, id)
{
	if (!chopshop_data[id][chopshop_exist]) return SendErrorMessage(playerid, "Böyle bir chopshop yok!");

	SetPVarInt(playerid, #EditChopShop, 2);
	return EditDynamicObject(playerid, chopshop_data[id][chopshop_object][0]);
}

ChSh_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    if (GetPVarInt(playerid, #EditChopShop) == 1 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
    {
		if (response == EDIT_RESPONSE_FINAL) {
			new faction = GetPVarInt(playerid, #ChopShop_Faction);
			new insert[256];

			SendSyntaxMessage(playerid, "Baþarýyla yeni bir Chopshop oluþturdunuz.");
			if (!CheckAdmin(playerid, ADMIN_LEVEL_2) && !IsAdminDuty(playerid)) GiveCash(playerid, -CHOPSHOP_PRICE);

            mysql_format(dbHandle, insert, sizeof(insert), "INSERT INTO chopshop (offsetX, offsetY, offsetZ, rotX, rotY, rotZ) VALUES (%f, %f, %f, %f, %f, %f)", x, y+1, z, 0.0, 0.0, 0.0);
            mysql_tquery(dbHandle, insert, "OnCSCreated", "iiffffff", playerid, faction, x, y+1, z, 0.0, 0.0, 0.0);
		}

		DestroyDynamicObject(objectid);
        DeletePVar(playerid, #EditChopShop);
		DeletePVar(playerid, #ChopShop_Faction);
        return 1;
    }

	if (GetPVarInt(playerid, #EditChopShop) == 2 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
    {
		if (response == EDIT_RESPONSE_FINAL) {
			new insert[256];
			mysql_format(dbHandle, insert, sizeof(insert), "INSERT INTO chopshop (offsetX, offsetY, offsetZ, rotX, rotY, rotZ) VALUES (%f, %f, %f, %f, %f, %f)", x, y, z, rx, ry, rz);
			mysql_tquery(dbHandle, insert);

			new id = GetChopshopID(playerid);

			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			GetDynamicObjectPos(objectid, chopshop_data[id][chopshop_pos][0], chopshop_data[id][chopshop_pos][1], chopshop_data[id][chopshop_pos][2]);
            GetDynamicObjectRot(objectid, chopshop_data[id][chopshop_pos][3], chopshop_data[id][chopshop_pos][4], chopshop_data[id][chopshop_pos][5]);

			DestroyDynamicObject(chopshop_data[id][chopshop_object][1]);

			if (chopshop_data[id][chopshop_pos][5] > 0) chopshop_data[id][chopshop_object][1] = CreateDynamicObject(19482, chopshop_data[id][chopshop_pos][0], chopshop_data[id][chopshop_pos][1]+0.1, chopshop_data[id][chopshop_pos][2]+1.9, chopshop_data[id][chopshop_pos][3], chopshop_data[id][chopshop_pos][4], chopshop_data[id][chopshop_pos][5]-90);
			else           							   chopshop_data[id][chopshop_object][1] = CreateDynamicObject(19482, chopshop_data[id][chopshop_pos][0], chopshop_data[id][chopshop_pos][1]+0.1, chopshop_data[id][chopshop_pos][2]+1.9, chopshop_data[id][chopshop_pos][3], chopshop_data[id][chopshop_pos][4], chopshop_data[id][chopshop_pos][5]+90);


			UpdateChopShopText(id);
		}

        DeletePVar(playerid, #EditChopShop);
        return 1;
    }
    return 1;
}

Dialog:DIALOG_CHOPSHOP(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;

    switch(listitem)
    {
        case 0: {
            if (GetChopshopID(playerid) == -1) {
                new idx = -1;
                for(new i = 0; i < MAX_CHOPSHOP; i++)
                {
                    if (chopshop_data[i][chopshop_exist] == true) continue;

                    idx = i;
                    break;
                }
                if (idx == -1)   return SendErrorMessage(playerid, "Tüm çalýþma alanlarý dolu!");

                new Float: x, Float: y, Float: z;
                GetPlayerPos(playerid, x, y, z);

                new faction = 0;

                if (!CheckAdmin(playerid, ADMIN_LEVEL_2) && !IsAdminDuty(playerid)) {
                    faction = PlayerInfo[playerid][pFaction];
                }

                SetPVarInt(playerid, #EditChopShop, 1);
		        SetPVarInt(playerid, #ChopShop_Faction, faction);

                new temp_object = CreateDynamicObject(3077, x+1.0, y+1.0, z, 0.0, 0.0, 0.0);
				EditDynamicObject(playerid, temp_object);

                return 1;
            } else {
                SendSyntaxMessage(playerid, "Chopshopu sildiniz: [ID:%i].", GetChopshopID(playerid));
                RemoveChopShop(GetChopshopID(playerid));
            }
        }
        case 1: {
            if (chopshop_data[GetChopshopID(playerid)][chopshop_timer] < 30) return SendErrorMessage(playerid, "Liste yakýn zamanda güncellendi!");
            GetRandomModel( GetChopshopID(playerid) );
        }
        case 2: ShowChopShopInfo(playerid, GetChopshopID(playerid));
        case 3: {
            new msg[256];
            format(msg, sizeof(msg), "{FFFFFF}Artýk getirdiðiniz her araçtan aldýðýnýz yüzde: {FF6347}%i%%\n\n{FFFFFF}Yeni yüzde gir {C3C3C3}(sayý):\t\t{FF6347}(1%%-85%%)", chopshop_data[GetChopshopID(playerid)][chopshop_procent]);
            Dialog_Show(playerid, ChopShopProcent, DIALOG_STYLE_INPUT, "Yüzde Deðiþtir", msg, "Düzenle", "Geri Dön");
        }
        case 4: EditChopShop(playerid, GetChopshopID(playerid));
    }
    return 1;
}

Dialog:ChopShopInfo(playerid, response, listitem, inputtext[])
{
     return pc_cmd_chopshop(playerid, "");
}

//ChopShîð
Dialog:ChopShopProcent(playerid, response, listitem, inputtext[])
{
    if (!response) return pc_cmd_chopshop(playerid, "");

    if (isnull(inputtext) || strval(inputtext) < 1 || strval(inputtext) > 85) {
        new msg[256];
        format(msg, sizeof(msg), "{FFFFFF}Artýk getirdiðiniz her araçtan aldýðýnýz yüzde: {FF6347}%i%%\n\n{FFFFFF}Yeni yüzde gir {C3C3C3}(sayý):\t\t{FF6347}(1%%-85%%)", chopshop_data[GetChopshopID(playerid)][chopshop_procent]);
        Dialog_Show(playerid, ChopShopProcent, DIALOG_STYLE_INPUT, "Yüzde Deðiþtir", msg, "Düzenle", "Geri Dön");
    }

    SendSyntaxMessage(playerid, "Chopshop yüzdesini deðiþtirdiniz, yeni yüzde: {FF6347}%i{FFFFFF}", strval(inputtext));

    chopshop_data[GetChopshopID(playerid)][chopshop_procent] = strval(inputtext);
    SQL_SetInteger("chopshop", "procent", chopshop_data[GetChopshopID(playerid)][chopshop_procent], chopshop_data[GetChopshopID(playerid)][chopshop_id]);
    return 1;
}

CMD:chopshop(playerid, params[])
{
    if (!IsAdminDuty(playerid) && !CheckAdmin(playerid, ADMIN_LEVEL_3) && !isLeader(playerid))
        return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
    if (!IsAdminDuty(playerid) && !CheckAdmin(playerid, ADMIN_LEVEL_3) && Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_GANG && Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_MAFIA)
        return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");

    if (GetChopshopID(playerid) != -1)
    {
        Dialog_Show(playerid, DIALOG_CHOPSHOP, DIALOG_STYLE_LIST, "Chopshop", "Chopshop sil\nAraç listesi güncelle\nChopshop istatistik\nYüzdeyi deðiþtir\nChopshop pozisyonu deðiþtir", "Seç", "<<");
    }
    else if (IsAdminDuty(playerid) && CheckAdmin(playerid, ADMIN_LEVEL_2) || !IsFactionHasChopShop(PlayerInfo[playerid][pFaction])) {
            Dialog_Show(playerid, DIALOG_CHOPSHOP, DIALOG_STYLE_LIST, "Chopshop", "Chopshop Oluþtur", "Seç", "<<");
    }

    return 1;
} //î

/* Borsa sistemi */

Borsa_OnGameModeInit()
{
    return mysql_tquery(dbHandle, "SELECT * FROM `borsa`", "LoadBorsa");
}

forward LoadBorsa();

public LoadBorsa()
{
    new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows)	return print("[Borsa] Kayit bulunamadi.");


	for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "id", Borsa[i][bID]);
		cache_get_value(i, "name", Borsa[i][bName]);
	    cache_get_value_int(i, "price", Borsa[i][bPrice]);
		total++;
	}
	printf("[Borsa] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

CMD:sadrazaminsoltas(playerid, listitem){
    new string[128];
    if (PlayerInfo[playerid][pInjured] == 2) return SendErrorMessage(playerid, "Yaralýyken herhangi bir iþlem yapamazsýnýz.");
    format(string, sizeof(string), "Bitcoin %d$\nEtherium%d$", Borsa[0][bPrice], Borsa[1][bPrice]);
    Dialog_Show(playerid, BorsaDialog, DIALOG_STYLE_LIST, "{FFFFFF}Borsa", string, "Seç", "Iptal");
    return 1;
}


Dialog:BorsaDialog(playerid, response, listitem){

    if(!response) return 1;

     if(listitem == 0) return Dialog_Show(playerid, BorsaDialogBitcoinInfo, DIALOG_STYLE_LIST, "{FFFFFF}Borsa", "Bitcoin Fiyat: %d\nElinizde bulunan %d adet\n Satýn Al\nSat", "Seç", "Iptal", Borsa[0][bPrice], PlayerInfo[playerid][pBitcoin]);
    //if(listitem == 1) return  Dialog_Show(playerid, BorsaDialogEtherium, DIALOG_STYLE_LIST, "{FFFFFF}Borsa", string, "Seç", "Iptal");
    return 1;
}

Dialog:BorsaDialogBitcoinInfo(playerid, response, listitem)
{
    if(!response) return 1;

     if(listitem == 2) Dialog_Show(playerid, BorsaDialogBitcoinBuy, DIALOG_STYLE_INPUT, "{FFFFFF}Borsa", "Kaç tane satýn alacaksýnýz?", "Satýn Al", "Iptal");
     else if(listitem == 3) Dialog_Show(playerid, BorsaDialogBitcoinSell, DIALOG_STYLE_INPUT, "{FFFFFF}Borsa", "Kaç tane satacaksýnýz?", "Satýn Al", "Iptal");
//return Dialog_Show(playerid, BorsaDialog, DIALOG_STYLE_LIST, "{FFFFFF}Borsa", "Bitcoin %d$\nEtherium%d$", Borsa[0][bPrice], Borsa[1][bPrice], "Satýn Al", "Iptal");
return 1;
}

Dialog:BorsaDialogBitcoinBuy(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    new string[128], amount;
    format(string, sizeof(string), "Bitcoin %d$\nEtherium%d$", Borsa[0][bPrice], Borsa[1][bPrice]);
    amount = strval(inputtext);
    if(amount <= 0) return Dialog_Show(playerid, BorsaDialogBitcoinBuy, DIALOG_STYLE_INPUT, "{FFFFFF}Borsa", "Lütfen geçerli miktar giriniz!\nKaç tane satýn alacaksýnýz?", "Satýn Al", "Iptal");

    new totalCost = amount * Borsa[0][bPrice];

    if(PlayerInfo[playerid][pBank] < totalCost)
    {
        SendErrorMessage(playerid, "Yetersiz bakiye.");
        format(string, sizeof(string), "Bitcoin %d$\nEtherium%d$", Borsa[0][bPrice], Borsa[1][bPrice]);
        return Dialog_Show(playerid, BorsaDialog, DIALOG_STYLE_LIST, "{FFFFFF}Borsa", string, "Satýn Al", "Iptal");
    }


    new oldBitcoin = PlayerInfo[playerid][pBitcoin];
    PlayerInfo[playerid][pBitcoin] += amount;


    GiveCash(playerid, -totalCost);



    new query[256];
    format(query, sizeof(query), "UPDATE users SET bitcoin = bitcoin + %d WHERE accountid = %d", amount,  PlayerInfo[playerid][pAccID]);
    mysql_tquery(dbHandle, query);

    SendServerMessage(playerid, "%d adet Bitcoin satýn alýndý. Yeni Bitcoin miktarýnýz: %d", amount, PlayerInfo[playerid][pBitcoin]);
    format(string, sizeof(string), "Bitcoin %d$\nEtherium%d$", Borsa[0][bPrice], Borsa[1][bPrice]);
    return 1;
}


Dialog:BorsaDialogBitcoinSell(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;

    new string[128], amount;
    format(string, sizeof(string), "Bitcoin %d$\nEtherium%d$", Borsa[0][bPrice], Borsa[1][bPrice]);
    amount = strval(inputtext);
    if (amount <= 0) return Dialog_Show(playerid, BorsaDialogBitcoinSell, DIALOG_STYLE_INPUT, "{FFFFFF}Borsa", "Lütfen geçerli miktar giriniz!\nKaç tane satacaksýnýz?", "Sat", "Iptal");


    if (PlayerInfo[playerid][pBitcoin] < amount)
    {
        SendErrorMessage(playerid, "Yetersiz Bitcoin miktarý.");
        return Dialog_Show(playerid, BorsaDialog, DIALOG_STYLE_LIST, "{FFFFFF}Borsa", string, "Seç", "Iptal");
    }


    GiveCash(playerid, amount * Borsa[0][bPrice]);
    PlayerInfo[playerid][pBitcoin] -= amount;


    new query[256];
    format(query, sizeof(query), "UPDATE users SET bitcoin = bitcoin - %d WHERE accountid = %d", amount, PlayerInfo[playerid][pAccID]);
    mysql_tquery(dbHandle, query);

    SendServerMessage(playerid, "%d adet Bitcoin satýldý.", amount);
    return 1;
}



/* Boombox sistemi */

Box_OnPlayerLeaveArea(playerid, areaid)
{
    new userid = pTemp[playerid][pBoombox];
	if (userid != INVALID_PLAYER_ID && areaid == BoomboxInfo[userid][bArea])
	{
	    pTemp[playerid][pBoombox] = INVALID_PLAYER_ID;
        StopAudioStreamForPlayer(playerid);
	    return 1;
	}
    return 1;
}

Box_OnPlayerEnterArea(playerid, areaid)
{
	if (!IsPlayerInAnyVehicle(playerid))
	{
		for(new i; i < Iter_Count(boomboxIter); i++)
		{
	    	if (!BoomboxInfo[i][bUsed] || areaid != BoomboxInfo[i][bArea])	continue;

        	pTemp[playerid][pBoombox] = i;
        	StopAudioStreamForPlayer(playerid);

        	if (strlen(BoomboxInfo[i][bUrl])) PlayAudioStreamForPlayer(playerid, BoomboxInfo[i][bUrl], BoomboxInfo[i][bPosX], BoomboxInfo[i][bPosY], BoomboxInfo[i][bPosZ], 50.0, 1);

			break;
		}
	}
	return 1;
}

Box_OnPlayerStateChange(playerid, newstate)
{
	if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		new vehicle = GetPlayerVehicleID(playerid), Float:x, Float:y, Float:z;

		GetVehiclePos(vehicle, x, y, z);

	    if (pTemp[playerid][pBoombox] != INVALID_PLAYER_ID)
	    {
	        pTemp[playerid][pBoombox] = INVALID_PLAYER_ID;
			StopAudioStreamForPlayer(playerid);
	    }

		if (VehicleInfo[vehicle][carRadioOn] == 1) PlayAudioStreamForPlayer(playerid, VehicleInfo[vehicle][carRadioURL]);
	}
	return 1;
}

Radio_OnGameModeInit()
{
	return mysql_tquery(dbHandle, "SELECT * FROM `radios`", "LoadDynamicRadios");
}

Box_OnPlayerExitVehicle(playerid)
{
	foreach(new i : Player)
	{
    	if (!IsPlayerLogged(i) || !BoomboxInfo[i][bUsed] || !IsPlayerInDynamicArea(playerid, BoomboxInfo[i][bArea])) continue;

		pTemp[playerid][pBoombox] = i;
 		StopAudioStreamForPlayer(playerid);

		if (strlen(BoomboxInfo[i][bUrl])) PlayAudioStreamForPlayer(playerid, BoomboxInfo[i][bUrl], BoomboxInfo[i][bPosX], BoomboxInfo[i][bPosY], BoomboxInfo[i][bPosZ], 50.0, 1);

		break;
	}
	return 1;
}

PlaceBoombox(playerid)
{
	if (BoomboxInfo[playerid][bUsed] != 0)				return SendErrorMessage(playerid, "Birden fazla boombox koyamazsýnýz.");
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)	return SendErrorMessage(playerid, "Boombox buraya yerleþtirilemez.");

	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || !BoomboxInfo[i][bUsed]) 	continue;
		if (IsPlayerInRangeOfPoint(i, 50.0, BoomboxInfo[i][bPosX], BoomboxInfo[i][bPosY], BoomboxInfo[i][bPosZ]) && BoomboxInfo[i][bUsed])		return SendErrorMessage(playerid, "Yakýn bir noktada boombox bulunuyor.");
	}

	new id = -1;
	if ((id = GetNearInsideHouse(playerid)) != -1 && HouseInfo[id][hRadioOn])	return SendErrorMessage(playerid, "Radyo zaten evde çalýyor.");
	else if ((id = GetNearInsideBiz(playerid)) != -1 && BizInfo[id][bizRadioOn])	return SendErrorMessage(playerid, "Radyo zaten iþletmede çalýyor.");

	SendSyntaxMessage(playerid, "Bir boombox yerleþtirdiniz, kontrol etmek için H tuþunu kullanýn.");

	GetXYInFrontOfPlayer(playerid, BoomboxInfo[playerid][bPosX], BoomboxInfo[playerid][bPosY], BoomboxInfo[playerid][bPosZ], 1.0);
 	BoomboxInfo[playerid][bInt] = GetInterior(playerid);
  	BoomboxInfo[playerid][bVW] = GetWorld(playerid);
   	BoomboxInfo[playerid][bUsed] = 1;
   	BoomboxInfo[playerid][bUrl] = EOS;
	BoomboxInfo[playerid][bObject] = CreateDynamicObject(2226, BoomboxInfo[playerid][bPosX], BoomboxInfo[playerid][bPosY], BoomboxInfo[playerid][bPosZ]-1.0, 0.0, 0.0, 0.0, BoomboxInfo[playerid][bVW], BoomboxInfo[playerid][bInt], -1, 300.0);
	BoomboxInfo[playerid][bArea] = CreateDynamicSphere(BoomboxInfo[playerid][bPosX], BoomboxInfo[playerid][bPosY], BoomboxInfo[playerid][bPosZ], 50.0, BoomboxInfo[playerid][bVW], BoomboxInfo[playerid][bInt]);
	pTemp[playerid][pBoombox] = playerid;
	StopAudioStreamForPlayer(playerid);
	Iter_Add(boomboxIter, playerid);
	return 1;
}

ShowBoomboxMenu(playerid)
{
	if (BoomboxInfo[playerid][bUsed] == 0 || Boombox_Nearest(playerid) == 0)	return 1;

	Dialog_Show(playerid, BoomBox, DIALOG_STYLE_LIST, "{FFFFFF}Boombox", "Radyo istasyonu deðiþtir\nMüziklerim\nBoombox kapat\nBoombox kaldýrýn", "Seç", "Ýptal");
	return 1;
}

ChangeUrlBoombox(playerid, url[])
{
    if (BoomboxInfo[playerid][bUsed] != 0 && Boombox_Nearest(playerid) != 0)
	{
		format(BoomboxInfo[playerid][bUrl], 156, url);

		new Float:pXaz, Float:pYaz, Float:pZaz;
	    GetPlayerPos(playerid, pXaz, pYaz, pZaz);

		foreach (new i : Player)
		{
			if (IsPlayerInRangeOfPoint(i, 50.0, pXaz, pXaz, pXaz) && !IsPlayerInAnyVehicle(playerid))
			{
				pTemp[i][pBoombox] = playerid;
			    StopAudioStreamForPlayer(i);
			    PlayAudioStreamForPlayer(i, BoomboxInfo[playerid][bUrl], BoomboxInfo[playerid][bPosX], BoomboxInfo[playerid][bPosY], BoomboxInfo[playerid][bPosZ], 50.0, 1);
			}
		}
		/*
		if(IsPlayerInDynamicArea(i, BoomboxInfo[i][bArea]) && !IsPlayerInAnyVehicle(i))
		{
			pTemp[i][pBoombox] = playerid;
			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, BoomboxInfo[playerid][bUrl], BoomboxInfo[playerid][bPosX], BoomboxInfo[playerid][bPosY], BoomboxInfo[playerid][bPosZ], 50.0, 1);
		}	*/
		SendServerMessage(playerid, "Müziði deðiþtirdiniz.");
		return 1;
	}

	new vehicle = GetPlayerVehicleID(playerid), id;

    if (IsDriver(playerid))
	{
		if (!VehicleInfo[vehicle][carRadio])	return SendErrorMessage(playerid, "Bu araçta radyo bulunmuyor.");

		VehicleInfo[vehicle][carRadioOn] = 1;
	    format(VehicleInfo[vehicle][carRadioURL], 156, url);
		SetPlayerChatBubble(playerid, "radyo istasyonunu deðiþtirir.", COLOR_PURPLE, 20.0, 4000);
	    foreach(new i : Player)
		{
			if (!IsPlayerLogged(i) || GetPlayerVehicleID(i) != vehicle) continue;

			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url);
		}
		return 1;
	}

	if ((id = GetNearInsideHouse(playerid)) != -1 && HouseInfo[id][hOwnerID] == PlayerInfo[playerid][pID])
	{
	    if (!HouseInfo[id][hRadio])	return SendErrorMessage(playerid, "Evinizde radyo bulunmuyor.");

		HouseInfo[id][hRadioOn] = 1;
		format(HouseInfo[id][hRadioURL], 156, url);
        SetPlayerChatBubble(playerid, "radyo istasyonunu deðiþtirir.", COLOR_PURPLE, 20.0, 4000);
	 	foreach(new i : Player)
		{
			if (!IsPlayerLogged(i) || GetNearInsideHouse(i) != id) continue;

            StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url);
			pTemp[i][pBoombox_house] = id;
		}
	    return 1;
	}
	else if ((id = GetNearInsideBiz(playerid)) != -1 && BizInfo[id][bizOwnerID] == PlayerInfo[playerid][pID])
	{
	    if (BizInfo[id][bizRadio] == 0)	return SendErrorMessage(playerid, "Ýþletmenizde radyo bulunmuyor.");

		BizInfo[id][bizRadioOn] = 1;
		format(BizInfo[id][bizRadioURL], 156, url);
        SetPlayerChatBubble(playerid, "radyo istasyonunu deðiþtirir.", COLOR_PURPLE, 20.0, 4000);
	 	foreach(new i : Player)
		{
			if (!IsPlayerLogged(i) || GetNearInsideBiz(i) != id)	continue;

            StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url);
			pTemp[i][pBoombox_biz] = id;
		}
	    return 1;
	}
	return 1;
}

Destroy_Boombox(playerid)
{
    if (BoomboxInfo[playerid][bUsed] == 0) 			return 1;

    BoomboxInfo[playerid][bUsed] = 0;

    foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || pTemp[i][pBoombox] != playerid) continue;

		StopAudioStreamForPlayer(i);
	}

	if (IsValidDynamicArea(BoomboxInfo[playerid][bArea]))		DestroyDynamicArea(BoomboxInfo[playerid][bArea]);
    if (IsValidDynamicObject(BoomboxInfo[playerid][bObject]))	DestroyDynamicObject(BoomboxInfo[playerid][bObject]);

	Iter_Remove(boomboxIter, playerid);

	return 1;
}

Boombox_Nearest(playerid)
{
	return (BoomboxInfo[playerid][bUsed] == 0 || !IsPlayerInRangeOfPoint(playerid, 2.0, BoomboxInfo[playerid][bPosX], BoomboxInfo[playerid][bPosY], BoomboxInfo[playerid][bPosZ]) || GetWorld(playerid) != BoomboxInfo[playerid][bVW] || GetInterior(playerid) != BoomboxInfo[playerid][bInt])?(0):(1);
}

ShowBoomBoxStations(playerid)
{
	return Dialog_Show(playerid, RadioStations, DIALOG_STYLE_LIST, "Tür Seçin", "Pop/Dance/Dubstep\nJazz/Country/Rock\nHip-hop/RnB/Reggae\nMüziklerim\nRadyoyu kapat", "Seç", "Kapat");
}

StopCarBoomBox(vehicle)
{
	if (VehicleInfo[vehicle][carRadioOn] != 1)	return 1;

    VehicleInfo[vehicle][carRadioOn] = 0;

	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || GetPlayerVehicleID(i) != vehicle)	continue;

		StopAudioStreamForPlayer(i);
	}
	return 1;
}

StopHouseBoomBox(houseid)
{
	if (HouseInfo[houseid][hRadioOn] != 1)	return 1;

	HouseInfo[houseid][hRadioOn] = 0;
	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || pTemp[i][pBoombox_house] != houseid) continue;

	 	StopAudioStreamForPlayer(i);
		pTemp[i][pBoombox_house] = -1;
	}
	return 1;
}

StopBusinessBoomBox(biz)
{
	if (BizInfo[biz][bizRadioOn] != 1)	return 1;

	BizInfo[biz][bizRadioOn] = 0;

	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || pTemp[i][pBoombox_biz] != biz)	continue;

		StopAudioStreamForPlayer(i);
		pTemp[i][pBoombox_biz] = -1;
	}
	return 1;
}

Dialog:BoomBox(playerid, response, listitem, inputtext[])
{
	if (!response)							return 1;
    if (BoomboxInfo[playerid][bUsed] == 0)	return SendErrorMessage(playerid, "Boombox'ýnýzý kullanmýyorsunuz.");
	if (Boombox_Nearest(playerid) == 0)		return SendErrorMessage(playerid, "Boombox'ýnýza yakýn olmalýsýnýz.");

	switch(listitem)
	{
	    case 0:	Dialog_Show(playerid, RadioStations, DIALOG_STYLE_LIST, "{FFFFFF} Tür Seçin", "Pop/Dance/Dubstep\nJazz/Country/Rock\nHip-hop/RnB/Reggae\nMüziklerim", "Seç", "Kapat");
	    case 1:	ShowMusicList(playerid);
		case 2:
		{
		    if (strlen(BoomboxInfo[playerid][bUrl]) == 0)	return SendErrorMessage(playerid, "Boombox çalýþmýyor.");

			SendSyntaxMessage(playerid,"Boombox'ý kapattýnýz.");
            BoomboxInfo[playerid][bUrl] = EOS;

            foreach(new i : Player)
            {
	    		if (!IsPlayerLogged(i) || pTemp[i][pBoombox] != playerid) continue;

                StopAudioStreamForPlayer(i);
			}
		}
		case 3:
	    {
			Destroy_Boombox(playerid);
			SendSyntaxMessage(playerid,"Boombox'ý kaldýrdýnýz.");
	    }
	}
	return 1;
} //bîîmbox

Dialog:RadioURL(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new radio = GetPVarInt(playerid, #select_radio)-1;

	ChangeUrlBoombox(playerid, RADIO_STATIONS[radio][listitem][boomboxUrl]);
	return 1;
}

Dialog:RadioStations(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	if (listitem == 4)
	{
	    new vehicle = GetPlayerVehicleID(playerid), id;

	    if (IsDriver(playerid))
		{
			if (VehicleInfo[vehicle][carRadio] == 0)	return SendErrorMessage(playerid, "Bu araçta radyo bulunmuyor.");

			if (VehicleInfo[vehicle][carRadioOn] != 0)
			{
				StopCarBoomBox(vehicle);
				SendSyntaxMessage(playerid, "Radyoyu kapattýnýz.");
			}
			return 1;
		}

		if ((id = GetNearInsideHouse(playerid)) != -1 && HouseInfo[id][hOwnerID] == PlayerInfo[playerid][pID])
		{
		    if (HouseInfo[id][hRadio] == 0)	return SendErrorMessage(playerid, "Evinizde radyo bulunmuyor.");

			if (HouseInfo[id][hRadioOn] != 0)
			{
				StopHouseBoomBox(id);
	            SendSyntaxMessage(playerid, "Radyoyu kapattýnýz.");
			}
		    return 1;
		}
		else if ((id = GetNearInsideBiz(playerid)) != -1 && BizInfo[id][bizOwnerID] == PlayerInfo[playerid][pID])
		{
		    if (BizInfo[id][bizRadio] == 0)	return SendErrorMessage(playerid, "Ýþletmenizde radyo bulunmuyor.");

			if (BizInfo[id][bizRadioOn] != 0)
			{
			    StopBusinessBoomBox(id);
			    SendSyntaxMessage(playerid, "Radyoyu kapattýnýz.");
			}
		    return 1;
		}
	    return 1;
	}

	if (listitem == 3)	return ShowMusicList(playerid);

	new str[15 * 32];

	for(new i; i != 15; i++)
	{
	    format(str, sizeof(str), "%s %s\n", str, RADIO_STATIONS[listitem][i][boomboxName]);
	}

	SetPVarInt(playerid, #select_radio, listitem+1);
    Dialog_Show(playerid, RadioURL, DIALOG_STYLE_LIST, "{FFFFFF}Radyo Ýstasyonu Seç", str, "Seç", "Kapat");
	return 1;
}

alias:radyoayarla("sarkiayarla", "muzikkutusu", "boombox", "radyo");
CMD:radyoayarla(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid), id;

    if (IsDriver(playerid))
	{
		if (VehicleInfo[vehicle][carRadio] == 0)	return SendErrorMessage(playerid, "Bu araçta radyo bulunmuyor.");

		ShowBoomBoxStations(playerid);
		return 1;
	}

	if ((id = GetNearInsideHouse(playerid)) != -1 && HouseInfo[id][hOwnerID] == PlayerInfo[playerid][pID])
	{
	    if (HouseInfo[id][hRadio] == 0)	return SendErrorMessage(playerid, "Evinizde radyo bulunmuyor.");

		ShowBoomBoxStations(playerid);
	    return 1;
	}
	else if ((id = GetNearInsideBiz(playerid)) != -1 && BizInfo[id][bizOwnerID] == PlayerInfo[playerid][pID])
	{
	    if (BizInfo[id][bizRadio] == 0)	return SendErrorMessage(playerid, "Ýþletmenizde radyo bulunmuyor.");

		ShowBoomBoxStations(playerid);
	    return 1;
	}
	return 1;
}

/* Ýllegal bölge */

// Birlik Bölgesi Gösterme / Gizleme Komutu
CMD:birlikbolgeler(playerid, params[])
{
	if (GetPVarInt(playerid, #show_birlik) == 1)
	{
	    DeletePVar(playerid, #show_birlik);
		for(new i; i < MAX_BIRLIK_ZONES; i++) GangZoneHideForPlayer(playerid, gz_birlik[i]);

	    SendSyntaxMessage(playerid, "Birlik bölgeleri haritadan kaldýrýldý.");
	    return 1;
	}

	SetPVarInt(playerid, #show_birlik, 1);
	for(new i; i < MAX_BIRLIK_ZONES; i++) GangZoneShowForPlayer(playerid, gz_birlik[i], 0xFF0000AA);

	SendSyntaxMessage(playerid, "Birlik bölgeleri haritada iþaretlendi. (ESC > Harita).");
	return 1;
}

CMD:avukatizni(playerid, params[])
{
	new userid;

	if (sscanf(params,"u",userid))										return SendHelpMessage(playerid, "/avukatizni [ID / Karakter Adý]"); //Komut
	if (!IsPlayerFactionCity(playerid))									return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
    if (!isLeader(playerid))											return SendErrorMessage(playerid, "Birlik yetkilisi deðilsiniz.");
	if (!IsPlayerLogged(userid))										return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))						return SendNotNearPlayer(playerid);
    if (PlayerInfo[userid][pFaction] != PlayerInfo[playerid][pFaction])	return SendErrorMessage(playerid, "Oyuncu birliðinize üye deðil.");

	if (PlayerInfo[userid][pLawyer] == 0)
	{
		PlayerInfo[userid][pLawyer] = 1;
		SendSyntaxMessage(userid, "%s %s adlý kiþi size avukat lisansý verdi.", GetRankName(playerid), GetNameEx(playerid));
		SendSyntaxMessage(playerid, "%s adlý kiþiye avukat lisansý verdiniz.", GetNameEx(userid));
		return 1;
	}

	PlayerInfo[userid][pLawyer] = 0;
	SendSyntaxMessage(userid, "%s %s adlý kiþi sizin avukat lisansýnýza elkoydu.", GetRankName(playerid), GetNameEx(playerid));
	SendSyntaxMessage(playerid, "%s adlý kiþinin avukat lisansýna elkoydunuz.", GetNameEx(userid));
	return 1;
}

CMD:yayinbaslat(playerid,params[])
{
	if (!IsPlayerFactionNews(playerid) && !IsPlayerFactionNewsOff(playerid))	return SendErrorMessage(playerid, "Herhangi bir haber þirketinde çalýþmýyorsunuz.");
	if (PlayerInfo[playerid][pSettings] & togNews)	return SendErrorMessage(playerid, "Haber akýþýný devre dýþý býraktýnýz. ");
	if (pTemp[playerid][pNews] != 0)				return SendErrorMessage(playerid, "Zaten yayýndasýn. Yayýndan çýkmak için /yayinbitir kullanýn. ");

	pTemp[playerid][pNews] = 1;
	SendSyntaxMessage(playerid,"Yayýný baþlattýnýz, artýk yazýlarýnýz haber olarak gidecek. Kapatmak için: /yayinbitir");
	return 1;
}

CMD:yayinbitir(playerid,params[])
{
	if (!IsPlayerFactionNews(playerid) && !IsPlayerFactionNewsOff(playerid))	return SendErrorMessage(playerid, "Herhangi bir haber þirketinde çalýþmýyorsunuz.");
	if (pTemp[playerid][pNews] == 0)	return SendErrorMessage(playerid, "Yayýnda deðilsin. Canlý yayýna geçmek için /yyinbitir kullanýn. ");

	pTemp[playerid][pNews] = 0;
	SendSyntaxMessage(playerid, "Yayýný bitirdiniz.");
	return 1;
}

CMD:yayindavet(playerid, params[])
{
    if (!IsPlayerFactionNews(playerid) && !IsPlayerFactionNewsOff(playerid))	return SendErrorMessage(playerid, "Herhangi bir haber þirketinde çalýþmýyorsunuz.");

	new userid;

	if (sscanf(params,"u",userid))								return SendHelpMessage(playerid, "/yayindavet [ID / isim]");
	if (PlayerInfo[playerid][pSettings] & togNews)				return SendErrorMessage(playerid, "Haber akýþýný devre dýþý býraktýnýz.");
	if (pTemp[playerid][pNews] == 0)							return SendErrorMessage(playerid, "Yayýnda deðilsin. Canlý yayýna geçmek için /yayinbaslat kullanýn. ");
	if (userid == playerid)										return SendErrorMessage(playerid, "Kendinizi bir röportaj için davet edemezsiniz.");
	if (!PlayerNearPlayer(3.0, playerid, userid))				return SendNotNearPlayer(playerid);
	if (pTemp[playerid][pInterviewPlayer] != INVALID_PLAYER_ID)	return SendErrorMessage(playerid, "Yayýn için davet edildiniz, lütfen biraz bekleyin veya daveti kabul edin.");
	if (pTemp[userid][pInterviewPlayer] != INVALID_PLAYER_ID)	return SendErrorMessage(playerid, "Oyuncuya bir röportaj daveti zaten gönderildi.");

    pTemp[userid][pInterviewPlayer] = playerid;
    SetPVarInt(userid, #accept_time, gettime() + 30);

    SendSyntaxMessage(playerid, "%s adlý kiþiyi yayýna davet ettiniz, lütfen bekleyin.", GetNameWithMask(userid));
	SendSyntaxMessage(userid, "%s sizi bir yayýna davet etti.", GetNameWithMask(playerid));
	SendSyntaxMessage(userid, "Daveti kabul etmek için Y tuþuna basabilirsiniz. ");
	return 1;
}

alias:yayindancikar("yayinayril", "yayindanayril");
CMD:yayindancikar(playerid, params[])
{
	if (pTemp[playerid][pInterview] != INVALID_PLAYER_ID)
	{
	    SendSyntaxMessage(playerid, "Yayýný bitirdiniz. ");
	    pTemp[playerid][pInterview] = INVALID_PLAYER_ID;
	    return 1;
	}

    if (!IsPlayerFactionNews(playerid) && !IsPlayerFactionNewsOff(playerid))	return SendErrorMessage(playerid, "Herhangi bir haber þirketinde çalýþmýyorsunuz.");

	new userid;

	if (sscanf(params,"u", userid))						return SendHelpMessage(playerid, "/yayindancikar [ID / isim]");
	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))		return SendNotNearPlayer(playerid);
	if (pTemp[userid][pInterview] == INVALID_PLAYER_ID)	return SendErrorMessage(playerid, "Bu oyuncuyla röportaj yapmýyorsunuz. ");

    SendSyntaxMessage(playerid, "%s ile yayýný bitirdiniz.", GetNameWithMask(userid));
	SendSyntaxMessage(userid, "%s sizinle yayýný bitirdi.", GetNameWithMask(playerid));
	pTemp[userid][pInterview] = INVALID_PLAYER_ID;
	return 1;
}

CMD:basinkarti(playerid, params[])
{
	if (!IsPlayerFactionNews(playerid) && !IsPlayerFactionNewsOff(playerid))					return SendErrorMessage(playerid, "Herhangi bir haber þirketinde çalýþmýyorsunuz.");

	if(!pTemp[playerid][pSanDuty])
	{
		SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s basýn kartýný takar.", GetNameWithMask(playerid));
		//SetPlayerColor(playerid, COLOUR_YELLOW);
		pTemp[playerid][pSanDuty] = true;
	} else {
		SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s basýn kartýný çýkartýr.", GetNameWithMask(playerid));
		//SetPlayerColor(playerid, COLOUR_WHITE);
		pTemp[playerid][pSanDuty] = false;
	}
	return 1;
}

alias:basingoster("basinkartigoster");
CMD:basingoster(playerid, params[])
{
	new userid;
	if (!IsPlayerFactionNews(playerid) && !IsPlayerFactionNewsOff(playerid))				return SendErrorMessage(playerid, "Herhangi bir haber þirketinde çalýþmýyorsunuz.");
	if (sscanf(params, "u", userid))														return SendHelpMessage(playerid, "/basingoster [ID / isim]");
	if (!IsPlayerLogged(userid))															return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))											return SendNotNearPlayer(playerid);

	SCM(userid, COLOUR_YELLOW, "_______________________");
	SendClientMessageEx(userid, COLOR_WHITE, "Çalýþtýðý Þirket: %s", Factions[PlayerInfo[playerid][pFaction]][fName]);
	SendClientMessageEx(userid, COLOR_WHITE, "Pozisyon: %s | Ýsim: %s", GetRankName(playerid), GetNameWithMask(playerid));
	SCM(userid, COLOUR_YELLOW, "_______________________");

	SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s, %s adlý kiþiye basýn kartýný gösterir.", GetNameWithMask(playerid), GetNameWithMask(userid));
	return 1;
}


/*CMD:editspawn(playerid,params[])
{
	new factionid = PlayerInfo[playerid][pFaction];

	if (!isLeader(playerid) && !GetSpawnRight(playerid)) return SendErrorMessage(playerid, "Birliðin spawn konumunu deðiþtirmenize izin verilmez.");

    GetPlayerPos(playerid, Factions[factionid][fPosX], Factions[factionid][fPosY], Factions[factionid][fPosZ]);
	Factions[factionid][fSpawnInt] = GetInterior(playerid);
	Factions[factionid][fSpawnVW] = GetWorld(playerid);

    new query[128 + 56];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `spawnx`=%f, `spawny`=%f, `spawnz`=%f, `spawnint`=%i, `spawnvw`=%i WHERE `id`= %i", Factions[factionid][fPosX], Factions[factionid][fPosY], Factions[factionid][fPosZ], Factions[factionid][fSpawnInt], Factions[factionid][fSpawnVW], Factions[factionid][fID]);
	mysql_tquery(dbHandle, query);

	SendSyntaxMessage(playerid, "%s birliðinin bu konumda doðmasýný ayarladýnýz.", Factions[factionid][fName]);
	return 1;
}*/

CMD:rutbeisim(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], rank, name[32];

	if (!isLeader(playerid) && !GetRankNameRight(playerid))		return SendErrorMessage(playerid, "Rütbe isimlerini deðiþtirmenize izin verilmiyor.");
	if (sscanf(params,"ds[31]", rank, name))					return SendHelpMessage(playerid, "/rutbeisim [rütbe numarasý] [yeni isim]");
	if (strlen(name) > 31)										return SendErrorMessage(playerid, "Rütbe adý en fazla 31 karakter içerebilir.");
	if (rank < 1 || rank > Factions[faction][fRanks])			return SendErrorMessage(playerid, "1'den %i'ye kadar sýralayýn.", Factions[faction][fRanks]);
	if (strfind(name, "'", true) != -1) 	                    return SendErrorMessage(playerid, "Rütbe adýnda týrnak iþareti kullanamazsýn.");

	format(FactionRanks[faction][rank-1], 32, "%s", name);
	UpdateFactionRank(faction, rank);
	SendSyntaxMessage(playerid, "Rütbenin adýný [ID: %i] '%s olarak deðiþtirdiniz.", rank, name);
	return 1;
}

alias:fchat("birliksohbet");
CMD:fchat(playerid, params[])
{
	if (PlayerInfo[playerid][pFaction] == 0)			return SendErrorMessage(playerid, "Herhangi bir birlikte olmalýsýn.");
    if (!isLeader(playerid) && !GetChatRight(playerid))	return SendErrorMessage(playerid, "Bunu yapmak için yetkiniz yok.");

	new faction = PlayerInfo[playerid][pFaction];
	if (Factions[faction][fChatON] == 1)
	{
		SendFactionMessageF(faction, COLOR_LIGHTBLUE, "** %s birlik sohbet kanalýný devre dýþý býraktý.", GetNameEx(playerid));
		SendSyntaxMessage(playerid, "Birlik sohbet kanalý devre dýþý býrakýldý. Artýk sadece sen yazabilirsin.");
		Factions[faction][fChatON] = 0;
	}
	else
	{
		SendFactionMessageF(faction, COLOR_LIGHTBLUE, "** %s birlik sohbet kanalýný aktif etti.", GetNameEx(playerid));
		SendSyntaxMessage(playerid, "Birlik sohbet kanalý aktif edildi. Tüm üyeler kanala yazabilir. ");
		Factions[faction][fChatON] = 1;
	}
	SQL_SetInteger("factions", "chaton", Factions[faction][fChatON], faction);
	return 1;
}

CMD:birlikdavet(playerid, params[])
{
    if (PlayerInfo[playerid][pFaction] == 0)						return SendErrorMessage(playerid, "Herhangi bir birlikte olmalýsýn. ");
    if (!isLeader(playerid) && !GetInviteRight(playerid))			return SendErrorMessage(playerid, "Bir birliðe kabul edilmeye hakkýnýz yok.");
    if (Factions[PlayerInfo[playerid][pFaction]][fJoinRank] == 0)	return SendErrorMessage(playerid, "Lütfen birliðinizin giriþ rütbesini ayarlayýn. ");

	new userid;

	if (sscanf(params,"u",userid))									return SendHelpMessage(playerid, "/birlikdavet [ID / isim]");
	if (!IsPlayerLogged(userid))									return SendNotConnected(playerid);
	if (userid == playerid)											return SendErrorMessage(playerid, "Zaten bir birliktesiniz.");
    if (PlayerInfo[userid][pFaction] != 0)							return SendErrorMessage(playerid, "Oyuncu zaten bir birlikte.");
    if (pTemp[userid][pFactionPlayer] == playerid)					return SendErrorMessage(playerid, "Oyuncuyu birliðe katýlmaya zaten davet ettiniz.");

	//pTemp[userid][pFactionPlayer] = playerid;
	pTemp[userid][pFactionInvite] = PlayerInfo[playerid][pFaction];
	pTemp[userid][pFactionInvitedBy] = playerid;

	SendSyntaxMessage(userid, "%s seni %s adlý birliðe davet etti. (Y tuþuna basarak teklifi kabul edebilirsin)", GetNameWithMask(playerid), Factions[PlayerInfo[playerid][pFaction]][fName]);
	SendSyntaxMessage(playerid, "%s adlý kiþiyi birliðe davet ettin.", GetNameWithMask(userid));
	return 1;
}

CMD:birlikdavetkabul(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction])
		return SendErrorMessage(playerid, "Zaten bir birlikte bulunuyorsunuz.");

	if(!pTemp[playerid][pFactionInvite])
		return SendErrorMessage(playerid, "Herhangi biri tarafýndan birliðe davet edilmediniz.");

	SendClientMessageEx(pTemp[playerid][pFactionInvitedBy], COLOR_YELLOW, "%s adlý kiþi birlik davetinizi kabul etti.", GetNameWithMask(playerid));
	SendSyntaxMessage(playerid, "Birlik davetini kabul ettiniz.");

	PlayerInfo[playerid][pFaction] = pTemp[playerid][pFactionInvite];
	PlayerInfo[playerid][pRank] = Factions[PlayerInfo[playerid][pFaction]][fJoinRank];

	pTemp[playerid][pFactionInvite] = 0;
	pTemp[playerid][pFactionInvitedBy] = INVALID_PLAYER_ID;

	//SaveCharacter(playerid);
	Save_User(playerid);
	return 1;
}
CMD:birliktenat(playerid, params[])
{
    if (PlayerInfo[playerid][pFaction] == 0)						return SendErrorMessage(playerid, "Herhangi bir birlikte olmalýsýn.");
    if (!isLeader(playerid) && !GetUninviteRight(playerid))			return SendErrorMessage(playerid, "Birlikten birisini atma iznin yok.");
    //if (Factions[PlayerInfo[playerid][pFaction]][fJoinRank] == 0)	return SendErrorMessage(playerid, "Please set join rank in your structure. ");

	new userid;

	if (sscanf(params,"u",userid))										return SendHelpMessage(playerid, "/birliktenat [ID / isim]");
	if (!IsPlayerLogged(userid))										return SendNotConnected(playerid);
	if (userid == playerid)												return SendErrorMessage(playerid, "Kendini kovamazsýn.");
    if (PlayerInfo[userid][pFaction] != PlayerInfo[playerid][pFaction])	return SendErrorMessage(playerid, "Kiþi sizin birliðinizden deðil.");

	if (!isLeader(playerid) && GetUninviteRight(playerid) && (isLeader(userid) || PlayerInfo[userid][pRank] >= PlayerInfo[playerid][pRank]))
	{
		return SendErrorMessage(playerid, "Sizden daha yüksek yetkili kiþiyi kovamazsýnýz.");
	}

	SendSyntaxMessage(userid, "%s, sizi %s adlý birlikten kovdu.", GetNameEx(playerid), Factions[PlayerInfo[playerid][pFaction]][fName]);
	SendSyntaxMessage(playerid, "%s adlý kiþiyi birlikten kovdun.", GetNameEx(userid));

    RemovePlayerFaction(userid);
	SendFactionMessageF(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, "[Birlik] %s adlý birlik üyesi %s tarafýndan kovuldu.", GetNameEx(userid), GetNameEx(playerid));
	return 1;
}

alias:birliktenayril("birlikayril", "birliktencik");
CMD:birliktenayril(playerid, params[])
{
    if (PlayerInfo[playerid][pFaction] == 0)						return SendErrorMessage(playerid, "Herhangi bir birlikte olmalýsýn.");
    //if (Factions[PlayerInfo[playerid][pFaction]][fJoinRank] == 0)	return SendErrorMessage(playerid, "Please set join rank in your structure. ");

	ConfirmDialog(playerid, "Doðrulama", "{FFFFFF}\nBirliðinizden ayrýlmak istediðinize emin misiniz?","FACTION_LEAVING_REQ");
	return 1;
}

alias:birlik("olusum");
CMD:birlik(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction == 0) return SendErrorMessage(playerid, "Birliðiniz bulunmuyor. Kurmak isterseniz: /birlikkur");

	ShowFactionPanel(playerid, faction);
	return 1;
}

CMD:renkler(playerid)
{
	return ShowColourDialog(playerid, 1);
}

alias:birlikler("olusumlar");
CMD:birlikler(playerid, params[])
{
	Faction_List(playerid);
	return 1;
}

alias:birlikkur("olusumkur");
CMD:birlikkur(playerid, params[])
{
	OlusumKurDialog(playerid);
	return 1;
}

CMD:rutbedegistir(playerid, params[])
{
    if (PlayerInfo[playerid][pFaction] == 0)						return SendErrorMessage(playerid, "Herhangi bir birlikte olmalýsýn.");
    if (!isLeader(playerid) && !GetRankRight(playerid))				return SendErrorMessage(playerid, "Birlik üyelerinin rütbelerini deðiþtirmenize izin verilmez.");
    if (Factions[PlayerInfo[playerid][pFaction]][fJoinRank] == 0)	return SendErrorMessage(playerid, "Lütfen birliðinizdeki dereceleri ayarlayýn.");

	new userid, rank;

	if (sscanf(params,"ui",userid, rank))										return SendHelpMessage(playerid, "/rutbedegistir [ID / isim] [rütbe]");
	if (!IsPlayerLogged(userid))												return SendNotConnected(playerid);
    if (PlayerInfo[userid][pFaction] != PlayerInfo[playerid][pFaction])			return SendErrorMessage(playerid, "Oyuncu, kuruluþunuzun bir üyesi deðil.");
	if (rank < 1 || rank > Factions[PlayerInfo[playerid][pFaction]][fRanks])	return SendErrorMessage(playerid, "Rütbe numarasý 1 ile %i arasýnda olmalý.", Factions[PlayerInfo[playerid][pFaction]][fRanks]);
	if (!isLeader(playerid) && GetRankRight(playerid) && (isLeader(userid) || PlayerInfo[userid][pRank] >= PlayerInfo[playerid][pRank]))
	{
		return SendErrorMessage(playerid, "Sadece rütbe olarak sizden daha düþük sýrada olan bir oyuncunun rütbesini deðiþtirebilirsiniz.");
	}
	if (PlayerInfo[playerid][pRank] < rank) return SendErrorMessage(playerid, "Bir oyuncuya sizinkinden daha yüksek bir rütbe veremezsiniz.");

	PlayerInfo[userid][pRank] = rank;
	SendSyntaxMessage(userid, "%s sizin rütbenizi '%s' olarak deðiþtirdi.", GetNameEx(playerid), GetRankName(userid));
	SendSyntaxMessage(playerid, "%s adlý kiþinin rütbesini '%s' olarak ayarladýnýz.", GetNameEx(userid), GetRankName(userid));

	SQL_SetInteger("users", "rank", PlayerInfo[userid][pRank], PlayerInfo[userid][pID]);
	return 1;
}

CMD:rutbeler(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], mes[1024] = "{FFFFFF}";

	if (!isLeader(playerid) && !GetRankRight(playerid))	return SendErrorMessage(playerid, "Birlik rütbelerini görüntüleme iznin yok.");

	for(new i = 0; i != Factions[faction][fRanks]; i++)
	{
		format(mes, sizeof(mes), "%s%i. %s\n", mes, i+1, FactionRanks[faction][i]);
	}

	new title[32];
	format(title, sizeof(title), "{FFFFFF}Birlik rütbeleri [%i]", Factions[faction][fRanks]);
	Dialog_Show(playerid, None, DIALOG_STYLE_LIST, title, mes, "Kapat", "");
	return 1;
}

alias:editrights("birlikizinleri");
CMD:editrights(playerid, params[])
{
	if (!PlayerInfo[playerid][pFaction])					return SendErrorMessage(playerid, "Herhangi bir birliðe üye deðilsiniz.");
	if (!isLeader(playerid) && !GetRightsRight(playerid)) 	return SendErrorMessage(playerid, "Birlik izinlerini düzenleme yetkin yok.");

	new faction = PlayerInfo[playerid][pFaction];

	new	faction_ranks[1024] = EOS;
	for(new i = 0; i != Factions[faction][fRanks]; i++)
	{
		if (PlayerInfo[playerid][pRank] >= i && !isLeader(playerid))
		{
			format(faction_ranks, sizeof(faction_ranks), "%s%i\t%s\n", faction_ranks, i+1, FactionRanks[faction][i]);
		}
		else if (isLeader(playerid))
		{
			format(faction_ranks, sizeof(faction_ranks), "%s%i\t%s\n", faction_ranks, i+1, FactionRanks[faction][i]);
		}
	}
	Dialog_Show(playerid, FactionSettings, DIALOG_STYLE_TABLIST, "{FFFFFF}Rütbe ayarlarý", faction_ranks, ">>>", "Ýptal");
	return 1;
}

alias:izinlerim("birlikizinlerim");
CMD:izinlerim(playerid, params[])
{
	if (!PlayerInfo[playerid][pFaction])	return SendErrorMessage(playerid, "Herhangi bir birliðe üye deðilsiniz.");
	return ShowMyRights(playerid);
}

alias:towcars("birlikrespawn", "frespawn");
CMD:towcars(playerid, params[])
{
	if (!isLeader(playerid) && !GetTowRight(playerid)) return SendErrorMessage(playerid, "Kullanýlmayan araçlarý respawnlamaya göndermenize izin verilmez.");

	new faction = PlayerInfo[playerid][pFaction];

    SendFactionMessageF(faction, COLOR_LIGHTRED, "%s %s, kullanýlmayan tüm birlik araçlarýný yeniden canlandýrdý.", GetRankName(playerid), GetNameEx(playerid));

    new vehicle, occupied[MAX_VEHICLES char];

    foreach(new i : Player)
	{
	    if ((vehicle = GetPlayerVehicleID(i)) == 0 || VehicleInfo[vehicle][carFaction] != faction) continue;

		occupied{vehicle} = 1;
	}

	foreach(new i : Vehicle)
	{
		if (occupied{i} == 1 || VehicleInfo[i][carFaction] != faction) continue;

        FixVehicle(i);
		RespawnVehicle(i);
	}
	return 1;
}

alias:birlikuyeleri("birlikaktif");
CMD:birlikuyeleri(playerid, params[])
{
	if (PlayerInfo[playerid][pFaction] == 0)	return SendErrorMessage(playerid, "Herhangi bir birliðe üye deðilsiniz.");

	new mes[3072] = "{FFFFFF}Ýsim\t{FFFFFF}ID\t{FFFFFF}Rütbe\t{FFFFFF}Telefon";

	foreach(new i : Player)
	{
		if (IsPlayerLogged(i) == 0 || PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction])	continue;
		format(mes, sizeof(mes), "%s\n%s\t%i\t%s\tNo: %d", mes, GetNameEx(i), i, GetRankName(i), PlayerInfo[i][pNumber]);
	}

	Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Aktif Birlik Üyeleri", mes, "Kapat", "");
	return 1;
}

alias:operator("op");
CMD:operator(playerid, params[])
{
    if (PlayerInfo[playerid][pMutedTime] > 0)	return SendErrorMessage(playerid, "Yerel sohbetiniz sistem tarafýndan engellendi.");
    if (!isLeader(playerid) && !GetTowRight(playerid)) return SendErrorMessage(playerid, "Rütbenizin bu komutu kullanmaya yetkisi yok.");
	if (isnull(params))								    return SendHelpMessage(playerid, "(/op)erator [mesaj]");
	if (!IsFactionLegal(PlayerInfo[playerid][pFaction])) return SendErrorMessage(playerid, "Bu komut, devlet kurumlarý için tasarlanmýþtýr.");
    if (!PlayerInfo[playerid][pOnDuty])				    return SendErrorMessage(playerid, "Ýlk önce iþbaþýnda olmalýsýnýz. ");

	for(new i = 1; i != MAX_PLAYERS; i++)
	{
	    if (PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction] && !PlayerInfo[i][pOnDuty]) continue;

        if (strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;

			if (pos < MAXLEN-1) pos = MAXLEN;

			SendClientMessageEx(i, COLOR_LSPD, "[OPERATÖR]: %.*s ...", pos, params);
			SendClientMessageEx(i, COLOR_LSPD, "... %s **", params[pos]);
		}
		else
		{
			SendClientMessageEx(i, COLOR_LSPD, "[OPERATÖR]: %s **", params);
		}
	}
	return 1;
}

alias:departman("d");
CMD:departman(playerid, params[])
{
    if (PlayerInfo[playerid][pMutedTime] > 0)	return SendErrorMessage(playerid, "Yerel sohbetiniz sistem tarafýndan engellendi.");

	new faction[23];

	if (isnull(params))								    return SendHelpMessage(playerid, "(/d)epartman [mesaj]");
	if (!IsFactionLegal(PlayerInfo[playerid][pFaction])) return SendErrorMessage(playerid, "Birlik, devlet kurumlarý için tasarlanmýþtýr.");
    if (!PlayerInfo[playerid][pOnDuty])				    return SendErrorMessage(playerid, "Ýlk önce iþbaþýnda olmalýsýnýz. ");

	format(faction, sizeof(faction), "%s", Factions[PlayerInfo[playerid][pFaction]][fShortName]);

	for(new i = 1; i != MAX_FACTIONS; i++)
	{
	    if (Factions[i][fON] == 0 || !IsFactionLegal(i)) continue;

        if (strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;

			if (pos < MAXLEN-1) pos = MAXLEN;

			SendFactionMessage(i, COLOR_ALLDEPT, "** [%s] %s %s: %.*s ...", faction, GetRankName(playerid), GetNameWithMask(playerid), pos, params);
			SendFactionMessage(i, COLOR_ALLDEPT, "... %s **", params[pos]);
		}
		else
		{
			SendFactionMessage(i, COLOR_ALLDEPT, "** [%s] %s %s: %s **", faction, GetRankName(playerid), GetNameWithMask(playerid), params);
		}
	}
	return 1;
}

alias:faction("f");
CMD:faction(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if (PlayerInfo[playerid][pMutedTime] > 0)						return SendErrorMessage(playerid, "Yerel sohbetiniz sistem tarafýndan engellendi.");
	if (isnull(params))												return SendHelpMessage(playerid, "(/f)action [OOC chat]");
	if (PlayerInfo[playerid][pFaction] == 0)						return SendErrorMessage(playerid, "Herhangi bir birlikte olmalýsýn. ");
	if (Factions[faction][fChatON] == 0 && !isLeader(playerid))		return SendErrorMessage(playerid, "OOC birlik sohbeti devre dýþý býrakýldý.");
	if (PlayerInfo[playerid][pSettings] & togFaction)				return SendErrorMessage(playerid, "Birlik mesajlarýnýn görüntülenmesini devre dýþý býrakmýþsýnýz. (/ayarlar)");

	if (IsFactionLegal(faction))
	{
		if (strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;

			if (pos < MAXLEN-1) pos = MAXLEN;

			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, "[Birlik] %s %s: %.*s ...", GetRankName(playerid), GetNameEx(playerid), pos, params);
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, "[Birlik] ... %s", params[pos]);
		}
		else
		{
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, "[Birlik] %s %s: %s", GetRankName(playerid), GetNameEx(playerid), params);
		}
	}
	else
	{
		if (strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;

			if (pos < MAXLEN-1) pos = MAXLEN;

			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, "[Birlik] %s: %.*s ...", GetNameEx(playerid), pos, params);
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, "[Birlik] ... %s", params[pos]);
		}
		else
		{
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, "[Birlik] %s: %s", GetNameEx(playerid), params);
		}
	}
	return 1;
}

alias:birlikaksesuar("birlikaksesuarlari");
CMD:birlikaksesuar(playerid, params[])
{
	if (GetNextToySlot(playerid) == -1)	return SendErrorMessage(playerid, "Tüm aksesuar slotlarý dolu.");


	if (!IsFactionLegal(PlayerInfo[playerid][pFaction])) return 1;

    if (IsPlayerFactionMedic(playerid) || IsPlayerFactionFire(playerid))
	{
		new mes[sizeof(attach_fd_model)*64];
		for(new i = 0; i < sizeof(attach_fd_model); i++)
		{
			format(mes, sizeof(mes), "%s%i(0.0, 0.0, 0.0, 1.0)\t~w~%s\n", mes, attach_fd_model[i], attach_fd_name[i]);
		}
		Dialog_Show(playerid, MODEL_SELECTION_FA, DIALOG_STYLE_PREVIEW_MODEL, "Birlik Aksesuarlarý", mes, "Sec", "Kapat");
	}
    else if (IsPlayerFactionCity(playerid))
	{
		new mes[sizeof(attach_city_model)*64];
		for(new i = 0; i < sizeof(attach_city_model); i++)
		{
			format(mes, sizeof(mes), "%s%i(0.0, 0.0, 0.0, 1.0)\t~w~%s\n", mes, attach_city_model[i], attach_city_name[i]);
		}
		Dialog_Show(playerid, MODEL_SELECTION_FA, DIALOG_STYLE_PREVIEW_MODEL, "Birlik Aksesuarlarý", mes, "Sec", "Kapat");
	}
	else if (IsPlayerFactionPolice(playerid))
	{
		new mes[sizeof(attach_police_model)*64];
		for(new i = 0; i < sizeof(attach_police_model); i++)
		{
			format(mes, sizeof(mes), "%s%i(0.0, 0.0, 0.0, 1.0)\t~w~%s\n", mes, attach_police_model[i], attach_police_name[i]);
		}
		Dialog_Show(playerid, MODEL_SELECTION_FA, DIALOG_STYLE_PREVIEW_MODEL, "Birlik Aksesuarlarý", mes, "Sec", "Kapat");
	}

	return 1;
}

CMD:rozetbelirle(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if (Factions[faction][fType] == FACTION_MAFIA || Factions[faction][fType] == FACTION_GANG)	return SendErrorMessage(playerid, "Bir hükümet oluþumu lideri olmalýsýn.");
	if (PlayerInfo[playerid][pRank] < 11)														return SendErrorMessage(playerid, "Geçersiz rütbe.");

    new userid, badge;

    if (sscanf(params, "ui", userid, badge))													return SendHelpMessage(playerid, "/rozetbelirle [ID / isim] [numara]");
    if (!IsPlayerLogged(userid))																return SendNotConnected(playerid);
	if (badge < 1 || badge > 9999999)															return SendErrorMessage(playerid, "Rozet numarasý 1 ile 9999999 arasýnda olmalýdýr. ");

	PlayerInfo[userid][pBadgeNumber] = badge;
	SendSyntaxMessage(playerid, "%s adlý kiþinin rozet numarasýný deðiþtirdin [%i].", GetNameEx(userid), badge);
	SendSyntaxMessage(userid, "%s rozet numaraný deðiþtirdi [%i].", GetNameEx(playerid), badge);
	return 1;
}

CMD:aractamir(playerid,params[])
{
	if (IsPlayerAtCarfix(playerid) == 0) return SendErrorMessage(playerid, "Araç tamir noktasýnda deðilsiniz.");

	new vehicle = GetPlayerVehicleID(playerid);

	if (!vehicle || VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])	return SendErrorMessage(playerid, "Birlik aracýnda deðilsiniz.");

	FixVehicle(vehicle);
	VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(vehicle));
	SendSyntaxMessage(playerid, "Araç tamamen tamir edildi.");
	return 1;
}

alias:barikatliste("engeller", "barikatlar");
CMD:barikatliste(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionLegal(faction))		return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru / saðlýk görevlisi olmalýsýnýz.");
    if (IsPlayerInAnyVehicle(playerid))	return SendErrorMessage(playerid, "Bu iþlem için araçta olmamalýsýn. ");
    if (!PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Ýlk önce iþbaþýnda olmalýsýnýz. ");

    new count, str[512] = "- Tüm barikatlarý kaldýr\n";

    for (new i = 0; i != MAX_BORTES; i ++)
	{
		if (BortInfo[playerid][i][bortOn] == 0) continue;

        format(str, sizeof(str), "%s%i: %s\n", str, i+1, BortInfo[playerid][i][bortName]);
        count++;
	}

	if (!count) return SendErrorMessage(playerid, "Oluþturulmuþ yol nesneniz yok.");

	Dialog_Show(playerid, BortList, DIALOG_STYLE_LIST, "{FFFFFF}Barikat Listesi", str, "Seç", "Ýptal");
	return 1;
}

alias:barikat("engel");
CMD:barikat(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

    new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionLegal(faction))		return SendErrorMessage(playerid, "Bu komutu kullanma yetkiniz yok.");
    if (IsPlayerInAnyVehicle(playerid))	return SendErrorMessage(playerid, "Bu iþlem için araçta olmamalýsýn.");
    if (!PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Ýlk önce iþbaþýnda olmalýsýnýz.");

	if (IsFactionMedic(faction) || IsFactionFire(faction))
    {
		new mes[sizeof(bort_list_fd)*128];
		for(new i = 0; i < sizeof(bort_list_fd); i++)
		{
			format(mes, sizeof(mes), "%s%i(0.0, 0.0, 0.0, 1.0)\t%s\n", mes, bort_list_fd[i], bort_names_fd[i]);
		}
		Dialog_Show(playerid, MODEL_SELECTION_BORT, DIALOG_STYLE_PREVIEW_MODEL, "_", mes, "Sec", "Kapat");
	}
	else if (IsFactionCity(faction))
	{
		new mes[sizeof(bort_list_city)*128];
		for(new i = 0; i < sizeof(bort_list_city); i++)
		{
			format(mes, sizeof(mes), "%s%i(0.0, 0.0, 0.0, 1.0)\t%s\n", mes, bort_list_city[i], bort_names_city[i]);
		}
		Dialog_Show(playerid, MODEL_SELECTION_BORT, DIALOG_STYLE_PREVIEW_MODEL, "_", mes, "Sec", "Kapat");
	}
	else
	{
		new mes[sizeof(bort_list)*128];
		for(new i = 0; i < sizeof(bort_list); i++)
		{
			format(mes, sizeof(mes), "%s%i(0.0, 0.0, 0.0, 1.0)\t%s\n", mes, bort_list[i], bort_names[i]);
		}
		Dialog_Show(playerid, MODEL_SELECTION_BORT, DIALOG_STYLE_PREVIEW_MODEL, "_", mes, "Sec", "Kapat");
	}

	return 1;
}

CMD:tabela(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

    new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionLegal(faction))		return SendErrorMessage(playerid, "Bu komutu kullanma yetkiniz yok.");

    new opt[6], str[90];

    if(sscanf(params, "s[6]S()[90]", opt, str))
        return SendSyntaxMessage(playerid, "/tabela [liste/ekle/sil]");

    if(!strcmp(opt, "liste", true))
    {
        mysql_tquery(dbHandle, GetScenario("game_scenarios.id, users.name, game_scenarios.placed_date, game_scenarios.x, game_scenarios.y", "INNER JOIN users ON users.id = game_scenarios.placed_by"), "ListScenarios", "d", playerid);
    }

    else if(!strcmp(opt, "ekle", true))
    {
        new message[90];

        if(sscanf(str, "s[90]", message))
            return SendSyntaxMessage(playerid, "/tabela <ekle> [tabela mesajý]");

        new interior, world, Float:x, Float:y, Float:z;

        interior = GetPlayerInterior(playerid);
        world = GetPlayerVirtualWorld(playerid);

        GetPlayerPos(playerid, x, y, z);

        mysql_tquery(dbHandle, EditScenario(0, PlayerInfo[playerid][pID], gettime(), message, Text3D:-1, interior, world, x, y, z), "OnPlayerCreateScenario", "d", playerid);
    }

    else if(!strcmp(opt, "sil", true))
    {
        new id;

        if(sscanf(str, "d", id))
            return SendSyntaxMessage(playerid, "/tabela <sil> [tabela numarasý]");

        if(id < 1)
            return SendErrorMessage(playerid, "Geçersiz tabela numarasý girdiniz.");

        mysql_tquery(dbHandle, GetScenario("game_scenarios.label_id", "", "", id), "OnPlayerDeleteScenario", "dd", playerid, id);
    }

    return 1;
}

alias:megafon("m");
CMD:megafon(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], text[144];

	if (sscanf(params, "s[144]", text))                                                     return SendHelpMessage(playerid, "(/m)egafon[mesaj]");
    if (!IsFactionLegal(faction))															return SendErrorMessage(playerid, "Herhangi bir devlet kurumuna üye deðilsin.");

	if(IsPlayerInAnyVehicle(playerid)) SendNearbyMessage(65.0, playerid, COLOR_YELLOWG, "[ o< %s: %s ]", GetNameWithMask(playerid), text);
	else SendNearbyMessage(60.0, playerid, COLOR_YELLOWG, "(El Megafonu) %s: %s", GetNameWithMask(playerid), text);
	return 1;
}

CMD:m1(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if (!IsFactionLegal(faction))															return SendErrorMessage(playerid, "Herhangi bir devlet kurumuna üye deðilsin.");
	new Float:pXaz, Float:pYaz, Float:pZaz, string[100];
	GetPlayerPos(playerid, pXaz, pYaz, pZaz);
	format(string, sizeof(string), "[ %s: o< Los Santos Polis Departmaný, olduðun yerde kal! ]", GetNameEx(playerid));
	SendLocalMessage(45.0, playerid, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, string);
	PlaySoundEx(15800, pXaz, pYaz, pZaz, 40);
	return 1;
}

CMD:m2(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
    if (!IsFactionLegal(faction))															return SendErrorMessage(playerid, "Herhangi bir devlet kurumuna üye deðilsin.");
	new Float:pXaz, Float:pYaz, Float:pZaz, string[100];
	GetPlayerPos(playerid, pXaz, pYaz, pZaz);
	format(string,sizeof(string), "%s(baðýrarak): Ellerin baþýnýn üstünde kalacak þekilde araçtan in!", GetNameEx(playerid));
	SendLocalMessage(Range_Long, playerid, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, string);
	PlaySoundEx(34403, pXaz, pYaz, pZaz, 30);
	return 1;
}

CMD:m3(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if (!IsFactionLegal(faction))															return SendErrorMessage(playerid, "Herhangi bir devlet kurumuna üye deðilsin.");
	new Float:pXaz, Float:pYaz, Float:pZaz, string[100];
	GetPlayerPos(playerid, pXaz, pYaz, pZaz);
	format(string,sizeof(string), "%s(baðýrarak): Hey sen! Dur polis!", GetNameEx(playerid));
	SendLocalMessage(Range_Long, playerid, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, string);
	PlaySoundEx(10200, pXaz, pYaz, pZaz, 30);
	return 1;
}

CMD:m4(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if (!IsFactionLegal(faction))															return SendErrorMessage(playerid, "Herhangi bir devlet kurumuna üye deðilsin.");
	new Float:pXaz, Float:pYaz, Float:pZaz, string[100];
	GetPlayerPos(playerid, pXaz, pYaz, pZaz);
	format(string,sizeof(string), "%s(baðýrarak): Olduðun yerde kal, yoksa ateþ açacaðýz!", GetNameEx(playerid));
	SendLocalMessage(Range_Long, playerid, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, string);
	PlaySoundEx(15801, pXaz, pYaz, pZaz, 30);
	return 1;
}

CMD:pdkisayol(playerid, params[])
{
	SendClientMessage(playerid, COLOR_FADE1, "(( {90EE90}_______________(KISAYOL KOMUTLARI)_______________ {E6E6E6}))");
	SendClientMessage(playerid, COLOR_GREEN, "(( {FFFFFF}/m1: Los Santos Polis Departmaný, olduðun yerde kal! (This is LSPD, stay where you're){90EE90} ))");
	SendClientMessage(playerid, COLOR_GREEN, "(( {FFFFFF}/m2: Ellerin baþýnýn üstünde kalacak þekilde araçtan in! (Get outta the car with your hands in the air!){90EE90} ))");
	SendClientMessage(playerid, COLOR_GREEN, "(( {FFFFFF}/m3: Hey sen! Dur polis! (Hey you, police. Stop!){90EE90} ))");
	SendClientMessage(playerid, COLOR_GREEN, "(( {FFFFFF}/m4: Olduðun yerde kal, yoksa ateþ açacaðýz! (Freeze, or we'll open fire!){90EE90} ))");
	return 1;
}

CMD:mdc(playerid, params[])
{
	if (IsPlayerPhoneCreated(playerid))	return SendErrorMessage(playerid, "Telefonu kapatmalýsýn!");

	if (!IsPlayerFactionPolice(playerid) &&
		!IsPlayerFactionMedic(playerid) &&
		!IsPlayerFactionFire(playerid))	return SendErrorMessage(playerid, "Hükümet üyesi olmalýsýnýz.");

	new id = PlayerInfo[playerid][pFaction];

	if (IsPlayerFactionPolice(playerid))
	{
		if (!PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Ýlk önce iþbaþýnda olmalýsýnýz.");

		if (IsPlayerUseMDC(playerid))
			return MDC_Hide(playerid);

		if (pTemp[playerid][pCCTV])
			return 1;

		MdcInfo[playerid][mdcPage] = PAGE_NONE;

		MDC_Show(playerid);

		SelectTextDraw(playerid, 255);
		return 1;
	}

	if (IsPlayerFactionMedic(playerid) || IsPlayerFactionFire(playerid))
	{
		if (!PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Ýlk önce iþbaþýnda olmalýsýnýz. ");

		return Get_Calls(playerid);
	}
	return 1;
}

CMD:rozetgoster(playerid, params[])
{
	new userid;

	if (!PlayerInfo[playerid][pFaction] || !IsFactionLegal(PlayerInfo[playerid][pFaction]))	return SendErrorMessage(playerid, "Bir hükümet birliðinde deðilsin. ");
	if (sscanf(params, "u", userid))														return SendHelpMessage(playerid, "/rozetgoster [ID / isim]");
	if (!IsPlayerLogged(userid))															return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))											return SendNotNearPlayer(playerid);

	SCM(userid, COLOR_POLICECHAT, "_______________________");
	SendClientMessageEx(userid, COLOR_WHITE, Factions[PlayerInfo[playerid][pFaction]][fName]);
	SendClientMessageEx(userid, COLOR_WHITE, "%s - %s", GetRankName(playerid), GetNameWithMask(playerid));
	SendClientMessageEx(userid, COLOR_WHITE, "Rozet Numarasý: %i", PlayerInfo[playerid][pBadgeNumber]);
	SCM(userid, COLOR_POLICECHAT, "_______________________");

	SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s, %s adlý kiþiye rozetini gösterir.", GetNameWithMask(playerid), GetNameWithMask(userid));
	return 1;
}

CMD:aracaat(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], vehicle = GetNearVehicle(playerid, 5.0), userid, seat;

	if (!IsPlayerFactionPolice(playerid) &&
		!IsPlayerFactionMedic(playerid) &&
		!IsPlayerFactionFire(playerid))						return SendErrorMessage(playerid, "Legal oluþum üyesi olmalýsýn. ");
    if (!vehicle || IsABoat(vehicle) || IsABiker(vehicle))	return SendErrorMessage(playerid, "Araç içerisinde olmalýsýn. ");

	new maxseat = GetMaxPassengers(GetVehicleModel(vehicle));

	if (sscanf(params,"ud", userid, seat))			return SendHelpMessage(playerid, "/aracaat [ID / isim] [koltuk (1-%i)] (0 - Araçtan indirir.)", maxseat);
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (seat > maxseat || seat < 1)					return SendSyntaxMessage(playerid, "Koltuk numarasý 1 ile %i arasýnda olmalýdýr.", maxseat);
	if (userid == playerid)							return 1;
	if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);
	if (PlayerInfo[userid][pInjured])				return SendErrorMessage(playerid, "Yaralýlarý araçla taþýyamazsýnýz.");
    if (!PutPlayerInVehicle(userid, vehicle, seat))	return SendErrorMessage(playerid, "Oyuncu araca bindirilemedi.");

	if(seat == 0) {
		SendSyntaxMessage(playerid, "%s adlý kiþiyi araçtan indirdiniz.", GetNameEx(userid));
		SendSyntaxMessage(userid, "%s adlý kiþi sizi araçtan indirdi.", GetNameEx(playerid));
		RemovePlayerFromVehicle(userid);
	}

	PlayerInfo[userid][pDragged] = 0;
	PlayerInfo[userid][pDraggedBy] = INVALID_PLAYER_ID;
	KillTimer(PlayerInfo[userid][pDragTimer]);

	if (IsFactionMedic(faction) || IsFactionFire(faction))
	{
		StopPlayerAnims(userid);
		SendSyntaxMessage(playerid, "%s adlý kiþiyi bir araca bindirdiniz. (( Araçtan indirmek için /aracaat id 0 ))", GetNameEx(userid));
		SendSyntaxMessage(userid, "%s sizi ambulansa sürükledi.", GetNameEx(playerid));
	}
	else
	{
	    SendSyntaxMessage(playerid, "%s adlý kiþiyi bir araca bindirdiniz. (( Araçtan indirmek için /aracaat id 0 ))", GetNameEx(userid));
		SendSyntaxMessage(userid, "%s sizi bir araca sürükledi.", GetNameEx(playerid));
	}
	PutPlayerInVeh(userid, vehicle, seat);
	return 1;
}

/*
CMD:pullout(playerid, params[])
{
	//new faction = PlayerInfo[playerid][pFaction], vehicle = GetPlayerVehicleID(playerid), userid, seat;
	//if (faction != LSPD && faction != SASD && faction != LSFD)	return SendErrorMessage(playerid, "Âû äîëæíû áûòü ïîëèöåéñêèì/ïàðàìåäèêîì.");

	new userid;

	if (sscanf(params,"u", userid))					return SendHelpMessage(playerid, "/pullout [ID / isim]");
	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (userid == playerid)							return 1;
	if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);
	if (!IsPlayerInAnyVehicle(userid))				return SendErrorMessage(playerid, "Èãðîê íå íàõîäèòñÿ â òðàíñïîðòå.");
	if (PlayerInfo[userid][pInjured] == 0 &&
		pTemp[userid][pTaserTime] == 0)				return SendErrorMessage(playerid, "Èãðîê íå ðàíåí/ìåðòâ/ïàðàëèçîâàí.");

	new vehid = GetPlayerVehicleID(userid);
	if (VehicleInfo[vehid][carLock] != 0)			return SendErrorMessage(playerid, "ÒÑ çàêðûòî. Èñïîëüçóéòå /ram !");

	new mes[128];
	format(mes, sizeof(mes), "âûòàùèë %s èç òðàíñïîðòà.", GetNameWithMask(userid));
	pc_cmd_me(playerid, mes);

	SavePlayerPos(playerid);

	SetPlayerPosEx(userid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
	SavePlayerPos(userid);

	ApplyAnimation(userid, "PED", "KO_SHOT_STOM", 4.0, 1, 0, 0, 0, 0, 1);

	UnFreezePlayer(userid);
	return 1;
}*/

/* Ölüm sistemi */

Death_PlayerTimer(playerid)
{
    if (PlayerInfo[playerid][pInjured] == 1)
	{
		if (IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "PED", "CAR_DEAD_LHS", 4.0, 1, 0, 0, 0, 0, 1);
		else
		{
			if (!PlayerToPoint(2.0, playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]))
			{
				SetPlayerPosFindZ(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
			}
			ApplyAnimation(playerid, "WUZI",  "CS_Dead_Guy", 4.1, 1, 0, 0, 1, 0, 1);
		}

		static const str_damage[] = "(( Bu kiþi %i kez hasar aldý, /hasarlar %i ile hasarlarý görebilirsin ))"; // 0xFF6347FF
    	new mes_damage[sizeof(str_damage) + 4 + 4];
   		format(mes_damage, sizeof(mes_damage), str_damage, pTemp[playerid][pDamagesCount], playerid);
    	SetPlayerChatBubble(playerid, mes_damage, 0xFF6347FF, 10.0, 1500);
    }

	else if (PlayerInfo[playerid][pInjured] == 2)
	{
		if (IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "PED", "CAR_DEAD_LHS", 4.0, 1, 0, 0, 0, 0, 1);
		else
		{
			if (!PlayerToPoint(2.0, playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]))
			{
				SetPlayerPosFindZ(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
			}
			ApplyAnimation(playerid, "WUZI",  "CS_Dead_Guy", 4.1, 1, 0, 0, 1, 0, 1);
		}

		SetPlayerChatBubble(playerid, "(( Bu karakter artýk aðýr yaralý ))", 0xFF6347FF, 10.0, 1500); // // 0xFF6347FF
    }

	else if (PlayerInfo[playerid][pInjured] == 3)
	{
		if (!PlayerToPoint(2.0, playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]))
		{
			SetPlayerPosFindZ(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
		}

		ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.1, 1, 0, 0, 1, 0, 1);

		static const str_damage[] = "(( %i saniye önce yaralandý. ))"; // 0xFF6347FF
    	new mes_damage[sizeof(str_damage) + 4 + 4];
   		format(mes_damage, sizeof(mes_damage), str_damage, pTemp[playerid][pDamagesCount]);
    	SetPlayerChatBubble(playerid, mes_damage, 0xFF6347FF, 10.0, 1500);
    }
    return 1;
}

Death_OnPlayerDeath(playerid, killerid, reason)
{
	if(gettime() - pTemp[playerid][OlumSuresi] < 5)
	{
		pTemp[playerid][OlumSayisi]++;
		if(pTemp[playerid][OlumSayisi] > 2)
		{
			SendAdmMessage("[Anti-Cheat] %s (%s), Fake-Kill radarýna takýldý. Ýzle! Saldýrý yapýyor olabilir!", GetNameEx(playerid), PlayerInfo[playerid][pAccname]);
		}
	}
	else pTemp[playerid][OlumSayisi] = 0;

	pTemp[playerid][OlumSuresi] = gettime();

    ResetVariables(playerid);
	ResetPlayerWeapons(playerid);
	RemovePlayerMask(playerid);
	SilahlariKaydet(playerid);

	if ((reason == WEAPON_VEHICLE || reason == WEAPON_COLLISION) && PlayerInfo[playerid][pInjured] == 0)
		SetTimerEx("InjuredPlayer", 1200, 0, "iii", playerid, killerid, reason);

	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || pTemp[i][pDMLog] != 1) continue;

		SendDeathMessageToPlayer(i, killerid, playerid, reason);
	}
    return 1;
}

StartProgress(playerid, userid, type, animation)
{
	if (pTemp[playerid][pHelpUp3dText] != 0) return SendErrorMessage(playerid,"Bu komut þu anda kullanýlamaz.");

	pTemp[playerid][pHelpUp3dText] = type;
	SetPVarInt(playerid, #player_upgrade_timer, 0);

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	ApplyAnimation(userid,"MEDIC","CPR",4.0,0,0,0,0,0);

	if (IsValidDynamic3DTextLabel(status_upd[playerid])) DestroyDynamic3DTextLabel(status_upd[playerid]);
	status_upd[playerid] = CreateDynamic3DTextLabel("(( ---------- ))", 0x33AA33FF, x, y, z-0.5, 15.0, playerid, INVALID_VEHICLE_ID, 1, GetWorld(playerid), GetInterior(playerid));

	SetTimerEx("PlayerUpgrade", 1, 0, "iii", userid, playerid, animation);
	return 1;
}

this::PlayerUpgrade(playerid, userid, animation)
{
	if (!PlayerInfo[playerid][pInjured] || GetPlayerAnimationIndex(userid) != animation || !PlayerNearPlayer(3.0, playerid, userid))
	{
	    DeletePVar(playerid, #player_upgrade_timer);
		if (IsValidDynamic3DTextLabel(status_upd[playerid])) DestroyDynamic3DTextLabel(status_upd[playerid]);
		pTemp[playerid][pHelpUp3dText] = 0;
		return 1;
	}
	/*if (!PlayerInfo[playerid][pInjured])					SM1(playerid, "1");
	if (GetPlayerAnimationIndex(userid) != animation)	SM1(playerid, "2");
	if (!PlayerNearPlayer(3.0, playerid, userid))		SM1(playerid, "3");*/

	new upgrade_name[2][32] = {
		"YARDIM EDÝYOR", "TEDAVÝ EDÝYOR"
	};

	new string[128] = "(( ",
		uptime = 1000,
		upgrade = 0;


	for(new i; i != 10; i++)
	{
	    if (GetPVarInt(playerid, #player_upgrade_timer) >= i)	strcat(string, "I");
		else													strcat(string, "-");
	}

	format(string, sizeof(string), "%s ))\n%s", string, upgrade_name[pTemp[playerid][pHelpUp3dText]-1]);
	UpdateDynamic3DTextLabelText(status_upd[playerid], 0x33AA33FF, string);
	SetPVarInt(playerid, #player_upgrade_timer, GetPVarInt(playerid, #player_upgrade_timer) + 1);

	if (GetPVarInt(playerid, #player_upgrade_timer) == 11)
	{
	    upgrade = pTemp[playerid][pHelpUp3dText];
	    DeletePVar(playerid, #player_upgrade_timer);
		if (IsValidDynamic3DTextLabel(status_upd[playerid])) DestroyDynamic3DTextLabel(status_upd[playerid]);
		pTemp[playerid][pHelpUp3dText] = 0;
	}
	else SetTimerEx("PlayerUpgrade", uptime, 0, "iii", playerid, userid, animation);

	if (upgrade == 0)
	{
		return 1;
	}
	else if (upgrade == 1)
	{
		PlayerInfo[playerid][pInjured] = 0;
		PlayerInfo[playerid][pHealth] = 30.0;
		StopPlayerAnims(playerid);
		StopPlayerAnims(userid);
		UnFreezePlayer(playerid);

		SM1(playerid, "%s kalkmana yardým etti.", GetNameWithMask(userid));
		SM1(userid, "%s adlý kiþinin yerden kalkmasýna yardým ettin. ", GetNameWithMask(playerid));
		return 1;
	}
	else if (upgrade == 2)
	{
		return 1;
	}

	return 1;
}

ResetDamages(playerid)
{
	for(new i = 0; i != MAX_DAMAGES; i++)
	{
	    if (DamageInfo[playerid][i][damageOn] == 0) continue;

		DamageInfo[playerid][i][damageBy] = EOS;
        DamageInfo[playerid][i][damageOn] = 0;
        DamageInfo[playerid][i][damageWeapon] = 0;
        DamageInfo[playerid][i][damageAmount] = 0.0;
        DamageInfo[playerid][i][damageArmour] = 0;
		DamageInfo[playerid][i][damageTime] = 0;
	}

	pTemp[playerid][pDamagesCount] = 0;
	pTemp[playerid][pInjuredTime] = 0;
    pTemp[playerid][pInjuredLegTime] = 0;
	PlayerInfo[playerid][pInjured] = 0;
	PlayerInfo[playerid][pDeathReason] = 0;
	pTemp[playerid][pInjureText] = 0;
	return 1;
}

ResetDamage(playerid, i)
{
	if (!DamageInfo[playerid][i][damageOn])	return 1;

	DamageInfo[playerid][i][damageBy] = EOS;
	DamageInfo[playerid][i][damageOn] = 0;
	DamageInfo[playerid][i][damageWeapon] = 0;
	DamageInfo[playerid][i][damageAmount] = 0.0;
	DamageInfo[playerid][i][damageArmour] = 0;
	DamageInfo[playerid][i][damageTime] = 0;

	return 1;
}

UpdateInjured(playerid)
{
	SQL_SetInteger("users", "injured", PlayerInfo[playerid][pInjured], PlayerInfo[playerid][pID]);
	SQL_SetInteger("users", "deathreason", PlayerInfo[playerid][pDeathReason], PlayerInfo[playerid][pID]);
	return 1;
}

GetBodyPartName(bodypart)
{
	new part[15];
	switch(bodypart)
	{
		case BODY_PART_TORSO: 		part = "Gövde";
		case BODY_PART_GROIN: 		part = "Kasýk";
		case BODY_PART_LEFT_ARM: 	part = "Sol Kol";
		case BODY_PART_RIGHT_ARM: 	part = "Sað Kol";
		case BODY_PART_LEFT_LEG: 	part = "Sol Bacak";
		case BODY_PART_RIGHT_LEG: 	part = "Sað Bacak";
		case BODY_PART_HEAD: 		part = "Kafa";
		default: 					part = "Belirsiz";
	}
	return part;
}

DisplayDamages(toplayer, playerid)
{
	new maxpages = floatround(MAX_DAMAGES/MAX_DIALOG_LIST,floatround_ceil);
	if (pTemp[toplayer][pDialogList] < 0 || (maxpages < pTemp[toplayer][pDialogList]+1)) return 1;

	new
		title[256],
		start_itter = MAX_DIALOG_LIST * pTemp[playerid][pDialogList],
		end_itter = (maxpages == pTemp[playerid][pDialogList]+1) ? (MAX_DAMAGES) : (start_itter+MAX_DIALOG_LIST+1),
		count,
		str[(MAX_PLAYER_NAME + 65) * MAX_DIALOG_LIST + 71 + 1555] = "Hasar\tBölge\tSilah\tHasar Veren\t.\n",
		weaponname[64]
	;

	format(title, sizeof(title), "{FFFFFF}%s - Son 10 hasar", GetNameEx(playerid));

	if (pTemp[toplayer][pDialogList]) format(str, sizeof(str), "%s{bccd32}Önceki sayfa{FFFFFF}\n", str);

	for(new i =0; i < 10; i++)
	{
	    if (DamageInfo[playerid][i][damageOn] != 1) continue;

		if (gettime()-DamageInfo[playerid][i][damageTime] > 3600) ResetDamage(playerid, i);
		else
		{
			if (count == MAX_DIALOG_LIST) {
				strcat(str, "{bccd32}Sonraki sayfa");
			} else {
				new weaponid = DamageInfo[playerid][i][damageWeapon];

				if (weaponid == 0) format(weaponname, sizeof(weaponname), "Yumruk");
				else format(weaponname, sizeof(weaponname), "%s", GetWeaponNameEx(weaponid));

				new stradmin[3 + MAX_PLAYER_NAME] = EOS;
				if (CheckAdmin(toplayer, 1))  format(stradmin, sizeof(stradmin), "[%s]", DamageInfo[playerid][i][damageBy]);
				if (DamageInfo[playerid][i][damageWeapon] == 51)	format(str, sizeof(str), "%s\t%.0f\t%s\tYanma - %d saniye önce\t%s\n", str, DamageInfo[playerid][i][damageAmount], GetBodyPartName(DamageInfo[playerid][i][damageBodypart]), gettime()-DamageInfo[playerid][i][damageTime], DamageInfo[playerid][i][damageBy]);
				else if (!DamageInfo[playerid][i][damageArmour])	format(str, sizeof(str), "%s\t%.0f\t%s\t%s - %d saniye önce\t%s\n", str, DamageInfo[playerid][i][damageAmount], GetBodyPartName(DamageInfo[playerid][i][damageBodypart]), weaponname, gettime()-DamageInfo[playerid][i][damageTime], DamageInfo[playerid][i][damageBy]);
				else 											format(str, sizeof(str), "%s\t%.0f\t%s\t%s - %d saniye önce\t%s\n", str, DamageInfo[playerid][i][damageAmount], GetBodyPartName(DamageInfo[playerid][i][damageBodypart]), weaponname, gettime()-DamageInfo[playerid][i][damageTime], DamageInfo[playerid][i][damageBy]);

				count++;
			}
		}
	}

	if (!count) return Dialog_Show(toplayer, None, DIALOG_STYLE_LIST, title, "Herhangi bir hasar mevcut deðil...", ">>>", "");

	SetPVarInt(toplayer, #userid, playerid);
    Dialog_Show(toplayer, DamageDialog, DIALOG_STYLE_TABLIST_HEADERS, title, str, ">>>", "");
	return 1;
}

Dialog:DamageDialog(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	if (pTemp[playerid][pDialogList]) {			//if not first page
		if (listitem == 0) {
			pTemp[playerid][pDialogList]--;
			return DisplayDamages(playerid, GetPVarInt(playerid, #userid));
		} else if (listitem == MAX_DIALOG_LIST+1) {
			pTemp[playerid][pDialogList]++;
			return DisplayDamages(playerid, GetPVarInt(playerid, #userid));
		}
	} else { 									//if it's a first page
		if (listitem == MAX_DIALOG_LIST) {
			pTemp[playerid][pDialogList]++;
			return DisplayDamages(playerid, GetPVarInt(playerid, #userid));
		}
	}

	return 1;
}

CountDamageRecord(playerid)
{
	new count = 0;
	for(new i = 0; i != MAX_DAMAGES; i++)
	{
		if (DamageInfo[playerid][i][damageOn] == 1)  count++;
	}
	return count;
}

RecordDamage(userid, playerid, weaponid, bodypart, Float: amount, armour)
{
	for(new i = 0; i != MAX_DAMAGES; i++)
	{
		if (DamageInfo[playerid][i][damageOn] == 1 && gettime()-DamageInfo[playerid][i][damageTime] > 3600) ResetDamage(playerid, i);

	    if (DamageInfo[playerid][i][damageOn] == 1)  continue;

        DamageInfo[playerid][i][damageOn] = 1;

		if (userid != -1) format(DamageInfo[playerid][i][damageBy], MAX_PLAYER_NAME, "%s",  GetNameEx(userid));
		else 			 format(DamageInfo[playerid][i][damageBy], MAX_PLAYER_NAME, "yanarak");

		DamageInfo[playerid][i][damageWeapon] = weaponid;
		DamageInfo[playerid][i][damageBodypart] = bodypart;
		DamageInfo[playerid][i][damageAmount] = amount;
		DamageInfo[playerid][i][damageArmour] = armour;
		DamageInfo[playerid][i][damageTime] = gettime();
		pTemp[playerid][pDamagesCount]++;
		return 1;
    }

    return 1;
}

Death_OnPlayerExitVehicle(playerid, vehicleid)
{
	if (PlayerInfo[playerid][pInjured]) {
		UnFreezePlayer(playerid);

		new Float:ccX, Float:ccY, Float:ccZ;
		new Float:dX, Float:dY, Float:dZ;

		GetVehicleModelInfo(VehicleInfo[vehicleid][carModel], VEHICLE_MODEL_INFO_FRONTSEAT, ccX, ccY, ccZ);
		GetVehicleRelativePos(vehicleid, dX, dY, dZ, -ccX - 1, ccY, ccZ);

		SetPlayerPosEx(playerid, dX, dY, dZ);
		//SetPlayerPosFindZ(playerid, 1234.5, 1234.5, 1000.0);

		ApplyAnimation(playerid, "PED", "KO_SHOT_STOM", 4.0, 1, 0, 0, 0, 0, 1);

		SavePlayerPos(playerid);
	}
	return 1;
}

this::InjuredPlayer(playerid, killerid, weaponid)
{
	if (!IsPlayerLogged(playerid)) return 1;
	if (IsValidVehicle(JackingVehicle[playerid])) StopJackingLock(playerid);

	pTemp[playerid][AntiHileSistemi] = -1;

	ResetVariables(playerid);
	RemovePlayerMask(playerid);

	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || pTemp[i][pDMLog] != 1) continue;
		SendDeathMessageToPlayer(i, killerid, playerid, weaponid);
	}

	SavePlayerPos(playerid);
	PlayerInfo[playerid][pDeathReason] = weaponid;
	SQL_SetInteger("users", "deathreason", weaponid, PlayerInfo[playerid][pID]);

	new weapons[12], ammo[12];
	for(new x; x < 12; x++)
	{
		BWH_GetPlayerWeaponData(playerid, x, weapons[x], ammo[x]);
		if(!AC_PlayerHasWeapon(playerid, weapons[x]) || !ammo[x])
		{
			weapons[x] = 0;
			ammo[x] = 0;
		}
		PlayerInfo[playerid][pWeapons][x] = weapons[x];
		PlayerInfo[playerid][pAmmo][x] = ammo[x];
	}

	if (Check_KO(playerid)) {
		GameTextForPlayer(playerid, "~r~NAKAVT OLDUN", 5000, 3);

		ApplyAnimation(playerid,"SWEET", "Sweet_injuredloop",4.0,0,1,1,1,0);

		pTemp[playerid][pInvulnerable] = 15.0;
		PlayerInfo[playerid][pInjured] = 3;
		pTemp[playerid][pInjuredTime] = 60;
		SetCameraBehindPlayer(playerid);

		pTemp[playerid][pInjureText] = 0;
		SendClientMessageEx(playerid, COLOR_LIGHTRED,"[ ! ] >> {FFFFFF}Nakavt oldun, 60 saniye sonra kalkabilirsin veya biri sana yardým edebilir");
		SendClientMessageEx(playerid, COLOR_LIGHTRED,"[ ! ] >> {FFFFFF}%i kez hasar alarak yaralandýnýz, detaylý bilgi için /hasarlar %i kullanýn", pTemp[playerid][pDamagesCount], playerid);
	} else {
		GameTextForPlayer(playerid, "~b~YARALANDIN", 5000, 3); //ñìýðòü

        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetPlayerState(playerid) != PLAYER_STATE_PASSENGER) ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0, 1);
        else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)  ApplyAnimation(playerid, "PED", "CAR_dead_RHS", 4.1, 1, 1, 1, 1, 0, 1);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
            new aracid = GetPlayerVehicleID(playerid);
            if (VehicleInfo[aracid][carEngineOn]) ToggleVehicleEngine(aracid, playerid);
            if(Arac_Model(VehicleInfo[aracid][carModel]) == VEHICLE_TYPE_BIKE || Arac_Model(VehicleInfo[aracid][carModel]) == VEHICLE_TYPE_MBIKE) ClearAnimations(playerid, 1), ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0, 1);
        }

		pTemp[playerid][pInvulnerable] = 100.0;
		PlayerInfo[playerid][pInjured] = 1;
		pTemp[playerid][pInjuredTime] = 60;
		SetCameraBehindPlayer(playerid);

		SendClientMessageEx(playerid, COLOR_LIGHTRED,"[ ! ] >> {FFFFFF}Yaralandýn ve yere yýðýldýn. Bir ambulans bekleyebilirsiniz veya /tedaviol komutunu kullanabilirsiniz.");
		SendClientMessageEx(playerid, COLOR_LIGHTRED,"[ ! ] >> {FFFFFF}%i kez hasar alarak yaralandýnýz, detaylý bilgi için /hasarlar %i kullanýn", pTemp[playerid][pDamagesCount], playerid);
		SendClientMessageEx(playerid, COLOR_LIGHTRED,"ÝPUCU: {FFFFFF}60 Saniye sonunda /tedaviol komutunu kullanarak ayaða kalkabilirsiniz.");
	}

	if(PlayerInfo[playerid][pChar] > 0 && PlayerInfo[playerid][pOnDuty]) SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
	else SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);

    pTemp[playerid][pInjuredLegTime] = 0;
	TogglePlayerControllable(playerid, false);

	pTemp[playerid][OlumSuresi] = gettime();

	PlayerInfo[playerid][pHealth] = 100;
	SetPlayerHealth(playerid, 100);
	SetTimerEx("Invulnerable", 4000, false, "i", playerid);
	return 1;
}

Check_KO(playerid)
{
	if (PlayerInfo[playerid][pInjured])	return 0;
	if (IsPlayerInAnyVehicle(playerid))	return 0;

	new Float:m_damage, Float:a_damage;

	for(new i = CountDamageRecord(playerid)-1; i >= 0; i--)
	{
		if (DamageInfo[playerid][i][damageOn] != 1) continue;
		if (gettime()-DamageInfo[playerid][i][damageTime] > 5*60) continue;

		switch(DamageInfo[playerid][i][damageWeapon]) {
			case 0 .. 9: 	m_damage += DamageInfo[playerid][i][damageAmount];
			default:		a_damage += DamageInfo[playerid][i][damageAmount];
		}
	}

	if (m_damage > 20.0 && m_damage > a_damage) return 1;
	return 0;
}

alias:hasarlar("dmg", "hsrlr");
CMD:hasarlar(playerid, params[])
{
	new userid;

	if (!IsPlayerLogged(playerid))															return SendNotConnected(playerid);
	if (sscanf(params, "u", userid))														return SendHelpMessage(playerid,"/hasarlar [ID/Ad ve Soyad]");
	if (!IsPlayerConnected(userid))                 										return SendErrorMessage(playerid, "Karakter çevrimdýþý.");
	if (!PlayerNearPlayer(3.0, playerid, userid) && !CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotNearPlayer(playerid);

	pTemp[playerid][pDialogList] = 0;

	DisplayDamages(playerid, userid);
	return 1;
}
/*
CMD:yardimet(playerid, params[])
{
	new userid;

	if (!IsPlayerLogged(playerid))				 	return SendNotConnected(playerid);
	if (sscanf(params, "u", userid))			 	return SendHelpMessage(playerid,"/yardimet [ID/Ad ve Soyad]");
	if (userid == playerid)						 	return 1;
	if (!IsPlayerConnected(userid))            	 	return SendErrorMessage(playerid, "Karakter çevrimdýþý."); //îôëàéí
	if (!PlayerNearPlayer(2.0, playerid, userid)) 	return SendNotNearPlayer(playerid);
	if (pTemp[userid][pInjuredTime]-40 > 0)		 	return SendErrorMessage(playerid, "%i saniye daha beklemelisin", pTemp[userid][pInjuredTime]-40);

	StartProgress(userid, playerid, 1, 839);
	return 1;
}*/

/*
CMD:kabulolum(playerid, params[])
{
    if (PlayerInfo[playerid][pInjured] == 0) return SendErrorMessage(playerid, "Yaralý deðilsin.");

	new count = 0;
	foreach(new i : Player)
	{
		if (i == playerid) continue;
		if (GetPlayerDistanceFromPlayer(playerid, i) < 11.0) count++;
	}

	if (pTemp[playerid][pInjuredTime])
	{
		if (count) {
			SendWarningMessage(playerid, "Yakýnýnda oyuncular varsa ölümü hemen kabul edemezsin. Biraz daha beklemen gerekiyor. %i saniye.", pTemp[playerid][pInjuredTime]);
			return 1;
		}
	}

	SendSpecialMessage(playerid, "Karakteriniz öldü, yeniden doðmak için \"/tedaviol\".");
	PlayerInfo[playerid][pInjured] = 2;
	pTemp[playerid][pInjuredTime] = 60;
	pTemp[playerid][pInjureText] = 0;
	return 1;
}*/

CMD:tedaviol(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] == 0) return SendErrorMessage(playerid, "Henüz yaralý deðilsiniz.");
	if (pTemp[playerid][pInjuredTime]) 		return SendSpecialMessage(playerid, "Sadece %i saniye beklediniz. /tedaviol komutunu kullanabilmek için 60 saniye beklemiþ olmalýsýnýz.", 60 - pTemp[playerid][pInjuredTime]);

	PlayerInfo[playerid][pDeathReason] = 0;
	SQL_SetInteger("users", "deathreason", 0, PlayerInfo[playerid][pID]);

	PlayerInfo[playerid][pHealth] = 100.0;

	ResetDamages(playerid);
	StopPlayerAnims(playerid);
	UnFreezePlayer(playerid);
	SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);

	SM1(playerid, "Tedavi oldunuz ve ayaða kalktýnýz.");

	SetPlayerSkill(playerid);
	return 1;
}

/* Rapor sistemi */
this::OnPlayerReport(playerid, reportid, const text[])
{
	if(ReportInfo[reportid][rReportExists] == true)
	{
		for (new i = 1; i < sizeof(ReportInfo); i ++)
		{
			if(ReportInfo[i][rReportExists] == false)
			{
				reportid = i;
				break;
			}
		}
	}

	ReportInfo[reportid][rReportExists] = true;
	ReportInfo[reportid][rReportTime] = gettime();

	format(ReportInfo[reportid][rReportDetails], 90, "%s", text);
	ReportInfo[reportid][rReportBy] = playerid;

	pTemp[playerid][pSendReport] = true;
	SendClientMessageEx(playerid, 0x33AA33FF, "Raporunuz online yöneticilere ulaþtýrýlmýþtýr! Rapor ID: %d", reportid);
	SetPVarInt(playerid, "reportidm", reportid);

	if(strlen(text) > 67)
	{
		SendReportMessage(0xFFFF91FF, 1, "[Rapor: %d] %s (%d): %.75s", reportid, GetNameEx(playerid), playerid, text);
		SendReportMessage(0xFFFF91FF, 1, "[Rapor: %d] ...%s", reportid, text[75]);
	}
	else SendReportMessage(0xFFFF91FF, 1, "[Rapor: %d] %s (%d): %s", reportid, GetNameEx(playerid), playerid, text);

	if(!strcmp(text, "bug", true) || !strcmp(text, "hile", true) || !strcmp(text, "aim", true) || !strcmp(text, "troll", true))
	{
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pAdmin]) GameTextForPlayer(i, "~y~~h~Oncelikli rapor", 4000, 1);
		}
	}
	return 1;
}

this::OnPlayerQuest(playerid, questid, const text[])
{
	if(QuestInfo[questid][qQuestExists] == true)
	{
		for (new i = 1; i < sizeof(QuestInfo); i ++)
		{
			if(QuestInfo[i][qQuestExists] == false)
			{
				questid = i;
				break;
			}
		}
	}

	QuestInfo[questid][qQuestExists] = true;
	QuestInfo[questid][qQuestTime] = gettime();

	format(QuestInfo[questid][qQuestDetails], 90, "%s", text);
	QuestInfo[questid][qQuestBy] = playerid;

	pTemp[playerid][pSendQuest] = true;
	SendClientMessageEx(playerid, 0x33AA33FF, "Sorunuz online helperlara ulaþtýrýlmýþtýr! Soru ID: %d", questid);
	SetPVarInt(playerid, "questidm", questid);

	if(strlen(text) > 67)
	{
		SendQuestMessage(0xFFFF91FF, 1, "[Soru: %d] %s (%d): %.75s", questid, GetNameEx(playerid), playerid, text);
		SendQuestMessage(0xFFFF91FF, 1, "[Soru: %d] ...%s", questid, text[75]);
	}
	else SendQuestMessage(0xFFFF91FF, 1, "[Soru: %d] %s (%d): %s", questid, GetNameEx(playerid), playerid, text);

	if(strfind(text, "nedir?", true) != -1 || strfind(text, "?", true) != -1 || strfind(text, "nasýl", true) && pTemp[playerid][pTesterDuty])
	{
		foreach(new i : Player)
		{
			if(pTemp[i][pTesterDuty]) GameTextForPlayer(i, "~y~~h~Oncelikli soru", 4000, 1);
		}
	}
	return 1;
}

stock SendReportMessage(color, level, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerInfo[i][pAdmin] >= level && !(PlayerInfo[i][pSettings] & togAdmCmds)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerInfo[i][pAdmin] >= level && !(PlayerInfo[i][pSettings] & togAdmCmds)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SQLCharFix(text[512])
{
	strreplace(text, "'", " ");
	return text;
}

stock SQL_ReturnEscaped(const string[])
{
	new entry[256];
	mysql_escape_string(string, entry);
	return entry;
}

stock TimeConvertEx(sec, &days, &hours, &minutes, &seconds)
{
    days = floatround(sec / 86400);
    hours = floatround((sec - (days * 86400)) / 3600);
    minutes = floatround((sec - (days * 86400) - (hours * 3600)) / 60);
    seconds = sec % 60;
    return 1;
}

stock SendQuestMessage(color, level, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerInfo[i][pHelper] >= level && pTemp[i][pTesterDuty]) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerInfo[i][pHelper] >= level && pTemp[i][pTesterDuty]) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

Report_GetCount(playerid)
{
	new count;
    for (new i = 0; i != MAX_REPORTS; i ++) if(ReportData[i][rExists] && ReportData[i][rPlayer] == playerid) count++;
	return count;
}

/*Report_Clear(playerid)
{
    for (new i = 0; i != MAX_REPORTS; i ++) if(ReportData[i][rExists] && ReportData[i][rPlayer] == playerid) Report_Remove(i);
	return 1;
}*/

Report_Add(playerid, const text[], type = 1)
{
	for (new i = 0; i != MAX_REPORTS; i ++) if(!ReportData[i][rExists])
	{
        ReportData[i][rExists] = true;
        ReportData[i][rType] = type;
        ReportData[i][rPlayer] = playerid;
        ReportData[i][rYetkili] = INVALID_PLAYER_ID;

        strpack(ReportData[i][rText], text, 128 char);
		return i;
	}
	return -1;
}
Report_Remove(reportid)
{
	if(reportid != -1 && ReportData[reportid][rExists])
	{
	    ReportData[reportid][rExists] = false;
	    ReportData[reportid][rPlayer] = ReportData[reportid][rYetkili] = INVALID_PLAYER_ID;
	}
	return 1;
}
Dialog:REPORT(playerid, response, listitem, inputtext[])
{
	if (!response) return 0;

	new idx;

	for (new i = 1; i < sizeof(ReportInfo); i ++)
	{
		if (ReportInfo[i][rReportExists] == false)
		{
			idx = i;
			break;
		}
	}

	OnPlayerReport(playerid, idx, playerReport[playerid]);

    return 1;
}

Dialog:QUEST(playerid, response, listitem, inputtext[])
{
	if (!response) return 0;

	new idx;

	for (new i = 1; i < sizeof(QuestInfo); i ++)
	{
		if (QuestInfo[i][qQuestExists] == false)
		{
			idx = i;
			break;
		}
	}

	OnPlayerQuest(playerid, idx, playerQuest[playerid]);

    return 1;
}
ReturnDate()
{
    new sendString[90], MonthStr[40], month, day, year;
    new hour, minute, second;

    gettime(hour, minute, second);
    getdate(year, month, day);
    switch(month)
    {
        case 1:  MonthStr = "01";
        case 2:  MonthStr = "02";
        case 3:  MonthStr = "03";
        case 4:  MonthStr = "04";
        case 5:  MonthStr = "05";
        case 6:  MonthStr = "06";
        case 7:  MonthStr = "07";
        case 8:  MonthStr = "08";
        case 9:  MonthStr = "09";
        case 10: MonthStr = "10";
        case 11: MonthStr = "11";
        case 12: MonthStr = "12";
    }

    format(sendString, 90, "%02d/%s/%d, %02d:%02d:%02d", day, MonthStr, year, hour, minute, second);
    return sendString;
}

strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

CMD:rapor(playerid, params[])
{
	if(isnull(params) || strlen(params) < 3)
		return SendSyntaxMessage(playerid, "/rapor [yazý]");

	if(pTemp[playerid][pSendReport])
		return SendErrorMessage(playerid, "Zaten soru gönderdiniz.");

	new
		showString[380]
	;

	format(showString, sizeof(showString), "Sunucu içerisinde ki online yöneticileri þu anda rapor gönderiyorsunuz. Soru: %s\n\nBu raporu göndermek istediðinizden emin misiniz? Sorunun gereksiz ya da spam olup olmadýðýnana emin olun.\nDüþünnceleriniz hakkýnda soru göndermeyin, forum üzerinden düþünncelerinizi yazýn.", params);
	Dialog_Show(playerid, REPORT, DIALOG_STYLE_MSGBOX, "Uyarý, þu anda rapor gönderiyorsunuz", showString, "Devam", "Gönderme");

	format(playerReport[playerid], 128, "%s", params);
	return 1;
}

alias:soru("sorusor");
CMD:soru(playerid, params[])
{
	if(isnull(params) || strlen(params) < 3) return SendSyntaxMessage(playerid, "/soru [yaz?]");

	if(pTemp[playerid][pSendQuest] == true)
		return SendErrorMessage(playerid, "Zaten soru gönderdiniz.");

	new showString[350];

	format(showString, sizeof(showString), "Sunucu içerisinde ki online supportlara þu anda soru gönderiyorsunuz. Soru: %s\n\nBu soruyu göndermek istediðinizden emin misiniz? Sorunun gereksiz ya da spam olup olmadýðýna emin olun.\nDüþünceleriniz hakkýnda soru göndermeyin, forum üzerinden düþüncelerinizi yazýn.", params);
	Dialog_Show(playerid, QUEST, DIALOG_STYLE_MSGBOX, "Uyarý, þu anda soru gönderiyorsunuz", showString, "Devam", "Gönderme");
	format(playerQuest[playerid], 128, "%s", params);
	return 1;
}



CMD:raporlar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
		return 0;

	SendClientMessage(playerid, COLOR_DARKGREEN, "____________________RAPORLAR____________________");

	for (new i = 0; i < sizeof(ReportInfo); i ++)
	{
		if(ReportInfo[i][rReportExists] == true)
		{
			if(strlen(ReportInfo[i][rReportDetails]) > 65)
			{
				SendClientMessageEx(playerid, 0xFFFF91FF, "%s (ID: %d) | RID: %d | Rapor: %.65s", GetNameEx(ReportInfo[i][rReportBy]), ReportInfo[i][rReportBy], i, ReportInfo[i][rReportDetails]);
				SendClientMessageEx(playerid, 0xFFFF91FF, "...%s | Bekliyor: %d saniyedir.", ReportInfo[i][rReportDetails][65], gettime() - ReportInfo[i][rReportTime]);
			}
			else SendClientMessageEx(playerid, 0xFFFF91FF, "%s (ID: %d) | RID: %d | Rapor: %s | Bekliyor: %d saniyedir.", GetNameEx(ReportInfo[i][rReportBy]), ReportInfo[i][rReportBy], i, ReportInfo[i][rReportDetails], gettime() - ReportInfo[i][rReportTime]);
		}
	}
	return 1;
}

alias:raporkabul("rk", "ar");
CMD:raporkabul(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
		return 0;

	new reportid;

	if (sscanf(params, "d", reportid))
		return SendSyntaxMessage(playerid, "/raporkabul [rapor id]");

	if(ReportInfo[reportid][rReportExists] == false)
		return SendErrorMessage(playerid, "Belirttiðiniz rapor ID'i mevcut deðil.");

    new playerb = ReportInfo[reportid][rReportBy];

	SendReportMessage(COLOR_LIGHTRED, 1, "[RAPOR]: %s, %d ID'li raporu kabul etti.", GetAccName(playerid), reportid);
	pTemp[ReportInfo[reportid][rReportBy]][pSendReport] = false;
	DeletePVar(ReportInfo[reportid][rReportBy], "reportidm");


	SendClientMessageEx(ReportInfo[reportid][rReportBy], 0x33AA33FF, "%s (%d) rapor talebinize cevap verdi, lütfen sizinle irtibata geçmesini bekleyin. [Rapor ID: %d]", GetNameEx(playerid), playerid, reportid);
	SendClientMessageEx(ReportInfo[reportid][rReportBy], 0xFF6347FF, "Raporunuz:");
	SendClientMessageEx(ReportInfo[reportid][rReportBy], 0xAFAFAFFF, "%s", ReportInfo[reportid][rReportDetails]);

	PlayerInfo[playerid][pRaporSayi]++;
	SQL_SetIntegerAcc("accounts", "raporsayi", PlayerInfo[playerid][pRaporSayi], PlayerInfo[playerid][pAccID]);

    SendServerMessage(playerid, "%s adlý kiþinin %d numaralý raporunu kabul ettin..", GetNameEx(playerb), reportid);

	ReportInfo[reportid][rReportExists] = false;
	ReportInfo[reportid][rReportBy] = INVALID_PLAYER_ID;

	return 1;
}

alias:raporred("raporreddet", "dr");
CMD:raporred(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
		return 0;

	new reportid;

	if (sscanf(params, "d", reportid))
		return SendSyntaxMessage(playerid, "/raporreddet [rapor id]");

	if(ReportInfo[reportid][rReportExists] == false)
		return SendErrorMessage(playerid, "Belirttiðiniz rapor ID'i mevcut deðil.");

    new playerb = ReportInfo[reportid][rReportBy];

	SendReportMessage(COLOR_LIGHTRED, 1, "[RAPOR]: %s, %d ID'li raporu sildi.", GetAccName(playerid), reportid);
	pTemp[ReportInfo[reportid][rReportBy]][pSendReport] = false;
	DeletePVar(ReportInfo[reportid][rReportBy], "reportidm");

	SendClientMessageEx(ReportInfo[reportid][rReportBy], 0xFF6347FF, "%s (%d) rapor talebinizi reddetti. [Rapor ID: %d]", GetNameEx(playerid), playerid, reportid);
	SendClientMessageEx(ReportInfo[reportid][rReportBy], 0xFF6347FF, "Raporunuz:");
	SendClientMessageEx(ReportInfo[reportid][rReportBy], 0xAFAFAFFF, "%s", ReportInfo[reportid][rReportDetails]);

    SendServerMessage(playerid, "%s adlý kiþinin %d numaralý raporunu red ettin.", GetNameEx(playerb), reportid);

	ReportInfo[reportid][rReportExists] = false;
	ReportInfo[reportid][rReportBy] = INVALID_PLAYER_ID;

	return 1;
}

CMD:raporiptal(playerid)
{
	new reportid;
	reportid = GetPVarInt(playerid, "reportidm");

	if(pTemp[playerid][pSendReport]){
		SendClientMessageEx(playerid, 0xFF6347FF, "Raporu baþarýyla iptal ettiniz.");
		pTemp[playerid][pSendReport] = false;
        ReportInfo[reportid][rReportExists] = false;
	    ReportInfo[reportid][rReportBy] = INVALID_PLAYER_ID;
		DeletePVar(playerid, "reportidm");
	} else {
		SendClientMessageEx(playerid, 0xFF6347FF, "Gönderilmiþ raporunuz bulunmamakta.");
	}
return 1;
}

CMD:soruiptal(playerid)
{
	new reportid;
	reportid = GetPVarInt(playerid, "questidm");

	if(pTemp[playerid][pSendQuest]){
		SendClientMessageEx(playerid, 0xFF6347FF, "Sorunuzu baþarýyla iptal ettiniz.");
		pTemp[playerid][pSendQuest] = false;
	    QuestInfo[reportid][qQuestExists] = false;
	    QuestInfo[reportid][qQuestBy] = INVALID_PLAYER_ID;
		DeletePVar(playerid, "questidm");
	} else {
		SendClientMessageEx(playerid, 0xFF6347FF, "Sorunuz bulunmamakta.");
	}
return 1;
}

CMD:sorular(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1)
		return 0;

	new count = 0;

	SendClientMessage(playerid, COLOR_DARKGREEN, "____________________SORULAR____________________");

	for (new i = 0; i < sizeof(QuestInfo); i ++)
	{
		if(!QuestInfo[i][qQuestExists])
            continue;

		if(strlen(QuestInfo[i][qQuestDetails]) > 65)
		{
			SendClientMessageEx(playerid, 0xFFFF91FF, "%s (ID: %d) | SID: %d | Soru: %.65s", GetNameEx(QuestInfo[i][qQuestBy]), QuestInfo[i][qQuestBy], i, QuestInfo[i][qQuestDetails]);
			SendClientMessageEx(playerid, 0xFFFF91FF, "...%s | Bekliyor: %d saniyedir.", QuestInfo[i][qQuestDetails][65], gettime() - QuestInfo[i][qQuestTime]);
		}
		else SendClientMessageEx(playerid, 0xFFFF91FF, "%s (ID: %d) | SID: %d | Soru: %s | Bekliyor: %d saniyedir.", GetNameEx(QuestInfo[i][qQuestBy]), QuestInfo[i][qQuestBy], i, QuestInfo[i][qQuestDetails], gettime() - QuestInfo[i][qQuestTime]);
		count++;
	}
	if(!count) return SendErrorMessage(playerid, "Bekleyen soru yok.");
	return 1;
}

alias:sorukabul("sk");
CMD:sorukabul(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1)
		return 0;

	new questid;

	if (sscanf(params, "d", questid))
		return SendSyntaxMessage(playerid, "/sorukabul [soru id]");

	if(QuestInfo[questid][qQuestExists] == false)
		return SendErrorMessage(playerid, "Belirttiðiniz soru ID'i mevcut deðil.");

	new playerb = QuestInfo[questid][qQuestBy];

	SendReportMessage(COLOR_LIGHTRED, 1, "[RAPOR]: %d ID'li soruyu %s isimli support kabul etti.", questid, GetAccName(playerid));
	pTemp[QuestInfo[questid][qQuestBy]][pSendQuest] = false;
	DeletePVar(QuestInfo[questid][qQuestBy], "questidm");

	SendClientMessageEx(QuestInfo[questid][qQuestBy], 0x33AA33FF, "%s (%d) soru talebinize cevap verdi, lütfen sizinle irtibata geçmesini bekleyin. [Soru ID: %d]", GetAccName(playerid), playerid, questid);
	SendClientMessageEx(QuestInfo[questid][qQuestBy], 0xAFAFAFFF, "Soru: %s", QuestInfo[questid][qQuestDetails]);

	PlayerInfo[playerid][pTalepSayi]++;
	SQL_SetIntegerAcc("accounts", "talepsayi", PlayerInfo[playerid][pTalepSayi], PlayerInfo[playerid][pAccID]);

	SendServerMessage(playerid, "%s adlý kiþinin %d numaralý talebini kabul ettin.", GetNameEx(playerb), questid);

	QuestInfo[questid][qQuestExists] = false;
	QuestInfo[questid][qQuestBy] = INVALID_PLAYER_ID;

	return 1;
}

alias:sorured("sr");
CMD:sorured(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1)
		return 0;

	new questid;

	if (sscanf(params, "d", questid))
		return SendSyntaxMessage(playerid, "/sorureddet [soru id]");

	if(QuestInfo[questid][qQuestExists] == false)
		return SendErrorMessage(playerid, "Belirttiðiniz soru ID'i mevcut deðil.");

    new playerb = QuestInfo[questid][qQuestBy];

	SendReportMessage(0xFFFFFF, 1, "AdmCmd: %s, %d idli soruyu sildi.", GetNameEx(playerid), questid);
	pTemp[QuestInfo[questid][qQuestBy]][pSendQuest] = false;
	DeletePVar(QuestInfo[questid][qQuestBy], "questidm");

	SendClientMessageEx(QuestInfo[questid][qQuestBy], 0xFF6347FF, "%s (%d) soru talebinizi reddetti. [Soru ID: %d]", GetNameEx(playerid), playerid, questid);
	SendClientMessageEx(QuestInfo[questid][qQuestBy], 0xFF6347FF, "Sorunuz:");
	SendClientMessageEx(QuestInfo[questid][qQuestBy], 0xAFAFAFFF, "%s", QuestInfo[questid][qQuestDetails]);

	SendServerMessage(playerid, "%s adlý kiþinin %d numaralo talebini red ettin.", GetNameEx(playerb), questid);

	QuestInfo[questid][qQuestExists] = false;
	QuestInfo[questid][qQuestBy] = INVALID_PLAYER_ID;

	return 1;
}

/* Cadde sistemi */

Street_OnGameModeInit()
{
	street_zones[0] = CreateDynamicPolygon(zones_points_0);
	street_zones[1] = CreateDynamicPolygon(zones_points_1);
	street_zones[2] = CreateDynamicPolygon(zones_points_2);
	street_zones[3] = CreateDynamicPolygon(zones_points_3);
	street_zones[4] = CreateDynamicPolygon(zones_points_4);
	street_zones[5] = CreateDynamicPolygon(zones_points_5);
	street_zones[6] = CreateDynamicPolygon(zones_points_6);
	street_zones[7] = CreateDynamicPolygon(zones_points_7);
	street_zones[8] = CreateDynamicPolygon(zones_points_8);
	street_zones[9] = CreateDynamicPolygon(zones_points_9);
	street_zones[10] = CreateDynamicPolygon(zones_points_10);
	street_zones[11] = CreateDynamicPolygon(zones_points_11);
	street_zones[12] = CreateDynamicPolygon(zones_points_12);
	street_zones[13] = CreateDynamicPolygon(zones_points_13);
	street_zones[14] = CreateDynamicPolygon(zones_points_14);
	street_zones[15] = CreateDynamicPolygon(zones_points_15);
	street_zones[16] = CreateDynamicPolygon(zones_points_16);
	street_zones[17] = CreateDynamicPolygon(zones_points_17);
	street_zones[18] = CreateDynamicPolygon(zones_points_18);
	street_zones[19] = CreateDynamicPolygon(zones_points_19);
	street_zones[20] = CreateDynamicPolygon(zones_points_20);
	street_zones[21] = CreateDynamicPolygon(zones_points_21);
	street_zones[22] = CreateDynamicPolygon(zones_points_22);
	street_zones[23] = CreateDynamicPolygon(zones_points_23);
	street_zones[24] = CreateDynamicPolygon(zones_points_24);
	street_zones[25] = CreateDynamicPolygon(zones_points_25);
	street_zones[26] = CreateDynamicPolygon(zones_points_26);
	street_zones[27] = CreateDynamicPolygon(zones_points_27);
	street_zones[28] = CreateDynamicPolygon(zones_points_28);
	street_zones[29] = CreateDynamicPolygon(zones_points_29);
	street_zones[30] = CreateDynamicPolygon(zones_points_30);
	street_zones[31] = CreateDynamicPolygon(zones_points_31);
	street_zones[32] = CreateDynamicPolygon(zones_points_32);
	street_zones[33] = CreateDynamicPolygon(zones_points_33);
	street_zones[34] = CreateDynamicPolygon(zones_points_34);
	street_zones[35] = CreateDynamicPolygon(zones_points_35);
	street_zones[36] = CreateDynamicPolygon(zones_points_36);
	street_zones[37] = CreateDynamicPolygon(zones_points_37);
	street_zones[38] = CreateDynamicPolygon(zones_points_38);
	street_zones[39] = CreateDynamicPolygon(zones_points_39);
	street_zones[40] = CreateDynamicPolygon(zones_points_40);
	street_zones[41] = CreateDynamicPolygon(zones_points_41);
	street_zones[42] = CreateDynamicPolygon(zones_points_42);
	street_zones[43] = CreateDynamicPolygon(zones_points_43);
	street_zones[44] = CreateDynamicPolygon(zones_points_44);
	street_zones[45] = CreateDynamicPolygon(zones_points_45);
	street_zones[46] = CreateDynamicPolygon(zones_points_46);
	street_zones[47] = CreateDynamicPolygon(zones_points_47);
	street_zones[48] = CreateDynamicPolygon(zones_points_48);
	street_zones[49] = CreateDynamicPolygon(zones_points_49);
	street_zones[50] = CreateDynamicPolygon(zones_points_50);
	street_zones[51] = CreateDynamicPolygon(zones_points_51);
	street_zones[52] = CreateDynamicPolygon(zones_points_52);
	street_zones[53] = CreateDynamicPolygon(zones_points_53);
	street_zones[54] = CreateDynamicPolygon(zones_points_54);
	street_zones[55] = CreateDynamicPolygon(zones_points_55);
	street_zones[56] = CreateDynamicPolygon(zones_points_56);
	street_zones[57] = CreateDynamicPolygon(zones_points_57);
	street_zones[58] = CreateDynamicPolygon(zones_points_58);

	mysql_tquery(dbHandle, "SELECT * FROM `streets`", "LoadStreet");
}

St_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if (response == EDIT_RESPONSE_FINAL)
	{
		if (GetPVarInt(playerid, #edit_street) == 1) 		DestroyDynamicObject(objectid);
		else if (GetPVarInt(playerid, #edit_street) == 2) 	DeleteStreet(playerid, GetPVarInt(playerid, #id_street));
		else if (GetPVarInt(playerid, #edit_street) == 3)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			Save_Street(GetPVarInt(playerid, #id_street));
			DeletePVar(playerid, #id_street);
			return 1;
		}

		DeletePVar(playerid, #id_street);
		DeletePVar(playerid, #edit_street);

		Create_Street(playerid, x, y, z, rx, ry, rz);
	}
	if (response == EDIT_RESPONSE_CANCEL)
	{
		if (GetPVarInt(playerid, #edit_street) == 1) {
			DestroyDynamicObject(objectid);
		}
		else if (GetPVarInt(playerid, #edit_street) > 1) {
			new Float:oldX, Float:oldY, Float:oldZ,
				Float:oldRotX, Float:oldRotY, Float:oldRotZ;

			GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}

		DeletePVar(playerid, #id_street);
		DeletePVar(playerid, #edit_street);
	}
	return 1;
}
this::LoadStreet()
{
	new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows)
	{
	    print("[Streets] Kayit bulunamadi.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
        cache_get_value_int(i, "id", street_data[i][street_id]);
        cache_get_value_float(i, "stX", street_data[i][sSign][0]);
        cache_get_value_float(i, "stY", street_data[i][sSign][1]);
        cache_get_value_float(i, "stZ", street_data[i][sSign][2]);
        cache_get_value_float(i, "stRX", street_data[i][sSign][3]);
        cache_get_value_float(i, "stRY", street_data[i][sSign][4]);
        cache_get_value_float(i, "stRZ", street_data[i][sSign][5]);
        cache_get_value_float(i, "dX", street_data[i][sDirection][0]);
        cache_get_value_float(i, "dY", street_data[i][sDirection][1]);
        cache_get_value_float(i, "dZ", street_data[i][sDirection][2]);
        cache_get_value_float(i, "drX", street_data[i][sDirection][3]);
        cache_get_value_float(i, "drY", street_data[i][sDirection][4]);
        cache_get_value_float(i, "drZ", street_data[i][sDirection][5]);
        cache_get_value_float(i, "nX", street_data[i][sName][0]);
        cache_get_value_float(i, "nY", street_data[i][sName][1]);
        cache_get_value_float(i, "nZ", street_data[i][sName][2]);
        cache_get_value_float(i, "nrX", street_data[i][sName][3]);
        cache_get_value_float(i, "nrY", street_data[i][sName][4]);
        cache_get_value_float(i, "nrZ", street_data[i][sName][5]);

		cache_get_value(i, "street", street_data[i][street_name], 32);
		cache_get_value(i, "dir", street_data[i][street_direction], 20);

		SetUpSignCords(i, street_data[i][sSign][0], street_data[i][sSign][1], street_data[i][sSign][2], street_data[i][sSign][3], street_data[i][sSign][4], street_data[i][sSign][5]);
		//Final_StreetLoad(i);
		total++;
	}

    printf("[Streets] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return true;
}

Direction(Float: angle, dest[], size = sizeof dest) {
    while(angle >= 348.75) angle -= 360.0;
    while(angle < -11.25) angle += 360.0;

    static const direction[][] = {
        "CENTRAL   ",
        "NORTH WEST",
        "WEST NORTH",
        "WEST      ",
        "CENTRAL   ",
        "SOUTH WEST",
        "SOUTH WEST",
        "SOUTH     ",
        "CENTRAL   ",
        "SOUTH EAST",
        "EAST SOUTH",
        "EAST      ",
        "CENTRAL   ",
        "EAST NORTH",
        "NORTH EAST",
        "NORTH     "
    };
    return strcat((dest[0] = EOS, dest), direction[floatround((angle + 11.25) / 22.5, floatround_floor)], size);
}

Float: GetZAngle(Float: X1, Float: Y1, Float: X2, Float: Y2) {
    return -atan2(X2 - X1, Y2 - Y1); // From Point 1 to Point 2
}

returnAngel(playerid, Float:x, Float:y, dest[], size = sizeof dest) {
    new
        Float: player_x,
        Float: player_y,
        Float: z;

    if (GetPlayerPos(playerid, player_x, player_y, z)) return Direction(GetZAngle(player_x, player_y, x, y), dest, size);

    return 0;
}

stock street_free_slot() {
	for(new S = 0; S < MAX_STREET; S++) if (street_data[S][street_id] == 0) return S;
	return -1;
}

this::Create_Street(playerid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new areas[5], street_area[2], j = GetNumberDynamicAreasForPoint(x,y,z);
	GetDynamicAreasForPoint(x, y, z, areas, sizeof(areas));
	if (!GetStreet(areas, j, street_area)) return SendErrorMessage(playerid, "Bu bölgede belirlenmiþ sokak yok!");

	pTemp[playerid][editPos][0] = x;
	pTemp[playerid][editPos][1] = y;
	pTemp[playerid][editPos][2] = z;
	pTemp[playerid][editPos][3] = rx;
	pTemp[playerid][editPos][4] = ry;
	pTemp[playerid][editPos][5] = rz;

	new dlg[80];
	if (street_area[0] != -1) format(dlg, sizeof(dlg), "1. %s\n", street_names[street_area[0]]);
	if (street_area[1] != -1) format(dlg, sizeof(dlg), "%s2. %s", dlg, street_names[street_area[1]]);

	Dialog_Show(playerid, Select_Street, DIALOG_STYLE_LIST,"{FFFFFF}Sokak seçimi", dlg, ">>>", "");
	return 1;
} //î

Dialog:Select_Street(playerid, response, listitem, inputtext[])
{
	new Float:x = pTemp[playerid][editPos][0],
		Float:y = pTemp[playerid][editPos][1],
		Float:z = pTemp[playerid][editPos][2],
		Float:rx = pTemp[playerid][editPos][3],
		Float:ry = pTemp[playerid][editPos][4],
		Float:rz = pTemp[playerid][editPos][5];

	for(new i; i<6; i++) pTemp[playerid][editPos][i] = 0.0;

	new areas[10], street_area[2], j = GetNumberDynamicAreasForPoint(x,y,z);
	GetDynamicAreasForPoint(x, y, z, areas, sizeof(areas));
	if (!GetStreet(areas, j, street_area)) return SendErrorMessage(playerid, "Bu bölgede belirlenmiþ sokak yok!");

	new id = street_free_slot();
	if (id == -1) return SendErrorMessage(playerid, "Sokak tabelalarýnýn sýnýrý aþýldý!");

	new direction[12];
	returnAngel(playerid, x, y, direction, sizeof(direction));

	format(street_data[id][street_direction], 20, "%d %s", 1000+id, direction);
	format(street_data[id][street_name], 32, "%s", street_names[street_area[listitem]]);

	SetUpSignCords(id, x, y, z, rx, ry, rz);

	new query[526];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `streets` (street,dir,stX,stY,stZ,stRX,stRY,stRZ,nX,nY,nZ,nrX,nrY,nrZ,dX,dY,dZ,drX,drY,drZ) VALUES ('%e','%e',%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f)",
		street_names[street_area[listitem]], street_data[id][street_direction],
		x, y, z, rx, ry, rz,
		street_data[id][sName][0],street_data[id][sName][1],street_data[id][sName][2],street_data[id][sName][3],street_data[id][sName][4],street_data[id][sName][5],
		street_data[id][sDirection][0],street_data[id][sDirection][1],street_data[id][sDirection][2],street_data[id][sDirection][3],street_data[id][sDirection][4],street_data[id][sDirection][5]
	);
	mysql_tquery(dbHandle, query, "OnStreetInsert", "d", id);

	SendHelpMessage(playerid, "Baþarýyla bir sign oluþturuldu, düzenlemek için: /stname %i ve /stdir %i", id, id);
	return 1;
}

this::OnStreetInsert(id)
{
	return street_data[id][street_id] = cache_insert_id();
}

this::Save_Street(id)
{
	new query[156];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `streets` SET stX=%f,stY=%f,stZ=%f,stRX=%f,stRY=%f,stRZ=%f WHERE id=%i",
		street_data[id][sSign][0],street_data[id][sSign][1],street_data[id][sSign][2],
		street_data[id][sSign][3],street_data[id][sSign][4],street_data[id][sSign][5],
		street_data[id][street_id]
	);
    mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `streets` SET nX=%f,nY=%f,nZ=%f,nrX=%f,nrY=%f,nrZ=%f WHERE id=%i",
		street_data[id][sName][0],street_data[id][sName][1],street_data[id][sName][2],
		street_data[id][sName][3],street_data[id][sName][4],street_data[id][sName][5],
		street_data[id][street_id]
	);
    mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `streets` SET dX=%f,dY=%f,dZ=%f,drX=%f,drY=%f,drZ=%f WHERE id=%i",
		street_data[id][sDirection][0],street_data[id][sDirection][1],street_data[id][sDirection][2],
		street_data[id][sDirection][3],street_data[id][sDirection][4],street_data[id][sDirection][5],
		street_data[id][street_id]
	);
    mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `streets` SET dir='%e' WHERE id=%i", street_data[id][street_direction], street_data[id][street_id]);
    mysql_tquery(dbHandle, query);
	return 1;
}

DeleteStreet(playerid, id)
{
	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `streets` WHERE `id`=%i", street_data[id][street_id]);
	mysql_tquery(dbHandle, query);

	street_data[id][street_id] = 0;

	if (IsValidDynamicObject(street_data[id][street_object][0])) DestroyDynamicObject(street_data[id][street_object][0]);
	if (IsValidDynamicObject(street_data[id][street_object][1])) DestroyDynamicObject(street_data[id][street_object][1]);
	if (IsValidDynamicObject(street_data[id][street_object][2])) DestroyDynamicObject(street_data[id][street_object][2]);

	for(new i; i < 6; i++) {
		street_data[id][sName][i] = 0.0;
		street_data[id][sSign][i] = 0.0;
		street_data[id][sDirection][i] = 0.0;
	}

	street_data[id][street_name] = EOS;
	street_data[id][street_direction] = EOS;


	SendSyntaxMessage(playerid, "Sokak etiketi baþarýyla silindi. [ID:%i]", id);
	return 1;
}

SetUpSignCords(id, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	// direction x-0.150833 y-0.035949 z+2.720012
	// street    x+0.002197 y-0.025947 z+2.630009

	street_data[id][sSign][0] = x;
	street_data[id][sSign][1] = y;
	street_data[id][sSign][2] = z;
	street_data[id][sSign][3] = rx;
	street_data[id][sSign][4] = ry;
	street_data[id][sSign][5] = rz;
	street_data[id][sDirection][0] = x-0.150833; //+0.64917
	street_data[id][sDirection][1] = y-0.025947; //-0.03595
	street_data[id][sDirection][2] = z+2.720012; //+1.750012
	street_data[id][sDirection][3] = rx;
	street_data[id][sDirection][4] = ry;
	street_data[id][sDirection][5] = rz+90;
	street_data[id][sName][0] = x+0.002197; //-0.647827
	street_data[id][sName][1] = y-0.025947; //-0.03595
	street_data[id][sName][2] = z+2.630009; //+1.690008
	street_data[id][sName][3] = rx;
	street_data[id][sName][4] = ry;
	street_data[id][sName][5] = rz+90;

	Final_StreetLoad(id);
	return 1;
}

Final_StreetLoad(id) {
	if (IsValidDynamicObject(street_data[id][street_object][0])) DestroyDynamicObject(street_data[id][street_object][0]);
	if (IsValidDynamicObject(street_data[id][street_object][1])) DestroyDynamicObject(street_data[id][street_object][1]);
	if (IsValidDynamicObject(street_data[id][street_object][2])) DestroyDynamicObject(street_data[id][street_object][2]);

	street_data[id][street_object][0] = CreateDynamicObject(19981, street_data[id][sSign][0], street_data[id][sSign][1], street_data[id][sSign][2], street_data[id][sSign][3], street_data[id][sSign][4], street_data[id][sSign][5], -1, -1, -1, 300.00, 300.00);
	street_data[id][street_object][2] = CreateDynamicObject(18659, street_data[id][sDirection][0], street_data[id][sDirection][1], street_data[id][sDirection][2], street_data[id][sDirection][3], street_data[id][sName][4], street_data[id][sDirection][5], -1, -1, -1, 300.00, 300.00);
	street_data[id][street_object][1] = CreateDynamicObject(18659, street_data[id][sName][0], street_data[id][sName][1], street_data[id][sName][2], street_data[id][sName][3], street_data[id][sName][4], street_data[id][sName][5], -1, -1, -1, 300.00, 300.00);

	SetDynamicObjectMaterialText(street_data[id][street_object][2], 0, street_data[id][street_direction], 140, "Calibri", 16, 1, 0xFFFFFFFF, 0x00000000,1);// 0);
	SetDynamicObjectMaterialText(street_data[id][street_object][1], 0, street_data[id][street_name], 140, "Calibri", 25, 1, 0xFFFFFFFF, 0x00000000, 1);//2);

	Save_Street(id);
}

GetStreetID(playerid, Float: radius = 2.0)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    for(new i = 0; i != MAX_STREET; i++)
    {
        if (IsPlayerInRangeOfPoint(playerid, radius, street_data[i][sSign][0], street_data[i][sSign][1], street_data[i][sSign][2]))
        {
			return i;
        }
    }
    return -1;
}

GetStreet(areas_id[], amount, streets[], size = sizeof(streets))
{
	for(new i; i < size; i++) streets[i] = -1;

	new count;
	for(new s; s < amount; s ++) {
		for(new i; i < sizeof(street_names); i++) {
			if (IsValidDynamicArea(areas_id[s]) && areas_id[s] == street_zones[i]) {
				streets[count] = i;
				count++;
				if (count == size) break;
			}
		}
	}

	if (count) 	return 1;
	else 		return 0;
}


	//GetGroupCenter(x, y, z);
	//x = pTemp[playerid][editPos][0] + (x - pTemp[playerid][editPos][3]);
	//y = pTemp[playerid][editPos][1] + (y - pTemp[playerid][editPos][4]);
	//z = pTemp[playerid][editPos][2] + (z - pTemp[playerid][editPos][5]);

 // 			x			y			z
	//SING: 1370.981323, 271.397369, 19.566932
	//DIRECTION: x+0.64917, y-0.03595, z+1.750012, 0.000000, 0.000000, 90
	//STREETNAME: x-0.647827, y-0.049591, z+1.690008, 0.000000, 0.000000, 90

/*GetGroupCenter(&Float:x, &Float:y, &Float:z)
{
	new Float:highX = -9999999.0;
	new Float:highY = -9999999.0;
	new Float:highZ = -9999999.0;

	new Float:lowX  = 9999999.0;
	new Float:lowY  = 9999999.0;
	new Float:lowZ  = 9999999.0;

	if (x > highX) 	highX = x;
	if (y > highY) 	highY = y;
	if (z > highZ) 	highZ = z;
	if (x < lowX) 	lowX = x;
	if (y < lowY) 	lowY = y;
	if (z < lowZ) 	lowZ = z;

	if (x-0.150833 > highX) 	highX = x-0.150833; //sDirection
	if (y-0.025947 > highY) 	highY = y-0.025947;
	if (z+2.720012 > highZ) 	highZ = z+2.720012;
	if (x-0.150833 < lowX) 	lowX = x-0.150833;
	if (y-0.025947 < lowY) 	lowY = y-0.025947;
	if (z+2.720012 < lowZ) 	lowZ = z+2.720012;

	if (x-0.647827 > highX) 	highX = x-0.647827; //sNAME
	if (y-0.025947 > highY) 	highY = y-0.025947;
	if (z+2.630009 > highZ) 	highZ = z+2.630009;
	if (x-0.647827 < lowX) 	lowX = x-0.647827;
	if (y-0.025947 < lowY) 	lowY = y-0.025947;
	if (z+2.630009 < lowZ) 	lowZ = z+2.630009;

	x = (highX + lowX) / 2;
	y = (highY + lowY) / 2;
	z = (highZ + lowZ) / 2;

	return 1;
}*/

//	street_data[id][sDirection][0] = x-0.150833; //+0.64917
//	street_data[id][sDirection][1] = y-0.025947; //-0.03595
//	street_data[id][sDirection][2] = z+2.720012; //+1.750012
//	street_data[id][sName][0] = x+0.002197; //-0.647827
//	street_data[id][sName][1] = y-0.025947; //-0.03595
//	street_data[id][sName][2] = z+2.630009; //+1.690008

/* Marker sistemi */

Marks_OnGameModeInit()
{
    return mysql_tquery(dbHandle, "SELECT * FROM `marks`", "LoadDynamicMarks");
}

forward LoadDynamicMarks();
forward OnLoadPlayerMarks(playerid);

public LoadDynamicMarks()
{
    new rows = cache_num_rows(), time = GetTickCount(), total, id;

    if (!rows)   return print("[Marks] Kayit bulunamadi.");

    for(new i = 0; i < rows; i++)
    {
        if (i >= MAX_MARKS) break;
        cache_get_value_int(i, "id", id);
        cache_get_value(i, "text", E_MARKS[id][mText], 196);
        cache_get_value(i, "creator", E_MARKS[id][mCreator], 32);
        cache_get_value(i, "c_date", E_MARKS[id][mCreateDate], 64);
        cache_get_value_float(i, "posx", E_MARKS[id][mPosX]);
        cache_get_value_float(i, "posy", E_MARKS[id][mPosY]);
        cache_get_value_float(i, "posz", E_MARKS[id][mPosZ]);
        cache_get_value_int(i, "interior", E_MARKS[id][mInt]);
        cache_get_value_int(i, "world", E_MARKS[id][mVW]);

        E_MARKS[id][mON] = 1;
        E_MARKS[id][mLabel] = CreateDynamic3DTextLabel(E_MARKS[i][mText], 0xFFFFFFFF, E_MARKS[i][mPosX], E_MARKS[i][mPosY], E_MARKS[i][mPosZ], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, E_MARKS[i][mVW], E_MARKS[i][mInt]);

        total++;
    }

    printf("[Marks] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
    return 1;
}

public OnLoadPlayerMarks(playerid)
{
    new rows = cache_num_rows();

    if (!rows) return 1;

    for(new i = 0; i < rows; i++)
    {
        cache_get_value_int(i, "id", PlayerInfo[playerid][pMark][i]);
    }
    return 1;
}

LoadPlayerMarks(playerid)
{
    new query[196];
    mysql_format(dbHandle, query, sizeof(query), "SELECT `id` FROM `marks` WHERE `creator` = '%e' LIMIT %i", GetNameEx(playerid), MAX_PLAYER_MARKS);
    mysql_tquery(dbHandle, query, "OnLoadPlayerMarks", "d", playerid);
    return 1;
}

Mark_Nearest(playerid)
{
    for(new i = 0; i < MAX_MARKS; i++)
    {
        if (E_MARKS[i][mON])
        {
            if (IsPlayerInRangeOfPoint(playerid, 5.0, E_MARKS[i][mPosX], E_MARKS[i][mPosY], E_MARKS[i][mPosZ]) && GetInterior(playerid) == E_MARKS[i][mInt] && GetWorld(playerid) == E_MARKS[i][mVW])
            {
                return i;
            }
        }
    }
    return -1;
}

Mark_GetFreeID()
{
    for(new i = 0; i < MAX_MARKS; i++)
    {
        if (!E_MARKS[i][mON]) return i;
    }
    return -1;
}

Mark_GetPlayerFreeSlot(playerid)
{
    for(new i = 0; i < MAX_PLAYER_MARKS; i++)
    {
        if (PlayerInfo[playerid][pMark][i] == -1) return i;
    }
    return -1;
}

CreateDynamicMark(playerid, mark_id, mark_text[])
{
    new Float:x, Float:y, Float:z;

    GetPlayerPos(playerid, x, y, z);

    E_MARKS[mark_id][mID] = mark_id;
    format(E_MARKS[mark_id][mText], 196, "%s\n(( %s ))", mark_text, GetNameEx(playerid));
    format(E_MARKS[mark_id][mCreator], 32, "%s", GetNameEx(playerid));
    format(E_MARKS[mark_id][mCreateDate], 64, "%s", GetFullDate());
    E_MARKS[mark_id][mPosX] = x;
    E_MARKS[mark_id][mPosY] = y;
    E_MARKS[mark_id][mPosZ] = z;
    E_MARKS[mark_id][mInt] = GetInterior(playerid);
    E_MARKS[mark_id][mVW] = GetWorld(playerid);

    E_MARKS[mark_id][mON] = 1;
    E_MARKS[mark_id][mLabel] = CreateDynamic3DTextLabel(E_MARKS[mark_id][mText], 0xFFFFFFFF, E_MARKS[mark_id][mPosX], E_MARKS[mark_id][mPosY], E_MARKS[mark_id][mPosZ], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, E_MARKS[mark_id][mVW], E_MARKS[mark_id][mInt]);

    new query[512];
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `marks` (`id`, `text`, `creator`, `c_date`, `posx`, `posy`, `posz`, `interior`, `world`) VALUES (%i, '%s', '%s', '%s', %f, %f, %f, %i, %i)",
    mark_id, E_MARKS[mark_id][mText], E_MARKS[mark_id][mCreator], E_MARKS[mark_id][mCreateDate], E_MARKS[mark_id][mPosX], E_MARKS[mark_id][mPosY], E_MARKS[mark_id][mPosZ], E_MARKS[mark_id][mInt], E_MARKS[mark_id][mVW]);
    mysql_tquery(dbHandle, query);
}

DestroyDynamicMark(markid)
{
    foreach(new i : Player)
    {
        if (CompareStrings(E_MARKS[markid][mCreator], GetNameEx(i)))
        {
            for(new j = 0; j < MAX_PLAYER_MARKS; j++)
            {
                if (PlayerInfo[i][pMark][j] == markid)
                {
                     PlayerInfo[i][pMark][j] = -1;
                }
            }
        }
    }

    E_MARKS[markid][mID] = -1;
    E_MARKS[markid][mText][0] = EOS;
    E_MARKS[markid][mCreator][0] = EOS;
    E_MARKS[markid][mCreateDate][0] = EOS;
    E_MARKS[markid][mON] = 0;
    E_MARKS[markid][mPosX] = 0.0;
    E_MARKS[markid][mPosY] = 0.0;
    E_MARKS[markid][mPosZ] = 0.0;
    E_MARKS[markid][mInt] = 0;
    E_MARKS[markid][mVW] = 0;

    if (IsValidDynamic3DTextLabel(E_MARKS[markid][mLabel])) DestroyDynamic3DTextLabel(E_MARKS[markid][mLabel]);

    new query[256];
    mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `marks` WHERE `id` = %i", markid);
    mysql_tquery(dbHandle, query);
    return 1;
}

CMD:label(playerid, params[]) //ìåòêà
{
    if (!CheckAdmin(playerid, ADMIN_LEVEL_2))	return SendNotAdmin(playerid);

    new option[16], string[145];
    if (sscanf(params, "s[16]S()[144]", option, string))
    {
        SendHelpMessage(playerid, "/label [ayarlar]");
        SendSyntaxMessage(playerid, "liste / olustur / sil / duzenle");
        return 1;
    }

    if (CompareStrings(option, "liste"))
    {
        new list[512] = "{FFFFFF}Slot\t{FFFFFF}ID\n";
        for(new i = 0; i < MAX_PLAYER_MARKS; i++)
        {
            new markid = PlayerInfo[playerid][pMark][i];
            if (PlayerInfo[playerid][pMark][i] != -1)
            {
                format(list, sizeof(list), "%s%i\t%i\n", list, i + 1, markid);
            }
            else
            {
                format(list, sizeof(list), "%s%i\t%s\n", list, i + 1, RIGHT_NO);
            }
        }
        Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Mark listesi", list, "Kapat", "");
        return 1;
    }
    else if (CompareStrings(option, "olustur"))
    {
        new m_mes[129];
        if (sscanf(string, "s[128]",  m_mes))                    return SendHelpMessage(playerid, "/label olustur [metin]");
        if (strlen(m_mes) > 128)                                 return SendErrorMessage(playerid, "Metin maksimum 128 karakter olmalýdýr.");

        new markid = Mark_GetPlayerFreeSlot(playerid);

        if (markid == -1)                                        return SendErrorMessage(playerid, "Daha fazla yazi oluþturamazsýnýz: %i", MAX_PLAYER_MARKS);
        if (Mark_GetFreeID() == -1)                              return SendErrorMessage(playerid, "Etiket sýnýrý aþýldý. Bir süre sonra yeni bir etiket oluþturmaya çalýþýn.");
        if (Mark_Nearest(playerid) != -1)                        return SendErrorMessage(playerid, "Yakýnýnýzda bir iþaret var.");

        new mark = Mark_GetFreeID();

        PlayerInfo[playerid][pMark][markid] = mark;
        CreateDynamicMark(playerid, mark, m_mes);
        SendSyntaxMessage(playerid, "Etiket oluþturuldu: [ID: %i | SLOT: %i]", mark, markid + 1);
        return 1;
    }
    else if (CompareStrings(option, "sil"))
    {
        new markid = Mark_Nearest(playerid);

        if (markid == -1)                                                    return SendErrorMessage(playerid, "Yakýnýnýzda marker bulunmuyor.");
        if (!CompareStrings(E_MARKS[markid][mCreator], GetNameEx(playerid)))  return SendErrorMessage(playerid, "Bu etiket size ait deðil.");

        DestroyDynamicMark(markid);
        SendSyntaxMessage(playerid, "Etiket silindi [ID: %i].", markid);
        return 1;
    }
    else if (CompareStrings(option, "duzenle"))
    {
        new m_mes[129];
        if (sscanf(string, "s[128]", m_mes))         return SendHelpMessage(playerid, "/label duzenle [yeni metin]");
        if (strlen(m_mes) > 128)                     return SendErrorMessage(playerid, "Metin maksimum 128 karakter olmalýdýr.");

        new markid = Mark_Nearest(playerid);

        if (markid == -1)                                                                    return SendErrorMessage(playerid, "Yakýnýnýzda marker bulunmuyor.");
        if (!CompareStrings(E_MARKS[markid][mCreator], GetNameEx(playerid)))                 return SendErrorMessage(playerid,"Bu etiket size ait deðil.");

        format(E_MARKS[markid][mText], 128, "%s\n(( %s ))", m_mes, GetNameEx(playerid));
        SQL_SetString("marks", "text", E_MARKS[markid][mText], markid);
        UpdateDynamic3DTextLabelText(E_MARKS[markid][mLabel], 0xFFFFFFFF, E_MARKS[markid][mText]);
        SendSyntaxMessage(playerid, "Etiketin metini deðiþtirildi. [ID: %i].", markid);
    }
    else
    {
        SendHelpMessage(playerid, "/label [ayarlar]");
        SendSyntaxMessage(playerid, "liste/olustur/sil/duzenle");
    }
    return 1;
}

/* Ticket sistemi */
this::ShowCarsTickets(playerid, back)
{
	new
		fetch[128],
		string[3500]
	;

    if (cache_num_rows())
    {
		format(string, sizeof(string), "#\tFiyat\tAçýklama\tTarih");
		if (pTemp[playerid][pDialogList]) format(string, sizeof(string), "%s\n{bccd32}<<{FFFFFF}", string);

		if (!back)
		{
			for(new i = 0; i < cache_num_rows(); i++)
			{
				new
					amount,
					reason[128]
				;

				cache_get_value_int(i, "amount", amount);

				cache_get_value(i, "reason", fetch);
				format(reason, sizeof(reason), fetch);

				cache_get_value_int(i, "id", Tickets[playerid][i][tID]);
				cache_get_value(i, "date", fetch);
				format(string, sizeof(string), "%s\n%i\t$%d\t%.50s...\t%s", string, i+1+pTemp[playerid][pDialogList]*MAX_TICKETS, amount, reason, fetch);
			}
		} else {
			for(new i = cache_num_rows()-1; i >= 0; i--)
			{
				new
					amount,
					reason[128]
				;

				cache_get_value_int(i, "amount", amount);

				cache_get_value(i, "reason", fetch);
				format(reason, sizeof(reason), fetch);

				cache_get_value_int(i, "id", Tickets[playerid][cache_num_rows()-1-i][tID]);
				cache_get_value(i, "date", fetch);
				format(string, sizeof(string), "%s\n%i\t$%d\t%.50s...\t%s", string, cache_num_rows()-i+pTemp[playerid][pDialogList]*MAX_TICKETS, amount, reason, fetch);
			}
		}
		new vehicle;
		cache_get_value_int(0, "vehicle", vehicle);
		if (CountVehicleIDTickets(vehicle) > MAX_TICKETS*(pTemp[playerid][pDialogList]+1)) format(string, sizeof(string), "%s\n{bccd32}>>", string);
    }
    else return SendWarningMessage(playerid, "Bu aracýn herhangi bir cezasý yok.");

	return Dialog_Show(playerid, VehicleFines, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF} Ödenmemiþ cezalarýn listesi", string, "Seç", "Kapat");
}

this::ShowCarTicket(playerid, vehicle)
{
	new
		fetch[128],
		mes[256],
		vehicleid = vehicle
	;
    if (!cache_num_rows())	return 1;

	cache_get_value_int(0, "id", Ticket[playerid][tID]);

	format(mes, sizeof(mes), "{a9c4e4}Uygulanan Araç:\t\t {ffffff}%s\n", VehicleNames[GetVehicleModel(vehicleid)-400]);

	cache_get_value(0, "officer", fetch);
	format(mes, sizeof(mes), "%s{a9c4e4}Memur:\t\t {ffffff}%s ", mes, fetch);

	cache_get_value(0, "faction", fetch);
	format(mes, sizeof(mes), "%s[%s]\n", mes, GetInitials(Factions[strval(fetch)][fName]));

	cache_get_value_int(0, "amount", Ticket[playerid][tAmount]);
	format(mes, sizeof(mes), "%s{a9c4e4}Ücret:\t\t\t {ffffff}$%i{a9c4e4}\n", mes, Ticket[playerid][tAmount]);

	cache_get_value(0, "date", fetch);
	format(mes, sizeof(mes), "%s{a9c4e4}Tarih:\t\t\t {ffffff}%s\n\n", mes, fetch);

	cache_get_value(0, "reason", fetch);
	format(Ticket[playerid][tReason], 128, "%s", fetch);
	format(mes, sizeof(mes), "%s{a9c4e4}Açýklama:{ffffff}\n%s", mes, Ticket[playerid][tReason]);

	if (IsPlayerFactionPolice(playerid) && PlayerInfo[playerid][pOnDuty] && GetPVarInt(playerid, #ticketsuse))
		Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{F5DEB3}Ceza detaylarý", mes, "Kapat", "");
	else Dialog_Show(playerid, VehicleFinesTake, DIALOG_STYLE_MSGBOX, "{F5DEB3}Ceza detaylarý", mes, "Ödeme Yap", "Geri Dön");

	return 1;
}

this::ShowPlayersTickets(playerid, back)
{
	new
		fetch[128],
		string[600]
	;

    if (cache_num_rows())
    {
		format(string, sizeof(string), "#\tFiyat\tAçýklama\tTarih");
		if (pTemp[playerid][pDialogList]) format(string, sizeof(string), "%s\n{bccd32}<<{FFFFFF}", string);

		if (!back)
		{
			for(new i = 0; i < cache_num_rows(); i++)
			{
				new
					amount,
					reason[12]
				;

				cache_get_value_int(i, "amount", amount);

				cache_get_value(i, "reason", fetch);
				format(reason, sizeof(reason), fetch);

				cache_get_value_int(i, "id", Tickets[playerid][i][tID] );

				cache_get_value(i, "date", fetch);
				format(string, sizeof(string), "%s\n%i\t$%d\t%.50s...\t%s", string, i+1+pTemp[playerid][pDialogList]*MAX_TICKETS, amount, reason, fetch);
			}
		}
		else
		{
			for(new i = cache_num_rows()-1; i >= 0; i--)
			{
				new
					amount,
					reason[12]
				;

				cache_get_value_int(i, "amount", amount);

				cache_get_value(i, "reason", fetch);
				format(reason, sizeof(reason), fetch);

				cache_get_value_int(i, "id", Tickets[playerid][cache_num_rows()-1-i][tID]);

				cache_get_value(i, "date", fetch);
				format(string, sizeof(string), "%s\n%i\t$%d\t%.50s...\t%s", string, cache_num_rows()-i+pTemp[playerid][pDialogList]*MAX_TICKETS, amount, reason, fetch);
			}
		}

		if (CountPlayerTickets(playerid) > MAX_TICKETS*(pTemp[playerid][pDialogList]+1)) format(string, sizeof(string), "%s\n{bccd32}>>", string);
    }
    else return SendWarningMessage(playerid, "Ödenmemiþ ceza yok!");

	Dialog_Show(playerid, ShowPlayerFinesShow, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Ödenmemiþ Ceza Listesi", string, "Seç", "Kapat");
	return 1;
}


this::ShowPlayerTicket(playerid)
{
	new fetch[128],
		mes[256],
		ownername[MAX_PLAYER_NAME]
	;

    if (!cache_num_rows())	return 1;

	cache_get_value_int(0, "id", Ticket[playerid][tID]);

	cache_get_value(0, "name", ownername);
	strreplace(fetch, '_', ' ');
	format(mes, sizeof(mes), "{a9c4e4}Kiþi:\t\t {ffffff}%s\n", ownername);

	cache_get_value(0, "officer", fetch);
	format(mes, sizeof(mes), "%s{a9c4e4}Memur:\t\t {ffffff}%s ", mes, fetch);

	cache_get_value(0, "faction", fetch);
	format(mes, sizeof(mes), "%s[%s]\n", mes, GetInitials(Factions[strval(fetch)][fName]));

	cache_get_value_int(0, "amount", Ticket[playerid][tAmount]);
	format(mes, sizeof(mes), "%s{a9c4e4}Fiyat:\t\t\t {ffffff}$%i\n", mes, Ticket[playerid][tAmount]);

	cache_get_value(0, "date", fetch);
	format(mes, sizeof(mes), "%s{a9c4e4}Tarih:\t\t\t {ffffff}%s\n\n", mes, fetch);

	cache_get_value(0, "reason", fetch);
	format(Ticket[playerid][tReason], 128, fetch);
	format(mes, sizeof(mes), "%s{a9c4e4}Açýklama:{ffffff}\n%s", mes, fetch);

	if (IsPlayerFactionPolice(playerid) && PlayerInfo[playerid][pOnDuty] && GetPVarInt(playerid, #ticketsuse))
		Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{F5DEB3}Ceza Ayrýntýlarý", mes, "Kapat", "");
	else Dialog_Show(playerid, PlayerFinesPay, DIALOG_STYLE_MSGBOX, "{F5DEB3}Ceza Ayrýntýlarý", mes, "Öde", "Geri");

	return 1;
}

GivePlayerTicket(officerid, playerid, amount, reason[], iscam = 0)
{
    new query[96 + 11 + MAX_PLAYER_NAME + 1 + 64 + 24 + 1];

	if (!iscam)
	{
    	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `tickets` (userid, officer, faction, amount, reason, date) VALUES (%i, '%e', %i, %i, '%e', '%s')", PlayerInfo[playerid][pID], GetNameEx(officerid), PlayerInfo[officerid][pFaction], amount, reason, GetFullDate());
	}
	else
	{
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `tickets` (userid, officer, faction, amount, reason, date) VALUES (%i, 'Hýz Kamerasý', 3, %i, '%e', '%s')", playerid, amount, reason, GetFullDate());
	}

	mysql_tquery(dbHandle, query);
	return 1;
}

GiveVehicleTicket(officerid, vehicle, amount, reason[], iscam = 0)
{
    new query[97 + 11 + MAX_PLAYER_NAME + 1 + 64 + 24 + 1];

	if (!iscam)
	{
    	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `tickets` (vehicle, officer, faction, amount, reason, date) VALUES (%i, '%e', %i, %i, '%e', '%s')", VehicleInfo[vehicle][carID], GetNameEx(officerid), PlayerInfo[officerid][pFaction], amount, reason, GetFullDate());
	}
	else
	{
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `tickets` (vehicle, officer, faction, amount, reason, date) VALUES (%i, 'Hýz Kamerasý', 3, %i, '%e', '%s')", VehicleInfo[vehicle][carID], amount, reason, GetFullDate());
	}
	mysql_tquery(dbHandle, query);
	return 1;
}//ï¿½

DeleteVehicleTickets(vehicle)
{
	new query[256];
  	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `tickets` WHERE `vehicle`=%i", VehicleInfo[vehicle][carID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

DeletePlayerTickets(playerid)
{
	new query[256];
  	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `tickets` WHERE `userid`=%i", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

CountPlayerTickets(playerid)
{
	new
		query[256]
	;

 	mysql_format(dbHandle, query, sizeof(query), "SELECT COUNT(id) AS total FROM `tickets` WHERE `userid` = %i AND `paid` = 0", PlayerInfo[playerid][pID]);
	new Cache:cache = mysql_query(dbHandle, query),
		count;

	cache_get_value_int(0, "total", count);

	cache_delete(cache);
	cache = MYSQL_INVALID_CACHE;
	return count;
}


CountPlayerTicketsID(userid)
{
	new
		query[256]
	;

 	mysql_format(dbHandle, query, sizeof(query), "SELECT COUNT(id) AS total FROM `tickets` WHERE `userid` = %i AND `paid` = 0", userid);
	new Cache:cache = mysql_query(dbHandle, query),
		count;

	cache_get_value_int(0, "total", count);
	cache_delete(cache);
	cache = MYSQL_INVALID_CACHE;
	return count;
}

CountVehicleTickets(vid)
{
	new query[512];

 	mysql_format(dbHandle, query, sizeof(query), "SELECT COUNT(id) AS total FROM `tickets` WHERE `vehicle` = %i AND `paid` = 0", VehicleInfo[vid][carID]);
	new Cache:cache = mysql_query(dbHandle, query), count;

	cache_get_value_int(0, "total", count);
	cache_delete(cache);
	cache = MYSQL_INVALID_CACHE;
	return count;
}

CountVehicleIDTickets(vid)
{
	new query[512];

 	mysql_format(dbHandle, query, sizeof(query), "SELECT COUNT(id) AS total FROM `tickets` WHERE `vehicle` = %i AND `paid` = 0", vid);
	new Cache:cache = mysql_query(dbHandle, query), count;
    cache_get_value_int(0, "total", count);
	cache_delete(cache);
	cache = MYSQL_INVALID_CACHE;
	return count;
}

/*
MDC_CountPlayerTickets(playerid)
{
	new
		query[256]
	;

 	mysql_format(dbHandle, query, sizeof(query), "SELECT COUNT(id) AS total FROM `tickets` WHERE `userid` = %i", PlayerInfo[playerid][pID]);
	new Cache:cache = mysql_query(dbHandle, query),
		count = cache_get_value_int(0, "total");

	cache_delete(cache);
	return count;
}

MDC_CountVehicleTickets(vehicle)
{
	new
		query[256]
	;

 	mysql_format(dbHandle, query, sizeof(query), "SELECT COUNT(id) AS total FROM `tickets` WHERE `vehicle` = %i", VehicleInfo[vehicle][carID]);
	new Cache:cache = mysql_query(dbHandle, query),
		count = cache_get_value_int(0, "total");

	cache_delete(cache);
	return count;
}*/

Dialog:VehicleFines(playerid, response, listitem, inputtext[])
{
	if (!response)						return 1;

	new vehicle;
	if (IsPlayerFactionPolice(playerid) && PlayerInfo[playerid][pOnDuty] && GetPVarInt(playerid, #ticketsuse))
	{
		vehicle = GetPVarInt(playerid, #tickets_show);
	}
	else
	{
		if (!IsPlayerInAnyVehicle(playerid))
			return SendNotInVehicle(playerid);

		vehicle = GetPlayerVehicleID(playerid);

		if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
			return SendErrorMessage(playerid, "Bu aracýn sahibi deðilsiniz.");
	}

	new query[255];
	if (listitem == 0 && pTemp[playerid][pDialogList])
	{
		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `vehicle`=%i AND `paid`=0 AND `id` > %i LIMIT %i", VehicleInfo[vehicle][carID], Tickets[playerid][0][tID], MAX_TICKETS);
		mysql_tquery(dbHandle, query, "ShowCarsTickets", "ii", playerid, 1);
		pTemp[playerid][pDialogList]--;
		return 1;
	}

	else if ((listitem == MAX_TICKETS + 1 && pTemp[playerid][pDialogList]) || (listitem == MAX_TICKETS && !pTemp[playerid][pDialogList]))
	{
		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `vehicle`=%i AND `paid`=0 AND `id` < %i ORDER BY `id` DESC LIMIT %i", VehicleInfo[vehicle][carID], Tickets[playerid][MAX_TICKETS-1][tID], MAX_TICKETS);
		mysql_tquery(dbHandle, query, "ShowCarsTickets", "ii", playerid, 0);
		pTemp[playerid][pDialogList]++;
		return 1;
	}

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `vehicle`=%i AND `id`=%i LIMIT 1",
		VehicleInfo[vehicle][carID],
		(!pTemp[playerid][pDialogList])?(Tickets[playerid][listitem][tID]):(Tickets[playerid][listitem-1][tID]));
	mysql_tquery(dbHandle, query, "ShowCarTicket", "ii", playerid, vehicle);

	return 1;
}

Dialog:VehicleFinesTake(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		if (IsPlayerFactionPolice(playerid) && PlayerInfo[playerid][pOnDuty] && GetPVarInt(playerid, #ticketsuse))
			return pc_cmd_araccezakontrol(playerid, "");
		else return pc_cmd_aracceza(playerid, "");
	}

    new vehicle = GetPlayerVehicleID(playerid);

	if (vehicle == 0)													return SendNotInVehicle(playerid);
	if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu aracýn sahibi deðilsiniz.");
	if (GetCash(playerid) < Ticket[playerid][tAmount])                  return SendErrorMessage(playerid, "Yeterince paran yok.");

    GiveCash(playerid, -Ticket[playerid][tAmount]);

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `tickets` SET `paid`=1 WHERE `id`=%i", Ticket[playerid][tID]);
	mysql_tquery(dbHandle, query, "VehicleFineTook", "i", playerid);

    for(new i = 0; i < MAX_TICKETS; i++) Tickets[playerid][i][tID] = 0;
	return 1;
}

this::VehicleFineTook(playerid)
{
	SM1(playerid, "Faturayý baþarýyla ödediniz.");
	pc_cmd_server_ame(playerid, "faturayý alýr ve ödeme yapar.");
	return 1;
}

Dialog:ShowPlayerFinesShow(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new userid;
	if (IsPlayerFactionPolice(playerid) && PlayerInfo[playerid][pOnDuty] && GetPVarInt(playerid, #ticketsuse))
	{
		userid = GetPVarInt(playerid, #tickets_show);
	}
	else
	{
		userid = playerid;
	}

	new query[555];
	if (listitem == 0 && pTemp[playerid][pDialogList])
	{
		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `userid`=%i AND `paid`=0 AND `id` > %i LIMIT %i", PlayerInfo[userid][pID], Tickets[playerid][0][tID], MAX_TICKETS);
		mysql_tquery(dbHandle, query, "ShowPlayersTickets", "ii", playerid, 1);
		pTemp[playerid][pDialogList]--;
		return 1;
	}

	else if ((listitem == MAX_TICKETS + 1 && pTemp[playerid][pDialogList]) || (listitem == MAX_TICKETS && !pTemp[playerid][pDialogList]))
	{
		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `userid`=%i AND `paid`=0 AND `id` < %i ORDER BY `id` DESC LIMIT %i", PlayerInfo[userid][pID], Tickets[playerid][MAX_TICKETS-1][tID], MAX_TICKETS);
		mysql_tquery(dbHandle, query, "ShowPlayersTickets", "ii", playerid, 0);
		pTemp[playerid][pDialogList]++;
		return 1;
	}

	mysql_format(dbHandle, query, sizeof(query), "SELECT t.*, u.`name` as ownername FROM `tickets` t LEFT JOIN `users` u ON t.`userid` = u.`id` WHERE t.`userid` = %i AND u.`id` = %i AND t.`id` = %i LIMIT %i",
		PlayerInfo[userid][pID], PlayerInfo[userid][pID],
		Tickets[playerid][listitem][tID], MAX_TICKETS);
	mysql_tquery(dbHandle, query, "ShowPlayerTicket", "i", playerid);

	return 1;
}


Dialog:PlayerFinesPay(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		if (IsPlayerFactionPolice(playerid) && PlayerInfo[playerid][pOnDuty] && GetPVarInt(playerid, #ticketsuse))
			return pc_cmd_cezakontrol(playerid, "");
		else return pc_cmd_cezalarim(playerid, "");
	}

    if (!Bank_Nearest(playerid))	return SendErrorMessage(playerid, "Cezayý ödemek için bankada olmalýsýnýz.");

	if (GetCash(playerid) < Tickets[playerid][0][tAmount])	return SendErrorMessage(playerid, "Cezayý ödemek  için yeterli paranýz yok, $%i.", Ticket[playerid][tAmount]);

	SM1(playerid, "Ceza ödediniz: \"%.20s...\", ödenen $%i.", Ticket[playerid][tReason], Ticket[playerid][tAmount]);
    SendHelpMessage(playerid, "Ödenmemiþ cezalarýnýz var - %i.", CountPlayerTickets(playerid)-1);
	GiveCash(playerid, -Ticket[playerid][tAmount]);

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `tickets` SET `paid`= 1 WHERE `id`=%i", Ticket[playerid][tID]);
	mysql_tquery(dbHandle, query);

	return 1;
} //î

alias:cezalarim("cezalar");
CMD:cezalarim(playerid, params[])
{
	new query[255];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `userid`=%i AND `paid`=0 ORDER BY `id` DESC LIMIT %i", PlayerInfo[playerid][pID], MAX_TICKETS);
	mysql_tquery(dbHandle, query, "ShowPlayersTickets", "ii", playerid, 0);

	pTemp[playerid][pDialogList] = 0;

	return 1;
}

alias:aracceza("araccezalarim", "araccezalari", "aracfatura");
CMD:aracceza(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);

	if (!IsValidVehicle(PlayerInfo[playerid][pCarKey]))					return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý.");
	if (!IsPlayerInAnyVehicle(playerid))								return SendNotInVehicle(playerid);
	if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu aracýn sahibi deðilsiniz.");

	pTemp[playerid][pDialogList] = 0;

	new query[285];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `vehicle`=%i AND `paid`=0 ORDER BY `id` DESC LIMIT %i", VehicleInfo[vehicle][carID], MAX_TICKETS);
	mysql_tquery(dbHandle, query, "ShowCarsTickets", "i", playerid);
	return 1;
}
//î

/* MDC sistemi */
MD_OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if (playertextid == MDC_UI[playerid][16]) // X
    {
        MDC_Hide(playerid);
        return 1;
    }

    if (playertextid == MDC_BACK[playerid])
    {
        if (MdcInfo[playerid][mdcBack] == PAGE_LOOKUP_VEHICLES_LIST)
        {
            new query[164];
            mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = cars.owner) as ownername FROM `cars` WHERE `owner` = %i AND `registered`=1 LIMIT 3", GetPVarInt(playerid, #MDC_OWNER_ID));
            mysql_tquery(dbHandle, query, "MDCSearchVehiclesList", "i", playerid);
            MdcInfo[playerid][mdcListPage] = 0;
        }
        else if (MdcInfo[playerid][mdcBack] == PAGE_LOOKUP_VEHICLE)
        {
            new query[164];
            mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = cars.owner) as ownername FROM `cars` WHERE `id` = %i AND `registered`=1 LIMIT 1", GetPVarInt(playerid, #MDC_ID));
            mysql_tquery(dbHandle, query, "MDCSearchVehicle", "i", playerid);
        }
        else if (MdcInfo[playerid][mdcBack] == PAGE_LOOKUP_PERSON)
        {
            new query[64];
            mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `id` = %i", GetPVarInt(playerid, #MDC_ID));
	        mysql_tquery(dbHandle, query, "MDCSearchPersonInfo", "i", playerid);
            MdcInfo[playerid][mdcListPage] = 0;

            DeletePVar(playerid, #MDC_FINE);
        }
        else if (MdcInfo[playerid][mdcBack] == PAGE_MENU)
        {
            Update_MDC(playerid, PAGE_MENU);

            for(new j = 0; j < 16; j++)
            {
                if (MdcInfo[playerid][mdcList][j] != -1)
                    PlayerTextDrawShow(playerid, MDC_LIST[playerid][j]);
            }

            //MdcInfo[playerid][mdcPage] = PAGE_MENU;

            if (MdcInfo[playerid][mdcMenu] == PAGE_LOOKUP_PERSON)
                MdcInfo[playerid][mdcBack] = PAGE_LOOKUP_PERSON;
            else
                MdcInfo[playerid][mdcBack] = PAGE_LOOKUP_VEHICLE;
        }
        else if (MdcInfo[playerid][mdcBack] == PAGE_MEMBERS)
        {
            Update_MDC(playerid, PAGE_MEMBERS);
            MDC_ShowMembersMenu(playerid);
        }
        return 1;
    }

	if (playertextid == MDC_UI[playerid][2]) // "ÃËÀÂÍÀß");
	{
		MDC_PAGE(playerid, PAGE_MAIN);
		return 1;
   	}

	if (playertextid == MDC_UI[playerid][3]) // "ÏÎÈÑÊ");
   	{
		MDC_PAGE(playerid, PAGE_LOOKUP);
		return 1;
   	}

	if (playertextid == MDC_UI[playerid][4]) // "ÂÛÇÎÂÛ");
	{
        MDC_PAGE(playerid, PAGE_CALLS);
		return 1;
   	}

    if (playertextid == MDC_UI[playerid][5]) // "ÑÎÒÐÓÄÍÈÊÈ");
	{
        MDC_PAGE(playerid, PAGE_MEMBERS);
        //Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{3D62A8}ÑÎÒÐÓÄÍÈÊÈ", "{ffffff}Mobile Data Computer âñ¸ åù¸ íàõîäèòñÿ â ðàçðàáîòêå.\nÌû ïðîñèì ó âàñ òåðïåíèÿ è ïîíèìàíèÿ.\n\nÑ óâàæåíèåì,\n{a9c4e4}SASD Tech. Department", "Close", "");
		return 1;
   	}

    if (playertextid == MDC_UI[playerid][6]) // "APB");
   	{
        MDC_PAGE(playerid, PAGE_APB);
        return 1;
   	}

    if (playertextid == MDC_UI[playerid][7]) // "ÞÍÈÒÛ");
   	{
        MDC_PAGE(playerid, PAGE_ROSTER);
		return 1;
   	}

    if (playertextid == MDC_UI[playerid][8]) // "CCTV");
   	{
        MDC_PAGE(playerid, PAGE_CCTV);
		return 1;
   	}

    if (playertextid == MDC_LOOKUP_SEARCH[playerid][0]) // "ÈÌß");
   	{
        if (MdcInfo[playerid][mdcPage] == PAGE_APB)
        {
            new apb = -1;

            for(new i = MAX_APBS-1; i >= 0; i--)
            {
                if (ApbInfo[i][apbOn] != 0) continue;

                apb = i;
                break;
            }

            if (apb == -1)	return SendErrorMessage(playerid,"APB bildirimi yazmak için yer kalmamýþ.");

            SetPVarInt(playerid, #MDC_ID, apb);
            Dialog_Show(playerid, APB_CREATE_FIRST, DIALOG_STYLE_INPUT, "{098d18}APB oluþturma ", "{B4B5B7}Þüphelinin adýný soyadýný giriniz:\n- Maksimum 24 karakter desteklemektedir.", ">>>", "Kapat");
        }
        else
        {
            PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0x494949FF); // ÈÌß

            PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0x494949FF);
            PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0xa7a7a7FF); // ÒÑ

            for(new i = 0; i < 2; i++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_SEARCH[playerid][i]);

            MdcInfo[playerid][mdcSearch] = 0;
        }
        return 1;
   	}

    if (playertextid == MDC_LOOKUP_SEARCH[playerid][1]) // "ÒÑ");
    {
        if (MdcInfo[playerid][mdcPage] == PAGE_APB)
        {
            if (MdcInfo[playerid][mdcSearch])
            {
                PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][1], "ISIM");
                MdcInfo[playerid][mdcSearch] = 0;

                PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0xa7a7a7FF);
                PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0x494949FF); // ÒÑ
            }
            else
            {
                PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][1], "YAZI");
                MdcInfo[playerid][mdcSearch] = 1;

                PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0x494949FF);
                PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0xa7a7a7FF); // ÒÑ
            }
        }
        else
        {
            PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0x494949FF);
            PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0xa7a7a7FF); // ÈÌß

            PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0x494949FF); // ÒÑ

            for(new i = 0; i < 2; i++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_SEARCH[playerid][i]);

            MdcInfo[playerid][mdcSearch] = 1;
        }
        return 1;
   	}

    if (playertextid == MDC_LOOKUP_SEARCH[playerid][2]) // "Done");
   	{
        if (MdcInfo[playerid][mdcPage] == PAGE_APB)
        {
            if (!MdcInfo[playerid][mdcSearch])
                Dialog_Show(playerid, MDC_APB_SEARCH_NAME, DIALOG_STYLE_INPUT, "{8D8DFF}MDC  - Ýsim ile ara", "Aradýðýnýz kiþinin ismini kutucuða girin:", "Arat", "Geri Dön");
            else
                Dialog_Show(playerid, MDC_APB_SEARCH_CHARGE, DIALOG_STYLE_INPUT, "{8D8DFF}MDC  - Eþgal belirterek ara", "Aratmak istediðiniz bir kelimeyi yazabilirsin:", "Arat", "Geri Dön");
        }
        else
        {
            if (!MdcInfo[playerid][mdcSearch])
                Dialog_Show(playerid, MDCSearchPerson, DIALOG_STYLE_INPUT, "{8D8DFF}MDC  - Ýsim ile ara", "{B4B5B7}Ýsim ile ara\n\nAd soyad giriniz:\n\nFormat Ad_Soyad þeklinde olmalý ((veya oyuncu ID))", "Arat", "Geri Dön");
            else
                Dialog_Show(playerid, MDCSearchVehicleType, DIALOG_STYLE_TABLIST, "{8D8DFF}MDC  - Araç arama", "Sahip adý ile ara\nPlaka ile ara", "Seç", "Geri Dön");
        }

        return 1;
    }

    if (playertextid == MDC_LOOKUP_SEARCH[playerid][3]) // "Hang up");
    {
        PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], "______________");
        PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);

        SetPVarInt(playerid, #MDC_APB_S, 0);

        /*
        new page = MdcInfo[playerid][mdcPage];

        switch(page)
        {
			case PAGE_LOOKUP_PERSON:
			{

			}
			case PAGE_LOOKUP_VEHICLE:
			{

			}
			case PAGE_LOOKUP_VEHICLES_LIST:
			{

			}
        }*/

        if (MdcInfo[playerid][mdcPage] == PAGE_APB)
        {
            MDC_PAGE(playerid, PAGE_APB);
        }
        else
        {
            for(new h = 0; h < 8; h++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLE[playerid][h]);

            for(new a = 0; a < 12; a++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][a]);
            for(new b = 0; b < 3; b++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);
            for(new g = 0; g < 3; g++)  PlayerTextDrawHide(playerid, MDC_VEH_LIST_CLICK[playerid][g]);

            for(new j = 0; j < 2; j++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_AVATAR[playerid][j]);
            for(new k = 0; k < 12; k++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][k]);

            MdcInfo[playerid][mdcPage] = PAGE_LOOKUP;
        }

        MdcInfo[playerid][mdcListPage] = 0;

        return 1;
    }

    if (playertextid == MDC_LOOKUP_PERSON[playerid][4])
    {
        if(MdcInfo[playerid][mdcPage] == PAGE_MEMBERS_MAP) {
            if (pTemp[playerid][pSpecPlayer] == INVALID_PLAYER_ID) SavePlayerPos(playerid);
            new userid = GetPVarInt(playerid, #BODYCAM);
            pTemp[playerid][pSpecPlayer] = userid;
            TogglePlayerSpectating(playerid, 1);

            if (IsPlayerInAnyVehicle(userid)) 	PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userid));
            else 								PlayerSpectatePlayer(playerid, userid);

            SetInterior(playerid, GetInterior(userid));
            SetWorld(playerid, GetWorld(userid));

            MDC_Hide(playerid);

            SendSyntaxMessage(playerid, "/izlemeyibirak yazarak kiþiyi izlemeyi býrakabilirsin.");
        } else {
            Dialog_Show(playerid, MDCRecord, DIALOG_STYLE_INPUT, "{8D8DFF}MDC  - Ýddianame", "{B4B5B7}SUÇLAMA\n\nOnaylamak için kiþi adý girin:\n\nFormat Ad_Soyad þeklinde olmalýdýr ((veya oyuncu ID))", "Arat", "Geri Dön");
        }

        //**new mes[256];
        //format(mes, sizeof(mes), "{B4B5B7}ÏÐÅÄÚßÂËÅÍÈÅ ÎÁÂÈÍÅÍÈÉ\n\nÎáâèíÿåìûé: %s\n\nnÂâåäèòå òåêñò îáâèíåíèÿ: (( Ïðåñòóïëåíèå / 128 ñèìâîëîâ))", GetNameEx(pTemp[playerid][pMDCPlayer]));
        //Dialog_Show(playerid, MDCRecord2, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Ïðåäúÿâëåíèå îáâèíåíèÿ", mes, "Done", "Ýptal");
        return 1;
    }

    if (playertextid == MDC_LOOKUP_PERSON[playerid][5])
    {
        new query[255];
        mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `id` = %i LIMIT 1", GetPVarInt(playerid, #MDC_ID));
	    mysql_tquery(dbHandle, query, "MDC_LICENSE", "i", playerid);

        return 1;
    }

    if (playertextid == MDC_LOOKUP_PERSON[playerid][6]) // Ïðîñìîòð øòðàôîâ
    {
        new query[255];
        mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `userid`=%i ORDER BY `id` DESC LIMIT 16", GetPVarInt(playerid, #MDC_ID));
        mysql_tquery(dbHandle, query, "MDC_ShowMenu", "ii", playerid, 0);

        MdcInfo[playerid][mdcListPage] = 0;

        new Float:countticket = CountPlayerTicketsID(GetPVarInt(playerid, #MDC_ID));
        countticket = countticket/16;
        SetPVarInt(playerid, #MAX_MDC_PAGE, floatround(countticket, floatround_ceil));

        SetPVarInt(playerid, #MDC_FINE, 1);

        return 1;
    }

    if (playertextid == MDC_LOOKUP_PERSON[playerid][7]) // ÑÓÄÈÌÎÑÒÈ
    {
        new query[255];
        mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `criminalrecords` WHERE `userid`=%i ORDER BY `id` DESC LIMIT 16", GetPVarInt(playerid, #MDC_ID));
        mysql_tquery(dbHandle, query, "MDC_ShowMenu", "ii", playerid, 0);

        MdcInfo[playerid][mdcListPage] = 0;

        new Float:countticket = CountPlayerRecords(GetPVarInt(playerid, #MDC_ID));
        countticket = countticket/16;
        SetPVarInt(playerid, #MAX_MDC_PAGE, floatround(countticket, floatround_ceil));

        DeletePVar(playerid, #MDC_FINE);
        return 1;
    }

    if (playertextid == MDC_LOOKUP_PERSON[playerid][10]) // ÍÅÄÂÈÆÈÌÎÑÒÜ
    {
        if (GetPVarInt(playerid, "pDelay"))  return 1;

        new query[255];
        mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `id` = %i", GetPVarInt(playerid, #MDC_ID));
	    mysql_tquery(dbHandle, query, "MDC_MAP", "i", playerid);

        return 1;
    }

    for(new k = 1; k < 6; k++)
    {
        if (playertextid == MDC_OTHER_ADDRESS[playerid][k])
        {
            new h_id = MdcInfo[playerid][mdcList][0],
                strhouse[80],

                Float:map_kY = -0.04795376,
                Float:map_kX = 0.0469,

                Float:map_sX = 333.999420,
                Float:map_sY = 295.181152,

                Float:corX, Float:corY
            ;

            MdcInfo[playerid][mdcList][0] = MdcInfo[playerid][mdcList][k];
            MdcInfo[playerid][mdcList][k] = h_id;

            new dot = MdcInfo[playerid][mdcList][0];

            if (HouseInfo[dot][hPosX] >= 0.000000)
            {
                PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][0], "samaps:gtasamapbit2");
                PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][1], "samaps:gtasamapbit4");
                PlayerTextDrawShow(playerid, MDC_ADDRESS[playerid][0]);
                PlayerTextDrawShow(playerid, MDC_ADDRESS[playerid][1]);

                map_kX = 0.0469;
                map_sX = 333.999420;

                corX = HouseInfo[dot][hPosX] * map_kX + map_sX;
                corY = HouseInfo[dot][hPosY] * map_kY + map_sY;
            }
            else
            {
                PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][0], "samaps:gtasamapbit1");
                PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][1], "samaps:gtasamapbit3");
                PlayerTextDrawShow(playerid, MDC_ADDRESS[playerid][0]);
                PlayerTextDrawShow(playerid, MDC_ADDRESS[playerid][1]);

                map_kX = -0.0469;
                map_sX = 480.066314;

                corX = map_sX - HouseInfo[dot][hPosX] * map_kX;
                corY = HouseInfo[dot][hPosY] * map_kY + map_sY;
            }

            format(strhouse, sizeof(strhouse), "%s,~n~San Andreas", (!HouseInfo[MdcInfo[playerid][mdcList][0]][hApart])?(GetHouseZone(MdcInfo[playerid][mdcList][0], 1)):(GetApartmentZone(HouseInfo[MdcInfo[playerid][mdcList][0]][hApart], 1)));
            PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][4], strhouse);

            PlayerTextDrawDestroy(playerid, MDC_ADDRESS[playerid][2]);
            MDC_ADDRESS[playerid][2] = PlayerText:INVALID_TEXT_DRAW;

            MDC_ADDRESS[playerid][2] = CreatePlayerTextDraw(playerid, corX, corY, "hud:radar_propertyG");
            PlayerTextDrawTextSize(playerid, MDC_ADDRESS[playerid][2], 5.000000, 6.000000);
            PlayerTextDrawFont(playerid, MDC_ADDRESS[playerid][2], 4);
            PlayerTextDrawShow(playerid, MDC_ADDRESS[playerid][2]);

            format(strhouse, sizeof(strhouse), "- %.35s", (!HouseInfo[h_id][hApart])?(GetHouseZone(h_id, 2)):(GetApartmentZone(HouseInfo[h_id][hApart], 2)));
            PlayerTextDrawSetString(playerid, MDC_OTHER_ADDRESS[playerid][k], strhouse);
        }
    }

    for(new i = 0; i < 3; i++)
    {
        if (playertextid == MDC_VEH_LIST_CLICK[playerid][i])
        {
            new query[156];
            mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = cars.owner) as ownername FROM `cars` WHERE `id` = %i AND `registered`=1 LIMIT 1", MdcInfo[playerid][mdcList][i]);
            mysql_tquery(dbHandle, query, "MDCSearchVehicle", "i", playerid);

            Update_MDC(playerid, PAGE_LOOKUP_VEHICLE);
            return 1;
        }
    }

    if (playertextid == MDC_LOOKUP_VEHICLES_ARROWS[playerid][1]) //+
    {
        new query[164];

        if (MdcInfo[playerid][mdcPage] == PAGE_MENU)
        {
            if (MdcInfo[playerid][mdcListPage] == GetPVarInt(playerid, #MAX_MDC_PAGE)-1)
               return 1;

            if (MdcInfo[playerid][mdcMenu] == PAGE_LOOKUP_PERSON)
            {
                if (GetPVarInt(playerid, #MDC_FINE)) {
                    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `userid`=%i AND `id` < %i ORDER BY `id` DESC LIMIT 16", GetPVarInt(playerid, #MDC_ID), MdcInfo[playerid][mdcList][15]);
                    mysql_tquery(dbHandle, query, "MDC_ShowMenu", "ii", playerid, 0);
                    MdcInfo[playerid][mdcListPage]++;
                } else {
                    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `criminalrecords` WHERE `userid`=%i AND `id` < %i ORDER BY `id` DESC LIMIT 16", GetPVarInt(playerid, #MDC_ID), MdcInfo[playerid][mdcList][15]);
                    mysql_tquery(dbHandle, query, "MDC_ShowMenu", "ii", playerid, 0);
                    MdcInfo[playerid][mdcListPage]++;
                }
            }
            else if (MdcInfo[playerid][mdcMenu] == PAGE_LOOKUP_VEHICLE)
            {
                mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `vehicle`=%i AND `id` < %i ORDER BY `id` DESC LIMIT 16", GetPVarInt(playerid, #MDC_ID), MdcInfo[playerid][mdcList][15]);
                mysql_tquery(dbHandle, query, "MDC_ShowMenu", "ii", playerid, 0);
                MdcInfo[playerid][mdcListPage]++;
            }
            return 1;
        }
        else if (MdcInfo[playerid][mdcPage] == PAGE_LOOKUP_VEHICLES_LIST)
        {
            if (MdcInfo[playerid][mdcListPage] == GetPVarInt(playerid, #MAX_MDC_PAGE)-1) return 1;

            mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = cars.owner) as ownername FROM `cars` WHERE `owner` = %i AND `registered`=1 AND `id` > %i LIMIT 3", GetPVarInt(playerid, #MDC_OWNER_ID), MdcInfo[playerid][mdcList][2]);
            mysql_tquery(dbHandle, query, "MDCSearchVehiclesList", "i", playerid);

            MdcInfo[playerid][mdcListPage]++;
            return 1;
        }
        else if (MdcInfo[playerid][mdcPage] == PAGE_APB)
        {
            if (MdcInfo[playerid][mdcListPage] == GetPVarInt(playerid, #MAX_MDC_PAGE)-1) return 1;
            for(new apb = 0; apb < 20; apb++)  PlayerTextDrawHide(playerid, MDC_APB_TD[playerid][apb]);

            new count,
                string[256],
                text[128]
            ;

            GetPVarString(playerid, #MDC_APB_TEXT, text, 128);

            for(new i = MdcInfo[4][mdcList]-1; i >= 0; i--)
            {
                if (ApbInfo[i][apbOn] == 0) continue;

                if (count < 5)
                {
                    if (GetPVarInt(playerid, #MDC_APB_S))
                        if (strfind(ApbInfo[i][apbCharge], text, true) != -1) continue;

                    format(string, sizeof(string), "%s, #%i~n~%.60s%s~n~%s, %s", ApbInfo[i][apbSuspect], ApbInfo[i][apbID]+90214, ApbInfo[i][apbCharge], (strlen(ApbInfo[i][apbCharge]) > 60)?("_.."):("_"), ApbInfo[i][apbOfficer], ApbInfo[i][apbDate]);
                    PlayerTextDrawSetString(playerid, MDC_APB_TD[playerid][count*4+1], string);

                    MdcInfo[count][mdcList] = i;

                    for(new j = count*4; j < count*4+4; j++) PlayerTextDrawShow(playerid, MDC_APB_TD[playerid][j]);
                }
                else break;
                count++;
            }

            MdcInfo[playerid][mdcListPage]++;

            new strpage[7];
            format(strpage, sizeof(strpage), "%i_/_%i", MdcInfo[playerid][mdcListPage]+1, GetPVarInt(playerid, #MAX_MDC_PAGE));
            PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], strpage);
            return 1;
        }
        else if (MdcInfo[playerid][mdcPage] == PAGE_CALLS)
        {
            if (MdcInfo[playerid][mdcListPage] == GetPVarInt(playerid, #MAX_MDC_PAGE)-1) return 1;
            for(new apb = 0; apb < 20; apb++)  PlayerTextDrawHide(playerid, MDC_CALLS_TD[playerid][apb]);

            new
                count,
                string[256]
            ;

            for(new i = MdcInfo[4][mdcList]-1; i >= 0; i--)
            {
                if (CallInfo[i][callExists] == 0) continue;

                if (count < 5)
                {
                    new statusmes[65];
                    if (CallInfo[i][callAccept]) format(statusmes, sizeof(statusmes), "%s", CallInfo[i][callAcceptBy]);
                    else format(statusmes, sizeof(statusmes), "~r~CAGRI KABUL EDILMEMIS ");

                    switch(CallInfo[i][callType])
                    {
                        case 1: format(string, sizeof(string), "LSPD");
                        case 2: format(string, sizeof(string), "LSFD");
                        case 3: format(string, sizeof(string), "LSPD, LSFD");
                    }

                    format(string, sizeof(string), "%s (No: %i)~n~%s~n~%s~n~%.60s%s~n~%s~n~%s",
                        CallInfo[i][callName],
                        CallInfo[i][callPhone],
                        string,
                        CallInfo[i][callLocation],
                        CallInfo[i][callText],
                        (strlen(CallInfo[i][callText]) > 60)?(".."):(""),
                        CallInfo[i][callDate],
                        statusmes
                    );
                    PlayerTextDrawSetString(playerid, MDC_CALLS_TD[playerid][count*4+1], string);

                    MdcInfo[count][mdcList] = i;

                    for(new j = count*4; j < count*4+4; j++) PlayerTextDrawShow(playerid, MDC_CALLS_TD[playerid][j]);
                    if (CallInfo[i][callAccept]) PlayerTextDrawHide(playerid, MDC_CALLS_TD[playerid][count*4+2]);
                }
                else break;
                count++;
            }

            MdcInfo[playerid][mdcListPage]++;

            new strpage[7];
            format(strpage, sizeof(strpage), "%i_/_%i", MdcInfo[playerid][mdcListPage]+1, GetPVarInt(playerid, #MAX_MDC_PAGE));
            PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], strpage);
            return 1;
        }
        else if (MdcInfo[playerid][mdcPage] == PAGE_CCTV)
        {
            if (MdcInfo[playerid][mdcListPage] == GetPVarInt(playerid, #MAX_MDC_PAGE)-1) return 1;
            MdcInfo[playerid][mdcListPage]++;

            mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cctvs` WHERE `id` > %i ORDER BY `id` DESC LIMIT 16", MdcInfo[playerid][mdcList][15]);
            mysql_tquery(dbHandle, query, "MDC_ShowCCTVMenu", "ii", playerid, 0);
            return 1;
        }
        else if (MdcInfo[playerid][mdcPage] == PAGE_ROSTER)
        {
            if (MdcInfo[playerid][mdcListPage] == GetPVarInt(playerid, #MAX_MDC_PAGE)-1) return 1;
            MdcInfo[playerid][mdcListPage]++;

            MDC_ShowRosterMenu(playerid);
            return 1;
        }
    }
    if (playertextid == MDC_LOOKUP_VEHICLES_ARROWS[playerid][2]) //--
    {
        if (!MdcInfo[playerid][mdcListPage]) return 1;

        new query[164];

        if (MdcInfo[playerid][mdcPage] == PAGE_MENU)
        {
            if (MdcInfo[playerid][mdcMenu] == PAGE_LOOKUP_PERSON)
            {
                if (GetPVarInt(playerid, #MDC_FINE)) {
                    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `userid`=%i AND `id` > %i LIMIT 16", GetPVarInt(playerid, #MDC_ID), MdcInfo[playerid][mdcList][0]);
                    mysql_tquery(dbHandle, query, "MDC_ShowMenu", "ii", playerid, 1);
                    MdcInfo[playerid][mdcListPage]--;
                } else {
                    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `criminalrecords` WHERE `userid`=%i AND `id` > %i LIMIT 16", GetPVarInt(playerid, #MDC_ID), MdcInfo[playerid][mdcList][0]);
                    mysql_tquery(dbHandle, query, "MDC_ShowMenu", "ii", playerid, 1);
                    MdcInfo[playerid][mdcListPage]--;
                }
            }
            else if (MdcInfo[playerid][mdcMenu] == PAGE_LOOKUP_VEHICLE)
            {
                mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `vehicle`=%i AND `id` > %i LIMIT 16", GetPVarInt(playerid, #MDC_ID), MdcInfo[playerid][mdcList][0]);
                mysql_tquery(dbHandle, query, "MDC_ShowMenu", "ii", playerid, 1);
                MdcInfo[playerid][mdcListPage]--;
            }
            return 1;
        }
        else if (MdcInfo[playerid][mdcPage] == PAGE_LOOKUP_VEHICLES_LIST)
        {
            mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = cars.owner) as ownername FROM `cars` WHERE `owner` = %i AND `registered`=1 AND `id` < %i LIMIT 3", GetPVarInt(playerid, #MDC_OWNER_ID), MdcInfo[playerid][mdcList][0]);
            mysql_tquery(dbHandle, query, "MDCSearchVehiclesList", "i", playerid);
            MdcInfo[playerid][mdcListPage]--;
            return 1;
        }
        else if (MdcInfo[playerid][mdcPage] == PAGE_APB)
        {
            for(new apb = 0; apb < 20; apb++)  PlayerTextDrawHide(playerid, MDC_APB_TD[playerid][apb]);

            new count,
                string[256],
                text[128]
            ;

            GetPVarString(playerid, #MDC_APB_TEXT, text, 128);

            for(new i = MdcInfo[0][mdcList]+1; i != MAX_APBS; i++)
            {
                if (ApbInfo[i][apbOn] == 0) continue;

                if (count < 5)
                {
                    if (GetPVarInt(playerid, #MDC_APB_S))
                        if (strfind(ApbInfo[i][apbCharge], text, true) != -1) continue;

                    format(string, sizeof(string), "%s, #%i~n~%.60s%s~n~%s, %s", ApbInfo[i][apbSuspect], ApbInfo[i][apbID]+90214, ApbInfo[i][apbCharge], (strlen(ApbInfo[i][apbCharge]) > 60)?("_.."):("_"), ApbInfo[i][apbOfficer], ApbInfo[i][apbDate]);
                    PlayerTextDrawSetString(playerid, MDC_APB_TD[playerid][17 - count*4], string);

                    MdcInfo[4-count][mdcList] = i;

                    for(new j = 19 - count*4; j > 19 - (count+1)*4; j--) PlayerTextDrawShow(playerid, MDC_APB_TD[playerid][j]);
                }
                else break;

                count++;
            }

            MdcInfo[playerid][mdcListPage]--;

            new strpage[7];
            format(strpage, sizeof(strpage), "%i_/_%i", MdcInfo[playerid][mdcListPage]+1, GetPVarInt(playerid, #MAX_MDC_PAGE));
            PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], strpage);
            return 1;
        }

        else if (MdcInfo[playerid][mdcPage] == PAGE_CALLS)
        {
            for(new apb = 0; apb < 20; apb++)  PlayerTextDrawHide(playerid, MDC_CALLS_TD[playerid][apb]);

            new
                count,
                string[256]
            ;

            for(new i = MdcInfo[0][mdcList]+5; i != MAX_CALLS_AND_ARREST; i--)
            {
                if (CallInfo[i][callExists] == 0) continue;

                new statusmes[65];
                if (CallInfo[i][callAccept]) format(statusmes, sizeof(statusmes), "%s", CallInfo[i][callAcceptBy]);
                else format(statusmes, sizeof(statusmes), "~r~CAGRI KABUL EDILMEMIS ");

                switch(CallInfo[i][callType])
                {
                    case 1: format(string, sizeof(string), "LSPD");
                    case 2: format(string, sizeof(string), "LSFD");
                    case 3: format(string, sizeof(string), "LSPD, LSFD");
                }

                if (count < 5)
                {
                    format(string, sizeof(string), "%s (No: %i)~n~%s~n~%s~n~%.60s%s~n~%s~n~%s",
                        CallInfo[i][callName],
                        CallInfo[i][callPhone],
                        string,
                        CallInfo[i][callLocation],
                        CallInfo[i][callText],
                        (strlen(CallInfo[i][callText]) > 60)?(".."):(""),
                        CallInfo[i][callDate],
                        statusmes
                    );
                    PlayerTextDrawSetString(playerid, MDC_CALLS_TD[playerid][count*4+1], string);

                    MdcInfo[count][mdcList] = i;

                    for(new j = count*4; j < count*4+4; j++) PlayerTextDrawShow(playerid, MDC_CALLS_TD[playerid][j]);
                    if (CallInfo[i][callAccept]) PlayerTextDrawHide(playerid, MDC_CALLS_TD[playerid][count*4+2]);
                }
                else break;
                count++;
            }

            MdcInfo[playerid][mdcListPage]--;

            new strpage[7];
            format(strpage, sizeof(strpage), "%i_/_%i", MdcInfo[playerid][mdcListPage]+1, GetPVarInt(playerid, #MAX_MDC_PAGE));
            PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], strpage);
            return 1;
        }
        else if (MdcInfo[playerid][mdcPage] == PAGE_CCTV)
        {
            MdcInfo[playerid][mdcListPage]--;

            mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cctvs` WHERE `id` < %i LIMIT 16", MdcInfo[playerid][mdcList][0]);
            mysql_tquery(dbHandle, query, "MDC_ShowCCTVMenu", "ii", playerid, 1);
            return 1;
        }
         else if (MdcInfo[playerid][mdcPage] == PAGE_ROSTER)
            {
                MdcInfo[playerid][mdcListPage]--;
                MDC_ShowRosterMenu(playerid);
                return 1;
            }
    }

    if (playertextid == MDC_LOOKUP_VEHICLE[playerid][7]) // ÎÁÜßÂÈÒÜ ÒÑ Â ÐÎÇÛÑÊ
    {
        new plates[24], query[156];
        GetPVarString(playerid, #MDC_VEHICLE_NUM, plates, 24);

        mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cars` WHERE `plate` = '%e' LIMIT 1", plates);
        mysql_tquery(dbHandle, query, "MDC_Veh_Wanted", "i", playerid);
        return 1;
    }

    if (playertextid == MDC_LOOKUP_VEHICLE[playerid][6]) //ÓÄÀËÈÒÜ ÇÀÌÅÒÊÓ");
    {
        new plates[24], query[156];
        GetPVarString(playerid, #MDC_VEHICLE_NUM, plates, 24);

        mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cars` WHERE `plate` = '%e' LIMIT 1", plates);
        mysql_tquery(dbHandle, query, "MDC_DELETE_NOTE", "i", playerid);
        return 1;
    }

    if (playertextid == MDC_LOOKUP_VEHICLE[playerid][5]) //ÄÎÁÀÂÈÒÜ ÇÀÌÅÒÊÓ");
    {
        new plates[24], query[156];
        GetPVarString(playerid, #MDC_VEHICLE_NUM, plates, 24);

        mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cars` WHERE `plate` = '%e' LIMIT 1", plates);
        mysql_tquery(dbHandle, query, "MDC_NEW_NOTE", "i", playerid);
        return 1;
    }

    if (playertextid == MDC_LOOKUP_VEHICLE[playerid][4]) // Ïðîñìîòð øòðàôîâ
    {
        new query[255];
        mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `vehicle`=%i ORDER BY `id` DESC LIMIT 16", GetPVarInt(playerid, #MDC_ID));
        mysql_tquery(dbHandle, query, "MDC_ShowMenu", "ii", playerid, 0);

        MdcInfo[playerid][mdcListPage] = 0;

        new Float:countticket = CountVehicleTickets(GetPVarInt(playerid, #MDC_ID));
        countticket = countticket/16;
        SetPVarInt(playerid, #MAX_MDC_PAGE, floatround(countticket, floatround_ceil));

        SetPVarInt(playerid, #MDC_FINE, 1);

        return 1;
    }

    for(new j = 0; j < 16; j++)
    {
        if (playertextid == MDC_LIST[playerid][j])
        {
            new query[156];

            if (MdcInfo[playerid][mdcMenu] == PAGE_LOOKUP_PERSON)
            {
                if (GetPVarInt(playerid, #MDC_FINE))
                {
                    mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = tickets.userid) as ownername FROM `tickets` WHERE `userid`=%i AND `id`=%i LIMIT 1",
                        GetPVarInt(playerid, #MDC_ID),
                        MdcInfo[playerid][mdcList][j]
                    );
                    return mysql_tquery(dbHandle, query, "MDC_ShowInfo", "i", playerid);
                }
                else
                {
                    mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = criminalrecords.userid) as ownername FROM `criminalrecords` WHERE `userid`=%i AND `id`=%i LIMIT 1",
                        GetPVarInt(playerid, #MDC_ID),
                        MdcInfo[playerid][mdcList][j]
                    );
                    return mysql_tquery(dbHandle, query, "MDC_ShowInfo", "i", playerid);
                }

            }
            else if (MdcInfo[playerid][mdcMenu] == PAGE_LOOKUP_VEHICLE)
            {
                mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `model` FROM `cars` WHERE id = tickets.vehicle) as vehiclemodel FROM `tickets` WHERE `vehicle`=%i AND `id`=%i LIMIT 1",
                    GetPVarInt(playerid, #MDC_ID),
                    MdcInfo[playerid][mdcList][j]);
                return mysql_tquery(dbHandle, query, "MDC_ShowInfo", "i", playerid);
            }
            else if (MdcInfo[playerid][mdcPage] == PAGE_CCTV)
            {
                new factionid = PlayerInfo[playerid][pFaction];
                if (!IsPlayerInRangeOfPoint(playerid, 30.0, Factions[factionid][fPosX], Factions[factionid][fPosY], Factions[factionid][fPosZ])) {
			        return SendErrorMessage(playerid, "Bu özelliði sadece departman içinde kullanabilirsin.");
                }

                new command[10], id;
                for(new cam = 0; cam < MAX_CCTV; cam++)
                {
                    if (CCTVInfo[cam][tvID] == MdcInfo[playerid][mdcList][j])
                    {
                        id = cam;
                        break;
                    }
                }
                if (id < 0 || id > MAX_CCTV-1 || !CCTVInfo[id][tvObjectOn]) return SendErrorMessage(playerid, "CCTV bulunamadý.");
		        if (CCTVInfo[id][tvBreak]) {
                    Waypoint_Set(playerid, CCTVInfo[id][tvPosX],CCTVInfo[id][tvPosY],CCTVInfo[id][tvPosZ], 3.0);
                    return SendErrorMessage(playerid, "Kamera kýrýlmýþ.");
                }

                format(command, sizeof(command), "goruntule %i", id);
                pc_cmd_cctv(playerid, command);
            }

            return 1;
        }
    }

    for(new r = 0; r < 18; r++)
    {
        if (playertextid == MDC_TD_MENU[playerid][r])
        {
            if (MdcInfo[playerid][mdcPage] == PAGE_ROSTER)
            {
                new count = -1;
                for(new i = 0; i != MAX_PATROL; i++)
                {
                    if (!PatrolInfo[GetPatrolID(playerid)][i][patrulExists]) continue;

                    count++;
                    if (r == count)         break;
                    if(i == MAX_PATROL-1)   return 1;
                }

                if (count == -1) return 1;

                if (pTemp[playerid][pPatrol])
                {
                    pc_cmd_ekip(playerid, "");
                    return MDC_PAGE(playerid, PAGE_ROSTER);
                }

                new roster = MdcInfo[playerid][mdcList][count];
                if(roster > 18) return SendErrorMessage(playerid, "Sayfayý yenileyin!");

                if (PatrolInfo[GetPatrolID(playerid)][roster][patrulOfficer][0] == INVALID_PLAYER_ID &&
                    PatrolInfo[GetPatrolID(playerid)][roster][patrulOfficer][1] == INVALID_PLAYER_ID)	{
                        return 1;
                }

                if (PatrolInfo[GetPatrolID(playerid)][roster][patrulOfficer][0] != INVALID_PLAYER_ID &&
                    PatrolInfo[GetPatrolID(playerid)][roster][patrulOfficer][1] != INVALID_PLAYER_ID)	{
                        return SendErrorMessage(playerid, "Bu devriye sonlandýrýlmýþ.");
                }

                if (PatrolInfo[GetPatrolID(playerid)][roster][patrulOfficer][0] == INVALID_PLAYER_ID) {
                    PatrolInfo[GetPatrolID(playerid)][roster][patrulOfficer][0] = playerid;
                } else {
                    PatrolInfo[GetPatrolID(playerid)][roster][patrulOfficer][1] = playerid;
                }

                pTemp[playerid][pPatrol] = roster+1;
                SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "[Departman] %s %s isimli memur %s etiketi ile devriyeye katýldý.", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][roster][patrulName]);

                MDC_PAGE(playerid, PAGE_ROSTER);
            } else if (MdcInfo[playerid][mdcPage] == PAGE_MEMBERS) {
                if(!GetBodyCamRight(playerid)) return SendErrorMessage(playerid, "Bu sayfayý görüntüleme yetkiniz yok. (( /izinlerim ))");

                new count = -1;
                foreach(new i : Player) {
                    if (IsPlayerLogged(i) == 0 || PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction])	continue;
                    count++;
                    if (i == MdcInfo[playerid][mdcList][count]) break;
                }

                if(count == -1) return 1;
                if(pTemp[MdcInfo[playerid][mdcList][count]][tempStatus] == 1) MEMBERS_MAP(playerid, MdcInfo[playerid][mdcList][count]);
            }
            return 1;
        }
    }

    if (playertextid == MDC_TD_LEFT_PANEL[playerid][1])
    {
        if (MdcInfo[playerid][mdcMenu] == PAGE_ROSTER) {
            if (pTemp[playerid][pPatrol])
            {
                pc_cmd_ekip(playerid, "");
                MDC_PAGE(playerid, PAGE_ROSTER);
            }
            else Dialog_Show(playerid, MDC_ROSTER_CHANGE, DIALOG_STYLE_INPUT,"Callsign", "{FFFFFF}Yeni bir ekip kodu giriþi yapýn:", "Ekle", "Ýptal");
        } else if (MdcInfo[playerid][mdcMenu] == PAGE_MEMBERS) {
            if (pTemp[playerid][tempStatus] == 1) {
                pTemp[playerid][tempStatus] = 2;
                foreach(new p : Player) { if(pTemp[p][pSpecPlayer] == playerid) TogglePlayerSpectating(p, 0); }

                MDC_ShowMembersMenu(playerid);
            } else if (pTemp[playerid][tempStatus] == 2) {
                pTemp[playerid][tempStatus] = 1;

                MDC_ShowMembersMenu(playerid);
            }
        }
        return 1;
    }

    for(new apb = 0; apb < 5; apb++)
    {
        if (playertextid == MDC_APB_TD[playerid][2+4*apb]) // Äåòàëè
        {
            new
                mes[256],
                i_apb = MdcInfo[apb][mdcList]
            ;

            SetPVarInt(playerid, #MDC_ID, apb);

            format(mes, sizeof(mes),
            "{a9c4e4}#%i\n\n\
            {a9c4e4}Þüpheli:{ffffff}\t %s\n\
            {a9c4e4}Açýklama:{ffffff}\t %s\n\n\
            {a9c4e4}Ekleyen memur:{ffffff}\t %s\n\
            {a9c4e4}Tarih:{ffffff}\t\t %s\n",
            ApbInfo[i_apb][apbID]+90214,
            ApbInfo[i_apb][apbSuspect],
            ApbInfo[i_apb][apbCharge],
            ApbInfo[i_apb][apbOfficer],
            ApbInfo[i_apb][apbDate]);

            Dialog_Show(playerid, MDC_APB_DETAIL, DIALOG_STYLE_MSGBOX, "{098d18}APB", mes, "Düzenle", "Ýptal");
        }
        else if (playertextid == MDC_APB_TD[playerid][3+4*apb]) // Óäàëèòü
        {
            SetPVarInt(playerid, #MDC_ID, MdcInfo[apb][mdcList]);
            ConfirmDialog(playerid, "Doðrulama", "{FFFFFF}APB kaydýný silmek istediðinize emin misiniz?", "MDC_DELETE_APB");
        }
        else if (playertextid == MDC_CALLS_TD[playerid][2+4*apb]) // handle
        {
            new
                string[512],
                id = MdcInfo[apb][mdcList]
            ;

            if (pTemp[playerid][pPatrol])	SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* [%s] %s %s [%s] 911 hattýna düþen acil çaðrýyý yanýtladý. #%i.", GetInitials(Factions[PlayerInfo[playerid][pFaction]][fName]), GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], id+1);
            else							SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* [%s] %s %s 911 hattýna düþen acil çaðrýyý yanýtladý. #%i.", GetInitials(Factions[PlayerInfo[playerid][pFaction]][fName]), GetRankName(playerid), GetNameEx(playerid), id+1);

            Waypoint_Set(playerid, CallInfo[id][callPosX],CallInfo[id][callPosY],CallInfo[id][callPosZ], 3.0);

            CallInfo[id][callAccept]++;
            pTemp[playerid][pPoliceCalls]++;

            switch(CallInfo[playerid][callType])
            {
                case 1: format(string, sizeof(string), "LSPD");
                case 2: format(string, sizeof(string), "LSFD");
                case 3: format(string, sizeof(string), "LSPD, LSFD");
            }

            if (pTemp[playerid][pPatrol]) format(CallInfo[id][callAcceptBy], 64, "Yonlendirilen: %s (%s)", GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName]);
            else                          format(CallInfo[id][callAcceptBy], 64, "Yonlendirilen: %s", GetNameEx(playerid));

            format(string, sizeof(string), "%s (No: %i)~n~%s~n~%s~n~%.60s%s~n~%s~n~%s", CallInfo[id][callName], CallInfo[id][callPhone], string, CallInfo[id][callLocation], CallInfo[id][callText], (strlen(CallInfo[id][callText]) > 60)?(".."):(""), CallInfo[id][callDate], CallInfo[id][callAcceptBy]);
            PlayerTextDrawSetString(playerid, MDC_CALLS_TD[playerid][apb*4+1], string);

            PlayerTextDrawHide(playerid, MDC_CALLS_TD[playerid][apb*4 + 2]);
        }
        else if (playertextid == MDC_CALLS_TD[playerid][3+4*apb]) // details
        {
            new
                mes[512],
                id = MdcInfo[apb][mdcList]//, type = (PlayerInfo[playerid][pFaction] == LSFD)?(2):(1)
            ;

            new statusmes[65];
			if (CallInfo[id][callAccept]) format(statusmes, sizeof(statusmes), "%s", CallInfo[id][callAcceptBy]);
			else format(statusmes, sizeof(statusmes), "{A9C4E4}Çaðrý Kabul edilemedi{B4B5B7}");

            format(mes, sizeof(mes), "{B4B5B7}911-ÇAÐRI BÝLGÝLERÝ - #%i\n\n\
            						Arayan Bilgisi:\t\t%s\n\
            						Telefon numarasý:\t%i\n\
           							Olay:\t\t%s\n\
            						Lokasyon:\t%s\n\
            						Tarih:\t\t\t%s\n\n\
									Durum:\t\t\t%s\n\
            						Çaðrý %i saniyede kabul edildi",
            id+1, CallInfo[id][callName], CallInfo[id][callPhone], CallInfo[id][callText], CallInfo[id][callLocation], CallInfo[id][callDate], statusmes, CallInfo[id][callAccept]);

            Dialog_Show(playerid, MDCCall2, DIALOG_STYLE_MSGBOX, "{8D8DFF}MDC - çaðrý bilgileri", mes, "Ayarlar", "Geri");
            SetPVarInt(playerid, #last_call, id);
        }
    }

    for(new f = 0; f < 4; f++)
    {
        if (playertextid == MDC_LIC[playerid][5+7*f]) // ÈÇÚßÒÜ
        {
            SetPVarInt(playerid, #MDC_LIC, f);
            switch(f)
            {
                case 0: return ConfirmDialog(playerid, "Doðrulama", "{FFFFFF}Ehliyetinizi iptal etmek istediðinizden emin misiniz? ","MDC_LIC_LOADING");
                case 1:
                {
                    if (PlayerInfo[playerid][pAuthwep] != 1) return SendErrorMessage(playerid, "Silah ruhsatýný iptal etme yetkin yok. ");
                    else    return ConfirmDialog(playerid, "Doðrulama", "{FFFFFF}Silah ruhsatýnýzý iptal etmek istediðinizden emin misiniz? ","MDC_LIC_LOADING");
                }
				case 2:
                {
                    if (PlayerInfo[playerid][pAuthwep] != 1) return SendErrorMessage(playerid, "Silah ruhsatýný iptal etme yetkin yok. ");
                    else    return ConfirmDialog(playerid, "Doðrulama", "{FFFFFF}abcd 1? ","MDC_LIC_LOADING");
                }
			    case 3:
                {
                    if (PlayerInfo[playerid][pAuthwep] != 1) return SendErrorMessage(playerid, "Silah ruhsatýný iptal etme yetkin yok. ");
                    else    return ConfirmDialog(playerid, "Doðrulama", "{FFFFFF}abcd 2? ","MDC_LIC_LOADING");
                }
            }

        }

        if (playertextid == MDC_LIC[playerid][6+7*f]) // ÏÐÅÄÓÏÐÅÆÄÅÍÈÅ / ×ÅÐÍÛÉ ÑÏÈÑÎÊ
        {
            SetPVarInt(playerid, #MDC_LIC, f+4);
            switch(f)
            {
                case 0: return ConfirmDialog(playerid, "Doðrulama", "{FFFFFF}\n Kiþiye ehliyet ceza puaný eklemek istediðinize emin misiniz? ","MDC_LIC_LOADING");
                case 1: return ConfirmDialog(playerid, "Doðrulama", "{FFFFFF}\n Kiþinin ruhsatýna uyarý eklemek ister misiniz? ","MDC_LIC_LOADING");
				case 2: return ConfirmDialog(playerid, "Doðrulama", "{FFFFFF}\n ABC 1 ","MDC_LIC_LOADING");
				case 3: return ConfirmDialog(playerid, "Doðrulama", "{FFFFFF}\n ABC 2 ","MDC_LIC_LOADING");

	}
        }
    }
    return 1;
}

MDC_Hide(playerid)
{
    MdcInfo[playerid][mdcCreated] = 0;
    MdcInfo[playerid][mdcPage] = PAGE_NONE;

    SetPVarInt(playerid, #pDelay, 1);

    for(new i = 0; i < 32; i++)
    {
        PlayerTextDrawDestroy(playerid, MDC_LIC[playerid][i]);
        MDC_LIC[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
        if (i < 20) {
            PlayerTextDrawDestroy(playerid, MDC_APB_TD[playerid][i]);
            MDC_APB_TD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
            PlayerTextDrawDestroy(playerid, MDC_CALLS_TD[playerid][i]);
            MDC_CALLS_TD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
            if (i < 18) {
                PlayerTextDrawDestroy(playerid, MDC_TD_MENU[playerid][i]);
                MDC_TD_MENU[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                if (i < 17) {
                    PlayerTextDrawDestroy(playerid, MDC_UI[playerid][i]);
                    MDC_UI[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                    if (i < 16) {
                        PlayerTextDrawDestroy(playerid, MDC_LIST[playerid][i]);
                        MDC_LIST[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                        if (i < 12) {
                            PlayerTextDrawDestroy(playerid, MDC_LOOKUP_PERSON[playerid][i]);
                            MDC_LOOKUP_PERSON[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                            PlayerTextDrawDestroy(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][i]);
                            MDC_LOOKUP_VEHICLES_LIST[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                            if (i < 8) {
                                PlayerTextDrawDestroy(playerid, MDC_LOOKUP_VEHICLE[playerid][i]);
                                MDC_LOOKUP_VEHICLE[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                                if (i < 7) {
                                    PlayerTextDrawDestroy(playerid, MDC_MAINSCREEN[playerid][i]);
                                    MDC_MAINSCREEN[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                                    if (i < 6) {
                                        PlayerTextDrawDestroy(playerid, MDC_OTHER_ADDRESS[playerid][i]);
                                        MDC_OTHER_ADDRESS[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                                        if (i < 5) {
                                            PlayerTextDrawDestroy(playerid, MDC_ADDRESS[playerid][i]);
                                            MDC_ADDRESS[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                                            if (i < 4) {
                                                PlayerTextDrawDestroy(playerid, MDC_LOOKUP_SEARCH[playerid][i]);
                                                MDC_LOOKUP_SEARCH[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                                                if (i < 3) {
                                                    PlayerTextDrawDestroy(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][i]);
                                                    MDC_LOOKUP_VEHICLES_ARROWS[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                                                    PlayerTextDrawDestroy(playerid, MDC_VEH_LIST_CLICK[playerid][i]);
                                                    MDC_VEH_LIST_CLICK[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                                                    PlayerTextDrawDestroy(playerid, MDC_LIST_INFO[playerid][i]);
                                                    MDC_LIST_INFO[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                                                    PlayerTextDrawDestroy(playerid, MDC_TD_LEFT_PANEL[playerid][i]);
                                                    MDC_TD_LEFT_PANEL[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                                                    if (i < 2) {
                                                        PlayerTextDrawDestroy(playerid, MDC_LOOKUP_AVATAR[playerid][i]);
                                                        MDC_LOOKUP_AVATAR[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    PlayerTextDrawDestroy(playerid, MDC_LOOKUP_ERROR[playerid]);
    MDC_LOOKUP_ERROR[playerid] = PlayerText:INVALID_TEXT_DRAW;

    PlayerTextDrawDestroy(playerid, MDC_ERROR_CALLS[playerid]);
    MDC_ERROR_CALLS[playerid] = PlayerText:INVALID_TEXT_DRAW;

    PlayerTextDrawDestroy(playerid, MDC_BACK[playerid]);
    MDC_BACK[playerid] = PlayerText:INVALID_TEXT_DRAW;

    CancelSelectTextDraw(playerid);
    SetPVarInt(playerid, #pDelay, 0);

    // PVARS:
    // MDC_OWNER_ID
    // MDC_ID
    // MDC_VEHICLE_NUM
    // MDC_VEH_BACK
    // MDC_MAX_PAGE
    // MDC_FINE
    // MDC_APB_S
    // MDC_APB_TEXT
    // BODYCAM
    return 1;
}

MDC_Show(playerid, page = PAGE_MAIN)
{
    if (GetPVarInt(playerid, #pDelay)) return MDC_Show(playerid, page);

    Create_MDC(playerid);

    for(new i = 0; i < 17; i++) PlayerTextDrawShow(playerid, MDC_UI[playerid][i]);

    new string[124];
    format(string, sizeof(string), "~n~-_MOBIL VERI BILGISAYARI_-~n~%s", GetNameEx(playerid));
    PlayerTextDrawSetString(playerid, MDC_UI[playerid][11], string);

    MdcInfo[playerid][mdcCreated] = 1;
    MdcInfo[playerid][mdcSearch] = 0;

    return MDC_PAGE(playerid, page);
}
Create_MDC(playerid)
{
	new Float: x, Float: y, Float: d;

	MDC_UI[playerid][0] = CreatePlayerTextDraw(playerid, 153.383316, 135.783706, "display");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][0], 0.000000, 33.833335);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][0], 482.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][0], 1);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][0], -1061109505);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][0], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][0], 0);

	MDC_UI[playerid][1] = CreatePlayerTextDraw(playerid, 154.883392, 137.129501, "header-display");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][1], 0.000000, 1.416666);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][1], 480.799987, 0.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][1], 1);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][1], Factions[PlayerInfo[playerid][pFaction]][fColor]); //GREEN
	//PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][1], 8388863); //GREEN
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][1], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][1], 0);

	MDC_UI[playerid][13] = CreatePlayerTextDraw(playerid, 167.499984, 138.529678,"Los Santos Polis Departmani ~>~ Ana Panel");
																				//"RED COUNTY SHERIFF'S DEPARTMENT MDC ~>~ MAIN SCREEN"); //ÒÈÒÓË MDC
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][13], 0.213330, 1.050369);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][13], 1);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][13], -1061109505);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][13], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][13], 0);

	MDC_UI[playerid][14] = CreatePlayerTextDraw(playerid, 155.300003, 136.592605, "]");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][14], 0.297500, 1.454815);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][14], 1);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][14], -1061109505);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][14], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][14], 2);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][14], 0);

	MDC_UI[playerid][15] = CreatePlayerTextDraw(playerid, 447.182891, 137.066452, "_-_");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][15], 0.460832, 1.423702);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][15], 10.000000, 15.000000);//0.969999, 15.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][15], 2);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][15], -1);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][15], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][15], 0x3e80f2FF);//0x9189EFFF);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][15], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][15], 2);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][15], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_UI[playerid][15], true);

	MDC_UI[playerid][16] = CreatePlayerTextDraw(playerid, 468.532928, 137.184951, "_X_");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][16], 0.227082, 1.402961);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][16], 10.000000, 15.000000);//0.969999, 15.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][16], 2);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][16], -1);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][16], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][16], -1523963137);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][16], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][16], 2);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][16], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_UI[playerid][16], true);

	/*

		----------------------------- MDC- -----------------------------
		----------------------------- MAINMENU -------------------------

	*/

	MDC_MAINSCREEN[playerid][0] = CreatePlayerTextDraw(playerid, 229.583328, 156.070693, ""); // ÀÂÀÒÀÐ ÈÃÐÎÊÀ
	PlayerTextDrawLetterSize(playerid, MDC_MAINSCREEN[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MDC_MAINSCREEN[playerid][0], 251.000000, 258.000000);
	PlayerTextDrawAlignment(playerid, MDC_MAINSCREEN[playerid][0], 1);
	PlayerTextDrawColor(playerid, MDC_MAINSCREEN[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, MDC_MAINSCREEN[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MDC_MAINSCREEN[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_MAINSCREEN[playerid][0], -1061109505);
	PlayerTextDrawFont(playerid, MDC_MAINSCREEN[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, MDC_MAINSCREEN[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, MDC_MAINSCREEN[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, MDC_MAINSCREEN[playerid][0], 282);
	PlayerTextDrawSetPreviewRot(playerid, MDC_MAINSCREEN[playerid][0], 0.000000, 0.000000, 0.000000, 0.850000);

	MDC_MAINSCREEN[playerid][1] = CreatePlayerTextDraw(playerid, 257.083435, 238.222213, "prewiew-front");
	PlayerTextDrawLetterSize(playerid, MDC_MAINSCREEN[playerid][1], 0.000000, 21.749986);
	PlayerTextDrawTextSize(playerid, MDC_MAINSCREEN[playerid][1], 481.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MDC_MAINSCREEN[playerid][1], 1);
	PlayerTextDrawColor(playerid, MDC_MAINSCREEN[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, MDC_MAINSCREEN[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, MDC_MAINSCREEN[playerid][1], -1061109505);
	PlayerTextDrawSetShadow(playerid, MDC_MAINSCREEN[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MDC_MAINSCREEN[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_MAINSCREEN[playerid][1], 255);
	PlayerTextDrawFont(playerid, MDC_MAINSCREEN[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, MDC_MAINSCREEN[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MDC_MAINSCREEN[playerid][1], 0);

	MDC_MAINSCREEN[playerid][2] = CreatePlayerTextDraw(playerid, 355.816650, 238.333114, "Police Officer II  Hopzy Dev");
	PlayerTextDrawLetterSize(playerid, MDC_MAINSCREEN[playerid][2], 0.234999, 0.972591);
	PlayerTextDrawTextSize(playerid, MDC_MAINSCREEN[playerid][2], 0.000000, 234.000000);
	PlayerTextDrawAlignment(playerid, MDC_MAINSCREEN[playerid][2], 2);
	PlayerTextDrawColor(playerid, MDC_MAINSCREEN[playerid][2], 255);
	PlayerTextDrawUseBox(playerid, MDC_MAINSCREEN[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, MDC_MAINSCREEN[playerid][2], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_MAINSCREEN[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, MDC_MAINSCREEN[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_MAINSCREEN[playerid][2], 255);
	PlayerTextDrawFont(playerid, MDC_MAINSCREEN[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, MDC_MAINSCREEN[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, MDC_MAINSCREEN[playerid][2], 0);

	/*

		----------------------------- MDC- -----------------------------
		----------------------------- LOOK UP --------------------------

	*/

	MDC_LOOKUP_SEARCH[playerid][0] = CreatePlayerTextDraw(playerid, 249.765502, 157.156112, "ISIM");//249.965469, 156.956069, "ÈÌß");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_SEARCH[playerid][0], 10.000000, 36.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_SEARCH[playerid][0], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0xa7a7a7FF);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_SEARCH[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0x494949FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_SEARCH[playerid][0], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_SEARCH[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_SEARCH[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_SEARCH[playerid][0], true);

	MDC_LOOKUP_SEARCH[playerid][1] = CreatePlayerTextDraw(playerid, 290.482147, 157.056076, "PLAKA");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_SEARCH[playerid][1], 10.000000, 36.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_SEARCH[playerid][1], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_SEARCH[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_SEARCH[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_SEARCH[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_SEARCH[playerid][1], true);

	MDC_LOOKUP_SEARCH[playerid][2] = CreatePlayerTextDraw(playerid, 313.932128, 157.656158, "_____");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_SEARCH[playerid][2], 0.199579, 0.962221);//0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_SEARCH[playerid][2], 429.000000, 8.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_SEARCH[playerid][2], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][2], 255);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_SEARCH[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_SEARCH[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_SEARCH[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_SEARCH[playerid][2], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_SEARCH[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_SEARCH[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_SEARCH[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_SEARCH[playerid][2], true);

	MDC_LOOKUP_SEARCH[playerid][3] = CreatePlayerTextDraw(playerid, 455.849273, 156.756057, "YENILE");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_SEARCH[playerid][3], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_SEARCH[playerid][3], 10.000000, 44.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_SEARCH[playerid][3], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][3], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_SEARCH[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][3], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_SEARCH[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_SEARCH[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_SEARCH[playerid][3], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_SEARCH[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_SEARCH[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_SEARCH[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_SEARCH[playerid][3], true);

	MDC_LOOKUP_ERROR[playerid] = CreatePlayerTextDraw(playerid, 232.682266, 173.793121, "]__HATA: BIR SEY BULUNAMADI!");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_ERROR[playerid], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_ERROR[playerid], 478.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_ERROR[playerid], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_ERROR[playerid], -1);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_ERROR[playerid], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_ERROR[playerid], -2147483393);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_ERROR[playerid], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_ERROR[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_ERROR[playerid], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_ERROR[playerid], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_ERROR[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_ERROR[playerid], 0);

	MDC_ERROR_CALLS[playerid] = CreatePlayerTextDraw(playerid, 232.682266, 158.646331, "]__HATA: BIR SEY BULUNAMADI!");
	PlayerTextDrawLetterSize(playerid, MDC_ERROR_CALLS[playerid], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_ERROR_CALLS[playerid], 478.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MDC_ERROR_CALLS[playerid], 1);
	PlayerTextDrawColor(playerid, MDC_ERROR_CALLS[playerid], 0xa7a7a7FF);
	PlayerTextDrawUseBox(playerid, MDC_ERROR_CALLS[playerid], 1);
	PlayerTextDrawBoxColor(playerid, MDC_ERROR_CALLS[playerid], 0x494949FF);
	PlayerTextDrawSetShadow(playerid, MDC_ERROR_CALLS[playerid], 0);
	PlayerTextDrawSetOutline(playerid, MDC_ERROR_CALLS[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_ERROR_CALLS[playerid], 255);
	PlayerTextDrawFont(playerid, MDC_ERROR_CALLS[playerid], 2);
	PlayerTextDrawSetProportional(playerid, MDC_ERROR_CALLS[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MDC_ERROR_CALLS[playerid], 0);


	/*

		----------------------------- MDC- -----------------------------
		----------------------------- LOOKUP_PERSON --------------------

	*/

	MDC_LOOKUP_AVATAR[playerid][0] = CreatePlayerTextDraw(playerid, 270.000122, 177.941299, "~n~resim~n~~n~bulunamadi~n~__");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_AVATAR[playerid][0], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_AVATAR[playerid][0], 0.000000, 77.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_AVATAR[playerid][0], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_AVATAR[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_AVATAR[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_AVATAR[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_AVATAR[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_AVATAR[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_AVATAR[playerid][0], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_AVATAR[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_AVATAR[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_AVATAR[playerid][0], 0);

	MDC_LOOKUP_AVATAR[playerid][1] = CreatePlayerTextDraw(playerid, 168.016494, 175.959106, "");	// AVATAR
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_AVATAR[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_AVATAR[playerid][1], 204.000000, 202.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_AVATAR[playerid][1], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_AVATAR[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_AVATAR[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_AVATAR[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_AVATAR[playerid][1], -1061109505);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_AVATAR[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_AVATAR[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_AVATAR[playerid][1], 0);
	PlayerTextDrawSetPreviewModel(playerid, MDC_LOOKUP_AVATAR[playerid][1], 282);
	PlayerTextDrawSetPreviewRot(playerid, MDC_LOOKUP_AVATAR[playerid][1], 0.000000, 0.000000, 20.000000, 0.850000);

	MDC_LOOKUP_PERSON[playerid][0] = CreatePlayerTextDraw(playerid, 229.999923, 253.240768, "prewiew-front");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_PERSON[playerid][0], 0.000000, 16.916669);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_PERSON[playerid][0], 444.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_PERSON[playerid][0], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_PERSON[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_PERSON[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_PERSON[playerid][0], -1061109505);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_PERSON[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_PERSON[playerid][0], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_PERSON[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_PERSON[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][0], 0);

	MDC_LOOKUP_PERSON[playerid][1] = CreatePlayerTextDraw(playerid, 314.166656, 179.629623, "ISIM:~n~NUMARA:~n~HAKLAR:~n~LISANSLAR:~n~ADRES:");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_PERSON[playerid][1], 0.154999, 1.081480);//0.226250, 1.008889);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_PERSON[playerid][1], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_PERSON[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_PERSON[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_PERSON[playerid][1], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_PERSON[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_PERSON[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][1], 0);

	MDC_LOOKUP_PERSON[playerid][2] = CreatePlayerTextDraw(playerid, 365.267486, 179.629623, "Hopzy Dev~n~811000~n~Yok~n~Surucu~n~Bulunmuyor");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_PERSON[playerid][2], 0.154999, 1.081480);//0.226250, 1.008889);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_PERSON[playerid][2], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_PERSON[playerid][2], -2139062017);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_PERSON[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_PERSON[playerid][2], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_PERSON[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_PERSON[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][2], 0);

	MDC_LOOKUP_PERSON[playerid][3] = CreatePlayerTextDraw(playerid, 231.632064, 259.104095, "~l~KULLANILABILIR FONKSIYONLAR:"); //~>~ ÁÎËÜØÅ ÍÅ Â ÐÎÇÛÑÊÅ
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_PERSON[playerid][3], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_PERSON[playerid][3], 356.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_PERSON[playerid][3], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_PERSON[playerid][3], 0x494949FF);
	//PlayerTextDrawUseBox(playerid, MDC_LOOKUP_PERSON[playerid][3], 1);
	//PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_PERSON[playerid][3], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_PERSON[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_PERSON[playerid][3], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_PERSON[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_PERSON[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][3], 0);
	//PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_PERSON[playerid][3], true);

	MDC_LOOKUP_PERSON[playerid][4] = CreatePlayerTextDraw(playerid, 231.632064, 274.767272, "~>~ TUTUKLAMA KAYDI YAZ");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_PERSON[playerid][4], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_PERSON[playerid][4], 356.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_PERSON[playerid][4], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_PERSON[playerid][4], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_PERSON[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_PERSON[playerid][4], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_PERSON[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_PERSON[playerid][4], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_PERSON[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_PERSON[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_PERSON[playerid][4], true);

	MDC_LOOKUP_PERSON[playerid][5] = CreatePlayerTextDraw(playerid, 231.632064, 291.068267, "~>~ LISANSLARI YONET");//WRITE ARREST RECORD
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_PERSON[playerid][5], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_PERSON[playerid][5], 356.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_PERSON[playerid][5], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_PERSON[playerid][5], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_PERSON[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_PERSON[playerid][5], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_PERSON[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_PERSON[playerid][5], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_PERSON[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_PERSON[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_PERSON[playerid][5], true);

	MDC_LOOKUP_PERSON[playerid][6] = CreatePlayerTextDraw(playerid, 231.365325, 307.244842, "~>~ CEZALARA BAK");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_PERSON[playerid][6], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_PERSON[playerid][6], 355.899932, 10.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_PERSON[playerid][6], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_PERSON[playerid][6], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_PERSON[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_PERSON[playerid][6], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_PERSON[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_PERSON[playerid][6], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_PERSON[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_PERSON[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_PERSON[playerid][6], true);

	MDC_LOOKUP_PERSON[playerid][7] = CreatePlayerTextDraw(playerid, 420.048706, 259.104095, "~y~]~w~__SUC_KAYITLARI__~y~]");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_PERSON[playerid][7], 0.154999, 1.081480);//0.202914, 1.154072);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_PERSON[playerid][7], 10.000000, 120.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_PERSON[playerid][7], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_PERSON[playerid][7], 255);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_PERSON[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_PERSON[playerid][7], 0x494949FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_PERSON[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_PERSON[playerid][7], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_PERSON[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_PERSON[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_PERSON[playerid][7], true);

	MDC_LOOKUP_PERSON[playerid][8] = CreatePlayerTextDraw(playerid, 360.566833, 274.000030, "Belirsiz!");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_PERSON[playerid][8], 0.188333, 0.905185);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_PERSON[playerid][8], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_PERSON[playerid][8], 255);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_PERSON[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_PERSON[playerid][8], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_PERSON[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_PERSON[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][8], 0);

	MDC_LOOKUP_PERSON[playerid][9] = CreatePlayerTextDraw(playerid, 269.999969, 242.159362, "~w~]_ARANIYOR!");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_PERSON[playerid][9], 0.129166, 0.874075);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_PERSON[playerid][9], 0.000000, 77.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_PERSON[playerid][9], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_PERSON[playerid][9], 255);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_PERSON[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_PERSON[playerid][9], -1523963137);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_PERSON[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_PERSON[playerid][9], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_PERSON[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_PERSON[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_PERSON[playerid][9], true);

	MDC_LOOKUP_PERSON[playerid][10] = CreatePlayerTextDraw(playerid, 314.583251, 231.270523, "] ADRESLER ICIN TIKLA");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_PERSON[playerid][10], 0.202500, 1.024446);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_PERSON[playerid][10], 480.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_PERSON[playerid][10], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_PERSON[playerid][10], 255);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_PERSON[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_PERSON[playerid][10], -5963521);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_PERSON[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_PERSON[playerid][10], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_PERSON[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_PERSON[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_PERSON[playerid][10], true);

	MDC_LOOKUP_PERSON[playerid][11] = CreatePlayerTextDraw(playerid, 293.599700, 323.755554, "~y~0~w~~n~Odenmemis cezalar!");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_PERSON[playerid][11], 0.129166, 0.874073);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_PERSON[playerid][11], 0.000000, 124.140029);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_PERSON[playerid][11], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_PERSON[playerid][11], -1);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_PERSON[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_PERSON[playerid][11], -1523963137);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_PERSON[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_PERSON[playerid][11], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_PERSON[playerid][11], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_PERSON[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_PERSON[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_PERSON[playerid][11], true);

	/*

		----------------------------- MDC- -----------------------------
		----------------------------- LOOKUP_VEHICLE_LIST --------------

	*/


	MDC_LOOKUP_VEHICLES_LIST[playerid][0] = CreatePlayerTextDraw(playerid, 230.416564, 174.185256, "");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], -1061109505);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], 439);
	PlayerTextDrawSetPreviewRot(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], 0.000000, 0.000000, 90.000000, 0.879999);
	PlayerTextDrawSetPreviewVehCol(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0], 1, 1);

	MDC_LOOKUP_VEHICLES_LIST[playerid][1] = CreatePlayerTextDraw(playerid, 383.933441, 188.444534, "SULTAN~n~1LASD1~n~Hopzy Dev~n~LEVEL 2~n~Hayir");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][1], 0.154999, 1.081480);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][1], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][1], 0x8B8A8AFF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][1], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][1], 0);

	MDC_LOOKUP_VEHICLES_LIST[playerid][2] = CreatePlayerTextDraw(playerid, 325.416625, 187.925994, "MODEL:~n~PLAKA:~n~SAHIP:~n~SIGORTA:~n~BAGLANMIS:");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][2], 0.154999, 1.081480);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][2], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][2], 255);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][2], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][2], 0);

	MDC_LOOKUP_VEHICLES_LIST[playerid][3] = CreatePlayerTextDraw(playerid, 237.183029, 190.800094, "!");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 0.179165, 0.962221);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 0.000000, 9.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], -1523963137);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 0);

	/*MDC_LOOKUP_VEHICLES_LIST[playerid][3] = CreatePlayerTextDraw(playerid, 277.299682, 192.337203, "]_Â ÐÎÇÛÑÊÅ!");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 0.129166, 0.874073);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 0.000000, 86.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], -1523963137);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3], true);*/

	MDC_LOOKUP_VEHICLES_LIST[playerid][4] = CreatePlayerTextDraw(playerid, 230.416564, 236.388870, "");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], -1061109505);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], 5);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], 0);
	PlayerTextDrawSetPreviewModel(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], 439);
	PlayerTextDrawSetPreviewRot(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], 0.000000, 0.000000, 90.000000, 0.879999);
	PlayerTextDrawSetPreviewVehCol(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][4], 1, 1);

	MDC_LOOKUP_VEHICLES_LIST[playerid][5] = CreatePlayerTextDraw(playerid, 384.053527, 249.540466, "hopzy");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][5], 0.154999, 1.081480);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][5], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][5], 0x8B8A8AFF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][5], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][5], 0);

	MDC_LOOKUP_VEHICLES_LIST[playerid][6] = CreatePlayerTextDraw(playerid, 325.349945, 249.540466, "MODEL:~n~PLAKA:~n~SAHIP:~n~SIGORTA:~n~BAGLANMIS:");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][6], 0.154999, 1.081480);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][6], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][6], 255);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][6], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][6], 0);

	MDC_LOOKUP_VEHICLES_LIST[playerid][7] = CreatePlayerTextDraw(playerid, 236.982955, 250.137298, "!");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 0.179165, 0.962221);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 0.000000, 9.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], -1523963137);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 0);

	/*MDC_LOOKUP_VEHICLES_LIST[playerid][7] = CreatePlayerTextDraw(playerid, 276.766235, 252.911254, "]_Â ÐÎÇÛÑÊÅ!");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 0.129166, 0.874073);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 0.000000, 86.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], -1523963137);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][7], true);*/

	MDC_LOOKUP_VEHICLES_LIST[playerid][8] = CreatePlayerTextDraw(playerid, 230.416564, 296.792480, "");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], -1061109505);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], 5);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], 0);
	PlayerTextDrawSetPreviewModel(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], 439);
	PlayerTextDrawSetPreviewRot(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], 0.000000, 0.000000, 90.000000, 0.879999);
	PlayerTextDrawSetPreviewVehCol(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][8], 1, 1);

	MDC_LOOKUP_VEHICLES_LIST[playerid][9] = CreatePlayerTextDraw(playerid, 384.103698, 310.125671, "hopzy");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][9], 0.154999, 1.081480);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][9], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][9], 0x8B8A8AFF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][9], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][9], 0);

	MDC_LOOKUP_VEHICLES_LIST[playerid][10] = CreatePlayerTextDraw(playerid, 325.333190, 310.003814, "MODEL:~n~PLAKA:~n~SAHIP:~n~SIGORTA:~n~BAGLANMIS:");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][10], 0.154999, 1.081480);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][10], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][10], 255);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][10], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][10], 0);

	/*MDC_LOOKUP_VEHICLES_LIST[playerid][11] = CreatePlayerTextDraw(playerid, 276.866363, 314.414978, "]_Â ÐÎÇÛÑÊÅ!");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 0.129166, 0.874073);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 0.000000, 86.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], -1);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], -1523963137);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], true);*/

	MDC_LOOKUP_VEHICLES_LIST[playerid][11] = CreatePlayerTextDraw(playerid, 237.249862, 310.840728, "!");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 0.179165, 0.962221);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 0.000000, 9.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], -1);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], -1523963137);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][11], 0);

	MDC_VEH_LIST_CLICK[playerid][0] = CreatePlayerTextDraw(playerid, 468.351776, 192.081573, "_~n~_~n~_~n~>~n~_~n~_~n~_");
	PlayerTextDrawLetterSize(playerid, MDC_VEH_LIST_CLICK[playerid][0], 0.133748, 0.651109);
	PlayerTextDrawTextSize(playerid, MDC_VEH_LIST_CLICK[playerid][0], 30.000000, 12.000000);
	PlayerTextDrawAlignment(playerid, MDC_VEH_LIST_CLICK[playerid][0], 2);
	PlayerTextDrawColor(playerid, MDC_VEH_LIST_CLICK[playerid][0], 0x494949FF);//-1);
	PlayerTextDrawUseBox(playerid, MDC_VEH_LIST_CLICK[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, MDC_VEH_LIST_CLICK[playerid][0], 0xa7a7a7FF);//-2139062017);
	PlayerTextDrawSetShadow(playerid, MDC_VEH_LIST_CLICK[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MDC_VEH_LIST_CLICK[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_VEH_LIST_CLICK[playerid][0], 255);
	PlayerTextDrawFont(playerid, MDC_VEH_LIST_CLICK[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, MDC_VEH_LIST_CLICK[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, MDC_VEH_LIST_CLICK[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_VEH_LIST_CLICK[playerid][0], true);

	MDC_VEH_LIST_CLICK[playerid][1] = CreatePlayerTextDraw(playerid, 468.418670, 250.882522, "_~n~_~n~_~n~>~n~_~n~_~n~_");
	PlayerTextDrawLetterSize(playerid, MDC_VEH_LIST_CLICK[playerid][1], 0.133748, 0.651109);
	PlayerTextDrawTextSize(playerid, MDC_VEH_LIST_CLICK[playerid][1], 30.000000, 12.000000);
	PlayerTextDrawAlignment(playerid, MDC_VEH_LIST_CLICK[playerid][1], 2);
	PlayerTextDrawColor(playerid, MDC_VEH_LIST_CLICK[playerid][1], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_VEH_LIST_CLICK[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, MDC_VEH_LIST_CLICK[playerid][1], 0xa7a7a7FF);//-2139062017);
	PlayerTextDrawSetShadow(playerid, MDC_VEH_LIST_CLICK[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MDC_VEH_LIST_CLICK[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_VEH_LIST_CLICK[playerid][1], 255);
	PlayerTextDrawFont(playerid, MDC_VEH_LIST_CLICK[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, MDC_VEH_LIST_CLICK[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MDC_VEH_LIST_CLICK[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_VEH_LIST_CLICK[playerid][1], true);

	MDC_VEH_LIST_CLICK[playerid][2] = CreatePlayerTextDraw(playerid, 468.501495, 311.212097, "_~n~_~n~_~n~>~n~_~n~_~n~_");
	PlayerTextDrawLetterSize(playerid, MDC_VEH_LIST_CLICK[playerid][2], 0.133748, 0.651109);
	PlayerTextDrawTextSize(playerid, MDC_VEH_LIST_CLICK[playerid][2], 30.000000, 12.000000);
	PlayerTextDrawAlignment(playerid, MDC_VEH_LIST_CLICK[playerid][2], 2);
	PlayerTextDrawColor(playerid, MDC_VEH_LIST_CLICK[playerid][2], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_VEH_LIST_CLICK[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, MDC_VEH_LIST_CLICK[playerid][2], 0xa7a7a7FF);//-2139062017);
	PlayerTextDrawSetShadow(playerid, MDC_VEH_LIST_CLICK[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, MDC_VEH_LIST_CLICK[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_VEH_LIST_CLICK[playerid][2], 255);
	PlayerTextDrawFont(playerid, MDC_VEH_LIST_CLICK[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, MDC_VEH_LIST_CLICK[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, MDC_VEH_LIST_CLICK[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_VEH_LIST_CLICK[playerid][2], true);

	MDC_LOOKUP_VEHICLES_ARROWS[playerid][0] = CreatePlayerTextDraw(playerid, 356.816711, 424.493133, "1_/_2");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], 0.228330, 0.889629);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], 0);

	MDC_LOOKUP_VEHICLES_ARROWS[playerid][1] = CreatePlayerTextDraw(playerid, 424.404205, 424.493133, "~>~");
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], 10.000000, 112.000000);
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], 0.228330, 0.889629);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], 255);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][1], true);

	MDC_LOOKUP_VEHICLES_ARROWS[playerid][2] = CreatePlayerTextDraw(playerid, 289.212585, 424.493133, "~<~");
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], 10.000000, 113.000000);
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], 0.228330, 0.889629);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], 2);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], 255);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][2], true);

	/*

		----------------------------- MDC- -----------------------------
		----------------------------- LOOKUP_VEHICLE -------------------

	*/

	MDC_LOOKUP_VEHICLE[playerid][0] = CreatePlayerTextDraw(playerid, 230.416564, 174.185256, "");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLE[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLE[playerid][0], 90.000000, 91.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLE[playerid][0], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLE[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLE[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLE[playerid][0], -1061109505);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLE[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLE[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, MDC_LOOKUP_VEHICLE[playerid][0], 439);
	PlayerTextDrawSetPreviewRot(playerid, MDC_LOOKUP_VEHICLE[playerid][0], 0.000000, 0.000000, 90.000000, 0.879998);
	PlayerTextDrawSetPreviewVehCol(playerid, MDC_LOOKUP_VEHICLE[playerid][0], 1, 1);

	MDC_LOOKUP_VEHICLE[playerid][1] = CreatePlayerTextDraw(playerid, 383.933441, 188.444534, "SULTAN~n~1LASD1~n~Hopzy Dev~n~LEVEL 2~n~Hayir");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLE[playerid][1], 0.154999, 1.081480);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLE[playerid][1], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLE[playerid][1], 0x8B8A8AFF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLE[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLE[playerid][1], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLE[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLE[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][1], 0);

	MDC_LOOKUP_VEHICLE[playerid][2] = CreatePlayerTextDraw(playerid, 325.416625, 187.925994, "MODEL:~n~PLAKA:~n~SAHIP:~n~SIGORTA:~n~BAGLANMIS:~n~ALIM TARIHI:");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLE[playerid][2], 0.154999, 1.081480); //0.226248, 1.008888);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLE[playerid][2], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLE[playerid][2], 255);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLE[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLE[playerid][2], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLE[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLE[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][2], 0);

	MDC_LOOKUP_VEHICLE[playerid][3] = CreatePlayerTextDraw(playerid, 233.082260, 284.141998, "NOTLAR:~n~- Bu arac calinmis 27/01/19~n~- Bu arac calinmis 17/02/19");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLE[playerid][3], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLE[playerid][3], 479.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLE[playerid][3], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLE[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLE[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLE[playerid][3], -2147483393);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLE[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLE[playerid][3], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLE[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLE[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_VEHICLE[playerid][3], true);

	MDC_LOOKUP_VEHICLE[playerid][4] = CreatePlayerTextDraw(playerid, 233.165451, 254.156051, "]_CEZALARA BAK__(ODENMEYEN CEZALAR:__14)");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLE[playerid][4], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLE[playerid][4], 479.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLE[playerid][4], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLE[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLE[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLE[playerid][4], -5963521);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLE[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLE[playerid][4], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLE[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLE[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_VEHICLE[playerid][4], true);

	MDC_LOOKUP_VEHICLE[playerid][5] = CreatePlayerTextDraw(playerid, 233.165451, 269.256958, "~dn~ NOT EKLE");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLE[playerid][5], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLE[playerid][5], 349.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLE[playerid][5], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLE[playerid][5], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLE[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLE[playerid][5], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLE[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLE[playerid][5], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLE[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLE[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_VEHICLE[playerid][5], true);

	MDC_LOOKUP_VEHICLE[playerid][6] = CreatePlayerTextDraw(playerid, 352.848785, 269.257019, "~up~ NOTU KALDIR");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLE[playerid][6], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLE[playerid][6], 478.938964, 10.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLE[playerid][6], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLE[playerid][6], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLE[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLE[playerid][6], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLE[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLE[playerid][6], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLE[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLE[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_VEHICLE[playerid][6], true);

	MDC_LOOKUP_VEHICLE[playerid][7] = CreatePlayerTextDraw(playerid, 231.932281, 173.793121, "~>~ ARAC ARANMA, DURUM: ~g~ARANMIYOR");
	PlayerTextDrawLetterSize(playerid, MDC_LOOKUP_VEHICLE[playerid][7], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_LOOKUP_VEHICLE[playerid][7], 478.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, MDC_LOOKUP_VEHICLE[playerid][7], 1);
	PlayerTextDrawColor(playerid, MDC_LOOKUP_VEHICLE[playerid][7], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_LOOKUP_VEHICLE[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_VEHICLE[playerid][7], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LOOKUP_VEHICLE[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LOOKUP_VEHICLE[playerid][7], 255);
	PlayerTextDrawFont(playerid, MDC_LOOKUP_VEHICLE[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LOOKUP_VEHICLE[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LOOKUP_VEHICLE[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_VEHICLE[playerid][7], true);

	/*

		----------------------------- MDC- -----------------------------
		----------------------------- BACK -----------------------------

	*/

	MDC_BACK[playerid] = CreatePlayerTextDraw(playerid, 231.499237, 156.939529, "~<~ GERI DON");
	PlayerTextDrawLetterSize(playerid, MDC_BACK[playerid], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_BACK[playerid], 334.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, MDC_BACK[playerid], 1);
	PlayerTextDrawColor(playerid, MDC_BACK[playerid], 255);
	PlayerTextDrawSetShadow(playerid, MDC_BACK[playerid], 0);
	PlayerTextDrawSetOutline(playerid, MDC_BACK[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_BACK[playerid], 255);
	PlayerTextDrawFont(playerid, MDC_BACK[playerid], 2);
	PlayerTextDrawSetProportional(playerid, MDC_BACK[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MDC_BACK[playerid], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_BACK[playerid], true);


	/*

		----------------------------- MDC- -----------------------------
		----------------------------- LIST INFO ------------------------

	*/

	/*MDC_LIST_INFO[playerid][0] = CreatePlayerTextDraw(playerid, 273.682678, 179.642364, "ID øòðàôà~n~Íàðóøèòåëü:~n~Îøòðàôîâàë~n~Ñóììà:~n~Äàòà~n~Ñòàòóñ:~n~~n~Îïèñàíèå:");
	PlayerTextDrawLetterSize(playerid, MDC_LIST_INFO[playerid][0], 0.208748, 1.226665);
	PlayerTextDrawAlignment(playerid, MDC_LIST_INFO[playerid][0], 3);
	PlayerTextDrawColor(playerid, MDC_LIST_INFO[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, MDC_LIST_INFO[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LIST_INFO[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LIST_INFO[playerid][0], 255);
	PlayerTextDrawFont(playerid, MDC_LIST_INFO[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LIST_INFO[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LIST_INFO[playerid][0], 0);

	MDC_LIST_INFO[playerid][1] = CreatePlayerTextDraw(playerid, 281.983184, 179.642364, "#1012441~n~Jewking_Test~n~Rey_Test~n~$500~n~17/02/2019, 16:30:25~n~~r~NOT PAID");
	PlayerTextDrawLetterSize(playerid, MDC_LIST_INFO[playerid][1], 0.208748, 1.226665);
	PlayerTextDrawAlignment(playerid, MDC_LIST_INFO[playerid][1], 1);
	PlayerTextDrawColor(playerid, MDC_LIST_INFO[playerid][1], -2139062017);
	PlayerTextDrawSetShadow(playerid, MDC_LIST_INFO[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LIST_INFO[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LIST_INFO[playerid][1], 255);
	PlayerTextDrawFont(playerid, MDC_LIST_INFO[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LIST_INFO[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LIST_INFO[playerid][1], 0);

	MDC_LIST_INFO[playerid][2] = CreatePlayerTextDraw(playerid, 243.250045, 275.594299, "Way to way~n~ so glad to see you");
	PlayerTextDrawLetterSize(playerid, MDC_LIST_INFO[playerid][2], 0.208748, 1.226665);
	PlayerTextDrawTextSize(playerid, MDC_LIST_INFO[playerid][2], 467.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MDC_LIST_INFO[playerid][2], 1);
	PlayerTextDrawColor(playerid, MDC_LIST_INFO[playerid][2], -2139062017);
	PlayerTextDrawUseBox(playerid, MDC_LIST_INFO[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, MDC_LIST_INFO[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, MDC_LIST_INFO[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LIST_INFO[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LIST_INFO[playerid][2], 255);
	PlayerTextDrawFont(playerid, MDC_LIST_INFO[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LIST_INFO[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LIST_INFO[playerid][2], 0);*/

	MDC_LIST_INFO[playerid][0] = CreatePlayerTextDraw(playerid, 274.365875, 179.772827, "ID:~n~test:~n~test:~n~test:~n~test:~n~test:~n~~n~test:");
	PlayerTextDrawLetterSize(playerid, MDC_LIST_INFO[playerid][0], 0.154999, 1.081480);
	PlayerTextDrawAlignment(playerid, MDC_LIST_INFO[playerid][0], 3);
	PlayerTextDrawColor(playerid, MDC_LIST_INFO[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, MDC_LIST_INFO[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LIST_INFO[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LIST_INFO[playerid][0], 255);
	PlayerTextDrawFont(playerid, MDC_LIST_INFO[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, MDC_LIST_INFO[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LIST_INFO[playerid][0], 0);

	MDC_LIST_INFO[playerid][1] = CreatePlayerTextDraw(playerid, 282.399841, 179.642364, "#1012441~n~Jewking_Test~n~Rey_Test~n~$500~n~17/02/2019, 16:30:25~n~~r~ODENMEMIS");
	PlayerTextDrawLetterSize(playerid, MDC_LIST_INFO[playerid][1], 0.183748, 1.081479);
	PlayerTextDrawAlignment(playerid, MDC_LIST_INFO[playerid][1], 1);
	PlayerTextDrawColor(playerid, MDC_LIST_INFO[playerid][1], -2139062017);
	PlayerTextDrawSetShadow(playerid, MDC_LIST_INFO[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LIST_INFO[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LIST_INFO[playerid][1], 255);
	PlayerTextDrawFont(playerid, MDC_LIST_INFO[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LIST_INFO[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LIST_INFO[playerid][1], 0);

	MDC_LIST_INFO[playerid][2] = CreatePlayerTextDraw(playerid, 243.232818, 258.457458, "- Yanlis konuma park edilmis.");
	PlayerTextDrawLetterSize(playerid, MDC_LIST_INFO[playerid][2], 0.183748, 1.081479);
	PlayerTextDrawAlignment(playerid, MDC_LIST_INFO[playerid][2], 1);
	PlayerTextDrawColor(playerid, MDC_LIST_INFO[playerid][2], -2139062017);
	PlayerTextDrawSetShadow(playerid, MDC_LIST_INFO[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, MDC_LIST_INFO[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_LIST_INFO[playerid][2], 255);
	PlayerTextDrawFont(playerid, MDC_LIST_INFO[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, MDC_LIST_INFO[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, MDC_LIST_INFO[playerid][2], 0);

	/*

		----------------------------- MDC- -----------------------------
		----------------------------- MENU INFO ------------------------

	*/


    MDC_LIC[playerid][0] = CreatePlayerTextDraw(playerid, 233.849990, 173.925918, "box");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][0], 0.000000, 6.250006);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][0], 352.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][0], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][0], -1);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][0], -1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][0], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][0], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][0], 0);

    MDC_LIC[playerid][1] = CreatePlayerTextDraw(playerid, 292.916809, 174.207412, "SURUCU LISANSI");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][1], 0.154999, 1.081480);//0.207083, 1.185184);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][1], 0.000000, 117.840393);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][1], 2);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][1], -1);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][1], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][1], 339643903);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][1], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][1], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][1], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][1], 0);

    MDC_LIC[playerid][2] = CreatePlayerTextDraw(playerid, 232.766403, 169.074020, "hud:radar_impound");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][2], 0.000000, 0.000000);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][2], 15.000000, 17.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][2], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][2], -1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][2], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][2], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][2], 4);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][2], 0);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][2], 0);

    MDC_LIC[playerid][3] = CreatePlayerTextDraw(playerid, 298.232727, 190.286605, "Durum:_~n~Uyarilar:");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][3], 0.154999, 1.081480);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][3], 3);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][3], 255);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][3], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][3], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][3], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][3], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][3], 0);

    MDC_LIC[playerid][4] = CreatePlayerTextDraw(playerid, 302.933013, 190.286605, "~g~AKTIF~n~~r~3");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][4], 0.154999, 1.081480);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][4], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][4], 255);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][4], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][4], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][4], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][4], 1);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][4], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][4], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][4], true);

    MDC_LIC[playerid][5] = CreatePlayerTextDraw(playerid, 236.332046, 217.074813, "__EL KOY");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][5], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][5], 266.200012, 10.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][5], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][5], -1);//0xabababFF);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][5], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][5], 0xdd1717FF);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][5], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][5], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][5], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][5], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][5], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][5], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][5], true);

    MDC_LIC[playerid][6] = CreatePlayerTextDraw(playerid, 270.098724, 217.074798, "~>~_UYARI PUANI EKLE");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][6], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][6], 349.000000, 10.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][6], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][6], 0x494949FF);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][6], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][6], 0xa7a7a7FF);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][6], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][6], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][6], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][6], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][6], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][6], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][6], true);

    MDC_LIC[playerid][7] = CreatePlayerTextDraw(playerid, 358.016967, 173.925888, "box");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][7], 0.000000, 8.916671);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][7], 478.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][7], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][7], -1);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][7], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][7], -1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][7], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][7], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][7], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][7], 1);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][7], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][7], 0);

    MDC_LIC[playerid][8] = CreatePlayerTextDraw(playerid, 418.033416, 174.025878, "SILAH LISANSI");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][8], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][8], 0.000000, 120.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][8], 2);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][8], -1);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][8], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][8], 339643903);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][8], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][8], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][8], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][8], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][8], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][8], 0);

    MDC_LIC[playerid][9] = CreatePlayerTextDraw(playerid, 356.750030, 171.463226, "hud:radar_emmetgun");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][9], 0.000000, 0.000000);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][9], 14.000000, 15.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][9], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][9], -1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][9], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][9], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][9], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][9], 4);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][9], 0);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][9], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][9], true);

    MDC_LIC[playerid][10] = CreatePlayerTextDraw(playerid, 379.532287, 186.656906, "UYARILAR:~n~_~n~VERILME:~n~TARIH:~n~UCRET:");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][10], 0.154999, 1.081480);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][10], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][10], 255);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][10], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][10], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][10], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][10], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][10], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][10], 0);

    MDC_LIC[playerid][11] = CreatePlayerTextDraw(playerid, 412.434295, 196.057479, "0~n~McAllen Developer~n~01/09/2024, 20:51:02~n~$15.000");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][11], 0.154999, 1.081480);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][11], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][11], 255);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][11], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][11], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][11], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][11], 1);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][11], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][11], 0);

    MDC_LIC[playerid][12] = CreatePlayerTextDraw(playerid, 360.531890, 241.600494, "__EL KOY");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][12], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][12], 390.399963, 10.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][12], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][12], -1);//0xabababFF);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][12], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][12], 0xdd1717FF);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][12], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][12], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][12], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][12], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][12], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][12], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][12], true);

    MDC_LIC[playerid][13] = CreatePlayerTextDraw(playerid, 394.832031, 241.600631, "~>~_UYARI PUANI EKLE");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][13], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][13], 476.000000, 10.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][13], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][13], 0x494949FF);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][13], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][13], 0xa7a7a7FF);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][13], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][13], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][13], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][13], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][13], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][13], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][13], true);

    MDC_LIC[playerid][14] = CreatePlayerTextDraw(playerid, 233.933364, 240.100570, "box");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][14], 0.000000, 5.750006);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][14], 352.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][14], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][14], -1);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][14], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][14], -1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][14], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][14], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][14], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][14], 1);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][14], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][14], 0);

    MDC_LIC[playerid][15] = CreatePlayerTextDraw(playerid, 292.750091, 238.359207, "PILOT SERTIRIFIKASI");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][15], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][15], 0.000000, 117.840393);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][15], 2);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][15], -1);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][15], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][15], 339643903);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][15], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][15], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][15], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][15], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][15], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][15], 0);

    MDC_LIC[playerid][16] = CreatePlayerTextDraw(playerid, 232.016677, 236.396484, "hud:radar_airyard");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][16], 0.000000, 0.000000);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][16], 14.000000, 14.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][16], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][16], -1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][16], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][16], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][16], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][16], 4);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][16], 0);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][16], 0);

    MDC_LIC[playerid][17] = CreatePlayerTextDraw(playerid, 287.132049, 257.290679, "DURUM:");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][17], 0.154999, 1.081480);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][17], 3);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][17], 255);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][17], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][17], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][17], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][17], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][17], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][17], 0);

    MDC_LIC[playerid][18] = CreatePlayerTextDraw(playerid, 290.083007, 257.490692, "~g~AKTIF");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][18], 0.154999, 1.081480);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][18], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][18], 255);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][18], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][18], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][18], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][18], 1);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][18], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][18], 0);

    MDC_LIC[playerid][19] = CreatePlayerTextDraw(playerid, 236.132034, 279.244903, "__EL KOY");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][19], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][19], 266.890960, 10.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][19], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][19], -1);//0xabababFF);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][19], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][19], 0xdd1717FF);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][19], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][19], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][19], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][19], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][19], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][19], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][19], true);

    MDC_LIC[playerid][20] = CreatePlayerTextDraw(playerid, 270.965362, 279.338256, "~>~_ASKIYA AL");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][20], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][20], 349.000000, 10.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][20], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][20], 0x494949FF);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][20], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][20], 0xa7a7a7FF);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][20], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][20], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][20], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][20], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][20], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][20], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][20], true);

    MDC_LIC[playerid][21] = CreatePlayerTextDraw(playerid, 233.766632, 301.259613, "box");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][21], 0.000000, 5.817000);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][21], 351.999938, 0.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][21], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][21], -1);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][21], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][21], -1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][21], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][21], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][21], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][21], 1);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][21], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][21], 0);

    MDC_LIC[playerid][22] = CreatePlayerTextDraw(playerid, 292.750091, 300.162963, "TAKSI LISANSI");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][22], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][22], 0.000000, 117.840393);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][22], 2);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][22], -1);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][22], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][22], 339643903);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][22], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][22], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][22], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][22], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][22], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][22], 0);

    MDC_LIC[playerid][23] = CreatePlayerTextDraw(playerid, 230.566696, 296.211029, "hud:radar_torenoranch");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][23], 0.000000, 0.000000);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][23], 17.000000, 18.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][23], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][23], -1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][23], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][23], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][23], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][23], 4);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][23], 0);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][23], 0);

    MDC_LIC[playerid][24] = CreatePlayerTextDraw(playerid, 287.298553, 318.428039, "DURUM:");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][24], 0.154999, 1.081480);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][24], 3);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][24], 255);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][24], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][24], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][24], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][24], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][24], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][24], 0);

    MDC_LIC[playerid][25] = CreatePlayerTextDraw(playerid, 290.016296, 318.646453, "~g~AKTIF");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][25], 0.154999, 1.081480);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][25], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][25], 255);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][25], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][25], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][25], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][25], 1);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][25], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][25], 0);

    MDC_LIC[playerid][26] = CreatePlayerTextDraw(playerid, 236.032028, 340.637695, "__EL KOY");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][26], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][26], 265.899993, 10.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][26], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][26], -1);//0xabababFF);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][26], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][26], 0xdd1717FF);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][26], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][26], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][26], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][26], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][26], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][26], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][26], true);

    MDC_LIC[playerid][27] = CreatePlayerTextDraw(playerid, 269.698547, 340.612548, "~>~_ASKIYA AL");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][27], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][27], 349.000000, 10.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][27], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][27], 0x494949FF);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][27], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][27], 0xa7a7a7FF);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][27], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][27], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][27], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][27], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][27], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][27], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][27], true);

    MDC_LIC[playerid][28] = CreatePlayerTextDraw(playerid, 358.166625, 262.863128, "box");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][28], 0.000000, 10.083339);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][28], 478.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][28], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][28], -1);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][28], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][28], -1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][28], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][28], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][28], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][28], 1);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][28], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][28], 0);

    MDC_LIC[playerid][29] = CreatePlayerTextDraw(playerid, 417.883575, 262.666564, "MEDIKAL LISANS");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][29], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][29], 0.000000, 119.680786);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][29], 2);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][29], -1);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][29], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][29], 339643903);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][29], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][29], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][29], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][29], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][29], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][29], 0);

    MDC_LIC[playerid][30] = CreatePlayerTextDraw(playerid, 356.950225, 261.288787, "hud:radar_hostpital");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][30], 0.000000, 0.000000);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][30], 13.000000, 13.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][30], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][30], -1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][30], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][30], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][30], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][30], 4);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][30], 0);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][30], 0);

    MDC_LIC[playerid][31] = CreatePlayerTextDraw(playerid, 420.215240, 307.020599, "LUTFEN BEKLEYIN...~n~(( GELISTIRME ASAMASINDA! ))");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][31], 0.154999, 1.081480);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][31], 2);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][31], 255);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][31], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][31], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][31], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][31], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][31], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][31], 0);








/*

    MDC_LIC[playerid][0] = CreatePlayerTextDraw(playerid, 233.849990, 173.925918, "box");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][0], 0.000000, 6.250006);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][0], 352.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][0], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][0], -1);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][0], -1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][0], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][0], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][0], 0);

    MDC_LIC[playerid][1] = CreatePlayerTextDraw(playerid, 292.916809, 174.207412, "SURUCU LISANSI");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][1], 0.154999, 1.081480);//0.207083, 1.185184);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][1], 0.000000, 117.840393);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][1], 2);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][1], -1);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][1], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][1], 339643903);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][1], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][1], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][1], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][1], 0);

    MDC_LIC[playerid][2] = CreatePlayerTextDraw(playerid, 232.766403, 169.074020, "hud:radar_impound");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][2], 0.000000, 0.000000);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][2], 15.000000, 17.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][2], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][2], -1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][2], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][2], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][2], 4);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][2], 0);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][2], 0);

    MDC_LIC[playerid][3] = CreatePlayerTextDraw(playerid, 298.232727, 190.286605, "Durum:_~n~Uyarilar:");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][3], 0.154999, 1.081480);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][3], 3);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][3], 255);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][3], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][3], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][3], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][3], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][3], 0);

    MDC_LIC[playerid][4] = CreatePlayerTextDraw(playerid, 302.933013, 190.286605, "~g~BULUNUYOR~n~~r~3");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][4], 0.154999, 1.081480);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][4], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][4], 255);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][4], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][4], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][4], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][4], 1);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][4], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][4], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][4], true);

    MDC_LIC[playerid][5] = CreatePlayerTextDraw(playerid, 236.332046, 217.074813, "__EL KOY");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][5], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][5], 266.200012, 10.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][5], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][5], -1);//0xabababFF);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][5], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][5], 0xdd1717FF);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][5], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][5], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][5], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][5], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][5], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][5], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][5], true);

    MDC_LIC[playerid][6] = CreatePlayerTextDraw(playerid, 270.098724, 217.074798, "~>~_UYARI EKLE");
    PlayerTextDrawLetterSize(playerid, MDC_LIC[playerid][6], 0.154999, 1.081480);
    PlayerTextDrawTextSize(playerid, MDC_LIC[playerid][6], 349.000000, 10.000000);
    PlayerTextDrawAlignment(playerid, MDC_LIC[playerid][6], 1);
    PlayerTextDrawColor(playerid, MDC_LIC[playerid][6], 0x494949FF);
    PlayerTextDrawUseBox(playerid, MDC_LIC[playerid][6], 1);
    PlayerTextDrawBoxColor(playerid, MDC_LIC[playerid][6], 0xa7a7a7FF);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][6], 0);
    PlayerTextDrawSetOutline(playerid, MDC_LIC[playerid][6], 0);
    PlayerTextDrawBackgroundColor(playerid, MDC_LIC[playerid][6], 255);
    PlayerTextDrawFont(playerid, MDC_LIC[playerid][6], 2);
    PlayerTextDrawSetProportional(playerid, MDC_LIC[playerid][6], 1);
    PlayerTextDrawSetShadow(playerid, MDC_LIC[playerid][6], 0);
    PlayerTextDrawSetSelectable(playerid, MDC_LIC[playerid][6], true);
*/

	/*

		----------------------------- MDC- -----------------------------
		----------------------------- APB INFO ------------------------

	*/

	for (new i; i < 5; i++)
	{
		x = 284.999938, y = 175.220901, d = (224.223892 - y)*i;
		MDC_APB_TD[playerid][4*i] = CreatePlayerTextDraw(playerid, x, y+d, "SUPHELI:_~n~BILGI:_~n~EKLEYEN:");
		PlayerTextDrawTextSize(playerid, MDC_APB_TD[playerid][4*i], -200.799865, 0.000000);
		PlayerTextDrawLetterSize(playerid, MDC_APB_TD[playerid][4*i], 0.154999, 1.081480);
		PlayerTextDrawAlignment(playerid, MDC_APB_TD[playerid][4*i], 3);
		PlayerTextDrawColor(playerid, MDC_APB_TD[playerid][4*i], 255);
		PlayerTextDrawSetShadow(playerid, MDC_APB_TD[playerid][4*i], 0);
		PlayerTextDrawSetOutline(playerid, MDC_APB_TD[playerid][4*i], 0);
		PlayerTextDrawBackgroundColor(playerid, MDC_APB_TD[playerid][4*i], 255);
		PlayerTextDrawFont(playerid, MDC_APB_TD[playerid][4*i], 1);//2);
		PlayerTextDrawSetProportional(playerid, MDC_APB_TD[playerid][4*i], 1);
		PlayerTextDrawSetShadow(playerid, MDC_APB_TD[playerid][4*i], 0);

		x = 290.483642, y = 175.220901, d = (224.223892 - y)*i;
		MDC_APB_TD[playerid][4*i+1] = CreatePlayerTextDraw(playerid, x, y+d, "text");
		PlayerTextDrawLetterSize(playerid, MDC_APB_TD[playerid][4*i+1], 0.1549, 1.0814);
		PlayerTextDrawTextSize(playerid, MDC_APB_TD[playerid][4*i+1], 478.0000, 0.0000);
		PlayerTextDrawAlignment(playerid, MDC_APB_TD[playerid][4*i+1], 1);
		PlayerTextDrawColor(playerid, MDC_APB_TD[playerid][4*i+1], -2139062017);
		PlayerTextDrawUseBox(playerid, MDC_APB_TD[playerid][4*i+1], 1);
		PlayerTextDrawBoxColor(playerid, MDC_APB_TD[playerid][4*i+1], -1);
		PlayerTextDrawBackgroundColor(playerid, MDC_APB_TD[playerid][4*i+1], -1);
		PlayerTextDrawFont(playerid, MDC_APB_TD[playerid][4*i+1], 1);
		PlayerTextDrawSetProportional(playerid, MDC_APB_TD[playerid][4*i+1], 1);
		PlayerTextDrawSetShadow(playerid, MDC_APB_TD[playerid][4*i+1], 0);
		PlayerTextDrawSetSelectable(playerid, MDC_APB_TD[playerid][4*i+1], true);

		x = 291.933532, y = 206.661392, d = (256.664382 - y)*i;
		MDC_APB_TD[playerid][4*i+2] = CreatePlayerTextDraw(playerid, x, y+d, "~>~ Detaylar");
		PlayerTextDrawLetterSize(playerid, MDC_APB_TD[playerid][4*i+2], 0.154999, 1.081480);
		PlayerTextDrawTextSize(playerid, MDC_APB_TD[playerid][4*i+2], 386.899871, 10.000000);
		PlayerTextDrawAlignment(playerid, MDC_APB_TD[playerid][4*i+2], 1);
		PlayerTextDrawColor(playerid, MDC_APB_TD[playerid][4*i+2], -1061109505);
		PlayerTextDrawUseBox(playerid, MDC_APB_TD[playerid][4*i+2], 1);
		PlayerTextDrawBoxColor(playerid, MDC_APB_TD[playerid][4*i+2], 0x494949FF);
		PlayerTextDrawSetShadow(playerid, MDC_APB_TD[playerid][4*i+2], 0);
		PlayerTextDrawSetOutline(playerid, MDC_APB_TD[playerid][4*i+2], 0);
		PlayerTextDrawBackgroundColor(playerid, MDC_APB_TD[playerid][4*i+2], 255);
		PlayerTextDrawFont(playerid, MDC_APB_TD[playerid][4*i+2], 1);
		PlayerTextDrawSetProportional(playerid, MDC_APB_TD[playerid][4*i+2], 1);
		PlayerTextDrawSetShadow(playerid, MDC_APB_TD[playerid][4*i+2], 0);
		PlayerTextDrawSetSelectable(playerid, MDC_APB_TD[playerid][4*i+2], true);

		x = 392.950042, y = 206.661392, d = (256.664382 - y)*i;

		MDC_APB_TD[playerid][4*i+3] = CreatePlayerTextDraw(playerid, x, y+d, "~>~ Kaldir");
		PlayerTextDrawLetterSize(playerid, MDC_APB_TD[playerid][4*i+3], 0.154999, 1.081480);
		PlayerTextDrawTextSize(playerid, MDC_APB_TD[playerid][4*i+3], 477.799865, 10.000000);
		PlayerTextDrawAlignment(playerid, MDC_APB_TD[playerid][4*i+3], 1);
		PlayerTextDrawColor(playerid, MDC_APB_TD[playerid][4*i+3], -1061109505);
		PlayerTextDrawUseBox(playerid, MDC_APB_TD[playerid][4*i+3], 1);
		PlayerTextDrawBoxColor(playerid, MDC_APB_TD[playerid][4*i+3], 0x494949FF);
		PlayerTextDrawSetShadow(playerid, MDC_APB_TD[playerid][4*i+3], 0);
		PlayerTextDrawSetOutline(playerid, MDC_APB_TD[playerid][4*i+3], 0);
		PlayerTextDrawBackgroundColor(playerid, MDC_APB_TD[playerid][4*i+3], 255);
		PlayerTextDrawFont(playerid, MDC_APB_TD[playerid][4*i+3], 1);
		PlayerTextDrawSetProportional(playerid, MDC_APB_TD[playerid][4*i+3], 1);
		PlayerTextDrawSetShadow(playerid, MDC_APB_TD[playerid][4*i+3], 0);
		PlayerTextDrawSetSelectable(playerid, MDC_APB_TD[playerid][4*i+3], true);
	}

	/*

		----------------------------- MDC- -----------------------------
		----------------------------- MDC CALLS TD ------------------------

	*/
	for (new i; i < 5; i++)
	{
		x = 233.333267, y = 156.957977, d = (209.361175 - y)*i;
		MDC_CALLS_TD[playerid][4*i] = CreatePlayerTextDraw(playerid, x, y+d, "Arayan:~n~Servis:~n~Lokasyon:~n~Durum:~n~Zaman:~n~Durum:");
		PlayerTextDrawLetterSize(playerid, MDC_CALLS_TD[playerid][4*i], 0.162082, 0.879257);
		PlayerTextDrawTextSize(playerid, MDC_CALLS_TD[playerid][4*i], 481.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, MDC_CALLS_TD[playerid][4*i], 1);
		PlayerTextDrawColor(playerid, MDC_CALLS_TD[playerid][4*i], 255);
		PlayerTextDrawUseBox(playerid, MDC_CALLS_TD[playerid][4*i], 1);
		PlayerTextDrawBoxColor(playerid, MDC_CALLS_TD[playerid][4*i], -1);
		PlayerTextDrawSetShadow(playerid, MDC_CALLS_TD[playerid][4*i], 0);
		PlayerTextDrawSetOutline(playerid, MDC_CALLS_TD[playerid][4*i], 0);
		PlayerTextDrawBackgroundColor(playerid, MDC_CALLS_TD[playerid][4*i], 255);
		PlayerTextDrawFont(playerid, MDC_CALLS_TD[playerid][4*i], 1);
		PlayerTextDrawSetProportional(playerid, MDC_CALLS_TD[playerid][4*i], 1);
		PlayerTextDrawSetShadow(playerid, MDC_CALLS_TD[playerid][4*i], 0);

		x = 266.035247, y = 156.957977, d = (209.361175 - y)*i;
		MDC_CALLS_TD[playerid][4*i+1] = CreatePlayerTextDraw(playerid, x, y+d, "Hopzy_Dev~n~SASD, SAFD~n~Palomino Creek, Gross Street, 16~n~YARDIM!! BENI OLDURECEKLER ..~n~15.02.19 12:01~n~~r~NOT HANDLED");
		PlayerTextDrawLetterSize(playerid, MDC_CALLS_TD[playerid][4*i+1], 0.162082, 0.879257);
		PlayerTextDrawAlignment(playerid, MDC_CALLS_TD[playerid][4*i+1], 1);
		PlayerTextDrawColor(playerid, MDC_CALLS_TD[playerid][4*i+1], 0x494949FF);
		PlayerTextDrawSetShadow(playerid, MDC_CALLS_TD[playerid][4*i+1], 0);
		PlayerTextDrawSetOutline(playerid, MDC_CALLS_TD[playerid][4*i+1], 0);
		PlayerTextDrawBackgroundColor(playerid, MDC_CALLS_TD[playerid][4*i+1], 255);
		PlayerTextDrawFont(playerid, MDC_CALLS_TD[playerid][4*i+1], 1);
		PlayerTextDrawSetProportional(playerid, MDC_CALLS_TD[playerid][4*i+1], 1);
		PlayerTextDrawSetShadow(playerid, MDC_CALLS_TD[playerid][4*i+1], 0);

		x = 370.032806, y = 194.902206, d = (247.305404 - y)*i;
		MDC_CALLS_TD[playerid][4*i+2] = CreatePlayerTextDraw(playerid, x, y+d, " ~>~ KABUL ET");
		PlayerTextDrawLetterSize(playerid, MDC_CALLS_TD[playerid][4*i+2], 0.154999, 1.081480);
		PlayerTextDrawTextSize(playerid, MDC_CALLS_TD[playerid][4*i+2], 427.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, MDC_CALLS_TD[playerid][4*i+2], 1);
		PlayerTextDrawColor(playerid, MDC_CALLS_TD[playerid][4*i+2], -1);//0xa7a7a7FF);
		PlayerTextDrawUseBox(playerid, MDC_CALLS_TD[playerid][4*i+2], 1);
		PlayerTextDrawBoxColor(playerid, MDC_CALLS_TD[playerid][4*i+2], -1523963137);
		PlayerTextDrawSetShadow(playerid, MDC_CALLS_TD[playerid][4*i+2], 0);
		PlayerTextDrawSetOutline(playerid, MDC_CALLS_TD[playerid][4*i+2], 0);
		PlayerTextDrawBackgroundColor(playerid, MDC_CALLS_TD[playerid][4*i+2], 255);
		PlayerTextDrawFont(playerid, MDC_CALLS_TD[playerid][4*i+2], 1);
		PlayerTextDrawSetProportional(playerid, MDC_CALLS_TD[playerid][4*i+2], 1);
		PlayerTextDrawSetShadow(playerid, MDC_CALLS_TD[playerid][4*i+2], 0);
		PlayerTextDrawSetSelectable(playerid, MDC_CALLS_TD[playerid][4*i+2], true);

		x = 428.850189, y = 194.902206, d = (247.305404 - y)*i;
		MDC_CALLS_TD[playerid][4*i+3] = CreatePlayerTextDraw(playerid, x, y+d, " ~>~ DETAYLAR");
		PlayerTextDrawLetterSize(playerid, MDC_CALLS_TD[playerid][4*i+3], 0.154999, 1.081480);
		PlayerTextDrawTextSize(playerid, MDC_CALLS_TD[playerid][4*i+3], 481.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, MDC_CALLS_TD[playerid][4*i+3], 1);
		PlayerTextDrawColor(playerid, MDC_CALLS_TD[playerid][4*i+3], -1);//0xa7a7a7FF);
		PlayerTextDrawUseBox(playerid, MDC_CALLS_TD[playerid][4*i+3], 1);
		PlayerTextDrawBoxColor(playerid, MDC_CALLS_TD[playerid][4*i+3], 255);
		PlayerTextDrawSetShadow(playerid, MDC_CALLS_TD[playerid][4*i+3], 0);
		PlayerTextDrawSetOutline(playerid, MDC_CALLS_TD[playerid][4*i+3], 0);
		PlayerTextDrawBackgroundColor(playerid, MDC_CALLS_TD[playerid][4*i+3], 255);
		PlayerTextDrawFont(playerid, MDC_CALLS_TD[playerid][4*i+3], 1);
		PlayerTextDrawSetProportional(playerid, MDC_CALLS_TD[playerid][4*i+3], 1);
		PlayerTextDrawSetShadow(playerid, MDC_CALLS_TD[playerid][4*i+3], 0);
		PlayerTextDrawSetSelectable(playerid, MDC_CALLS_TD[playerid][4*i+3], true);
	}

	/*

		----------------------------- MDC- -----------------------------
		----------------------------- LIST -----------------------------

	*/

	x = 232.799331, y = 172.383117, d = 185.783935 - y;
	for (new i = 0; i < 16; i++)
	{
		MDC_LIST[playerid][i] = CreatePlayerTextDraw(playerid, x, y, "list");
		PlayerTextDrawLetterSize(playerid, MDC_LIST[playerid][i], 0.154999, 1.081480);
		PlayerTextDrawTextSize(playerid, MDC_LIST[playerid][i], 479.100006, 9.900000);
		PlayerTextDrawAlignment(playerid, MDC_LIST[playerid][i], 1);
		PlayerTextDrawColor(playerid, MDC_LIST[playerid][i], -1);
		PlayerTextDrawUseBox(playerid, MDC_LIST[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid, MDC_LIST[playerid][i], -1523963137);
		PlayerTextDrawSetShadow(playerid, MDC_LIST[playerid][i], 0);
		PlayerTextDrawSetOutline(playerid, MDC_LIST[playerid][i], 0);
		PlayerTextDrawBackgroundColor(playerid, MDC_LIST[playerid][i], 255);
		PlayerTextDrawFont(playerid, MDC_LIST[playerid][i], 1);
		PlayerTextDrawSetProportional(playerid, MDC_LIST[playerid][i], 1);
		PlayerTextDrawSetShadow(playerid, MDC_LIST[playerid][i], 0);
		PlayerTextDrawSetSelectable(playerid, MDC_LIST[playerid][i], true);

		y += d;
	}

	/*

		============================= MDC- =============================
		============================= ROSTER ==========================

	*/

	x = 232.799331, y = 171.983093, d = 185.383911 - y;
	for (new i = 0; i < MAX_TD_MENU_SIZE; i++)
	{
		MDC_TD_MENU[playerid][i] = CreatePlayerTextDraw(playerid, x, y, "list");
		PlayerTextDrawLetterSize(playerid, MDC_TD_MENU[playerid][i], 0.154999, 1.081480);
		PlayerTextDrawTextSize(playerid, MDC_TD_MENU[playerid][i], 408.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, MDC_TD_MENU[playerid][i], 1);
		PlayerTextDrawColor(playerid, MDC_TD_MENU[playerid][i], 0x494949FF);
		PlayerTextDrawUseBox(playerid, MDC_TD_MENU[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid, MDC_TD_MENU[playerid][i], 0xa7a7a7FF);
		PlayerTextDrawSetShadow(playerid, MDC_TD_MENU[playerid][i], 0);
		PlayerTextDrawSetOutline(playerid, MDC_TD_MENU[playerid][i], 0);
		PlayerTextDrawBackgroundColor(playerid, MDC_TD_MENU[playerid][i], 255);
		PlayerTextDrawFont(playerid, MDC_TD_MENU[playerid][i], 1);
		PlayerTextDrawSetProportional(playerid, MDC_TD_MENU[playerid][i], 1);
		PlayerTextDrawSetShadow(playerid, MDC_TD_MENU[playerid][i], 0);
		PlayerTextDrawSetSelectable(playerid, MDC_TD_MENU[playerid][i], true);

		y += d;
	}

	MDC_TD_LEFT_PANEL[playerid][0] = CreatePlayerTextDraw(playerid, 232.682266, 158.646331, "Aktif birimler:");
	PlayerTextDrawLetterSize(playerid, MDC_TD_LEFT_PANEL[playerid][0], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_TD_LEFT_PANEL[playerid][0], 408.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MDC_TD_LEFT_PANEL[playerid][0], 1);
	PlayerTextDrawColor(playerid, MDC_TD_LEFT_PANEL[playerid][0], 0xa7a7a7FF);
	PlayerTextDrawUseBox(playerid, MDC_TD_LEFT_PANEL[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, MDC_TD_LEFT_PANEL[playerid][0], 0x494949FF);
	PlayerTextDrawSetShadow(playerid, MDC_TD_LEFT_PANEL[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MDC_TD_LEFT_PANEL[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_TD_LEFT_PANEL[playerid][0], 255);
	PlayerTextDrawFont(playerid, MDC_TD_LEFT_PANEL[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, MDC_TD_LEFT_PANEL[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, MDC_TD_LEFT_PANEL[playerid][0], 0);

	MDC_TD_LEFT_PANEL[playerid][1] = CreatePlayerTextDraw(playerid, 413.582427, 158.543823, "Birim belirle");
	PlayerTextDrawLetterSize(playerid, MDC_TD_LEFT_PANEL[playerid][1], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_TD_LEFT_PANEL[playerid][1], 481.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, MDC_TD_LEFT_PANEL[playerid][1], 1);
	PlayerTextDrawColor(playerid, MDC_TD_LEFT_PANEL[playerid][1], 0xa7a7a7FF);
	PlayerTextDrawUseBox(playerid, MDC_TD_LEFT_PANEL[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, MDC_TD_LEFT_PANEL[playerid][1], 0x494949FF);
	PlayerTextDrawSetShadow(playerid, MDC_TD_LEFT_PANEL[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MDC_TD_LEFT_PANEL[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_TD_LEFT_PANEL[playerid][1], 255);
	PlayerTextDrawFont(playerid, MDC_TD_LEFT_PANEL[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, MDC_TD_LEFT_PANEL[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MDC_TD_LEFT_PANEL[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_TD_LEFT_PANEL[playerid][1], true);

	MDC_TD_LEFT_PANEL[playerid][2] = CreatePlayerTextDraw(playerid, 413.582427, 172.144653, "LINCOLN-1");
	PlayerTextDrawLetterSize(playerid, MDC_TD_LEFT_PANEL[playerid][2], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_TD_LEFT_PANEL[playerid][2], 481.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MDC_TD_LEFT_PANEL[playerid][2], 1);
	PlayerTextDrawColor(playerid, MDC_TD_LEFT_PANEL[playerid][2], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_TD_LEFT_PANEL[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, MDC_TD_LEFT_PANEL[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, MDC_TD_LEFT_PANEL[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, MDC_TD_LEFT_PANEL[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_TD_LEFT_PANEL[playerid][2], 255);
	PlayerTextDrawFont(playerid, MDC_TD_LEFT_PANEL[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, MDC_TD_LEFT_PANEL[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, MDC_TD_LEFT_PANEL[playerid][2], 0);

 	MDC_UI[playerid][2] = CreatePlayerTextDraw(playerid, 189.965499, 156.437500, "ANA PANEL");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][2], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][2], 10.000000, 66.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][2], 2);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][2], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][2], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][2], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_UI[playerid][2], true);

	MDC_UI[playerid][3] = CreatePlayerTextDraw(playerid, 189.965499, 172.393096, "ARAMA YAP");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][3], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][3], 10.000000, 66.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][3], 2);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][3], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][3], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][3], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_UI[playerid][3], true);

	MDC_UI[playerid][4] = CreatePlayerTextDraw(playerid, 189.965499, 188.467193, "CAGRILAR");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][4], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][4], 10.000000, 66.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][4], 2);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][4], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][4], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][4], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_UI[playerid][4], true);

	MDC_UI[playerid][5] = CreatePlayerTextDraw(playerid, 189.948852, 204.422760, "MEMURLAR");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][5], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][5], 10.000000, 66.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][5], 2);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][5], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][5], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][5], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_UI[playerid][5], true);

	MDC_UI[playerid][6] = CreatePlayerTextDraw(playerid, 189.965484, 220.733901, "APB");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][6], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][6], 10.000000, 66.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][6], 2);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][6], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][6], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][6], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_UI[playerid][6], true);

	MDC_UI[playerid][7] = CreatePlayerTextDraw(playerid, 189.848831, 253.346023, "BIRIMLER");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][7], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][7], 10.000000, 66.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][7], 2);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][7], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][7], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][7], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_UI[playerid][7], true);

	MDC_UI[playerid][8] = CreatePlayerTextDraw(playerid, 189.865478, 269.675598, "CCTV");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][8], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][8], 10.000000, 66.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][8], 2);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][8], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][8], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][8], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_UI[playerid][8], true);

	MDC_UI[playerid][10] = CreatePlayerTextDraw(playerid, 189.865478, 286.212646, "");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][10], 0.154999, 1.081480);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][10], 10.000000, 66.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][10], 2);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][10], 0x494949FF);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][10], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][10], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_UI[playerid][10], true);

	MDC_UI[playerid][11] = CreatePlayerTextDraw(playerid, 189.866012, 414.188751, "MDC V1.0~n~ERISIM:~n~Hopzy Dev");
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][11], 0.162082, 0.796296);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][11], 2);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][11], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][11], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][11], 0);

	MDC_UI[playerid][12] = CreatePlayerTextDraw(playerid, 228.099792, 154.585281, "line"); //
	PlayerTextDrawLetterSize(playerid, MDC_UI[playerid][12], 0.000000, 31.291673);
	PlayerTextDrawTextSize(playerid, MDC_UI[playerid][12], 226.799926, 0.000000);
	PlayerTextDrawAlignment(playerid, MDC_UI[playerid][12], 1);
	PlayerTextDrawColor(playerid, MDC_UI[playerid][12], -1);
	PlayerTextDrawUseBox(playerid, MDC_UI[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][12], 0xa7a7a7FF);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, MDC_UI[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, MDC_UI[playerid][12], 255);
	PlayerTextDrawFont(playerid, MDC_UI[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, MDC_UI[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, MDC_UI[playerid][12], 0);


    return 1;
}

MDC_PAGE(playerid, page)
{

    Update_MDC(playerid, page);

    switch(page)
    {
        case PAGE_MAIN:
        {
            PlayerTextDrawSetPreviewModel(playerid, MDC_MAINSCREEN[playerid][0], GetPlayerSkin(playerid));
            PlayerTextDrawShow(playerid, MDC_MAINSCREEN[playerid][0]);

            new string[124];
            format(string, sizeof(string), "%s %s", GetRankName(playerid), GetNameEx(playerid));
            PlayerTextDrawSetString(playerid, MDC_MAINSCREEN[playerid][2], string);

            format(string, sizeof(string), "%i~n~TBA~n~TBA", MembersOnline(playerid));
            PlayerTextDrawSetString(playerid, MDC_MAINSCREEN[playerid][4], string);

            format(string, sizeof(string), "%i~n~%i~n~%i", pTemp[playerid][pPoliceCalls], pTemp[playerid][pPoliceJails], pTemp[playerid][pPoliceFines]);
            PlayerTextDrawSetString(playerid, MDC_MAINSCREEN[playerid][6], string);

	        format(string, sizeof(string), "%s's MDC ~>~ Anasayfa", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);


            // PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0xa7a7a7FF);
	        // PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0x494949FF); // ÈÌß
        }
        case PAGE_APB:
        {
            new count,
                string[256]
            ;

            SetPVarInt(playerid, #MDC_APB_S, 0);

            for(new i = MAX_APBS-1; i >= 0; i--)
            {
                if (ApbInfo[i][apbOn] == 0) continue;

                if (count < 5)
                {
                    format(string, sizeof(string), "%s, #%i~n~%.60s%s~n~%s, %s", ApbInfo[i][apbSuspect], ApbInfo[i][apbID]+90214, ApbInfo[i][apbCharge], (strlen(ApbInfo[i][apbCharge]) > 60)?("_.."):("_"), ApbInfo[i][apbOfficer], ApbInfo[i][apbDate]);
                    PlayerTextDrawSetString(playerid, MDC_APB_TD[playerid][count*4+1], TurkishCharFix(string));

                    MdcInfo[count][mdcList] = i;

                    for(new j = count*4; j < count*4+4; j++) PlayerTextDrawShow(playerid, MDC_APB_TD[playerid][j]);
                }
                count++;
            }

            PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][0], "EKLE");
            PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][1], "ISIM");
                                                                            // ÏÎ ÎÏÈÑ.
            MdcInfo[playerid][mdcSearch] = 0;

            if (!count) PlayerTextDrawShow(playerid, MDC_LOOKUP_ERROR[playerid]);
            else
            {
                if (count > 5)
                {
                    for(new b = 0; b < 3; b++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);

                    count = floatround(float(count)/5.0, floatround_ceil);
                    SetPVarInt(playerid, #MAX_MDC_PAGE, count);

                    MdcInfo[playerid][mdcListPage] = 0;

                    format(string, sizeof(string), "1_/_%i", count);
                    PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], string);
                }
            }
        }
        case PAGE_CALLS:
        {
            PlayerTextDrawHide(playerid, MDC_ERROR_CALLS[playerid]);

            new
                string[512],
                count,
                type = (IsPlayerFactionMedic(playerid) || IsPlayerFactionFire(playerid))?(2):(1)
            ;

            for(new i = MAX_CALLS_AND_ARREST-1; i >= 0; i--)
            {
                if (CallInfo[i][callExists] == 0) continue;

                if (CallInfo[i][callType] != 3)
                    if (CallInfo[i][callType] != type) continue;

                switch(CallInfo[i][callType])
                {
                    case 1: format(string, sizeof(string), "LSPD");
                    case 2: format(string, sizeof(string), "YANGIN DEPARTMANI");
                    case 3: format(string, sizeof(string), "MEDIKAL DEPARTMAN");
                }

                if (count < 5)
                {
                    new statusmes[65];
                    if (CallInfo[i][callAccept]) format(statusmes, sizeof(statusmes), "%s", CallInfo[i][callAcceptBy]);
                    else format(statusmes, sizeof(statusmes), "~r~Isleme Alinmamis");

                    format(string, sizeof(string), "%s (No %i)~n~%s~n~%s~n~%.60s%s~n~%s~n~%s",
                        CallInfo[i][callName],
                        CallInfo[i][callPhone],
                        string,
                        CallInfo[i][callLocation],
                        CallInfo[i][callText],
                        (strlen(CallInfo[i][callText]) > 60)?(" .."):(""),
                        CallInfo[i][callDate],
                        statusmes
                    );
                    PlayerTextDrawSetString(playerid, MDC_CALLS_TD[playerid][count*4+1], TurkishCharFix(string));

                    MdcInfo[count][mdcList] = i;
                    for(new j = count*4; j < count*4+4; j++) PlayerTextDrawShow(playerid, MDC_CALLS_TD[playerid][j]);
                    if (CallInfo[i][callAccept]) PlayerTextDrawHide(playerid, MDC_CALLS_TD[playerid][count*4+2]);
                }
                count++;
            }

            if (!count)
            {
                PlayerTextDrawShow(playerid, MDC_ERROR_CALLS[playerid]);
                PlayerTextDrawSetString(playerid, MDC_ERROR_CALLS[playerid], "]__HATA: HICBIR SEY BULUNAMADI!");
            }

            else
            {
                if (count > 5)
                {
                    for(new b = 0; b < 3; b++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);

                    count = floatround(float(count)/5.0, floatround_ceil);
                    SetPVarInt(playerid, #MAX_MDC_PAGE, count);

                    MdcInfo[playerid][mdcListPage] = 0;

                    format(string, sizeof(string), "1_/_%i", count);
                    PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], string);
                }
            }
        }

        case PAGE_CCTV:
        {
            new query[255];
            mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cctvs` ORDER BY `id` LIMIT 16");
            mysql_tquery(dbHandle, query, "MDC_ShowCCTVMenu", "ii", playerid, 0);

            MdcInfo[playerid][mdcListPage] = 0;
            //MdcInfo[playerid][mdcMenu] = PAGE_CCTV;

            new Float:countcctvs = MDC_CountCCTVS();
            countcctvs = countcctvs/16;
            SetPVarInt(playerid, #MAX_MDC_PAGE, floatround(countcctvs, floatround_ceil));
        }
        case PAGE_ROSTER:
        {
            MdcInfo[playerid][mdcListPage] = 0;
            MdcInfo[playerid][mdcMenu] = PAGE_ROSTER;

            new Float:countRoster = MDC_CountRoster();
            countRoster = countRoster/18;
            SetPVarInt(playerid, #MAX_MDC_PAGE, floatround(countRoster, floatround_ceil));

            MDC_ShowRosterMenu(playerid);
        }
        case PAGE_MEMBERS:
        {
            MdcInfo[playerid][mdcListPage] = 0;
            MdcInfo[playerid][mdcMenu] = PAGE_MEMBERS;

            new Float:countMembers = MembersOnline(playerid);
            countMembers = countMembers/18;
            SetPVarInt(playerid, #MAX_MDC_PAGE, floatround(countMembers, floatround_ceil));

            MDC_ShowMembersMenu(playerid);
        }
    }
    return 1;
}

Update_MDC(playerid, page)
{
    new oldpage = MdcInfo[playerid][mdcPage];

    if (oldpage == page) return 1;

    if ((oldpage == PAGE_LOOKUP_PERSON || oldpage == PAGE_LOOKUP_VEHICLE || oldpage == PAGE_LOOKUP || oldpage == PAGE_LOOKUP_VEHICLES_LIST) && page == PAGE_LOOKUP)
        return 1;

    MdcInfo[playerid][mdcPage] = page;

    for(new z = 2; z < 13; z++)
    {
        PlayerTextDrawColor(playerid, MDC_UI[playerid][z], 0x494949FF);
        PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][z], 0xa7a7a7FF);
        PlayerTextDrawShow(playerid, MDC_UI[playerid][z]);
    }

    switch(oldpage)
    {
        case PAGE_MAIN:
        {
            for(new y = 0; y < 7; y++)  PlayerTextDrawHide(playerid, MDC_MAINSCREEN[playerid][y]);
        }
        case PAGE_LOOKUP:
        {
            if (page != PAGE_LOOKUP && page != PAGE_LOOKUP_PERSON && page != PAGE_LOOKUP_VEHICLE && page != PAGE_LOOKUP_VEHICLES_LIST)
            {
                for(new i = 0; i < 4; i++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_SEARCH[playerid][i]);
                PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);
            }
        }
        case PAGE_LOOKUP_PERSON:
        {
            if (page != PAGE_LOOKUP && page != PAGE_LOOKUP_PERSON && page != PAGE_LOOKUP_VEHICLE && page != PAGE_LOOKUP_VEHICLES_LIST)
            {
                for(new i = 0; i < 4; i++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_SEARCH[playerid][i]);
            }

            for(new a = 0; a < 2; a++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_AVATAR[playerid][a]);
            for(new b = 0; b < 12; b++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][b]);

            PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);
        }
        case PAGE_LOOKUP_VEHICLE:
        {
            if (page != PAGE_LOOKUP && page != PAGE_LOOKUP_PERSON && page != PAGE_LOOKUP_VEHICLE && page != PAGE_LOOKUP_VEHICLES_LIST)
            {
                for(new i = 0; i < 4; i++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_SEARCH[playerid][i]);
            }
            else
            {
                for(new i = 0; i < 4; i++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_SEARCH[playerid][i]);
            }

            for(new a = 0; a < 8; a++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLE[playerid][a]);

            PlayerTextDrawHide(playerid, MDC_BACK[playerid]);
            PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);
        }
        case PAGE_LOOKUP_VEHICLES_LIST:
        {
            if (page != PAGE_LOOKUP && page != PAGE_LOOKUP_PERSON && page != PAGE_LOOKUP_VEHICLES_LIST && page != PAGE_LOOKUP_VEHICLE)
            {
                for(new i = 0; i < 4; i++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_SEARCH[playerid][i]);
            }
            //if (page == PAGE_LOOKUP_VEHICLE) PlayerTextDrawShow(playerid, MDC_BACK[playerid]);

            for(new a = 0; a < 12; a++) PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][a]);
            for(new b = 0; b < 3; b++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);
            for(new g = 0; g < 3; g++)  PlayerTextDrawHide(playerid, MDC_VEH_LIST_CLICK[playerid][g]);

            PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);
        }
        case PAGE_MENU:
        {
            PlayerTextDrawHide(playerid, MDC_BACK[playerid]);
            for(new a = 0; a < 16; a++)  PlayerTextDrawHide(playerid, MDC_LIST[playerid][a]);

            if (GetPVarInt(playerid, #MAX_MDC_PAGE) > 1)
                for(new b = 0; b < 3; b++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);
        }
        case PAGE_INFO:
        {
            PlayerTextDrawHide(playerid, MDC_BACK[playerid]);
            for(new a = 0; a < 3; a++)  PlayerTextDrawHide(playerid, MDC_LIST_INFO[playerid][a]);
        }
        case PAGE_MAP:
        {
            PlayerTextDrawHide(playerid, MDC_BACK[playerid]);

            for(new j = 0; j < 6; j++) PlayerTextDrawHide(playerid, MDC_OTHER_ADDRESS[playerid][j]);
            for(new i = 0; i < 5; i++) PlayerTextDrawHide(playerid, MDC_ADDRESS[playerid][i]);

            PlayerTextDrawDestroy(playerid, MDC_ADDRESS[playerid][2]);
            MDC_ADDRESS[playerid][2] = PlayerText:INVALID_TEXT_DRAW;
        }
        case PAGE_MEMBERS_MAP:
        {
            PlayerTextDrawHide(playerid, MDC_BACK[playerid]);

            for(new j = 0; j < 6; j++) PlayerTextDrawHide(playerid, MDC_OTHER_ADDRESS[playerid][j]);
            for(new i = 0; i < 5; i++) PlayerTextDrawHide(playerid, MDC_ADDRESS[playerid][i]);
            for(new i = 0; i < 5; i++) PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][i]);
            for(new a = 0; a < 2; a++) PlayerTextDrawHide(playerid, MDC_LOOKUP_AVATAR[playerid][a]);

            PlayerTextDrawSetString(playerid, MDC_LOOKUP_PERSON[playerid][4], "~>~ TUTUKLUK KAYDI YAZIN");
            PlayerTextDrawSetString(playerid, MDC_LOOKUP_PERSON[playerid][3], "~l~MEVCUT FONKSÝYON:");
            //PlayerTextDrawUseBox(playerid, MDC_LOOKUP_PERSON[playerid][3], true);
            //PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_PERSON[playerid][3], true);

            PlayerTextDrawDestroy(playerid, MDC_ADDRESS[playerid][2]);
            MDC_ADDRESS[playerid][2] = PlayerText:INVALID_TEXT_DRAW;

            PlayerTextDrawHide(playerid, MDC_BACK[playerid]);

            DeletePVar(playerid, #BODYCAM);
        }
        case PAGE_LIC:
        {
            PlayerTextDrawHide(playerid, MDC_BACK[playerid]);

            for(new i = 0; i < 32; i++) PlayerTextDrawHide(playerid, MDC_LIC[playerid][i]);
        }
        case PAGE_APB:
        {
            for(new a = 0; a < 4; a++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_SEARCH[playerid][a]);
            for(new b = 0; b < 3; b++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);
            for(new i = 0; i < 20; i++) PlayerTextDrawHide(playerid, MDC_APB_TD[playerid][i]);
            PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);
        }
        case PAGE_CALLS:
        {
            for(new b = 0; b < 3; b++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);
            for(new i = 0; i < 20; i++) PlayerTextDrawHide(playerid, MDC_CALLS_TD[playerid][i]);
            PlayerTextDrawHide(playerid, MDC_ERROR_CALLS[playerid]);
        }

        case PAGE_CCTV:
        {
            PlayerTextDrawHide(playerid, MDC_ERROR_CALLS[playerid]);

            for(new a = 0; a < 16; a++)  PlayerTextDrawHide(playerid, MDC_LIST[playerid][a]);

            if (GetPVarInt(playerid, #MAX_MDC_PAGE) > 1)
                for(new b = 0; b < 3; b++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);
        }

        case PAGE_ROSTER, PAGE_MEMBERS:
        {
            for(new j = 0; j < 3; j++)   PlayerTextDrawHide(playerid, MDC_TD_LEFT_PANEL[playerid][j]);
            for(new i = 0; i < 18; i++)  PlayerTextDrawHide(playerid, MDC_TD_MENU[playerid][i]);
        }
    }

    switch(page)
    {
        case PAGE_MAIN:
        {
            for(new y = 0; y < 7; y++)  PlayerTextDrawShow(playerid, MDC_MAINSCREEN[playerid][y]);

            PlayerTextDrawColor(playerid, MDC_UI[playerid][2], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][2], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][2]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Ana Menu", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);
        }
        case PAGE_LOOKUP:
        {
            PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], "_________________");

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Arama Yap", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);

            PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][0], "ISIM");
            PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][1], "PLAKA");

            PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0xa7a7a7FF);
	        PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][0], 0x494949FF); // ÈÌß

            PlayerTextDrawColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0x494949FF);
	        PlayerTextDrawBoxColor(playerid, MDC_LOOKUP_SEARCH[playerid][1], 0xa7a7a7FF); // ÒÑ

            for(new i = 0; i < 4; i++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_SEARCH[playerid][i]);

            PlayerTextDrawColor(playerid, MDC_UI[playerid][3], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][3], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][3]);

            MdcInfo[playerid][mdcSearch] = 0;
            //PlayerTextDrawShow(playerid, MDC_LOOKUP_ERROR[playerid]);
        }
        case PAGE_LOOKUP_PERSON:
        {
            for(new i = 0; i < 4; i++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_SEARCH[playerid][i]);
            //for(new a = 0; a < 2; a++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_AVATAR[playerid][a]);
            for(new b = 0; b < 12; b++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_PERSON[playerid][b]);

            PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][10]);
            PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);

            PlayerTextDrawColor(playerid, MDC_UI[playerid][3], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][3], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][3]);

            //PlayerTextDrawShow(playerid, MDC_LOOKUP_ERROR[playerid]);
            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Arama Yap", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);
        }
        case PAGE_LOOKUP_VEHICLE:
        {
            //PlayerTextDrawSetString(playerid, MDC_BACK[playerid], "~<~ ÂÅÐÍÓÒÜÑß ÍÀÇÀÄ");

            if (GetPVarInt(playerid, #MDC_VEH_BACK))
            {
                for(new i = 0; i < 4; i++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_SEARCH[playerid][i]);
                PlayerTextDrawShow(playerid, MDC_BACK[playerid]);
            }
            else
            {
                for(new i = 0; i < 4; i++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_SEARCH[playerid][i]);
                PlayerTextDrawHide(playerid, MDC_BACK[playerid]);
            }

            //for(new a = 0; a < 12; a++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][a]);
            //for(new b = 0; b < 3; b++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);

            for(new i = 0; i < 8; i++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLE[playerid][i]);
            PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);

            PlayerTextDrawColor(playerid, MDC_UI[playerid][3], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][3], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][3]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Arama Yap", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);
        }
        case PAGE_LOOKUP_VEHICLES_LIST:
        {
            for(new i = 0; i < 4; i++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_SEARCH[playerid][i]);
            //for(new a = 0; a < 12; a++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][a]);
            //for(new b = 0; b < 3; b++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);

            PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);

            PlayerTextDrawColor(playerid, MDC_UI[playerid][3], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][3], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][3]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Arama Yap", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);
        }
        case PAGE_MENU:
        {
            PlayerTextDrawShow(playerid, MDC_BACK[playerid]);

            PlayerTextDrawColor(playerid, MDC_UI[playerid][3], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][3], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][3]);

            if (GetPVarInt(playerid, #MAX_MDC_PAGE) > 1)
                for(new b = 0; b < 3; b++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);

            //for(new a = 0; a < 16; a++)  PlayerTextDrawHide(playerid, MDC_LIST[playerid][a]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Liste", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);
        }
        case PAGE_INFO:
        {
            PlayerTextDrawShow(playerid, MDC_BACK[playerid]);

            PlayerTextDrawColor(playerid, MDC_UI[playerid][3], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][3], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][3]);

            for(new a = 0; a < 3; a++)  PlayerTextDrawShow(playerid, MDC_LIST_INFO[playerid][a]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Arama Yap", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);
        }

        case PAGE_MAP:
        {
            PlayerTextDrawShow(playerid, MDC_BACK[playerid]);

            PlayerTextDrawColor(playerid, MDC_UI[playerid][3], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][3], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][3]);

            for(new i = 0; i < 5; i++) if (i != 2) PlayerTextDrawShow(playerid, MDC_ADDRESS[playerid][i]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Adresler", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);
        }

        case PAGE_MEMBERS_MAP:
        {
            PlayerTextDrawShow(playerid, MDC_BACK[playerid]);

            PlayerTextDrawColor(playerid, MDC_UI[playerid][5], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][5], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][5]);

            for(new i = 0; i < 2; i++) PlayerTextDrawShow(playerid, MDC_ADDRESS[playerid][i]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Memurlar", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);
        }

        case PAGE_LIC:
        {
            PlayerTextDrawShow(playerid, MDC_BACK[playerid]);

            PlayerTextDrawColor(playerid, MDC_UI[playerid][3], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][3], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][3]);

            for(new i = 0; i < 32; i++) PlayerTextDrawShow(playerid, MDC_LIC[playerid][i]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Ruhsatlar", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);
        }

        case PAGE_CALLS:
        {
            PlayerTextDrawColor(playerid, MDC_UI[playerid][4], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][4], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][4]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Acil Durum", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);
        }

        case PAGE_APB:
        {
            for(new a = 0; a < 4; a++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_SEARCH[playerid][a]);
            //for(new b = 0; b < 3; b++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);

            PlayerTextDrawColor(playerid, MDC_UI[playerid][6], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][6], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][6]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ APB", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);
            PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], "_________________");
        }
        case PAGE_ROSTER:
        {
            PlayerTextDrawColor(playerid, MDC_UI[playerid][7], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][7], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][7]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Kadro", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);

            for(new j = 0; j < 3; j++)  PlayerTextDrawShow(playerid, MDC_TD_LEFT_PANEL[playerid][j]);
        }
        case PAGE_MEMBERS:
        {
            PlayerTextDrawColor(playerid, MDC_UI[playerid][5], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][5], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][5]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ Memurlar", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);

            for(new j = 0; j < 3; j++)  PlayerTextDrawShow(playerid, MDC_TD_LEFT_PANEL[playerid][j]);
        }
        case PAGE_CCTV:
        {
            PlayerTextDrawSetString(playerid, MDC_ERROR_CALLS[playerid], "AKTIF CCTV:");
            PlayerTextDrawShow(playerid, MDC_ERROR_CALLS[playerid]);

            PlayerTextDrawColor(playerid, MDC_UI[playerid][8], 0xa7a7a7FF);
            PlayerTextDrawBoxColor(playerid, MDC_UI[playerid][8], 0x494949FF);
            PlayerTextDrawShow(playerid, MDC_UI[playerid][8]);

            new string[128];
            format(string, sizeof(string), "%s MDC ~>~ CCTV", Factions[PlayerInfo[playerid][pFaction]][fName]);
            PlayerTextDrawSetString(playerid, MDC_UI[playerid][13], string);

            if (GetPVarInt(playerid, #MAX_MDC_PAGE) > 1)
                for(new b = 0; b < 3; b++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);
        }
    }

    return 1;
}

MembersOnline(playerid)
{
    new count = 0;
    foreach(new i : Player)
    {
        if (IsPlayerLogged(i) == 0 || PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction])	continue;
        count++;
    }
    return count;
}

this::MDCSearchPersonInfo(playerid)
{
    if (!cache_num_rows())
    {
        PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], "_________________");

		for(new a = 0; a < 2; a++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_AVATAR[playerid][a]);
		for(new b = 0; b < 12; b++) PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][b]);

		for(new c = 0; c < 3; c++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][c]);
        for(new g = 0; g < 3; g++)  PlayerTextDrawHide(playerid, MDC_VEH_LIST_CLICK[playerid][g]);
		for(new d = 0; d < 12; d++) PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][d]);

		MdcInfo[playerid][mdcPage] = PAGE_LOOKUP;
		return PlayerTextDrawShow(playerid, MDC_LOOKUP_ERROR[playerid]);
    }

    //MdcInfo[playerid][mdcBack] = PAGE_LOOKUP_PERSON;
    MdcInfo[playerid][mdcMenu] = PAGE_LOOKUP_PERSON;

    Update_MDC(playerid, PAGE_LOOKUP_PERSON);
    PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);

    new
        ownername[MAX_PLAYER_NAME],
        strhouse[128],
        strlic[64],
        birthdate[24],
        str[10 + 24 + 128 + 64 + 24 + 24],
        count = 0
    ;


    new skin, carlic, weplic, flylic, taxilic, arrested, id, number;
    cache_get_value_int(0, "id", id);
    cache_get_value_int(0, "skin", skin);
    cache_get_value_int(0, "number", number);
    cache_get_value_int(0, "carlic", carlic);
    cache_get_value_int(0, "weplic", weplic);
    cache_get_value_int(0, "flylic", flylic);
    cache_get_value_int(0, "taxilic", taxilic);
    cache_get_value_int(0, "arrested", arrested);
    cache_get_value(0, "name", ownername, 24);
	PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], ownername);

	if (carlic == 1)
	{
        count++;
	    format(strlic, sizeof(strlic), "Surucu Lisansi");
	}
	if (weplic == 1)
	{
        if (count > 0) format(strlic, sizeof(strlic), "%s, ", strlic);
	    format(strlic, sizeof(strlic), "%sSilah Ruhsati", strlic);
        count++;
	}
	if (flylic == 1)
	{
	    if (count > 0) format(strlic, sizeof(strlic), "%s, ", strlic);
	    format(strlic, sizeof(strlic), "%sUcus Lisansi", strlic);
        count++;
	}
	if (taxilic == 1)
	{
	    if (count > 0) format(strlic, sizeof(strlic), "%s, ", strlic);
	    format(strlic, sizeof(strlic), "%sTaksi Lisansi", strlic);
        count++;
	}
    if (!count) format(strlic, sizeof(strlic), "Bulunamadi");

	if (arrested || count > 0)
    {
        PlayerTextDrawSetPreviewModel(playerid, MDC_LOOKUP_AVATAR[playerid][1], skin);
        PlayerTextDrawShow(playerid, MDC_LOOKUP_AVATAR[playerid][1]);

        PlayerTextDrawHide(playerid, MDC_LOOKUP_AVATAR[playerid][0]);
    }
    else
    {
        PlayerTextDrawShow(playerid, MDC_LOOKUP_AVATAR[playerid][0]);
        PlayerTextDrawHide(playerid, MDC_LOOKUP_AVATAR[playerid][1]);
    }

    count = 0;

    for(new i; i < MAX_HOUSES; i++)
	{
	    if (!HouseInfo[i][hID] || HouseInfo[i][hOwnerID] != id) continue;

        count++;
        if (count > 1) break;
        format(strhouse, sizeof(strhouse), "%s", (!HouseInfo[i][hApart])?(GetHouseZone(i)):(GetApartmentZone(HouseInfo[i][hApart])));
    }

	if (!count)
    {
        format(strhouse, sizeof(strhouse), "Bulunamadi");
        PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][10]);
    }
    else
    {
        if (count > 1) PlayerTextDrawSetString(playerid, MDC_LOOKUP_PERSON[playerid][10], "]_ADRESLER ICIN BURAYA TIKLAYIN.");
        else PlayerTextDrawSetString(playerid, MDC_LOOKUP_PERSON[playerid][10], "]_EV KONUMU ICIN TIKLAYIN;");

        PlayerTextDrawShow(playerid, MDC_LOOKUP_PERSON[playerid][10]);
    }

    cache_get_value(0, "birthdate", birthdate, 24);
    PlayerTextDrawSetPreviewModel(playerid, MDC_LOOKUP_AVATAR[playerid][1], skin);

    format(str, sizeof(str), "%s, %s~n~%i~n~%i hapis kaydi~n~%s~n~%s", ownername, birthdate, number, arrested, strlic, strhouse);
    PlayerTextDrawSetString(playerid, MDC_LOOKUP_PERSON[playerid][2], TurkishCharFix(str));

    count = id;

    new tickets = CountPlayerTicketsID(count);
    if (tickets) {
        format(str, sizeof(str), "~y~%i~w~~n~Odenmemis cezalar!", tickets);
        PlayerTextDrawSetString(playerid, MDC_LOOKUP_PERSON[playerid][11], str);
    } else {
        PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][11]);
    }

    SetPVarInt(playerid, #MDC_ID, count);

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `criminalrecords` WHERE `userid` = %i", count);
	mysql_tquery(dbHandle, query, "MDCPersonCriminalHistory", "i", playerid);

    return 1;
}

this::MDCPersonCriminalHistory(playerid)
{
	if (!cache_num_rows())
    {
        PlayerTextDrawSetString(playerid, MDC_LOOKUP_PERSON[playerid][8], "- SUC GECMISI TEMIZ.");
        PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][9]);
        return 1;
    }

    new
        count = 0,
        newcount = 0,
        arrest,
        arrest2,
        str[5*128]
    ;

    if (cache_num_rows() > 5) count = 5;
    else count = cache_num_rows();

	for(new i; i < count; i++)
	{
        cache_get_value_int(i, "arrest", arrest);
        if (arrest == 1)
        {
            new strtemp[124];
            cache_get_value(i, "charge", strtemp, 128);

            if (strlen(strtemp) > 36)
                format(str, sizeof(str), "%s-_%s~n~", str, TextTab(strtemp, 30, 36, 0));
            else
                format(str, sizeof(str), "%s-_%s~n~", str, strtemp);

            newcount++;
        }
	}

    cache_get_value_int(cache_num_rows()-1, "arrest", arrest2);

    if (arrest2 != 1) PlayerTextDrawShow(playerid, MDC_LOOKUP_PERSON[playerid][9]);
    else                                                               PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][9]);

    if (count == 0) PlayerTextDrawSetString(playerid, MDC_LOOKUP_PERSON[playerid][8], "- SUC GECMISI TEMIZ.");
    else if (newcount == 0) PlayerTextDrawSetString(playerid, MDC_LOOKUP_PERSON[playerid][8], "- ARANIYOR (ayrintilar icin tiklayin ~up~).");

    else PlayerTextDrawSetString(playerid, MDC_LOOKUP_PERSON[playerid][8], TurkishCharFix(str));

	return 1;
}

IsPlayerWanted(playerid)
{
    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `arrest` FROM `criminalrecords` WHERE `userid` = %i ORDER BY `id` DESC LIMIT 1", playerid);
	new Cache:cache = mysql_query(dbHandle, query);

    if (!cache_num_rows()) return 0;

	new	arrest;
    cache_get_value_int(0, "arrest", arrest);

    cache_delete(cache);
    cache = MYSQL_INVALID_CACHE;

    if (arrest != 1) return 1;
    else            return 0;
}

this::MDCSearchVehiclesList_GetID(playerid)
{
    if (!cache_num_rows())
    {
        PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], "_________________");

		for(new a = 0; a < 2; a++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_AVATAR[playerid][a]);
		for(new b = 0; b < 12; b++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][b]);

		for(new c = 0; c < 3; c++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][c]);
        for(new g = 0; g < 3; g++)  PlayerTextDrawHide(playerid, MDC_VEH_LIST_CLICK[playerid][g]);
		for(new d = 0; d < 12; d++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][d]);

		MdcInfo[playerid][mdcPage] = PAGE_LOOKUP;
		return PlayerTextDrawShow(playerid, MDC_LOOKUP_ERROR[playerid]);
    }

    new id;
    cache_get_value_int(0, "id", id);

    new query[164];
	mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = cars.owner) as ownername FROM `cars` WHERE `owner` = %i AND `registered`=1 LIMIT 3", id);
	mysql_tquery(dbHandle, query, "MDCSearchVehiclesList", "i", playerid);

    return 1;
}


this::MDCSearchVehiclesList(playerid) ////// ÎØÈÁÊÀ
{

	if (!cache_num_rows())
	{
		PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], "_________________");

		for(new a = 0; a < 2; a++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_AVATAR[playerid][a]);
		for(new b = 0; b < 12; b++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][b]);

		for(new c = 0; c < 3; c++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][c]);
        for(new g = 0; g < 3; g++)  PlayerTextDrawHide(playerid, MDC_VEH_LIST_CLICK[playerid][g]);
		for(new d = 0; d < 12; d++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][d]);

		MdcInfo[playerid][mdcPage] = PAGE_LOOKUP;
		return PlayerTextDrawShow(playerid, MDC_LOOKUP_ERROR[playerid]);
	}

    else if(MdcInfo[playerid][mdcListPage] == 0)
    {
        new aracid;
        cache_get_value_int(0, "id", aracid);

        new query[156];
        mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = cars.owner) as ownername FROM `cars` WHERE `id` = %i AND `registered`=1", aracid);
        mysql_tquery(dbHandle, query, "MDCSearchVehicle", "i", playerid);
        return 1;
    }

    PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);
    new owner;
    cache_get_value_int(0, "owner", owner);

    SetPVarInt(playerid, #MDC_OWNER_ID, owner);

    new ownername[MAX_PLAYER_NAME];
    cache_get_value(0, "ownername", ownername);

    PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], ownername);

    for(new j = 0; j < 12; j++) PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][j]);
    for(new g = 0; g < 3; g++)  PlayerTextDrawHide(playerid, MDC_VEH_LIST_CLICK[playerid][g]);

    for(new i = 0; i < cache_num_rows(); i++)
    {
        PlayerTextDrawShow(playerid, MDC_VEH_LIST_CLICK[playerid][i]);

        cache_get_value_int(i, "id", MdcInfo[playerid][mdcList][i]);

        new model, plate[24], insurances[11], impounded[7], wanted, impound, insurance;

        cache_get_value(i, "plate", plate);
        cache_get_value_int(i, "model", model);
        cache_get_value_int(i, "wanted", wanted);
        cache_get_value_int(i, "insurances", insurance);
        cache_get_value_int(i, "impound", impound);

        new color1, color2;
        cache_get_value_int(0, "color1", color1);
        cache_get_value_int(0, "color2", color2);

        if (wanted) PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3+i*4]);
        else                                          PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][3+i*4]);

        switch(insurance)
        {
            case 0: format(insurances, sizeof(insurances), "~l~YOK");
            case 1: format(insurances, sizeof(insurances), "~g~SEVIYE 1");
            case 2: format(insurances, sizeof(insurances), "~g~SEVIYE 2");
            case 3: format(insurances, sizeof(insurances), "~g~SEVIYE 3");
        }

        switch(impound)
        {
            case 0: format(impounded, sizeof(impounded), "~l~HAYIR");
            case 1: format(impounded, sizeof(impounded), "~r~EVET");
        }

        static const str_size[] = "%s~n~%s~n~%s~n~%s~n~%s";
        new mes[sizeof(str_size) + 32 + MAX_PLAYER_NAME + 24 + 24 + 11 + 7];

        format(mes, sizeof(mes), str_size, VehicleNames[model-400], plate, ownername, insurances, impounded);
        PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][1+i*4], mes);
        PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][1+i*4]);
        PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][2+i*4]);

        PlayerTextDrawSetPreviewModel(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0+i*4], model);
        PlayerTextDrawSetPreviewVehCol(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0+i*4], color1, color2);
        PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][0+i*4]);
    }

    new max_page = floatround(MDC_VehicleCount(owner) / 3.0, floatround_ceil);

    if (max_page > 1)
    {
        for(new a = 0; a < 3; a++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][a]);

        new str[8];
        format(str, sizeof(str), "%i_/_%i", MdcInfo[playerid][mdcListPage]+1, max_page);
        PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], str);
        SetPVarInt(playerid, #MAX_MDC_PAGE, max_page);
    } else {
        for(new a = 0; a < 3; a++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][a]);
    }

    Update_MDC(playerid, PAGE_LOOKUP_VEHICLES_LIST);
    return 1;
}

this::MDCSearchVehicle(playerid)
{
	if (!cache_num_rows())
	{
		PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], "_________________");

		for(new a = 0; a < 2; a++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_AVATAR[playerid][a]);
		for(new b = 0; b < 12; b++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][b]);

		for(new c = 0; c < 3; c++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][c]);
        for(new g = 0; g < 3; g++)  PlayerTextDrawHide(playerid, MDC_VEH_LIST_CLICK[playerid][g]);
		for(new d = 0; d < 12; d++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][d]);

		MdcInfo[playerid][mdcPage] = PAGE_LOOKUP;
		return PlayerTextDrawShow(playerid, MDC_LOOKUP_ERROR[playerid]);
	}
    PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);

    new id;
    cache_get_value_int(0, "id", id);

    SetPVarInt(playerid, #MDC_ID, id);

	new ownername[MAX_PLAYER_NAME], model, plate[24], date[24], wanted, insurance, impound, insurances[8], impounded[4], count;

	cache_get_value(0, "ownername", ownername);
    cache_get_value(0, "plate", plate);
    cache_get_value_int(0, "model", model);
    cache_get_value(0, "date", date);

    cache_get_value_int(0, "wanted", wanted);
    cache_get_value_int(0, "insurances", insurance);
    cache_get_value_int(0, "impound", impound);

    if (wanted)
        PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLE[playerid][7], "~>~ ARAC ARANMA KALDIR, DURUM: ~r~ ARANIYOR");
    else
        PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLE[playerid][7], "~>~ ARACI BILDIR, DURUM: ~g~ ARANMIYOR");

    switch(insurance)
    {
        case 0: format(insurances, sizeof(insurances), "HAYIR");
        case 1: format(insurances, sizeof(insurances), "LEVEL 1");
        case 2: format(insurances, sizeof(insurances), "LEVEL 2");
        case 3: format(insurances, sizeof(insurances), "LEVEL 3");
    }

    switch(impound)
    {
        case 0: format(impounded, sizeof(impounded), "Yok");
        case 1: format(impounded, sizeof(impounded), "Hacizli");
    }


	static const str_size[] = "%s~n~%s~n~%s~n~%s~n~%s~n~%s";
	new mes[sizeof(str_size) + 32 + MAX_PLAYER_NAME + 24 + 24 + 8 + 4];

 	format(mes, sizeof(mes), str_size, VehicleNames[model-400], plate, ownername, insurances, impounded, date);
    PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLE[playerid][1], mes);

    new notes[5][128], string[640];
    format(string, sizeof(string), "NOTLAR:");

    for(new i = 0; i < 5; i++)
    {
        new notei[6];
        format(notei, sizeof(notei), "Note%i", i+1);
        cache_get_value_name(0, notei, notes[i]);

        if (!CompareStrings(notes[i], "None"))
        {
            format(string, sizeof(string), "%s~n~-_%s", TurkishCharFix(string), TextTab(notes[i], 60, 65, 0));
            count++;
        }
    }
    if (!count) format(string, sizeof(string), "NOT:~n~-_HENUZ NOT YOK.");
    PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLE[playerid][3], string);

    new color1, color2;
    cache_get_value_int(0, "color1", color1);
    cache_get_value_int(0, "color2", color2);

    PlayerTextDrawSetPreviewModel(playerid, MDC_LOOKUP_VEHICLE[playerid][0], model);
    PlayerTextDrawSetPreviewVehCol(playerid, MDC_LOOKUP_VEHICLE[playerid][0], color1, color2);
    PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLE[playerid][0]);

    format(string, sizeof(string), "]__CEZALARA_BAK__(ODENMEYENLER:__%i)", CountVehicleIDTickets(id));
    PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLE[playerid][4], string);

    SetPVarString(playerid, #MDC_VEHICLE_NUM, plate);
    PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], plate);

    MdcInfo[playerid][mdcBack] = PAGE_LOOKUP_VEHICLES_LIST;
    MdcInfo[playerid][mdcMenu] = PAGE_LOOKUP_VEHICLE;
    Update_MDC(playerid, PAGE_LOOKUP_VEHICLE);
	return 1;
}

this::MDC_Veh_Wanted(playerid) // ÎØÈÁÊÀ!
{
    new plates[24], query[156];
    GetPVarString(playerid, #MDC_VEHICLE_NUM, plates, 24);

    new veh_wanted, id, model;
    cache_get_value_int(0, "wanted", veh_wanted);
    cache_get_value_int(0, "id", id);
    cache_get_value_int(0, "model", model);

    if (veh_wanted)
    {
        mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `wanted` = '0' WHERE `plate` = '%e' AND `registered`=1", plates);
        mysql_tquery(dbHandle, query);
        PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLE[playerid][7], "~>~ ARACI BILDIR, DURUM: ~g~ ARANMIYOR");

        SendWarningMessage(playerid, "Araç artýk aranmýyor.");

        for (new i = 1, j = GetVehiclePoolSize(); i <= j; i++)
        {
            if (VehicleInfo[i][carID] == id) VehicleInfo[i][carWanted] = 0;
        }
    }
    else
    {
        mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `wanted` = '1' WHERE `plate` = '%e' AND `registered`=1", plates);
        mysql_tquery(dbHandle, query);
        PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLE[playerid][7], "~>~ ARAC ARANMA KALDIR, DURUM: ~r~ ARANIYOR");

        SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "[ARANIYOR] Araç: %s [%s] aranan, Memur: %s.", VehicleNames[model-400], plates, GetNameEx(playerid));
        SendWarningMessage(playerid, "Araç baþarýlý bir þekilde arananlar listesine alýndý.");


        for (new i = 1, j = GetVehiclePoolSize(); i <= j; i++)
        {
            if (VehicleInfo[i][carID] == id) VehicleInfo[i][carWanted] = 1;
        }
    }

    return 1;
}


this::MDC_NEW_NOTE(playerid)
{
    new
        plates[24];

    GetPVarString(playerid, #MDC_VEHICLE_NUM, plates, 24);

    SetPVarInt(playerid, #MDC_FREE_NOTE, -1);

    new notesadd[5][128];

    for(new i = 0; i < 5; i++)
    {
        new notei[6];
        format(notei, sizeof(notei), "Note%i", i+1);
        cache_get_value_name(0, notei, notesadd[i]);

        if (CompareStrings(notesadd[i], "None"))
        {
            SetPVarInt(playerid, #MDC_FREE_NOTE, i+1);
            break;
        }
    }

    if (GetPVarInt(playerid, #MDC_FREE_NOTE) == -1)
        Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{8D8DFF}MDC  - NOT EKLE", "{B4B5B7}ARAÇ KAYDI EKLEME\n\nDÝKKAT!\nTüm notlar alýnýr!", "X", "");
    else
        Dialog_Show(playerid, MDC_Add_Note, DIALOG_STYLE_INPUT, "{8D8DFF}MDC  - ARAÇ KAYDI EKLE", "{B4B5B7}ARAÇ KAYDI EKLEME\n\nNot Giriniz:", "Ekle", "Geri Dön");

    return 1;
}

this::MDC_DELETE_NOTE(playerid)
{
    new
        eplates[24];

    GetPVarString(playerid, #MDC_VEHICLE_NUM, eplates, 24);

    SetPVarInt(playerid, #MDC_FREE_NOTE, -1);

    new notes[5][128], string[35*5+10];
    format(string, sizeof(string), "#\tRecord");

    for(new i = 0; i < 5; i++)
    {
        new notei[6];
        format(notei, sizeof(notei), "Note%i", i+1);
        cache_get_value_name(0, notei, notes[i]);

        if (CompareStrings(notes[i], "None"))
            format(notes[i], 128, "Empty");
        else
            SetPVarInt(playerid, #MDC_FREE_NOTE, 1);

        format(string, sizeof(string), "%s\n%i.\t%0.30s", string, i+1, notes[i]);
    }

    if (GetPVarInt(playerid, #MDC_FREE_NOTE) == -1) Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{8D8DFF}MDC  -  Araç kaydýný sil", "{B4B5B7}ARAÇ HAKKINDA YAPILAN ÝÞLEMLER GERÝ ALINAMAZ\n\nDÝKKAT!\nBu araca bir not eklenmemiþ.", "X", "");
    else Dialog_Show(playerid, MDC_Del_Note, DIALOG_STYLE_TABLIST_HEADERS, "{8D8DFF}MDC  - Araç kaydýný sil", string, "Sil", "Ýptal");

    return 1;
}

/*SHOW_MDC_LIST(playerid)
{
    for(new i = 0; i < 16; i++)
        PlayerTextDrawSetString(playerid, MDC_LIST[playerid][i], MdcInfo[playerid][mdcList][i]);

    return 1;
}*/

this::MDC_ShowCCTVMenu(playerid, back)
{
	new
		string[256]
	;

    PlayerTextDrawSetString(playerid, MDC_ERROR_CALLS[playerid], "AKTIF KAMERALARI LISTELE:");

    for(new j = 0; j < 16; j++)
    {
        PlayerTextDrawHide(playerid, MDC_LIST[playerid][j]);
        MdcInfo[playerid][mdcList][j] = -1;
    }

    if (cache_num_rows())
    {
		if (!back)
		{
            for(new i = 0; i < cache_num_rows(); i++)
            {
                new
                    info[32],
                    id,
                    breakinfo
                ;

                cache_get_value(i, "info", info);
                cache_get_value_int(i, "break", breakinfo);
                cache_get_value_int(i, "id", id);
                cache_get_value_int(i, "id", MdcInfo[playerid][mdcList][i]);

                if (breakinfo) format(string, sizeof(string), "~r~CEVRIMDISI");
                else                                         format(string, sizeof(string), "~g~CEVRIMICI_");

                new index[5];

                if (id > 99) format(index, sizeof(index), "0%i", id);
                else if (id > 9) format(index, sizeof(index), "00%i", id);
                else format(index, sizeof(index), "000%i", id);

                format(string, sizeof(string), "__DURUM:_%s~l~_____________ID:_%s______________%s", string, index, info);

                PlayerTextDrawSetString(playerid, MDC_LIST[playerid][i], string);

                PlayerTextDrawColor(playerid, MDC_LIST[playerid][i], 0x494949FF);
                PlayerTextDrawBoxColor(playerid, MDC_LIST[playerid][i], 0xa7a7a7FF);

                PlayerTextDrawShow(playerid, MDC_LIST[playerid][i]);
            }
        }
		else
		{
            for(new i = cache_num_rows()-1; i >= 0; i--)
            {
                new
                    info[32],
                    breakinfo
                ;

                cache_get_value(i, "info", info);
                cache_get_value_int(i, "break", breakinfo);
                cache_get_value_int(i, "id", MdcInfo[playerid][mdcList][i]);

                if (breakinfo) format(string, sizeof(string), "~r~CEVRIMDISI");
                else                                         format(string, sizeof(string), "~g~CEVRIMICI_");

                new index[5];
                if (i > 99) format(index, sizeof(index), "0%i", i);
                else if (i > 9) format(index, sizeof(index), "00%i", i);
                else format(index, sizeof(index), "000%i", i);

                format(string, sizeof(string), "__DURUM:_%s~l~_____________ID:_%s______________%s", string, index, info);

                PlayerTextDrawSetString(playerid, MDC_LIST[playerid][i], string);
                PlayerTextDrawShow(playerid, MDC_LIST[playerid][i]);
            }
		}
    }
    else return PlayerTextDrawSetString(playerid, MDC_ERROR_CALLS[playerid], "]__HATA: BIRSEY BULUNAMADI!");


    Update_MDC(playerid, PAGE_CCTV);

    new strpage[7];
    format(strpage, sizeof(strpage), "%i_/_%i", MdcInfo[playerid][mdcListPage]+1, GetPVarInt(playerid, #MAX_MDC_PAGE));
    PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], strpage);

    if (GetPVarInt(playerid, #MAX_MDC_PAGE) == 1) for(new k = 0; k < 3; k++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][k]);
    else for(new k = 0; k < 3; k++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][k]);

	return 1;
}

MDC_ShowRosterMenu(playerid)
{
    PlayerTextDrawSetString(playerid, MDC_TD_LEFT_PANEL[playerid][0], "AKTIF BIRIMLER LISTESI:");
    PlayerTextDrawSetString(playerid, MDC_TD_LEFT_PANEL[playerid][1], "CALLSIGN DEGISTIR");

    new string[128], count, pageCount, f = GetPatrolID(playerid);

    for(new j = 0; j < 18; j++) PlayerTextDrawHide(playerid, MDC_TD_MENU[playerid][j]);
    for(new j = 0; j < 18; j++) MdcInfo[playerid][mdcList][j] = 0;

    for(new i = 0; i != MAX_PATROL; i++)
    {
        if (!PatrolInfo[f][i][patrulExists])                    continue;
        if (pageCount++ < 18*(MdcInfo[playerid][mdcListPage]))  continue;

        format(string, sizeof(string), "__%s:__", PatrolInfo[f][i][patrulName]);

        if (IsPlayerLogged(PatrolInfo[f][i][patrulOfficer][0]))
        {
            format(string, sizeof(string), "%s%s", string, GetOfficerName(PatrolInfo[f][i][patrulOfficer][0]));
        }
        if (IsPlayerLogged(PatrolInfo[f][i][patrulOfficer][1]))
        {
            if (IsPlayerLogged(PatrolInfo[f][i][patrulOfficer][1])) {
                format(string, sizeof(string), "%s__,__%s", string, GetOfficerName(PatrolInfo[f][i][patrulOfficer][1]));
            } else {
                format(string, sizeof(string), "%s%s", string, GetOfficerName(PatrolInfo[f][i][patrulOfficer][1]));
            }
        }

        PlayerTextDrawSetString(playerid, MDC_TD_MENU[playerid][count], string);
        PlayerTextDrawShow(playerid, MDC_TD_MENU[playerid][count]);

        MdcInfo[playerid][mdcList][count] = i;

        count++;
        if (count == 18*(MdcInfo[playerid][mdcListPage]+1)) break;
    }

    if (!count)
    {
        PlayerTextDrawSetString(playerid, MDC_TD_MENU[playerid][0], "_SU ANDA AKTIF DEVRIYE BIRIMI YOK..");
        PlayerTextDrawShow(playerid, MDC_TD_MENU[playerid][0]);
    }

    if (pTemp[playerid][pPatrol])
    {
        new callsignstr[32];
        format(callsignstr, sizeof(callsignstr), "_%s", PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName]);
        PlayerTextDrawSetString(playerid, MDC_TD_LEFT_PANEL[playerid][2], callsignstr);
    }
    else PlayerTextDrawSetString(playerid, MDC_TD_LEFT_PANEL[playerid][2], "BIRIMINIZ BULUNMUYOR");

    new strpage[7];
    format(strpage, sizeof(strpage), "%i_/_%i", MdcInfo[playerid][mdcListPage]+1, GetPVarInt(playerid, #MAX_MDC_PAGE));
    PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], strpage);

    if (GetPVarInt(playerid, #MAX_MDC_PAGE) < 2) {
        for(new k = 0; k < 3; k++)  {
            PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][k]);
        }
    } else {
        for(new k = 0; k < 3; k++)  {
            PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][k]);
        }
    }
    return 1;
}

MDC_ShowMembersMenu(playerid)
{
    PlayerTextDrawSetString(playerid, MDC_TD_LEFT_PANEL[playerid][0], "TUM UYELERIN LISTESI:");
    PlayerTextDrawSetString(playerid, MDC_TD_LEFT_PANEL[playerid][1], "DURUM DEGISTIR");

    new string[128], count; //, f = GetPatrolID(playerid);

    for(new j = 0; j < 18; j++) PlayerTextDrawHide(playerid, MDC_TD_MENU[playerid][j]);
    for(new j = 0; j < 18; j++) MdcInfo[playerid][mdcList][j] = 0;

    new status[22], listStatus[3][20], mainstatus[128], pageCount;
    switch(pTemp[playerid][tempStatus])
    {
        case 0: format(status, sizeof(status), "__10-7 ~r~(GOREV DISI)");
        case 1: format(status, sizeof(status), "__10-8 ~g~(GOREVDE)");
        case 2: format(status, sizeof(status), "__CODE 7 ~y~(MOLADA)");
    }
    format(mainstatus, sizeof(mainstatus), "%s~n~~n~~r~KODLAR:~l~~n~~>~ 10-8 (GOREVDE)~n~~>~ 10-7 (GOREV DISI)~n~~>~ CODE 7 (MOLADA)", status);
    PlayerTextDrawSetString(playerid, MDC_TD_LEFT_PANEL[playerid][2], mainstatus);

    format(listStatus[0], 20, "~r~GOREV DISI");
    format(listStatus[1], 20, "~g~GOREVDE");
    format(listStatus[2], 20, "~y~MOLADA");

    foreach(new i : Player) {
        if (IsPlayerLogged(i) == 0 || PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction])	continue;
        if (pageCount++ < 18*(MdcInfo[playerid][mdcListPage]))  continue;

        format(string, sizeof(string), "%i_._~l~[%s~l~]_%s_~b~%s", count+1, listStatus[pTemp[i][tempStatus]], GetRankName(i), GetOfficerName(i));

        PlayerTextDrawSetString(playerid, MDC_TD_MENU[playerid][count], TurkishCharFix(string));
        PlayerTextDrawShow(playerid, MDC_TD_MENU[playerid][count]);

        MdcInfo[playerid][mdcList][count] = i;

        count++;
        if (count == 18*(MdcInfo[playerid][mdcListPage]+1)) break;
    }

    if (!count)
    {
        PlayerTextDrawSetString(playerid, MDC_TD_MENU[playerid][0], "_HATA OLUSTU..");
        PlayerTextDrawShow(playerid, MDC_TD_MENU[playerid][0]);
    }

    new strpage[7];
    format(strpage, sizeof(strpage), "%i_/_%i", MdcInfo[playerid][mdcListPage]+1, GetPVarInt(playerid, #MAX_MDC_PAGE));
    PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], strpage);

    if (GetPVarInt(playerid, #MAX_MDC_PAGE) < 2) {
        for(new k = 0; k < 3; k++)  {
            PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][k]);
        }
    } else {
        for(new k = 0; k < 3; k++)  {
            PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][k]);
        }
    }
    return 1;
}

this::MDC_ShowMenu(playerid, back)
{
	new
		string[256]
	;

    for(new j = 0; j < 16; j++)
    {
        PlayerTextDrawHide(playerid, MDC_LIST[playerid][j]);
        MdcInfo[playerid][mdcList][j] = -1;
    }

    if (cache_num_rows())
    {
		if (!back)
		{
            for(new i = 0; i < cache_num_rows(); i++)
            {
                new
                    date[24],
                    paid,
                    arrest,
                    reason[41]
                ;
                if (GetPVarInt(playerid, #MDC_FINE))
                    cache_get_value(i, "reason", reason);
                else
                    cache_get_value(i, "charge", reason);

                cache_get_value(i, "date", date);
                cache_get_value_int(i, "paid", paid);
                cache_get_value_int(i, "arrest", arrest);

                cache_get_value_int(i, "id", MdcInfo[playerid][mdcList][i]);

                if (strlen(reason) > 40)
                    format(string, sizeof(string), "%s_-_%.40s..", date, reason);
                else
                    format(string, sizeof(string), "%s_-_%.40s", date, reason);

                if (GetPVarInt(playerid, #MDC_FINE))
                {
                    if (!paid)
                    {
                        PlayerTextDrawColor(playerid, MDC_LIST[playerid][i], -1); // Íå îïëà÷åííûå
                        PlayerTextDrawBoxColor(playerid, MDC_LIST[playerid][i], COLOR_LIGHTRED);
                    }
                    else
                    {
                        PlayerTextDrawColor(playerid, MDC_LIST[playerid][i], 255); // Îïëà÷åííûå
                        PlayerTextDrawBoxColor(playerid, MDC_LIST[playerid][i], -1);
                    }
                }
                else
                {
                    if (arrest)
                    {
                        PlayerTextDrawColor(playerid, MDC_LIST[playerid][i], -1); // Àðåñòîâàí
                        PlayerTextDrawBoxColor(playerid, MDC_LIST[playerid][i], COLOR_LIGHTRED);

                        format(string, sizeof(string), "%s_-_El Konulmus.", date);
                    }
                    else
                    {
                        PlayerTextDrawColor(playerid, MDC_LIST[playerid][i], 255); // Îáâèíåíèå
                        PlayerTextDrawBoxColor(playerid, MDC_LIST[playerid][i], -1);
                    }
                }

                PlayerTextDrawSetString(playerid, MDC_LIST[playerid][i], string);
                PlayerTextDrawShow(playerid, MDC_LIST[playerid][i]);

            }
        }
		else
		{
            for(new i = cache_num_rows()-1; i >= 0; i--)
            {
            new
                date[24],
                paid,
                arrest,
                reason[41]
            ;

            if (GetPVarInt(playerid, #MDC_FINE))
                cache_get_value(i, "reason", reason);
            else
                cache_get_value(i, "charge", reason);

            cache_get_value(i, "date", date);
            cache_get_value_int(i, "paid", paid);
            cache_get_value_int(i, "arrest", arrest);

            cache_get_value_int(i, "id", MdcInfo[playerid][mdcList][cache_num_rows()-1-i]);

            if (strlen(reason) > 40)
                format(string, sizeof(string), "%s_-_%.40s..", date, reason);
            else
                format(string, sizeof(string), "%s_-_%.40s", date, reason);

            if (GetPVarInt(playerid, #MDC_FINE))
            {
                if (!paid)
                {
                    PlayerTextDrawColor(playerid, MDC_LIST[playerid][i], -1); // Íå îïëà÷åííûå
                    PlayerTextDrawBoxColor(playerid, MDC_LIST[playerid][i], COLOR_LIGHTRED);
                    }
                else
                {
                    PlayerTextDrawColor(playerid, MDC_LIST[playerid][i], 255); // Îïëà÷åííûå
                    PlayerTextDrawBoxColor(playerid, MDC_LIST[playerid][i], -1);
                }
            }
            else
            {
                if (arrest)
                {
                    PlayerTextDrawColor(playerid, MDC_LIST[playerid][i], -1); // Àðåñòîâàí
                    PlayerTextDrawBoxColor(playerid, MDC_LIST[playerid][i], COLOR_LIGHTRED);

                    format(string, sizeof(string), "%s_-_El Konulmus", date);
                }
                else
                {
                    PlayerTextDrawColor(playerid, MDC_LIST[playerid][i], 255); // Îáâèíåíèå
                    PlayerTextDrawBoxColor(playerid, MDC_LIST[playerid][i], -1);
                }
            }

            PlayerTextDrawSetString(playerid, MDC_LIST[playerid][i], string);
            PlayerTextDrawShow(playerid, MDC_LIST[playerid][i]);
            }
		}
    }
    // DeletePVar(playerid, #MDC_FINE);
    else return SendWarningMessage(playerid, "Boþ!");

    if (MdcInfo[playerid][mdcMenu] == PAGE_LOOKUP_PERSON)
    {
        //new Float:countticket = MDC_CountPlayerTickets(GetPVarInt(playerid, #MDC_ID));
        //countticket = countticket/16;

        MdcInfo[playerid][mdcBack] = PAGE_LOOKUP_PERSON;
        //SetPVarInt(playerid, #MAX_MDC_PAGE, floatround(countticket, floatround_ceil));
    }
    else if (MdcInfo[playerid][mdcMenu] == PAGE_LOOKUP_VEHICLE)
    {
        //new Float:countticket = MDC_CountVehicleTickets(GetPVarInt(playerid, #MDC_ID));
        //countticket = countticket/16;

        MdcInfo[playerid][mdcBack] = PAGE_LOOKUP_VEHICLE;
        //SetPVarInt(playerid, #MAX_MDC_PAGE, floatround(countticket, floatround_ceil));
    }

    Update_MDC(playerid, PAGE_MENU);

    new strpage[7];
    format(strpage, sizeof(strpage), "%i_/_%i", MdcInfo[playerid][mdcListPage]+1, GetPVarInt(playerid, #MAX_MDC_PAGE));
    PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], strpage);

    if (GetPVarInt(playerid, #MAX_MDC_PAGE) == 1) for(new k = 0; k < 3; k++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][k]);
    else for(new k = 0; k < 3; k++)  PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][k]);

	return 1;
}

this::MDC_ShowInfo(playerid)
{
    if (!cache_num_rows())
    {
        PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], "_________________");

		for(new a = 0; a < 2; a++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_AVATAR[playerid][a]);
		for(new b = 0; b < 12; b++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][b]);

		for(new c = 0; c < 3; c++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][c]);
        for(new g = 0; g < 3; g++)  PlayerTextDrawHide(playerid, MDC_VEH_LIST_CLICK[playerid][g]);
		for(new d = 0; d < 12; d++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][d]);

		MdcInfo[playerid][mdcPage] = PAGE_LOOKUP;
		return PlayerTextDrawShow(playerid, MDC_LOOKUP_ERROR[playerid]);
    }

    new
        reason[128],
		mes[256],
        date[24],
        status[20],
        vehiclemodel,
        id,
        paid,
        arrest,
        faction,
        amount,

        ownername[MAX_PLAYER_NAME],
        officername[MAX_PLAYER_NAME]
	;

    cache_get_value_int(0, "vehiclemodel", vehiclemodel);

    if (MdcInfo[playerid][mdcMenu] == PAGE_LOOKUP_PERSON)
	    cache_get_value(0, "ownername", ownername, 24);
    else
        format(ownername, sizeof(ownername), "%s", VehicleNames[vehiclemodel-400]);

    cache_get_value(0, "officer", officername);
    cache_get_value(0, "date", date);
    cache_get_value_int(0, "paid", paid);
    cache_get_value_int(0, "arrest", arrest);
    cache_get_value_int(0, "faction", faction);
    cache_get_value_int(0, "amount", amount);
    cache_get_value_int(0, "id", id);

    if (GetPVarInt(playerid, #MDC_FINE))
    {
        cache_get_value(0, "reason", reason);

        if (!paid)
            format(status, sizeof(status), "~r~Odenmemis");
        else
            format(status, sizeof(status), "~g~Odenmis");

        format(mes, sizeof(mes), "ID:~n~Isim:~n~Memur:~n~Ucret:~n~Tarih:~n~Durum:~n~~n~Aciklama:");
        PlayerTextDrawSetString(playerid, MDC_LIST_INFO[playerid][0], mes);

        format(mes, sizeof(mes), "#%i~n~%s~n~%s [%s]~n~$%i~n~%s~n~%s",
            1012441+id,
            ownername,
            officername,
            GetInitials(Factions[faction][fName]),
            amount,
            date,
            status
        );
        PlayerTextDrawSetString(playerid, MDC_LIST_INFO[playerid][1], mes);
    }
    else
    {
        cache_get_value(0, "charge", reason);

        if (!arrest)
            format(status, sizeof(status), "Suclama");
        else
            format(status, sizeof(status), "~r~Tutuklandi");

        format(mes, sizeof(mes), "ID:~n~Isim:~n~Memur:~n~_~n~Tarih:~n~Tip:~n~~n~Suclar:");
        PlayerTextDrawSetString(playerid, MDC_LIST_INFO[playerid][0], mes);

        format(mes, sizeof(mes), "#%i~n~%s~n~%s [%s]~n~_~n~%s~n~%s",
            912441+id,
            ownername,
            officername,
            GetInitials(Factions[faction][fName]),
            //cache_get_value_int(0, "amount"),
            date,
            status
        );
        PlayerTextDrawSetString(playerid, MDC_LIST_INFO[playerid][1], TurkishCharFix(mes));
    }


    format(reason, sizeof(reason), "- %s", TextTab(reason, 55, 60, 0));
    PlayerTextDrawSetString(playerid, MDC_LIST_INFO[playerid][2], reason);

    MdcInfo[playerid][mdcBack] = PAGE_MENU;
    Update_MDC(playerid, PAGE_INFO);

	return 1;
}

CountPlayerRecords(id)
{
	new
		query[188]
	;

 	mysql_format(dbHandle, query, sizeof(query), "SELECT COUNT(id) AS total FROM `criminalrecords` WHERE `userid` = %i", PlayerInfo[id][pID]);
	new Cache:cache = mysql_query(dbHandle, query),
		count;

    cache_get_value_int(0, "total", count);
	cache_delete(cache);
    cache = MYSQL_INVALID_CACHE;
	return count;
}

MDC_VehicleCount(ownerid)
{
	new
		query[256]
	;

 	mysql_format(dbHandle, query, sizeof(query), "SELECT COUNT(id) AS total FROM `cars` WHERE `owner` = %i AND `registered`=1", PlayerInfo[ownerid][pID]);
	new Cache:cache = mysql_query(dbHandle, query),
		count;

    cache_get_value_int(0, "total", count);
	cache_delete(cache);
    cache = MYSQL_INVALID_CACHE;
	return count;
}

this::MDC_MAP(playerid)
{
    if (!cache_num_rows())
        return 1;
    new
        Float:map_kY = -0.04795376,
        Float:map_kX = 0.0469,

        Float:map_sX = 333.999420,
        Float:map_sY = 295.181152,

        Float:corX, Float:corY,

        count = 0,

        strhouse[80]
    ;

    //for(new j = 1; j < 6; j++) PlayerTextDrawHide(playerid, MDC_OTHER_ADDRESS[playerid][j]);

    new id;
    cache_get_value_int(0, "id", id);

    for(new i; i < MAX_HOUSES; i++)
	{
	    if (!HouseInfo[i][hID] || HouseInfo[i][hOwnerID] != id) continue;

        if (count == 0)
        {
            format(strhouse, sizeof(strhouse), "%s~n~San Andreas", (!HouseInfo[i][hApart])?(GetHouseZone(i, 1)):(GetApartmentZone(HouseInfo[i][hApart], 1)));
            PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][4], strhouse);

            if (HouseInfo[i][hPosX] > 0)
            {
                PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][0], "samaps:gtasamapbit2");
                PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][1], "samaps:gtasamapbit4");
                map_kX = 0.0469;
                map_sX = 333.999420;

                corX = HouseInfo[i][hPosX] * map_kX + map_sX;
                corY = HouseInfo[i][hPosY] * map_kY + map_sY;
            }
            else
            {
                PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][0], "samaps:gtasamapbit1");
                PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][1], "samaps:gtasamapbit3");
                map_kX = -0.0469;
                map_sX = 480.066314;

                corX = map_sX - HouseInfo[i][hPosX] * map_kX;
                corY = HouseInfo[i][hPosY] * map_kY + map_sY;
            }

            MDC_ADDRESS[playerid][2] = CreatePlayerTextDraw(playerid, corX, corY, "hud:radar_propertyG");
            PlayerTextDrawTextSize(playerid, MDC_ADDRESS[playerid][2], 5.000000, 6.000000);
            PlayerTextDrawFont(playerid, MDC_ADDRESS[playerid][2], 4);
            PlayerTextDrawShow(playerid, MDC_ADDRESS[playerid][2]);
        }
        else
        {
            format(strhouse, sizeof(strhouse), "- %.35s", (!HouseInfo[i][hApart])?(GetHouseZone(i, 2)):(GetApartmentZone(HouseInfo[i][hApart], 2)));
            PlayerTextDrawSetString(playerid, MDC_OTHER_ADDRESS[playerid][count], strhouse);
            PlayerTextDrawShow(playerid, MDC_OTHER_ADDRESS[playerid][count]);
        }

        MdcInfo[playerid][mdcList][count] = i;
        count++;
	}
    if (count > 1) PlayerTextDrawShow(playerid, MDC_OTHER_ADDRESS[playerid][0]);

    MdcInfo[playerid][mdcBack] = PAGE_LOOKUP_PERSON;
    Update_MDC(playerid, PAGE_MAP);
    return 1;
}

MEMBERS_MAP(playerid, userid)
{
    if (!IsPlayerLogged(userid))    return MDC_PAGE(playerid, PAGE_MAIN);

    new
        Float:map_kY = -0.04795376,
        Float:map_kX = 0.0469,

        Float:map_sX = 333.999420,
        Float:map_sY = 295.181152,

        Float:corX, Float:corY,

        Float:posX,
        Float:posY,
        Float:posZ,

        string[64]
    ;

    GetPlayerPos(userid, posX, posY, posZ);

    if (posX > 0)
    {
        PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][0], "samaps:GTASAMap2");
        PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][1], "samaps:GTASAMap4");
        map_kX = 0.0469;
        map_sX = 333.999420;

        corX = posX * map_kX + map_sX;
        corY = posY * map_kY + map_sY;
    }
    else
    {
        PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][0], "samaps:GTASAMap1");
        PlayerTextDrawSetString(playerid, MDC_ADDRESS[playerid][1], "samaps:GTASAMap3");
        map_kX = -0.0469;
        map_sX = 480.066314;

        corX = map_sX - posX * map_kX;
        corY = posY * map_kY + map_sY;
    }

    MDC_ADDRESS[playerid][2] = CreatePlayerTextDraw(playerid, corX, corY, "hud:radar_gangN");
    PlayerTextDrawTextSize(playerid, MDC_ADDRESS[playerid][2], 7.000000, 8.000000);
    PlayerTextDrawFont(playerid, MDC_ADDRESS[playerid][2], 4);
    PlayerTextDrawShow(playerid, MDC_ADDRESS[playerid][2]);

    PlayerTextDrawSetPreviewModel(playerid, MDC_LOOKUP_AVATAR[playerid][1], GetPlayerSkin(userid));
    PlayerTextDrawShow(playerid, MDC_LOOKUP_AVATAR[playerid][1]);

    PlayerTextDrawShow(playerid, MDC_LOOKUP_PERSON[playerid][0]);

    format(string, sizeof(string), "%s__~b~__%s", GetOfficerName(userid), GetRankName(userid));
    format(string, sizeof(string), "%s___]_%i", GetOfficerName(userid), PlayerInfo[userid][pRank]);
    PlayerTextDrawSetString(playerid, MDC_LOOKUP_PERSON[playerid][3], TurkishCharFix(string));
    PlayerTextDrawUseBox(playerid, MDC_LOOKUP_PERSON[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, MDC_LOOKUP_PERSON[playerid][3], false);
    PlayerTextDrawShow(playerid, MDC_LOOKUP_PERSON[playerid][3]);

    PlayerTextDrawSetString(playerid, MDC_LOOKUP_PERSON[playerid][4], "~>~ BODYCAM KONTROLU");
    PlayerTextDrawShow(playerid, MDC_LOOKUP_PERSON[playerid][4]);

    MdcInfo[playerid][mdcBack] = PAGE_MEMBERS;
    Update_MDC(playerid, PAGE_MEMBERS_MAP);

    SetPVarInt(playerid, #BODYCAM, userid);
    return 1;
}

this::MDC_LICENSE(playerid)
{
    if (!cache_num_rows())
        return 1;

    new
        string[128]
    ;

    new carlic, weplic, flylic, taxilic, warns;
    cache_get_value_int(0, "carlic", carlic);
    cache_get_value_int(0, "weplic", weplic);
    cache_get_value_int(0, "flylic", flylic);
    cache_get_value_int(0, "taxilic", taxilic);
    cache_get_value_int(0, "drivewarns", warns);

    switch(carlic)
	{
        case 0: PlayerTextDrawSetString(playerid, MDC_LIC[playerid][4], "~r~HAYIR~n~-");
	    case 1:
        {
            format(string, sizeof(string), "~g~AKTIF~n~~r~%i", warns);
            PlayerTextDrawSetString(playerid, MDC_LIC[playerid][4], string);
        }
	}

	switch(weplic)
	{
        case 0: PlayerTextDrawSetString(playerid, MDC_LIC[playerid][11], "~r~-~n~-~n~-~n~-");
	    case 1:
        {
            new name[MAX_PLAYER_NAME+1], officer[MAX_PLAYER_NAME+1], data[24], price, drwarns;

            cache_get_value(0, "name", name);
            strreplace(name, '_', ' ');
            cache_get_value(0, "wep_officer", officer);
            cache_get_value(0, "wep_data", data);
            cache_get_value_int(0, "wep_price", price);
            cache_get_value_int(0, "wepwarns", drwarns);

            format(string, sizeof(string), "%i~n~%s~n~%s~n~~g~$%i", drwarns, name, data, price);
            PlayerTextDrawSetString(playerid, MDC_LIC[playerid][11], string);
        }
	}
	switch(flylic)
	{
	    case 0: PlayerTextDrawSetString(playerid, MDC_LIC[playerid][18], "~r~HAYIR");
	    case 1: PlayerTextDrawSetString(playerid, MDC_LIC[playerid][18], "~g~AKTIF");
        case 2: PlayerTextDrawSetString(playerid, MDC_LIC[playerid][18], "~l~KARALISTE");
	}
	switch(taxilic)
	{
	    case 0: PlayerTextDrawSetString(playerid, MDC_LIC[playerid][25], "~r~HAYIR");
	    case 1: PlayerTextDrawSetString(playerid, MDC_LIC[playerid][25], "~g~AKTIF");
        case 2: PlayerTextDrawSetString(playerid, MDC_LIC[playerid][25], "~l~KARALISTE");
	}

    MdcInfo[playerid][mdcBack] = PAGE_LOOKUP_PERSON;
    Update_MDC(playerid, PAGE_LIC);

    return 1;
}

this::MDC_LIC_LOADING(playerid, response)
{
    if (!response)    return 1;

    new query[255];
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `id` = %i LIMIT 1", GetPVarInt(playerid, #MDC_ID));
    mysql_tquery(dbHandle, query, "MDC_LIC_DO", "ii", playerid, GetPVarInt(playerid, #MDC_LIC));

    DeletePVar(playerid, #MDC_LIC);
    return 1;
}

this::MDC_LIC_DO(playerid, func)
{
    if (!cache_num_rows())
        return 1;

    new
        userid,
        playeronline,
        id,
        carlic,
        weplic,
        flylic,
        taxilic,
        drivewarns,
        name[MAX_PLAYER_NAME+1]
    ;

    if ((userid = GetIDByID(GetPVarInt(playerid, #MDC_ID))) != INVALID_PLAYER_ID)
        playeronline = 1;
    else playeronline = 0;

    cache_get_value(0, "name", name);
    cache_get_value_int(0, "id", id);
    cache_get_value_int(0, "carlic", carlic);
    cache_get_value_int(0, "weplic", weplic);
    cache_get_value_int(0, "flylic", flylic);
    cache_get_value_int(0, "taxilic", taxilic);
    cache_get_value_int(0, "drivewarns", drivewarns);

    switch(func)
    {
        case 0: //ÈÇÚßÒÜ ÏÐÀÂÀ
        {
            if (!carlic)   return SendErrorMessage(playerid, " %s adlý kiþinin ehliyeti bulunmuyor.", name);

            if (playeronline)
            {
                SendSpecialMessage(userid, "%s %s adlý kiþi ehliyetini iptal etti.", GetRankName(playerid), GetNameEx(playerid));
                PlayerInfo[userid][pCarLic] = 0;
                PlayerInfo[userid][pDriveWarns] = 0;
            }

            new query[156];
            mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `carlic`='0',`drivewarns`='0' WHERE `id` = %i", GetPVarInt(playerid, #MDC_ID));
            mysql_tquery(dbHandle, query);

            SendSpecialMessage(playerid, "%s adlý kiþinin ehliyetini iptal ettiniz.", name);
            PlayerTextDrawSetString(playerid, MDC_LIC[playerid][4], "~r~HAYIR~n~-");

            return 1;
        }

        case 1: //ÈÇÚßÒÜ ÎÐÓÆ
        {
            if (!weplic)   return SendErrorMessage(playerid, " %s adlý kiþinin silah ruhsatý bulunmuyor.", name);

            if (playeronline)
            {
                SendSpecialMessage(userid, "%s %s adlý kiþi silah ruhsatýný iptal etti.", GetRankName(playerid), GetNameEx(playerid));
                PlayerInfo[userid][pWepLic] = 0;
                PlayerInfo[userid][pWepWarns] = 0;
                PlayerInfo[userid][pWepCount] = 0;
            }
            new query[156];
            mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `weplic`='0',`wepwarns`='0',`wep_officer`='-',`wep_data`='-',`wep_price`='0',`wep_count`='0' WHERE `id` = %i", GetPVarInt(playerid, #MDC_ID));
            mysql_tquery(dbHandle, query);

            SendSpecialMessage(playerid, "%s adlý kiþinin silah ruhsatýný iptal ettiniz.", name);
            PlayerTextDrawSetString(playerid, MDC_LIC[playerid][11], "~r~-~n~-~n~-~n~-");

            return 1;
        }

        case 2: //ÈÇÚßÒÜ ÏÎË¨ÒÛ
        {
            if (!flylic)       return SendErrorMessage(playerid, " %s adlý kiþinin pilot lisansý bulunmuyor.", name);
            if (flylic == 2)   return SendErrorMessage(playerid, "Pilot lisansý iptal edilemiyor çünkü %s adlý kiþi karalistede.", name);

            if (playeronline)
            {
                SendSpecialMessage(userid, "%s %s pilot lisansýnýzý geri aldýnýz.", GetRankName(playerid), GetNameEx(playerid));
                PlayerInfo[userid][pFlyLic] = 0;
            }

            SQL_SetInteger("users", "flylic", 0, id);

            SendSpecialMessage(playerid, "%s adlý kiþinin pilot lisansýný iptal ettiniz.", name);
            PlayerTextDrawSetString(playerid, MDC_LIC[playerid][18], "~r~HAYIR");

            return 1;
        }

        case 3: //ÈÇÚßÒÜ ÒÀÊÑÈ
        {
            if (!taxilic)       return SendErrorMessage(playerid, "%s adlý kiþinin taksi sürücü belgesi bulunmuyor.", name);
            if (taxilic == 2)   return SendErrorMessage(playerid, "Taksi þoförünün ehliyeti iptal edilemiyor çünkü %s adlý kiþi karalistede.", name);

            if (playeronline)
            {
                SendSpecialMessage(userid, "%s %s adlý kiþi taksi sürücü belgenizi geri verdi.", GetRankName(playerid), GetNameEx(playerid));
                PlayerInfo[userid][pTaxiLic] = 0;
            }

            SQL_SetInteger("users", "taxilic", 0, id);

            SendSpecialMessage(playerid,"Taksi sürücü belgenizi geri aldýnýz %s.", name);
            PlayerTextDrawSetString(playerid, MDC_LIC[playerid][25], "~r~HAYIR");

            return 1;
        }

        case 4: //ÏÐÅÄÓÏÐÅÆÄÅÍÈÅ ÏÐÀÂÀ
        {
            if (!carlic)   return SendErrorMessage(playerid, "%s adlý kiþinin sürücü belgesi bulunmuyor. ", name);

            SendSpecialMessage(playerid, "%s adlý kiþiye ehliyet uyarý puaný verdiniz.", name);

            new mes[128];
            format(mes, sizeof(mes), "%s adlý kiþinin ehliyetine uyarý puaný ekler.", name);
            pc_cmd_me(playerid, mes);

            if (drivewarns + 1 == 3)
            {
                SendWarningMessage(playerid, "%s adlý kiþinin uyarý puaný tamamlandýðý için ehliyeti iptal edildi. ", name);

                SQL_SetInteger("users", "drivewarns", 0, id);
		        SQL_SetInteger("users", "carlic", 0, id);

                if (playeronline)
                {
                    SendSpecialMessage(userid, "%s %s adlý kiþi ehliyetinize uyarý verdi.", GetRankName(playerid), GetNameEx(playerid));
                    PlayerInfo[userid][pDriveWarns] = 0;
		            PlayerInfo[userid][pCarLic] = 0;
                    SendWarningMessage(playerid, "Ehliyetinizde 3 uyarý puaný olduðu için otomatik olarak iptal edildi. ");
                }
                PlayerTextDrawSetString(playerid, MDC_LIC[playerid][4], "~r~HAYIR~n~-");

                return 1;
            }
            else
            {
                if (playeronline)
                {
                    PlayerInfo[userid][pDriveWarns]++;
                }

                new string[32];
                format(string, sizeof(string), "~g~AKTIF~n~~r~%i", drivewarns+1);
                PlayerTextDrawSetString(playerid, MDC_LIC[playerid][4], string);

                SQL_SetInteger("users", "drivewarns", drivewarns+1, id);
                return 1;
            }
        }

        case 5: //ÏÐÅÄÓÏÐÅÆÄÅÍÈÅ ÎÐÓÆ
        {
            if (!weplic)   return SendErrorMessage(playerid, "%s adlý kiþinin silah ruhsatý bulunmuyor.", name);

            if (playeronline)
            {
                SendSpecialMessage(userid, "%s %s adlý kiþi silah ruhsatýnýza uyarý verdi.", GetRankName(playerid), GetNameEx(playerid));
                PlayerInfo[userid][pWepWarns]++;
            }

            SendSpecialMessage(playerid, "%s adlý kiþinin silah ruhsatýna uyarý verdiniz.", name);

            new officer[MAX_PLAYER_NAME+1], data[24], price, wpwarns, warns;

            strreplace(name, '_', ' ');
            cache_get_value(0, "wep_officer", officer);
            cache_get_value(0, "wep_data", data);
            cache_get_value_int(0, "wep_price", price);
            cache_get_value_int(0, "wepwarns", wpwarns);
            warns = wpwarns + 1;

            new string[128];
            format(string, sizeof(string), "%i~n~%s~n~%s~n~~g~$%i", warns, name, data, price);
            PlayerTextDrawSetString(playerid, MDC_LIC[playerid][11], string);

            SQL_SetInteger("users", "wepwarns", wpwarns+1, id);
            return 1;
        }

        case 6: //×Ñ ÏÎË¨ÒÛ
        {
            if (flylic == 2) //  return SendErrorMessage(playerid, "%s óæå â ÷åðíîì ñïèñêå âëàäåëüöåâ ëèöåíçèè ïèëîòà.", name);
            {
                if (playeronline)
                {
                    SendSpecialMessage(userid, "%s %s adlý kiþi pilot lisansýnýzý karalisteden kaldýrdý.", GetRankName(playerid), GetNameEx(playerid));
                    PlayerInfo[userid][pFlyLic] = 0;
                }

                SQL_SetInteger("users", "flylic", 0, id);

                SendSpecialMessage(playerid, "%s adlý kiþinin blacklistini kaldýrdýnýz. ", name);
                PlayerTextDrawSetString(playerid, MDC_LIC[playerid][18], "~r~HAYIR");
            }
            else
            {
                if (playeronline)
                {
                    SendSpecialMessage(userid, "%s %s adlý kiþi pilot lisansýnýzý karalisteye ekledi.", GetRankName(playerid), GetNameEx(playerid));
                    PlayerInfo[userid][pFlyLic] = 2;
                }

                SQL_SetInteger("users", "flylic", 2, id);

                SendSpecialMessage(playerid, "%s adlý kiþinin pilot lisansýný karalisteye eklediniz.", name);
                PlayerTextDrawSetString(playerid, MDC_LIC[playerid][18], "~l~Karaliste");
            }

            return 1;
        }

        case 7: //×Ñ ÒÀÊÑÈ
        {
            if (taxilic == 2)//   return SendErrorMessage(playerid, "%s óæå â ÷åðíîì ñïèñêå âëàäåëüöåâ ëèöåíçèè òàêñèñòà.", name);
            {
                if (playeronline)
                {
                    SendSpecialMessage(userid, "%s %s adlý kiþi taksi sürücü lisansýnýzý karalisteden kaldýrdý", GetRankName(playerid), GetNameEx(playerid));
                    PlayerInfo[userid][pTaxiLic] = 0;
                }

                SQL_SetInteger("users", "taxilic", 0, id);

                SendSpecialMessage(playerid, "%s adlý kiþinin taksi sürücü lisansýný karalisteden kaldýrdýnýz.", name);
                PlayerTextDrawSetString(playerid, MDC_LIC[playerid][25], "~r~HAYIR");
            }
            else
            {
                if (playeronline)
                {
                    SendSpecialMessage(userid, "%s %s adlý kiþi taksi sürücü lisansýnýzý karalisteye ekledi", GetRankName(playerid), GetNameEx(playerid));
                    PlayerInfo[userid][pTaxiLic] = 2;
                }

                SQL_SetInteger("users", "taxilic", 2, id);

                SendSpecialMessage(playerid, "%s adlý kiþinin taksi sürücü lisansýný karalisteye eklediniz", name);
                PlayerTextDrawSetString(playerid, MDC_LIC[playerid][25], "~l~Karaliste");
            }

            return 1;
        }
    }
    return 1;
}

CheckTextDrawString(string[])
{
    if (strfind(string, "~", true) != -1)  return 1;

    return 0;
}

this::MDC_DELETE_APB(playerid, response)
{
    if (!response)    return 1;

    new number = GetPVarInt(playerid, #MDC_ID);

    if (!ApbInfo[number][apbOn])    return SendErrorMessage(playerid, "APB notu bulunamadý.");

    SendSyntaxMessage(playerid, "%i numaralý APB notunu temizlediniz.", number);
    SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "* HQ: %s %s %i numaralý APB notunu temizledi.", GetRankName(playerid), GetNameEx(playerid), number);

    new query[256];
    mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `apbs` WHERE `id` = %i", ApbInfo[number][apbID]);
    mysql_tquery(dbHandle, query);

    ApbInfo[number][apbOn] =
    ApbInfo[number][apbID] = 0;
    Update_MDC(playerid, PAGE_APB);
	MDC_PAGE(playerid, PAGE_APB);

    return 1;

}

this::LoadDynamicAPB()
{
    new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows) return print("[APBS] Kayit bulunamadi.");


	for(new i = 0; i < rows; i++)
	{
	    cache_get_value_int(i, "id", ApbInfo[i][apbID]);
	    cache_get_value(i, "charge", ApbInfo[i][apbCharge], 128);
        cache_get_value(i, "suspect", ApbInfo[i][apbSuspect], MAX_PLAYER_NAME);
        cache_get_value(i, "officer", ApbInfo[i][apbOfficer], MAX_PLAYER_NAME);
		cache_get_value(i, "date", ApbInfo[i][apbDate], MAX_PLAYER_NAME);

        cache_get_value_int(i, "faction", ApbInfo[i][apbFaction]);
		ApbInfo[i][apbOn] = 1;

        total++;
	}
	printf("[APBS] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

this::ApbCreate(apb)
{
	ApbInfo[apb][apbID] = cache_insert_id();
	ApbInfo[apb][apbOn] = 1;
	return 1;
}

this::PoliceSetPlate(playerid, vehicleid, plate[])
{
	if (cache_num_rows())	return SendErrorMessage(playerid,"Araç plakasý mevcut deðil, lütfen komutu tekrar deneyin.");

    format(VehicleInfo[vehicleid][carPlate], 24, "%s", plate);
	SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][carPlate]);
	RespawnVehicle(vehicleid, 1);
	Save_Car(vehicleid);
	SendSyntaxMessage(playerid, "%s model aracýn plakasý deðiþtirildi. Yeni plaka: %s", VehicleNames[GetVehicleModel(vehicleid)-400], VehicleInfo[vehicleid][carPlate]);
	return 1;
}

/*this::OnCheckNumber(playerid)
{
	if (!cache_num_rows())
	{
	    Dialog_Show(playerid, MDCVehicle, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Ïîèñê àâòîìîáèëÿ", "{B4B5B7}ÏÎÈÑÊ ÈÍÔÎÐÌÀÖÈÈ ÎÁ ÀÂÒÎÌÎÁÈËÅ\n\nÂâåäèòå íîìåðíîé çíàê:\n\n(( Íîìåð ÒÑ ))", "Done", "Geri Dön");
	    return SendErrorMessage(playerid, "Àâòîìîáèëü ñ òàêèì íîìåðíûì çíàêîì íå íàéäåí.");
	}

	new ownername[MAX_PLAYER_NAME], model, plate[24], date[24];

	cache_get_value(0, "ownername", ownername);
	strreplace(ownername, '_', ' ');
    cache_get_value(0, "plate", plate);
    model = cache_get_value_int(0, "model");
    cache_get_value(0, "date", date);

	static const str_size[] = "{B4B5B7}ÐÅÇÓËÜÒÀÒÛ ÏÎÈÑÊÀ ÏÎ ÍÎÌÅÐÓ ÒÑ\n\nÍîìåðíîé çíàê: %s\nÌàðêà àâòîìîáèëÿ: %s\nÂëàäåëåö àâòîìîáèëÿ: %s\nÄàòà ïîêóïêè: %s";
	new mes[sizeof(str_size) - 4 + 24 + 32 + MAX_PLAYER_NAME + 24 + (10 * 24)];

 	format(mes, sizeof(mes), str_size, plate, VehicleNames[model-400], ownername, date);

	new vehicle, count;
	if ((vehicle = FindVehicleByPlate(plate)) != -1)
	{
	    for(new i; i != MAX_CAR_TICKETS; i++)
		{
		    if (vTickets[vehicle][i][tID] == 0) 	continue;
            if (count == 0) 						strcat(mes, "\n\nØòðàôû");

            format(mes, sizeof(mes), "%s\n#i: $%i - %.11s...", mes, count+1, FormatNumber(vTickets[vehicle][i][tAmount]), vTickets[vehicle][i][tReason]);
			count++;
		}

		if (!count) strcat(mes, "\n\nÍåò íåîïëà÷åííûõ øòðàôîâ");
	}
	else strcat(mes, "\n\n{FF6347}Òðàíñïîðò íå íà ñåðâåðå");

	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{8D8DFF}MDC - Ïîèñê ïî íîìåðó", mes, "-", "");
	return 1;
}

this::PersonInfo(playerid, userid)
{
	new str[128], mdc[1024] = "{B4B5B7}ÐÅÇÓËÜÒÀÒ ÏÎÈÑÊÀ\n\n";

	format(str, sizeof(str), "Ïîëíîå èìÿ: %s, Äàòà ðîæäåíèÿ: %s\n", GetNameEx(userid),PlayerInfo[userid][pBirthdate]);
	strcat(mdc, str);
	format(str, sizeof(str), "phone number: %i\n",PlayerInfo[userid][pNumber]);
	strcat(mdc, str);
	format(str, sizeof(str), "Øòðàôû: %i\n", CountPlayerTickets(userid));
	strcat(mdc, str);

	switch(PlayerInfo[userid][pCarLic])
	{
	    case 0: strcat(mdc, "Ëèöåíçèÿ íà âîæäåíèå: Íåò\n");
	    case 1: strcat(mdc, "Ëèöåíçèÿ íà âîæäåíèå: Äà\n");
	}
	format(str, sizeof(str), "Ïðåäóïðåæäåíèÿ âîäèòåëÿ: %i\n\n",PlayerInfo[userid][pDriveWarns]);
	strcat(mdc, str);
	switch(PlayerInfo[userid][pWepLic])
	{
	    case 0: strcat(mdc, "Ëèöåíçèÿ íà îðóæèå: Íåò\n");
	    case 1: strcat(mdc, "Ëèöåíçèÿ íà îðóæèå: Äà\n");
	}
	format(str, sizeof(str), "Ïðåäóïðåæäåíèÿ: %i\n\n",PlayerInfo[userid][pWepWarns]);
	strcat(mdc, str);
	switch(PlayerInfo[userid][pFlyLic])
	{
	    case 0: strcat(mdc, "Ëèöåíçèÿ íà ïîë¸òû: Íåò\n");
	    case 1: strcat(mdc, "Ëèöåíçèÿ íà ïîë¸òû: Äà\n");
	}
	switch(PlayerInfo[userid][pTaxiLic])
	{
	    case 0: strcat(mdc, "Ëèöåíçèÿ íà ïåðåâîçêó ëþäåé: Íåò\n\n");
	    case 1: strcat(mdc, "Ëèöåíçèÿ íà ïåðåâîçêó ëþäåé: Äà\n\n");
	}

	new count;

	for(new i; i < MAX_HOUSES; i++)
	{
	    if (!HouseInfo[i][hID] || HouseInfo[i][hOwnerID] != PlayerInfo[userid][pID]) continue;

		format(str, sizeof(str), "Àäðåñ ïðîæèâàíèÿ: %s, %03d\n\n", GetHouseZone(i), i);
		strcat(mdc, str);
		count++;

		if (count > 4) break;
	}

	if (!count) strcat(mdc, "Àäðåñ ïðîæèâàíèÿ: íå íàéäåíî\n\n\n");

	count = 0;

	foreach(new i : Vehicle)
	{
	    if (VehicleInfo[i][carOwnerID] != PlayerInfo[userid][pID]) continue;

        format(str, sizeof(str), "Òðàíñïîðòíîå ñðåäñòâî: %s\nPhone: %s\n\n", VehicleNames[VehicleInfo[i][carModel]-400], VehicleInfo[i][carPlate]);
		strcat(mdc, str);

		if (count > 5) break;
	}

	strcat(mdc, "Êðèìèíàëüíûå äàííûå:\n");
	format(str, sizeof(str), "Àðåñòû: %i\n", PlayerInfo[userid][pArrested]);
	strcat(mdc, str);

    if (PlayerInfo[playerid][pJailed] == PRISON_JAIL)
	{
		format(str, sizeof(str), "Òþðåìíîå çàêëþ÷åíèå: %s%i\n\n",(PlayerInfo[userid][pIsolateTime] != 0)?("B"):("A"), PlayerInfo[userid][pPrisoned]+100);
		strcat(mdc, str);
	}

	format(str, sizeof(str), "%s\n\n", (cache_num_rows() > 0)?("Â ÐÎÇÛÑÊÅ"):("Íå â ðîçûñêå"));
	strcat(mdc, str);

	for(new i; i < cache_num_rows(); i++)
	{
        cache_get_value(i, "charge", str);
        strcat(mdc, str);
        strcat(mdc, "\n");
	}
	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{8D8DFF}Police MDC", mdc, "-", "");
	return 1;
}*/

SetPlayerZond(playerid, step)
{
	if (step == 0)
	{
	    if (pTemp[playerid][pZond] != 1) return 1;

	    TogglePlayerSpectating(playerid, 0);
		DestroyPlayerObject(playerid, pTemp[playerid][pZondObj]);

		if (IsValidDynamic3DTextLabel(pTemp[playerid][pZondLabel]))
		{
		    DestroyDynamic3DTextLabel(pTemp[playerid][pZondLabel]);
		    pTemp[playerid][pZondLabel] = Text3D:INVALID_3DTEXT_ID;
		}

		DestroyDynamicActor(pTemp[playerid][pZondActor]);
		pTemp[playerid][pZondActor] = INVALID_ACTOR_ID;

		SetTimerEx("OnPlayerSetData", 1200, false, "d", playerid);

		for(new i; i < 11; i++) TextDrawHideForPlayer(playerid, zond_cam[i]);
	    return 1;
	}

	new id = -1, Float: x, Float: y, Float: z, vw, interior;

	if ((id = GetNearOutsideBiz(playerid)) != -1 && (BizInfo[id][bizType] != BIZ_GAS_STATION && BizInfo[id][bizType] != BIZ_AUTOSALON && BizInfo[id][bizType] != BIZ_ADVERT && BizInfo[id][bizType] != BIZ_TUNING && BizInfo[id][bizType] != BIZ_LICENSE && BizInfo[id][bizType] != BIZ_BOATSALON && BizInfo[id][bizType] != BIZ_FLYSALON))
	{
	    x = BizInfo[id][bizExitX];
	    y = BizInfo[id][bizExitY];
	    z = BizInfo[id][bizExitZ];
	    vw = BizInfo[id][bizExitVW];
	    interior = BizInfo[id][bizExitInt];
	}

	if (id == -1 && (id = GetNearOutsideHouse(playerid)) != -1)
	{
	    x = HouseInfo[id][hExitX];
	    y = HouseInfo[id][hExitY];
	    z = HouseInfo[id][hExitZ];
	    vw = HouseInfo[id][hExitVW];
	    interior = HouseInfo[id][hExitInt];
	}

	if (id == -1 && (id = GetNearOutsideExtHouse(playerid)) != -1)
	{
	    x = HouseInfo[id][hExtX][0];
	    y = HouseInfo[id][hExtY][0];
	    z = HouseInfo[id][hExtZ][0];
	    vw = HouseInfo[id][hExtVW][0];
	    interior = HouseInfo[id][hExtInt][0];
	}

	if (id == -1 && (id = GetNearApartmentOutside(playerid)) != -1)
	{
	    x = ApartInfo[id][aExitX];
	    y = ApartInfo[id][aExitY];
	    z = ApartInfo[id][aExitZ];
	    vw = ApartInfo[id][aExitVW];
	    interior = ApartInfo[id][aExitInt];
	}

	if (id == -1) return 1;

	SavePlayerPos(playerid);
    GameTextForPlayer(playerid, "_", 1, 4);

    if (IsValidDynamic3DTextLabel(pTemp[playerid][pZondLabel]))
	{
	    DestroyDynamic3DTextLabel(pTemp[playerid][pZondLabel]);
	    pTemp[playerid][pZondLabel] = Text3D:INVALID_3DTEXT_ID;
 	}

 	new mes[128];
	format(mes, sizeof(mes),"(( %s snakecam ile mülkün içerisine bakýyor. ))", GetNameWithMask(playerid));
	pTemp[playerid][pZondLabel] = CreateDynamic3DTextLabel(mes, COLOR_PURPLE, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetWorld(playerid), GetInterior(playerid));
	pTemp[playerid][pZondActor] = CreateDynamicActor(GetPlayerSkin(playerid), PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA], 1, 100.0, GetWorld(playerid), GetInterior(playerid));
	ApplyDynamicActorAnimation(pTemp[playerid][pZondActor], "BOMBER", "NULL", 0.0, 0, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(pTemp[playerid][pZondActor], "BOMBER", "BOM_Plant_Loop", 4.1, 0, 0, 0, 1, 0);
	TogglePlayerSpectating(playerid, 1);
    pTemp[playerid][pZondObj] = CreatePlayerObject(playerid, 19300, x, y, z, 0.0, 0.0, 0.0);
	AttachCameraToPlayerObject(playerid, pTemp[playerid][pZondObj]);
	SetInterior(playerid, interior);
	SetWorld(playerid, vw);

	new weapons[12];
	new ammo[12];

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		for(new a; a < 12; a++)
		{
			BWH_GetPlayerWeaponData(playerid, a, weapons[a], ammo[a]);
			if(!AC_PlayerHasWeapon(playerid, weapons[a]) || !ammo[a])
			{
				weapons[a] = 0;
				ammo[a] = 0;
			}
			PlayerInfo[playerid][pWeapons][a] = weapons[a];
			PlayerInfo[playerid][pAmmo][a] = ammo[a];
		}
	}

	for(new i; i<11;i++) TextDrawShowForPlayer(playerid, zond_cam[i]);

	pTemp[playerid][pZond] = 1;

	SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "* %s %s snakecam kullanmaya baþladý.", GetRankName(playerid), GetNameEx(playerid));
	return 1;
}

TracePlayer(playerid)
{
	new targetid = pTemp[playerid][pTracePlayer];

	pTemp[playerid][pTraceStage]++;

	if (pTemp[playerid][pTraceStage] < 9 && (0 == IsPlayerLogged(targetid) || PlayerInfo[targetid][pPhoneAirplane] != 0 || PlayerInfo[targetid][pPhoneOff] != 0))
	{
	    if (pTemp[playerid][pTraceGZ] != -1) GangZoneDestroy(pTemp[playerid][pTraceGZ]);

		pTemp[playerid][pTraceGZ] = -1;
	    pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
	    pTemp[playerid][pTraceStage] = 0;
	    SendErrorMessage(playerid, "Sinyal kaybedildi.");

	    return 1;
	}

	new mulstatus[16], sevstatus[16], verstatus[16], mes[712];

	if (pTemp[playerid][pTraceDist][0] >= 1250.0) mulstatus = "{FF6347}ZAYIF";
	else if (pTemp[playerid][pTraceDist][0] < 1250.0) mulstatus = "{DABB3E}GÜÇLÜ";

	if (pTemp[playerid][pTraceDist][1] >= 1250.0) sevstatus = "{FF6347}ZAYIF";
	else if (pTemp[playerid][pTraceDist][1] < 1250.0) sevstatus = "{DABB3E}GÜÇLÜ";

	if (pTemp[playerid][pTraceDist][1] >= 1250.0) verstatus = "{FF6347}ZAYIF";
	else if (pTemp[playerid][pTraceDist][1] < 1250.0) verstatus = "{DABB3E}GÜÇLÜ";

    if (pTemp[playerid][pTraceStage] < 9)
    {
	    if (pTemp[playerid][pTraceStage] > 1) format(mes, sizeof(mes), "\n{FFFFFF}Little Italy {AFAFAF}bölgesinden %s sinyal alýnýyor ...", mulstatus);
	    if (pTemp[playerid][pTraceStage] > 3) format(mes, sizeof(mes), "\n{FFFFFF}Little Italy {AFAFAF}bölgesinden %s sinyal %s alýnýyor ...", mes, sevstatus);
	    if (pTemp[playerid][pTraceStage] > 5) format(mes, sizeof(mes), "\n{FFFFFF}Portland Docks {AFAFAF}bölgesinden %s sinyal %s alýnýyor ...",mes, verstatus);

		if (pTemp[playerid][pTraceStage] == 8)
		{
		    new location[MAX_ZONE_NAME];
		    GetPlayer2DZone(targetid, location, MAX_ZONE_NAME);

		    new Float:x, Float:y, Float:z;

			if (GetWorld(targetid) || GetInterior(targetid))
			{
				x = PlayerInfo[targetid][pLocationPos][0];
				y = PlayerInfo[targetid][pLocationPos][1];
				z = PlayerInfo[targetid][pLocationPos][2];
			}
			else GetPlayerPos(targetid, x, y, z);

		    format(mes, sizeof(mes), "%s\n{AFAFAF}... Ýzleme tamamlandý.\n\n\nYaklaþýk Konum: %s\nTelefon numarasý: %i / Sahip: %s", mes, location, PlayerInfo[targetid][pNumber], GetNameEx(targetid));

		    pTemp[playerid][pTraceGZ] = GangZoneCreate(x+65, y+65, x-65,y-65);
			GangZoneShowForPlayer(playerid, pTemp[playerid][pTraceGZ], 0xFF0000AA);
		}
		Dialog_Show(playerid, ShowTrace, DIALOG_STYLE_MSGBOX, "Ýzleme Sistemi - Çýkmak için ESC / ENTER tuþuna basýn", mes, "KAPAT", "");
	}

	if (pTemp[playerid][pTraceStage] > 600)
	{
	    if (pTemp[playerid][pTraceGZ] != -1) GangZoneDestroy(pTemp[playerid][pTraceGZ]);
	    pTemp[playerid][pTraceGZ] = -1;

	    pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
	    pTemp[playerid][pTraceStage] = 0;
	}
	return 1;
}

Add_Call(playerid, type, text[])
{
	new Float:x, Float:y, Float:z;

	GetPlayerPos(playerid,x, y, z);
	for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
	    if (CallInfo[i][callExists] != 0) continue;

        GetPlayerPos(playerid, CallInfo[i][callPosX], CallInfo[i][callPosY], CallInfo[i][callPosZ]);
        CallInfo[i][callType] = type;
        format(CallInfo[i][callText], 128, "%s", text);
        format(CallInfo[i][callDate], 32, "%s", GetFullDate());
        GetPlayer2DZone(playerid, CallInfo[i][callLocation], MAX_ZONE_NAME);


		if (pTemp[playerid][pPayphone] == -1)
		{
			format(CallInfo[i][callName], MAX_PLAYER_NAME, "%s", GetNameEx(playerid));
			CallInfo[i][callPhone] = PlayerInfo[playerid][pNumber];
		}
		else
		{
			format(CallInfo[i][callName], MAX_PLAYER_NAME, "CAGRI");
			CallInfo[i][callPhone] = PayphoneInfo[pTemp[playerid][pPayphone]][phNumber];
		}

        CallInfo[i][callDelete] = gettime() + 1200;
        CallInfo[i][callExists] = 1;
        break;
	}
	return 1;
}

Get_Calls(playerid)
{
	if (!IsPlayerFactionPolice(playerid) &&
		!IsPlayerFactionMedic(playerid) &&
		!IsPlayerFactionFire(playerid)) return 1;

	new mes[512], count, type = (IsPlayerFactionMedic(playerid) || IsPlayerFactionFire(playerid))?(2):(1);

    for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
	    if (CallInfo[i][callExists] == 0 || (CallInfo[i][callType] != type && CallInfo[i][callType] != 3)) continue;
		format(mes, sizeof(mes), "%s\n%i. %s (Phone: %i), %s", mes, count+1, CallInfo[i][callName], CallInfo[i][callPhone], CallInfo[i][callDate]);
		count++;
	}

	if (!count) return SendErrorMessage(playerid, "Kullanýlabilir 911 aramasý yok.");

	Dialog_Show(playerid, MDCCall, DIALOG_STYLE_LIST, "{8D8DFF}MDC - 911 CAGRILARI", mes, "Seç", "Geri Dön");
	return 1;
}

Add_Arrest(playerid, suspect, time)
{
	for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
		if (ArrestInfo[i][arrestExists] != 0) continue;

		format(ArrestInfo[i][arrestDate], 32, "%s", GetFullDate());
		format(ArrestInfo[i][arrestSuspect], MAX_PLAYER_NAME, "%s", GetNameEx(suspect));
		format(ArrestInfo[i][arrestOfficer], MAX_PLAYER_NAME, "%s", GetNameEx(playerid));
		ArrestInfo[i][arrestTime] = time;
		ArrestInfo[i][arrestDelete] = gettime() + 1200;
		ArrestInfo[i][arrestExists] = 1;
		break;
	}
	return 1;
}

AddCriminalRecord(playerid, const charge[], officer[], faction, arrest = 0)
{
	if (!strlen(charge)) return SendErrorMessage(playerid, "Belirilen deðer çok kýsa.");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query),"INSERT INTO `criminalrecords` (userid, charge, date, officer, faction, arrest) VALUES (%i, '%e', '%s', '%e', %i, %i)", PlayerInfo[playerid][pID], charge, GetFullDate(), officer, faction, arrest);
	mysql_tquery(dbHandle, query);
	return 1;
}

Patrul_Init()
{
	for(new i; i != MAX_PATROL; i++)
	{
	    PatrolInfo[0][i][patrulOfficer][0] = INVALID_PLAYER_ID;
	    PatrolInfo[0][i][patrulOfficer][1] = INVALID_PLAYER_ID;
	    PatrolInfo[1][i][patrulOfficer][0] = INVALID_PLAYER_ID;
	    PatrolInfo[1][i][patrulOfficer][1] = INVALID_PLAYER_ID;
	}
	return 1;
}

GetPatrolID(playerid)
{
	return (IsPlayerFactionPolice(playerid))?(1):(0);
}
/*
StartChase(playerid)
{
	SetPVarInt(playerid, #Chase_Time, 300);
	SetPVarInt(playerid, #Chase_Timer, SetTimerEx("Chasing", 1000, true, "i", playerid));
	return 1;
}

this::Chasing(playerid)
{
	if (GetPVarInt(playerid, #Chase_Time) > 1) {
		SetPVarInt(playerid, #Chase_Time, GetPVarInt(playerid, #Chase_Time) - 1);
	} else {
		KillTimer(GetPVarInt(playerid, #Chase_Timer));
		DeletePVar(playerid, #Chase_Time);
		DeletePVar(playerid, #Chase_Timer);

		foreach(new i : Player)
		{
			if (IsPlayerLogged(i) == 0 || !IsPlayerFactionPolice(i))	continue;
			SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
		}
		return 1;
	}

	foreach(new i : Player)
	{
		if (IsPlayerLogged(i) == 0 || !IsPlayerFactionPolice(i))	continue;
		if (!PlayerNearPlayer(30.0, i, playerid)) {
			SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
		}
		else {
			SetPlayerMarkerForPlayer(i, playerid, 0xA52A2AFF);
		}
	}

	return 1;
}*/

PutPlayerInPrison(playerid)
{
	if (PlayerInfo[playerid][pJailed] == 0) return 1;

	SetPVarInt(playerid, "tpOnlem", 1);

	if (PlayerInfo[playerid][pDragged])
	{
		PlayerInfo[playerid][pDragged] = 0;
		PlayerInfo[playerid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerInfo[playerid][pDragTimer]);
	}

	if (PlayerInfo[playerid][pJailed] == PALOMINO_JAIL)
	{
	    PlayerInfo[playerid][pKelepceli] = 0;
	    RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	    new i = random(sizeof(prison_palomino));
	    SetPlayerPosEx(playerid, prison_palomino[i][0], prison_palomino[i][1], prison_palomino[i][2]);

		SetInterior(playerid, 1);
		SetWorld(playerid, playerid + 100);

	    for(new j; j < 12; j++)
	    {
		    AC_ResetPlayerWeapons(playerid);

		    PlayerInfo[playerid][pWeapons][j] = 0;
		    PlayerInfo[playerid][pAmmo][j] = 0;
	    }
		return 1;
	}

	if (PlayerInfo[playerid][pIsolateTime] != 0)
	{
	    if (IsValidDynamic3DTextLabel(PrisonLabel[playerid]))
		{
			DestroyDynamic3DTextLabel(PrisonLabel[playerid]);
	        PrisonLabel[playerid] = Text3D:INVALID_3DTEXT_ID;
		}
		new mes[5];
		format(mes, sizeof(mes), "B%i", PlayerInfo[playerid][pPrisoned] + 100);
        PrisonLabel[playerid] = CreateDynamic3DTextLabel(mes, 0xFF0000FF, 0,0,0.1, 15.0, playerid, INVALID_VEHICLE_ID, 1);

	    new i = PlayerInfo[playerid][pPrisoned];
	    SetInterior(playerid, 18);
		SetWorld(playerid, 100);
		SetPlayerPosEx(playerid, 1132.321411, 1323.903198, 9.823800);
		SetSpawnInfoEx(playerid, 1132.321411, 1323.903198, 9.823800);
		return 1;
	}

	if (PlayerInfo[playerid][pJailed] == PRISON_JAIL)
	{
        if (IsValidDynamic3DTextLabel(PrisonLabel[playerid]))
		{
			DestroyDynamic3DTextLabel(PrisonLabel[playerid]);
	        PrisonLabel[playerid] = Text3D:INVALID_3DTEXT_ID;
		}

		new mes[5];

		format(mes, sizeof(mes), "A%i", PlayerInfo[playerid][pPrisoned] + 100);
        PrisonLabel[playerid] = CreateDynamic3DTextLabel(mes, 0x00FF00FF, 0,0,0.1, 15.0, playerid, INVALID_VEHICLE_ID, 1);

	    new i = PlayerInfo[playerid][pPrisoned];

	    SetInterior(playerid, 18);
		SetWorld(playerid, 100);
		SetPlayerPosEx(playerid, 1132.321411, 1323.903198, 9.823800);
		SetSpawnInfoEx(playerid, 1132.321411, 1323.903198, 9.823800);
		return 1;
	}

	return 1;
}

CreateStrip(Float:x, Float:y, Float:z, Float:angle, model)
{
	for(new i; i != MAX_SPIKE; i++)
	{
	    if (SpikeInfo[i][sCreated]) continue;

        SpikeInfo[i][sObject] = CreateDynamicObject(model, x, y, z-0.9, 0, 0, angle);
		SpikeInfo[i][sCreated] = 1;
		SpikeInfo[i][sX] = x;
		SpikeInfo[i][sY] = y;
		SpikeInfo[i][sZ] = z-0.9;
		return i;
	}
	return -1;
}

PoliceOnline()
{
    new count = 0;
    foreach(new i : Player)
    {
        if(IsPlayerLoggedIn(i) && IsPlayerFactionPolice(i) && PlayerInfo[i][pOnDuty]) count++;
    }
   	if (count < NEED_COPS_TO_CRIME)	return 0;
	else 							return 1;
}

IsPoliceNear(playerid)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	GetPlayerPos(playerid,x2,y2,z2);

	foreach(new i : Player)
    {
        if (IsPlayerLogged(i) == 0)										 continue;
		if (PlayerInfo[i][pFaction] != 1 && PlayerInfo[i][pFaction] != 3) continue;
		if (!PlayerInfo[i][pOnDuty])										 continue;

		GetPlayerPos(i,x1,y1,z1);
		if (GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2) < 30.0) return 1;
    }
	return 0;
}

StartChase(playerid)
{
	SetPVarInt(playerid, #Chase_Time, 300);
	SetPVarInt(playerid, #Chase_Timer, SetTimerEx("Chasing", 1000, true, "i", playerid));
	return 1;
}

this::Chasing(playerid)
{
	if (GetPVarInt(playerid, #Chase_Time) > 1) {
		SetPVarInt(playerid, #Chase_Time, GetPVarInt(playerid, #Chase_Time) - 1);
	} else {
		KillTimer(GetPVarInt(playerid, #Chase_Timer));
		DeletePVar(playerid, #Chase_Time);
		DeletePVar(playerid, #Chase_Timer);

		foreach(new j : Player)
		{
			if(!IsPlayerConnected(j) || PlayerInfo[j][pFaction] == 0) continue;
			if(pTemp[j][pDestekTakip] != playerid) continue;
			pc_cmd_cpsifirla(j, "");
		}
		return 1;
	}

	foreach(new j : Player)
	{
		if(!IsPlayerConnected(j) || PlayerInfo[j][pFaction] == 0) continue;
		if(pTemp[j][pDestekTakip] != playerid) continue;
        if(j == playerid) continue;

		new Float:xaa, Float:yaa, Float:zaa;
		GetPlayerPos(playerid, xaa, yaa, zaa);

		if(IsFactionLegal(PlayerInfo[j][pFaction]))
		Waypoint_Set(j, xaa, yaa, zaa, 5.0);

	}

	return 1;
}

StopChase(playerid)
{
	KillTimer(GetPVarInt(playerid, #Chase_Timer));
	DeletePVar(playerid, #Chase_Time);
	DeletePVar(playerid, #Chase_Timer);
	pTemp[playerid][pCallOn] = 0;

    SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "%s adlý memur destek çaðrýsýný bitirdi.", GetNameEx(playerid));

	foreach(new j : Player)
	{
		if(pTemp[j][pDestekTakip] != playerid) continue;
        if(j == playerid) continue;
		pc_cmd_cpsifirla(j, "");
		pTemp[j][pDestekTakip] = 0;
	}
	return 1;
}

this::Rappelling(playerid)
{
	if(!GetPVarInt(playerid, #SWATROPE)) return false;

    SetTimerEx("Rappelling", ROPETIME, 0, "i", playerid);
    ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
    return 1;
}

OnPlayerCallRappelling(playerid)
{
	new
		Float:playerX,
		Float:playerY,
		Float:playerZ,
		Float:groundZ,
		Float:subZ;

	GetPlayerPos(playerid, playerX, playerY, playerZ);
	MapAndreas_FindZ_For2DCoord(playerX, playerY, groundZ); //#include <mapandreas>

	subZ = playerZ - groundZ;
	if(subZ >= MAX_ROPE_LENGTH) return SendErrorMessage(playerid, "Halat atmak icin minimum 300 metre yukar?da olmal?s?n?z!");
	//if(subZ <= 2) 				return RemovePlayerFromVehicle(playerid);

	SetPVarInt(playerid, #SWATROPE, 1);

	SetPlayerCheckpoint(playerid, playerX, playerY, ROPEOFFSETZ - groundZ, 3.0);
	SetPlayerPos(playerid, playerX, playerY, playerZ + 0.8);
	SetPlayerVelocity(playerid, 0, 0, 0);

	for (new i = 0; i != 10; i++) ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);

	for (new i = 0; i <= subZ; i++) {
		RopesInfo[playerid][i] = CreateObject(3004, playerX, playerY, floatadd(groundZ, i), 87.640026855469, 342.13500976563, 350.07507324219);
	}

	SetTimerEx("Rappelling", ROPETIME, 0, "i", playerid);
	return 1;
}

MDC_CountCCTVS()
{
	new
		query[64]
	;

 	mysql_format(dbHandle, query, sizeof(query), "SELECT COUNT(id) AS total FROM `cctvs`");
	new Cache:cache = mysql_query(dbHandle, query),
		count;

    cache_get_value_int(0, "total", count);

	cache_delete(cache);
    cache = MYSQL_INVALID_CACHE;
	return count;
}

MDC_CountRoster()
{
    new count = 0;
    for(new i = 0; i != MAX_PATROL; i++)
    {
        if (!PatrolInfo[1][i][patrulExists]) continue;
        count++;
    }
    return count;
}

GetOfficerName(playerid) {
    new officername[24];
    format(officername, sizeof(officername), "%s", GetNameEx(playerid));

    strdel(officername, 1, strfind(officername, " "));
    strins(officername, ".", 1);
    return officername;
}

APB_OnGameModeInit()
{
    return mysql_tquery(dbHandle, "SELECT * FROM `apbs`", "LoadDynamicAPB");
}

stock GetDriverID(vehicleid) //Araç sürenin idini verir
{
    foreach(new i : Player)
    {
    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerState(i) == PLAYER_STATE_DRIVER) return i;
    }
    return INVALID_PLAYER_ID;
}

Police_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!ispassenger)
	{
		SetPlayerArmedWeapon(playerid, 0);
	}

    if (IsAHelicopter(vehicleid) && ispassenger)
    {
        SetPVarInt(playerid, #CHOPID, GetPlayerVehicleID(playerid));
        if(GetPVarInt(playerid, #SWATROPE)) DeletePVar(playerid, #SWATROPE);
    }
    return 1;
}

Police_OnPlayerExitVehicle(playerid)
{
    if (GetPVarInt(playerid, #CHOPID))   DeletePVar(playerid, #CHOPID);
    if (GetPVarInt(playerid, #SWATROPE)) DeletePVar(playerid, #SWATROPE);
    return 1;
}

Police_OnPlayerDisconnect(playerid)
{
    if (GetPVarInt(playerid, #SWATROPE))
    {
        for(new i = 0; i < MAX_ROPE_LENGTH; i++) DestroyObject(RopesInfo[playerid][i]);
    }
    return 1;
}

Police_OnPlayerDeath(playerid)
{
    if (GetPVarInt(playerid, #SWATROPE))
    {
        for(new i = 0; i < MAX_ROPE_LENGTH; i++) DestroyObject(RopesInfo[playerid][i]);

        DeletePVar(playerid, #SWATROPE);
        DisablePlayerCheckpoint(playerid);
    }
    return 1;
}

Police_OnVehicleDeath(vehicleid)
{
    if(IsAHelicopter(vehicleid))
    {
        foreach (new i : Player)
        {
            if(GetPVarInt(i, #CHOPID) == vehicleid && GetPVarInt(i, #SWATROPE))
            {
                for(new j = 0; j < MAX_ROPE_LENGTH; j++) DestroyObject(RopesInfo[i][j]);
                DisablePlayerCheckpoint(i);
                TogglePlayerControllable(i, true);
                ClearAnimations(i);

                DeletePVar(i, #SWATROPE);
            }
        }
    }
    return 1;
}

Dialog:LSPDElevator(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
    if (!IsPlayerInRangeOfPoint(playerid, 2.0, 2268.0640,2448.2449,3.5313) && !IsPlayerInRangeOfPoint(playerid, 2.0, 2781.0559,-1056.2823,1028.4969) && !IsPlayerInRangeOfPoint(playerid, 2.0, 2874.6665,-940.6707,1035.9259) && !IsPlayerInRangeOfPoint(playerid, 2.0, 2872.8813,-1072.9934,1037.1782)) return 1;

	new world_list[] = {2, 1, 2, 3};

	switch(listitem)
	{
	    case 0: SetPlayerPosEx(playerid, 2268.0640,2448.2449,3.5313), SetPlayerFacingAngle(playerid, 181.2476);
	    case 1: SetPlayerPosEx(playerid, 2780.9036,-1056.2358,1028.4969), SetPlayerFacingAngle(playerid, 87.9492);
	    case 2: SetPlayerPosEx(playerid, 2873.9063,-940.8126,1035.9259), SetPlayerFacingAngle(playerid, 84.3340);
	    case 3: SetPlayerPosEx(playerid, 2872.7168,-1072.2004,1037.1770), SetPlayerFacingAngle(playerid, 0.2384);
	}

	SetWorld(playerid, world_list[listitem]);
	SetInterior(playerid, (listitem == 0)?(0):(1));
	return 1;
}

Dialog:MDCCall(playerid, response, listitem, inputtext[])
{
	if (!response)						return 1;
    if (!IsPlayerFactionPolice(playerid) &&
		!IsPlayerFactionMedic(playerid) &&
		!IsPlayerFactionFire(playerid))	return 1;

	new mes[512], count, type = (IsPlayerFactionMedic(playerid) || IsPlayerFactionFire(playerid))?(2):(1);

    for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
	    if (!CallInfo[i][callExists]) continue;
		if (CallInfo[i][callType] != 3) {
			if (CallInfo[i][callType] != type) continue;
		}

		if (listitem == count)
		{
			new statusmes[65];
			if (CallInfo[i][callAccept]) format(statusmes, sizeof(statusmes), "%s", CallInfo[i][callAcceptBy]);
			else format(statusmes, sizeof(statusmes), "{A9C4E4}Çaðrý kabul edilmemiþ{B4B5B7}");

			format(mes, sizeof(mes), "{B4B5B7}911-CAGRI BILGISI - #%i\n\n\
            						Arayan:\t\t%s\n\
            						Numara:\t%i\n\
           							Durum:\t\t%s\n\
            						Lokasyon:\t%s\n\
            						Tarih:\t\t\t%s\n\n\
									Statü:\t\t\t%s\n\
            						Çaðrý %i kez cevaplandý",
			i+1, CallInfo[i][callName], CallInfo[i][callPhone], CallInfo[i][callText], CallInfo[i][callLocation], CallInfo[i][callDate], statusmes, CallInfo[i][callAccept]);

			Dialog_Show(playerid, MDCCall2, DIALOG_STYLE_MSGBOX, "{8D8DFF}MDC - Çaðrý Bilgilendirmesi", mes, "Ayarlar", "Geri Dön");
			SetPVarInt(playerid, #last_call, i);
		    return 1;
		}
		count++;
	}
	return 1;
}

Dialog:MDCCall2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

    Dialog_Show(playerid, MDCCallRespond, DIALOG_STYLE_LIST, "{8D8DFF}MDC - Çaðrý Bilgilendirmesi", "- Acil çaðrýyý kabul et\n- Çaðrýyý sil", "Seç", "Geri Dön");
	return 1;
}

Dialog:MDCCallRespond(playerid, response, listitem, inputtext[])
{
	if (!response)
		return 1;

    if (!IsPlayerFactionPolice(playerid) &&
		!IsPlayerFactionMedic(playerid) &&
		!IsPlayerFactionFire(playerid))
		return 1;

	new type = (IsPlayerFactionMedic(playerid) || IsPlayerFactionFire(playerid))? (2) : (1),
		id = GetPVarInt(playerid, #last_call);

    if (!CallInfo[id][callExists]) return 1;
	if (CallInfo[id][callType] != 3) {
		if (CallInfo[id][callType] != type) return 1;
	}

	if (!listitem)
	{
		if (pTemp[playerid][pPatrol])	SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* [%s] %s %s [%s] 911 acil çaðrýsýný kabul etti. #%i.", GetInitials(Factions[PlayerInfo[playerid][pFaction]][fName]), GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], id+1);
		else							SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* [%s] %s %s 911 acil çaðrýsýný kabul etti. #%i.", GetInitials(Factions[PlayerInfo[playerid][pFaction]][fName]), GetRankName(playerid), GetNameEx(playerid), id+1);

		if (pTemp[playerid][pPatrol])    format(CallInfo[id][callAcceptBy], 64, "%s (%s) tarafýndan ilgileniliyor", GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName]);
        else                             format(CallInfo[id][callAcceptBy], 64, "%s tarafýndan ilgileniliyor", GetNameEx(playerid));

		Waypoint_Set(playerid, CallInfo[id][callPosX],CallInfo[id][callPosY],CallInfo[id][callPosZ], 3.0);

	    CallInfo[id][callAccept]++;
		pTemp[playerid][pPoliceCalls]++;

		MDC_PAGE(playerid, PAGE_CALLS);
	}
	else
	{
		SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* [%s] %s %s 911 acil çaðrýsýný kaldýrdý #%i.", GetInitials(Factions[PlayerInfo[playerid][pFaction]][fName]), GetRankName(playerid), GetNameEx(playerid), id+1);

		SendWarningMessage(playerid, "Çaðrý [ID: %i] kaldýrýldý.", id+1);
	    CallInfo[id][callExists] = 0;
 		CallInfo[id][callType] = 0;
		CallInfo[id][callAccept] = 0;

		MDC_PAGE(playerid, PAGE_MAIN);
	}

	return 1;
}

/*Dialog:MDCSearch(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

    new userid;
	if (sscanf(inputtext, "u", userid))	return Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Ïîèñê ïî èìåíè", "{B4B5B7}ÏÎÈÑÊ ÏÎ ÈÌÅÍÈ\n\nÂâåäèòå èìÿ:\n\nÔîðìà ââîäà: Èìÿ_Ôàìèëèÿ (( èëè ID èãðîêà ))", "Done", "Ýptal");
	if (!IsPlayerLogged(userid))			return Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Ïîèñê ïî èìåíè", "{B4B5B7}ÏÎÈÑÊ ÏÎ ÈÌÅÍÈ\n\nÂâåäèòå èìÿ:\n\nÔîðìà ââîäà: Èìÿ_Ôàìèëèÿ (( èëè ID èãðîêà ))\n"EMBED_RED"Äàííûé ÷åëîâåê îòñóòñòâóåò â áàçå äàííûõ.", "Done", "Ýptal");

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `criminalrecords` WHERE `userid` = %i", PlayerInfo[userid][pID]);
	mysql_tquery(dbHandle, query, "PersonInfo", "ii", playerid, userid);
	return 1;
}*/

Dialog:MDCRecord(playerid, response, listitem, inputtext[])
{
	if (!response)												return 1;
	if (sscanf(inputtext, "u", pTemp[playerid][pMDCPlayer]))	return SendErrorMessage(playerid, "Oyuncu aktif deðil!");
	if (!IsPlayerLogged(pTemp[playerid][pMDCPlayer]))			return SendErrorMessage(playerid, "Eriþim için yetkiniz yok!");

	new mes[256];
	format(mes, sizeof(mes), "{B4B5B7}SUÇ\n\nSanýk: %s\n\nSuçlama metnini giriniz: (( Suç / 128 karakter))", GetNameEx(pTemp[playerid][pMDCPlayer]));
	Dialog_Show(playerid, MDCRecord2, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Ýddianame", mes, "Gir", "Ýptal");
	return 1;
}

Dialog:MDCRecord2(playerid, response, listitem, inputtext[])
{
	if (!response)										return 1;
    if (!IsPlayerLogged(pTemp[playerid][pMDCPlayer]))	return 1;

	if (strlen(inputtext) < 1 || strlen(inputtext) > 127)
	{
	    new mes[256];
		format(mes, sizeof(mes), "{B4B5B7}SUÇ\n\nSanýk: %s\n\nSuçlama metnini giriniz: (( Suç / 128 karakter))", GetNameEx(pTemp[playerid][pMDCPlayer]));
		Dialog_Show(playerid, MDCRecord2, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Ýddianame", mes, "Gir", "Ýptal");
		return 1;
	}

    AddCriminalRecord(pTemp[playerid][pMDCPlayer], inputtext, PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pFaction]);
    SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "[ARANIYOR] Sanýk: %s, Savcý: %s, Suç: %s.", GetNameEx(pTemp[playerid][pMDCPlayer]), GetNameEx(playerid), inputtext);
	SendWarningMessage(playerid, "Sanýk baþarýlý bir þekilde arananlar listesine eklendi.");
	pTemp[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	return 1;
}

Dialog:MDCAddWarn(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new userid;

    //if (sscanf(inputtext, "u", userid))	return Dialog_Show(playerid, MDCAddWarn, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Ïðåäóïðåæäåíèå íà ëèöåíçèþ", "{B4B5B7}ÄÎÁÀÂÈÒÜ ÏÐÅÄÓÏÐÅÆÄÅÍÈß ÍÀ ËÈÖÅÍÇÈÞ\n\nÂâåäèòå èìÿ:\n\n(( Èìÿ_Ôàìèëèÿ / ID èãðîêà ))\n"EMBED_RED"Äàííûé ÷åëîâåê îòñóòñòâóåò â áàçå äàííûõ.", "Done", "Ýptal");
	//if (!IsPlayerLogged(userid))			return Dialog_Show(playerid, MDCAddWarn, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Ïðåäóïðåæäåíèå íà ëèöåíçèþ", "{B4B5B7}ÄÎÁÀÂÈÒÜ ÏÐÅÄÓÏÐÅÆÄÅÍÈß ÍÀ ËÈÖÅÍÇÈÞ\n\nÂâåäèòå èìÿ:\n\n(( Èìÿ_Ôàìèëèÿ / ID èãðîêà ))\n"EMBED_RED"Äàííûé ÷åëîâåê îòñóòñòâóåò â áàçå äàííûõ.", "Done", "Ýptal");
    //if (!PlayerInfo[userid][pCarLic])	return Dialog_Show(playerid, MDCAddWarn, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Ïðåäóïðåæäåíèå íà ëèöåíçèþ", "{B4B5B7}ÄÎÁÀÂÈÒÜ ÏÐÅÄÓÏÐÅÆÄÅÍÈß ÍÀ ËÈÖÅÍÇÈÞ\n\nÂâåäèòå èìÿ:\n\n(( Èìÿ_Ôàìèëèÿ / ID èãðîêà ))\n"EMBED_RED"Ó äàííîãî ÷åëîâåêà îòñóòñòâóåò ëèöåíçèÿ íà âîæäåíèå.", "Done", "Ýptal");

	new mes[128];
	format(mes, sizeof(mes), ", %s adlý kiþinin ehliyetine uyarý verir.", GetNameEx(userid));
	pc_cmd_me(playerid, mes);

	SendSyntaxMessage(playerid, "%s adlý kiþinin ehliyetine uyarý eklediniz.", GetName(userid));

	PlayerInfo[userid][pDriveWarns]++;
	SQL_SetInteger("users", "drivewarns", PlayerInfo[userid][pDriveWarns], PlayerInfo[userid][pID]);

	if (PlayerInfo[userid][pDriveWarns] >= 3)
	{
		SendSyntaxMessage(playerid, "%s adlý kiþinin ehliyetinde 3 uyarý olduðu için otomatik olarak ehliyeti iptal edildi.", GetNameEx(userid));
		PlayerInfo[userid][pDriveWarns] = 0;
		PlayerInfo[userid][pCarLic] = 0;

		SQL_SetInteger("users", "drivewarns", PlayerInfo[userid][pDriveWarns], PlayerInfo[userid][pID]);
		SQL_SetInteger("users", "carlic", PlayerInfo[userid][pCarLic], PlayerInfo[userid][pID]);
	}
	return 1;
}

/*Dialog:MDCVehicle(playerid, response, listitem, inputtext[])
{
	if (!response)										return 1;
	if (!strlen(inputtext) || strlen(inputtext) > 23)	return Dialog_Show(playerid, MDCVehicle, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Ïîèñê àâòîìîáèëÿ", "{B4B5B7}ÏÎÈÑÊ ÈÍÔÎÐÌÀÖÈÈ ÎÁ ÀÂÒÎÌÎÁÈËÅ\n\nÂâåäèòå íîìåðíîé çíàê:\n\n(( Íîìåð ÒÑ ))", "Done", "Geri Dön");

	new query[156];
	mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id =cars.owner) as ownername FROM `cars` WHERE `plate` = '%e' AND `registered`=1", inputtext);
	mysql_tquery(dbHandle, query, "OnCheckNumber", "d", playerid);
	return 1;
}*/

Dialog:MDCWeaponPlayer(playerid, response, listitem, inputtext[])
{
	if (!response)	return ShowWeaponLicense(playerid, GetPVarInt(playerid, #weapon_list));

	if (listitem == 5)
	{
	    if (IsPlayerFactionPolice(playerid))	 return SendErrorMessage(playerid, "Bu iþlemi LSPD üyelerine gerçekleþtiremezsiniz.");
		if (PlayerInfo[playerid][pAuthwep] != 1) return SendErrorMessage(playerid, "Silah ruhsatýný iptal etme yetkin yok.");

		new userid;

	    if ((userid = GetIDByID(pTemp[playerid][pMDCWepPlayer])) != INVALID_PLAYER_ID)
		{
		    SendSyntaxMessage(userid, "%s %s silah ruhsatýný iptal etti.", GetRankName(playerid), GetNameEx(playerid));
			PlayerInfo[userid][pWepLic] = 0;
			PlayerInfo[userid][pWepWarns] = 0;
			PlayerInfo[userid][pWepCount] = 0;
		}
	    new query[156];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `weplic`='0',`wepwarns`='0',`wep_officer`='-',`wep_data`='-',`wep_price`='0',`wep_count`='0' WHERE `id` = %i", pTemp[playerid][pMDCWepPlayer]);
		mysql_tquery(dbHandle, query);

		SendSyntaxMessage(playerid, "%s silah ruhsatýný iptal ettin.", pTemp[playerid][pMDCWepName]);
	    return 1;
	}

	else if (listitem == 6)
	{
		new userid;
	    if ((userid = GetIDByID(pTemp[playerid][pMDCWepPlayer])) != INVALID_PLAYER_ID)
	    {
	        SendSyntaxMessage(userid, "%s %s silah ruhsatýna uyarý verdi.", GetRankName(playerid), GetNameEx(playerid));
			PlayerInfo[userid][pWepWarns]++;
		}

	    new query[256];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `wepwarns`= `wepwarns` + 1 WHERE `id` = %i", pTemp[playerid][pMDCWepPlayer]);
		mysql_tquery(dbHandle, query);

		SendSyntaxMessage(playerid, "%s silah ruhsatýna uyarý verdiniz.", pTemp[playerid][pMDCWepName]);
	    return 1;
	}

	ShowWeaponLicense(playerid, GetPVarInt(playerid, #weapon_list));
	return 1;
}

Dialog:ShowTrace(playerid, response, listitem, inputtext[])
{
	if (pTemp[playerid][pTraceStage] < 7)
	{
		Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "Ýzleme Sistemi - Çýkmak için ESC / ENTER tuþuna basýn", "{B4B5B7}Takip sisteminden çýkýþ yaptýnýz.", "Onayla", "");

		if (pTemp[playerid][pTraceGZ] != -1)	GangZoneDestroy(pTemp[playerid][pTraceGZ]);

		pTemp[playerid][pTraceGZ] = -1;
		pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
 		pTemp[playerid][pTraceStage] = 0;
	}
	return 1;
}

Dialog:DialogLSPDEkipman(playerid, response, listitem, inputtext[])
{
	if (!response)															return pc_cmd_isbasi(playerid, "");
    if (!IsPlayerFactionPolice(playerid))									return 1;
	if (!PlayerInfo[playerid][pOnDuty])										return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
    new locker_id = GetPlayerNearestLocker(playerid);
	if(locker_id < 1) return SendErrorMessage(playerid, "Bu komutu kullanmak için ekipman dolabýna yakýn olmalýsýnýz.");

	if(response)
	{
		if(OlusumTipGetir(PlayerInfo[playerid][pFaction]) == FACTION_POLICE && PlayerInfo[playerid][pOnDuty])
		{
			switch(listitem)
			{
				case 0:
				{ // patrol
					AC_ResetPlayerWeapons(playerid);
					AC_GivePlayerWeapon(playerid, 3, 1);
					AC_GivePlayerWeapon(playerid, 24, 100);
					AC_GivePlayerWeapon(playerid, 41, 1000);
					PlayerInfo[playerid][pHealth] = 100;
					SetPlayerArmour(playerid, 100);
				}
				case 1:
				{ // dedektif
					AC_ResetPlayerWeapons(playerid);
					AC_GivePlayerWeapon(playerid, 24, 100);
					AC_GivePlayerWeapon(playerid, 43, 500);
					PlayerInfo[playerid][pHealth] = 100;
				}
				case 2:
				{ // SWAT
					if(PlayerInfo[playerid][pRank] < 17 && !PlayerInfo[playerid][pOlusumDivision][1]) return SendServerMessage(playerid, "Bu komutu kullanmak için yetkiniz bulunmuyor.");
					AC_ResetPlayerWeapons(playerid);
					AC_GivePlayerWeapon(playerid, 24, 500);
					AC_GivePlayerWeapon(playerid, 17, 10);
					AC_GivePlayerWeapon(playerid, 31, 300);

					PlayerInfo[playerid][pHealth] = 200;
					SetPlayerArmour(playerid, 100);
					SendClientMessageEx(playerid, -1, "SWAT olarak kuþandýðýnýz zýrhýn patrol üzerinde kullanýmý, yasaklama ile sonuçlanabilir. Dikkatli olun.");
				}
				case 3:
				{
					AC_ResetPlayerWeapons(playerid);
					SendServerMessage(playerid, "Görev silahlarýný teslim ettiniz.");
				}
			}
			GameTextForPlayer(playerid, "~g~+", 1500, 4);
		} else return SendErrorMessage(playerid, "Ýþbaþýnda deðilsiniz.");
	}
	return 1;
}

Dialog:LSPDArmoury(playerid, response, listitem, inputtext[])
{
	if (!response)															return pc_cmd_isbasi(playerid, "");
    new locker_id = GetPlayerNearestLocker(playerid);
	if(locker_id < 1) return SendErrorMessage(playerid, "Bu komutu kullanmak için ekipman dolabýna yakýn olmalýsýnýz.");

	switch(listitem) {
		case 0: {
			return Dialog_Show(playerid, DialogLSPDEkipman, DIALOG_STYLE_TABLIST_HEADERS, "PD/SD Ekipman Menüsü", "Ýsim\tAçýklama\nDevriye Ekipmaný\tStandart devriye ekipmanlarý.\nDedektif Ekipmaný\tStandart dedektif ekipmanlarý.\nSWAT\tSWAT ekipmanlarý(Sadece SWAT'a özel)\nTeslimat\tGörev silahlarýný teslim edebilirsin", "Seç", "Ýptal");
		}
		case 1: {
			if (!PlayerInfo[playerid][pSwat]&& !isLeader(playerid)) return SendErrorMessage(playerid, "S.W.A.T. sizin için uygun deðil!");
            if (!PlayerInfo[playerid][pSwatDuty])	return SendErrorMessage(playerid, "Bu ekipman SWAT tarafýndan kullanýlabilir.");
			if (!PlayerInfo[playerid][pSwatDuty])
			{
				PlayerInfo[playerid][pSwatDuty] = 1;
				SetPlayerArmour(playerid, 150);
				PlayerInfo[playerid][pChar] = (!IsPlayerFactionPolice(playerid))?(287):(285);
				SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
				SetPlayerColor(playerid, RemoveAlpha(Factions[PlayerInfo[playerid][pFaction]][fColor]));
				SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: %s %s SWAT ekibine katýldý **",GetRankName(playerid), GetNameEx(playerid));
				return 1;
			}

			PlayerInfo[playerid][pSwatDuty] = 0;
			SetPlayerArmour(playerid, 100);
			PlayerInfo[playerid][pChar] = 0;
			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: %s %s SWAT ekibinden çýktý. **",GetRankName(playerid), GetNameEx(playerid));
		}
	}

	return 1;
}

Dialog:MDCSearchPerson(playerid, response, listitem, inputtext[])
{
	if (!response)
		return 1;

	new
		userid,
		query[256]
	;

	if (sscanf(inputtext, "u", userid))
		return Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "{8D8DFF}MDC  - Ýsime Göre Ara", "{B4B5B7}ÝSME GÖRE KÝÞÝ ARAYIN\n\nÝsim Girin:\n\nFormu Doldurun: Ad_Soyad ((veya oyuncu ID))", "Seç", "Ýptal");

	if (!IsPlayerLogged(userid))
	{
		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%e' LIMIT 1", inputtext);
		mysql_tquery(dbHandle, query, "MDCSearchPersonInfo", "i", playerid);
		return 1;
	}

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `id` = %i LIMIT 1", PlayerInfo[userid][pID]);
	mysql_tquery(dbHandle, query, "MDCSearchPersonInfo", "i", playerid);
	return 1;
}

Dialog:MDCSearchVehicleType(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	switch(listitem)
	{
		case 0:
		{
			Dialog_Show(playerid, MDCSearchVehiclePlayer, DIALOG_STYLE_INPUT, "{8D8DFF}MDC  - Taþýt Arama", "{B4B5B7}ARAÇ HAKKINDA BÝLGÝ ARAYIN\n\nÝsim Girin:\n\nFormu Doldurun: Ad_Soyad ((veya oyuncu ID))", "Seç", "Geri Dön");
		}
		case 1:
		{
			Dialog_Show(playerid, MDCSearchVehicleNum, DIALOG_STYLE_INPUT, "{8D8DFF}MDC  - Taþýt Arama", "{B4B5B7}ARAÇ HAKKINDA BÝLGÝ ARAYIN\n\nPlakayý Giriniz:\n\n(( Araç Plakasý ))", "Seç", "Geri Dön");
		}
	}

	return 1;
}

Dialog:MDCSearchVehiclePlayer(playerid, response, listitem, inputtext[])
{
	if (!response)
		return Dialog_Show(playerid, MDCSearchVehicleType, DIALOG_STYLE_TABLIST, "{8D8DFF}MDC  - Taþýt Arama", "Kiþiye Göre Taþýt Arama\nPlakaya Göre Taþýt Arama", "Seç", "Geri Dön");

    new
		userid,
		query[164]
	;

	if (sscanf(inputtext, "u", userid))
		return Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "{8D8DFF}MDC  - Taþýt Arama", "{B4B5B7}ARAÇ HAKKINDA BÝLGÝ ARAYIN\n\nÝsim Girin:\n\nFormu Doldurun: Ad_Soyad  ((veya oyuncu ID))", "Seç", "Geri Dön");

	SetPVarInt(playerid, #MDC_VEH_BACK, 1);
	MdcInfo[playerid][mdcListPage] = 0;

	if (!IsPlayerLogged(userid))
	{
		mysql_format(dbHandle, query, sizeof(query), "SELECT `id` FROM `users` WHERE `name` = '%e' LIMIT 1", inputtext);
		mysql_tquery(dbHandle, query, "MDCSearchVehiclesList_GetID", "i", playerid);
		return 1;
	}

	mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = cars.owner) as ownername FROM `cars` WHERE `owner` = %i AND `registered`=1 LIMIT 3", PlayerInfo[userid][pID]);
	mysql_tquery(dbHandle, query, "MDCSearchVehiclesList", "i", playerid);
	return 1;
}

Dialog:MDCSearchVehicleNum(playerid, response, listitem, inputtext[])
{
	if (!response)
		return Dialog_Show(playerid, MDCSearchVehicleType, DIALOG_STYLE_TABLIST, "{8D8DFF}MDC  - Taþýt Arama", "Kiþiye Göre Taþýt Arama\nNumaraya Göre Taþýt Arama", "Seç", "Geri Dön");

	if (!strlen(inputtext) || strlen(inputtext) > 10)
	{
		PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], "_________________"); //ñòðîêà ïîèñêà

		for(new a = 0; a < 2; a++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_AVATAR[playerid][a]);
		for(new b = 0; b < 12; b++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_PERSON[playerid][b]);

		for(new c = 0; c < 3; c++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][c]);
        for(new g = 0; g < 3; g++)  PlayerTextDrawHide(playerid, MDC_VEH_LIST_CLICK[playerid][g]);
		for(new d = 0; d < 12; d++)  PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_LIST[playerid][d]);

		MdcInfo[playerid][mdcPage] = PAGE_LOOKUP;
		return PlayerTextDrawShow(playerid, MDC_LOOKUP_ERROR[playerid]);
	}

	SetPVarInt(playerid, #MDC_VEH_BACK, 0);

	SetPVarString(playerid, #MDC_VEHICLE_NUM, inputtext);
	PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], inputtext);

	new query[156];
	mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = cars.owner) as ownername FROM `cars` WHERE `plate` = '%e' AND `registered`=1", inputtext);
	mysql_tquery(dbHandle, query, "MDCSearchVehicle", "i", playerid);
	return 1;
}

Dialog:MDC_Record(playerid, response, listitem, inputtext[])
{
	if (!response)												return 1;
	if (sscanf(inputtext, "u", pTemp[playerid][pMDCPlayer]))	return Dialog_Show(playerid, MDC_Record, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Ýddianame", "{B4B5B7}DOLDURULUYOR\n\nÝsim Girin:\n\nFormu Doldurun: Ad_Soyad ((veya oyuncu ID))", "Seç", "Ýptal");
	if (!IsPlayerLogged(pTemp[playerid][pMDCPlayer]))			return Dialog_Show(playerid, MDC_Record, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Ýddianame", "{B4B5B7}DOLDURULUYOR\n\nÝsim Girin:\n\nFormu Doldurun: Ad_Soyad ((veya oyuncu ID))\n"EMBED_RED"This person is not in the database.", "Seç", "Ýptal");

	new mes[256];
	format(mes, sizeof(mes), "{B4B5B7}DOLDURULUYOR\n\nSanýk: %s\n\nÝþlenilen Suçu Giriniz: (( Ýfade / 128 Karakter))", GetNameEx(pTemp[playerid][pMDCPlayer]));
	Dialog_Show(playerid, MDC_Record2, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Iddianame", mes, "Giriþ", "Ýptal");
	return 1;
}

Dialog:MDC_Record2(playerid, response, listitem, inputtext[])
{
	if (!response)										return 1;
    if (!IsPlayerLogged(pTemp[playerid][pMDCPlayer]))	return 1;
	if (CheckTextDrawString(inputtext))					return SendErrorMessage(playerid, "'~' bu karakter kullanýlamaz.");

	if (strlen(inputtext) < 1 || strlen(inputtext) > 127)
	{
	    new mes[256];
		format(mes, sizeof(mes), "{B4B5B7}DOLDURULUYOR\n\nSanýk: %s\n\nÝþlenilen Suçu Giriniz: (( Ýfade / 128 Karakter))", GetNameEx(pTemp[playerid][pMDCPlayer]));
		Dialog_Show(playerid, MDC_Record2, DIALOG_STYLE_INPUT, "{8D8DFF}MDC - Iddianame", mes, "Giriþ", "Ýptal");
		return 1;
	}

    AddCriminalRecord(pTemp[playerid][pMDCPlayer], inputtext, PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pFaction]);
    SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "[ARANAN] Sanýk: %s, Davacý: %s, Suç: %s.", GetNameEx(pTemp[playerid][pMDCPlayer]), GetNameEx(playerid), inputtext);
	SendWarningMessage(playerid, "Sanýk baþarýyla arananlar listesine eklendi.");
	pTemp[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	return 1;
}

Dialog:MDC_Add_Note(playerid, response, listitem, inputtext[])
{
	if (!response)											return 1;
	if (strlen(inputtext) < 1 || strlen(inputtext) > 127)	return Dialog_Show(playerid, MDC_Add_Note, DIALOG_STYLE_INPUT, "{8D8DFF}MDC  - Araç Kaydý Ekleniyor", "{B4B5B7}ARAC KAYDI EKLENIYOR\n\nNotunuzu Giriniz:", "Tamamla", "Geri");
	if (CheckTextDrawString(inputtext))						return SendErrorMessage(playerid, "'~' bu karakter kullanýlamaz.");

	new string[7],
		query[200],
		plates[24];

	GetPVarString(playerid, #MDC_VEHICLE_NUM, plates, 24);

	format(string, sizeof(string), "note%i", GetPVarInt(playerid, #MDC_FREE_NOTE));

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `%s` = '%e %s' WHERE `plate` = '%e'", string, inputtext, GetFullDate(), plates);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = cars.owner) as ownername FROM `cars` WHERE `plate` = '%e' AND `registered`=1", plates);
	mysql_tquery(dbHandle, query, "MDCSearchVehicle", "i", playerid);

	return 1;
}

Dialog:MDC_Del_Note(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new string[7],
		query[200],
		plates[24];

	GetPVarString(playerid, #MDC_VEHICLE_NUM, plates, 24);

	format(string, sizeof(string), "note%i", listitem+1);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `%e` = 'None' WHERE `plate` = '%e'", string, plates);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id = cars.owner) as ownername FROM `cars` WHERE `plate` = '%e' AND `registered`=1", plates);
	mysql_tquery(dbHandle, query, "MDCSearchVehicle", "i", playerid);

	return 1;
}

Dialog:MDC_ROSTER_CHANGE(playerid, response, listitem, inputtext[])
{
	if (!response)						return 1;
	if (isnull(inputtext))				return Dialog_Show(playerid, MDC_ROSTER_CHANGE, DIALOG_STYLE_INPUT, "Callsign Deðiþtir", "{FFFFFF}Yeni callsign giriniz:", "Onayla", "Ýptal");
	if (CheckTextDrawString(inputtext))	return SendErrorMessage(playerid, "'~' bu karakter kullanýlamaz.");

	pc_cmd_ekip(playerid, inputtext);
	MDC_PAGE(playerid, PAGE_ROSTER);
	return 1;
}

Dialog:APB_CREATE_FIRST(playerid, response, listitem, inputtext[])
{
	if (!response)											return DeletePVar(playerid, #MDC_ID);
	if (strlen(inputtext) < 1 || strlen(inputtext) > 23)		return Dialog_Show(playerid, APB_CREATE_FIRST, DIALOG_STYLE_INPUT, "{098d18}APB Oluþturma", "{B4B5B7}Þüpheli adýný girin:\n- Maksimum karakter sayýsý: 24", ">>>", "Ýptal");
	if (CheckTextDrawString(inputtext))						return SendErrorMessage(playerid, "'~' bu karakter kullanýlamaz.");

	new apb = GetPVarInt(playerid, #MDC_ID);

	format(ApbInfo[apb][apbOfficer], MAX_PLAYER_NAME, "%s", GetNameEx(playerid));
	format(ApbInfo[apb][apbSuspect], MAX_PLAYER_NAME, "%s", inputtext);
	ApbInfo[apb][apbFaction] = PlayerInfo[playerid][pFaction];
	format(ApbInfo[apb][apbDate], 32, "%s", GetFullDate());

	Dialog_Show(playerid, APB_CREATE_SECOND, DIALOG_STYLE_INPUT, "{098d18}APB Oluþturma", "{B4B5B7}Þüphelinin açýklamasýný giriniz:\n- Maksimum karakter sayýsý: 128", "Tamamla", "Geri Dön");
	return 1;
}

Dialog:APB_CREATE_SECOND(playerid, response, listitem, inputtext[])
{
	if (!response)											return Dialog_Show(playerid, APB_CREATE_FIRST, DIALOG_STYLE_INPUT, "{098d18}APB Oluþturma", "{B4B5B7}Þüpheli adýný girin:\n- Maksimum karakter sayýsý: 24", ">>>", "Ýptal");
	if (strlen(inputtext) < 1 || strlen(inputtext) > 127)	return Dialog_Show(playerid, APB_CREATE_SECOND, DIALOG_STYLE_INPUT, "{098d18}APB Oluþturma", "{B4B5B7}Þüphelinin açýklamasýný giriniz:\n- Maksimum karakter sayýsý: 128", "Tamamla", "Geri Dön");
	if (CheckTextDrawString(inputtext))						return SendErrorMessage(playerid, "'~' bu karakter kullanýlamaz.");

	new apb = GetPVarInt(playerid, #MDC_ID);
	format(ApbInfo[apb][apbCharge], 128, "%s", inputtext);

	SendSyntaxMessage(playerid, "Bir APB notu oluþturdun [ID: %i].", apb);
	SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "* HQ: %s %s yeni bir APB notu ekledi, numara %i.", GetRankName(playerid), GetNameEx(playerid), apb);

	new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `apbs` (faction, charge, suspect, officer, date) VALUES (%i, '%s', '%s', '%s', '%s')", ApbInfo[apb][apbFaction], SQL_ReturnEscaped(ApbInfo[apb][apbCharge]), SQL_ReturnEscaped(ApbInfo[apb][apbSuspect]), GetNameEx(playerid), GetFullDate());
	mysql_tquery(dbHandle, query, "ApbCreate", "i", apb);

	DeletePVar(playerid, #MDC_ID);

	MdcInfo[playerid][mdcPage] = PAGE_NONE;
	Update_MDC(playerid, PAGE_APB);
	MDC_PAGE(playerid, PAGE_APB);
	return 1;
}

Dialog:MDC_APB_SEARCH_NAME(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], inputtext);
	PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);
	for(new b = 0; b < 3; b++) PlayerTextDrawHide(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);
	for(new apb = 0; apb < 20; apb++)  PlayerTextDrawHide(playerid, MDC_APB_TD[playerid][apb]);

	SetPVarString(playerid, #MDC_APB_TEXT, inputtext);

	new count,
		string[256];

	for(new i = MAX_APBS-1; i >= 0; i--)
	{
		if (ApbInfo[i][apbOn] != 0 && strfind(ApbInfo[i][apbSuspect], inputtext, true) != -1)
		{
			if (count < 5)
			{
				format(string, sizeof(string), "%s, #%i~n~%.60s%s~n~%s, %s", ApbInfo[i][apbSuspect], ApbInfo[i][apbID]+90214, ApbInfo[i][apbCharge], (strlen(ApbInfo[i][apbCharge]) > 60)?("_.."):("_"), ApbInfo[i][apbOfficer], ApbInfo[i][apbDate]);
				PlayerTextDrawSetString(playerid, MDC_APB_TD[playerid][count*4+1], string);

				MdcInfo[count][mdcList] = i;

				for(new j = count*4; j < count*4+4; j++) PlayerTextDrawShow(playerid, MDC_APB_TD[playerid][j]);
			}
			count++;
		}
	}

	if (!count)	return PlayerTextDrawShow(playerid, MDC_LOOKUP_ERROR[playerid]);

	if (count > 5)
	{
		for(new b = 0; b < 3; b++)
		{
			PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);
			PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);
		}

		count = floatround(float(count)/5.0, floatround_ceil);
		SetPVarInt(playerid, #MAX_MDC_PAGE, count);


		format(string, sizeof(string), "1_/_%i", count);
		PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], string);

		SetPVarInt(playerid, #MDC_APB_S, 1);
		MdcInfo[playerid][mdcListPage] = 0;
	}

	return 1;
}

Dialog:MDC_APB_SEARCH_CHARGE(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	PlayerTextDrawSetString(playerid, MDC_LOOKUP_SEARCH[playerid][2], inputtext);
	PlayerTextDrawHide(playerid, MDC_LOOKUP_ERROR[playerid]);
	for(new b = 0; b < 3; b++)
	{
		PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);
		PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);
	}
	for(new apb = 0; apb < 20; apb++)  PlayerTextDrawHide(playerid, MDC_APB_TD[playerid][apb]);

	SetPVarString(playerid, #MDC_APB_TEXT, inputtext);

	new
		count,
		string[256]
	;

	for(new i = MAX_APBS-1; i >= 0; i--)
	{
		if (ApbInfo[i][apbOn] != 0 && strfind(ApbInfo[i][apbCharge], inputtext, true) != -1)
		{
			if (count < 5)
			{
				format(string, sizeof(string), "%s, #%i~n~%.60s%s~n~%s, %s", ApbInfo[i][apbSuspect], ApbInfo[i][apbID]+90214, ApbInfo[i][apbCharge], (strlen(ApbInfo[i][apbCharge]) > 60)?("_.."):("_"), ApbInfo[i][apbOfficer], ApbInfo[i][apbDate]);
				PlayerTextDrawSetString(playerid, MDC_APB_TD[playerid][count*4+1], string);

				MdcInfo[count][mdcList] = i;

				for(new j = count*4; j < count*4+4; j++) PlayerTextDrawShow(playerid, MDC_APB_TD[playerid][j]);
			}
			count++;
		}
	}

	if (!count)	return PlayerTextDrawShow(playerid, MDC_LOOKUP_ERROR[playerid]);

	if (count > 5)
	{
		for(new b = 0; b < 3; b++)
			PlayerTextDrawShow(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][b]);

		count = floatround(float(count)/5.0, floatround_ceil);
		SetPVarInt(playerid, #MAX_MDC_PAGE, count);

		format(string, sizeof(string), "1_/_%i", count);
		PlayerTextDrawSetString(playerid, MDC_LOOKUP_VEHICLES_ARROWS[playerid][0], string);

		SetPVarInt(playerid, #MDC_APB_S, 1);
		MdcInfo[playerid][mdcListPage] = 0;
	}

	return 1;
}

Dialog:MDC_APB_DETAIL(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	Dialog_Show(playerid, MDC_APB_OPTIONS, DIALOG_STYLE_TABLIST, "{098d18}APB Düzenleme", "'Þüpheli' satýrýný düzenleyin\n'Açýklama' satýrýný düzenleyin", "Seç", "Geri Dön");
	return 1;
}

Dialog:MDC_APB_OPTIONS(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		new
			mes[256],
			i_apb = MdcInfo[GetPVarInt(playerid, #MDC_ID)][mdcList]
		;

		format(mes, sizeof(mes), "{a9c4e4}#%i\n\n{a9c4e4}Þüpheli:{ffffff}\t %s\n{a9c4e4}Açýklama:{ffffff}\t\t %s\n\n{a9c4e4}Oluþturan:{ffffff}\t\t %s\n{a9c4e4}Tarih:{ffffff}\t\t\t %s\n", ApbInfo[i_apb][apbID]+90214, ApbInfo[i_apb][apbSuspect], ApbInfo[i_apb][apbCharge], ApbInfo[i_apb][apbOfficer], ApbInfo[i_apb][apbDate]);
		Dialog_Show(playerid, MDC_APB_DETAIL, DIALOG_STYLE_MSGBOX, "{098d18}APB Düzenleme", mes, "Düzenle", "Ýptal");
		return 1;
	}

	switch(listitem)
	{
		case 0:
		{
			Dialog_Show(playerid, APB_EDIT_NAME, DIALOG_STYLE_INPUT, "{098d18}APB Düzenleme", "{B4B5B7}Þüpheli adýný girin:\n- Maksimum karakter sayýsý: 24", "Tamamla", "Geri");
		}

		case 1:
		{
			Dialog_Show(playerid, APB_EDIT_CHARGE, DIALOG_STYLE_INPUT, "{098d18}APB Düzenleme", "{B4B5B7}Þüphelinin açýklamasýný giriniz:\n- Maksimum karakter sayýsý: 128", "Tamamla", "Geri");
		}
	}

	return 1;
}

Dialog:APB_EDIT_NAME(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, MDC_APB_OPTIONS, DIALOG_STYLE_TABLIST, "{098d18}APB Düzenleme", "'Þüpheli' satýrýný düzenleyin\n'Açýklama' satýrýný düzenleyin", "Seç", "Geri Dön");

	if (strlen(inputtext) < 1 || strlen(inputtext) > 127)	Dialog_Show(playerid, APB_EDIT_NAME, DIALOG_STYLE_INPUT, "{098d18}APB Düzenleme", "{B4B5B7}Þüpheli adýný girin:\n- Maksimum karakter sayýsý: 24", "Tamamla", "Geri");
	if (CheckTextDrawString(inputtext))						return SendErrorMessage(playerid, "'~' bu karakter kullanýlamaz.");

	new number = GetPVarInt(playerid, #MDC_ID);

	SendSyntaxMessage(playerid, "APB notunu düzenlediniz [ID: %i].", number);
	SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "* HQ: %s %s %i numaralý APB notunu düzenledi.", GetRankName(playerid), GetNameEx(playerid), number);

	new query[256];
	mysql_format(dbHandle,query, sizeof(query), "UPDATE `apbs` SET `suspect` = '%e' WHERE `id` = %i", SQL_ReturnEscaped(inputtext), ApbInfo[number][apbID]);
	mysql_tquery(dbHandle, query);

	DeletePVar(playerid, #MDC_ID);
	return 1;
}

Dialog:APB_EDIT_CHARGE(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, MDC_APB_OPTIONS, DIALOG_STYLE_TABLIST, "{098d18}APB Düzenleme", "'Þüpheli' satýrýný düzenleyin\n'Açýklama' satýrýný düzenleyin", "Seç", "Geri Dön");

	if (strlen(inputtext) < 1 || strlen(inputtext) > 23)	return Dialog_Show(playerid, APB_EDIT_CHARGE, DIALOG_STYLE_INPUT, "{098d18}APB Düzenleme", "{B4B5B7}Þüphelinin açýklamasýný giriniz:\n- Maksimum karakter sayýsý: 128", "Tamamla", "Geri");
	if (CheckTextDrawString(inputtext))						return SendErrorMessage(playerid, "'~' bu karakter kullanýlamaz.");

	new number = GetPVarInt(playerid, #MDC_ID);

	SendSyntaxMessage(playerid, "APB notunu deðiþtirdiniz [NUMARA: %i].", number);
	SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "* HQ: %s %s %i numaralý APB notunu düzenledi.", GetRankName(playerid), GetNameEx(playerid), number);

	new query[128 + 50];
	mysql_format(dbHandle,query, sizeof(query), "UPDATE `apbs` SET `charge` = '%s' WHERE `id` = %i", SQL_ReturnEscaped(inputtext), ApbInfo[number][apbID]);
	mysql_tquery(dbHandle, query);

	DeletePVar(playerid, #MDC_ID);
	return 1;
}

stock RadarHud_Goster(playerid)
{
	PlayerTextDrawShow(playerid, Dashcam[playerid][0]);
	PlayerTextDrawShow(playerid, Dashcam[playerid][1]);
	return 1;
}

stock RadarHud_Gizle(playerid)
{
	PlayerTextDrawHide(playerid, Dashcam[playerid][0]);
	PlayerTextDrawHide(playerid, Dashcam[playerid][1]);
	return 1;
}

stock RadarHud_Sil(playerid)
{
	PlayerTextDrawDestroy(playerid, Dashcam[playerid][0]);
	PlayerTextDrawDestroy(playerid, Dashcam[playerid][1]);
	return 1;
}

stock RadarHud_TD(playerid)
{
	Dashcam[playerid][0] = CreatePlayerTextDraw(playerid, 344.000, -1.000, "mdl-2677:dashcam");
	PlayerTextDrawTextSize(playerid, Dashcam[playerid][0], 173.000, 111.000);
	PlayerTextDrawAlignment(playerid, Dashcam[playerid][0], 1);
	PlayerTextDrawColor(playerid, Dashcam[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, Dashcam[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Dashcam[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, Dashcam[playerid][0], 255);
	PlayerTextDrawFont(playerid, Dashcam[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, Dashcam[playerid][0], 1);

	Dashcam[playerid][1] = CreatePlayerTextDraw(playerid, 388.000, 39.000, "Model: LSPD Crown Victoria~n~Plaka: 35ABZ5854~n~Hiz: 250 km/h");
	PlayerTextDrawLetterSize(playerid, Dashcam[playerid][1], 0.170, 0.999);
	PlayerTextDrawAlignment(playerid, Dashcam[playerid][1], 1);
	PlayerTextDrawColor(playerid, Dashcam[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, Dashcam[playerid][1], 1);
	PlayerTextDrawSetOutline(playerid, Dashcam[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Dashcam[playerid][1], 150);
	PlayerTextDrawFont(playerid, Dashcam[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, Dashcam[playerid][1], 1);

    return 1;
}

RadarHud_OnGameModeInit()
{
	for (new i = 1; i < MAX_VEHICLES; i++)
	{
	    VehRadarID[i] = -1;
	    CheckingSpeed[i] = 0;
	}

	return 1;
}

GetVehicleInfrontID (vehid)
{
    new Float: temp = 12.0;
	new j = 0;
	for (new i = 1; i <= MAX_VEHICLES; i++)
	{
	    new Float: a, Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2;
    	GetVehiclePos (vehid, x1, y1, z1);
    	GetVehicleZAngle (vehid, a);
 		if (i != vehid)
 		{
	 		if (GetVehiclePos (i, x2, y2, z2))
			{
				new Float: distance = floatsqroot (floatpower ((x1 - x2), 2) + floatpower ((y1 - y2), 2) + floatpower ((z1 - z2), 2));
				GetVehicleZAngle (vehid, a);

				if (distance < 150.0)
				{
    				x1 = x1 + (distance * floatsin(-a, degrees));
					y1 = y1 + (distance * floatcos(-a, degrees));

					distance = floatsqroot ((floatpower ((x1 - x2), 2)) + (floatpower ((y1 - y2), 2)));

					if (temp > distance)
					{
						temp = distance;
						j = i;
					}
				}
			}
		}
	}
	if (temp < 20.0) return j;
	return -1;
}

UpdateSpeed(playerid, vehid)
{
    new id = GetVehicleInfrontID (vehid);
	if (id < 0 || id == 0)
	{
		PlayerTextDrawSetString(playerid, Dashcam[playerid][1],"~b~MODEL:~w~ N/A~n~~b~PLAKA:~w~ N/A~n~~b~HIZ:~w~ N/A");
	}
	else
	{
		new str[128],
            plates[16],
            speed = GetVehicleSpeed(id);

        format(plates, sizeof(plates), "%s", VehicleInfo[id][carPlate]);

        format (str, sizeof (str), "~b~MODEL:~w~ %s ~n~~b~PLAKA: ~w~%s~n~~b~HIZ:~w~ %d km/h", GetVehicleModelName(VehicleInfo[id][carModel]), plates, speed);
		PlayerTextDrawSetString(playerid, Dashcam[playerid][1], str);
	}

 	if (IsPlayerInVehicle(playerid, vehid))  	RadarHud_Gizle(playerid);
    else                                    	RadarHud_Goster(playerid);

	return 1;
}

CheckValidTextDraws(playerid)
{
	if (IsPlayerConnected (playerid))
	{
	    if (IsPlayerInAnyVehicle (playerid))
		{
			new vehid = GetPlayerVehicleID(playerid);
		    if (CheckingSpeed[vehid])
		    {
                UpdateSpeed(playerid, vehid);
		        RadarHud_Goster(playerid);
		    }
		    else
		    {
		        RadarHud_Gizle(playerid);
		    }
		}

		else
		{
		    RadarHud_Gizle(playerid);
		    OldVehID[playerid] = 0;
		}
	}
	return 1;
}

Radar_OnPlayerStateChange(playerid, newstate, oldstate)
{
	if ((oldstate == PLAYER_STATE_ONFOOT) && (newstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_DRIVER))
	{
	    OldVehID [playerid] = GetPlayerVehicleID (playerid);
	}
	return 1;
}

Radar_OnVehicleDeath(vehicleid)
{
    DestroyObject (VehRadarID [vehicleid]);
    VehRadarID [vehicleid] = -1;
  	CheckingSpeed [vehicleid] = 0;

 	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerInVehicle(i, vehicleid))    RadarHud_Gizle(i);
	}
}

CMD:taser(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction) && !IsFactionDocs(faction))	return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru olmalýsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])							return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

	if (!pTemp[playerid][pTaser])
	{
		AC_RemovePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][2]);
		AC_GivePlayerWeapon(playerid, 23, 3);
		pTemp[playerid][pTaser] = 1;
		SetPlayerChatBubble(playerid, "teçhizat kemerinden taseri çýkartýr.", COLOR_PURPLE, 20.0, 4000);
		SM1(playerid, "Taseri çýkarttýnýz.");
	    return 1;
	}

	AC_RemovePlayerWeapon(playerid, 23);
	if(OlusumTipGetir(PlayerInfo[playerid][pFaction] != FACTION_CITY))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) AC_GivePlayerWeapon(playerid, 24, 100);
		else AC_GivePlayerWeapon(playerid, 22, 100); // pistol
	}

    pTemp[playerid][pTaser] = 0;
	SetPlayerChatBubble(playerid, "taseri teçhizat kemerine takar.", COLOR_PURPLE, 20.0, 4000);
	SM1(playerid, "Taseri geri koydunuz.");
	return 1;
}

CMD:beanbag(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
    new vehicle = GetPlayerVehicleID(playerid), string[128];

	if (!IsDriver(playerid))	return SendNotInVehicle(playerid);
	if (!IsFactionPolice(faction) && !IsFactionDocs(faction))	return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru olmalýsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])							return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if (VehicleInfo[vehicle][carFaction] != faction) return SendErrorMessage(playerid, "Bu devlet aracý deðil.");
	if (pTemp[playerid][pLTL])                                  return pc_cmd_ltl(playerid, "");

	if (!pTemp[playerid][pBeanbag])
	{
		AC_GivePlayerWeapon(playerid, 25, 50);
		pTemp[playerid][pBeanbag] = 1;
		SetPlayerChatBubble(playerid, "beanbag tüfeðini çýkarýr.", COLOR_PURPLE, 20.0, 4000);
		SM1(playerid, "Beanbag çýkardýnýz.");
	    return 1;
	}

	AC_RemovePlayerWeapon(playerid, 25);
    pTemp[playerid][pBeanbag] = 0;
	SetPlayerChatBubble(playerid, "beanbag tüfeðini sýrtýna asar.", COLOR_PURPLE, 20.0, 4000);
	SM1(playerid, "Beanbagi geri koydunuz.");
	return 1;
}

CMD:ltl(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction) && !IsFactionDocs(faction))	return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru olmalýsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])							return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if (pTemp[playerid][pBeanbag])                              return pc_cmd_beanbag(playerid, "");

	if (!pTemp[playerid][pLTL])
	{
		AC_GivePlayerWeapon(playerid, 33, 10);
		pTemp[playerid][pLTL] = 1;
		SetPlayerChatBubble(playerid, "LTL tüfeðini çýkarýr.", COLOR_PURPLE, 20.0, 4000);
		SM1(playerid, "LTL çýkardýnýz.");
	    return 1;
	}

	SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);

	AC_RemovePlayerWeapon(playerid, 33);
    pTemp[playerid][pLTL] = 0;
	SM1(playerid, "LTL'i geri koydunuz.");
	return 1;
}

alias:bagajdanal("pdsilah", "pdbagaj");
CMD:bagajdanal(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction) && !IsFactionDocs(faction))	return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru olmalýsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])							return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

	new cid = Arac_Yakin(playerid, 4.0);
	if(cid == -1) return SendServerMessage(playerid, "Aracýn içinde veya yakýnýnda deðilsin.");
	if(PlayerInfo[playerid][pFaction] != VehicleInfo[cid][carFaction] && PlayerInfo[playerid][pOnDuty]) return SendClientMessageEx(playerid, COLOUR_TOMATO, "Araç: {FFFFFF}Bu aracýn bulunduðu oluþumda veya iþbaþýnda deðilsin.");
	new slot, string[128];
	if(!PlayerInfo[playerid][pOnDuty]) return SendClientMessageEx(playerid, COLOUR_TOMATO, "Araç: {FFFFFF}Bunu yapabilmek için iþ baþýnda olmalýsýn.");
//  if(VehicleInfo[cid][vOwner] != -1) return SendErrorMessage(playerid, "Sahibi olan araçlarda bunu yapamazsýn.");
	if(VehicleInfo[cid][carFaction] == -1 || (OlusumTipGetir(VehicleInfo[cid][carFaction]) != FACTION_POLICE && OlusumTipGetir(VehicleInfo[cid][carFaction]) != FACTION_CITY)) return SendClientMessageEx(playerid, COLOUR_TOMATO, "Araç: {FFFFFF}Oluþumlara atanmasý yapýlmamýþ araçlarda bu komut kullanýlamaz.");
	if(PlayerInfo[playerid][pFaction] != VehicleInfo[cid][carFaction]) return SendClientMessageEx(playerid, COLOUR_TOMATO, "Araç: {FFFFFF}Bulunduðun oluþum, aracýn ait olduðu oluþumla ayný deðil.");
	if(sscanf(params, "d", slot)) {
		static const allowedStatus[][10] = {"Evet", "Hayýr"};
		for(new j; j < MAX_CAR_WEAPONS; j++) if(OlusumTipGetir(VehicleInfo[cid][carFaction]) == CarFactionWeaponsInfo[j][weaponFaction] && VehicleInfo[cid][carSlotUsed][j] != 2)
			SendClientMessageEx(playerid, COLOR_GREY, "Slot %d: %s (Mermi: %d - Rezerve: %s)", j + 1, GetWeaponNameEx(CarFactionWeaponsInfo[j][weaponID]), CarFactionWeaponsInfo[j][weaponAmmo], allowedStatus[CarFactionWeaponsInfo[j][weaponAllowed]]);
		return SendSyntaxMessage(playerid, "/pdbagaj [slot]");
	}
	slot--;
	if(slot < 0 || slot >= MAX_CAR_WEAPONS || VehicleInfo[cid][carSlotUsed][slot] == 2) return SendErrorMessage(playerid, "Geçersiz veya boþ slot. (1 - %d)", MAX_CAR_WEAPONS);
	if(CarFactionWeaponsInfo[slot][weaponFaction] == FACTION_POLICE && !CarFactionWeaponsInfo[slot][weaponAllowed] && !PlayerInfo[playerid][pOlusumDivision][1]) return SendErrorMessage(playerid, "Bunu kullanabilecek birimde deðilsin.");
	if(OlusumTipGetir(VehicleInfo[cid][carFaction]) != CarFactionWeaponsInfo[slot][weaponFaction]) return SendErrorMessage(playerid, "Bu silahý kullanamazsýn.");
	// if(!PlayerInfo[playerid][pOlusumDivision][1] && CarFactionWeaponsInfo[slot][weaponID] == 31 && PlayerInfo[playerid][pm4UPR] == 0) return SendErrorMessage(playerid, "M4 UPR'ýn yok.");
	// if(!PlayerInfo[playerid][pOlusumDivision][1] && CarFactionWeaponsInfo[slot][weaponID] == 29 && PlayerInfo[playerid][pmp5UPR] == 0) return SendErrorMessage(playerid, "MP5 UPR'ýn yok.");
	if(CarFactionWeaponsInfo[slot][weaponID] == 25 && pTemp[playerid][pBeanbag]) pc_cmd_beanbag(playerid, "");
	if(CarFactionWeaponsInfo[slot][weaponID] == 23 && pTemp[playerid][pTaser]) pc_cmd_taser(playerid, "");
	if(CarFactionWeaponsInfo[slot][weaponID] == 24 && GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Araç içerisindeyken bagajdan Desert Eagle alamazsýn.");
	AC_GivePlayerWeapon(playerid, CarFactionWeaponsInfo[slot][weaponID], CarFactionWeaponsInfo[slot][weaponAmmo]);
	VehicleInfo[cid][carSlotUsed][slot]++;
	SendClientMessageEx(playerid, COLOR_GREY, "%s (%d mermi) silahýný aracýnýn içerisinden aldýn. /asilahbirak ile býrakabilirsin.", GetWeaponNameEx(CarFactionWeaponsInfo[slot][weaponID]), CarFactionWeaponsInfo[slot][weaponAmmo]);
	format(string, sizeof(string), "%s adlý silahý aracýn içerisinden çýkartýr.", GetWeaponNameEx(CarFactionWeaponsInfo[slot][weaponID]));
	PlayerAME2(playerid, string);
	return 1;
}

alias:asilahbirak("bagajakoy","bagajkoy");
CMD:asilahbirak(playerid, params[])
{
	new cid = Arac_Yakin(playerid, 4.0);
	if(cid == -1) return SendServerMessage(playerid, "Aracýn içinde veya yakýnýnda deðilsin.");
	new weaponid = AC_GetPlayerWeapon(playerid);
	new string[90];

	if(!PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Bunu yapabilmek için iþ baþýnda olmalýsýn.");
	//if(VehicleInfo[cid][vOwner] != -1) return SendErrorMessage(playerid, "Sahibi olan araçlarda bunu yapamazsýn.");
	if(PlayerInfo[playerid][pFaction] != VehicleInfo[cid][carFaction]) return SendErrorMessage(playerid, "Araç ile ayný oluþumda deðilsin.");
	if(VehicleInfo[cid][carFaction] == -1 || (OlusumTipGetir(VehicleInfo[cid][carFaction]) != FACTION_POLICE && OlusumTipGetir(VehicleInfo[cid][carFaction]) != FACTION_CITY)) return SendErrorMessage(playerid, "Bu komutu bu araçta kullanamazsýn.");
	new bool:depositGun = false;
	for(new j; j < MAX_CAR_WEAPONS; j++) if(CarFactionWeaponsInfo[j][weaponID] == weaponid || weaponid == WEAPON_SHOTGUN && !pTemp[playerid][pBeanbag]) {
		VehicleInfo[cid][carSlotUsed][j]--;
		if(VehicleInfo[cid][carSlotUsed][j] < 0) VehicleInfo[cid][carSlotUsed][j] = 0;
		depositGun = true; break;
	}
	if(!depositGun) return SendServerMessage(playerid, "Bu silahý oluþum aracýnýn bagajýna koyamazsýn.");
	AC_RemovePlayerWeapon(playerid, weaponid);
	SendClientMessageEx(playerid, COLOR_YELLOW, "%s silahýný aracýn bagajýna yerleþtirdin.", GetWeaponNameEx(weaponid));
	format(string, sizeof(string), "%s silahýný bagaja koyar.", GetWeaponNameEx(weaponid));
	pc_cmd_server_ame(playerid, string);
	SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

CMD:tackle(playerid)
{
	new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction) && !IsFactionDocs(faction))	return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru olmalýsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])							return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Araçta bu komutu kullanamazsýnýz.");

	pTemp[playerid][pTackleMode] = !pTemp[playerid][pTackleMode];
	SendClientMessageEx(playerid, COLOR_WHITE, (pTemp[playerid][pTackleMode]) ? ("Tackle modu {00ff00}AKTÝFLEÞTÝRÝLDÝ{ffffff}.") : ("Tackle modu {FF6347}KAPATILDI{ffffff}."));
	return 1;
}

CMD:takip(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction))		return SendErrorMessage(playerid, "Bu komutu kullanabilmek için polis olmalýsýnýz.");
    if (!PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

	new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid))				return SendNotInVehicle(playerid);
	if (VehicleInfo[vehicle][carFaction] != faction)	return SendErrorMessage(playerid, "Polis aracýnda deðilsiniz.");

	new trace, targetid;

	if (sscanf(params,"d", trace))									return SendHelpMessage(playerid, "/takip [telefon numarasý]");
	if (pTemp[playerid][pTracePlayer] != INVALID_PLAYER_ID)			return SendErrorMessage(playerid, "Önce oturumu kapatýn. (/takipbirak)");
	//if (trace == PlayerInfo[playerid][pNumber])						return 1;
    if ((targetid = GetNumberOwner(trace)) == INVALID_PLAYER_ID)	return SendErrorMessage(playerid, "Belirtilen numara veritabanýnda bulunamadý.");
    if (PlayerInfo[targetid][pJailed] != 0)							return SendErrorMessage(playerid, "Bu numaranýn sahibi gözaltýnda veya hapiste.");

	SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: %s %s numaralý telefonu takip ediyor: %i. **", GetRankName(playerid), GetNameEx(playerid), trace);

	Dialog_Show(playerid, ShowTrace, DIALOG_STYLE_MSGBOX, "Takip Sistemi", "{B4B5B7}Ýzleme baþlatýldý.", "Kapat", "");

	pTemp[playerid][pTracePlayer] = targetid;
	pTemp[playerid][pTraceStage] = 0;

	new Float:x, Float:y, Float:z;

	if (GetWorld(targetid) || GetInterior(targetid))
	{
		x = PlayerInfo[targetid][pLocationPos][0];
		y = PlayerInfo[targetid][pLocationPos][1];
		z = PlayerInfo[targetid][pLocationPos][2];
	}
	else GetPlayerPos(targetid, x, y, z);

	pTemp[playerid][pTraceDist][0] = GetDistanceBetweenPoints(x, y, z, 1459.3712, -783.0401, 93.6459);
	pTemp[playerid][pTraceDist][1] = GetDistanceBetweenPoints(x, y, z, 2667.2908, -1957.5245, 13.5469);
	pTemp[playerid][pTraceDist][2] = GetDistanceBetweenPoints(x, y, z, 923.6055, -1893.5146, 1.5319);
	return 1;
}

CMD:takipbirak(playerid, params[])
{
	if (pTemp[playerid][pTracePlayer] == INVALID_PLAYER_ID)	return SendErrorMessage(playerid, "Takip sisteminde deðilsiniz.");

	if (pTemp[playerid][pTraceGZ] != -1) GangZoneDestroy(pTemp[playerid][pTraceGZ]);

	pTemp[playerid][pTraceGZ] = -1;
    pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
    pTemp[playerid][pTraceStage] = 0;
    SendSyntaxMessage(playerid, "Takip sisteminden çýkýþ yaptýnýz.");
	return 1;
}

alias:ceza("cezakes", "faturakes");
CMD:ceza(playerid, params[])
{
	new amount, reason[64], userid, faction = PlayerInfo[playerid][pFaction];

	if (sscanf(params,"uds[64]", userid, amount, reason))		return SendHelpMessage(playerid, "/ceza [ID/Ýsim] [ceza tutarý ($1-$50.000)] [sebep]");
	if (!IsPlayerLogged(userid))								return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))				return SendNotNearPlayer(playerid);
	if (!IsFactionPolice(faction))								return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])							return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if (strlen(reason) < 1 || strlen(reason) > 63)				return SendErrorMessage(playerid, "Sebep maksimum 63 karakter olmalýdýr.");
	if (amount < 1 || amount > 50000)							return SendErrorMessage(playerid, "Ceza tutarý minimum $1, maksimum $50000 dolar olmalýdýr.");
	if (!GivePlayerTicket(playerid, userid, amount, reason))	return SendErrorMessage(playerid,"Oyuncunun maksimum sayýda cezasý vardýr.");

	new mes[128];
	format(mes, sizeof(mes), "%s adlý kiþiye $%s tutarýnda ceza kesti. Sebep: \"%s\".", GetNameWithMask(userid), FormatNumber(amount), reason);
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);

	SM1(playerid, "%s adlý kiþiye \"%s\" sebebiyle $%s ceza kesildi.", GetNameWithMask(userid), reason, FormatNumber(amount));
	SendSpecialMessage(userid, "%s %s adlý kiþi $%s tutarýnda ceza kesti. Sebep: \"%s\".", GetRankName(playerid), GetNameWithMask(playerid), FormatNumber(amount), reason);
	SendHelpMessage(userid, "Cezalarýn listesini görüntülemek için: \"/cezalar\".");

	pTemp[playerid][pPoliceFines]++;
	return 1;
}

alias:araccezakes("aracacezakes");
CMD:araccezakes(playerid, params[])
{
	new amount, vehicle, vehiclenum[12], reason[64], faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction))									return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (sscanf(params,"s[12]is[64]", vehiclenum, amount, reason))	return SendHelpMessage(playerid, "/aracceza [plaka (/plakakontrol)] [ceza tutarý ($1-$50.000)] [sebep]");
	if ((vehicle = FindVehicleByPlate(vehiclenum)) == -1)			return SendErrorMessage(playerid, "Araç bulunamadý. ");
	if (!PlayerInfo[playerid][pOnDuty])								return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if (GetNearVehicle(playerid, 10.0, vehicle) == 0)				return SendErrorMessage(playerid, "Araca yakýn durmalýsýnýz. ");
	if (VehicleInfo[vehicle][carRegistered] != 1)					return SendErrorMessage(playerid, "Bu araç kayýtlý deðil.");
	if (strlen(reason) < 1 || strlen(reason) > 63)					return SendErrorMessage(playerid, "Sebep maksimum 63 karakter olmalýdýr.");
	if (amount < 1 || amount > 50000)								return SendErrorMessage(playerid, "Ceza tutarý minimum $1, maksimum $50000 dolar olmalýdýr.");
	if (!GiveVehicleTicket(playerid, vehicle, amount, reason))		return SendErrorMessage(playerid, "Bu araç maksimum ceza sayýsýna sahiptir.");

	new mes[128];
	format(mes, sizeof(mes), "%s model araca $%s tutarýnda ceza kesti.", VehicleNames[GetVehicleModel(vehicle)-400], FormatNumber(amount));
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);

    new userid = GetVehicleOwner(vehicle);

    if (userid != INVALID_PLAYER_ID)
    {
	    SendSpecialMessage(userid, "%s %s, %s model aracýnýza $%s tutarýnda ceza kesti. Sebep: \"%s\".", GetRankName(playerid), GetNameEx(playerid), VehicleNames[GetVehicleModel(vehicle)-400], FormatNumber(amount), reason);
		SendHelpMessage(userid, "Bir araçtaki cezalarýn listesini görüntülemek için /araccezakontrol komutunu kullanýn.");
	}

	SM1(playerid, "%s model araca $%s tutarýnda ceza kestiniz. Sebep: %s.", VehicleNames[GetVehicleModel(vehicle)-400], FormatNumber(amount), reason);

	pTemp[playerid][pPoliceFines]++;
	return 1;
}

CMD:cezakontrol(playerid, params[])
{
	if (!IsPlayerFactionPolice(playerid))	return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
    if (!PlayerInfo[playerid][pOnDuty])		return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

    new userid;

	if (sscanf(params,"u",userid))						return SendHelpMessage(playerid, "/cezakontrol [ID/Ýsim]");
	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))		return SendNotNearPlayer(playerid);

	new query[255];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `userid`=%i AND `paid`=0 LIMIT %i", PlayerInfo[userid][pID], MAX_TICKETS);
	mysql_tquery(dbHandle, query, "ShowPlayersTickets", "ii", playerid, 0);

	SetPVarInt(playerid, #tickets_show, userid);
	SetPVarInt(playerid, #ticketsuse, 1);
	return 1;
}

alias:araccezakontrol("ack");
CMD:araccezakontrol(playerid, params[])
{
	if (!IsPlayerFactionPolice(playerid))	return SendErrorMessage(playerid, "Bu komutu kullanabilmek için Bu komutu kullanamazsýnýz.");
    if (!PlayerInfo[playerid][pOnDuty])		return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

	new vehicle;

    if (isnull(params))								  return SendHelpMessage(playerid, "/araccezakontrol - /ack [plaka (/plakakontrol)]");
	if (strlen(params) > 12)						  return SendErrorMessage(playerid, "Belirtilen plaka geçersiz.");
    if ((vehicle = FindVehicleByPlate(params)) == -1) return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");

	new query[255];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `vehicle`=%i AND `paid`=0 LIMIT %i", VehicleInfo[vehicle][carID], MAX_TICKETS);
	mysql_tquery(dbHandle, query, "ShowCarsTickets", "i", playerid);

	SetPVarInt(playerid, #tickets_show, vehicle);
	SetPVarInt(playerid, #ticketsuse, 1);
	return 1;
}

alias:kapikir("kapiyikir");
CMD:kapikir(playerid,params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

	new building;
	switch(GetNearBuilding(playerid)) {
		case 0: {
			building = GetNearInsideHouse(playerid);
			if(building == -1)	return 1;

			for(new i = 0; i < MAX_FURNITURE; i++)
			{
				if (!IsPlayerInRangeOfPoint(playerid, 1.5, HFurn[building][i][fPosX], HFurn[building][i][fPosY], HFurn[building][i][fPosZ]) || !HFurn[building][i][fOn] || !isHouseDoor(HFurn[building][i][fModel]))
				{
					continue;
				}
				if (HFurn[building][i][fOpened])	return SendWarningMessage(playerid, "Kapý zaten açýk!");

				pc_cmd_server_ame(playerid,"kapýyý tekmeler.");
				ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,0,1,1);

				SetTimerEx("DoorRamEnd", 1000, false, "iiii", 0, building, i, playerid);
				break;
			}
		}
		case 1: {
			building = GetNearInsideBiz(playerid);
			if(building == -1)	return 1;

			for(new i = 0; i < MAX_FURNITURE; i++)
			{
				if (!IsPlayerInRangeOfPoint(playerid, 1.5, BFurn[building][i][fPosX], BFurn[building][i][fPosY], BFurn[building][i][fPosZ]) || !BFurn[building][i][fOn] || !isHouseDoor(BFurn[building][i][fModel]))
				{
					continue;
				}
				if (BFurn[building][i][fOpened])	return SendWarningMessage(playerid, "Kapý zaten açýk!");

				pc_cmd_server_ame(playerid, "kapýyý tekmeler.");
				ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,0,1,1);

				SetTimerEx("DoorRamEnd", 1000, false, "iiii", 1, building, i, playerid);
				break;
			}
		}
		case 2: {
			building = GetNearInsideGarage(playerid);
			if(building == -1)	return 1;

			for(new i = 0; i < MAX_FURNITURE; i++)
			{
				if (!IsPlayerInRangeOfPoint(playerid, 1.5, GFurn[building][i][fPosX], GFurn[building][i][fPosY], GFurn[building][i][fPosZ]) || !GFurn[building][i][fOn] || !isHouseDoor(GFurn[building][i][fModel]))
				{
					continue;
				}
				if (GFurn[building][i][fOpened])	return SendWarningMessage(playerid, "Kapý zaten açýk!");

				pc_cmd_server_ame(playerid, "kapýyý tekmeler.");
				ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,0,1,1);

				SetTimerEx("DoorRamEnd", 1000, false, "iiii", 2, building, i, playerid);
				break;
			}
		}
	}
	return 1;
}

this::DoorRamEnd(type, building, i, playerid)
{
	switch(type)
	{
		case 0: {
			HFurn[building][i][fLocked] = 0;
			HFurn[building][i][fOpened] = 1;

			MoveDynamicObject(HFurn[building][i][fObject], HFurn[building][i][fPosX], HFurn[building][i][fPosY], HFurn[building][i][fPosZ], 1.5, HFurn[building][i][fPosRX], HFurn[building][i][fPosRY], HFurn[building][i][fPosRZ]-90.0);

		}
		case 1: {
			BFurn[building][i][fLocked] = 0;
			BFurn[building][i][fOpened] = 1;

			MoveDynamicObject(BFurn[building][i][fObject], BFurn[building][i][fPosX], BFurn[building][i][fPosY], BFurn[building][i][fPosZ], 1.5, BFurn[building][i][fPosRX], BFurn[building][i][fPosRY], BFurn[building][i][fPosRZ]-90.0);
		}
		case 2: {
			GFurn[building][i][fLocked] = 0;
			GFurn[building][i][fOpened] = 1;

			MoveDynamicObject(GFurn[building][i][fObject], GFurn[building][i][fPosX], GFurn[building][i][fPosY], GFurn[building][i][fPosZ], 1.5, GFurn[building][i][fPosRX], GFurn[building][i][fPosRY], GFurn[building][i][fPosRZ]-90.0);
		}
	}

	ClearAnimations(playerid);
	GameTextForPlayer(playerid, "~w~KAPIYI ~y~CALDIN", 1000, 1);
	return 1;
}

CMD:kilitkir(playerid,params[])
{
	if (!IsPlayerFactionPolice(playerid)) return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])	  return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

	new slot;

	if (sscanf(params,"d", slot))
	{
		SendHelpMessage(playerid, "/kilitkir [ayar]");
		SendSyntaxMessage(playerid, "1 - Kilit Kýr | 2 - Kapýyý Kýr | 3 - C4 döþe | 4 - Aracýn kapýsýný kýr | 5 - Ýptal Et");
	}

	if (slot < 1 || slot > 5)						 return 1;
    if (slot < 4 && PlayerInfo[playerid][pRank] < 4) return SendErrorMessage(playerid, "Bu iþlemi yapabilmek için rütbeniz minimum 4 olmalýdýr.");
	if (pTemp[playerid][pRamType])					 return SendErrorMessage(playerid, "Zaten kapýyý kýrýyorsunuz");

    new location[MAX_ZONE_NAME];
	GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);

	if (slot == 5) {
		pTemp[playerid][pRamType] = 0;
		pTemp[playerid][pRamTime] = -1;
		pTemp[playerid][pRamHouse] = -1;
		pTemp[playerid][pRamBiz] = -1;
		pTemp[playerid][pRamGarage] = -1;
		pTemp[playerid][pRamVeh] = -1;
		return 1;
	}


	if (slot == 4) {
		new vehicle = GetNearVehicle(playerid, 2.0);
		if (!vehicle)							  return SendErrorMessage(playerid, "Yakýnda araç bulunmuyor.");

		if (VehicleInfo[vehicle][carLocked] == 0)  return SendErrorMessage(playerid, "Araç kilidi açýk.");
		if (VehicleInfo[vehicle][carOwnerID] == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Araç devlete aittir.");

		pc_cmd_server_ame(playerid, "kapý kilidini kýrar.");
		ApplyAnimation(playerid,"OTB","betslp_lkabt", 4.0, 1, 0, 0, 0, 0);

		pTemp[playerid][pRamType] = 1;
		pTemp[playerid][pRamTime] = 30;
		pTemp[playerid][pRamHouse] = -1;
		pTemp[playerid][pRamBiz] = -1;
		pTemp[playerid][pRamGarage] = -1;
		pTemp[playerid][pRamVeh] = vehicle;
		return 1;
	}

	new id = -1;
	if ((id = GetNearOutsideHouse(playerid)) != -1)
	{
	    if (!HouseInfo[id][hOwnerID])									return SendErrorMessage(playerid, "Ev devlete aittir.");
		if (!HouseInfo[id][hLocked] || HouseInfo[id][hDDoor])			return SendErrorMessage(playerid,"Kapý zaten açýk.");

		switch(slot)
		{
		    case 1:
		    {
				pc_cmd_server_ame(playerid, "kapý kilidini kýrar.");
				ApplyAnimation(playerid,"OTB","betslp_lkabt", 4.0, 1, 0, 0, 0, 0);

				pTemp[playerid][pRamType] = slot;
				pTemp[playerid][pRamTime] = 30;
				pTemp[playerid][pRamHouse] = id;
				pTemp[playerid][pRamBiz] = -1;
				pTemp[playerid][pRamGarage] = -1;
				pTemp[playerid][pRamVeh] = -1;
			}
			case 2:
			{
			    pc_cmd_server_ame(playerid, "kapýya ayaðýyla vurur.");
				ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,1,1,1);
				HouseInfo[id][hLocked] = 0;
				HouseInfo[id][hDDoor] = 1;
				Save_House(id);
				UpdateHouseDoor(id);
				GameTextForPlayer(playerid, "~w~KAPIYI ~y~KIRDINIZ", 1000, 1);
				InfoMSG(playerid, "GIRIS YAPMAK ICIN ~y~\"F\"~w~ TUSUNA BAS VEYA ~y~/GIRIS ~w~KOMUTUNU KULLAN", 2);

				new query[256];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] evin kapýsýný çaldý (/ram) [H_MYSQL: %i]", GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), HouseInfo[id][hID]);
			    insert_log(query, RAM_LOG, 5, PlayerInfo[playerid][pAccID], 0);
			}
			case 3:
			{
			    pc_cmd_server_ame(playerid, "kapýya C4 yerleþtirir.");
				OnPlayAnim(playerid, "BOMBER","BOM_Plant",4.0,0,0,0,0,0);
                pTemp[playerid][pRamObj] = CreateDynamicObject(1654, HouseInfo[id][hPosX], HouseInfo[id][hPosY], HouseInfo[id][hPosZ]-0.8, 0.0, 0.0, 90.0, HouseInfo[id][hPosInt], HouseInfo[id][hPosVW]);
				pTemp[playerid][pRamType] = slot;
				pTemp[playerid][pRamTime] = 10;
				pTemp[playerid][pRamHouse] = id;
				pTemp[playerid][pRamBiz] = -1;
				pTemp[playerid][pRamGarage] = -1;
				pTemp[playerid][pRamVeh] = -1;
			}
		}
		return 1;
	}

	else if ((id = GetNearOutsideBiz(playerid)) != -1)
	{
	    if (BizInfo[id][bizType] == BIZ_GAS_STATION || BizInfo[id][bizType] == BIZ_AUTOSALON || BizInfo[id][bizType] == BIZ_BOATSALON || BizInfo[id][bizType] == BIZ_FLYSALON || BizInfo[id][bizType] == BIZ_TUNING || BizInfo[id][bizType] == BIZ_ADVERT || BizInfo[id][bizType] == BIZ_LICENSE) return 1;
        if (!BizInfo[id][bizOwnerID])							return SendErrorMessage(playerid, "Ýþletme devlete aittir.");
		if (!BizInfo[id][bizLocked] || BizInfo[id][bizDDoor])	return SendErrorMessage(playerid, "Kapý zaten açýk!");

		switch(slot)
		{
		    case 1:
		    {
				pc_cmd_server_ame(playerid, "kapý kilidini kýrar.");
				ApplyAnimation(playerid,"OTB","betslp_lkabt", 4.0, 1, 0, 0, 0, 0);
				pTemp[playerid][pRamType] = slot;
				pTemp[playerid][pRamTime] = 30;
				pTemp[playerid][pRamHouse] = -1;
				pTemp[playerid][pRamBiz] = id;
				pTemp[playerid][pRamGarage] = -1;
				pTemp[playerid][pRamVeh] = -1;
			}
			case 2:
			{
			    pc_cmd_server_ame(playerid, "kapýya ayaðýyla vurur.");
				ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,1,1,1);
				BizInfo[id][bizLocked] = 0;
				BizInfo[id][bizDDoor] = 1;
				Save_Business(id);
				UpdateBusinessDoor(id);
				GameTextForPlayer(playerid, "~w~KAPIYI ~y~KIRDINIZ", 1000, 1);
				InfoMSG(playerid, "GIRIS YAPMAK ICIN ~y~\"F\"~w~ TUSUNA BAS VEYA ~y~/GIRIS ~w~KOMUTUNU KULLAN", 2);

				new query[256];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] iþletmenin kapýsýný çaldý (/ram) [B_MYSQL: %i]", GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), BizInfo[id][bizID]);
			    insert_log(query, RAM_LOG, 6, PlayerInfo[playerid][pAccID], 0);
			}
			case 3:
			{
			    pc_cmd_server_ame(playerid, "kapýya C4 yerleþtirir.");
				OnPlayAnim(playerid, "BOMBER","BOM_Plant",4.0,0,0,0,0,0);
                pTemp[playerid][pRamObj] = CreateDynamicObject(1654, BizInfo[id][bizPosX], BizInfo[id][bizPosY], BizInfo[id][bizPosZ]-0.8, 0.0, 0.0, 90.0, BizInfo[id][bizPosVW], BizInfo[id][bizPosInt]);
				pTemp[playerid][pRamType] = slot;
				pTemp[playerid][pRamTime] = 10;
				pTemp[playerid][pRamHouse] = -1;
				pTemp[playerid][pRamBiz] = id;
				pTemp[playerid][pRamGarage] = -1;
				pTemp[playerid][pRamVeh] = -1;
			}
		}
		return 1;
	}

	else if ((id = GetNearOutsideGarage(playerid)) != -1)
	{
        if (!GarageInfo[id][garageOwner])									return SendErrorMessage(playerid, "Garaj devlete ait.");
		if (!GarageInfo[id][garageLocked] || GarageInfo[id][garageDDoor])	return SendErrorMessage(playerid, "Kapý zaten açýk.");

		switch(slot)
		{
		    case 1:
		    {
				pc_cmd_server_ame(playerid, "kapý kilidini kýrar.");
				ApplyAnimation(playerid,"OTB","betslp_lkabt", 4.0, 1, 0, 0, 0, 0);
				pTemp[playerid][pRamType] = slot;
				pTemp[playerid][pRamTime] = 30;
				pTemp[playerid][pRamHouse] = -1;
				pTemp[playerid][pRamBiz] = -1;
				pTemp[playerid][pRamGarage] = id;
				pTemp[playerid][pRamVeh] = -1;
			}
			case 2:
			{
			    pc_cmd_server_ame(playerid, "kapýya ayaðýyla vurur.");
				ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,1,1,1);
				GarageInfo[id][garageLocked] = 0;
				GarageInfo[id][garageDDoor] = 1;
				Save_Garage(id);
				UpdateGarageDoor(id);
				GameTextForPlayer(playerid, "~w~KAPIYI ~y~KIRDINIZ", 1000, 1);
				InfoMSG(playerid, "GIRIS YAPMAK ICIN ~y~\"F\"~w~ TUSUNA BAS VEYA ~y~/GIRIS ~w~KOMUTUNU KULLAN", 2);

				new query[256];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] garajýn kapýsýný çaldý (/ram) [B_MYSQL: %i]", GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), GarageInfo[id][garageID]);
			    insert_log(query, RAM_LOG, 6, PlayerInfo[playerid][pAccID], 0);
			}
			case 3:
			{
			    pc_cmd_server_ame(playerid, "kapýya C4 yerleþtirir.");
				OnPlayAnim(playerid, "BOMBER","BOM_Plant",4.0,0,0,0,0,0);
                pTemp[playerid][pRamObj] = CreateDynamicObject(1654, GarageInfo[id][garagePlayer_Enter][0], GarageInfo[id][garagePlayer_Enter][1], GarageInfo[id][garagePlayer_Enter][2]-0.8, 0.0, 0.0, 90.0, GarageInfo[id][garageEnterVW], GarageInfo[id][garageEnterInt]);
				pTemp[playerid][pRamType] = slot;
				pTemp[playerid][pRamTime] = 10;
				pTemp[playerid][pRamHouse] = -1;
				pTemp[playerid][pRamBiz] = id;
				pTemp[playerid][pRamGarage] = id;
				pTemp[playerid][pRamVeh] = -1;
			}
		}
		return 1;
	}
	else if (slot == 2) pc_cmd_kapikir(playerid, "");

	return 1;
}

CMD:bagajara(playerid, params[])
{
	if (!IsPlayerFactionPolice(playerid))	return 1;
	if (!PlayerInfo[playerid][pOnDuty]) return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

	new vehicle = GetNearVehicle(playerid, 4.0);
	if (vehicle == 0)																															return SendErrorMessage(playerid, "Yakýnýnýzda araç bulunmuyor.");
	if (IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))	return SendErrorMessage(playerid, "Bu aracýn bagajý yok.");
    if (!IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carTrunkLock] == 0)																return SendErrorMessage(playerid, "Bu aracýn bagajý kapalý.");
	if (VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction]) 								return SendErrorMessage(playerid, "Bu aracý arayamazsýnýz.");

	if (!IsNearTrunk(vehicle, playerid, 2.0)) 	return SendErrorMessage(playerid, "Bagajýn yakýnýnda deðilsiniz! ");

	PrintVehInv(playerid, vehicle, 1);
	return 1;
}

CMD:torpidoara(playerid, params[])
{
	if (!IsPlayerFactionPolice(playerid)) return 1;
	if (!PlayerInfo[playerid][pOnDuty])	 return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

	new vehicle = GetPlayerVehicleID(playerid);
	if (!vehicle && !IsPlayerInAnyVehicle(playerid))																									 return SendErrorMessage(playerid,"Araçta olmalýsýnýz.");
	if (VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction] && VehicleInfo[vehicle][carOwnerID] > 0 && VehicleInfo[vehicle][carOwnerID] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Bu aracý arayamazsýnýz.");

	PrintGBInv(playerid, vehicle, 1);
	return 1;
}

CMD:mulkara(playerid, params[])
{
	if (!IsPlayerFactionPolice(playerid)) return 1;
	if (!PlayerInfo[playerid][pOnDuty])	 return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

	new houseid;

	if ((houseid = GetNearHouse(playerid)) == -1)					return SendErrorMessage(playerid, "Eve yakýn deðilsin.");
	if (HouseInfo[houseid][hOwnerID] == PlayerInfo[playerid][pID])	return SendErrorMessage(playerid, "Bu ev sana ait.");
	if (!IsPlayerInsideHouse(playerid, houseid))					return SendErrorMessage(playerid, "Evin içinde olmalýsýn.");

	PrintHouseInv(playerid, houseid, 1);
	return 1;
}

CMD:ustunuara(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

	new userid;

	if (sscanf(params,"u", userid))										 return SendHelpMessage(playerid, "/ustunuara [ID/Ýsim]");
	if (!IsPlayerLogged(userid))										 return SendNotConnected(playerid);
	if (userid == playerid)												 return 1;
	if (!PlayerNearPlayer(3.0, playerid, userid))						 return SendNotNearPlayer(playerid);
	if (pTemp[userid][pFriskPlayer] == playerid)						 return SendErrorMessage(playerid, "Oyuncuyu aramayý zaten teklif ettiniz.");
	if (IsPlayerFactionPolice(playerid) && PlayerInfo[playerid][pOnDuty]) return PrintInvEx(userid, playerid), SilahKontrolEt(playerid, userid, 1);

    SendServerMessage(playerid,"Üst aramasý teklifi gönderdiniz.");
	SendServerMessage(userid, "%s adlý kiþi üstünüzü aramak istiyor.",GetNameEx(playerid));
	SendHelpMessage(userid, "Üst aramasýný onaylamak için: {ffc46a}/ustarakabul{FFFFFF}, reddetmek için: {ffc46a}/ustarared");

	pTemp[userid][pFriskPlayer] = playerid;
    SetPVarInt(userid, #accept_time, gettime() + 30);
	return 1;
}

CMD:ustarakabul(playerid, params[])
{
	if (pTemp[playerid][pFriskPlayer] == INVALID_PLAYER_ID)	return SendErrorMessage(playerid, "Üst arama teklifi bulunmuyor.");

	new userid = pTemp[playerid][pFriskPlayer];

	if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);

	SendSyntaxMessage(playerid, "%s adlý kiþinin üstünüzü aramasýna izin verdiniz.",GetNameEx(userid));

	PrintInvEx(playerid, userid);
	pTemp[playerid][pFriskPlayer] = INVALID_PLAYER_ID;
	return 1;
}

CMD:ustarared(playerid, params[])
{
	if (pTemp[playerid][pFriskPlayer] == INVALID_PLAYER_ID)	return SendErrorMessage(playerid, "Üst arama teklifi bulunmuyor.");

	new userid = pTemp[playerid][pFriskPlayer];

	pTemp[playerid][pFriskPlayer] = INVALID_PLAYER_ID;
	SendSyntaxMessage(playerid, "%s adlý kiþinin üstünüzü aramasýna izin vermediniz.",GetNameWithMask(userid));
	SendSyntaxMessage(userid, "%s adlý kiþi üstünün aranmasýna izin vermedi.",GetNameWithMask(playerid));
	return 1;
}

CMD:plakabelirle(playerid, params[])
{
	if (!IsFactionCity(playerid))	return SendErrorMessage(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    new vehicleid = GetPlayerVehicleID(playerid);

    if (!vehicleid || VehicleInfo[vehicleid][carFaction] != PlayerInfo[playerid][pFaction])
		return SendErrorMessage(playerid, "Birlik aracýnda deðilsiniz.");

    new plate[24];

    format(plate, sizeof(plate), "%s", GetVehicleNumber());

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `plate` FROM `cars` WHERE `plate` = '%e'", plate);
	mysql_tquery(dbHandle, query, "PoliceSetPlate", "iis", playerid, vehicleid, plate);
	return 1;
}

CMD:snakecam(playerid, params[])
{
	if (pTemp[playerid][pZond] != 0)		return SetPlayerZond(playerid, 0);
    if (!IsPlayerFactionPolice(playerid))	return SendErrorMessage(playerid,"Bir polis memuru / hapishane memuru olmalýsýnýz.");
    if (!PlayerInfo[playerid][pSwatDuty])	return SendErrorMessage(playerid, "Bu komut SWAT tarafýndan kullanýlabilir.");

	new weapons[12];
	new ammo[12];

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		for(new x; x < 12; x++)
		{
			BWH_GetPlayerWeaponData(playerid, x, weapons[x], ammo[x]);
			if(!AC_PlayerHasWeapon(playerid, weapons[x]) || !ammo[x])
			{
				weapons[x] = 0;
				ammo[x] = 0;
			}
			PlayerInfo[playerid][pWeapons][x] = weapons[x];
			PlayerInfo[playerid][pAmmo][x] = ammo[x];
		}
	}

	SetPlayerZond(playerid, 1);
	return 1;
}

CMD:flashbang(playerid, params[])
{
    if (!IsPlayerFactionPolice(playerid))	return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru olmalýsýnýz.");
    if (!PlayerInfo[playerid][pSwatDuty])	return SendErrorMessage(playerid, "Bu komut SWAT tarafýndan kullanýlabilir.");

    new id = -1;

	if ((id = GetNearOutsideBiz(playerid)) != -1 && (BizInfo[id][bizType] != BIZ_AUTOSALON && BizInfo[id][bizType] != BIZ_ADVERT && BizInfo[id][bizType] != BIZ_TUNING && BizInfo[id][bizType] != BIZ_LICENSE && BizInfo[id][bizType] != BIZ_BOATSALON && BizInfo[id][bizType] != BIZ_FLYSALON))
	{
	    if (BizInfo[id][bizLocked])	return GameTextForPlayer(playerid, "~r~KAPALI!", 2500, 1);

		SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "* %s %s flashbang kullandý.", GetRankName(playerid), GetNameEx(playerid));
		pc_cmd_me(playerid, "teçhizat kemerinden flashbang çýkartýr. Mandala basar ve pimini çekerek binanýn içine fýrlatýr.");

		foreach(new i : Player)
		{
		    if (!IsPlayerLogged(i) || !IsPlayerBizInside(i, id)) continue;

			SendSyntaxMessage(i, "Bir flaþ patlamasý sebebiyle geçici olarak kör oldun!");
			GameTextForPlayer(i, "~r~!!! FLASHBANG !!!~n~~n~~n~!!! FLASHBANG !!!~n~~n~~n~!!! FLASHBANG !!!", 12000, 3);
            SetPlayerWeather(i, 36);
			SetPlayerTime(i, 22, 0);
			StopPlayerAnims(i);
			FreezePlayer(i);
			SetPlayerDrunkLevel(i, 50000);
			pTemp[i][pFlashTime] = 15;
		}
		return 1;
	}
	if ((id = GetNearOutsideHouse(playerid)) != -1)
	{
	    if (HouseInfo[id][hLocked])	return GameTextForPlayer(playerid, "~r~KAPALI!", 2500, 1);

        SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "* %s %s flashbang kullandý.", GetRankName(playerid), GetNameEx(playerid));
		pc_cmd_me(playerid, "teçhizat kemerinden flashbang çýkartýr. Mandala basar ve pimini çekerek binanýn içine fýrlatýr.");
		foreach(new i : Player)
		{
		    if (!IsPlayerLogged(i) || !IsPlayerInsideHouse(i, id)) continue;

			SendSyntaxMessage(i, "Bir flaþ patlamasý sebebiyle geçici olarak kör oldun!");
			GameTextForPlayer(i, "~r~!!! FLASHBANG !!!~n~~n~~n~!!! FLASHBANG !!!~n~~n~~n~!!! FLASHBANG !!!", 12000, 3);
            SetPlayerWeather(i, 36);
			SetPlayerTime(i, 22, 0);
			StopPlayerAnims(i);
			FreezePlayer(i);
			SetPlayerDrunkLevel(i, 50000);
			pTemp[i][pFlashTime] = 15;
		}
		return 1;
	}

	SendErrorMessage(playerid, "Ev/iþyeri giriþinde kullanýn.");
	return 1;
}

CMD:ekip(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction))	return SendErrorMessage(playerid, "Bu komutu kullanabilmek için Bu komutu kullanamazsýnýz.");

	if (pTemp[playerid][pPatrol])
	{
	    new id = pTemp[playerid][pPatrol]-1;

	    pTemp[playerid][pPatrol] = 0;

	    if (id < 0 || id >= MAX_PATROL || !PatrolInfo[GetPatrolID(playerid)][id][patrulExists])	return 1;

        if (PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] == playerid) 																							PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] = INVALID_PLAYER_ID;
        if (PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][1] == playerid) 																							PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][1] = INVALID_PLAYER_ID;
		if (PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] == INVALID_PLAYER_ID && PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] == INVALID_PLAYER_ID)	PatrolInfo[GetPatrolID(playerid)][id][patrulExists] = 0;

	    SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "[LSPD] %s %s ekibi sildi: %s", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][id][patrulName]);
		return 1;
	}

    if (!PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if (isnull(params))					return SendHelpMessage(playerid, "/callsign [ekip kodu]");

	for(new i; i != MAX_PATROL; i++)
	{
	    if (!PatrolInfo[GetPatrolID(playerid)][i][patrulExists] || !CompareStrings(params, PatrolInfo[GetPatrolID(playerid)][i][patrulName]))	 continue;

		if (PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][0] != INVALID_PLAYER_ID && PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][1] != INVALID_PLAYER_ID)
			return SendErrorMessage(playerid, "Bu devriye zaten tamamlandý.");

        if (PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][0] == INVALID_PLAYER_ID) PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][0] = playerid;
        else 																			PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][1] = playerid;

		pTemp[playerid][pPatrol] = i+1;
		SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "[LSPD] %s %s, %s ekibine katýldý.", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][i][patrulName]);
		return 1;
	}

	new id = -1;
	for(new i; i != MAX_PATROL; i++)
	{
	    if (PatrolInfo[GetPatrolID(playerid)][i][patrulExists]) continue;

		id = i;
		break;
	}

	if (id == -1)	return SendErrorMessage(playerid, "Maksimum ekip sayýsýna ulaþýldý.");

    pTemp[playerid][pPatrol] = id+1;
    PatrolInfo[GetPatrolID(playerid)][id][patrulExists] = 1;
    format(PatrolInfo[GetPatrolID(playerid)][id][patrulName], 32, "%s", params);
    PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] = playerid;
    PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][1] = INVALID_PLAYER_ID;
    SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "[LSPD] %s %s, %s ekip koduyla sahaya çýktý.", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][id][patrulName]);
	return 1;
}

alias:ekipliste("ekiplistesi");
CMD:ekipliste(playerid, params)
{
	new faction = PlayerInfo[playerid][pFaction], string[256], f = GetPatrolID(playerid), count;
	if (!IsFactionPolice(faction))						return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
    if (!PlayerInfo[playerid][pOnDuty])					return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

    for(new i = 0; i != MAX_PATROL; i++)
    {
        if (!PatrolInfo[f][i][patrulExists])  continue;

        format(string, sizeof(string), "Ekip adý: %s", PatrolInfo[f][i][patrulName]);

        if (IsPlayerLogged(PatrolInfo[f][i][patrulOfficer][0]))
        {
            format(string, sizeof(string), "%s Memurlar: %s", string, GetOfficerName(PatrolInfo[f][i][patrulOfficer][0]));
        }
        if (IsPlayerLogged(PatrolInfo[f][i][patrulOfficer][1]))
        {
            if (IsPlayerLogged(PatrolInfo[f][i][patrulOfficer][1])) {
                format(string, sizeof(string), "%s, %s", string, GetOfficerName(PatrolInfo[f][i][patrulOfficer][1]));
            } else {
                format(string, sizeof(string), "%s%s", string, GetOfficerName(PatrolInfo[f][i][patrulOfficer][1]));
            }
        }

        SendClientMessageEx(playerid, COLOUR_ALTO, string);

        count++;
        break;
    }
	if(!count) SendErrorMessage(playerid, "Aktif ekip bulunamadý.");
	return 1;
}

CMD:elkoy(playerid, params[])
{
	new userid, type[24], faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction))						return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
    if (!PlayerInfo[playerid][pOnDuty])					return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if (sscanf(params,"us[24]", userid, type))			return SendHelpMessage(playerid, "/elkoy [ID / Karakter Adý] [suruculisansi / ucuslisansi / silah | esyalar(maske, kalem vb.)]");
	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (!PlayerNearPlayer(4.0, playerid, userid))		return SendNotNearPlayer(playerid);

	if (CompareStrings(type, "suruculisansi"))
	{
	    if (!PlayerInfo[userid][pCarLic])	return SendErrorMessage(playerid, "Oyuncunun ehliyeti bulunmuyor.");

		new mes[128];
		format(mes, sizeof(mes), "%s adlý kiþinin ehliyetine el koyar.", GetNameWithMask(userid));
		pc_cmd_me(playerid, mes);

		SendSyntaxMessage(userid, "%s adlý memur ehliyete el koyar.", GetNameWithMask(playerid));
		PlayerInfo[userid][pCarLic] = 0;
		SQL_SetInteger("users", "carlic", 0, PlayerInfo[userid][pID]);
		return 1;
	}

	else if (CompareStrings(type, "ucuslisansi"))
	{
	    if (!PlayerInfo[userid][pFlyLic])	return SendErrorMessage(playerid, "Oyuncunun uçuþ lisansý bulunmuyor.");

	    new mes[128];
		format(mes, sizeof(mes), "%s adlý kiþinin uçuþ lisansýna el koyar.", GetNameWithMask(userid));
		pc_cmd_me(playerid, mes);

		SendSyntaxMessage(userid, "%s adlý memur uçuþ lisansýnýza el koydu.", GetNameWithMask(playerid));
		PlayerInfo[userid][pFlyLic] = 0;
		SQL_SetInteger("users", "flylic", 0, PlayerInfo[userid][pID]);
		return 1;
	}

	else if (CompareStrings(type, "silah"))
	{
		SilahElkoyFonksiyon(playerid, userid, 1);

	    new mes[128];
		format(mes, sizeof(mes), "%s adlý kiþinin silahýna el koyar.", GetNameWithMask(userid));
		pc_cmd_me(playerid, mes);

		SendWarningMessage(userid, "%s adlý memur silahýnýza el koydu.", GetNameWithMask(playerid));
		AC_ResetPlayerWeapons(userid);
		return 1;
	}
	else
	{
		SendHelpMessage(playerid, "/elkoy [ID / Karakter Adý] [suruculisansi / ucuslisansi / silah]");
	}
	return 1;
}

CMD:gozalti(playerid, params[])
{
	new userid, faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction) && !IsFactionDocs(faction))		return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru olmalýsýnýz.");
	if (sscanf(params,"u", userid))									return SendHelpMessage(playerid, "/gozalti [ID / Karakter Adý]");
	if (userid == playerid)											return 1;
	if (!PlayerInfo[playerid][pOnDuty])								return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if (!IsPlayerInAnyVehicle(playerid))							return SendNotInVehicle(playerid);
	if (!IsPlayerLogged(userid))									return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))					return SendNotNearPlayer(playerid);

	new mes[128];

	if (pTemp[userid][pGozAlti] == 0)
	{
		format(mes, sizeof(mes), "%s adlý kiþiyi gözaltýna alýr.", GetNameWithMask(userid));
		FreezePlayer(userid);
		pTemp[userid][pGozAlti] = 1;
	}
	else
	{
		format(mes, sizeof(mes), "%s adlý kiþiyi gözaltýndan çýkarýr.", GetNameWithMask(userid));
		UnFreezePlayer(userid);
		pTemp[userid][pGozAlti] = 0;
	}
	pc_cmd_me(playerid, mes);
	return 1;
}

alias:tutukla("hapis");
CMD:tutukla(playerid, params[])
{
	new userid, time, info[128], faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction))						return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (sscanf(params,"uds[128]", userid, time, info))	return SendHelpMessage(playerid, "/tutukla [ID / Karakter Adý] [zaman (dakika)] [sebep]");
	if (!PlayerInfo[playerid][pOnDuty])					return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýn.");

    new arrestpoint_id = GetPlayerNearestArrestPoint(playerid);

    if(arrestpoint_id < 1)
        return SendErrorMessage(playerid, "Hapis iþlemini sadece iþlem noktalarýnda uygulayabilirsiniz.");

	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))		return SendNotNearPlayer(playerid);
    if (userid == playerid)								return SendErrorMessage(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
    if (PlayerInfo[userid][pJailed])					return SendErrorMessage(playerid, "Oyuncu zaten tutuklu.");
	if (time < 1 || time > 1000)						return SendErrorMessage(playerid, "Tutuklama süresi 1 dakika ile 1000 dakika arasýnda olmalýdýr.");

    Add_Arrest(playerid, userid, time);
	PlayerInfo[userid][pJailed] = PALOMINO_JAIL;
	PlayerInfo[userid][pJailTime] = time * 60;
	PlayerInfo[userid][pArrested]++;
	SQL_SetInteger("users", "arrested", PlayerInfo[userid][pArrested], PlayerInfo[userid][pID]);
	AddCriminalRecord(userid, info, PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pFaction], 1);

	SilahElkoyFonksiyon(playerid, userid, 1);

	PutPlayerInPrison(userid);
	SendServerMessage(userid, "%s adlý polis memuru tarafýndan %i dakika tutuklandýnýz. Sebep: %s", GetNameWithMask(playerid), time, info);
	pTemp[playerid][pPoliceJails]++;
	return 1;
}
/*
CMD:prison(playerid, params[])
{
	new userid, time, info[128], faction = PlayerInfo[playerid][pFaction];

    new arrestid = ArrestNearest(playerid);

	if (!IsFactionPolice(faction) && !IsFactionDocs(faction))		return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru olmalýsýnýz.");
	if (sscanf(params,"uds[128]", userid, time, info))				return SendHelpMessage(playerid, "/prison [ID / Karakter Adý] [dakika] [sebep]");
	if (!PlayerInfo[playerid][pOnDuty])								return SendErrorMessage(playerid, "Ýþbaþýnda olmadan bu komutu kullanamazsýnýz.");
	if ((arrestid == -1))											return SendErrorMessage(playerid, "Hapis bölgesine yakýn olmalýsýn!");
	if (!IsPlayerLogged(userid))									return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))					return SendNotNearPlayer(playerid);
	if (time < 1 || time > 10000)									return SendErrorMessage(playerid, "Zaman 1 ile 10000 dakika arasý olabilir.");
	if (userid == playerid)											return 1;

	PlayerInfo[userid][pPrisoned] = random(sizeof(prison_sadoc));
	PlayerInfo[userid][pJailed] = PRISON_JAIL;
	PlayerInfo[userid][pJailTime] = time * 60;
	PlayerInfo[userid][pIsolateTime] = 0;
	PutPlayerInPrison(userid);

	SendSyntaxMessage(userid, "%s dakika hapise gönderildiniz.", FormatNumber(time));
	SendSyntaxMessage(userid, "SADoC kaydýn yapýldý. %i - Numaraný öðrenmek için: (/kogusnumaram).", PlayerInfo[userid][pPrisoned]+100);
	return 1;
}*/

CMD:plakakontrol(playerid, params[])
{
	new vehicle;
	if (sscanf(params,"d",vehicle))				return SendHelpMessage(playerid, "/plakakontrol [Araç ID]");
    if (!IsValidVehicle(vehicle))				return SendErrorMessage(playerid, "Belirtilen araç bulunamadý.");
	if (!VehicleEmpty(vehicle))					return SendErrorMessage(playerid, "Bu araç þu an kullanýlýyor.");
	if (GetNearVehicle(playerid, 12.0, vehicle) == 0) return SendErrorMessage(playerid, "Araca yakýn deðilsiniz.");


	if (VehicleInfo[vehicle][carRegistered] == 0 && VehicleInfo[vehicle][carHidedPlate] == 1)	SendSyntaxMessage(playerid, "%s model aracýn plakasý bulunmuyor.", VehicleNames[GetVehicleModel(vehicle)-400]);
	else											SendSyntaxMessage(playerid, "%s model aracýn plakasý: %s", VehicleNames[GetVehicleModel(vehicle)-400], VehicleInfo[vehicle][carPlate]);

	return 1;
}

CMD:kelepce(playerid, params[])
{
	new userid, faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction))					return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru olmalýsýnýz.");
	if (sscanf(params,"u", userid))					return SendHelpMessage(playerid, "/kelepce [ID / Karakter Adý]");
	if (!PlayerInfo[playerid][pOnDuty])				return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);
	if (userid == playerid)							return 1;

	if (PlayerInfo[userid][pKelepceli])
	{
		new mes[128];
		format(mes, sizeof(mes), "%s adlý kiþinin kelepçesini çýkartýr.", GetNameWithMask(userid));
		pc_cmd_me(playerid, mes);

		PlayerInfo[userid][pKelepceli] = 0;
		SendSyntaxMessage(userid, "%s kelepçelerini çýkardý.", GetNameWithMask(playerid));
		SendSyntaxMessage(playerid, "%s adlý kiþinin kelepçesini çözdünüz.", GetNameWithMask(userid));
		RemovePlayerAttachedObject(userid, ATTACH_HANDS);
		SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
	}
	else
	{
		new mes[128];
		format(mes, sizeof(mes), "%s adlý kiþiyi kelepçeler.", GetNameWithMask(userid));
		pc_cmd_me(playerid, mes);

		GameTextForPlayer(userid, "~r~KELEPCELENDINIZ", 2500, 3);
		SendSyntaxMessage(userid, "%s seni kelepçeledi.", GetNameWithMask(playerid));
		SendSyntaxMessage(playerid, "%s adlý kiþiyi kelepçelediniz.", GetNameWithMask(userid));
		PlayerInfo[userid][pKelepceli] = 1;
		SetPlayerAttachedObject(userid, ATTACH_HANDS, 19418,6,0.003999,0.028000,-0.018000,-12.900005,0.000000,-65.100006,0.878000,1.890999,1.652001);
		SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);
		UnFreezePlayer(userid);
	}
	return 1;
}


alias:destekiste("destek");
CMD:destekiste(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if (!IsFactionPolice(faction))		return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if (GetPVarInt(playerid, #Chase_Time) > 1)		return StopChase(playerid);

	new location[MAX_ZONE_NAME];
	GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
    foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || !IsPlayerFactionPolice(i) || (PlayerInfo[i][pSettings] & togFaction))
			continue;

		SendClientMessage(i, COLOR_POLICECHAT, "|____________ Acil Destek Çaðrýsý ____________|");

		SendClientMessageEx(i, COLOR_POLICECHAT, "Memur: %s, No: %i", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
		SendClientMessageEx(i, COLOR_POLICECHAT, "Konum: %s", location);
	}

	GetPlayerPos(playerid, pTemp[playerid][pCallPosX], pTemp[playerid][pCallPosY], pTemp[playerid][pCallPosZ]);
	pTemp[playerid][pCallOn] = 1;

	SendServerMessage(playerid, "Baþarýyla destek talebi gönderdiniz. Ýptal etmek için tekrar /destek yazýn.");

	SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "ÝPUCU:{FFFFFF} Destek çaðrýsýný yanýtlamak için: /dk %i", playerid);
	StartChase(playerid);
	return 1;
}
/*
alias:kovalamaca("pursuit");
CMD:kovalamaca(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if (!IsFactionPolice(faction))		return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

	new userid;
	if (sscanf(params,"u", userid))					return SendHelpMessage(playerid, "/pursuit [ID / Karakter Adý]");
	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (userid == playerid)							return 1;
	if (GetPVarInt(playerid, #Chase_Time) > 1)		return SendErrorMessage(playerid, "%s [ID:%i] kovalamacaya takip ediliyor.", GetNameWithMask(userid), userid);
	if (!PlayerNearPlayer(15.0, playerid, userid))	return SendNotNearPlayer(playerid);

	SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "(( HQ: %s %s adlý memur %s adlý kiþiyi kovalýyor. [ID:%i] ))", GetRankName(playerid), GetNameEx(playerid), GetNameWithMask(userid), userid);

	StartChase(userid);
	return 1;
}*/

CMD:siren(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction], vehicle = GetPlayerVehicleID(playerid), model = GetVehicleModel(vehicle), siren_id;

	if (!IsFactionLegal(faction))											return SendErrorMessage(playerid, "Bir devlet personeli olmalýsýnýz.");
    if (VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])	return SendErrorMessage(playerid, "Resmi bir araç deðil.");
	if (sscanf(params, "i", siren_id))										return SendHelpMessage(playerid, "/siren [1-3]");
	if (siren_id < 1 || siren_id > 3)										return SendErrorMessage(playerid, "Geçersiz siren ID: 1-3.");

	if (siren_id == 1)
	{
		if (IsValidDynamicObject(VehicleInfo[vehicle][carSiren][0]))
		{
		    SendSyntaxMessage(playerid, "Siren kapatýldý.");
			DestroyDynamicObject(VehicleInfo[vehicle][carSiren][0]);
			VehicleInfo[vehicle][carSiren][0] = INVALID_OBJECT_ID;
		    return 1;
		}

		if (model != 560 && model != 541 && model != 525 && model != 426 && model != 579 && model != 415 && model != 554 && model != 546 && model != 566 && model != 561 && model != 547 && model != 482)
		{
			return SendErrorMessage(playerid, "Sultan/Bullet/Towtruck/Premier/Huntley/Cheetah/Yosemite/Intruder/Tahoma/Stratum/Primo/Burrito model araçlara takýlabilir");
		}

	    VehicleInfo[vehicle][carSiren][0] = CreateDynamicObject((model != 525)?(18646):(19419), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
		switch(model)
	    {
	        case 560: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.571924, 0.068632, 0.860007, 0.000000, 0.000000, -181.148086);
	        case 541: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.442310, -0.091429, 0.670001, 0.000000, -2.299999, -178.874786);
	        case 426: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.570416, -0.012622, 0.890005, 0.000000, 0.000000, -91.267646);
	        case 525: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.0, -0.485, 1.36, 0.000000, 0.000000, 180.0);
	        case 579: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.640568, -0.021741, 1.260003, 0.000000, 0.000000, -90.153976);
	        case 415: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.424245, -0.241412, 0.640021, 3.000001, -3.499999, -181.499969);
	        case 554: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.734659, 0.117240, 1.059349, -4.199999, 0.000000, -87.859664);
	        case 546: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.591740, -0.153342, 0.870005, 0.000000, 0.000000, -269.351074);
	        case 566: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.660138, 0.024635, 0.869999, 0.000000, 0.000000, -88.731002);
	        case 561: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.428671, 0.080074, 0.850004, -2.799999, 0.000000, -88.665367);
	        case 547: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.530513, 0.002143, 0.916606, -3.899999, 0.000000, -89.768531);
	        case 482: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.515804, 0.702674, 0.950006, 0.000000, 0.000000, -92.038864);
	    }

	    Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
	    return SendSyntaxMessage(playerid, "Siren aktif.");
	}

	else if (siren_id == 2)
	{
	    if (IsValidDynamicObject(VehicleInfo[vehicle][carSiren][1]))
		{
		    SendSyntaxMessage(playerid, "Siren kapatýldý.");
			DestroyDynamicObject(VehicleInfo[vehicle][carSiren][1]);
			VehicleInfo[vehicle][carSiren][1] = INVALID_OBJECT_ID;
		    return 1;
		}

	    if (model != 560 && model != 426 && model != 579 && model != 566 && model != 561 && model != 547 && model != 546)
		{
			return SendErrorMessage(playerid, "Sultan/Bullet/Towtruck/Premier/Huntley/Cheetah/Yosemite/Intruder/Tahoma/Stratum/Primo/Burrito model araçlara takýlabilir.");
		}

        VehicleInfo[vehicle][carSiren][1] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
        switch(model)
	    {
	        case 560: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, 0.000000, -1.289999, 0.394999, 0.000000, 0.000000, 0.000000);
	        case 426: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, 0.000000, -1.669998, 0.349999, 0.000000, 0.000000, 0.000000);
	        case 579: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, 0.005192, -2.445963, 0.521951, 0.000000, 0.000000, -359.884796);
	        case 566: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, 0.009878, -1.681756, 0.400007, 0.000000, 0.000000, -0.010757);
	        case 561: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, -0.004864, -2.317730, 0.249995, 0.000000, 0.000000, -0.192703);
	        case 547: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, -0.001344, -1.571307, 0.400003, 0.000000, 0.000000, -0.468620);
	        case 546: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, 0.014445, -1.771190, 0.340004, 0.000000, 0.000000, -359.851013);
	    }
	    Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
		return SendSyntaxMessage(playerid,"Siren aktif.");
	}

	else if (siren_id == 3)
	{
	    if (IsValidDynamicObject(VehicleInfo[vehicle][carSiren][2]))
		{
		    SendSyntaxMessage(playerid, "Siren kapatýldý.");
			DestroyDynamicObject(VehicleInfo[vehicle][carSiren][2]);
			VehicleInfo[vehicle][carSiren][2] = INVALID_OBJECT_ID;
			DestroyDynamicObject(VehicleInfo[vehicle][carSiren][3]);
			VehicleInfo[vehicle][carSiren][3] = INVALID_OBJECT_ID;
			DestroyDynamicObject(VehicleInfo[vehicle][carSiren][4]);
			VehicleInfo[vehicle][carSiren][4] = INVALID_OBJECT_ID;
		    return 1;
		}

	    if (model != 541 && model != 415 && model != 560)	return SendErrorMessage(playerid, "Bu siren yalnýzca Bullet/Cheetah/Sultan model araçlara yerleþtirilebilir.");

        if (model == 541)
		{
			VehicleInfo[vehicle][carSiren][2] = CreateDynamicObject(19620, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][2], vehicle, 0.000000, 0.000000, 0.659999, 0.000000, 0.000000, -359.823394);
			VehicleInfo[vehicle][carSiren][3] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][3], vehicle, 0.006984, -2.280384, -0.190001, 0.000000, 0.000000, -359.824523);
			VehicleInfo[vehicle][carSiren][4] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][4], vehicle, -0.007443, 2.430286, -0.070001, 0.000000, 0.000000, -180.024566);
		}
		if (model == 415)
		{
			VehicleInfo[vehicle][carSiren][2] = CreateDynamicObject(19620, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][2], vehicle, 0.000475, -0.270263, 0.630008, 0.000000, 0.000000, -359.899139);
			VehicleInfo[vehicle][carSiren][3] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][3], vehicle, -0.005538, 2.660761, -0.210004, 0.000000, 0.000000, -180.099121);
			VehicleInfo[vehicle][carSiren][4] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][4], vehicle, 0.003255, -2.460503, -0.140003, 0.000000, 0.000000, 0.266403);
		}
		if (model == 560)
		{
			VehicleInfo[vehicle][carSiren][2] = CreateDynamicObject(19620, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][2], vehicle, -0.000927, 0.110103, 0.870014, 0.000000, 0.000000, -359.517333);
			VehicleInfo[vehicle][carSiren][3] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][3], vehicle, 0.004800, -2.370894, 0.105430, 0.000000, 0.000000, -359.912292);
			VehicleInfo[vehicle][carSiren][4] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][4], vehicle, -0.003252, 2.561954, 0.050001, 0.000000, 0.000000, -179.912200);
		}

		Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
		return SendSyntaxMessage(playerid,"Siren aktif.");
	}
	return 1;
}

CMD:silahruhsati(playerid, params[])
{
    new userid, price;

	if (sscanf(params,"ui",userid, price))			return SendHelpMessage(playerid, "/silahruhsati [ID / Karakter Adý] [ücret]");
	if (IsPlayerFactionPolice(playerid))			return SendErrorMessage(playerid, "LSPD birliðinde olmalýsýnýz.");
	if (PlayerInfo[playerid][pAuthwep] != 1)		return SendErrorMessage(playerid, "Silah ruhsatý verme yetkiniz yok.");
	if (price < 1 || price > 10000)					return SendErrorMessage(playerid, "Deðer 1-10,000. arasýnda olmalýdýr.");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);
    if (PlayerInfo[userid][pWepLic] != 0)			return SendErrorMessage(playerid, "Oyuncunun zaten ruhsatý var.");
	if (pTemp[userid][pWepPlayer] == playerid)		return SendErrorMessage(playerid, "Oyuncuya zaten bir lisans satýn almasýný teklif ettiniz.");

	pTemp[userid][pWepPlayer] = playerid;
	pTemp[userid][pWepPrice] = price;
	SetPVarInt(userid, #accept_time, gettime() + 30);
	SendSyntaxMessage(userid, "%s %s adlý memur sana silah lisansý teklifi verdi. Ücret: $%i. (Lisansý almak için Y tuþuna basýn.)", GetRankName(playerid), GetNameEx(playerid), price);
	SendSyntaxMessage(playerid, "%s isimli oyuncuya silah lisansý almayý teklif ettiniz. $%i.", GetNameEx(userid), price);
	return 1;
}

CMD:ruhsatyetki(playerid, params[])
{
    new userid;

	if (sscanf(params,"u",userid))										return SendHelpMessage(playerid, "/ruhsatyetki [ID / Karakter Adý]");
	if (IsPlayerFactionPolice(playerid))								return SendErrorMessage(playerid, "LSPD birliðinde olmalýsýnýz.");
	if (!isLeader(playerid))											return SendErrorMessage(playerid, "Birlik yetkilisi deðilsiniz..");
	if (!IsPlayerLogged(userid))										return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))						return SendNotNearPlayer(playerid);
    if (PlayerInfo[userid][pFaction] != PlayerInfo[playerid][pFaction])	return SendErrorMessage(playerid, "Oyuncu birliðinize üye deðil.");

	if (PlayerInfo[userid][pAuthwep] == 0)
	{
		PlayerInfo[userid][pAuthwep] = 1;
		SendSyntaxMessage(userid, "%s %s sizi lisanslandýrma birimine aldý.", GetRankName(playerid), GetNameEx(playerid));
		SendSyntaxMessage(playerid, "Lisanslandýrma birimine dahil ettiniz: %s.", GetNameEx(userid));
		return 1;
	}

	PlayerInfo[userid][pAuthwep] = 0;
	SendSyntaxMessage(userid, "%s %s sizi lisanslandýrma biriminden çýkarttý.", GetRankName(playerid), GetNameEx(playerid));
	SendSyntaxMessage(playerid, "Lisanslandýrma biriminden çýkarttýnýz: %s.", GetNameEx(userid));
	return 1;
}

CMD:swatyetki(playerid, params[])
{
	new userid;

	if (sscanf(params,"u",userid))										return SendHelpMessage(playerid, "/swatyetki [ID / Karakter Adý]"); //Komut
	if (!IsPlayerFactionPolice(playerid))								return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
    if (!isLeader(playerid))											return SendErrorMessage(playerid, "Birlik yetkilisi deðilsiniz.");
	if (!IsPlayerLogged(userid))										return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))						return SendNotNearPlayer(playerid);
    if (PlayerInfo[userid][pFaction] != PlayerInfo[playerid][pFaction])	return SendErrorMessage(playerid, "Oyuncu birliðinize üye deðil.");

	if (PlayerInfo[userid][pSwat] == 0)
	{
		PlayerInfo[userid][pSwat] = 1;
		SendSyntaxMessage(userid, "%s %s adlý memur sizi SWAT birimine dahil etti.", GetRankName(playerid), GetNameEx(playerid));
		SendSyntaxMessage(playerid, "%s adlý kiþiyi SWAT birimine dahil etti.", GetNameEx(userid));
		return 1;
	}

	PlayerInfo[userid][pSwat] = 0;
	SendSyntaxMessage(userid, "%s %s adlý memur sizi SWAT birimine dahil etti.", GetRankName(playerid), GetNameEx(playerid));
	SendSyntaxMessage(playerid, "%s adlý kiþiyi SWAT biriminden çýkarttýnýz.", GetNameEx(userid));
	return 1;
}

alias:aracbagla("haciz", "arachaciz");
CMD:aracbagla(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction], vehicle = GetPlayerVehicleID(playerid);

	if (!IsFactionPolice(faction) && !IsFactionCity(faction))				return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])			return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if (!IsATowTruck(vehicle))					return SendErrorMessage(playerid, "Bir çekicide olmalýsýn. ");
    if (!IsTrailerAttachedToVehicle(vehicle))	return SendErrorMessage(playerid, "Çekiciye bir araç baðlý deðil.");

	new trailer = GetVehicleTrailer(vehicle);

	if (!VehicleInfo[trailer][carOwnerID])								return SendErrorMessage(playerid, "Sadece kiþisel araçlar haczedilebilir.");
	//if (!PlayerToPoint(10.0, playerid, IMPOUNDX, IMPOUNDY, IMPOUNDZ))	return SendErrorMessage(playerid, "Park yeri bulunamadý.");

	DetachTrailerFromVehicle(vehicle);
	GetVehiclePos(trailer, VehicleInfo[trailer][carParkX], VehicleInfo[trailer][carParkY], VehicleInfo[trailer][carParkZ]);
    GetVehicleZAngle(trailer, VehicleInfo[trailer][carParkA]);

	SendSyntaxMessage(playerid, "%s model aracý haciz alanýna gönderdiniz.", VehicleNames[GetVehicleModel(trailer)-400]);
	VehicleEngine(trailer, false);

	VehicleInfo[trailer][Impounded] = 1;

	Save_Car(trailer);

	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || PlayerInfo[i][pCarKey] != trailer) continue;

		SendSyntaxMessage(i, "%s %s tarafýndan %s model aracýnýza ceza kesildi ve hacize gönderildi", GetRankName(playerid), GetNameEx(playerid), VehicleNames[GetVehicleModel(trailer)-400]);
		break;
	}
	return 1;
}

alias:swathalat("shin");
CMD:swathalat(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], vehicle = GetPlayerVehicleID(playerid);
	new oyuncuarac = GetPlayerVehicleID(playerid);
	if (!IsFactionPolice(faction))			return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])		return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if (!PlayerInfo[playerid][pSwatDuty])	return SendErrorMessage(playerid, "S.W.A.T. biriminde olmalýsýnýz.");
	if (GetPVarInt(playerid, #SWATROPE))	return 1;
	if (GetVehicleModel(oyuncuarac) != 497)  return SendErrorMessage(playerid,"Bu komutu sadece polis helikopterlerinde kullanabilirsiniz.");
	if (GetPlayerState(playerid) != PLAYER_STATE_PASSENGER) return SendErrorMessage(playerid,"Yolcu koltuðunda olmalýsýnýz.");

	OnPlayerCallRappelling(playerid);
	return 1;
}

CMD:araccek(playerid, params[])
{
	/*new faction = PlayerInfo[playerid][pFaction], */ new vehicle = GetPlayerVehicleID(playerid);

	/*if (!IsFactionPolice(faction))			return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])		return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");*/
	if (!IsATowTruck(vehicle))				return SendErrorMessage(playerid, "Çekicinin içerisinde olmalýsýnýz.");
    if (IsTrailerAttachedToVehicle(vehicle))
	{
		DetachTrailerFromVehicle(vehicle);
		return SendErrorMessage(playerid, "Araç kancadan çýkarýldý.");
	}

	new vehid;

    if (sscanf(params,"i", vehid))														return SendHelpMessage(playerid, "/araccek [araç ID]");
	if (vehid < 1 || vehid >= MAX_VEHICLES)												return 1;
    if (GetNearVehicle(playerid, 14.0, vehid) == 0)										return SendErrorMessage(playerid, "Aracýn yakýnýnda deðilsiniz.");
    if (IsABoat(vehid) || IsAPlane(vehid) || IsAHelicopter(vehid) || IsABiker(vehid))	return SendErrorMessage(playerid, "Bu araç çekilemez.");

    AttachTrailerToVehicle(vehid, vehicle);
	SendSyntaxMessage(playerid, "%s model aracý çekiyorsun. Komutu tekrar kullanarak kancayý kaldýrabilirsin.", VehicleNames[GetVehicleModel(vehid)-400]);
	return 1;
}

CMD:apb(playerid, params[])
{
	new action[24], secoption[153], tmp[2][128], faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction))		return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
    if (!PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

    if (sscanf(params, "s[24]S()[153]", action, secoption))
	{
		SendHelpMessage(playerid, "/apb [seçenek]");
		SendSyntaxMessage(playerid, "olustur / temizle / goster / duzenle / liste");
		return 1;
	}

	if (CompareStrings(action, "liste"))
	{
	    new count;

		for(new i = 0; i != MAX_APBS; i++)
	    {
	        if (ApbInfo[i][apbOn] == 0) continue;

	        if (strlen(ApbInfo[i][apbCharge]) > 64)	SendClientMessageEx(playerid, COLOR_LIGHTRED, "APB %i:{FFFFFF} %.64s ... (%s)", i, ApbInfo[i][apbCharge], ApbInfo[i][apbSuspect]);
	        else									SendClientMessageEx(playerid, COLOR_LIGHTRED, "APB %i:{FFFFFF} %s (%s)", i, ApbInfo[i][apbCharge], ApbInfo[i][apbSuspect]);

			count++;
	    }

	    if (!count)	return SendErrorMessage(playerid,"APB notlarý bulunamadý.");

		return 1;
	}
	else if (CompareStrings(action, "goster"))
	{
		new number;

		if (sscanf(secoption,"i", number))	return SendHelpMessage(playerid, "/apb goster [APB Numarasý]");
		if (!ApbInfo[number][apbOn])			return SendErrorMessage(playerid, "APB notu bulunamadý.");

		SCM(playerid, -1, "____________________________________");
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Þüpheli:{FFFFFF} %s", ApbInfo[number][apbSuspect]);

		if (strlen(ApbInfo[number][apbCharge]) > 64)
		{
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Taným:{FFFFFF} %.64s ...", ApbInfo[number][apbCharge]);
		    SendClientMessageEx(playerid, -1, "... %s", ApbInfo[number][apbCharge][64]);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "Taným:{FFFFFF} %s", ApbInfo[number][apbCharge]);
		}

        SendClientMessageEx(playerid, COLOR_LIGHTRED, "Düzenleyen:{FFFFFF} %s, %s.", ApbInfo[number][apbOfficer], Factions[ApbInfo[number][apbFaction]][fShortName]);
		SCM(playerid, -1, "____________________________________");
	}
	else if (CompareStrings(action, "temizle"))
	{
		new number;

		if (sscanf(secoption,"i", number))	return SendHelpMessage(playerid, "/apb temizle [APB Numarasý]");
		if (!ApbInfo[number][apbOn])		return SendErrorMessage(playerid, "APB notu bulunamadý.");

		SendSyntaxMessage(playerid, "ABP notunu temizlediniz %i.", number);
		SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "* HQ: %s %s ABP notunu temizledi %i.", GetRankName(playerid), GetNameEx(playerid), number);

		new query[256];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `apbs` WHERE `id` = %i", ApbInfo[number][apbID]);
		mysql_tquery(dbHandle, query);

		ApbInfo[number][apbOn] =
		ApbInfo[number][apbID] = 0;
	}
	else if (CompareStrings(action, "duzenle"))
	{
		new number, info[153];

		if (sscanf(secoption,"is[153]", number, info))	return SendHelpMessage(playerid, "/apb duzenle [APB numarasý] [þüpheli / taným]");
		if (!ApbInfo[number][apbOn])					return SendErrorMessage(playerid, "APB notu bulunamadý.");
        if (strfind(info, "/", true) == -1)				return SendErrorMessage(playerid, "Sembol bulunamadý \"/\".");

		SendSyntaxMessage(playerid, "APB notunu düzenlediniz. [NUM: %i].", number);
		strexplode(tmp, info, "/");
		format(ApbInfo[number][apbSuspect], MAX_PLAYER_NAME, "%s", tmp[0]);
		format(ApbInfo[number][apbCharge], 128, "%s", tmp[1]);
		ApbInfo[number][apbFaction] = faction;

		SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "* HQ: %s %s APB numarasý deðiþtirildi %i.", GetRankName(playerid), GetNameEx(playerid), number);

		new query[128 + 128];
		mysql_format(dbHandle,query, sizeof(query), "UPDATE `apbs` SET `charge` = '%s', `suspect` = '%e' WHERE `id` = %i", SQL_ReturnEscaped(tmp[1]), SQL_ReturnEscaped(tmp[0]), ApbInfo[number][apbID]);
		mysql_tquery(dbHandle, query);
		return 1;
	}
	else if (CompareStrings(action, "olustur"))
	{
		new info[153];

		if (sscanf(secoption,"s[153]", info))	return SendHelpMessage(playerid, "/apb olustur [süpheli / taným]");
        if (strfind(info, "/", true) == -1)		return SendErrorMessage(playerid, "\"/\" ile ayýrarak yazmalýsýnýz.");

		new apb = -1;

		for(new i = 0; i != MAX_APBS; i++)
		{
			if (ApbInfo[i][apbOn] != 0) continue;

			apb = i;
			break;
		}

		if (apb == -1)	return SendErrorMessage(playerid, "APB notu oluþturmak için yer kalmamýþ.");

		SendSyntaxMessage(playerid, "Bir APB notu oluþturdunuz [Numara: %i].", apb);
		strexplode(tmp, info, "/");
		format(ApbInfo[apb][apbOfficer], MAX_PLAYER_NAME, "%s", GetNameEx(playerid));
		format(ApbInfo[apb][apbSuspect], MAX_PLAYER_NAME, "%s", tmp[0]);
		format(ApbInfo[apb][apbCharge], 128, "%s", tmp[1]);
		format(ApbInfo[apb][apbDate], 32, "%s", GetFullDate());

		ApbInfo[apb][apbFaction] = faction;

		SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "* HQ: %s %s yeni bir APB notu eklendi. Numara: %i.", GetRankName(playerid), GetNameEx(playerid), apb);

        new query[128 + 128];
		mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `apbs` (faction, charge, suspect, officer, date) VALUES (%i, '%s', '%s', '%s', '%s')", faction, SQL_ReturnEscaped(tmp[1]), SQL_ReturnEscaped(tmp[0]), GetNameEx(playerid), GetFullDate());
		mysql_tquery(dbHandle, query, "ApbCreate", "i", apb);
		return 1;
	}
	return 1;
}

CMD:gisedurum(playerid, params[])
{
	if (!IsPlayerFactionPolice(playerid))	return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
    if (!PlayerInfo[playerid][pOnDuty])		return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

	if (isnull(params))
	{
	    SendHelpMessage(playerid, "/gisedurum [seçenekler]");
	    SCM(playerid, COLOR_GRAD2, "kapat / ac ile giþeleri kontrol edebilirsin. ");
		SCM(playerid, COLOR_GRAD2, "0 - Las Venturas giþelerini açýp kapatýr. ");
		SCM(playerid, COLOR_GRAD2, "1 - Blueberry (sað köprü) - açýp kapatýr. ");
		SCM(playerid, COLOR_GRAD2, "2 - Blueberry (sol köprü) - açýp kapatýr. ");
		return 1;
	}

	if (L_a_RequestAllowedCop > gettime())	return SendErrorMessage(playerid, "%i saniye beklemelisin.", L_a_RequestAllowedCop - gettime());

    if (CompareStrings(params, "ac"))
	{
	    if (PlayerInfo[playerid][pRank] < 10)	return SendErrorMessage(playerid, "Bu fonksiyonu kullanmak için yetkili deðilsiniz.");

	    for(new i; i != MAX_TOLLS; i++)
		{
			aTolls[i][E_tLocked] = 0;
		}

        SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: %s %s adlý memur giþe giriþ çýkýþlarýný açtý. **", GetRankName(playerid), GetNameEx(playerid));
		L_a_RequestAllowedCop = gettime() + TOLL_DELAY_COP;
		return 1;
	}
	else if (CompareStrings(params, "kapat"))
	{
	    if (PlayerInfo[playerid][pRank] < 10)	return SendErrorMessage(playerid, "Bu fonksiyonu kullanmak için yetkili deðilsiniz. ");

		for(new i; i != MAX_TOLLS; i++)
		{
		    aTolls[i][E_tLocked] = 1;
		    Toll_CloseToll(i);
		}

		SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: %s %s giþe giriþ çýkýþlarýný kapattý. **", GetRankName(playerid), GetNameEx(playerid));
        L_a_RequestAllowedCop = gettime() + TOLL_DELAY_COP;
		return 1;
	}

	new id = strval(params);

	if (id < 0 || id > 4)				return SendHelpMessage(playerid, "/gisedurum [giþe numarasý]");
    if (PlayerInfo[playerid][pRank] < 4)	return SendErrorMessage(playerid, "Bu komutu kullanabilmek için 4. rütbede olmalýsýnýz.");

    if (!IsPlayerInRangeOfPoint(playerid, TOLL_OPEN_DISTANCE, toll_gate_pos[id][0], toll_gate_pos[id][1], toll_gate_pos[id][2]) && !IsPlayerInRangeOfPoint(playerid, TOLL_OPEN_DISTANCE, toll_gate_pos[id+1][0], toll_gate_pos[id+1][1], toll_gate_pos[id+1][2]))
	{
		return SendErrorMessage(playerid, "Yakýnýnýzda giþe yok.");
	}

	new toll_name[3][35] = /*{"òîííåëü Richman", "Flint County", */{"Las Venturas motorways", "Blueberry köprüsü", "Blueberry köprüsü"};

	if (aTolls[id][E_tLocked] == 0)
	{
		aTolls[id][E_tLocked] = 1;
		Toll_CloseToll(id);
		aTolls[id+1][E_tLocked] = 1;
		Toll_CloseToll(id+1);
		SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: %s %s, %s adlý giþenin giriþ çýkýþýný açtý. **", GetRankName(playerid), GetNameEx(playerid), toll_name[id]);
	}
	else
	{
		aTolls[id][E_tLocked] = 0;
		aTolls[id+1][E_tLocked] = 0;
		SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: %s %s, %s adlý giþenin giriþ çýkýþýný kapattý. **", GetRankName(playerid), GetNameEx(playerid), toll_name[id]);
	}

	L_a_RequestAllowedCop = gettime() + TOLL_DELAY_COP;
	return 1;
}

alias:government("gov");
CMD:government(playerid, params[])
{
    if (PlayerInfo[playerid][pMutedTime] > 0)	return SendErrorMessage(playerid, "Sohbetiniz sistem tarafýndan engellendi.");
	if (isnull(params))							return SendHelpMessage(playerid, "(/gov) [mesaj]");

	new faction = PlayerInfo[playerid][pFaction], rank = PlayerInfo[playerid][pRank];

    if (!faction || IsFactionLegal(faction))						return SendErrorMessage(playerid, "Bu komutu kullanamazsýn.");
	if (!IsFactionLegal(faction)) return SCM(playerid, COLOR_LIGHTRED, "Devlet görevlisi deðilsin.");
	if (PlayerInfo[playerid][pSettings] & togGov)					return SendErrorMessage(playerid, "Önce hükümet haberlerini yayýnla. ");

	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togGov))	continue;

		if (strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;

			if (pos < MAXLEN-1) pos = MAXLEN;

			SendClientMessageEx(i, COLOR_LSPD, "[Hükümet Duyurusu] %.*s ...", pos, params);
			SendClientMessageEx(i, COLOR_LSPD, "[Hükümet Duyurusu] ... %s", params[pos]);
		}
		else
		{
			SendClientMessageEx(i, COLOR_LSPD, "[Hükümet Duyurusu] %s", params);
		}
	}
	return 1;
}

alias:isbasi("uniforma", "ekipman");
CMD:isbasi(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if (!faction || !IsFactionLegal(faction))								return 1;

    new locker_id = GetPlayerNearestLocker(playerid);
	if(locker_id < 1) return SendErrorMessage(playerid, "Bu komutu kullanmak için ekipman dolabýna yakýn olmalýsýnýz.");

    Dialog_Show(playerid, DutyMenu, DIALOG_STYLE_LIST, "{FFFFFF}Ýþbaþý", "- Ýþbaþý\n- Üniformalar\n- Ekipmanlar\n- Çelik Yelek\n- Tedavi Ol", "Seç", "Ýptal");
	return 1;
}

CMD:rozet(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if (!IsPlayerFactionPolice(playerid) && !IsPlayerFactionFire(playerid) && !IsPlayerFactionMedic(playerid))	return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
    if (!PlayerInfo[playerid][pOnDuty])		return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");
	if (PlayerInfo[playerid][pRank] < 2)	return SendErrorMessage(playerid, "Bu iþlev sizin için mevcut deðil.");

    if (GetPlayerColor(playerid) != RemoveAlpha(Factions[faction][fColor]))
	{
		SetPlayerColor(playerid, RemoveAlpha(Factions[faction][fColor]));
        SendSyntaxMessage(playerid, "Rozetinizi taktýnýz.");
	}
	else
	{
		SetPlayerColor(playerid, TEAM_HIT_COLOR);
        SendSyntaxMessage(playerid, "Rozetinizi çýkardýnýz.");
	}
	return 1;
}

/*
CMD:lift(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid, 2.0, 2268.0640,2448.2449,3.5313) && !IsPlayerInRangeOfPoint(playerid, 2.0, 2781.0559,-1056.2823,1028.4969) && !IsPlayerInRangeOfPoint(playerid, 2.0, 2874.6665,-940.6707,1035.9259) && !IsPlayerInRangeOfPoint(playerid, 2.0, 2872.8813,-1072.9934,1037.1782)) return 1;

	Dialog_Show(playerid, LSPDElevator, DIALOG_STYLE_LIST, "{FFFFFF}Elevator", "[0] Garage\n[1] Ïåðâûé ýòàæ\n[2] Âòîðîé ýòàæ\n[3] Ñïîðòèâíûé çàë", "Seç", "Ýptal");
	return 1;
}*/

alias:destekkabul("dk");
CMD:destekkabul(playerid, params[])
{
    new
		userid;

	if (!IsFactionLegal(PlayerInfo[playerid][pFaction]))
		return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");

	new id = PlayerInfo[playerid][pFaction];

	if (sscanf(params, "u", userid))
		return SendHelpMessage(playerid, "/destekkabul [destek talebi veren kiþi ID veya isim]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Kiþi oyunda deðil.");

	if (!IsPlayerLogged(userid) && pTemp[userid][pCallOn] == 0)
		return SendErrorMessage(playerid, "Kabul ettiðiniz çaðrý kodu sonlanmýþ veya hatalý.");

	if (pTemp[playerid][pPatrol])	SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* %s %s [%s] çaðrýya katýldý. #%i.", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], userid);
	else							SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* %s %s çaðrýya katýldý. #%i.", GetRankName(playerid), GetNameEx(playerid), userid);

    SendServerMessage(playerid, "Bir destek çaðrýsýna katýldýn. /destekbitir ile ayrýlabilirsin.");

	Waypoint_Set(playerid, pTemp[userid][pCallPosX], pTemp[userid][pCallPosY], pTemp[userid][pCallPosZ], 3.0);
	pTemp[playerid][pDestekTakip] = userid;
	return 1;
}

CMD:destekbitir(playerid, params[])
{
    new
		userid;

	if (!IsFactionLegal(PlayerInfo[playerid][pFaction]))
		return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");

	new id = PlayerInfo[playerid][pFaction];

	if (!IsPlayerLogged(playerid) && pTemp[userid][pDestekTakip] == 0)
		return SendErrorMessage(playerid, "Bir destek çaðrýsýna katýlmamýþsýn.");

	if (pTemp[playerid][pPatrol])	SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* %s %s [%s] çaðrýdan ayrýldý. #%i.", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], pTemp[playerid][pDestekTakip]);
	else							SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* %s %s çaðrýdan ayrýldý. #%i.", GetRankName(playerid), GetNameEx(playerid), pTemp[playerid][pDestekTakip]);

	pTemp[playerid][pDestekTakip] = 0;
	pc_cmd_cpsifirla(playerid, "");
	return 1;
}


alias:ihbarkabul("ik");
CMD:ihbarkabul(playerid, params[])
{
    new
		vehicle = GetPlayerVehicleID(playerid),
		userid
	;

	if (!IsPlayerFactionPolice(playerid))
		return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");

	new id = PlayerInfo[playerid][pFaction];

	if (VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction] && !PlayerToPoint(30.0, playerid, Factions[id][fPosX], Factions[id][fPosY], Factions[id][fPosZ]))
		return SendErrorMessage(playerid, "Bu komut sadece departmanda ve polis araçlarýnda kullanýlabilir.");

	if (sscanf(params, "u", userid))
		return SendHelpMessage(playerid, "/ihbarkabul [ihbar eden kiþi ID veya isim]");

	if (!IsPlayerLogged(userid) && pTemp[userid][pCallOn] == 0)
		return SendErrorMessage(playerid, "Kabul ettiðiniz çaðrý kodu sonlanmýþ veya hatalý. ");

	if (pTemp[playerid][pPatrol])	SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* %s %s [%s] çaðrýya katýldý. #%i.", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], userid);
	else							SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* %s %s çaðrýya katýldý. #%i.", GetRankName(playerid), GetNameEx(playerid), userid);

	Waypoint_Set(playerid, pTemp[userid][pCallPosX], pTemp[userid][pCallPosY], pTemp[userid][pCallPosZ], 3.0);
	pTemp[userid][pCallOn] = 0;

	pTemp[playerid][pPoliceCalls]++;
	return 1;
}

alias:spike("sp","civikoy","civi");
CMD:spike(playerid, params[])
{
	if (!IsPlayerFactionPolice(playerid))	return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])		return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

	new option[16], secoption[128];

	if (sscanf(params, "s[16]S()[128]", option, secoption))
	{
		SendHelpMessage(playerid, "/spike [yerlestir / kaldir / tumunukaldir]"); //Komut
		return 1;
	}

	if (CompareStrings(option, "yerlestir"))
	{
		if (GetWorld(playerid) != 0 || GetInterior(playerid) != 0)	return SendErrorMessage(playerid, "Bu komutu araç içerisinde kullanamazsýnýz.");
		if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)		return SendErrorMessage(playerid, "Bu iþlem için araçta olmamalýsýn. ");
		new size, model;
		if (sscanf(secoption,"i", size))	return SendHelpMessage(playerid, "/spike yerlestir [1 = büyük, 2 = küçük]");
		if (size < 1 || size > 2)           return SendHelpMessage(playerid, "/spike yerlestir [1 = büyük, 2 = küçük]");

		new Float:x, Float:y, Float:z, Float:a, location[MAX_ZONE_NAME];

		GetPlayerFacingAngle(playerid, a);

		GetXYInFrontOfPlayer(playerid, x, y, z, 4.5);

		if (size == 1) {
			model = 2892;
		}
		else model = 2899;

		if (CreateStrip(x, y, z, a, model) == -1)	return SendErrorMessage(playerid, "Maksimum çivi sayýsýna ulaþýldý.");

		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);

		OnPlayAnim(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0);

		SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* HQ: %s %s adlý memur %s lokasyonuna çivi yerleþtirdi.", GetRankName(playerid), GetNameEx(playerid), location);
		return 1;
	}

	if (CompareStrings(option, "kaldir"))
	{
		if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)	return SendErrorMessage(playerid, "Bu iþlem için araçta olmamalýsýn. ");

		for(new i = 0; i < MAX_SPIKE; i++)
		{
			if (!SpikeInfo[i][sCreated] && !IsPlayerInRangeOfPoint(playerid, 4.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ])) continue;

			SpikeInfo[i][sCreated] = 0;
			SpikeInfo[i][sX] =
			SpikeInfo[i][sY] =
			SpikeInfo[i][sZ] = 0.0;

			if (IsValidDynamicObject(SpikeInfo[i][sObject]))
			{
				DestroyDynamicObject(SpikeInfo[i][sObject]);
				SpikeInfo[i][sObject] = INVALID_OBJECT_ID;
			}

			SendSyntaxMessage(playerid, "Çivileri kaldýrdýn [ID: %i].", i);
			break;
		}
		return 1;
	}

	else if (CompareStrings(option, "tumunukaldir"))
	{
		for(new i = 0; i < MAX_SPIKE; i++)
		{
			if (!SpikeInfo[i][sCreated]) continue;

			SpikeInfo[i][sCreated] = 0;
			SpikeInfo[i][sX] =
			SpikeInfo[i][sY] =
			SpikeInfo[i][sZ] = 0.0;

			if (IsValidDynamicObject(SpikeInfo[i][sObject]))
			{
				DestroyDynamicObject(SpikeInfo[i][sObject]);
				SpikeInfo[i][sObject] = INVALID_OBJECT_ID;
			}
		}

		SendFactionMessageF(FACTION_POLICE, COLOR_LSPD, "* HQ: %s %s adlý memur tüm çivileri kaldýrdý.", GetRankName(playerid), GetNameEx(playerid));
		return 1;
	}

	else
	{
		SendHelpMessage(playerid, "/spike [yerlestir / kaldir / tumunukaldir]");  //KOMUTU DEÐÝÞTÝRÝLECEK
	}
	return 1;
}

CMD:tutuklulistesi(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction) || !IsFactionDocs(faction))	return SendErrorMessage(playerid,"Bir polis memuru / hapishane memuru olmalýsýnýz.");

	/*if (faction == DOCS)
	{
		SendClientMessage(playerid, COLOR_GREEN, "Ñïèñîê çàêëþ÷¸ííûõ â òþðüìå:");
		foreach(new i : Player)
		{
			if (!IsPlayerLogged(i) || PlayerInfo[i][pJailed] != PRISON_JAIL) continue;

			SendClientMessageEx(playerid, COLOR_GRAD2, "%s%i %s | Âðåìÿ çàêëþ÷åíèÿ: %s ñåê.", (PlayerInfo[i][pIsolateTime] != 0)?("B"):("A"),PlayerInfo[i][pPrisoned]+100, GetNameEx(i), FormatNumber(PlayerInfo[i][pJailTime]));
		}
		return 1;
	}*/

	if (IsFactionPolice(faction))
	{
		SendClientMessage(playerid, COLOR_SERVER2, "Hapistekiler:");

		foreach(new i : Player)
		{		//(PlayerInfo[i][pJailed] != LSPD_JAIL && PlayerInfo[i][pJailed] != PALOMINO_JAIL)
			if (!IsPlayerLogged(i) || PlayerInfo[i][pJailed] != PALOMINO_JAIL) continue;

			SendClientMessageEx(playerid, COLOR_GRAD2, "%s | Hapis süresi: %s saniye.", GetNameEx(i), FormatNumber(PlayerInfo[i][pJailTime]));
		}
		return 1;
	}

	/*else if (faction == SASD)
	{
		SendClientMessage(playerid, COLOR_GREEN, "Ñïèñîê çàêëþ÷¸ííûõ â ó÷àñòêå San Andreas Sheriff's Department:");
		foreach(new i : Player)
		{
			if (!IsPlayerLogged(i) || PlayerInfo[i][pJailed] != SASD_JAIL) continue;

			SendClientMessageEx(playerid, COLOR_GRAD2, "%s | Âðåìÿ çàêëþ÷åíèÿ: %s ñåê.", GetNameEx(i), FormatNumber(PlayerInfo[i][pJailTime]));
		}
		return 1;
	}*/
	return 1;
}

alias:cctvtamir("kameratamir");
CMD:cctvtamir(playerid)
{
	new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionPolice(faction) && !IsFactionCity(faction)) 				return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");

	new camid = GetNearestCamera(playerid, 10.0);

	if (camid == -1) 				return SendErrorMessage(playerid, "CCTV kamerasýna yakýn olmalýsýnýz.");
	if (!CCTVInfo[camid][tvBreak]) 	return SendErrorMessage(playerid, "Bu CCTV kamerasý çalýþýyor.");

	SetCameraBreakState(camid, 0);
	SendSyntaxMessage(playerid, "CCTV kamerasýný tamir ettiniz. [ID: %i | %s].", camid, CCTVInfo[camid][tvName]);
	return 1;
}

/*
CMD:rgun(playerid)
{
	if (IsPlayerFactionPolice(playerid))		return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");

	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli]) return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

	new dropid = -1;
	if ((dropid = ItemDrop_Nearest(playerid)) == -1) return SendErrorMessage(playerid, "Íà ïîëó îêîëî Âàñ íåò îðóæèÿ.");
	if (ItemDrop[dropid][dropID] == 0) 				return SendErrorMessage(playerid, "Íà ïîëó îêîëî Âàñ íåò îðóæèÿ.");

	if (inventory_items[ItemDrop[dropid][dropID]][itemType] == ITEM_TYPE_WEAPON)
		return SendErrorMessage(playerid, "Íà ïîëó îêîëî Âàñ íåò îðóæèÿ.");

	ItemDrop_Delete(dropid);
	return 1;
}*/


/*
#define MAX_HELP_LIST (50)

enum HELP_LIST_ENUM
{
	bool:hlExist,
    Float:hlX,
    Float:hlY,
    Float:hlZ,
	hlOfficer[MAX_PLAYER_NAME*2],
	hlTime,
	hlResponded //Ñêîëüêî ðàç îòêëèêíóëèñü
};
new HelpList[MAX_HELP_LIST][HELP_LIST_ENUM];

GetFreeHelpListSlot() {

	return 1;
}

Dialog:HelpList(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new string[MAX_PLAYER_NAME*2 + ] = "";

	for (new i; i < MAX_HELP_LIST; i++) {
		new location[MAX_ZONE_NAME];
		GetZone(HelpList[i][hlX], HelpList[i][hlY], location, MAX_ZONE_NAME);

		format(string, sizeof(string), "Çàïðîñ îò %s ~%i ñåêóíä íàçàä â ðàéîíå %s", );
	}
	Show_Dialog(playerid, "Çàïðàøèâàþò ïîìîùü:", string, "Accept", Kapat)
	return 1;
}


alias:panicbutton("pb");
CMD:panicbutton(playerid)
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli]) return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

	if (IsPlayerFactionPolice(playerid)) 	return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])		return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");

	new id = GetFreeHelpListSlot();

	if () { // in da interior

	}
	else GetPlayerPos(playerid, HelpList[id][hlX], HelpList[id][hlY], HelpList[id][hlZ]);

	HelpList[id][hlExist] = true;
	HelpList[id][hlResponded] = 0;
	HelpList[id][hlTime] = gettime();


	format(HelpList[id][hlOfficer], MAX_PLAYER_NAME*2, "%s %s", GetRankName(playerid), GetOfficerName(playerid));

	Waypoint_Set(playerid, HelpList[id][hlX], HelpList[id][hlY], HelpList[id][hlZ], 3.0);

	new location[MAX_ZONE_NAME];
	GetZone(HelpList[id][hlX], HelpList[id][hlY], location, MAX_ZONE_NAME);

	SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "** HQ: %s çàïðàøèâàåò ïîìîùü â ðàéîíå %s.", HelpList[id][hlOfficer], location);
	return 1;
}

alias:pblist("helplist");
CMD:pblist(playerid)
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli]) return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

	if (IsPlayerFactionPolice(playerid)) 	return SendErrorMessage(playerid, "Bu komutu kullanamazsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])		return SendErrorMessage(playerid, "Ýþbaþýnda olmalýsýnýz.");


	return 1;
}*/

CMD:fbirim(playerid, params[]) // Log: Evet
{
	new olusumid = PlayerInfo[playerid][pFaction], id, division;
	if(olusumid == 0) return SendErrorMessage(playerid, "Birlikte deðilsin.");
	if(PlayerInfo[playerid][pRank] < 17) return SendErrorMessage(playerid, "Bu komutu kullanamazsýn.");
	if(OlusumTipGetir(olusumid) == FACTION_POLICE)
	{
		static const divisionsName[5][32] = {"Dedektif Büro", "SEB/SWAT", "FLD", "ASD", "Trafik"};
		if(!sscanf(params, "ud", id, division))
		{
			if(PlayerInfo[id][pFaction] != olusumid) return SendServerMessage(playerid, "Bu kiþi sizin oluþumunuzda deðil.");
			if(division < 1 || division > 5) return SendServerMessage(playerid, "Birim bulunamadý. (1 - 3)");
			division--;
			PlayerInfo[id][pOlusumDivision][division] = !PlayerInfo[id][pOlusumDivision][division];
			if(PlayerInfo[id][pOlusumDivision][division])
			{
				SendServerMessage(playerid, "%s kiþisini %s birimine aldýn.", GetNameEx(id), divisionsName[division]);
				SendServerMessage(id, "%s kiþisi seni %s birimine aldý.", GetNameEx(playerid), divisionsName[division]);
				Log_Kaydet("resmibirlikLog.txt", "[/fbirim] %s (C_ID: %d | A_ID: %d), %s (C_ID: %d | A_ID: %d) adli kullaniciyi %s birimine aldi. [Tarih: %s]", GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetNameEx(id), PlayerInfo[id][pID], PlayerInfo[id][pID], divisionsName[division], GetFullDate());
			}
			else
			{
				SendServerMessage(playerid, "%s kiþisini %s biriminden çýkarttýn.", GetNameEx(id), divisionsName[division]);
				SendServerMessage(id, "%s kiþisi seni %s biriminden çýkarttý.", GetNameEx(playerid), divisionsName[division]);
				Log_Kaydet("resmibirlikLog.txt", "[/fbirim] %s (C_ID: %d | A_ID: %d), %s (C_ID: %d | A_ID: %d) adli kullaniciyi %s biriminden atti. [Tarih: %s]", GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetNameEx(id), PlayerInfo[id][pID], PlayerInfo[id][pID], divisionsName[division], GetFullDate());
			}
		}
		else return SendSyntaxMessage(playerid, "/fbirim [id/isim] [1: DB - 2: SWAT - 3: Lisans - 4: ASD - 5: Trafik]");
	}
	else if(OlusumTipGetir(olusumid) == FACTION_FIRE)
	{
		static const divisionsName[5][32] = {"TSB", "SFM", "ARSON", "AIR", "LSL"};
		if(!sscanf(params, "ud", id, division))
		{
			if(PlayerInfo[id][pFaction] != olusumid) return SendServerMessage(playerid, "Bu kiþi sizin oluþumunuzda deðil.");
			if(division < 1 || division > 5) return SendServerMessage(playerid, "Birim bulunamadý. (1 - 5)");
			division--;
			PlayerInfo[id][pOlusumDivision][division] = !PlayerInfo[id][pOlusumDivision][division];
			if(PlayerInfo[id][pOlusumDivision][division])
			{
				SendServerMessage(playerid, "%s kiþisini %s birimine aldýn.", GetNameEx(id), divisionsName[division]);
				SendServerMessage(id, "%s kiþisi seni %s birimine aldý.", GetNameEx(playerid), divisionsName[division]);
				Log_Kaydet("resmibirlikLog.txt", "[/fbirim] %s (C_ID: %d | A_ID: %d), %s (C_ID: %d | A_ID: %d) adli kullaniciyi %s birimine aldi. [Tarih: %s]", GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetNameEx(id), PlayerInfo[id][pID], PlayerInfo[id][pID], divisionsName[division], GetFullDate());
			}
			else
			{
				SendServerMessage(playerid, "%s kiþisini %s biriminden çýkarttýn.", GetNameEx(id), divisionsName[division]);
				SendServerMessage(id, "%s kiþisi seni %s biriminden çýkarttý.", GetNameEx(playerid), divisionsName[division]);
				Log_Kaydet("resmibirlikLog.txt", "[/fbirim] %s (C_ID: %d | A_ID: %d), %s (C_ID: %d | A_ID: %d) adli kullaniciyi %s biriminden atti. [Tarih: %s]", GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], GetNameEx(id), PlayerInfo[id][pID], PlayerInfo[id][pID], divisionsName[division], GetFullDate());

			}
		}
		else return SendSyntaxMessage(playerid, "/fbirim [id/isim] [1: TSB - 2: SFM - 3: ARSON - 4: AIR - 5: LSL]");
	}
	else
	{
		static const divisionsName[84] = {"Lisans"};
		if(!sscanf(params, "ud", id, division))
		{
			if(PlayerInfo[id][pFaction] != olusumid) return SendServerMessage(playerid, "Bu kiþi sizin oluþumunuzda deðil.");
			if(division != 1) return SendServerMessage(playerid, "Birim bulunamadý. (Sadece 1 yazabilirsiniz)");
			division--;
			PlayerInfo[id][pOlusumDivision][division] = !PlayerInfo[id][pOlusumDivision][division];
			if(PlayerInfo[id][pOlusumDivision][division])
			{
				SendServerMessage(playerid, "%s kiþisini %s birimine aldýn.", GetNameEx(id), divisionsName);
				SendServerMessage(id, "%s kiþisi seni %s birimine aldý.", GetNameEx(playerid), divisionsName);
			}
			else
			{
				SendServerMessage(playerid, "%s kiþisini %s biriminden çýkarttýn.", GetNameEx(id), divisionsName);
				SendServerMessage(id, "%s kiþisi seni %s biriminden çýkarttý.", GetNameEx(playerid), divisionsName);
			}
		}
		else return SendSyntaxMessage(playerid, "/fbirim [id/isim] [1: Lisans]");
	}
	return 1;
}

CMD:r2(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
	if(!IsFactionLegal(faction)) return SendErrorMessage(playerid, "Hükümet oluþumunda olmalýsýn.");

    new message[256];
    if(sscanf(params, "s[256]", message) || strlen(message) > 256) return SendSyntaxMessage(playerid, "/r [yazý]");
    SendLocalMessage(Range_VShort, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3, "(Telsiz) %s: %s", GetNameEx(playerid), params);
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaction] == 0) continue;
		if(!PlayerInfo[i][pOnDuty]) continue;
        if(PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction]) continue;

	    if (strlen(params) > MAXLEN)
	    {
		    new pos = MAXLEN;

		    if (pos < MAXLEN-1) pos = MAXLEN;

			SendClientMessageEx(i, COLOR_RADIO, "** [CH: CW-TAC, S: 913] %s: %.*s ...", GetNameEx(playerid), pos, params);
			SendClientMessageEx(i, COLOR_RADIO, "... %s", params[pos]);
	    }
	    else
	    {
  		    SendClientMessageEx(i, COLOR_RADIO, "** [CH: CW-TAC, S: 913] %s: %s", GetNameEx(playerid), params);
	    }
    }
    printf("[R] %s: %s", GetNameEx(playerid), params);
    return 1;
}

CMD:r3(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
	if(!IsFactionLegal(faction)) return SendErrorMessage(playerid, "Hükümet oluþumunda olmalýsýn.");

    if(PlayerInfo[playerid][pOlusumDivision][4] != 1) return SendErrorMessage(playerid, "Bu komutu sadece Trafik Büro üyeleri kullanabilir.");
    new message[256];
    if(sscanf(params, "s[256]", message) || strlen(message) > 256) return SendSyntaxMessage(playerid, "/r [yazý]");
    SendLocalMessage(Range_VShort, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3, "(Telsiz) %s: %s", GetNameEx(playerid), params);
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaction] == 0) continue;
		if(!PlayerInfo[i][pOnDuty]) continue;
        if(PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction]) continue;

        if(PlayerInfo[i][pOlusumDivision][4] != 1) continue;
	    if (strlen(params) > MAXLEN)
	    {
		    new pos = MAXLEN;

		    if (pos < MAXLEN-1) pos = MAXLEN;

			SendClientMessageEx(i, COLOR_RADIO, "** [CH: TRAFFIC, S: 913] %s: %.*s ...", GetNameEx(playerid), pos, params);
			SendClientMessageEx(i, COLOR_RADIO, "... %s", params[pos]);
	    }
	    else
	    {
  		    SendClientMessageEx(i, COLOR_RADIO, "** [CH: TRAFFIC, S: 913] %s: %s", GetNameEx(playerid), params);
	    }
    }
    printf("[R] %s: %s", GetNameEx(playerid), params);
    return 1;
}

CMD:r4(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
	if(!IsFactionLegal(faction)) return SendErrorMessage(playerid, "Hükümet oluþumunda olmalýsýn.");

    if(PlayerInfo[playerid][pOlusumDivision][1] != 1) return SendErrorMessage(playerid, "Bu komutu sadece SWAT üyeleri kullanabilir.");
    new message[256];
    if(sscanf(params, "s[256]", message) || strlen(message) > 256) return SendSyntaxMessage(playerid, "/r [yazý]");
    SendLocalMessage(Range_VShort, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3, "(Telsiz) %s: %s", GetNameEx(playerid), params);
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaction] == 0) continue;
		if(!PlayerInfo[i][pOnDuty]) continue;
        if(PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction]) continue;

        if(PlayerInfo[i][pOlusumDivision][1] != 1) continue;
	    if (strlen(params) > MAXLEN)
	    {
		    new pos = MAXLEN;

		    if (pos < MAXLEN-1) pos = MAXLEN;

			SendClientMessageEx(i, COLOR_RADIO, "** [CH: METRO, S: 914] %s: %.*s ...", GetNameEx(playerid), pos, params);
			SendClientMessageEx(i, COLOR_RADIO, "... %s", params[pos]);
	    }
	    else
	    {
  		    SendClientMessageEx(i, COLOR_RADIO, "** [CH: METRO, S: 914] %s: %s", GetNameEx(playerid), params);
	    }
    }
    printf("[R] %s: %s", GetNameEx(playerid), params);
    return 1;
}

CMD:r5(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
	if(!IsFactionLegal(faction)) return SendErrorMessage(playerid, "Hükümet oluþumunda olmalýsýn.");

    if(PlayerInfo[playerid][pOlusumDivision][0] != 1) return SendErrorMessage(playerid, "Bu komutu sadece DET üyeleri kullanabilir.");
    new message[256];
    if(sscanf(params, "s[256]", message) || strlen(message) > 256) return SendSyntaxMessage(playerid, "/r [yazý]");
    SendLocalMessage(Range_VShort, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3, "(Telsiz) %s: %s", GetNameEx(playerid), params);
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaction] == 0) continue;
		if(!PlayerInfo[i][pOnDuty]) continue;
        if(PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction]) continue;

        if(PlayerInfo[i][pOlusumDivision][0] != 1) continue;
	    if (strlen(params) > MAXLEN)
	    {
		    new pos = MAXLEN;

		    if (pos < MAXLEN-1) pos = MAXLEN;

			SendClientMessageEx(i, COLOR_RADIO, "** [CH: DETECTIVE, S: 915] %s: %.*s ...", GetNameEx(playerid), pos, params);
			SendClientMessageEx(i, COLOR_RADIO, "... %s", params[pos]);
	    }
	    else
	    {
  		    SendClientMessageEx(i, COLOR_RADIO, "** [CH: DETECTIVE, S: 915] %s: %s", GetNameEx(playerid), params);
	    }
    }
    printf("[R] %s: %s", GetNameEx(playerid), params);
    return 1;
}

alias:radar("dashcam");
CMD:radar(playerid, params[])
{
    new vehid = GetPlayerVehicleID (playerid);

    if (!IsFactionPolice(PlayerInfo[playerid][pFaction])) 	return SendErrorMessage(playerid, "Polis deðilsin!");
    if (!PlayerInfo[playerid][pOnDuty])				 		return SendErrorMessage(playerid, "Ýþbaþýnda deðilsin!");
    if (!IsFactionPolice(VehicleInfo[vehid][carFaction])) 	return SendErrorMessage(playerid, "Polis aracýnda olmalýsýn!");

    if (!CheckingSpeed[vehid])
    {
		RadarHud_TD(playerid);

        new Float: x, Float: y, Float: z, Float: a;
        GetVehiclePos (vehid, x, y, z);
        GetVehicleZAngle (vehid, a);
        VehRadarID [vehid] = CreateObject (367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 300.0);
        AttachObjectToVehicle (VehRadarID [vehid], vehid, 0.2, 0.50, 0.3, 0.0, 0.0, 90.0);

        RadarHud_Goster(playerid);

        CheckingSpeed [vehid] = 1;

        SendWarningMessage(playerid, "Radar oluþturuldu.");
    }
    else
    {
		DestroyObject(VehRadarID [vehid]);
		VehRadarID [vehid] = -1;
		CheckingSpeed [vehid] = 0;

		RadarHud_Gizle(playerid);
		RadarHud_Sil(playerid);

        SendWarningMessage(playerid, "Radar kaldýrýldý.");
	}
	return 1;
}

/* Envanter sistemi */

stock LoadPlayerInventory(playerid)
{
    new query[256];
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `inventory` WHERE `userid`=%i", PlayerInfo[playerid][pID]);
   	mysql_tquery(dbHandle, query, "P_LoadInventory", "i", playerid);
	return 1;
}

this::P_LoadInventory(playerid)
{

    if (!cache_num_rows())
    {
        new query[512];
        mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `inventory` (`userid`) VALUES (%i)", PlayerInfo[playerid][pID]);
        mysql_tquery(dbHandle, query);
        return 1;
    }


    SetPVarInt(playerid, #pDelay, 1);

    // MAX_INV_SLOT yükseltilirse burayý deðiþtirin.
    for(new i = 0; i < 16; i++)
    {
        new invnum[32], itID;
        format(invnum, sizeof(invnum), "id_%d", i+1);
        cache_get_value_name_int(0, invnum, itID);


        if (itID != 0)
        {
            new invnum2[32], invnum3[32], invnum4[32], invnum5[32];
            new Float:invnum22, invnum33, invnum44, invnum55[32];
            new invnum222[32], Float:invnum2222, yeniinv1, yeniinv2[32];


            format(invnum3, sizeof(invnum3), "ex_%d", i+1);
            cache_get_value_name_int(0, invnum3, invnum33);
            format(invnum4, sizeof(invnum4), "s_%d", i+1);
            cache_get_value_name_int(0, invnum4, invnum44);

            switch(itID)
            {

                case INV_GANJA, INV_MED_GANJA, 103 .. 118:
                {
                    format(invnum2, sizeof(invnum2), "f_%d", i+1);
                    cache_get_value_name_float(0, invnum2, invnum22);
                    GiveFloatInvItem(playerid, itID, invnum22, invnum33, invnum44);
                }


                case INV_DRUG:
                {
                    format(invnum222, sizeof(invnum222), "f_%d", i+1);
                    cache_get_value_name_float(0, invnum222, invnum2222);
                    format(invnum5, sizeof(invnum5), "n_%d", i+1);

                    new name[32];
                    cache_get_value_name(0, invnum5, name);

                    GiveDrugInvItem(playerid, name, invnum2222, invnum33, invnum44);
                }

                default:
                {
                    format(invnum2, sizeof(invnum2), "a_%d", i+1);
                    cache_get_value_name_int(0, invnum2, yeniinv1);
                    GiveInvItem(playerid, itID, yeniinv1, invnum33, invnum44);
                }
            }
        }
    }
    SetPVarInt(playerid, #pDelay, 0);
    return 1;
}


stock RemoveItem(playerid, slot)
{
	Inventory[playerid][slot][pInvItem] = 0;
	Inventory[playerid][slot][pInvQ] = 0;
	Inventory[playerid][slot][pInvQFloat] = 0.0;
	Inventory[playerid][slot][pInvEx] = 0;
	Inventory[playerid][slot][pInvS] = 0;
	format(Inventory[playerid][slot][pInvName], 16, "");
	return 1;
}

stock GivePlayerInvItem(playerid = -1, itemid = 0, amount = 0, Float:f_amount = 0.0, ex = 0, serial = 0, name[] = EOS, split = 0)
{

	//if (!GetPVarInt(playerid, #pDelay))			 return GivePlayerInvItem(playerid, itemid, amount, f_amount, ex, serial, name);
	if (!IsPlayerLogged(playerid))				 return -1;
	if (playerid == -1) 							 return -1; // ïî ôàíó ñäåëàë
	if (itemid < 0 || itemid >= MAX_ITEM_LIST)	 return -1;
	//if (!isnull(name) && strlen(name) > 16)		 return -1;

	if (inventory_items[itemid][itemFloat]) // FLOAT
	{
		if (f_amount <= 0.0 || f_amount > 1000.0)	return -1;

		for(new i = 0; i < MAX_INV_SLOTS; i++)
		{
			if (itemid == INV_DRUG) // DRUGS
			{
				if (CompareStrings(name, Inventory[playerid][i][pInvName]) && !isnull(name) && !isnull(Inventory[playerid][i][pInvName]) && Inventory[playerid][i][pInvS] == serial && Inventory[playerid][i][pInvEx] == ex && Inventory[playerid][i][pInvQFloat] + amount <= 1000.0)
				{
					Inventory[playerid][i][pInvQFloat] += amount;

					return i;
				}
			} else if (!split) {
				if (Inventory[playerid][i][pInvQFloat] + f_amount <= 1000.0 && Inventory[playerid][i][pInvItem] == itemid && inventory_items[itemid][itemSplit] == 1) {
					Inventory[playerid][i][pInvQFloat] += f_amount;

					return i;
				}
			}

			if (Inventory[playerid][i][pInvItem] != 0) continue;

			Inventory[playerid][i][pInvItem] 	= itemid;
			Inventory[playerid][i][pInvQ]		= amount;
			Inventory[playerid][i][pInvQFloat]	= f_amount;
			Inventory[playerid][i][pInvEx]		= ex;
			Inventory[playerid][i][pInvS]		= serial;
			format(Inventory[playerid][i][pInvName], 16, "%s", name);
			return i;
		}

	} else { // INTEGER
		if (amount < 0 || amount > 1000)	return -1;

		for(new i = 0; i < MAX_INV_SLOTS; i++)
		{
			if (Inventory[playerid][i][pInvQ] + amount <= 1000 && Inventory[playerid][i][pInvItem] == itemid && inventory_items[itemid][itemSplit] == 1)
			{
				Inventory[playerid][i][pInvQ] += amount;

				return i;
			}

			if (Inventory[playerid][i][pInvItem] != 0) continue;

			Inventory[playerid][i][pInvItem] 	= itemid;
			Inventory[playerid][i][pInvQ]		= amount;
			Inventory[playerid][i][pInvQFloat]	= f_amount;
			Inventory[playerid][i][pInvEx]		= ex;
			Inventory[playerid][i][pInvS]		= serial;
			format(Inventory[playerid][i][pInvName], 16, "%s", name);


			return i; // Âîçâðàùàåò ñëîò, â êîòîðûé ïîëîæèëè îáúåêò
		}
	}

	return -1;
}

stock RemovePlayerInvItem(playerid, itemid, amount = 0, Float:f_amount = 0.0, slot = -1)
{
	//SM1(playerid, "playerid = %i, itemid = %i, amount = %i, Float:f_amount = %i, slot = %i", playerid, itemid, amount, f_amount, slot);

	if (slot == -1)
	{
		for(new i = 0; i < MAX_INV_SLOTS; i++)
		{
			if (Inventory[playerid][i][pInvItem] == itemid)
			{
				if (amount == 0 && f_amount == 0.0) RemoveItem(playerid, i);
				else
				{
			        if (inventory_items[itemid][itemFloat])
			        {
			            if (Inventory[playerid][slot][pInvQFloat] >= 0.0 && Inventory[playerid][slot][pInvQFloat] - f_amount > 0.0)
				        {
			                Inventory[playerid][slot][pInvQFloat] = Inventory[playerid][slot][pInvQFloat] - f_amount;
				        }
			        }
                    else
			        {
				        RemovePlayerItem(playerid, itemid, amount);
			        }
				}

				FixInv(playerid);

				return 1;
			}
		}
	}
	else if (Inventory[playerid][slot][pInvItem] == itemid)
	{
		if (amount == 0 && f_amount == 0.0) RemoveItem(playerid, slot);
		else {
			if (inventory_items[itemid][itemFloat])
			{
			    if (Inventory[playerid][slot][pInvQFloat] >= 0.0 && Inventory[playerid][slot][pInvQFloat] - f_amount > 0.0)
				{
			        Inventory[playerid][slot][pInvQFloat] = Inventory[playerid][slot][pInvQFloat] - f_amount;
				}
			}
            else
			{
				RemovePlayerItem(playerid, itemid, amount);
			}
		}

		FixInv(playerid);

		return 1;
	}
	return 0;
}

stock GiveInvItem(playerid = -1, itemid = 0, amount = 0, ex = 0, serial = 0, name[] = EOS, split = 0) {
	return GivePlayerInvItem(playerid, itemid, amount, 0.0, ex, serial, name, split);
}

stock GiveDrugInvItem(playerid, name[], Float:f_amount, ex = 0, serial = 0) {
	return GivePlayerInvItem(playerid, INV_DRUG, 0, f_amount, ex, serial, name);
}

stock GiveFloatInvItem(playerid, itemid, Float:f_amount, ex = 0, serial = 0, name[] = EOS, split = 0) {
	return GivePlayerInvItem(playerid, itemid, 0, f_amount, ex, serial, name, split);
}

stock RemoveInvItem(playerid, itemid, amount = 0, slot = -1) {
	return RemovePlayerInvItem(playerid, itemid, amount, 0.0, slot);
}
stock RemoveFloatInvItem(playerid, itemid, Float:amount = 0.0, slot = -1) {
	return RemovePlayerInvItem(playerid, itemid, 0, amount, slot);
}

stock CheckInv(playerid)
{
    for(new i = 0; i < MAX_INV_SLOTS; i++) if (Inventory[playerid][i][pInvItem] == 0) return 1;
	return 0;
}

stock GetInvNextSlot(playerid)
{
    for(new i = 0; i < MAX_INV_SLOTS; i++) if (Inventory[playerid][i][pInvItem] == 0) return i;
	return -1;
}

stock PrintIid(InvItem)
{
    for(new i = 0; i < sizeof(inventory_items); i++) if (inventory_items[i][itemID] == InvItem) return inventory_items[i][itemModel];
	return -1;
}

stock FixInv(playerid)
{
	SetPVarInt(playerid, #pDelay, 1);
	new lastPrim = PlayerInfo[playerid][pLastPrim],
		lastSec = PlayerInfo[playerid][pLastSec],
		lastMelee = PlayerInfo[playerid][pLastMelee];

	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if (Inventory[playerid][i][pInvItem] == 0 && i != (MAX_INV_SLOTS - 1))
		{
			new i2 = i + 1;
			Inventory[playerid][i][pInvItem] 	= Inventory[playerid][i2][pInvItem];
			Inventory[playerid][i][pInvQ] 		= Inventory[playerid][i2][pInvQ];
			Inventory[playerid][i][pInvQFloat] 	= Inventory[playerid][i2][pInvQFloat];
			Inventory[playerid][i][pInvEx] 		= Inventory[playerid][i2][pInvEx];
			Inventory[playerid][i][pInvS] 		= Inventory[playerid][i2][pInvS];
			format(Inventory[playerid][i][pInvName], 16, "%s", Inventory[playerid][i2][pInvName]);

			Inventory[playerid][i2][pInvItem] 	= 0;
			Inventory[playerid][i2][pInvQ]		= 0;
			Inventory[playerid][i2][pInvQFloat] = 0;
			Inventory[playerid][i2][pInvEx] 	= 0;
			Inventory[playerid][i2][pInvS] 		= 0;
			format(Inventory[playerid][i2][pInvName], 16, "%s", Inventory[playerid][i][pInvName]);

			if (lastPrim == i2)
			{
				PlayerInfo[playerid][pLastPrim] = i;
				SQL_SetInteger("users", "LastPrim", i, PlayerInfo[playerid][pID]);
			}
			else if (lastSec == i2)
			{
				PlayerInfo[playerid][pLastSec] = i;
				SQL_SetInteger("users", "LastSec", i, PlayerInfo[playerid][pID]);
			}
			else if (lastMelee == i2)
			{
				PlayerInfo[playerid][pLastMelee] = i;
				SQL_SetInteger("users", "LastMelee", i, PlayerInfo[playerid][pID]);
			}
		}
	}
	SetPVarInt(playerid, #pDelay, 0);
	return 1;
}

Dialog:Inventory(playerid, response, listitem, inputtext[])
{
	if (!response)										return 1;
	if (GetPVarInt(playerid, "pDelay"))					return pc_cmd_envanter(playerid, "");

	new title[56], mes[256];

	if (listitem == MAX_INV_SLOTS) // STORE WEAPON SECTION !
	{
		if (GetPVarInt(playerid, #attach_item)) 	return pc_cmd_objesil(playerid, "");
	}
	else if (listitem == MAX_INV_SLOTS + 1) // DROP WEAPON SECTION !
	{
		if (GetPVarInt(playerid, #attach_item))	return pc_cmd_yerebirak(playerid, "");
	}

	if (Inventory[playerid][listitem][pInvItem] == 0)	return pc_cmd_envanter(playerid, "");

	if (inventory_items[Inventory[playerid][listitem][pInvItem]][itemSplit])
		if ((inventory_items[Inventory[playerid][listitem][pInvItem]][itemType] == ITEM_TYPE_DRUGS || inventory_items[Inventory[playerid][listitem][pInvItem]][itemType] == ITEM_TYPE_SEEDS) && (IsPlayerHasItem(playerid, 78) || IsPlayerHasItem(playerid, 79)))
			mes = "Eþyayý kullan\nEþyayý ver\nEþyayý at\nEþyayý sil\nBöl\nBirleþtir\nPakete koy /paket";
		else
			mes = "Eþyayý kullan\nEþyayý ver\nEþyayý at\nEþyayý sil\nBöl\nBirleþtir";
	else
	{
		if (inventory_items[Inventory[playerid][listitem][pInvItem]][itemType] == ITEM_TYPE_INSIDEABLE_OBJECT)
		{
			if (Inventory[playerid][listitem][pInvEx])
				format(mes, sizeof(mes), "Slot %s(%f)\nEþyayý ver\nEþyayý býrak\nEþyayý sil", inventory_items[Inventory[playerid][listitem][pInvEx]][itemName], Inventory[playerid][listitem][pInvQFloat]);
			else mes = "Eþyayý yerleþtir\nEþyayý ver\nEþyayý býrak\nEþyayý sil";

			if (!GetPVarInt(playerid, #attach_item)) format(mes, sizeof(mes), "%s\nYerden al", mes);
		}
		else
			mes = "Eþyayý kullan\nEþyayý ver\nEþyayý at\nEþyayý sil";
	}

    new houseid = -1;
	if ((houseid = GetNearInsideHouse(playerid)) != -1 && houseid >= 0 && houseid < MAX_HOUSES && PlayerToPoint(7, playerid,HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]))
	{
	    SetPVarInt(playerid, #inventory_house, houseid+1);
 		format(mes, sizeof(mes), "%s\n{ffff00}Eve býrak (ID: %i)", mes, houseid);
	}

	new vehicle = GetNearVehicle(playerid, 4.0);
	if (vehicle != 0 && (!IsADontTrunk(vehicle) || !IsAPlane(vehicle) || !IsABiker(vehicle) || !IsAHelicopter(vehicle) || !IsABoat(vehicle) || !IsABicycle(vehicle)))
	{
		if ((VehicleInfo[vehicle][carTrunkLock] && !IsPlayerInAnyVehicle(playerid)) || (IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] == PlayerInfo[playerid][pFaction]))
		{
			SetPVarInt(playerid, #inventory_vehicle, vehicle);
			format(mes, sizeof(mes), "%s\n{ffff00}%s adlý araca yerleþtir (ID: %i)", mes, VehicleNames[GetVehicleModel(vehicle)-400], vehicle);
		}
	}

	if (GetPVarInt(playerid, #inventory_vehicle) == 0 && inventory_items[Inventory[playerid][listitem][pInvItem]][itemSize] == ITEM_SIZE_SMALL)
	{
		vehicle = GetPlayerVehicleID(playerid);
		if (IsPlayerInAnyVehicle(playerid) && vehicle != 0 && VehicleInfo[vehicle][carOwnerID] == PlayerInfo[playerid][pID])
		{
			format(mes, sizeof(mes), "%s\n{ffff00}%s model aracýn torpido gözüne yerleþtir (ID: %i)", mes, VehicleNames[GetVehicleModel(vehicle)-400], vehicle);
		}
	}

	SetPVarInt(playerid, #inventory_choose, listitem);
	format(title, sizeof(title), "{FFFFFF}Envanter > %s", inventory_items[Inventory[playerid][listitem][pInvItem]][itemName]);
    Dialog_Show(playerid, InventoryChoose, DIALOG_STYLE_LIST, title, mes, "Seç", "Geri Dön");
	return 1;
}

Dialog:InventoryChoose(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_envanter(playerid, "");

	new slot = GetPVarInt(playerid, #inventory_choose);

	if (slot < 0 || slot > MAX_INV_SLOTS-1 || Inventory[playerid][slot][pInvItem] == 0)	return pc_cmd_envanter(playerid, "");

	if (listitem > 3 || (listitem == 0 && inventory_items[Inventory[playerid][slot][pInvItem]][itemType] == ITEM_TYPE_INSIDEABLE_OBJECT))
	{
		new listadd;
		if (inventory_items[Inventory[playerid][slot][pInvItem]][itemSplit])
			if ((inventory_items[Inventory[playerid][slot][pInvItem]][itemType] == ITEM_TYPE_DRUGS || inventory_items[Inventory[playerid][slot][pInvItem]][itemType] == ITEM_TYPE_SEEDS) && (IsPlayerHasItem(playerid, 78) || IsPlayerHasItem(playerid, 79)))
				listadd = 3;
			else
				listadd = 2;
		else
		{
			if (inventory_items[Inventory[playerid][slot][pInvItem]][itemType] == ITEM_TYPE_INSIDEABLE_OBJECT)
			{
				if (listitem == 4)
				{
					if (!GetPVarInt(playerid, #attach_item))	listadd = 6; //Âçÿòü â ðóêè
				}
				else
				{
					if (Inventory[playerid][slot][pInvEx]) 	listadd = 4; // Äîñòàòü
					else 									listadd = 5; // Ïîëîæèòü
				}
			}
			else listadd = 0;
		}

		switch(listitem)
		{
			case 0:
			{
				switch(listadd)
				{
					case 4: listitem = 8; // Äîñòàòü
					case 5: listitem = 9; // Ïîëîæèòü
				}
			}
			case 4:
			{
				switch(listadd)
				{
					case 0: listitem = 4; // ÁÀÃÀÆÍÈÊ
					case 2: listitem = 5; // ÐÀÇÄÅËÈÒÜ
					case 3: listitem = 5; // ÐÀÇÄÅËÈÒÜ
					case 6: listitem = 10; // ÂÇßÒÜ Â ÐÓÊÈ
				}
			}
			case 5:
			{
				switch(listadd)
				{
					case 2: listitem = 6; // ÎÁÚÅÄÈÍÈÒÜ
					case 3: listitem = 6; // ÎÁÚÅÄÈÍÈÒÜ
				}
			}
			case 6:
			{
				switch(listadd)
				{
					case 2: listitem = 4; //ÁÀÃÀÆÍÈÊ
					case 3: listitem = 7; // ÏÎËÎÆÈÒÜ Â
				}
			}
			case 7:
			{
				listitem = 4;// ÁÀÃÀÆÍÈÊ
			}
		}
	}

	switch(listitem)
	{
	    case 0: CallLocalFunction("OnPlayerUseItem", "ii", playerid, slot);
		case 1: Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "{FFFFFF}Eþyayý ver", "{ffffff}Eþyayý vermek istediðiniz kiþinin ID'sini giriniz.", ">>>", "Geri Dön");
		case 2:
		{
			if (inventory_items[Inventory[playerid][slot][pInvItem]][itemType] == ITEM_TYPE_AMMO || inventory_items[Inventory[playerid][slot][pInvItem]][itemType] == ITEM_TYPE_WEAPON)
			{
				if (IsAdminDuty(playerid) || IsTesterDuty(playerid))	return SendErrorMessage(playerid, "Ýlk önce /aduty'den çýkýþ yapýn.");
				if (PlayerInfo[playerid][pOnDuty])								return SendErrorMessage(playerid, "Bu fonksiyon iþbaþýnda kullanýlamaz.");
			}

			if (Inventory[playerid][slot][pInvQ])
			{
				if (inventory_items[Inventory[playerid][slot][pInvItem]][itemType] == ITEM_TYPE_WEAPON)
				{
					if (ItemDrop_Drop(playerid, Inventory[playerid][slot][pInvItem], Inventory[playerid][slot][pInvQ], Inventory[playerid][slot][pInvQFloat], Inventory[playerid][slot][pInvEx], Inventory[playerid][slot][pInvS]) == -1)	return SendErrorMessage(playerid, "The maximum number of dropped items has been reached.");
					switch(inventory_items[Inventory[playerid][slot][pInvItem]][itemType]) {
						case 22..34: SendSyntaxMessage(playerid, "Eþya býraktýnýz: %s [%s / %i mermi]. {ffc46a}/yerdenal{FFFFFF} komutunu kullanabilirsiniz.", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], inventory_items[Inventory[playerid][slot][pInvEx]][itemName], inventory_items[Inventory[playerid][slot][pInvQ]][itemName]);
						default: 	 SendSyntaxMessage(playerid, "Eþya býraktýnýz: %s. {ffc46a}/yerdenal{FFFFFF} komutunu kullanabilirsiniz.", inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);
					}
				}
				else if (inventory_items[Inventory[playerid][slot][pInvItem]][itemType] == ITEM_TYPE_DRUGS || inventory_items[Inventory[playerid][slot][pInvItem]][itemType] == ITEM_TYPE_REACT)
				{

				}
				else
				{
					if (ItemDrop_Drop(playerid, Inventory[playerid][slot][pInvItem], Inventory[playerid][slot][pInvQ], Inventory[playerid][slot][pInvQFloat], Inventory[playerid][slot][pInvEx], Inventory[playerid][slot][pInvS]) == -1)	return SendErrorMessage(playerid, "The maximum number of dropped items has been reached.");
					SendSyntaxMessage(playerid, "Eþya býraktýnýz: %s [%i adet]. {ffc46a}/yerdenal{FFFFFF} komutunu kullanabilirsiniz.", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQ]);
				}
			}
			else
			{
				if (ItemDrop_Drop(playerid, Inventory[playerid][slot][pInvItem], Inventory[playerid][slot][pInvQ], Inventory[playerid][slot][pInvQFloat], Inventory[playerid][slot][pInvEx], Inventory[playerid][slot][pInvS]) == -1)	return SendErrorMessage(playerid, "The maximum number of dropped items has been reached.");
				SendSyntaxMessage(playerid, "Eþya býraktýnýz: %s. {ffc46a}/yerdenal{FFFFFF} komutunu kullanabilirsiniz.", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQ]);
			}
			RemoveInvItem(playerid, Inventory[playerid][slot][pInvItem], 0, slot);
		}
		case 3:
		{
			new mes[128];
			format(mes, sizeof(mes), "{ffffff}Bu eþyayý silmek istediðine emin misin? - %s", inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);
   			Dialog_Show(playerid, DeleteItem, DIALOG_STYLE_MSGBOX, "{FFFFFF}Eþyayý sil", mes, "Kabul", "Ýptal");
		}
		case 4:
		{
		    new mes[128];

		    if (GetPVarInt(playerid, #inventory_house) != 0)
			{
				if (Inventory[playerid][slot][pInvQ] > 1 && inventory_items[Inventory[playerid][slot][pInvItem]][itemSplit])
				{
					format(mes, sizeof(mes), "{ffffff}Eþya: %s (Miktar: %i)\n\nEvde saklamak istediðiniz miktarý girin: ",
					inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQ]);
				}
				else
				{
					new
						houseid = GetNearInsideHouse(playerid),
						i = GetNextHouseTrunkSlot(houseid),
						item = Inventory[playerid][slot][pInvItem]
					;

					if (houseid >= 0 && houseid < MAX_HOUSES && PlayerToPoint(1, playerid,HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]))
					{

						if (i == -1)		return SendErrorMessage(playerid, "Evde boþ oda kalmamýþ.");
						if (item == 0) 		return pc_cmd_envanter(playerid, "");

						SM2(playerid, "%s adlý eþyayý eve býraktýn.", inventory_items[item][itemName]);

						HouseInventory[houseid][i][pInvItem] 	= Inventory[playerid][slot][pInvItem];
						HouseInventory[houseid][i][pInvQ]		= Inventory[playerid][slot][pInvQ];
						HouseInventory[houseid][i][pInvEx]		= Inventory[playerid][slot][pInvEx];
						HouseInventory[houseid][i][pInvS]		= Inventory[playerid][slot][pInvS];
						HouseInventory[houseid][i][pInvQFloat]	= Inventory[playerid][slot][pInvQFloat];
						format(HouseInventory[houseid][i][pInvName],16, "%s", Inventory[playerid][slot][pInvName]);

						RemoveInvItem(playerid, Inventory[playerid][slot][pInvItem], 0, slot);

						format(mes, sizeof(mes), "%s adlý eþyayý eve býrakýr.", inventory_items[item][itemName]);
						SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);


						return pc_cmd_envanter(playerid, "");
					}
				}
			}
			else if (GetPVarInt(playerid, #inventory_vehicle) != 0)
			{
				if (Inventory[playerid][slot][pInvQ] > 1 && inventory_items[Inventory[playerid][slot][pInvItem]][itemSplit])
				{
   			    	format(mes, sizeof(mes), "{ffffff}Eþya: %s (Miktar: %i)\n\nBagaja býrakmak istediðiniz miktarý girin: ",
					inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQ]);
				}
				else
				{
					new vehicle = GetPVarInt(playerid, #inventory_vehicle);

					new item = Inventory[playerid][slot][pInvItem];
					if (item == 0) return pc_cmd_envanter(playerid, "");

					if (vehicle > 0 && GetNearVehicle(playerid, 5.0, vehicle) != 0)
					{
						if (IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))		return SendErrorMessage(playerid, "Bu aracýn bagajý bulunmuyor.");
						if (VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])										return SendErrorMessage(playerid, "Kendine ait olmayan birlik aracýnýn bagajýna bakamazsýnýz.");
						if (IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction]) 	return SendErrorMessage(playerid, "Bagaja yakýn olmalýsýn");
						if (!IsPlayerInAnyVehicle(playerid) && !VehicleInfo[vehicle][carTrunkLock]) 																	return SendErrorMessage(playerid, "Bu aracýn bagajý kapalý.");

						new i = GetNextVehicleTrunkSlot(vehicle);
						if (i == -1)	return SendErrorMessage(playerid, "Araçta boþ yer yok. ");

						TrunkInventory[vehicle][i][pInvItem] 	= Inventory[playerid][slot][pInvItem];
						TrunkInventory[vehicle][i][pInvQ] 		= Inventory[playerid][slot][pInvQ];
						TrunkInventory[vehicle][i][pInvEx]		= Inventory[playerid][slot][pInvEx];
						TrunkInventory[vehicle][i][pInvS] 		= Inventory[playerid][slot][pInvS];
						TrunkInventory[vehicle][i][pInvQFloat]	= Inventory[playerid][slot][pInvQFloat];
						format(TrunkInventory[vehicle][i][pInvName],16, "%s", Inventory[playerid][slot][pInvName]);

						RemoveInvItem(playerid, Inventory[playerid][slot][pInvItem], 0, slot);

						SM2(playerid, "%s adlý eþyayý %s model araca yerleþtirdin.", inventory_items[item][itemName], VehicleNames[GetVehicleModel(vehicle)-400]);

						format(mes, sizeof(mes), "%s adlý eþyayý %s model aracýn %s yerleþtirir.", inventory_items[item][itemName], VehicleNames[GetVehicleModel(vehicle)-400], (VehicleInfo[vehicle][carFaction])?("bagaja"):("bagaja"));
						SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);
						return pc_cmd_envanter(playerid, "");
					}
				}
			}
			else if (GetPVarInt(playerid, #inventory_vehicle) == 0 && IsPlayerInAnyVehicle(playerid))
			{
				new vehicle = GetPlayerVehicleID(playerid);
				if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID] && vehicle == 0) return pc_cmd_envanter(playerid, "");

				if (Inventory[playerid][slot][pInvQ] > 1 && inventory_items[Inventory[playerid][slot][pInvItem]][itemSplit])
				{
   			    	format(mes, sizeof(mes), "{ffffff}Eþya: %s (Miktar: %i)\n\nBagaja koymak istediðiniz eþya miktarýný girin:",
					inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQ]);
				}
				else
				{
					new
						i = GetNextVehicleGBSlot(vehicle),
						item = Inventory[playerid][slot][pInvItem]
					;

					if (vehicle == 0) 	return pc_cmd_envanter(playerid, "");
					if (item == 0) 		return pc_cmd_envanter(playerid, "");
					if (i == -1)		return SendErrorMessage(playerid, "Araçta boþ yer yok. ");

					if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
						return SendErrorMessage(playerid, "Bu aracýn torpido gözünü kullanamazsýn.");

					CarInventory[vehicle][i][pInvItem]		= Inventory[playerid][slot][pInvItem];
					CarInventory[vehicle][i][pInvQ]			= Inventory[playerid][slot][pInvQ];
					CarInventory[vehicle][i][pInvEx] 		= Inventory[playerid][slot][pInvEx];
					CarInventory[vehicle][i][pInvS]			= Inventory[playerid][slot][pInvS];
					CarInventory[vehicle][i][pInvQFloat]	= Inventory[playerid][slot][pInvQFloat];
					format(CarInventory[vehicle][i][pInvName],16, "%s", Inventory[playerid][slot][pInvName]);

					RemoveInvItem(playerid, Inventory[playerid][slot][pInvItem], 0, slot);

					SM2(playerid, "%s adlý eþyayý %s model aracýn torpidosuna yerleþtirdin.", inventory_items[item][itemName], VehicleNames[GetVehicleModel(vehicle)-400]);

					format(mes, sizeof(mes), "%s adlý eþyayý %s model aracýn torpidosuna yerleþtirir.", inventory_items[item][itemName], VehicleNames[GetVehicleModel(vehicle)-400]);
					SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);


					return pc_cmd_envanter(playerid, "");
				}
			}
			else return SendErrorMessage(playerid, "Bir þeyler ters gitti, geliþtiriciye ulaþýn.!");

			Dialog_Show(playerid, PutItemInProperty, DIALOG_STYLE_INPUT, "{FFFFFF}Eþyayý yerleþtir", mes, "Yerleþtir", "Ýptal");
			return 1;
		}
		case 5: // Ðàçäåëèòü
		{
			if (!inventory_items[Inventory[playerid][slot][pInvItem]][itemFloat]) {
				if (Inventory[playerid][slot][pInvQ] < 2)
					return SendErrorMessage(playerid, "Ayýrmak için daha yüksek miktar girmelisin.");

				new divide_string[128];
				format(divide_string, sizeof(divide_string), "{FFFFFF}Eþyadan ayýrmak istediðiniz miktarý girin: %s {ffc46a}(%i){FFFFFF}?", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQ]);
				Dialog_Show(playerid, DivideInvInt, DIALOG_STYLE_INPUT, "Eþya bölme", divide_string, ">>>","Return");
			} else {
				if (Inventory[playerid][slot][pInvQFloat] < 0.2)
					return SendErrorMessage(playerid, "Bölmek için geçerli sayý giriniz: (0,2)");

				new divide_string[128];
				format(divide_string, sizeof(divide_string), "{FFFFFF}Eþyadan kaç gram ayýrmak istediðinizi seçiniz: %s {ffc46a}(%.1fg){FFFFFF}?", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQFloat]);
				Dialog_Show(playerid, DivideInvFloat, DIALOG_STYLE_INPUT, "Eþya bölme", divide_string, ">>>","Return");
			}

			return 1;
		}
		case 6: // Îáúåäèíèòü
		{
			FixInv(playerid);

			SendHelpMessage(playerid, "%s (%i) eþyasýný birleþtirmek istediðiniz eþyayý seçin.", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQ]);

			new dlgstr[20 * 128] = "#\tEþya\tAdet";

			new ccount;
			for(new i = 0; i < MAX_INV_SLOTS; i++)
			{
				switch(Inventory[playerid][i][pInvItem])
				{
					case 0:	format(dlgstr, sizeof(dlgstr), "%s\n{ffffff}%i\t{C3C3C3}Boþ Slot", dlgstr, i+1);
					case 22 .. 34:
					{
						if (Inventory[playerid][i][pInvQ] == 0) 	format(dlgstr, sizeof(dlgstr), "%s\n{ffffff}%i.\t%s {C3C3C3}[boþ]\t1", dlgstr, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
						else 									format(dlgstr, sizeof(dlgstr), "%s\n{ffffff}%i.\t%s {C3C3C3}[%s / %i mermi]{FFFFFF}\t1", dlgstr, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName], inventory_items[Inventory[playerid][i][pInvEx]][itemName], Inventory[playerid][i][pInvQ]);
					}
					case INV_GANJA, INV_MED_GANJA, 103 .. 118:
					{
						format(dlgstr, sizeof(dlgstr), "%s\n{ffffff}%i.\t%s{FFFFFF}\t%.1fg", dlgstr, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName], Inventory[playerid][i][pInvQFloat]);
					}
					case INV_DRUG:
					{
						format(dlgstr, sizeof(dlgstr), "%s\n{ffffff}%i.\t%s {C3C3C3}[OAS: %i%%]{FFFFFF}\t%.1fg", dlgstr, i+1, Inventory[playerid][i][pInvName], Inventory[playerid][i][pInvEx], Inventory[playerid][i][pInvQFloat]);
					}
					default: format(dlgstr, sizeof(dlgstr), "%s\n{ffffff}%i.\t%s\t%i", dlgstr, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName], Inventory[playerid][i][pInvQ]);
				}
				ccount++;
			}
			if (!ccount) return SendErrorMessage(playerid, "Objeler eþleþmiyor!");

			Dialog_Show(playerid, CombInv, DIALOG_STYLE_TABLIST_HEADERS, "Envanter", dlgstr, "Seç", "Ýptal");
			return 1;
		}
		case 7: //Ïîëîæèòü â
		{
			new dlgstr[32*MAX_INV_SLOTS];

			format(dlgstr, sizeof(dlgstr), "Eþyayý nereye yerleþtireceðinizi seçin '%s':{FFFFFF}\n", inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);

			new ccount;
			for(new i = 0; i < MAX_INV_SLOTS; i++)
			{
				if (inventory_items[Inventory[playerid][i][pInvItem]][itemType] == ITEM_TYPE_INSIDEABLE_OBJECT)
				{
					if (!Inventory[playerid][i][pInvEx])
					{
						ccount++;
						format(dlgstr, sizeof(dlgstr), "%s%i. %s\n", dlgstr, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
					}
				}
			}
			if (!ccount) return SendErrorMessage(playerid, "Objeler eþleþmiyor!");

			Dialog_Show(playerid, InventoryPut, DIALOG_STYLE_TABLIST_HEADERS, "Envanter", dlgstr, "Seç", "Ýptal");
			return 1;
		}
		case 8: // äîñòàòü
		{
			if (!Inventory[playerid][slot][pInvEx])	return 1;

			if (!CheckInv(playerid))
			{
				pc_cmd_envanter(playerid, "");
				return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");
			}

			if (GiveInvItem(playerid, Inventory[playerid][slot][pInvEx], Inventory[playerid][slot][pInvQ]) == -1) return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");
			SendSyntaxMessage(playerid, "Eþyayý aldýnýz: %s (%i) - %s.", inventory_items[Inventory[playerid][slot][pInvEx]][itemName], Inventory[playerid][slot][pInvQ], inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);

			Inventory[playerid][slot][pInvEx] = 0;
			Inventory[playerid][slot][pInvQ] = 1;

			return 1;
		}
		case 9: // ïîëîæèòü
		{
			new dlgstr[32*MAX_INV_SLOTS];

			format(dlgstr, sizeof(dlgstr), "Silmek istediðiniz eþyayý seçin '%s':{FFFFFF}\n", inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);

			new ccount;
			for(new i = 0; i < MAX_INV_SLOTS; i++)
			{
				if (inventory_items[Inventory[playerid][i][pInvItem]][itemType] == ITEM_TYPE_DRUGS || inventory_items[Inventory[playerid][i][pInvItem]][itemType] == ITEM_TYPE_SEEDS)
				{
					ccount++;
					if (inventory_items[Inventory[playerid][i][pInvItem]][itemType] == ITEM_TYPE_DRUGS){
						format(dlgstr, sizeof(dlgstr), "%s%i. %s\n", dlgstr, i+1, Inventory[playerid][i][pInvName]);
					} else {
						format(dlgstr, sizeof(dlgstr), "%s%i. %s\n", dlgstr, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
					}

				}
			}

			if (!ccount) return SendErrorMessage(playerid, "Objeler eþleþmiyor!");

			Dialog_Show(playerid, InventoryPut2, DIALOG_STYLE_TABLIST_HEADERS, "Envanter", dlgstr, "Seç", "Ýptal");
			return 1;
		}
		case 10:
		{
			if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
				return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

			if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))	return SendWarningMessage(playerid, "Elleriniz dolu.");
			if (GetPlayerVehicleID(playerid) != 0)						return SendErrorMessage(playerid, "Herhangi bir araçta deðilsin.");

			if (Inventory[playerid][slot][pInvItem] == 78)
			{
    			SetPlayerAttachedObject(playerid, ATTACH_HANDS, 19571, 6, -0.157999, -0.002000, -0.169000, -21.999990, 87.000022, 0.000000, 1.186000, 1.000000, 1.170000);
  				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			}
			else if (Inventory[playerid][slot][pInvItem] == 79)
			{
				SetPlayerAttachedObject(playerid, ATTACH_HANDS, inventory_items[Inventory[playerid][slot][pInvItem]][itemModel], 6, 0.204, 0.012, 0.026, 0.0, -101.3, -10.5, 0.838, 0.5, 0.597);
			}

			SetPVarInt(playerid, #attach_item, 1);

			pTemp[playerid][tempItem]	= Inventory[playerid][slot][pInvItem];
			pTemp[playerid][tempEx] 	= Inventory[playerid][slot][pInvEx];
			pTemp[playerid][tempQ] 		= Inventory[playerid][slot][pInvQ];

			SendSyntaxMessage(playerid, "%s adlý eþyayý aldýn.", inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);

			RemoveInvItem(playerid, Inventory[playerid][slot][pInvItem], 0, slot);
			return 1;
		}
	}
	return 1;
}

Dialog:InventoryPut2(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_envanter(playerid, "");

	new count,
		slot = GetPVarInt(playerid, #inventory_choose);

	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if (inventory_items[Inventory[playerid][i][pInvItem]][itemType] == ITEM_TYPE_DRUGS || inventory_items[Inventory[playerid][i][pInvItem]][itemType] == ITEM_TYPE_SEEDS)
		{
			if (listitem == count)
			{
				count = i;
				break;
			}
			else count++;
		}
	}

	Inventory[playerid][slot][pInvEx] = Inventory[playerid][count][pInvItem];
	Inventory[playerid][slot][pInvQ] = Inventory[playerid][count][pInvQ];

	SendSyntaxMessage(playerid, "Baþarýyla eþyayý sildin: %s (%i) - %s.", inventory_items[Inventory[playerid][slot][pInvEx]][itemName], Inventory[playerid][slot][pInvQ], inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);

	RemoveInvItem(playerid, Inventory[playerid][count][pInvItem], 0, count);
	return 1;
}


Dialog:InventoryPut(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_envanter(playerid, "");

	new count,
		slot = GetPVarInt(playerid, #inventory_choose);

	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if (inventory_items[Inventory[playerid][i][pInvItem]][itemType] == ITEM_TYPE_INSIDEABLE_OBJECT)
		{
			if (!Inventory[playerid][i][pInvEx])
			{
				if (listitem == count)
				{
					count = i;
					break;
				}
				else count++;
			}
		}
	}

	Inventory[playerid][count][pInvEx] = Inventory[playerid][slot][pInvItem];
	Inventory[playerid][count][pInvQ] = Inventory[playerid][slot][pInvQ];

	SendSyntaxMessage(playerid, "Baþarýyla eþyayý sildin: %s (%i) - %s.", inventory_items[Inventory[playerid][count][pInvEx]][itemName], Inventory[playerid][count][pInvQ], inventory_items[Inventory[playerid][count][pInvItem]][itemName]);

	RemoveInvItem(playerid, Inventory[playerid][slot][pInvItem], 0, slot);
	return 1;
}

Dialog:CombInv(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_envanter(playerid, "");

	new slot1 = GetPVarInt(playerid, #inventory_choose),
		slot2 = listitem;

	if (Inventory[playerid][slot1][pInvItem] != Inventory[playerid][slot2][pInvItem])
	{
		SendErrorMessage(playerid, "Sadece ayný eþyalarý birleþtirebilirsin.");
		return pc_cmd_envanter(playerid, "");
	}

	if (slot1 == slot2)
	{
		SendErrorMessage(playerid, "Bir öðeyi kendisiyle birleþtiremezsiniz. ");
		return pc_cmd_envanter(playerid, "");
	}

	switch(Inventory[playerid][slot1][pInvItem])
	{
		case INV_GANJA, INV_MED_GANJA, 103 .. 118:
		{
			if (Inventory[playerid][slot1][pInvQFloat] + Inventory[playerid][slot2][pInvQFloat] > 999.0) {
				SendErrorMessage(playerid, "Birleþtirilen eþyalar için maksimum belirlenen sýnýr - 999g. ");
				return pc_cmd_envanter(playerid, "");
			}

			Inventory[playerid][slot2][pInvQFloat] += Inventory[playerid][slot1][pInvQFloat];
			SendSyntaxMessage(playerid, "Eþyayý baþarýyla birleþtirdin: %s (%.1fg).", inventory_items[Inventory[playerid][slot2][pInvItem]][itemName], Inventory[playerid][slot2][pInvQFloat]);

			RemoveFloatInvItem(playerid, Inventory[playerid][slot1][pInvItem], 0.0, slot1);
		}
		case INV_DRUG:
		{
			if (!CompareStrings(Inventory[playerid][slot2][pInvName], Inventory[playerid][slot2][pInvName])) {
				SendErrorMessage(playerid, "Ýki ayrý uyuþturucuyu birleþtiremezsin. (Farklý isimler!) ");
				return pc_cmd_envanter(playerid, "");
			}
			if (Inventory[playerid][slot1][pInvEx] != Inventory[playerid][slot2][pInvEx]) {
				SendErrorMessage(playerid, "Ýki ayrý uyuþturucuyu birleþtiremezsin. (Saflýk dereceleri farklý!) ");
				return pc_cmd_envanter(playerid, "");
			}
			if (Inventory[playerid][slot1][pInvQFloat] + Inventory[playerid][slot2][pInvQFloat] > 999.0) {
				SendErrorMessage(playerid, "Birleþtirilen iki eþyanýn aðýrlýðý þunu geçemez: 999g. ");
				return pc_cmd_envanter(playerid, "");
			}

			Inventory[playerid][slot2][pInvQFloat] += Inventory[playerid][slot1][pInvQFloat];
			SendSyntaxMessage(playerid, "Eþyayý baþarýyla birleþitrdin: %s {C3C3C3}[OAS: %i%%]{FFFFFF} (%.1fg).", Inventory[playerid][slot2][pInvName], Inventory[playerid][slot2][pInvEx], Inventory[playerid][slot2][pInvQFloat]);

			RemoveFloatInvItem(playerid, Inventory[playerid][slot1][pInvItem], 0.0, slot1);
		}
		default: {
			if ((Inventory[playerid][slot1][pInvQ] + Inventory[playerid][slot2][pInvQ] > 100) && (inventory_items[Inventory[playerid][slot1][pInvQ]][itemType] == ITEM_TYPE_SEEDS || inventory_items[Inventory[playerid][slot1][pInvQ]][itemType] == ITEM_TYPE_DRUGS))
			{
				SendErrorMessage(playerid, "Birleþtirilen eþyalarýn toplam miktarý 100 sayýsýný geçemez. ");
				return pc_cmd_envanter(playerid, "");
			}
			else if (Inventory[playerid][slot1][pInvQ] + Inventory[playerid][slot2][pInvQ] > 10)
			{
				SendErrorMessage(playerid, "Birleþtirilen eþyalarýn toplam miktarý 10 sayýsýný geçemez. ");
				return pc_cmd_envanter(playerid, "");
			}

			Inventory[playerid][slot2][pInvQ] += Inventory[playerid][slot1][pInvQ];
			SendSyntaxMessage(playerid, "Eþyayý baþarýyla birleþtirdin: %s (%i).", inventory_items[Inventory[playerid][slot2][pInvItem]][itemName], Inventory[playerid][slot2][pInvQ]);

			RemoveInvItem(playerid, Inventory[playerid][slot1][pInvItem], 0, slot1);
		}
	}

	return 1;
}

Dialog:DivideInvInt(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_envanter(playerid, "");

	new slot1 = GetPVarInt(playerid, #inventory_choose);

	if (CheckInv(playerid) == 0)
		return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");
	if (strval(inputtext) <= 0 || strval(inputtext) >= Inventory[playerid][slot1][pInvQ])
		return SendErrorMessage(playerid, "Geçersiz deðer.");

	SendSyntaxMessage(playerid, "Baþarýlý bir þekilde eþyayý böldün: {ffc46a}%s{ffffff} - %.1fg ve %.1fg.", inventory_items[Inventory[playerid][slot1][pInvItem]][itemName], strval(inputtext), Inventory[playerid][slot1][pInvQ]-strval(inputtext));

	Inventory[playerid][slot1][pInvQ] -= strval(inputtext);

	new str[1] = EOS;
	GiveInvItem(playerid, Inventory[playerid][slot1][pInvItem], strval(inputtext), 0, 0, str, 1);
	return 1;
}

Dialog:DivideInvFloat(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_envanter(playerid, "");

	new slot1 = GetPVarInt(playerid, #inventory_choose);

	if (CheckInv(playerid) == 0)	return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");

	if (floatstr(inputtext) < 0.1 || floatstr(inputtext) >= Inventory[playerid][slot1][pInvQFloat])
		return SendErrorMessage(playerid, "Geçersiz deðer.");

	SendSyntaxMessage(playerid, "Baþarýlý bir þekilde eþyayý böldün: {ffc46a}%s{ffffff} - %.1fg ve %.1fg.", inventory_items[Inventory[playerid][slot1][pInvItem]][itemName], floatstr(inputtext), Inventory[playerid][slot1][pInvQFloat]-floatstr(inputtext));

	Inventory[playerid][slot1][pInvQFloat] -= floatstr(inputtext);

	new str[1] = EOS;
	GiveFloatInvItem(playerid, Inventory[playerid][slot1][pInvItem], floatstr(inputtext), 0, 0, str, 1);
	return 1;
}

Dialog:PutItemInProperty(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_envanter(playerid, "");

    new
		slot = GetPVarInt(playerid, #inventory_choose),
		houseid = GetPVarInt(playerid, #inventory_house)-1,
		vehicle = GetPVarInt(playerid, #inventory_vehicle),
		item = Inventory[playerid][slot][pInvItem]
	;

	if (slot < 0 || slot > MAX_INV_SLOTS-1 || item == 0)
		return pc_cmd_envanter(playerid, "");
    if (strval(inputtext) < 1 || Inventory[playerid][slot][pInvQ] < strval(inputtext))
		return SendErrorMessage(playerid, "Miktar yeterli deðil. ");

	if (GetPVarInt(playerid, #inventory_vehicle) != 0)
	{
		if (vehicle > 0 && GetNearVehicle(playerid, 5.0, vehicle) != 0)
		{
			if (IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))		return SendErrorMessage(playerid, "Bu aracýn bagajý bulunmuyor.");
			if (VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])										return SendErrorMessage(playerid, "Bu aracýn bagajýný kullanamazsýn. ");
			if (IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction]) 	return SendErrorMessage(playerid, "Bagajýn yanýnda durmalýsýn. ");
			if (!IsPlayerInAnyVehicle(playerid) && !VehicleInfo[vehicle][carTrunkLock]) 																	return SendErrorMessage(playerid, "Bu aracýn bagajý kapalý. ");

			new i = GetNextVehicleTrunkSlot(vehicle);
			if (i == -1)	return SendErrorMessage(playerid, "Araçta yeteri kadar yer kalmamýþ.");

			TrunkInventory[vehicle][i][pInvItem] 	= Inventory[playerid][slot][pInvItem];
			TrunkInventory[vehicle][i][pInvQ] 		= Inventory[playerid][slot][pInvQ];
			TrunkInventory[vehicle][i][pInvEx] 		= Inventory[playerid][slot][pInvEx];
			TrunkInventory[vehicle][i][pInvS] 		= Inventory[playerid][slot][pInvS];
			TrunkInventory[vehicle][i][pInvQFloat]	= Inventory[playerid][slot][pInvQFloat];
			format(TrunkInventory[vehicle][i][pInvName],16, "%s", Inventory[playerid][slot][pInvName]);

			Inventory[playerid][slot][pInvQ] -= strval(inputtext);

			SM2(playerid, "%s adlý eþyayý %s model aracýn bagajýna koydun.", inventory_items[item][itemName], VehicleNames[GetVehicleModel(vehicle)-400]);

			new mes[128];
			format(mes, sizeof(mes), "%s (%i) eþyasýný %s model aracýn %s yerleþtirir.", inventory_items[item][itemName], strval(inputtext), VehicleNames[GetVehicleModel(vehicle)-400], (VehicleInfo[vehicle][carFaction])?("bagajýna"):("bagajýna"));
			SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);


			return pc_cmd_envanter(playerid, "");
		}
	}

    else if (GetPVarInt(playerid, #inventory_vehicle) == 0 && IsPlayerInAnyVehicle(playerid))
	{
	    vehicle = GetPlayerVehicleID(playerid);
		if (VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID] && vehicle == 0) return pc_cmd_envanter(playerid, "");

		new i = GetNextVehicleGBSlot(vehicle);
		if (i == -1)	return SendErrorMessage(playerid, "Araçta boþ yer yok.");

		CarInventory[vehicle][i][pInvItem]		= Inventory[playerid][slot][pInvItem];
		CarInventory[vehicle][i][pInvQ]			= Inventory[playerid][slot][pInvQ];
		CarInventory[vehicle][i][pInvEx] 		= Inventory[playerid][slot][pInvEx];
		CarInventory[vehicle][i][pInvS]			= Inventory[playerid][slot][pInvS];
		CarInventory[vehicle][i][pInvQFloat]	= Inventory[playerid][slot][pInvQFloat];
		format(CarInventory[vehicle][i][pInvName],16, "%s", Inventory[playerid][slot][pInvName]);

		Inventory[playerid][slot][pInvQ] -= strval(inputtext);

		SM2(playerid, "%s (%i) adlý eþyayý %s model aracýn torpidosuna yerleþtirdin.", inventory_items[item][itemName], strval(inputtext), VehicleNames[GetVehicleModel(vehicle)-400]);

		new mes[128];
		format(mes, sizeof(mes), "%s adlý eþyayý %s model aracýn torpidosuna yerleþtirir.", inventory_items[item][itemName], VehicleNames[GetVehicleModel(vehicle)-400]);
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);


		return pc_cmd_envanter(playerid, "");
	}

	else if (GetPVarInt(playerid, #inventory_house) != 0)
	{
		new i = GetNextHouseTrunkSlot(houseid);

		if ((houseid = GetNearInsideHouse(playerid)) != -1 && houseid >= 0 && houseid < MAX_HOUSES && PlayerToPoint(1, playerid,HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]))
		{

			if (i == -1)	return SendErrorMessage(playerid,"Boþ yer bulunamadý.");
			SM2(playerid, "%s adlý eþyayý eve býrakýr.", inventory_items[item][itemName]);

			HouseInventory[houseid][i][pInvItem] 	= Inventory[playerid][slot][pInvItem];
			HouseInventory[houseid][i][pInvQ]		= Inventory[playerid][slot][pInvQ];
			HouseInventory[houseid][i][pInvEx]		= Inventory[playerid][slot][pInvEx];
			HouseInventory[houseid][i][pInvS]		= Inventory[playerid][slot][pInvS];
			HouseInventory[houseid][i][pInvQFloat]	= Inventory[playerid][slot][pInvQFloat];
			format(HouseInventory[houseid][i][pInvName],16, "%s", Inventory[playerid][slot][pInvName]);

			Inventory[playerid][slot][pInvQ] -= strval(inputtext);

			new mes[128];
			format(mes, sizeof(mes), "%s (%i) eþyasýný eve býrakýr.", inventory_items[item][itemName], strval(inputtext));
			SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);


			return pc_cmd_envanter(playerid, "");
		}
	}

	else
	{
		SendErrorMessage(playerid, "Oops .. Bir þeyler ters gitti, geliþtiriciye ulaþýn.");
		return pc_cmd_envanter(playerid, "");
	}

	return 1;
}

Dialog:InventoryOther(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new houseid = -1;

	if ((houseid = GetNearInsideHouse(playerid)) != -1 && houseid >= 0 && houseid < MAX_HOUSES && PlayerToPoint(1, playerid,HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]))
	{
        if (!HouseInventory[houseid][listitem][pInvItem]) return 1;

        new item = HouseInventory[houseid][listitem][pInvItem];
		if (GivePlayerInvItem(playerid, item, HouseInventory[houseid][listitem][pInvQ], HouseInventory[houseid][listitem][pInvQFloat], HouseInventory[houseid][listitem][pInvEx], HouseInventory[houseid][listitem][pInvS], HouseInventory[houseid][listitem][pInvName]) == -1)
			return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");

        SendSyntaxMessage(playerid, "%s adlý eþyayý evden aldýn.", inventory_items[item][itemName]);

		HouseInventory[houseid][listitem][pInvName] = EOS;
		HouseInventory[houseid][listitem][pInvQFloat] = 0.0;
        HouseInventory[houseid][listitem][pInvItem] =
		HouseInventory[houseid][listitem][pInvQ] =
		HouseInventory[houseid][listitem][pInvEx] =
		HouseInventory[houseid][listitem][pInvS] = 0;



		new mes[128];
		format(mes, sizeof(mes), "%s adlý eþyayý evden alýr.", inventory_items[item][itemName]);
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);
		return 1;
	}

	new vehicle = GetPlayerVehicleID(playerid);

	if (IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carOwnerID] == PlayerInfo[playerid][pID])
	{
	    if (VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])
			return SendErrorMessage(playerid, "Bu aracýn torpido gözünü kullanamazsýn.");
        if (!CarInventory[vehicle][listitem][pInvItem])
			return 1;

	    new item = CarInventory[vehicle][listitem][pInvItem];

		if (GivePlayerInvItem(playerid, item, CarInventory[vehicle][listitem][pInvQ], CarInventory[vehicle][listitem][pInvQFloat], CarInventory[vehicle][listitem][pInvEx], CarInventory[vehicle][listitem][pInvS], CarInventory[vehicle][listitem][pInvName]) == -1)
			return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");
		//if (IsValidDynamicObject(VehicleInfo[vehicle][carAttach][listitem])) DestroyDynamicObject(VehicleInfo[vehicle][carAttach][listitem]);

		CarInventory[vehicle][listitem][pInvName] = EOS;
		CarInventory[vehicle][listitem][pInvQFloat] = 0.0;
        CarInventory[vehicle][listitem][pInvItem] =
		CarInventory[vehicle][listitem][pInvS] =
		CarInventory[vehicle][listitem][pInvEx] =
		CarInventory[vehicle][listitem][pInvQ] = 0;



		new mes[128];
		format(mes, sizeof(mes), "%s adlý eþyayý %s model aracýn torpidosundan alýr.", inventory_items[item][itemName], VehicleNames[GetVehicleModel(vehicle)-400]);
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);
	    return 1;
	}

	if ((vehicle = GetNearVehicle(playerid, 5.0)) != 0)
	{
		new item = TrunkInventory[vehicle][listitem][pInvItem];

	    if (IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))									return SendErrorMessage(playerid,"Bu aracýn bagajý bulunmuyor.");
		if (VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])																	return SendErrorMessage(playerid, "Bu aracýn bagajýný kullanamazsýn.");
		if (IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction]) 								return SendErrorMessage(playerid, "Bagajýn yanýnda durmalýsýn. ");
		if (!IsPlayerInAnyVehicle(playerid) && !VehicleInfo[vehicle][carTrunkLock]) 																									return SendErrorMessage(playerid, "Bu aracýn bagajý kapalý.");
        if (!TrunkInventory[vehicle][listitem][pInvItem])																																return pc_cmd_envanter(playerid, "");
		if (GivePlayerInvItem(playerid, item, TrunkInventory[vehicle][listitem][pInvQ], TrunkInventory[vehicle][listitem][pInvQFloat], TrunkInventory[vehicle][listitem][pInvEx], TrunkInventory[vehicle][listitem][pInvS], TrunkInventory[vehicle][listitem][pInvName]) == -1)
			return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");
		if (IsValidDynamicObject(VehicleInfo[vehicle][carAttach][listitem]))
			DestroyDynamicObject(VehicleInfo[vehicle][carAttach][listitem]);

		TrunkInventory[vehicle][listitem][pInvName] = EOS;
		TrunkInventory[vehicle][listitem][pInvQFloat] = 0.0;
        TrunkInventory[vehicle][listitem][pInvItem] =
		TrunkInventory[vehicle][listitem][pInvS] =
		TrunkInventory[vehicle][listitem][pInvEx] =
		TrunkInventory[vehicle][listitem][pInvQ] = 0;

		new mes[128];
		format(mes, sizeof(mes), "%s adlý eþyayý %s model aracýn %s alýr.", inventory_items[item][itemName], VehicleNames[GetVehicleModel(vehicle)-400], (VehicleInfo[vehicle][carFaction])?("bagajýndan"):("bagajýndan"));
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);
	    return 1;
	}

	pc_cmd_envanter(playerid, "");
	return 1;
}

Dialog:DeleteItem(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_envanter(playerid, "");

    new slot = GetPVarInt(playerid, #inventory_choose);

	if (slot < 0 || slot > MAX_INV_SLOTS-1 || Inventory[playerid][slot][pInvItem] == 0)	return pc_cmd_envanter(playerid, "");
	if (Inventory[playerid][slot][pInvItem] == 21 && maskOn{playerid}) pc_cmd_maske(playerid, "");

/*	if (InfoSkate[playerid][sActive] == true)
	{
		InfoSkate[playerid][sActive] = false;
        DestroyDynamicObject(InfoSkate[playerid][sSkate]);
	}*/
	SM2(playerid, "%s adlý eþyayý envanterinizden sildiniz.", inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);
	//SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "** (( %s %s adlý eþyayý envanterinden siler. ))", GetNameWithMask(playerid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);

	RemoveInvItem(playerid, Inventory[playerid][slot][pInvItem], 0, slot);
	return 1;
}

Dialog:GiveItem(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_envanter(playerid, "");

    new slot = GetPVarInt(playerid, #inventory_choose);

	if (slot < 0 || slot > MAX_INV_SLOTS-1 || Inventory[playerid][slot][pInvItem] == 0)	return pc_cmd_envanter(playerid, "");

	new userid;

    if (sscanf(inputtext, "u", userid))	return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "{FFFFFF}Eþyayý ver", "{ffffff}Eþyayý vermek istediðiniz kiþinin ID'sini giriniz:", ">>>", "Geri Dön");

    if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))		return SendNotNearPlayer(playerid);
	if (playerid == userid)								return SendErrorMessage(playerid, "Kendine eþya veremezsin.");

	if (inventory_items[Inventory[playerid][slot][pInvItem]][itemSplit] == 0 || Inventory[playerid][slot][pInvQFloat] == 0.1)
	{
		switch(Inventory[playerid][slot][pInvItem])
		{
			case 22..34: // WEAPON
			{
				if (GiveInvItem(userid, Inventory[playerid][slot][pInvItem], Inventory[playerid][slot][pInvQ], Inventory[playerid][slot][pInvEx], Inventory[playerid][slot][pInvS]) == -1)
					return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");

				new str[128];
				format(str, sizeof(str), "%s adlý silahý %s adlý kiþiye verir.", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], GetNameWithMask(userid));
				SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 20.0, 4000);

				SM1(userid, "%s sana %s adlý silahý verdi.", GetNameWithMask(playerid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);
				SM1(playerid, "%s adlý kiþiye %s adlý silahý verdin.", GetNameWithMask(userid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);

				RemoveInvItem(playerid, Inventory[playerid][slot][pInvItem], 0, slot);
			}
			case INV_GANJA, INV_MED_GANJA, 103 .. 118: // ðåàãåíòû è òðàâà
			{
				if (GiveFloatInvItem(userid, Inventory[playerid][slot][pInvItem], Inventory[playerid][slot][pInvQFloat]) == -1)	return SendErrorMessage(playerid, "Envanteriniz tamamen dolu!");

				new str[128];
				format(str, sizeof(str), "%s adlý eþyayý %s adlý kiþiye verir.", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], GetNameWithMask(userid));
				SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 20.0, 4000);

				SM1(userid, "%s sana %s adlý eþyayý verdi (%.1fg).", GetNameWithMask(playerid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQFloat]);
				SM1(playerid, "%s adlý kiþiye %s adlý eþyayý verdin (%.1fg).", GetNameWithMask(userid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQFloat]);

				RemoveFloatInvItem(playerid, Inventory[playerid][slot][pInvItem], 0, slot);
			}
			case INV_DRUG: // íàðêîòèêè
			{
				if (GiveDrugInvItem(userid, Inventory[playerid][slot][pInvName], Inventory[playerid][slot][pInvQFloat], Inventory[playerid][slot][pInvEx], Inventory[playerid][slot][pInvS]) == -1)	return SendErrorMessage(playerid, "Envanteriniz tamamen dolu!");

				new str[128];
				format(str, sizeof(str), "%s adlý uyuþturucuyu %s adlý kiþiye verir.", Inventory[playerid][slot][pInvName], GetNameWithMask(userid));
				SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 20.0, 4000);

				SM1(userid, "%s sana %s adlý uyuþturucudan verdi (%.1fg).", GetNameWithMask(playerid), Inventory[playerid][slot][pInvName], Inventory[playerid][slot][pInvQFloat]);
				SM1(playerid, "%s adlý kiþiye %s adlý eþyayý verdin (%.1fg).", GetNameWithMask(userid), Inventory[playerid][slot][pInvName], Inventory[playerid][slot][pInvQFloat]);

				RemoveFloatInvItem(playerid, Inventory[playerid][slot][pInvItem], 0, slot);
			}
			default:
			{
				if (GiveInvItem(userid, Inventory[playerid][slot][pInvItem], Inventory[playerid][slot][pInvQ]) == -1)	return SendErrorMessage(playerid, "Envanteriniz tamamen dolu!");

				new str[128];
				format(str, sizeof(str), "%s adlý kiþiye %s adlý eþyayý verir.", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], GetNameWithMask(userid));
				SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 20.0, 4000);

				SM1(userid, "%s sana %s adlý eþyayý verdi.", GetNameWithMask(playerid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);
				SM1(playerid, "%s adlý kiþiye %s adlý eþyayý verdin.", GetNameWithMask(userid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName]);

				RemoveInvItem(playerid, Inventory[playerid][slot][pInvItem], 0, slot);
			}
		}

	    return 1;
	}

	SetPVarInt(playerid, #give_item, userid);

	new mes[256];
	format(mes, sizeof(mes), "{ffffff}Eþya: %s (miktar: %i)\n\n%s adlý kiþiye vereceðiniz eþyanýn miktarýný giriniz:", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQ], GetNameWithMask(userid));
	Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Eþya", mes, "Ver", "Ýptal");
	return 1;
}

Dialog:GiveQuantity(playerid, response, listitem, inputtext[])
{
	if (!response)									return pc_cmd_envanter(playerid, "");

	new slot = GetPVarInt(playerid, #inventory_choose),	userid = GetPVarInt(playerid, #give_item);

	if (!IsPlayerLogged(userid))						return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))		return SendNotNearPlayer(playerid);
    if (playerid == userid)								return SendErrorMessage(playerid, "Kendine eþya veremezsin.");

	if (slot < 0 || slot > MAX_INV_SLOTS-1 || Inventory[playerid][slot][pInvItem] == 0)	return pc_cmd_envanter(playerid, "");

	switch(Inventory[playerid][slot][pInvItem])
	{
		case 22..34: // WEAPON
		{
			return 1;
		}
		case INV_GANJA, INV_MED_GANJA, 103 .. 118: // ðåàãåíòû è òðàâà
		{
			format(inputtext, 5, "%.1f", floatstr(inputtext));
			new Float:amount = floatstr(inputtext);

			if (amount < 0.1 || Inventory[playerid][slot][pInvQFloat] < amount)
			{
				SendErrorMessage(playerid, "Yeterli eþyanýz yok. ");

				new mes[256];
				format(mes, sizeof(mes), "{ffffff}Eþya: %s (miktar: %i)\n\n%s adlý kiþiye vereceðiniz eþyanýn miktarýný giriniz:", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQ], GetNameWithMask(userid));
				Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Eþya", mes, "Ver", "Ýptal");
				return 1;
			}

			if (GiveFloatInvItem(userid, Inventory[playerid][slot][pInvItem], amount) == -1)	return SendErrorMessage(playerid, "Envanteriniz tamamen dolu!");

			new str[128];
			format(str, sizeof(str), "%s adlý eþyayý %s adlý kiþiye verir.", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], GetNameWithMask(userid));
			SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 20.0, 4000);

			SM1(userid, "%s sana %s adlý eþyayý verdi (%.1fg).", GetNameWithMask(playerid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName], amount);
			SM1(playerid, "%s adlý kiþiye %s adlý eþyayý verdin (%.1fg).", GetNameWithMask(userid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName], amount);

			new query[256];
			format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] conveyed %s (amount: %i) player %s [MYSQL: %i | IP: %s]",
			GetNameEx(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName], amount, GetNameEx(userid), PlayerInfo[userid][pID], q_GetPlayerIP(userid));
			insert_log(query, ITEM_LOG, 3, PlayerInfo[playerid][pAccID], PlayerInfo[userid][pAccID]);

			RemoveFloatInvItem(playerid, Inventory[playerid][slot][pInvItem], amount, slot);
		}
		case INV_DRUG: // íàðêîòèêè
		{
			format(inputtext, 5, "%.1f", floatstr(inputtext));
			new Float:amount = floatstr(inputtext);

			if (amount < 0.1 || Inventory[playerid][slot][pInvQFloat] < amount)
			{
				SendErrorMessage(playerid, "Bu kadar miktara sahip deðilsin. ");

				new mes[256];
				format(mes, sizeof(mes), "{ffffff}Eþya: %s (miktar): %i)\n\nKiþiye vermek istediðiniz %s adlý eþya miktarýný girin:", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQ], GetNameWithMask(userid));
				Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Eþya", mes, "Ver", "Ýptal");
				return 1;
			}

			if (GiveDrugInvItem(userid, Inventory[playerid][slot][pInvName], amount, Inventory[playerid][slot][pInvEx], Inventory[playerid][slot][pInvS]) == -1)	return SendErrorMessage(playerid, "Envanteriniz tamamen dolu!");

			new str[128];
			format(str, sizeof(str), "%s adlý eþyayý %s adlý kiþiye verir.", Inventory[playerid][slot][pInvName], GetNameWithMask(userid));
			SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 20.0, 4000);

			SM1(userid, "%s sana %s adlý eþyayý verdi (%.1fg).", GetNameWithMask(playerid), Inventory[playerid][slot][pInvName], amount);
			SM1(playerid, "%s adlý kiþiye %s adlý eþyayý verdin (%.1fg).", GetNameWithMask(userid), Inventory[playerid][slot][pInvName], amount);

			new query[256];
			format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] conveyed %s [drug] (amount: %i / OAS: %i%%) player %s [MYSQL: %i | IP: %s]",
			GetNameEx(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), Inventory[playerid][slot][pInvName], amount, Inventory[playerid][slot][pInvEx], GetNameEx(userid), PlayerInfo[userid][pID], q_GetPlayerIP(userid));
			insert_log(query, ITEM_LOG, 3, PlayerInfo[playerid][pAccID], PlayerInfo[userid][pAccID]);

			RemoveFloatInvItem(playerid, Inventory[playerid][slot][pInvItem], amount, slot);
		}
		default: //
		{
			new amount = strval(inputtext);

			if (amount < 1 || Inventory[playerid][slot][pInvQ] < amount)
			{
				SendErrorMessage(playerid, "Yeterli miktar bulunmuyor. ");

				new mes[256];
				format(mes, sizeof(mes), "{ffffff}Eþya: %s (miktar): %i)\n\nKiþiye vermek istediðiniz %s adlý eþya miktarýný girin:", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], Inventory[playerid][slot][pInvQ], GetNameWithMask(userid));
				Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Eþya", mes, "Ver", "Ýptal");
				return 1;
			}

			if (GiveInvItem(userid, Inventory[playerid][slot][pInvItem], amount) == -1)	return SendErrorMessage(playerid, "Kiþinin envanteri tamamen dolu.");
			new str[128];
			format(str, sizeof(str), "%s adlý eþyayý %s adlý kiþiye verdi.", inventory_items[Inventory[playerid][slot][pInvItem]][itemName], GetNameWithMask(userid));
			SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 20.0, 4000);

			SM1(userid, "%s sana %s adlý eþyayý verdi [miktar: %i].", GetNameWithMask(playerid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName], strval(inputtext));
			SM1(playerid, "%s adlý kiþiye %s adlý eþyayý verdin [miktar: %i].", GetNameWithMask(userid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName], strval(inputtext));

			new query[256];
			format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] conveyed %s (amount: %i) player %s [MYSQL: %i | IP: %s]",
			GetNameEx(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), inventory_items[Inventory[playerid][slot][pInvItem]][itemName], strval(inputtext), GetNameEx(userid), PlayerInfo[userid][pID], q_GetPlayerIP(userid));
			insert_log(query, ITEM_LOG, 3, PlayerInfo[playerid][pAccID], PlayerInfo[userid][pAccID]);

			RemoveInvItem(playerid, Inventory[playerid][slot][pInvItem], amount, slot);
		}
	}

	return 1;
}

Dialog:InventoryMenu(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	switch(listitem)
	{
		case 0: return PrintInv(playerid);
		case 1:
		{
			new houseid;
			if ((houseid = GetNearHouse(playerid)) != -1 && HouseInfo[houseid][hOwnerID] == PlayerInfo[playerid][pID])
			{
				return PrintHouseInv(playerid, houseid);
			}

			new vehicle = GetNearVehicle(playerid, 4.0);
			if (vehicle != 0 && (!IsADontTrunk(vehicle) || !IsAPlane(vehicle) || !IsABiker(vehicle) || !IsAHelicopter(vehicle) || !IsABoat(vehicle) || !IsABicycle(vehicle)))
			{
				if ((VehicleInfo[vehicle][carTrunkLock] && !IsPlayerInAnyVehicle(playerid)) || (IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] == PlayerInfo[playerid][pFaction]))
				{
					return PrintVehInv(playerid, vehicle);
				}
			}

			vehicle = GetPlayerVehicleID(playerid);
			if (IsPlayerInAnyVehicle(playerid) && vehicle != 0 && VehicleInfo[vehicle][carOwnerID] == PlayerInfo[playerid][pID])
			{
				return PrintGBInv(playerid, vehicle);
			}
		}
	}

	SendErrorMessage(playerid, "Bu kýsma eriþiminiz yok. Kod: 073");
	return 1;
}

alias:envanter("env","envanterim");
CMD:envanter(playerid, params[])
{
	DeletePVar(playerid, #inventory_house);
    DeletePVar(playerid, #inventory_vehicle);

    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])	return SendErrorMessage(playerid, "Þu anda bunu yapamazsýn!");

	if (GetPVarInt(playerid, #pDelay)) return 1;

	new
		count,
		diatxt[64] = "Karakter Envanteriniz"
	;

	new houseid;
	if ((houseid = GetNearHouse(playerid)) != -1 && HouseInfo[houseid][hOwnerID] == PlayerInfo[playerid][pID] && PlayerToPoint(1, playerid,HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]))
	{
		format(diatxt, sizeof(diatxt), "%s\nEv Deposu", diatxt);
		count++;
	}

	new vehicle = GetNearVehicle(playerid, 4.0);
	if (vehicle != 0 && (!IsADontTrunk(vehicle) || !IsAPlane(vehicle) || !IsABiker(vehicle) || !IsAHelicopter(vehicle) || !IsABoat(vehicle) || !IsABicycle(vehicle)))
	{
		if ((VehicleInfo[vehicle][carTrunkLock] && !IsPlayerInAnyVehicle(playerid)) || (IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] == PlayerInfo[playerid][pFaction]))
		{
			if (VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] == PlayerInfo[playerid][pFaction]) format(diatxt, sizeof(diatxt), "%s\nEnvanter ekle", diatxt);
			else 																										format(diatxt, sizeof(diatxt), "%s\nBagaj", diatxt);
			count++;
		}
	}

	vehicle = GetPlayerVehicleID(playerid);
	if (IsPlayerInAnyVehicle(playerid) && vehicle != 0 && GetPlayerHasRightDrive(playerid, vehicle))
	{
		format(diatxt, sizeof(diatxt), "%s\nAraç Torpidosu", diatxt);
		count++;
	}

	if (count)	Dialog_Show(playerid, InventoryMenu, DIALOG_STYLE_LIST, "Envanter:", diatxt, "Sec", "Iptal");
	else		PrintInv(playerid);

 	return 1;
}

CMD:objesil(playerid, params[])
{
	if (!IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))	return SendWarningMessage(playerid, "Elinizde envantere konulacak bir þey yok. ");
	if (!GetPVarInt(playerid, #attach_item))						return SendErrorMessage(playerid, "Bu komut ile sadece belirli eþyalarý envanterine koyabilirsin! ");

	RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	SetPVarInt(playerid, #attach_item, 0);

	if (GiveInvItem(playerid, pTemp[playerid][tempItem], pTemp[playerid][tempQ], pTemp[playerid][tempEx]) == -1) return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");

	pTemp[playerid][tempItem] = 0;
	pTemp[playerid][tempEx] = 0;
	pTemp[playerid][tempQ] = 0;

	SendSyntaxMessage(playerid, "Elinizde bulunan objeyi sildiniz. ");
	return 1;
}

PrintInv(playerid)
{
	new result[(MAX_INV_SLOTS+5) * 128] = "#\tEsya\tMiktar"; //{ffffff}
	if (GetPVarInt(playerid, #pDelay)) return PrintInv(playerid);

	FixInv(playerid);
    for(new i = 0; i < MAX_INV_SLOTS; i++) {
		switch(Inventory[playerid][i][pInvItem])
		{
			case 0:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t{C3C3C3}Boþ Slot", result, i+1);
			}
			case 22 .. 34:
			{
				if (Inventory[playerid][i][pInvQ] == 0) format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[Boþ]\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
				else 									format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[%s / %i]{FFFFFF}\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName], inventory_items[Inventory[playerid][i][pInvEx]][itemName], Inventory[playerid][i][pInvQ]);
			}

			case 78, 79:
			{
				if (Inventory[playerid][i][pInvEx] == 0) format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[Boþ]\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
				else 									 format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[%s / %f]{FFFFFF}\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName], inventory_items[Inventory[playerid][i][pInvEx]][itemName], Inventory[playerid][i][pInvQFloat]);
			}

			case INV_GANJA, INV_MED_GANJA, 103 .. 118:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s{FFFFFF}\t%.1fg", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName], Inventory[playerid][i][pInvQFloat]);
			}
			case INV_DRUG:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[OAS: %i%%]{FFFFFF}\t%.1fg", result, i+1, Inventory[playerid][i][pInvName], Inventory[playerid][i][pInvEx], Inventory[playerid][i][pInvQFloat]);
			}
			case INV_GASCAN:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {33FF66}(20L)\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
			}
			/*case 103 .. 114:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {}[OAS: %i]{FFFFFF}\t%.1fg", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName], PlayerInfo[playerid][pInvQFloat][i]);
			}*/

			/*case 103 .. 114:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}Ñîðò: %s]{FFFFFF}\t%.1fg", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName], PlayerInfo[playerid][pInvQFloat][i]);
			}*/


			/*case FISHING_LOWEST_ID .. FISHING_HIGHEST_ID:
			{
				format(result, sizeof(result), "%s\n{FFFFFF}%s (%dlbs)", result, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvEx][i]);
			}
			case INV_GASCAN:
			{
				//if (PlayerInfo[playerid][pInvQ][i] > 0)
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {33FF66}(20L)", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);//, PlayerInfo[playerid][pInvEx][i], PlayerInfo[playerid][pInvQ][i]);//FuelName(PlayerInfo[playerid][pInvEx][i]), PlayerInfo[playerid][pInvQ][i]);
				//else 									format(result, sizeof(result), "%s\n{ffffff}%i.\t%s [{C3C3C3}Ïóñòàÿ{FFFFFF}]", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
			}
			*/

			default:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s\t%i", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName], Inventory[playerid][i][pInvQ]);
			}
	    }
	}

	if (GetPVarInt(playerid, #attach_item))
	{
		format(result, sizeof(result), "%s\n{ffffff}%i.\t{FF6347}> {FFFFFF}Elinden Býrak\n{ffffff}%i.\t{FF6347}> {FFFFFF}Çýkart", result, MAX_INV_SLOTS+1, MAX_INV_SLOTS+2);
	}

	Dialog_Show(playerid, Inventory, DIALOG_STYLE_TABLIST_HEADERS, "Envanter", result, "Seç", "Kapat");
	return true;
}

PrintInvEx(playerid, userid)
{
	new result[(MAX_INV_SLOTS+1) * 64] = "#\tEþya\tMiktar"; //{ffffff}
	if (GetPVarInt(playerid, #pDelay)) return PrintInvEx(playerid, userid);

	format(result, sizeof(result), "-\t{33AA33}Para\t$%i{FFFFFF}\n", PlayerInfo[playerid][pCash]);

    for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		switch(Inventory[playerid][i][pInvItem])
		{
			case 0:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i\t{969595}Boþ Slot", result, i+1);
			}
			case 22 .. 34:
			{
				if (Inventory[playerid][i][pInvQ] == 0) format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[Boþ]\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
				else 									format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[%s / %i]{FFFFFF}\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName], inventory_items[Inventory[playerid][i][pInvEx]][itemName], Inventory[playerid][i][pInvQ]);
			}

			case 78, 79:
			{
				if (Inventory[playerid][i][pInvEx] == 0) format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[Boþ]\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
				else 									format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[%s / %i]{FFFFFF}\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName], inventory_items[Inventory[playerid][i][pInvEx]][itemName], Inventory[playerid][i][pInvQ]);
			}
			case INV_GASCAN:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {33FF66}(20L)\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
			}
			default:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s\t%i", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName], Inventory[playerid][i][pInvQ]);
			}
	    }
	}
	new title[34];
	if (!IsAdminDuty(userid))
	{
		new mes[64];
		format(mes,sizeof(mes),"%s adlý kiþinin üstünü arar.", GetNameWithMask(playerid));
		pc_cmd_me(playerid, mes);

		title = "Ara %s";
	}
	else title = "%s Envanteri";

	format(title, sizeof(title), title, GetNameWithMask(playerid));
	Dialog_Show(userid, None, DIALOG_STYLE_TABLIST_HEADERS, title, result, ">>", "");
	return true;
}

PrintVehInv(playerid, vehid, frisk = 0)
{
	new result[(MAX_TRUNK_INVENTORY+1) * 64] = "#\tEþya\tDeðer"; //{ffffff}
	if (GetPVarInt(playerid, #pDelay)) return PrintVehInv(playerid, vehid, frisk);

    for(new i = 0; i < MAX_TRUNK_INVENTORY; i++)
	{
		switch(TrunkInventory[vehid][i][pInvItem])
		{
			case 0:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i\t{C3C3C3}Boþ Slot", result, i+1);
			}
			case 22 .. 34:
			{
				if (TrunkInventory[vehid][i][pInvQ] == 0) 	format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[Boþ]\t1", result, i+1, inventory_items[TrunkInventory[vehid][i][pInvItem]][itemName]);
				else 										format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[%s / %i]{FFFFFF}\t1", result, i+1, inventory_items[TrunkInventory[vehid][i][pInvItem]][itemName], inventory_items[TrunkInventory[vehid][i][pInvEx]][itemName], TrunkInventory[vehid][i][pInvQ]);
			}

			case 78, 79:
			{
				if (TrunkInventory[vehid][i][pInvEx] == 0) 	format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[Boþ]\t1", result, i+1, inventory_items[TrunkInventory[vehid][i][pInvItem]][itemName]);
				else 										format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[%s / %i]{FFFFFF}\t1", result, i+1, inventory_items[TrunkInventory[vehid][i][pInvItem]][itemName], inventory_items[TrunkInventory[vehid][i][pInvEx]][itemName], TrunkInventory[vehid][i][pInvQ]);
			}
			case INV_GASCAN:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {33FF66}(20L)\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
			}
			default: format(result, sizeof(result), "%s\n{ffffff}%i.\t%s\t%i", result, i+1, inventory_items[TrunkInventory[vehid][i][pInvItem]][itemName], TrunkInventory[vehid][i][pInvQ]);
	    }
	}

	new title[64];

	if (!frisk)
	{
		if (VehicleInfo[vehid][carFaction] && VehicleInfo[vehid][carFaction] == PlayerInfo[playerid][pFaction])  title = "Torpido %s";
		else																									title = "Bagaj %s";

		format(title, sizeof(title), title, VehicleNames[GetVehicleModel(vehid)-400]);
		Dialog_Show(playerid, InventoryOther, DIALOG_STYLE_TABLIST_HEADERS, title, result, "Seç", "Kapat");
	}
	else
	{
		if (!IsAdminDuty(playerid))
		{
			new mes[64];
			format(mes,sizeof(mes),"%s model aracýn bagajýný arar.", VehicleNames[GetVehicleModel(vehid)-400]);
			pc_cmd_me(playerid, mes);

			title = "Bagaj Aramasý (%s)";
			format(title, sizeof(title), title, VehicleNames[GetVehicleModel(vehid)-400]);
		}
		else
		{
			title = "Bagaj %s | Araç Sahibi: %s";
			if (VehicleInfo[vehid][carOwnerID]) 	format(title, sizeof(title), title, VehicleNames[GetVehicleModel(vehid)-400], VehicleInfo[vehid][carOwner]);
			else   								format(title, sizeof(title), title, VehicleNames[GetVehicleModel(vehid)-400], GetInitials(Factions[VehicleInfo[vehid][carFaction]][fName]));
		}

		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, title, result, ">>", "");
	}

	if (VehicleInfo[vehid][vCorp] > 0 && CorpInfo[VehicleInfo[vehid][vCorp]][cUsed] == 1) SendWarningMessage(playerid,"Bu aracýn bagajýnda bir ceset var.");

	return 1;
}

PrintGBInv(playerid, vehid, frisk = 0)
{
	new result[(MAX_CAR_INVENTORY+1) * 64] = "#\tEþya\tMiktar"; //{ffffff}
	if (GetPVarInt(playerid, #pDelay)) return PrintGBInv(playerid, vehid, frisk);

    for(new i = 0; i < MAX_CAR_INVENTORY; i++)
	{
		switch(CarInventory[vehid][i][pInvItem])
		{
			case 0:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i\t{C3C3C3}Boþ Slot", result, i+1);
			}
			case 22 .. 34:
			{
				if (CarInventory[vehid][i][pInvQ] == 0) 	format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[Boþ]\t1", result, i+1, inventory_items[CarInventory[vehid][i][pInvItem]][itemName]);
				else 									format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[%s / %i]{FFFFFF}\t1", result, i+1, inventory_items[CarInventory[vehid][i][pInvItem]][itemName], inventory_items[CarInventory[vehid][i][pInvEx]][itemName], CarInventory[vehid][i][pInvQ]);
			}

			case 78, 79:
			{
				if (CarInventory[vehid][i][pInvEx] == 0) 	format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[Boþ]\t1", result, i+1, inventory_items[CarInventory[vehid][i][pInvItem]][itemName]);
				else 										format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[%s / %i]{FFFFFF}\t1", result, i+1, inventory_items[CarInventory[vehid][i][pInvItem]][itemName], inventory_items[CarInventory[vehid][i][pInvEx]][itemName], CarInventory[vehid][i][pInvQ]);
			}

			case INV_GASCAN:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {33FF66}(20L)\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
			}

			default:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s\t%i", result, i+1, inventory_items[CarInventory[vehid][i][pInvItem]][itemName], CarInventory[vehid][i][pInvQ]);
			}
	    }
	}

	new title[64];

	if (!frisk)
	{
		title = "Torpido %s";
		format(title, sizeof(title), title, VehicleNames[GetVehicleModel(vehid)-400]);
		Dialog_Show(playerid, InventoryOther, DIALOG_STYLE_TABLIST_HEADERS, title, result, "Seç", "Kapat");
	}
	else
	{
		if (!IsAdminDuty(playerid))
		{
			new mes[64];
			format(mes,sizeof(mes),"%s model aracýn torpidosunu arar.", VehicleNames[GetVehicleModel(vehid)-400]);
			pc_cmd_me(playerid, mes);

			title = "%s (Torpido)";
			format(title, sizeof(title), title, VehicleNames[GetVehicleModel(vehid)-400]);
		}
		else
		{
			title = "Torpido: %s | Araç Sahibi: %s";
			if (VehicleInfo[vehid][carOwnerID]) 	format(title, sizeof(title), title, VehicleNames[GetVehicleModel(vehid)-400], VehicleInfo[vehid][carOwner]);
			else   								format(title, sizeof(title), title, VehicleNames[GetVehicleModel(vehid)-400], GetInitials(Factions[VehicleInfo[vehid][carFaction]][fName]));
		}

		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, title, result, ">>", "");
	}

	return 1;
}

PrintHouseInv(playerid, houseid, frisk = 0)
{
	new result[(MAX_HOUSE_INVENTORY+1) * 64] = "#\tEþya\tMiktar"; //{ffffff}
	if (GetPVarInt(playerid, #pDelay)) return PrintHouseInv(playerid, houseid, frisk);

    for(new i = 0; i < MAX_HOUSE_INVENTORY; i++)
	{
		switch(HouseInventory[houseid][i][pInvItem])
		{
			case 0:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i\t{C3C3C3}Boþ Slot", result, i+1);
			}
			case 22 .. 34:
			{
				if (HouseInventory[houseid][i][pInvQ] == 0) 	format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[Boþ]\t1", result, i+1, inventory_items[HouseInventory[houseid][i][pInvItem]][itemName]);
				else 										format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[%s / %i]{FFFFFF}\t1", result, i+1, inventory_items[HouseInventory[houseid][i][pInvItem]][itemName], inventory_items[HouseInventory[houseid][i][pInvEx]][itemName], HouseInventory[houseid][i][pInvQ]);
			}

			case 78, 79:
			{
				if (HouseInventory[houseid][i][pInvEx] == 0) 	format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[Boþ]\t1", result, i+1, inventory_items[HouseInventory[houseid][i][pInvItem]][itemName]);
				else 											format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {C3C3C3}[%s / %i]{FFFFFF}\t1", result, i+1, inventory_items[HouseInventory[houseid][i][pInvItem]][itemName], inventory_items[HouseInventory[houseid][i][pInvEx]][itemName], HouseInventory[houseid][i][pInvQ]);
			}

			case INV_GASCAN:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s {33FF66}(20L)\t1", result, i+1, inventory_items[Inventory[playerid][i][pInvItem]][itemName]);
			}

			default:
			{
				format(result, sizeof(result), "%s\n{ffffff}%i.\t%s\t%i", result, i+1, inventory_items[HouseInventory[houseid][i][pInvItem]][itemName], HouseInventory[houseid][i][pInvQ]);
			}
	    }
	}

	if (!frisk) Dialog_Show(playerid, InventoryOther, DIALOG_STYLE_TABLIST_HEADERS, "Diðer", result, "Seç", "Kapat");
	else
	{
		new title[42];
		if (!IsAdminDuty(playerid))
		{
			pc_cmd_me(playerid, "evi aramaya baþlar.");
			title = "%s adlý kiþinin evini arýyorsun";
		}
		else title = "Ev %s";

		format(title, sizeof(title), title, HouseInfo[houseid][hOwner]);
		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, title, result, ">>", "");
	}

	return 1;
}

/* Giriþ sistemi */
/*Internal*/

Login_OnPlayerDisconnect(playerid, reason)
{
    if (IsPlayerNPC(playerid)) return 1;

	new reason_text[18];

	switch(reason)
	{
		case 0: reason_text = "Zaman aþýmý/Crash";
		case 1: reason_text = "Kendi isteðiyle";
		case 2: reason_text = "Kick/Ban";
	}

    SavePlayerPos(playerid);
    DisableWaypoint(playerid);
	UpdateInjured(playerid);
	ResetDamages(playerid);
	DestroyAllBort(playerid);
    Destroy_Boombox(playerid);
	ResetLoginScreenVariables(playerid);

	pc_cmd_raporiptal(playerid);

	if (GetPVarInt(playerid, #Chase_Timer)) KillTimer(GetPVarInt(playerid, #Chase_Timer));

	DeletePVar(playerid, "Admin:CodeInputted");

    if (IsAdminDuty(playerid)) server_admins--;

	if (TaxiMade[playerid])
	{
		GiveCash(playerid, TaxiMade[playerid]);
        TaxiMade[playerid] = 0;
	}

	if (IsValidVehicle(JackingVehicle[playerid]))
	{
		new Float:ccX, Float:ccY, Float:ccZ;
		GetVehiclePos(JackingVehicle[playerid], ccX, ccY, ccZ);

	    VehicleInfo[JackingVehicle[playerid]][ePhysicalAttack] = false;
	    DestroyDynamic3DTextLabel(VehicleInfo[JackingVehicle[playerid]][eVehicleLabel]);
	    VehicleInfo[JackingVehicle[playerid]][vCooldown] = false;
	    JackingVehicle[playerid] = 0;
	}

    pTemp[playerid][pRamType] = 0;
    pTemp[playerid][pRamTime] = 0;

    if (IsValidDynamicObject(pTemp[playerid][pRamObj]))
	{
		DestroyDynamicObject(pTemp[playerid][pRamObj]);
		pTemp[playerid][pRamObj] = INVALID_OBJECT_ID;
	}

	if (GetPVarInt(playerid, "3DLabel"))
    {
		DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "3DLabel"));
		DeletePVar(playerid, "3DLabel");
    }

    if (pTemp[playerid][pPatrol])
	{
	    new id = pTemp[playerid][pPatrol]-1;
	    pTemp[playerid][pPatrol] = 0;

        if (PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] == playerid) PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] = INVALID_PLAYER_ID;
        if (PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][1] == playerid) PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][1] = INVALID_PLAYER_ID;
		if (PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] == INVALID_PLAYER_ID && PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] == INVALID_PLAYER_ID) PatrolInfo[GetPatrolID(playerid)][id][patrulExists] = 0;

	    SendFactionMessageF(FACTION_POLICE, COLOR_POLICECHAT, "[Departman] %s %s devriyesini sonlandýrdý: %s%s.", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][id][patrulName], reason_text);
	}

    if (IsPlayerPhoneCreated(playerid)) Phone_Destroy(playerid);

	if (pTemp[playerid][p3DMenu] != -1)
	{
    	Destroy3DMenu(pTemp[playerid][p3DMenu]);
		pTemp[playerid][p3DMenu] = -1;
	}

	if (pTemp[playerid][pTracePlayer] != INVALID_PLAYER_ID)
	{
	    pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
		pTemp[playerid][pTraceStage] = 0;
		if (pTemp[playerid][pTraceGZ] != -1) GangZoneDestroy(pTemp[playerid][pTraceGZ]);
		pTemp[playerid][pTraceGZ] = -1;
	}

	if (IsValidDynamic3DTextLabel(PrisonLabel[playerid]))
	{
		DestroyDynamic3DTextLabel(PrisonLabel[playerid]);
        PrisonLabel[playerid] = Text3D:INVALID_3DTEXT_ID;
	}

    if (pTemp[playerid][pInteriorBiz] != 0)
	{
		SetPlayerBuyInterior(playerid, 0);
        pTemp[playerid][pInteriorBiz] = 0;
	}

	if (pTemp[playerid][pZond] != 0)
	{
		SetPlayerZond(playerid, 0);
        pTemp[playerid][pZond] = 0;
	}

	if (PlayerInfo[playerid][pInjured] == 3 && IsValidDynamic3DTextLabel(status_upd[playerid]))
	{
		DestroyDynamic3DTextLabel(status_upd[playerid]);
	}

    if (pTemp[playerid][pPayphone] != -1)
    {
		PayphoneInfo[pTemp[playerid][pPayphone]][phUsed] = INVALID_PLAYER_ID;
		pTemp[playerid][pPayphone] = -1;
	}

	if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    if (IsPlayerLogged(pTemp[playerid][pCallLine])) SendPhoneMessage(pTemp[playerid][pCallLine], "Telefon hattý meþgule düþtü.");
		HangupCall(playerid);
	}

	if (IsPlayerLogged(playerid))
	{
	    foreach(new i : Player)
		{
			if(pTemp[i][pSpecPlayer] == playerid) TogglePlayerSpectating(i, 0);

			if (!(PlayerInfo[i][pSettings] & togJoin))
			{
				if (IsAdminDuty(i))
					SendClientMessageEx(i, COLOR_GRAD2, "*** %s sunucudan ayrýldý. %s (nakit: $%s, banka: $%s)", GetNameEx(playerid), reason_text, FormatNumber(PlayerInfo[playerid][pCash]), FormatNumber(PlayerInfo[playerid][pBank]));

				else if (GetPlayerDistanceFromPlayer(playerid, i) < 15.0 && GetWorld(playerid) == GetWorld(i) && GetInterior(playerid) == GetInterior(i) && PlayerInfo[playerid][pAdmin] == 0)
                	SendClientMessageEx(i, COLOR_GRAD2, "* %s sunucudan ayrýldý. (%s)", GetNameEx(playerid), reason_text);
			}

			new DCC_Embed:ixd = DCC_CreateEmbed();

			new plrIP[16];
			GetPlayerIp(playerid, plrIP, sizeof(plrIP));


			if(GetPVarInt(i, PVAR_LASTPM_ISACTIVE))
			{
				if(GetPVarInt(i, PVAR_LASTPM_ID) == playerid)
				{
					DeletePVar(i, PVAR_LASTPM_ISACTIVE);
					DeletePVar(i, PVAR_LASTPM_ID);
				}
			}
		}

		if (pTemp[playerid][pRentveh] > 0)
		{
		    new vehicle = pTemp[playerid][pRentveh];

    		VehicleInfo[vehicle][carTerminate] = 300;
    		pTemp[playerid][pRentveh] = 0;
    	}

		if (PlayerInfo[playerid][pCarKey] > 0)
		{
			new vehicle = PlayerInfo[playerid][pCarKey];

		    Save_Car(vehicle);
			VehicleInfo[vehicle][carTerminateEx] = 600;
            VehicleInfo[vehicle][carOwnerPlayer] = INVALID_PLAYER_ID;
			PlayerInfo[playerid][pCarKey] = 0;
		}

		CheckPMBlockList(playerid);

		SQL_SetInteger("users", "online", 0, PlayerInfo[playerid][pID]);
		SQL_SetInteger("users", "last_login", gettime(), PlayerInfo[playerid][pID]);

		Save_User(playerid);
	}

	pTemp[playerid][pLogged] = 0;

	if(IsValidDynamicObject(sandalyeobje[playerid])){
		DestroyDynamicObject(sandalyeobje[playerid]);
		DestroyDynamic3DTextLabel(SandalyeLabel[playerid]);
	}
	if(IsValidDynamicObject(teksandalyeobje[playerid])){
		DestroyDynamicObject(teksandalyeobje[playerid]);
		DestroyDynamic3DTextLabel(TekSandalyeLabel[playerid]);
	}
	ResetPlayerVariables(playerid);

	Streamer_ToggleIdleUpdate(playerid, 0);
	return 1;
}

Login_OnPlayerConnect(playerid)
{
    if (IsPlayerNPC(playerid)) return 1;

	for(new i = 0; i < 10; i++)
	{
		RemovePlayerAttachedObject(playerid, i);
	}

	BWH_memset(Silah_Bilgi[playerid][sSilahID], 13, 0);
	BWH_memset(Silah_Bilgi[playerid][sMermi], 13, 0);

	PreloadAnimations(playerid);
	//StopAudioStreamForPlayer(playerid);
	ResetPlayerVariables(playerid);
	TDraw_OnPlayerConnect(playerid);
    TogglePlayerAllDynamicRaceCPs(playerid, false);
    SetPlayerColor(playerid, TEAM_HIT_COLOR);
	GetNameForPlayer(playerid);
	Streamer_ToggleIdleUpdate(playerid, 1);

    return 1;
}

Login_OnPlayerSpawn(playerid)
{
    if (!IsPlayerLogged(playerid))
	{
	    SendErrorMessage(playerid, "Giriþ yapmadýðýnýz için atýldýnýz.");
		KickEx(playerid);
		return 1;
	}

	SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
	SetPlayerSkill(playerid);

	for(new i = 0; i < MAX_PLAYER_ATTACH; i++)
	{
	    RemovePlayerAttachedObject(playerid, i);

		if (!AttachInfo[playerid][i][aID] || !AttachInfo[playerid][i][aUsed]) continue;

		SetPlayerAttachedObject(playerid, i, AttachInfo[playerid][i][aModel], AttachInfo[playerid][i][aBone], AttachInfo[playerid][i][aOffsetX], AttachInfo[playerid][i][aOffsetY], AttachInfo[playerid][i][aOffsetZ], AttachInfo[playerid][i][aRotX], AttachInfo[playerid][i][aRotY], AttachInfo[playerid][i][aRotZ], AttachInfo[playerid][i][aScaleX], AttachInfo[playerid][i][aScaleY], AttachInfo[playerid][i][aScaleZ]);
	}

    SetPlayerCurrentTimeAndWeather(playerid);
    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
 	SetPlayerSpawn(playerid);

	if(PlayerInfo[playerid][pInjured] > 0)
	{
		new reason = PlayerInfo[playerid][pDeathReason];
		new killerid = 499;
		SetTimerEx("InjuredPlayer", 2000, 0, "iii", playerid, killerid, reason);
	}

	// Reset weapons and ammo
	BWH_memset(Silah_Bilgi[playerid][sSilahID], 13, 0);
	BWH_memset(Silah_Bilgi[playerid][sMermi], 13, 0);

	PlayerTextDrawShow(playerid, Silah_Bilgi[playerid][MermiTD]);

	if (!(PlayerInfo[playerid][pSettings] & togHUD))
	{
		if(!(PlayerInfo[playerid][pSettings] & yesMHUD)){
				ShowHudTextDrawModern(playerid);
		} else ShowHudTextDraw(playerid);
	}

	if (PlayerInfo[playerid][pSettings] & togCustomBar) EnableHealthBarForPlayer(playerid, false);

	SetTimerEx("FixHealthArm", 1000, false, "d", playerid);

	new ora,minut,sec;
	gettime(ora,minut,sec);
	if(ora == 19 && minut == 0 || ora == 20 && minut == 0 || ora == 21 && minut == 0 || ora == 22 && minut == 0)
	{
    	SendSyntaxMessage(playerid, "Happy hour sistemi aktif."); // mesajul trimis player-ului la acea ora
    	return 1;
	}

	return 1;
}

Login_PlayerTimer(playerid)
{
	if (pTemp[playerid][pLogged] == 1 && pTemp[playerid][pLoggedTime]++ >= AUTH_TIME)
	{
	    SendErrorMessage(playerid, "%i saniye boyunca þifrenizi girmediniz.", AUTH_TIME); //êèê
		KickEx(playerid);
		return 0;
	}

	if (pTemp[playerid][pLogged] != 2) return 0;

	return 1;
}
this::CheckAccount(playerid)
{
    if (!IsPlayerConnected(playerid))	return 1;

    SetSpawnInfo(playerid, NO_TEAM, 252, 1039.732055, 2.433174, 1005.315917, 0.0, 0, 0, 0, 0, 0, 0);

    TogglePlayerSpectating(playerid, true);

    SetPlayerColor(playerid, TEAM_HIT_COLOR);
	PlayerPlaySound(playerid, 175, 0.0, 0.0, 0.0);

    InterpolateCameraPos(playerid, 2032.837524, 310.075439, 30.176876, 2047.576171, 318.802398, 29.209707, 2000);
    InterpolateCameraLookAt(playerid, 2037.337646, 312.219482, 29.786907, 2050.502441, 314.837707, 28.362255, 2000);
	SetWorld(playerid, playerid + 100);

	SM1(playerid, "Veriler alinamadi. (KOD-1)");

	new name[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, name, sizeof(name));

	new query[3096];

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `accounts`, `users` WHERE accounts.login = '%s' OR (users.name = '%e' AND accounts.login = users.accountid) LIMIT 1", name, name);
	mysql_tquery(dbHandle, query, "OnAccountCheck", "d", playerid);
	return 1;
}

this::LoadCharacter(playerid)
{
	if (cache_num_rows())
	{
	    new status;
		cache_get_value_int(0, "status", status);

	    switch(status)
		{
		    case 0:
			{
				SendErrorMessage(playerid, "Karakteriniz þu an pasif halde, bilgi için: %s", WeburlName);
				ShowCharacterMenu(playerid);
				return 1;
			}
      		case 2:
			{
				SM1(playerid, "Karakterinizin detaylarýný düzenleyebilirsiniz.");
				CustomizeCharacter(playerid, CUSTOMIZATION_BACK + 1);
				return 1;
			}
			case 3:
			{
			    new admin_name[MAX_PLAYER_NAME + 1];
			    cache_get_value(0, "block_name", admin_name);

				new reason[65];
			    cache_get_value(0, "block_reason", reason);

				static const str_size[] = "Bu karakter %s adlý yönetici tarafýndan kilitlendi.\nSebep: %s";
			    new str[sizeof(str_size) - 4 + MAX_PLAYER_NAME + 64];
			    format(str, sizeof(str), str_size, admin_name, reason);
			    Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "LOSWORLD", str, "Kapat", "");
				return KickEx(playerid);
			}
			case 4: return Kick(playerid);
		}

	    foreach (new i : Player)
		{
			if (!IsPlayerLogged(i) || PlayerInfo[playerid][pAccID] != PlayerInfo[i][pAccID]) continue;

			SendErrorMessage(playerid, "Hesabýnýz yüklenirken bir sorun oluþtu, lütfen sunucuya tekrar giriniz! KOD-2");
			KickEx(playerid);
			return 1;
		}

		new name[MAX_PLAYER_NAME+1];

		cache_get_value(0, "name", name);

  		if (!CompareStrings(PlayerInfo[playerid][pUsername], name) && SetPlayerName(playerid, name) != 1)
		{
		    SendErrorMessage(playerid,"Hesabýnýz yüklenirken bir sorun oluþtu, lütfen sunucuya tekrar giriniz! KOD-1");
		    KickEx(playerid);
		    return 1;
		}
	    GetNameForPlayer(playerid);

		cache_get_value_int(0, "id", PlayerInfo[playerid][pID]);

		SQL_SetInteger("users", "online", 1, PlayerInfo[playerid][pID]);

		//Load database
		cache_get_value_int(0, "cash", PlayerInfo[playerid][pCash]);
		cache_get_value_int(0, "bank", PlayerInfo[playerid][pBank]);
		cache_get_value_int(0, "skin", PlayerInfo[playerid][pSkin]);
		cache_get_value_int(0, "sex", PlayerInfo[playerid][pSex]);
		cache_get_value_int(0, "age", PlayerInfo[playerid][pAge]);
		cache_get_value(0, "origin", PlayerInfo[playerid][pOrigin]);
		cache_get_value_int(0, "race", PlayerInfo[playerid][pRace]);
	 	cache_get_value(0, "birthdate", PlayerInfo[playerid][pBirthdate], 24);
		cache_get_value_int(0, "level", PlayerInfo[playerid][pLevel]);
		cache_get_value_int(0, "exp", PlayerInfo[playerid][pExp]);
		cache_get_value_int(0, "hours", PlayerInfo[playerid][pHours]);
		cache_get_value_int(0, "admin_hide", PlayerInfo[playerid][pAdminHide]);

		cache_get_value_int(0, "donate", PlayerInfo[playerid][pDonate]);
        cache_get_value_int(0, "name_changes", PlayerInfo[playerid][pNameChanges]);
        cache_get_value_int(0, "number_changes", PlayerInfo[playerid][pNumberChanges]);

		cache_get_value_int(0, "int", PlayerInfo[playerid][pInt]);
		cache_get_value_int(0, "world", PlayerInfo[playerid][pWorld]);
		cache_get_value_int(0, "ajailed", PlayerInfo[playerid][pAJailed]);
		cache_get_value_int(0, "ajailtime", PlayerInfo[playerid][pAJailTime]);
		cache_get_value_int(0, "jailed", PlayerInfo[playerid][pJailed]);
		cache_get_value_int(0, "isolatetime", PlayerInfo[playerid][pIsolateTime]);
		cache_get_value_int(0, "carlic", PlayerInfo[playerid][pCarLic]);
		cache_get_value_int(0, "weplic", PlayerInfo[playerid][pWepLic]);
		cache_get_value_int(0, "flylic", PlayerInfo[playerid][pFlyLic]);
		cache_get_value_int(0, "taxilic", PlayerInfo[playerid][pTaxiLic]);
		cache_get_value_int(0, "injured", PlayerInfo[playerid][pInjured]);
		cache_get_value_int(0, "deathreason", PlayerInfo[playerid][pDeathReason]);
		cache_get_value_int(0, "paycheck", PlayerInfo[playerid][pPayCheckMoney]);
		cache_get_value_int(0, "paydaytime", PlayerInfo[playerid][pPayDayTime]);
		cache_get_value_int(0, "number", PlayerInfo[playerid][pNumber]);
		cache_get_value_int(0, "savings", PlayerInfo[playerid][pSavings]);
		cache_get_value_int(0, "mutetime", PlayerInfo[playerid][pMutedTime]);
		cache_get_value_int(0, "rent_key", PlayerInfo[playerid][pRentKey]);
		cache_get_value_int(0, "rent_price", PlayerInfo[playerid][pRentPrice]);

		cache_get_value_int(0, "weaphide0", PlayerInfo[playerid][pHideWeap][0]);
		cache_get_value_int(0, "weaphide1", PlayerInfo[playerid][pHideWeap][1]);
		cache_get_value_int(0, "weaphide2", PlayerInfo[playerid][pHideWeap][2]);

		cache_get_value_int(0, "channel", PlayerInfo[playerid][pChannel]);
		cache_get_value_int(0, "owned_channel", PlayerInfo[playerid][pOwnedChannel]);
		cache_get_value_int(0, "authed", PlayerInfo[playerid][pAuthed]);
		cache_get_value_int(0, "sparekey", PlayerInfo[playerid][pSpareKey]);
		cache_get_value_int(0, "workon", PlayerInfo[playerid][pWorkOn]);
		cache_get_value_int(0, "walk", PlayerInfo[playerid][pWalk]);
		cache_get_value_int(0, "faction", PlayerInfo[playerid][pFaction]);
		cache_get_value_int(0, "rank", PlayerInfo[playerid][pRank]);
		cache_get_value_int(0, "badgenumber", PlayerInfo[playerid][pBadgeNumber]);
		cache_get_value_int(0, "drivewarns", PlayerInfo[playerid][pDriveWarns]);
		cache_get_value_int(0, "wepwarns", PlayerInfo[playerid][pWepWarns]);
		cache_get_value_int(0, "wep_count", PlayerInfo[playerid][pWepCount]);
		cache_get_value_int(0, "jailtime", PlayerInfo[playerid][pJailTime]);
		cache_get_value_int(0, "arrested", PlayerInfo[playerid][pArrested]);
		cache_get_value_int(0, "chat", PlayerInfo[playerid][pTalk]);
		cache_get_value_int(0, "authwep", PlayerInfo[playerid][pAuthwep]);
  		cache_get_value_int(0, "swat", PlayerInfo[playerid][pSwat]);
		cache_get_value_int(0, "swat_duty", PlayerInfo[playerid][pSwatDuty]);
		cache_get_value_int(0, "fishcount", PlayerInfo[playerid][pFishCount]);
		cache_get_value_int(0, "slot", PlayerInfo[playerid][pSlot]);
		cache_get_value_int(0, "job", PlayerInfo[playerid][pJob]);
		cache_get_value_int(0, "sidejob", PlayerInfo[playerid][pSideJob]);
		cache_get_value_int(0, "prescribe", PlayerInfo[playerid][pPrescribe]);
		cache_get_value_int(0, "ganja_time", PlayerInfo[playerid][pGanjaTime]);
		cache_get_value_int(0, "career", PlayerInfo[playerid][pCareer]);
		cache_get_value_float(0, "pos_X", PlayerInfo[playerid][pPosX]);
		cache_get_value_float(0, "pos_Y", PlayerInfo[playerid][pPosY]);
		cache_get_value_float(0, "pos_Z", PlayerInfo[playerid][pPosZ]);
		cache_get_value_float(0, "pos_A", PlayerInfo[playerid][pPosA]);
		cache_get_value_int(0, "prisoned", PlayerInfo[playerid][pPrisoned]);
		cache_get_value_int(0, "duty", PlayerInfo[playerid][pOnDuty]);
		cache_get_value_int(0, "char", PlayerInfo[playerid][pChar]);
		cache_get_value_int(0, "hud", PlayerInfo[playerid][pHud]);

		cache_get_value_int(0, "drugaccess", PlayerInfo[playerid][pDrugLabAccess]);

		cache_get_value_int(0, "weap_0_bone", PlayerInfo[playerid][pWeaponBone][0]);
		cache_get_value_float(0, "weap_0_x", PlayerInfo[playerid][pWeaponX][0]);
		cache_get_value_float(0, "weap_0_y", PlayerInfo[playerid][pWeaponY][0]);
		cache_get_value_float(0, "weap_0_z", PlayerInfo[playerid][pWeaponZ][0]);
		cache_get_value_float(0, "weap_0_rx", PlayerInfo[playerid][pWeaponRX][0]);
		cache_get_value_float(0, "weap_0_ry", PlayerInfo[playerid][pWeaponRY][0]);
		cache_get_value_float(0, "weap_0_rz", PlayerInfo[playerid][pWeaponRZ][0]);

		cache_get_value_int(0, "weap_1_bone", PlayerInfo[playerid][pWeaponBone][1]);
		cache_get_value_float(0, "weap_1_x", PlayerInfo[playerid][pWeaponX][1]);
		cache_get_value_float(0, "weap_1_y", PlayerInfo[playerid][pWeaponY][1]);
		cache_get_value_float(0, "weap_1_z", PlayerInfo[playerid][pWeaponZ][1]);
		cache_get_value_float(0, "weap_1_rx", PlayerInfo[playerid][pWeaponRX][1]);
		cache_get_value_float(0, "weap_1_ry", PlayerInfo[playerid][pWeaponRY][1]);
		cache_get_value_float(0, "weap_1_rz", PlayerInfo[playerid][pWeaponRZ][1]);

		cache_get_value_int(0, "weap_2_bone", PlayerInfo[playerid][pWeaponBone][2]);
		cache_get_value_float(0, "weap_2_x", PlayerInfo[playerid][pWeaponX][2]);
		cache_get_value_float(0, "weap_2_y", PlayerInfo[playerid][pWeaponY][2]);
		cache_get_value_float(0, "weap_2_z", PlayerInfo[playerid][pWeaponZ][2]);
		cache_get_value_float(0, "weap_2_rx", PlayerInfo[playerid][pWeaponRX][2]);
		cache_get_value_float(0, "weap_2_ry", PlayerInfo[playerid][pWeaponRY][2]);
		cache_get_value_float(0, "weap_2_rz", PlayerInfo[playerid][pWeaponRZ][2]);

		cache_get_value_int(0, "fightstyle", PlayerInfo[playerid][pFightStyle]);

		cache_get_value_int(0, "tog_0", PlayerInfo[playerid][pTog][0]);
		cache_get_value_int(0, "tog_1", PlayerInfo[playerid][pTog][1]);
		cache_get_value_int(0, "tog_2", PlayerInfo[playerid][pTog][2]);

		cache_get_value_int(0, "phone_off", PlayerInfo[playerid][pPhoneOff]);
		cache_get_value_int(0, "phone_airplane", PlayerInfo[playerid][pPhoneAirplane]);
		cache_get_value_int(0, "phone_sound", PlayerInfo[playerid][pPhoneSound]);
		cache_get_value_int(0, "phone_model", PlayerInfo[playerid][pPhoneModel]);
		cache_get_value_int(0, "phone_ringtone", PlayerInfo[playerid][pPhoneRingtone]);
        cache_get_value_int(0, "phone_style", PlayerInfo[playerid][pPhoneStyle]);
        cache_get_value_int(0, "settings", PlayerInfo[playerid][pSettings]);

		cache_get_value_int(0, "bitcoin", PlayerInfo[playerid][pBitcoin]);
		cache_get_value_int(0, "etherium", PlayerInfo[playerid][pEtherium]);

		cache_get_value_int(0, "warns", PlayerInfo[playerid][pWarns]);

		cache_get_value_int(0, "PlayerSerial", PlayerInfo[playerid][pPlayerSerial]);
		if (!PlayerInfo[playerid][pPlayerSerial]) PlayerInfo[playerid][pPlayerSerial] = PlayerInfo[playerid][pID]*100 + 99999 + random(99);

		new string2[256], string3[256];
	    cache_get_value(0, "division", string2, 256);
	    sscanf(string2, "p<|>ddddd", PlayerInfo[playerid][pOlusumDivision][0], PlayerInfo[playerid][pOlusumDivision][1], PlayerInfo[playerid][pOlusumDivision][2],
	    PlayerInfo[playerid][pOlusumDivision][3], PlayerInfo[playerid][pOlusumDivision][4]);

		cache_get_value_int(0, "LastPrim", PlayerInfo[playerid][pLastPrim]);
		cache_get_value_int(0, "LastSec", PlayerInfo[playerid][pLastSec]);
		cache_get_value_int(0, "LastMelee", PlayerInfo[playerid][pLastMelee]);

		cache_get_value_int(0, "Forbid", PlayerInfo[playerid][pForbid]);
		cache_get_value_int(0, "last_login", pTemp[playerid][pLastLogin]);

		cache_get_value(0, "Desc1", PlayerInfo[playerid][pDescribe], PAME_MAX_LEN);
		cache_get_value(0, "Desc2", PlayerInfo[playerid][pDescribe2], PAME_MAX_LEN);

        cache_get_value_int(0, "dependence", PlayerInfo[playerid][pDependence]);
        cache_get_value_int(0, "demolition", PlayerInfo[playerid][pDemolition]);
        cache_get_value_int(0, "fish_time", PlayerInfo[playerid][pFishTime]);

		cache_get_value_int(0, "kelepceli", PlayerInfo[playerid][pKelepceli]);

		cache_get_value_int(0, "uyusgettime", PlayerInfo[playerid][UyusKullan]);
	    cache_get_value_int(0, "bagimlilik_exp", PlayerInfo[playerid][pBagimlilikEXP]);
	    cache_get_value_int(0, "bagimlilik_seviye", PlayerInfo[playerid][pBagimlilikSeviye]);
	    cache_get_value_int(0, "kriz_sure", PlayerInfo[playerid][pKrizSure]);
	    cache_get_value_int(0, "tedavi_exp", PlayerInfo[playerid][pUTedaviEXP]);
	    cache_get_value_int(0, "tedavi_sure", PlayerInfo[playerid][pUTedaviSure]);

		cache_get_value(0, "string_weapons", string3, 256);
		sscanf(string3, "p<|>dddddddddddddddddddddddd",
		PlayerInfo[playerid][pWeapons][0], PlayerInfo[playerid][pAmmo][0],
		PlayerInfo[playerid][pWeapons][1], PlayerInfo[playerid][pAmmo][1],
		PlayerInfo[playerid][pWeapons][2], PlayerInfo[playerid][pAmmo][2],
		PlayerInfo[playerid][pWeapons][3], PlayerInfo[playerid][pAmmo][3],
		PlayerInfo[playerid][pWeapons][4], PlayerInfo[playerid][pAmmo][4],
		PlayerInfo[playerid][pWeapons][5], PlayerInfo[playerid][pAmmo][5],
		PlayerInfo[playerid][pWeapons][6], PlayerInfo[playerid][pAmmo][6],
		PlayerInfo[playerid][pWeapons][7], PlayerInfo[playerid][pAmmo][7],
		PlayerInfo[playerid][pWeapons][8], PlayerInfo[playerid][pAmmo][8],
		PlayerInfo[playerid][pWeapons][9], PlayerInfo[playerid][pAmmo][9],
		PlayerInfo[playerid][pWeapons][10], PlayerInfo[playerid][pAmmo][10],
		PlayerInfo[playerid][pWeapons][11], PlayerInfo[playerid][pAmmo][11]);

		pTemp[playerid][pPayphone] = -1;
		pTemp[playerid][pPayphoneNumStr] = EOS;

		pTemp[playerid][pCallLine] = INVALID_PLAYER_ID;
		pTemp[playerid][pCallStatus] = 0;
		pTemp[playerid][pCallIncoming] = 0;
		pTemp[playerid][pCallTime] = 0;
		format(pTemp[playerid][pCallName], 25, "");

		for(new i; i<6; i++) pTemp[playerid][editPos][i] = 0.0;

		LoadPlayerAttach(playerid);
		LoadPlayerMusic(playerid);
		LoadPlayerNotes(playerid);
		LoadPlayerContacts(playerid);
		LoadPlayerInventory(playerid);
		LoadPlayerMarks(playerid);

		LoadPayPhoneBtnTD(playerid);
		LoadNumPayPhoneTD(playerid);
		CreateVehicleMenu(playerid);
		GiveAdminRights(playerid);

		SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);

		foreach(new i:Vehicle)
		{
		    if (VehicleInfo[i][carOwnerID] == PlayerInfo[playerid][pID])
			{
            	PlayerInfo[playerid][pCarKey] = i;
            	VehicleInfo[i][carOwnerPlayer] = playerid;
            }
			else if (VehicleInfo[i][carRent] == PlayerInfo[playerid][pID])
			{
				if (VehicleInfo[i][carType] > 5 && VehicleInfo[i][carType] < 10) {
					pTemp[playerid][pJob] = 1;
					pTemp[playerid][pJobTime] = gettime();
				}

			    pTemp[playerid][pRentveh] = i;
			    VehicleInfo[i][carTerminate] = 0;
			}
		}

		ResetLoginScreenVariables(playerid);
		ToggleCharacterSelectionScreen(playerid, false);
        ClearChatbox(playerid, 50);
		new gametext[48];

		format(gametext, sizeof(gametext), "~w~hos geldiniz ~n~~h~~y~   %s", GetNameEx(playerid));
		GameTextForPlayer(playerid, gametext, 2500, 1);
		SetPlayerColor(playerid, TEAM_HIT_COLOR);

		if(IsPlayerAndroid(playerid))
	    {
	        SendServerMessage(playerid, "SAMP istemcinin MOBIL tabanli oldugu tespit edildi.");
	    }
	    else
		{
		    SendServerMessage(playerid, "SAMP istemcinin PC tabanli oldugu tespit edildi.");
		}

		if(PlayerInfo[playerid][pTaxiLic] == 0) PlayerInfo[playerid][pTaxiLic] = 1;
		if(PlayerInfo[playerid][pCarLic] == 0) PlayerInfo[playerid][pCarLic] = 1;

		Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 2000, playerid);
		Streamer_SetRadiusMultiplier(STREAMER_TYPE_OBJECT, 5.0, playerid);

		SendServerMessage(playerid, "Sunucuya hoþ geldin, {c7c3c3}%s!", GetNameEx(playerid));
		SendServerMessage(playerid, "Ýhtiyacýn olursa: {c7c3c3}/soru, /yardim, /menu");
		SendServerMessage(playerid, "Harita ayarlarý için: {c7c3c3}/ayarlar -> Harita");

		SetTimerEx("PingKontrol", 100000, true, "d", playerid);
		SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);

        SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pWorld]);

		TogglePlayerSpectating(playerid, false);

		if (PlayerInfo[playerid][pProbation])
		{
			new baslik2[1203], string[1203];
 	        SendAdmMessage("ADM: %s Sunucuya giriþ yaptý (Probationda)", GetNameEx(playerid));
			SendClientMessage(playerid, COLOR_ORANGE, "PROBATÝON: {F5F5F5}Sunucuda þartlý tahliye sürecindesiniz, sunucuda oynarken hareketlerinize dikkat etmelisiniz!");
		    format(baslik2, sizeof baslik2, "{ffffff}Probation Bilgilendirme - %s", GetNameEx(playerid));
			format(string,sizeof(string),"{FFFFFF}Merhabalar {898989}%s!\n{d6d6d6}Probation dahilinde kullanamayacaðýn sunucu özellikleri aþþaðýda yer almaktadýr: \n\n{b51414}[+] {d6d6d6}Probationda araç kullanamazsýnýz\n{b51414}[+] {d6d6d6}Probationda zarar verici silahlar/eþyalar kullanamazsýnýz\n{b51414}[+] {d6d6d6}Probationda banka hizmetlerinden yararlanamazsýnýz.\n{b51414}[+] {d6d6d6}Probationda mekanik ve benzeri illegal meslekleri yapamazsýnýz\n\n{d6d6d6}Sunucuda probation sürecinde olduðunuzu unutmayýn.",GetNameEx(playerid));
			ShowPlayerDialog(playerid,22140,DIALOG_STYLE_MSGBOX,baslik2,string,"Tamam","");
	        ClearAnimations(playerid);
			return 1;
		}

		if (PlayerInfo[playerid][pInjured])
		{
			if (PlayerInfo[playerid][pInjured] == 3) pTemp[playerid][pInjuredTime] = 120;
			else									pTemp[playerid][pInjuredTime] = 60;
		}

		if (PlayerInfo[playerid][pAdmin] > 0)		SendServerMessage(playerid, "%i seviye Administrator olarak giriþ yaptýnýz. (/ah)", PlayerInfo[playerid][pAdmin]);
		else if (PlayerInfo[playerid][pHelper] > 0)	SendServerMessage(playerid, "%i seviye Tester olarak giriþ yaptýnýz. (/helperyardim)", PlayerInfo[playerid][pHelper]);

        PlayerTextDrawShow(playerid, Silah_Bilgi[playerid][MermiTD]);
		SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pWorld]);

		foreach(new i : Player)
		{
			if (!(PlayerInfo[i][pSettings] & togJoin))
			{
				if (IsAdminDuty(i))
				{
					SendClientMessageEx(i, COLOR_GRAD2, "*** %s (ID: %i) sunucuya giriþ yaptý (IP: %s, nakit: $%s, banka: $%s)", GetNameEx(playerid),playerid, q_GetPlayerIP(playerid), FormatNumber(PlayerInfo[playerid][pCash]), FormatNumber(PlayerInfo[playerid][pBank]));
				}
			}
		}

	    if (PlayerInfo[playerid][pOnDuty] && PlayerInfo[playerid][pFaction] && IsFactionLegal(PlayerInfo[playerid][pFaction]))
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "{%06x}[%s]{FFFFFF} Tekrar iþbaþýna döndünüz. %s", Factions[PlayerInfo[playerid][pFaction]][fColor] >>> 8, Factions[PlayerInfo[playerid][pFaction]][fShortName], IsFactionPolice(PlayerInfo[playerid][pFaction]) ? " (Durum: 10-7 ÝÞBAÞI)" : "");
			if(IsFactionPolice(PlayerInfo[playerid][pFaction])) pTemp[playerid][tempStatus] = 1;
		}

        PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);

		new count = CountPlayerTickets(playerid);
		if (count)	SendSyntaxMessage(playerid, "Ödenmemiþ %i adet cezanýz var.", count);

		if (!PlayerInfo[playerid][pNumber])	{
			SetPlayerNumber(playerid);
		}

		SQL_SetInteger("users", "last_login", gettime(), PlayerInfo[playerid][pID]);
		SQL_SetString("users", "last_ip", q_GetPlayerIP(playerid), PlayerInfo[playerid][pID]);

		pTemp[playerid][pSpawned] = 1;

		if (PlayerInfo[playerid][pHours] < 8) SendHelpMessage(playerid, "8 oyun saatine ulaþtýðýnýzda $%i bonus kazanacaksýnýz.", SERVER_BONUS);

		SetCash(playerid, PlayerInfo[playerid][pCash]);

		if(PlayerInfo[playerid][pKelepceli] == 1) {
			PlayerInfo[playerid][pKelepceli] = 1;
			SetPlayerAttachedObject(playerid, ATTACH_HANDS, 19418,6,0.003999,0.028000,-0.018000,-12.900005,0.000000,-65.100006,0.878000,1.890999,1.652001);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
			FreezePlayer(playerid);
			SendServerMessage(playerid, "Suncudan çýkmadan önce kelepçelenmiþsiniz, bilekleriniz tekrardan kelepçelendi.");
		}

		//pTemp[playerid][pLogged] = 2;


		pTemp[playerid][pLogged] = 2;

		//SetSpawnInfoEx(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
		SetPlayerPosEx(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);

		//SpawnPlayer(playerid);

	}
	else
	{
	    SendErrorMessage(playerid, "Karakter verileriniz alýnýrken bir hata oluþtu. Forum üzerinden ticket açýn.");
	    KickEx(playerid);
	}
	return 1;
}

this::PingKontrol(playerid)
{
	new pingkontrol[80];
	format(pingkontrol, sizeof(pingkontrol), "Ping: %d / Packetloss: %.2f", GetPlayerPing(playerid), NetStats_PacketLossPercent(playerid));

    if(GetPlayerPing(playerid) > 600) {
   	SendClientMessageEx(playerid, COLOR_TOMATO, "UYARI: {f5f5f5}Baðlantýnýzda bir sorun bulunuyor! (%s)", pingkontrol); }
    return 1;
}

this::OnAccountCheck(playerid)
{
    if (IsPlayerNPC(playerid))	return 1;

	if (!cache_num_rows())
	{
		SendErrorMessage(playerid, "Üzgünüz, veritabaný kontrol edildi ve hesabýnýz bulunamadý.");
		SendServerMessage(playerid, "Kayýtlar forum adresi üzerinde bulunan UCP kýsmýndan yapýlmaktadýr.");
		SendServerMessage(playerid, "UCP bölümüne eriþmek için: "WeburlName"");
		KickEx(playerid);
	    return 1;
	}

	new last_ip[24];

	cache_get_value_int(0, "forum_id", PlayerInfo[playerid][pAccID]);

	cache_get_value(0, "login", PlayerInfo[playerid][pAccname], MAX_PLAYER_NAME+1);

	cache_get_value_int(0, "talepsayi", PlayerInfo[playerid][pTalepSayi]);
	cache_get_value_int(0, "raporsayi", PlayerInfo[playerid][pRaporSayi]);

	cache_get_value(0, "last_game_ip", last_ip);

	if(IsPlayerLoggedIn(GetPlayerIDByAccountSqlID(PlayerInfo[playerid][pAccID])))
		return KickLine(playerid, "Bu karakterin baðlý olduðu hesap zaten oyunda olduðu için uzaklaþtýrýlýyorsunuz.");

	new query[170], sub[8];

	SM1(playerid, "OnAccountCheck+");

	GetPlayerIp(playerid, sub, sizeof(sub));

	new pos;

	for(new i; i < 2; i++)
	{
	    pos = strfind(sub, ".", true, pos+1);
	}

	if (pos != -1) strdel(sub, pos, 24);


	new pip[24];

    GetPlayerIp(playerid, pip, sizeof(pip));

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `bans` WHERE `name` = '%e' OR `ip`='%s' OR `ip`='%s'", PlayerInfo[playerid][pAccname], sub, pip);
	mysql_tquery(dbHandle, query, "OnPlayerAttemptLogin", "is", playerid, last_ip);
	return 1;
}

this::LoginPlayer(playerid)
{
	if (cache_num_rows() == 0)
	{
    	if (pTemp[playerid][pLoggedTry]++ == 3) return KickEx(playerid);

		static const str_size[] = "{c7c3c3}LOSWORLD:\t{FFFFFF}Giriþ yapmak için 5 dakikanýz var.\n\
								   {c7c3c3}ÝPUCU:\t\t{FFFFFF}Hesap þifrenizi UCP'den deðiþtirebilirsiniz.\n\
								   \t\tForum: {c7c3c3}"WeburlName"\n\
								   \t\t{FFFFFF}Forum üzerinden UCP bölümüne eriþebilirsin\n\n\
								   Þifrenizi girin:";
		new mes[sizeof(str_size)+103];

		format(mes, sizeof(mes), "{FF6347}[ ! ] {FFFFFF}Yanlýþ þifre girdiniz!\n{FF6347}[ ! ] {FFFFFF}Kalan deneme sayýsý: {FF6347}%d\n\n%s", 3-pTemp[playerid][pLoggedTry], str_size);
		Dialog_Show(playerid, Login, DIALOG_STYLE_PASSWORD, ""ProjectName"", mes, "Giriþ Yap", "Ýptal");
		SendWarningMessage(playerid, "Yanlýþ þifre girdiniz.");
		return 1;
	}

    pTemp[playerid][pLoggedTime] = 0;

	new query[256];

	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `loginlog` (accountid, ip, method, date) VALUES (%i, '%e', 'Giris', '%e')", PlayerInfo[playerid][pAccID], q_GetPlayerIP(playerid), GetFullDate());
	mysql_tquery(dbHandle, query);
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `last_game_ip` = '%e', `last_game_login` = '%e' WHERE `forum_id` = %i", q_GetPlayerIP(playerid), GetFullDate(), PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);

	ShowCharacterMenu(playerid);
	return 1;
}

this::SearchCharacters(playerid)
{
	mysql_tquery(dbHandle, sprintf("SELECT id FROM users WHERE accountid = '%d' AND (status = 1 or status = 2)", PlayerInfo[playerid][pAccID]), "OnPlayerCharactersLoaded", "d", playerid);
	//Dialog_Show(playerid, SelectChar, DIALOG_STYLE_TABLIST_HEADERS, "Karakter seçimi:", mes, "Seç", "Ýptal");
	return 1;
}

this::OnPlayerCharactersLoaded(playerid)
{
    new rows = cache_num_rows();

    if(rows)
    {
        CharacterSelection[playerid][sCharactersCount] = rows;

        LoginScreenDisplayCharacter(playerid, 1, 1);
    }

    else {
	SendWarningMessage(playerid, "Aktif bir karakteriniz olmadýðý için sunucudan atýldýnýz!");
	KickEx(playerid);
	}
    return 1;
}

this::OnPlayerAttemptLogin(playerid, last_ip[])
{
	if (cache_num_rows() != 0) {
		new reason[64], ip[24], date[24], name[24], admin[MAX_PLAYER_NAME], time;

		cache_get_value(0, "reason", reason);
		cache_get_value(0, "date", date);
		cache_get_value(0, "ip", ip);
		cache_get_value(0, "admin", admin);
		cache_get_value(0, "name", name);

		cache_get_value_int(0, "time", time);

		if (gettime() < time)
		{
			new mes[512];
			if (CompareStrings(ip, "-") != 0)
			{
				format(mes, sizeof(mes), "{FFFFFF}Hesabýnýz bir yönetici tarafýndan yasaklanmýþ: {B5B5B5}%s.\n{FFFFFF}Yasaklanma tarihi: {B5B5B5}%s\n{FFFFFF}Sebep: {B5B5B5}%s\n\nHatalý yasaklanma için lütfen forumdan ticket açýn.\n\
				Çýkýþ yapmak için /q", admin, date, reason);
			}
			else
			{
				format(mes, sizeof(mes), "{FFFFFF}IP adresiniz (%s) yönetici tarafýndan yasaklanmýþ: {B5B5B5}%s.\n{FFFFFF}Yasaklanma tarihi: {B5B5B5}%s\n{FFFFFF}Sebep: {B5B5B5}%s\n\nHatalý yasaklanma için lütfen forumdan ticket açýn.\n\
				Çýkýþ yapmak için /q", ip, admin, date, reason);
			}

			Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "Yasaklý Oyuncu", mes, "/q", "");
			KickEx(playerid);
			return 1;
		}
		else
		{
			new query[256];
			mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `bans` WHERE `name` = '%e'", name);
			mysql_tquery(dbHandle, query);
		}
	}

	new ip[24];

	GetPlayerIp(playerid, ip, sizeof(ip));

	pTemp[playerid][pLogged] = 1;
	ClearChatbox(playerid, 50);
	SendServerMessage(playerid,"Oyun servisi sürümü: {c7c3c3}"GameModeVersion"");
	SendServerMessage(playerid,"Son güncelleme: {c7c3c3}"GameModeUpdate"");

	static const str_size[] = "{c7c3c3}LOSWORLD:\t{FFFFFF}Giriþ yapmak için 5 dakikanýz var.\n\
								   {c7c3c3}ÝPUCU:\t\t{FFFFFF}Hesap þifrenizi ucpden deðiþtirebilirsiniz.\n\
								   \t\t{FFFFFF}Websitesi üzerinden UCP bölümüne eriþebilirsin\n\n\
								   Þifrenizi girin:";

	new mes[sizeof(str_size)];

	format(mes, sizeof(mes), str_size);
	Dialog_Show(playerid, Login, DIALOG_STYLE_PASSWORD, "A new role series!", mes, "Giriþ Yap", "Ýptal");
	return 1;
}

ShowCharacterMenu(playerid)
{
    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `accountid` = %i AND (status = 1 or status = 2)", PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query, "SearchCharacters", "i", playerid);
	return 1;
}

SetPlayerSpawn(playerid)
{
	if (IsPlayerNPC(playerid)) return 1;

    TogglePlayerSpectating(playerid, 0);

    if (pTemp[playerid][pLastLogin] == 0)
	{
		new first_login = randomEx(1,3);

		switch(first_login)
		{
			case 1:
			{
                SetWorld(playerid, 0);
				SetInterior(playerid, 0);
				SetPlayerPosEx(playerid,1127.9866,-1452.7633,15.7969);
			}
			case 2:
			{
                SetWorld(playerid, 0);
				SetInterior(playerid, 0);
				SetPlayerPosEx(playerid,1127.9866,-1452.7633,15.7969);
			}
			case 3:
			{
                SetWorld(playerid, 0);
				SetInterior(playerid, 0);
				SetPlayerPosEx(playerid,1127.9866,-1452.7633,15.7969);
			}
		}
		SendServerMessage(playerid, "%d numaralý spawn bölgesine gönderildiniz.", first_login);
		pTemp[playerid][pLastLogin] = gettime();
		return 1;
	}

	if (pTemp[playerid][pSpecPlayer] != INVALID_PLAYER_ID)
	{
	    pTemp[playerid][pSpecPlayer] = INVALID_PLAYER_ID;
		SetInterior(playerid,PlayerInfo[playerid][pInt]);
		SetWorld(playerid, PlayerInfo[playerid][pWorld]);
		SetPlayerPosEx(playerid,PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
		PlayerTextDrawHide(playerid, spectate_TD[playerid][0]);
		PlayerTextDrawHide(playerid, spectate_TD[playerid][1]);
		return 1;
	}

    else if (pTemp[playerid][pCCTV])
	{
	    pTemp[playerid][pCCTV] = 0;
        DeletePVar(playerid, "CCTV:ID");

		SetInterior(playerid,PlayerInfo[playerid][pInt]);
		SetWorld(playerid, PlayerInfo[playerid][pWorld]);
		SetPlayerPosEx(playerid,PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
	    return 1;
	}

	else if (pTemp[playerid][pInteriorBiz])
	{
	    new bizid = pTemp[playerid][pInteriorBiz]-1;

		SetPlayerPosEx(playerid,BizInfo[bizid][bizExitX], BizInfo[bizid][bizExitY], BizInfo[bizid][bizExitZ]);
		SetInterior(playerid,BizInfo[bizid][bizExitInt]);
		SetWorld(playerid,BizInfo[bizid][bizExitVW]);

        pTemp[playerid][pInteriorBiz] = 0;
        pTemp[playerid][pInteriorID] = 0;
        pTemp[playerid][pInteriorHouse] = 0;
	    return 1;
	}

	else if (pTemp[playerid][pZond])
	{
	    pTemp[playerid][pZond] = 0;
		SetInterior(playerid,PlayerInfo[playerid][pInt]);
		SetWorld(playerid, PlayerInfo[playerid][pWorld]);
		SetPlayerPosEx(playerid,PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
	    return 1;
	}

	// ï¿½ï¿½ï¿½ï¿½ ï¿½ ï¿½ï¿½ï¿½ï¿½

	if (PlayerInfo[playerid][pAJailed] != 0)
	{
		SetInterior(playerid, 18);
		SetWorld(playerid, playerid + 100);
		SetPlayerPosEx(playerid, 1017.3297,-807.2664,2003.0758);
		SendSyntaxMessage(playerid, "OOC hapis cezasýna geri döndünüz. Kalan süre: %i dakika", PlayerInfo[playerid][pAJailTime]/60);
		return 1;
	}
	else if (PlayerInfo[playerid][pJailed]) return PutPlayerInPrison(playerid);

	//SPAWN TYPES
	/*if (PlayerInfo[playerid][pInjured] || GetPVarInt(playerid, #last_login) || PlayerInfo[playerid][pSpawnType] == 3)
	{*/

	if (pTemp[playerid][pLastLogin] != 0)
	{
	    SetPlayerPosEx(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	    SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
	    SetInterior(playerid, PlayerInfo[playerid][pInt]);
	    SetWorld(playerid, PlayerInfo[playerid][pWorld]);
	}

	/*	DeletePVar(playerid, #last_login);
		return 1;
	}

	else if (PlayerInfo[playerid][pSpawnType] == 1)
	{
	    new houseid = GetHouseIDByMysql(PlayerInfo[playerid][pSpawnPoint]);
	    if (houseid == -1 || (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID] && PlayerInfo[playerid][pRentKey] != PlayerInfo[playerid][pSpawnPoint]))
		{
			SendSyntaxMessage(playerid, "Evinizin kira süresi bitti veya anahtarý sizden alýndý. ");
			PlayerInfo[playerid][pSpawnType] = 0;
			PlayerInfo[playerid][pSpawnPoint] = 1;
			SendHelpMessage(playerid, "Spawn lokasyonunuz tekrardan deðiþtirildi. (/settings)");
		}
		else
		{
			SetPlayerPos(playerid, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY],HouseInfo[houseid][hExitZ]);
			SetInterior(playerid,HouseInfo[houseid][hExitInt]);
			SetWorld(playerid,HouseInfo[houseid][hExitVW]);
			pTemp[playerid][pHouseEntered] = houseid;
			return 1;
		}
	}

	else if (PlayerInfo[playerid][pSpawnType] == 2)
	{
		if (PlayerInfo[playerid][pFaction] == 0)
		{
			SendSyntaxMessage(playerid, "Artýk herhangi bir birlikte deðilsiniz.");
			PlayerInfo[playerid][pSpawnType] = 0;
			PlayerInfo[playerid][pSpawnPoint] = 1;
			SendHelpMessage(playerid, "Spawn lokasyonunuz tekrardan deðiþtirildi. (/settings)");
		}
		else
		{
			SetPlayerPos(playerid,Factions[PlayerInfo[playerid][pFaction]][fPosX],Factions[PlayerInfo[playerid][pFaction]][fPosY],Factions[PlayerInfo[playerid][pFaction]][fPosZ]);
			SetInterior(playerid, Factions[PlayerInfo[playerid][pFaction]][fSpawnInt]);
			SetWorld(playerid, Factions[PlayerInfo[playerid][pFaction]][fSpawnVW]);
			return 1;
		}
	}

	else if (PlayerInfo[playerid][pSpawnType] == 0)
	{
	   	SetPlayerPos(playerid, first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][0], first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][1], first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][2]);
	    SetPlayerFacingAngle(playerid, first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][3]);
		SetInterior(playerid,0);
		SetWorld(playerid, 0);
		return 1;
	}*/
	return 1;
}

stock RPnamecheck(pname[])
{
	if(strfind(pname,"[",true) != (-1)) return 0;
    else if(strfind(pname,"]",true) != (-1)) return 0;
    else if(strfind(pname,"$",true) != (-1)) return 0;
    else if(strfind(pname,"(",true) != (-1)) return 0;
    else if(strfind(pname,")",true) != (-1)) return 0;
    else if(strfind(pname,"=",true) != (-1)) return 0;
    else if(strfind(pname,"@",true) != (-1)) return 0;
    else if(strfind(pname,"1",true) != (-1)) return 0;
    else if(strfind(pname,"2",true) != (-1)) return 0;
    else if(strfind(pname,"3",true) != (-1)) return 0;
    else if(strfind(pname,"4",true) != (-1)) return 0;
    else if(strfind(pname,"5",true) != (-1)) return 0;
    else if(strfind(pname,"6",true) != (-1)) return 0;
    else if(strfind(pname,"7",true) != (-1)) return 0;
    else if(strfind(pname,"8",true) != (-1)) return 0;
    else if(strfind(pname,"9",true) != (-1)) return 0;
    else if(strfind(pname,"fuck",true) != (-1)) return 0;
    else if(strfind(pname,"FUCK",true) != (-1)) return 0;
    else if(strfind(pname,"Boobies",true) != (-1)) return 0;
    else if(strfind(pname,"Tupac_Shakur",true) != (-1)) return 0;
    else if(strfind(pname,"Pussy",true) != (-1)) return 0;
    else if(strfind(pname,"Rape",true) != (-1)) return 0;
    else if(strfind(pname,"kill",true) != (-1)) return 0;
    else if(strfind(pname,"shit",true) != (-1)) return 0;
    else if(strfind(pname,"ass",true) != (-1)) return 0;
    else if(strfind(pname,"Jack_Black",true) != (-1)) return 0;
    else if(strfind(pname,"Max_Kenton",true) != (-1)) return 0;
    else if(strfind(pname,"Will_Smith",true) != (-1)) return 0;
    else if(strfind(pname,"Jaden_Smith",true) != (-1)) return 0;
    else if(strfind(pname,"Megan_Fox",true) != (-1)) return 0;
    else if(strfind(pname,"Charlie_Kenton",true) != (-1)) return 0;
    else if(strfind(pname,"Hugh_Hefner",true) != (-1)) return 0;
    else if(strfind(pname,"Paris_Hilton",true) != (-1)) return 0;
    else if(strfind(pname,"Marshall_Mathers",true) != (-1)) return 0;
    else if(strfind(pname,"Sheldon_Cooper",true) != (-1)) return 0;
    else if(strfind(pname,"Jet_Lee",true) != (-1)) return 0;
    else if(strfind(pname,"Jackie_Chan",true) != (-1)) return 0;
    else if(strfind(pname,"Chuck_Norris",true) != (-1)) return 0;
    else if(strfind(pname,"Peter_Parker",true) != (-1)) return 0;
    else if(strfind(pname,"Spider_Man",true) != (-1)) return 0;
    else if(strfind(pname,"Bat_Man",true) != (-1)) return 0;
    else if(strfind(pname,"Emma_Stone",true) != (-1)) return 0;
    else if(strfind(pname,"whore",true) != (-1)) return 0;
    else if(strfind(pname,"Hugh_Jackman",true) != (-1)) return 0;
    else if(strfind(pname,"Charles_Kenton",true) != (-1)) return 0;
    else if(strfind(pname,"Harry_Potter",true) != (-1)) return 0;
    else if(strfind(pname,"Chris_Hemsworth",true) != (-1)) return 0;
    else if(strfind(pname,"Penis",true) != (-1)) return 0;
    else if(strfind(pname,"_Dick",true) != (-1)) return 0;
    else if(strfind(pname,"Vagina",true) != (-1)) return 0;
    else if(strfind(pname,"Cock",true) != (-1)) return 0;
    else if(strfind(pname,"Rectum",true) != (-1)) return 0;
    else if(strfind(pname,"Sperm",true) != (-1)) return 0;
    else if(strfind(pname,"Rektum",true) != (-1)) return 0;
    else if(strfind(pname,"Pistol",true) != (-1)) return 0;
    else if(strfind(pname,"AK47",true) != (-1)) return 0;
    else if(strfind(pname,"Shotgun",true) != (-1)) return 0;
    else if(strfind(pname,"Cum",true) != (-1)) return 0;
    else if(strfind(pname,"Hitler",true) != (-1)) return 0;
    else if(strfind(pname,"Jesus",true) != (-1)) return 0;
    else if(strfind(pname,"God",true) != (-1)) return 0;
    else if(strfind(pname,"Shotgun",true) != (-1)) return 0;
    else if(strfind(pname,"Desert_Eagle",true) != (-1)) return 0;
    else if(strfind(pname,"fucker",true) != (-1)) return 0;
    else if(strfind(pname,"Retard",true) != (-1)) return 0;
    else if(strfind(pname,"Tarded",true) != (-1)) return 0;
    else if(strfind(pname,"fanny",true) != (-1)) return 0;
    else if(strfind(pname,"Daniel_Hardy",true) != (-1)) return 0;
    else if(strfind(pname,"abcdefghijklmnopqrstuvwxyz",true) != (-1)) return 0;

    return 1;
}

this::KBDHava()
{
	new rastgelehava = randomEx(0, 18);
    SetWeather(rastgelehava);
	return 1;
}

stock LoginScreenDisplayCharacter(playerid, slot, isFirstLogin = 0)
{
    if(slot < 1)
        slot = 1;

    else if(slot > CharacterSelection[playerid][sCharactersCount])
        slot = CharacterSelection[playerid][sCharactersCount];

    if(slot != CharacterSelection[playerid][sCurrentSlotID])
    {
        new query[177 + (11 * 4) + 1];

        mysql_format(dbHandle, query, sizeof(query), "SELECT id, name, level, skin, world, pos_X, pos_Y, pos_Z FROM users WHERE accountid = '%d' AND (status = 1 or status = 2) LIMIT %d, %d", PlayerInfo[playerid][pAccID], slot-1, slot);
        mysql_tquery(dbHandle, query, "LoadCharacterDetailsOnSelection", "dd", playerid, isFirstLogin);

        PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][LoginCharacterTD][4], sprintf("%d/%d", slot, CharacterSelection[playerid][sCharactersCount]));

        CharacterSelection[playerid][sIsSelecting] = true;
        CharacterSelection[playerid][sCurrentSlotID] = slot;
    }
	//SendClientMessageEx(playerid, 0xFFFFFFFF, "%d, %d", GetPVarInt(playerid, PVAR_LISTCHARS_CDETAILS_CID), slot);

	SelectTextDraw(playerid, COLOUR_DANDELION);

	return 1;
}

this::LoadCharacterDetailsOnSelection(playerid, isFirstLogin)
{
	new rows = cache_num_rows();
	if(rows)
	{
		new id, name[MAX_PLAYER_NAME], level, skin, world, Float:x, Float:y, Float:z; //world
		cache_get_value_int(0, "id", id);
		cache_get_value(0, "name", name);
		cache_get_value_int(0, "level", level);
		cache_get_value_int(0, "skin", skin);
		//world = cache_get_field_content_int (0, "world");
		cache_get_value_float(0, "pos_X", x);
		cache_get_value_float(0, "pos_Y", y);
		cache_get_value_float(0, "pos_Z", z);
		cache_get_value_int(0, "world", world);

		SetPVarInt(playerid, PVAR_LISTCHARS_CDETAILS_CID, id);

		if(x != 0.0 && y != 0.0 && z != 0.0)
		{
			new location[128];

			if(world > 0) location = "Bir isyerinin Icinde";
			else format(location, sizeof(location), GetLocationZone(x, y, z));

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0], sprintf("~y~%s (Lvl: ~w~%d~y~)~n~%s ~w~bolgesinde.", name, level, location));
		}

		else PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0], sprintf("~y~%s (Lvl: ~w~%d~y~)~n~Ýsyeri ~w~icinde.", name, level));

		if(isFirstLogin)
		{
			ToggleCharacterSelectionScreen(playerid, true);
		}

		new actorid = CharacterSelection[playerid][sActorID];

		if(actorid != INVALID_ACTOR_ID)
		{
			DestroyDynamicActor(actorid);
		}

        SetPlayerVirtualWorld(playerid, playerid+100);
		actorid = CreateDynamicActor(skin, 2052.484863, 314.062805, 28.060256, 45.309787, 1, 100.0, playerid+100, 0);
		Streamer_Update(playerid);

		CharacterSelection[playerid][sActorID] = actorid;
	}

	else if(isFirstLogin && !rows)
	{
		SendErrorMessage(playerid, "Karakter detaylarý alýnýrken bir sorun meydana geldi. Sorun devam ederse yöneticilerle iletiþime geçiniz. (Hata kodu: #3)");
		//AdminWarn(DEV, sprintf("%s (ID: %d / Hesap: %d) - (LoadCharacterDetailsOnSelection) hatasý aldý. (#3)", GetName(playerid, 0), playerid, PlayerInfo[playerid][pID]));
	}

	else
	{
		SendErrorMessage(playerid, "Karakter detaylarý alýnýrken bir sorun meydana geldi. Sorun devam ederse yöneticilerle iletiþime geçiniz. (Hata kodu: #4)");
		//AdminWarn(DEV, sprintf("%s (ID: %d / Hesap: %d) - (LoadCharacterDetailsOnSelection) hatasý aldý. (#4)", GetName(playerid, 0), playerid, PlayerInfo[playerid][pID]));
	}

	return 1;
}

stock ToggleCharacterSelectionScreen(playerid, bool:status)
{
    switch(status)
    {
        case false:
        {
            for(new i = 0; i < 5; i++)
            {
			    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][LoginCharacterTD][i]);
            }

            ResetLoginScreenVariables(playerid);

            ClearChatbox(playerid, 20);
            CancelSelectTextDraw(playerid);
        }

        case true:
        {
            SendClientMessageEx(playerid, COLOUR_ALTO, "Ýmleci aktifleþtirmek için: /fare veya /imlec");

            for(new i = 0; i < 5; i++)
            {
			    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][LoginCharacterTD][i]);
            }

           InterpolateCameraPos(playerid, 2046.470947, 319.177612, 29.770351, 2048.602050, 317.058471, 29.052431, 2000);
           InterpolateCameraLookAt(playerid, 2049.919433, 315.748596, 28.608667, 2052.050537, 313.629455, 27.890747, 2000);

            SyncCharacterSelectionButtons(playerid);
        }
    }

    return 1;
}

stock ResetLoginScreenVariables(playerid)
{
    CharacterSelection[playerid][sIsSelecting] = false;
    CharacterSelection[playerid][sCurrentSlotID] = 0;
    CharacterSelection[playerid][sCharactersCount] = 0;

	DeletePVar(playerid, PVAR_LISTCHARS_CDETAILS_CID);

    new actorid = CharacterSelection[playerid][sActorID];

    if(IsValidDynamicActor(actorid))
    {
        DestroyDynamicActor(actorid);
    }

    CharacterSelection[playerid][sActorID] = INVALID_ACTOR_ID;

    return 1;
}

stock SyncCharacterSelectionButtons(playerid)
{
	if(CharacterSelection[playerid][sCurrentSlotID] <= 1)
	{
		PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], false);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], sprintf("~w~Geri"));
	}

	else
	{
		PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], true);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2], sprintf("Geri"));
	}

	if(CharacterSelection[playerid][sCurrentSlotID] >= CharacterSelection[playerid][sCharactersCount])
	{
		PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], false);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], sprintf("~w~Ileri"));
	}

	else
	{
		PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], true);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3], sprintf("Ileri"));
	}

    return 1;
}

stock CustomizeCharacter(playerid, step)
{
    if(step == CUSTOMIZATION_SKIN)
    {
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][LoginCharacterTD][1]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3]);
    }

    else
    {
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][LoginCharacterTD][0]);
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][LoginCharacterTD][1]);
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][LoginCharacterTD][2]);
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][LoginCharacterTD][3]);
    }

    switch(step)
    {
        // case CUSTOMIZATION_BACK: DisplayCharacterList(playerid);
        case CUSTOMIZATION_AGE: Dialog_Show(playerid, CustomizationAge, DIALOG_STYLE_INPUT, "Yaþ Seçimi", EMBED_WHITE "Karakteriniz için lütfen yaþ belirleyiniz.\n" DIALOG_EX "17 - 98", "Ýleri", "Geri");
        case CUSTOMIZATION_GENDER: Dialog_Show(playerid, CustomizationGender, DIALOG_STYLE_LIST, "Cinsiyet Seçimi", EMBED_WHITE "Karakteriniz için lütfen cinsiyet belirleyiniz.\n" EMBED_BLACK ".\nErkek\nKadýn\n", "Ýleri", "Geri");
        case CUSTOMIZATION_RACE: Dialog_Show(playerid, CustomizationRace, DIALOG_STYLE_LIST, "Ten Rengi Seçimi", EMBED_WHITE "Karakteriniz için lütfen ten rengi belirleyiniz.\n" EMBED_BLACK ".\nBeyaz\nSiyah\n", "Ýleri", "Geri");
        case CUSTOMIZATION_ORIGIN: mysql_tquery(dbHandle, "SELECT origin FROM origins", "CustomizationOrigin", "d", playerid);
        case CUSTOMIZATION_SKIN: mysql_tquery(dbHandle, GetSkin("game_skins.model_id, game_skins.price", "", "", 1, -1, -1, -1, PlayerInfo[playerid][pSex], PlayerInfo[playerid][pRace]), "CustomizationSkin", "d", playerid);
        case CUSTOMIZATION_VERIFY: Dialog_Show(playerid, CustomizationVerify, DIALOG_STYLE_LIST, "Özelleþtirme Onaylamasý", EMBED_WHITE "Karakter detaylarýný belirlediniz. Þimdi onu kaydetmek ister misiniz?\n" EMBED_BLACK ".\n" EMBED_PASTELGREEN "Evet, devam et.\n" EMBED_TOMATO "Hayýr, geri dön.", "Ýleri", "Geri");
        // case CUSTOMIZATION_DONE: DisplayCharacterList(playerid);
    }

    return 1;
}

stock LoadCharacterSkinPrices(playerid)
{
	if (PlayerInfo[playerid][pSex] == 1)
    {
        new mes[sizeof(male_skins)*16];
        for(new i = 0; i < sizeof(male_skins); i++)
        {
            format(mes, sizeof(mes), "%s%i\tID: %i\n", mes, male_skins[i], male_skins[i]);
        }
        Dialog_Show(playerid, CustomizationSkin, DIALOG_STYLE_PREVIEW_MODEL, "Kiyafet Secimi", mes, "Sec", "Ýptal");
    }
    else
    {
        new mes[sizeof(female_skins)*16];
        for(new i = 0; i < sizeof(female_skins); i++)
        {
            format(mes, sizeof(mes), "%s%i\tID: %i\n", mes, female_skins[i], female_skins[i]);
        }
        Dialog_Show(playerid, CustomizationSkin, DIALOG_STYLE_PREVIEW_MODEL, "Kiyafet Secimi", mes, "Sec", "Ýptal");
	}
}

stock GetOriginID(name[])
{
    new sqlid = 0, query[43 + MAX_PLAYER_NAME + 1], Cache:search;

    mysql_format(dbHandle, query, sizeof(query), "SELECT id FROM origins WHERE origin = '%e'", name);
    search = mysql_query(dbHandle, query);

    if(cache_num_rows())
    {
        cache_get_value_int(0, "id", sqlid);
    }

    cache_delete(search);
	search = MYSQL_INVALID_CACHE;
    return sqlid;
}

stock GiveAdminRights(playerid)
{
    new admin = 0, helper = 0, helperlead = 0, fmadmin = 0, mapper = 0, rdscripter = 0, probationer = 0, probationsure = 0, query[86 + MAX_PLAYER_NAME + 1], Cache:search;

    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM accounts WHERE forum_id = '%d'", PlayerInfo[playerid][pAccID]);
    search = mysql_query(dbHandle, query);

    if(cache_num_rows())
    {
        cache_get_value_int(0, "admin", admin);
		cache_get_value_int(0, "helper", helper);
		cache_get_value_int(0, "helperlead", helperlead);
		cache_get_value_int(0, "fmadmin", fmadmin);
		cache_get_value_int(0, "mapper", mapper);
		cache_get_value_int(0, "rdscripter", rdscripter);
		cache_get_value_int(0, "probation", probationer);
		cache_get_value_int(0, "probationsure", probationsure);
    }

    PlayerInfo[playerid][pAdmin] = admin;
	PlayerInfo[playerid][pHelper] = helper;
	PlayerInfo[playerid][pHelperLead] = helperlead;
	PlayerInfo[playerid][pFMAdmin] = fmadmin;
	PlayerInfo[playerid][pMapper] = mapper;
	PlayerInfo[playerid][pRdscripter] = rdscripter;

	PlayerInfo[playerid][pProbation] = probationer;
	PlayerInfo[playerid][pProbationSure] = probationsure;

	cache_delete(search);
	search = MYSQL_INVALID_CACHE;
    return 1;
}

stock GetAccountByName(name[])
{
    new query[256], Cache:search, accountid = -1;

    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM users WHERE name = '%e'", name);
    search = mysql_query(dbHandle, query);

    if(cache_num_rows())
    {
        cache_get_value_int(0, "accountid", accountid);
    }

    cache_delete(search);
	search = MYSQL_INVALID_CACHE;
    return accountid;
}

this::CustomizationSkin(playerid)
{
    new rows = cache_num_rows();

    if(rows)
    {
        new str[512], skin_id;

        for(new i = 0; i < rows; i++)
        {
            cache_get_value_int(i, "model_id", skin_id);

            format(str, sizeof(str), "%s%d\n", str, skin_id);
        }

        Dialog_Show(playerid, CustomizationSkinSelect, DIALOG_STYLE_PREVIEW_MODEL, "Kiyafetler", str, "Satin Al", "Kapat");

    }

    else CustomizeCharacter(playerid, CUSTOMIZATION_SKIN + 1);

    return 1;
}

this::CustomizationOrigin(playerid)
{
    new rows = cache_num_rows();

    if(rows)
    {
        new str[1024];
        new origin[90];

        for(new i = 0; i < rows; i++)
        {
            cache_get_value(i, "origin", origin, 90);

            if(!(i % 2))
                format(str, sizeof(str), "%s" EMBED_ALTO "%s\n", str, origin);

            else format(str, sizeof(str), "%s" EMBED_WHITE "%s\n", str, origin);
        }

        Dialog_Show(playerid, CustomizationOrigin, DIALOG_STYLE_LIST, "Uyruklar", str, "Ýleri", "Geri");
    }

    else CustomizeCharacter(playerid, CUSTOMIZATION_ORIGIN + 1);

    return 1;
}

this::CharacterOriginSelected(playerid, origin[])
{
    new rows = cache_num_rows();

    if(rows)
    {
        mysql_tquery(dbHandle, sprintf("UPDATE users SET origin = '%d' WHERE id = '%d'", GetOriginID(origin), GetPVarInt(playerid, PVAR_LISTCHARS_CDETAILS_CID)));
        PlayerInfo[playerid][pOrigin] = GetOriginID(origin);

        SM1(playerid, "Uyruðunuz %s olarak belirlendi.", origin);
        CustomizeCharacter(playerid, CUSTOMIZATION_ORIGIN + 1);
    }

    else CustomizeCharacter(playerid, CUSTOMIZATION_ORIGIN + 1);

    return 1;
}

this::FixHealthArm(playerid)
{
	PlayerInfo[playerid][pHealth] = GetSQLHealth(playerid);
	SetPlayerHealth(playerid, GetSQLHealth(playerid));
	PlayerInfo[playerid][pArmour] = GetSQLArmor(playerid);
	SetPlayerArmour(playerid, GetSQLArmor(playerid));
	return 1;
}
Dialog:AccountRegister(playerid, response, listitem, inputtext[])
{
	if(!response)	KickEx(playerid);
	ClearChatbox(playerid, 50);

	if(isnull(inputtext) || strlen(inputtext) > 24 || strlen(inputtext) < 5) {
		Dialog_Show(playerid, AccountRegister, DIALOG_STYLE_INPUT, "Hesap kaydý", "Ýstediðiniz kullanýcý adýný girin (24 karakter):\n{C7C7C7}Örnek: {FFFFFF}matta", ">>>", "");
		return SendErrorMessage(playerid, "Hesap adýnýn uzunluðu 5 ile 24 karakter arasýnda olmalýdýr!");
	}

	if(strfind(inputtext, "/") != -1 || strfind(inputtext, "\\") != -1 ||
		strfind(inputtext, ":") != -1 || strfind(inputtext, "*") != -1 ||
		strfind(inputtext, "?") != -1 || strfind(inputtext, "\"") != -1 ||
		strfind(inputtext, "<") != -1 || strfind(inputtext, ">") != -1 ||
		strfind(inputtext, "|") != -1 || isnull(inputtext) || strfind(inputtext, " ") != -1)	{

		Dialog_Show(playerid, AccountRegister, DIALOG_STYLE_INPUT, "Hesap kaydý", "Ýstediðiniz kullanýcý adýný girin (24 karakter):\n{C7C7C7}Örnek: {FFFFFF}matta", ">>>", "");
		return SendErrorMessage(playerid, "Hesap adýnda geçersiz karakterler var!");
	}

	SetPVarString(playerid, #AccountName, inputtext);

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `accounts` WHERE `login` = '%e'", inputtext);
	mysql_tquery(dbHandle, query, "CheckAccName", "i", playerid);
	return 1;
}

this::CheckAccName(playerid)
{
	if(cache_num_rows()) {
		SendErrorMessage(playerid, "Bu kullanýcý adý kullanýlýyor!");
		Dialog_Show(playerid, AccountRegister, DIALOG_STYLE_INPUT, "Hesap kaydý", "Ýstediðiniz kullanýcý adýný girin (24 karakter):\n{C7C7C7}Örnek: {FFFFFF}matta", ">>>", "");
		return 1;
	}

	ClearChatbox(playerid, 50);
	SendServerMessage(playerid, "Geçerli bir eposta adresi giriniz.");
	Dialog_Show(playerid, EmailRegister, DIALOG_STYLE_INPUT, "Hesap kaydý", "E-posta:", ">>>", "");
	return 1;
}

Dialog:EmailRegister(playerid, response, listitem, inputtext[])
{
	if(!response)	KickEx(playerid);
	ClearChatbox(playerid, 50);

	SetPVarString(playerid, #EmailName, inputtext);

	SendServerMessage(playerid, "Bir þifre gir:");

	Dialog_Show(playerid, PassRegister, DIALOG_STYLE_PASSWORD, "Hesap kaydý", "Güçlü bir parola oluþturun ve girin:", ">>>", "");
	return 1;
}

Dialog:PassRegister(playerid, response, listitem, inputtext[])
{
	if(!response)	KickEx(playerid);

    if(strlen(inputtext) < 6 || strlen(inputtext) > 32)
    {
        Dialog_Show(playerid, PassRegister, DIALOG_STYLE_PASSWORD, "{FFFFFF} Yeni Þifre", "{FFFFFF} Þifre gir:", ">>>", "");
		return SendErrorMessage(playerid, "Þifre en az 6 en fazla 32 karakter olmalýdýr.");
	}

	for(new i = 0; i < strlen(inputtext); i++)
	{
		switch(inputtext[i])
		{
			case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/':
			{
			    Dialog_Show(playerid, PassRegister, DIALOG_STYLE_PASSWORD,"Yeni Þifre", "Þifre gir:", ">>>", "");
				return SendErrorMessage(playerid, "Geçersiz karakterler kullandýnýz.");
			}
			default: continue;
		}
	}

	new query[512], pass[129], ip_reg[8], name[24], email[24];

	GetPlayerIp(playerid, ip_reg, sizeof(ip_reg));
	GetPVarString(playerid, #AccountName, name, 24);
	GetPVarString(playerid, #EmailName, email, 24);

	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `accounts` (`login`,`password`,`email`,`reg_ip`,`reg_date`) VALUES ('%s','%e','%e','%s','%e')", MD5_Hash(inputtext), pass, email, ip_reg, get_date("%dd/%mm/%yyyy, %hh:%ii", gettime()));
	mysql_tquery(dbHandle, query);

	ClearChatbox(playerid, 50);
	SendServerMessage(playerid, "Tebrikler, baþarýyla bir hesap kaydettiniz! Biraz bekle...");

	SetPlayerName(playerid, name);

	SetTimerEx("CheckAccount", 1500, false, "i", playerid);
	return 1;
}

Dialog:CreateCharacter(playerid, response, listitem, inputtext[])
{
	if(!response)	return ShowCharacterMenu(playerid);

	if(strfind(inputtext, "/") != -1 || strfind(inputtext, "\\") != -1 ||
		strfind(inputtext, ":") != -1 || strfind(inputtext, "*") != -1 ||
		strfind(inputtext, "?") != -1 || strfind(inputtext, "\"") != -1 ||
		strfind(inputtext, "<") != -1 || strfind(inputtext, ">") != -1 ||
		strfind(inputtext, "|") != -1 || isnull(inputtext) || strfind(inputtext, " ") != -1)	{
		Dialog_Show(playerid, CreateCharacter, DIALOG_STYLE_INPUT, "Karakter oluþtur", "Karakterin adýný girin:", ">>>", "Geri Dön");
		return SendErrorMessage(playerid, "Karakter adýnda geçersiz karakterler bulunuyor!");
	}

	if(!RPnamecheck(inputtext)) {
		Dialog_Show(playerid, CreateCharacter, DIALOG_STYLE_INPUT, "Karakter oluþtur", "Karakterin adýný girin:", ">>>", "Geri Dön");
		return SendErrorMessage(playerid, "Karakter adýnda geçersiz karakterler bulunuyor!");
	}

	new underline=0, maxname = strlen(inputtext);

    for(new i=0; i<maxname; i++)
    {
       if(inputtext[i] == '_') underline ++;
    }
    if(underline != 1) return 0;
    inputtext[0] = toupper(inputtext[0]);
    for(new x=1; x<maxname; x++)
    {
        if(inputtext[x] == '_') inputtext[x+1] = toupper(inputtext[x+1]);
        else if(inputtext[x] != '_' && inputtext[x-1] != '_') inputtext[x] = tolower(inputtext[x]);
    }

	SetPVarString(playerid, #CharacterName, inputtext);

	const MAX_SKINS = 312;
    new subString[16];
    static string[MAX_SKINS * sizeof(subString)];

    if (string[0] == EOS) {
        for (new i; i < MAX_SKINS; i++) {
            format(subString, sizeof(subString), "%i\tID: %i\n", i, i);
            strcat(string, subString);
        }
    }

    Dialog_Show(playerid, CreationCharSkinSel, DIALOG_STYLE_PREVIEW_MODEL, "Karakter skininizi seçin", string, "Sec", "Ýptal");
	return 1;
}

Dialog:CreationCharSkinSel(playerid, response, listitem, inputtext[])
{
	if (!response) ShowCharacterMenu(playerid);

	new name[MAX_PLAYER_NAME], query[78 - 2 - 2 - 2 + 4 + MAX_PLAYER_NAME + 3];
	GetPVarString(playerid, #CharacterName, name, 24);

	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `users` (`accountid`,`name`,`skin`,`status`) VALUES (%i,'%e',%i,1)", PlayerInfo[playerid][pAccID], name, listitem);
	mysql_tquery(dbHandle, query);

	ShowCharacterMenu(playerid);
}

Dialog:Login(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		SendSyntaxMessage(playerid, "Sunucudan ayrýldýnýz.");
  		KickEx(playerid);
	    return 1;
	}

	if (isnull(inputtext))
	{
		static const str_size[] = "{c7c3c3}LOSWORLD:\t{FFFFFF}Giriþ yapmak için 5 dakikanýz var\n\
								   {c7c3c3}ÝPUCU:\t\t{FFFFFF}Hesap þifrenizi kurtarabilirsiniz\n\
								   \t\tForum: {c7c3c3}"WeburlName"\n\
								   \t\t{FFFFFF}UCP kýsmýna eriþebilirsin\n\n\
								   Þifrenizi girin:";
		new mes[sizeof(str_size)+103];

		if (pTemp[playerid][pLoggedTry] != 0) format(mes, sizeof(mes), "{FF6347}[ ! ] {FFFFFF}Yanlýþ þifre girdiniz!\n{FF6347}[ ! ] {FFFFFF}Kalan hak: {FF6347}%d\n\n%s", 3-pTemp[playerid][pLoggedTry], str_size);
		else format(mes, sizeof(mes), str_size);


		Dialog_Show(playerid, Login, DIALOG_STYLE_PASSWORD, ""ProjectName"", mes, "Giriþ Yap", "Ýptal");
		return 1;
	}

	new query[128 + 129];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `accounts` WHERE `forum_id` = %i AND `password`='%e'", PlayerInfo[playerid][pAccID], MD5_Hash(inputtext));
	mysql_tquery(dbHandle, query, "LoginPlayer", "i", playerid);
	return 1;
}

Dialog:CustomizationVerify(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(strfind(inputtext, "Evet", true) != -1)
		{
			mysql_tquery(dbHandle, sprintf("UPDATE users SET status = 1 WHERE id = '%d'", GetPVarInt(playerid, PVAR_LISTCHARS_CDETAILS_CID)));

			SM1(playerid, "Karakteriniz oluþturuldu. Giriþ yap tuþu ile giriþ yapabilirsiniz.");
			SelectTextDraw(playerid, COLOUR_DANDELION);
		}

		CustomizeCharacter(playerid, CUSTOMIZATION_VERIFY + 1);
	}

	else CustomizeCharacter(playerid, CUSTOMIZATION_VERIFY - 1);

	return 1;
}

Dialog:CustomizationOrigin(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		mysql_tquery(dbHandle, sprintf("UPDATE users SET origin = '%d' WHERE id = '%d'", GetOriginID(inputtext), GetPVarInt(playerid, PVAR_LISTCHARS_CDETAILS_CID)));
		PlayerInfo[playerid][pOrigin] = GetOriginID(inputtext);

		SM1(playerid, "Kökeniniz %s olarak belirlendi.", inputtext);
		CustomizeCharacter(playerid, CUSTOMIZATION_ORIGIN + 1);
	}

	else CustomizeCharacter(playerid, CUSTOMIZATION_ORIGIN - 1);

	return 1;
}

Dialog:CustomizationAge(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new age;

		if(sscanf(inputtext, "d", age))
			return CustomizeCharacter(playerid, CUSTOMIZATION_AGE);

		if(age < MIN_CHARACTER_AGE || age > MAX_CHARACTER_AGE)
			return CustomizeCharacter(playerid, CUSTOMIZATION_AGE);

		mysql_tquery(dbHandle, sprintf("UPDATE users SET age = '%d' WHERE id = '%d'", age, GetPVarInt(playerid, PVAR_LISTCHARS_CDETAILS_CID)));
		PlayerInfo[playerid][pAge] = age;

		SM1(playerid, "Yaþýnýz %d olarak belirlendi.", age);
		CustomizeCharacter(playerid, CUSTOMIZATION_AGE + 1);
	}

	else CustomizeCharacter(playerid, CUSTOMIZATION_AGE - 1);

	return 1;
}

Dialog:CustomizationGender(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(strfind(inputtext, "Erkek", true) != -1)
		{
			PlayerInfo[playerid][pSex] = 1;
		}

		else if(strfind(inputtext, "Kadýn", true) != -1)
		{
			PlayerInfo[playerid][pSex] = 2;
		}

		else return CustomizeCharacter(playerid, CUSTOMIZATION_GENDER);

		mysql_tquery(dbHandle, sprintf("UPDATE users SET sex = '%d' WHERE id = '%d'", PlayerInfo[playerid][pSex], GetPVarInt(playerid, PVAR_LISTCHARS_CDETAILS_CID)));

		SM1(playerid, "Cinsiyetiniz %s olarak belirlendi.", inputtext);
		CustomizeCharacter(playerid, CUSTOMIZATION_GENDER + 1);
	}

	else CustomizeCharacter(playerid, CUSTOMIZATION_GENDER - 1);

	return 1;
}

Dialog:CustomizationRace(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(strfind(inputtext, "Beyaz", true) != -1)
		{
			PlayerInfo[playerid][pRace] = 1;
		}

		else if(strfind(inputtext, "Siyah", true) != -1)
		{
			PlayerInfo[playerid][pRace] = 2;
		}

		else return CustomizeCharacter(playerid, CUSTOMIZATION_RACE);

		mysql_tquery(dbHandle, sprintf("UPDATE users SET race = '%d' WHERE id = '%d'", PlayerInfo[playerid][pRace], GetPVarInt(playerid, PVAR_LISTCHARS_CDETAILS_CID)));

		SM1(playerid, "Ten renginiz %s olarak belirlendi.", inputtext);
		CustomizeCharacter(playerid, CUSTOMIZATION_RACE + 1);
	}

	else CustomizeCharacter(playerid, CUSTOMIZATION_RACE - 1);

	return 1;
}

Dialog:CustomizationSkinSelect(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new model_id = strval(inputtext);

		mysql_tquery(dbHandle, sprintf("UPDATE users SET skin = '%d' WHERE id = '%d'", model_id, GetPVarInt(playerid, PVAR_LISTCHARS_CDETAILS_CID)));

		CustomizeCharacter(playerid, CUSTOMIZATION_SKIN + 1);
	}

	else CustomizeCharacter(playerid, CUSTOMIZATION_SKIN - 1);

	return 1;
}

/* Lisans sistemi */

License_OnGameModeInit()
{
    for(new i; i != sizeof(license_exam_cp)-1; i++)
	{
	    license_exam_cp[i] = CreateDynamicRaceCP(0, license_exam_coord[i][0], license_exam_coord[i][1], license_exam_coord[i][2], license_exam_coord[i+1][0], license_exam_coord[i+1][1], license_exam_coord[i+1][2], 4.0, 0, 0, -1, 1000.0);
	}

    license_exam_cp[sizeof(license_exam_cp)-1] = CreateDynamicRaceCP(1, license_exam_coord[sizeof(license_exam_cp)-1][0], license_exam_coord[sizeof(license_exam_cp)-1][1], license_exam_coord[sizeof(license_exam_cp)-1][2], 0.0, 0.0, 0.0, 4.0, 0, 0, -1, 1000.0);

    for(new i; i != sizeof(fly_exam_cp)-1; i++)
	{
	    fly_exam_cp[i] = CreateDynamicRaceCP(3, fly_exam_coord[i][0], fly_exam_coord[i][1], fly_exam_coord[i][2], fly_exam_coord[i+1][0], fly_exam_coord[i+1][1], fly_exam_coord[i+1][2], 4.0);
	}

    fly_exam_cp[sizeof(fly_exam_cp)-1] = CreateDynamicRaceCP(1, fly_exam_coord[sizeof(fly_exam_cp)-1][0], fly_exam_coord[sizeof(fly_exam_cp)-1][1], fly_exam_coord[sizeof(fly_exam_cp)-1][2], 0.0, 0.0, 0.0, 4.0, 0, 0, -1, 1000.0);

	return 1;
}

Lic_OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
    if (pTemp[playerid][pLicenseExam] == 1 || pTemp[playerid][pLicenseExam] == 3)
	{
	    for(new i; i != sizeof(license_exam_cp); i++)
		{
		    if (license_exam_cp[i] != checkpointid) continue;

			if (i == sizeof(license_exam_cp)-1)
			{
			    new Float:health, vehicleid = GetPlayerVehicleID(playerid);
				AntiCheatGetVehicleHealth(vehicleid, health);

				if (GetPVarInt(playerid, #exam_second) <= 0) SendSyntaxMessage(playerid, "Zamanýn doldu. Baþarýsýz oldun.");

				else if (health >= GetVehicleMaxHealth(vehicleid)-50.0)
				{
					if (pTemp[playerid][pLicenseExam] == 1)	PlayerInfo[playerid][pCarLic] = 1;
					else									PlayerInfo[playerid][pTaxiLic] = 1;

					SendSyntaxMessage(playerid, "Tebrikler!  %s sýnavýný baþarýyla geçtiniz.  /licenses komutuyla kontrol edebilirsiniz..", (pTemp[playerid][pLicenseExam])?("sürücü"):("taksi"));
				}
				else
				{
					SendSyntaxMessage(playerid, "Düzgün araç sürmediðiniz için baþarýsýz oldunuz.");
				}

				pTemp[playerid][pLicenseExam] = 0;
				DeletePVar(playerid, #exam_second);
				RespawnVehicle(vehicleid);
			    TogglePlayerDynamicRaceCP(playerid, license_exam_cp[i], false);
			    return 1;
			}

            TogglePlayerDynamicRaceCP(playerid, license_exam_cp[i], false);
            TogglePlayerDynamicRaceCP(playerid, license_exam_cp[i+1], true);
			return 1;
		}
	}

	else if (pTemp[playerid][pLicenseExam] == 2)
	{
	    for(new i; i != sizeof(fly_exam_cp); i++)
		{
		    if (fly_exam_cp[i] != checkpointid) continue;

			if (i == sizeof(fly_exam_cp)-1)
			{
			    new Float:health, vehicleid = GetPlayerVehicleID(playerid);

				AntiCheatGetVehicleHealth(vehicleid, health);

				if (health >= 950.0)
				{
				    if (GetPVarInt(playerid, #exam_second) <= 100)
					{
						PlayerInfo[playerid][pFlyLic] = 1; //ïîëåòû
						SendSyntaxMessage(playerid, "Tebrikler! Baþarýyla hava aracý lisansý aldýnýz. /lisanslar komutuyla kontrol edebilirsiniz.");
					}
					else
					{
						SendSyntaxMessage(playerid, "Çok hýzlý gittiðiniz için sýnav iptal edildi.");
					}
				}
				else
				{
				    SendSyntaxMessage(playerid, "Tehlikeli veya düzgün sürmediðiniz için sýnavýnýz iptal edildi.");
				}

				pTemp[playerid][pLicenseExam] = 0;
				DeletePVar(playerid, #exam_second);
				SetPlayerPos(playerid, 1765.36, -2272.22, 26.796);
				RespawnVehicle(vehicleid);
			    TogglePlayerDynamicRaceCP(playerid, fly_exam_cp[i], false);
			    return 1;
			}
            TogglePlayerDynamicRaceCP(playerid, fly_exam_cp[i], false);
            TogglePlayerDynamicRaceCP(playerid, fly_exam_cp[i+1], true);
			return 1;
		}
	}
    return 1;
}

Lic_OnPlayerStateChange(playerid, newstate)
{
    if (newstate == PLAYER_STATE_DRIVER)
    {
		new vehicle = GetPlayerVehicleID(playerid);

	    if (IsADMVCar(vehicle) && !PlayerInfo[playerid][pCarLic])	SendClientMessageEx(playerid, COLOR_WHITE, "Araç Lisansý: Lisans sýnavýna baþlamak için /ehliyet komutunu kullanabilirsiniz, sýnava baþlamak için gerekli para: {33AA33}$%i{FFFFFF}.",CARLIC_PRICE);
	    if (IsADMVHeli(vehicle) && !PlayerInfo[playerid][pFlyLic])	SendClientMessageEx(playerid, COLOR_WHITE, "Hava Aracý Lisansý: Lisans sýnavýna baþlamak için /ehliyet komutunu kullanabilirsiniz, sýnava baþlamak için gerekli para: {33AA33}$%i{FFFFFF}.",FLYLIC_PRICE);
	    if (IsADMVTaxi(vehicle) && !PlayerInfo[playerid][pTaxiLic])	SendClientMessageEx(playerid, COLOR_WHITE, "Taksi Lisansý: Lisans sýnavýna baþlamak için /ehliyet komutunu kullanabilirsiniz, sýnava baþlamak için gerekli para: {33AA33}$%i{FFFFFF}.",TAXILIC_PRICE);
    }
    return 1;
}

License_OnPlayerExitVehicle(playerid, vehicleid)
{
    if (pTemp[playerid][pLicenseExam])
	{
	    pTemp[playerid][pLicenseExam] = 0;
		DeletePVar(playerid, #exam_second);
		SendSyntaxMessage(playerid, "Araçtan indiðiniz için sýnavda baþarýsýz oldunuz.");
		TogglePlayerAllDynamicRaceCPs(playerid, false);
		RespawnVehicle(vehicleid);
	}
    return 1;
}

forward ShowWeaponLicenseDialog(playerid, list);
forward ShowWeaponLicensePlayer(playerid);

LicenseOffice_Nearest(playerid)
{
	if (!IsPlayerLogged(playerid))	return -1;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if (BizInfo[i][bizID] == 0 || BizInfo[i][bizType] != BIZ_LICENSE)	continue;
	    if (PlayerToPoint(85.0,playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizEntrance])
		return i;
	}
	return -1;
}

ShowLicenses(playerid, targetid) //èä êàðòà
{
	new gender = PlayerInfo[playerid][pSex];

	new originName[1090];
	format(originName, sizeof(originName), "%s", PlayerInfo[playerid][pOrigin]);

	SCM(targetid, COLOR_SERVER2, "___________VATANDAÞLIK___________");
	SendClientMessageEx(targetid, COLOR_WHITE, "Ýsim: {AFAFAF}%s{FFFFFF}, Yaþ: {AFAFAF}%i", GetNameEx(playerid), PlayerInfo[playerid][pAge]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Köken: {AFAFAF}%s{FFFFFF}, Cinsiyet: {AFAFAF}%s", originName, (gender == GENDER_MALE) ? ("Erkek") : ("Kadýn"));
	SCM(targetid, COLOR_SERVER2, "_________________________________");

    SCM(targetid, COLOR_SERVER2, "");

    SCM(targetid, COLOR_SERVER2, "____________LÝSANSLAR____________");
	SendClientMessageEx(targetid, COLOR_WHITE, "Araç Ehliyeti: {AFAFAF}%s{FFFFFF}. {FF8C8C}Uyarýlar: (%i)", (PlayerInfo[playerid][pCarLic])?("Sahip"):("Sahip Deðil"), PlayerInfo[playerid][pDriveWarns]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Silah Ruhsatý: {AFAFAF}%s{FFFFFF}. {FF8C8C}Uyarýlar: (%i)", (PlayerInfo[playerid][pWepLic])?("Sahip"):("Sahip Deðil"), PlayerInfo[playerid][pWepWarns]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Hava Aracý Lisansý: {AFAFAF}%s{FFFFFF}.", (PlayerInfo[playerid][pFlyLic])?((PlayerInfo[playerid][pFlyLic] == 1)?("Sahip"):("Yasaklý")):("Sahip Deðil"));
	SendClientMessageEx(targetid, COLOR_WHITE, "Taksi lisansý: {AFAFAF}%s{FFFFFF}.", (PlayerInfo[playerid][pTaxiLic])?((PlayerInfo[playerid][pTaxiLic] == 1)?("Sahip"):("Yasaklý")):("Sahip Deðil"));
	SCM(targetid, COLOR_SERVER2, "_________________________________");
	return 1;
}

ShowLawyerLicenses(playerid, targetid)
{
	SCM(targetid, 0x8D8DFFFF, "__________AVUKAT LÝSANSI__________");

	SendClientMessageEx(targetid, COLOR_GRAD2, "Ýsim: %s", GetNameEx(playerid));
	SendClientMessageEx(targetid, COLOR_GRAD2, "Bu kartvizit Los Santos Hükümeti tarafýndan saðlanmýþtýr.");

	SCM(targetid, 0x8D8DFFFF, "__________STATE OF AMERICA__________");
	return 1;
}

ShowWeaponLicense(playerid, list)
{
	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `id`,`name` FROM `users` WHERE `weplic`='1' LIMIT %i,%i", (30 * list), (30 * (list + 1)));
	mysql_tquery(dbHandle, query, "ShowWeaponLicenseDialog", "ii", playerid, list);
	return 1;
}

public ShowWeaponLicenseDialog(playerid, list)
{
	if (!cache_num_rows())
	{
  		SendErrorMessage(playerid, "Herhangi bir bilgi bulunamadý.");
  	 	return pc_cmd_mdc(playerid, "");
	}

	new mes[(MAX_PLAYER_NAME + 1) * 30 + 7] = "<<\n>>", name[MAX_PLAYER_NAME + 1];

	for(new i; i != cache_num_rows(); i++)
	{
	    cache_get_value_int(i, "id", pTemp[playerid][pWeaponListed][i]);
	    cache_get_value(i, "name", name);
	    strreplace(name, '_', ' ');
		format(mes, sizeof(mes), "%s\n%s", mes, name);
	}

	SetPVarInt(playerid, #weapon_list, list);
	Dialog_Show(playerid, MDCWeapon, DIALOG_STYLE_LIST, "Lisans Geçmiþi", mes, "Seç", "Geri Dön");
	return 1;
}

public ShowWeaponLicensePlayer(playerid)
{
	if (!cache_num_rows())
	{
	    SendErrorMessage(playerid, "Herhangi bir bilgi bulunamadý.");
	    return pc_cmd_mdc(playerid, "");
	}

	new name[MAX_PLAYER_NAME+1], officer[MAX_PLAYER_NAME+1], data[24], price, warns;

	cache_get_value(0, "name", name);
	strreplace(name, '_', ' ');
   	cache_get_value(0, "wep_officer", officer);
    cache_get_value(0, "wep_data", data);
    cache_get_value_int(0, "wep_price", price);
    cache_get_value_int(0, "wepwarns", warns);

	static const str_size[] = "{C3C3C3}- Ad, Soyad: %s\n{C3C3C3}- Uyarýlar: %i\n{C3C3C3}- memur: %s\n{C3C3C3}- Veriliþ Tarihi: %s\n{C3C3C3}- Fiyat: $%i\n- Lisansý Ýptal Et\n- Bir uyarý yaz";
	new mes[sizeof(str_size) - 10 + MAX_PLAYER_NAME + MAX_PLAYER_NAME + 24 + 12];
	format(mes, sizeof(mes), str_size, name, warns, officer, data, price);
	Dialog_Show(playerid, MDCWeaponPlayer, DIALOG_STYLE_LIST, "Bilgi", mes, "Seç", "Geri Dön");

	cache_get_value_int(0, "id", pTemp[playerid][pMDCWepPlayer]);
	format(pTemp[playerid][pMDCWepName], MAX_PLAYER_NAME+1, name);

	return 1;
}

alias:ehliyetal("ehliyet");
CMD:ehliyetal(playerid, params[])
{
/*   if (PlayerInfo[playerid][pCarLic] != 0)	return SendErrorMessage(playerid, "Zaten bir ehliyetin mevcut.");
	if (GetCash(playerid) < CARLIC_PRICE)	return SendNotCash(playerid);

	new bizid = LicenseOffice_Nearest(playerid);
	if (bizid != -1) return SendErrorMessage(playerid, "Bir ehliyet kursuna yakýn olmalýsýn.");

	GiveBizCash(bizid, CARLIC_PRICE);
	GiveCash(playerid, -CARLIC_PRICE);

    SendSyntaxMessage(playerid, "Ehliyeti baþarýyla aldýnýz ve %d$ ödediniz.", CARLIC_PRICE);

	PlayerInfo[playerid][pCarLic] = 1;
*/

	new vehicle = GetPlayerVehicleID(playerid);

	if (!IsADMVCar(vehicle) && !IsADMVHeli(vehicle) && !IsADMVTaxi(vehicle)) return SendErrorMessage(playerid, "Bir ehliyet aracýnda olmalýsýnýz.");
	if (!IsDriver(playerid))												 return SendErrorMessage(playerid, "Araç kullanýyor olmalýsýnýz.");
    if (pTemp[playerid][pLicenseExam] != 0)									 return SendErrorMessage(playerid, "Zaten mevcut bir sýnavdasýn.");

	if (IsADMVCar(vehicle))
	{
        if (PlayerInfo[playerid][pCarLic] != 0)	return SendErrorMessage(playerid, "Zaten bir ehliyetin mevcut.");
		if (GetCash(playerid) < CARLIC_PRICE)	return SendNotCash(playerid);

		VehicleEngine(vehicle, true);
		SendSyntaxMessage(playerid, "Ehliyet sýnavýna baþladnýz.");
		SendSyntaxMessage(playerid, "Sýnavý tamamlamak için  %i dakikanýz var, aksi takdirde baþarýsýz olursunuz.", EXAM_TIME / 60);

		pTemp[playerid][pLicenseExam] = 1;
		SetPVarInt(playerid, #exam_second, EXAM_TIME);
		TogglePlayerDynamicRaceCP(playerid, license_exam_cp[0], true);
		GiveCash(playerid, -CARLIC_PRICE);

		new bizid = LicenseOffice_Nearest(playerid);
		if (bizid != -1) GiveBizCash(bizid, CARLIC_PRICE);

		if (!IsPlayerInAnyVehicle(playerid)) {
			pTemp[playerid][pLicenseExam] = 0;
			DeletePVar(playerid, #exam_second);
			SendSyntaxMessage(playerid, "Araçtan indiðiniz için sýnavda baþarýsýz oldunuz.");
			TogglePlayerAllDynamicRaceCPs(playerid, false);
			RespawnVehicle(vehicle);
			return 1;
		}
	}
	else if (IsADMVHeli(vehicle))
	{
	    if (PlayerInfo[playerid][pFlyLic] != 0)	return SendErrorMessage(playerid, "Zaten bir hava aracý lisansýnýz mevcut.");
		if (PlayerInfo[playerid][pFlyLic] == 2)	return SendErrorMessage(playerid, "Hava aracý lisansý sahibi olarak kara listeye alýndýnýz..");
		if (GetCash(playerid) < FLYLIC_PRICE)	return SendNotCash(playerid);

		VehicleEngine(vehicle, true);
		SendSyntaxMessage(playerid, "Hava aracý lisansý sýnavýna baþladýnýz.");
		SendSyntaxMessage(playerid, "[1]: Sýnav sýrasýnda hiçbir þeye çarpmamaya çalýþýn.");
		SendSyntaxMessage(playerid, "[2]: Dikkatli sürün ve acele etmeyin.");

		pTemp[playerid][pLicenseExam] = 2;
		SetPVarInt(playerid, #exam_second, EXAM_TIME);
		TogglePlayerDynamicRaceCP(playerid, fly_exam_cp[0], true);
		GiveCash(playerid, -FLYLIC_PRICE);
	}
	else if (IsADMVTaxi(vehicle))
	{
	    if (PlayerInfo[playerid][pCarLic] == 0)		return SendErrorMessage(playerid, "Taksi lisansý almak için öncelikle araç ehliyeti sahibi olmalýsýnýz..");
        if (PlayerInfo[playerid][pTaxiLic] != 0)	return SendErrorMessage(playerid, "Zaten bir taksi lisansýnýz mevcut..");
		if (PlayerInfo[playerid][pTaxiLic] == 2)	return SendErrorMessage(playerid, "Taksi lisansýnýz kara listeye alýndý..");
		if (GetCash(playerid) < TAXILIC_PRICE)		return SendNotCash(playerid);

		VehicleEngine(vehicle, true);
		SendSyntaxMessage(playerid, "Taksi lisans sýnavýna baþladýnýz.");
		SendSyntaxMessage(playerid, "Sýnavý tamamlamak için  %i dakikanýz var, aksi takdirde baþarýsýz olursunuz.", EXAM_TIME / 60);

		pTemp[playerid][pLicenseExam] = 3;
		SetPVarInt(playerid, #exam_second, EXAM_TIME);
		TogglePlayerDynamicRaceCP(playerid, license_exam_cp[0], true);
		GiveCash(playerid, -TAXILIC_PRICE);

		new bizid = LicenseOffice_Nearest(playerid);

		if (bizid != -1)	GiveBizCash(bizid, TAXILIC_PRICE);
	}
	return 1;
}

/* Drop sistemi */

Item_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;

	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	if (GetPVarInt(playerid, #edit_item) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
	    new id = GetPVarInt(playerid, #edit_item)-1;
	    DeletePVar(playerid, #edit_item);

	    if (GetDistanceBetweenPoints(x, y, z, ItemDrop[id][dropPosX], ItemDrop[id][dropPosY], ItemDrop[id][dropPosZ]) > 5.0)
	    {
     		SetDynamicObjectPos(ItemDrop[id][dropObject], ItemDrop[id][dropPosX], ItemDrop[id][dropPosY], ItemDrop[id][dropPosZ]);
        	SetDynamicObjectRot(ItemDrop[id][dropObject], ItemDrop[id][dropPosRX], ItemDrop[id][dropPosRY], ItemDrop[id][dropPosRZ]);
	        return SendErrorMessage(playerid, "Obje baþlangýç konumundan çok uzakta."); //îøèáêà
	    }

	    if (objectid != ItemDrop[id][dropObject]) return SendErrorMessage(playerid, "Öðe düzenlenirken hata oluþtu.");

		SetDynamicObjectPos(ItemDrop[id][dropObject], x, y, z);
		SetDynamicObjectRot(ItemDrop[id][dropObject], rx, ry, rz);

        GetDynamicObjectPos(ItemDrop[id][dropObject], ItemDrop[id][dropPosX], ItemDrop[id][dropPosY], ItemDrop[id][dropPosZ]);
        GetDynamicObjectRot(ItemDrop[id][dropObject], ItemDrop[id][dropPosRX], ItemDrop[id][dropPosRY], ItemDrop[id][dropPosRZ]);

		ItemDrop_Update(id);
	}
	return 1;
}

ItemDrop_Init()
{
	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `drop_items` WHERE dropTime-%i > 24*60*60", gettime());
	mysql_tquery(dbHandle, query);

	mysql_tquery(dbHandle, "SELECT * FROM `drop_items`", "ItemDrop_Load");
	return 1;
}

this::ItemDrop_Load()
{
	new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows) return print("[ItemsDrop] Kayit bulunamadi.");

	for(new i; i < rows; i++)
	{
		cache_get_value_int(i, "id", ItemDrop[i][dropBDID]);
		cache_get_value_int(i, "item", ItemDrop[i][dropID]);
	    cache_get_value_int(i, "amount", ItemDrop[i][dropAmount]);
		cache_get_value_float(i, "a_float", ItemDrop[i][dropQFloat]);
		cache_get_value(i, "dropname", ItemDrop[i][dropInvName], 16);
		cache_get_value_int(i, "ex", ItemDrop[i][dropEx]);
		cache_get_value_int(i, "serial", ItemDrop[i][dropS]);
        cache_get_value_float(i, "dropPosX", ItemDrop[i][dropPosX]);
		cache_get_value_float(i, "dropPosY", ItemDrop[i][dropPosY]);
		cache_get_value_float(i, "dropPosZ", ItemDrop[i][dropPosZ]);
		cache_get_value_float(i, "dropPosRX", ItemDrop[i][dropPosRX]);
		cache_get_value_float(i, "dropPosRY", ItemDrop[i][dropPosRY]);
		cache_get_value_float(i, "dropPosRZ", ItemDrop[i][dropPosRZ]);
		cache_get_value_int(i, "dropInt", ItemDrop[i][dropInt]);
		cache_get_value_int(i, "dropVW", ItemDrop[i][dropVW]);
		cache_get_value_int(i, "dropTime", ItemDrop[i][dropTime]);

		ItemDrop[i][dropObject] = CreateDynamicObject(inventory_items[ItemDrop[i][dropID]][itemModel], ItemDrop[i][dropPosX], ItemDrop[i][dropPosY], ItemDrop[i][dropPosZ], ItemDrop[i][dropPosRX], ItemDrop[i][dropPosRY], ItemDrop[i][dropPosRZ], ItemDrop[i][dropInt], ItemDrop[i][dropVW]);
	}

	printf("[ItemsDrop] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

ItemDrop_Update(i) {
	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `drop_items` SET `dropPosX`=%f,`dropPosY`=%f,`dropPosZ`=%f,`dropPosRX`=%f,`dropPosRY`=%f,`dropPosRZ`=%f WHERE `id` = %i", ItemDrop[i][dropPosX], ItemDrop[i][dropPosY], ItemDrop[i][dropPosZ],ItemDrop[i][dropPosRX], ItemDrop[i][dropPosRY], ItemDrop[i][dropPosRZ], ItemDrop[i][dropBDID]);
	return mysql_tquery(dbHandle, query);
}

DeleteDrop_fromBD(bd_dropid)
{
	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `drop_items` WHERE `id` = %i", bd_dropid);
	return mysql_tquery(dbHandle, query);
}

this::GetIDforItemDrop(i) {
	ItemDrop[i][dropBDID] = cache_insert_id();
	return 1;
}

ItemDrop_Drop(playerid, item, amount, Float:a_float = 0.0, ex = 0, serial = 0, name[] = EOS)
{
	if (GetPVarInt(playerid, #pDelay)) return -1;

	SetPVarInt(playerid, #pDelay, 1);
	for(new i; i != MAX_ITEM_DROPS; i++)
	{
	    if (ItemDrop[i][dropID] != 0) continue;

  		ItemDrop[i][dropID] = item;
		ItemDrop[i][dropAmount] = amount;
		ItemDrop[i][dropQFloat] = a_float;
		ItemDrop[i][dropEx] = ex;
		ItemDrop[i][dropS] = serial;
		format(ItemDrop[i][dropInvName], 32, "%s", name);

        GetXYInFrontOfPlayer(playerid, ItemDrop[i][dropPosX], ItemDrop[i][dropPosY], ItemDrop[i][dropPosZ], 1.5);
		ItemDrop[i][dropPosZ] -= 1.0;
		ItemDrop[i][dropInt] = GetInterior(playerid);
		ItemDrop[i][dropVW] = GetWorld(playerid);
		ItemDrop[i][dropTime] = gettime();

		new mes[128], drop_name[32] = "para", drop_model = 1212;

		if (item != 9999)
		{
		    format(drop_name, sizeof(drop_name), inventory_items[item][itemName]);
            drop_model = inventory_items[item][itemModel];
		}

		format(mes, sizeof(mes), "%s yere býrakýr.", drop_name);
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 4000);

		ItemDrop[i][dropObject] = CreateDynamicObject(drop_model, ItemDrop[i][dropPosX], ItemDrop[i][dropPosY], ItemDrop[i][dropPosZ], 93.7, 120.0, 120.0, GetWorld(playerid), GetInterior(playerid));
		EditDynamicObject(playerid, ItemDrop[i][dropObject]);
		SetPVarInt(playerid, #edit_item, i+1);

		DebugMessage(playerid, sprintf("model: %d, drop(i): %d, itemname: %s", drop_model, i, drop_name));

    	new query[350];

		format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] threw on the ground %e (amount: %i)",
		GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), drop_name, amount);
		insert_log(query, ITEM_LOG, 1, PlayerInfo[playerid][pAccID], 0);

		mysql_format(dbHandle, query, sizeof(query),
			"INSERT INTO `drop_items` (`item`,`amount`,`a_float`,`dropname`,`ex`,`serial`,`dropPosX`,`dropPosY`,`dropPosZ`,`dropPosRX`,`dropPosRY`,`dropPosRZ`,`dropInt`,`dropVW`,`dropTime`) VALUES (%i,%i,%f,'%e',%i,%i,%f,%f,%f,%f,%f,%f,%i,%i,%i)",
			ItemDrop[i][dropID],
			ItemDrop[i][dropAmount],
			ItemDrop[i][dropQFloat],
			ItemDrop[i][dropInvName],
			ItemDrop[i][dropEx],
			ItemDrop[i][dropS],
			ItemDrop[i][dropPosX], ItemDrop[i][dropPosY], ItemDrop[i][dropPosZ],
			ItemDrop[i][dropPosRX], ItemDrop[i][dropPosRY], ItemDrop[i][dropPosRZ],
			ItemDrop[i][dropInt],
			ItemDrop[i][dropVW],
			ItemDrop[i][dropTime]
		);
		mysql_tquery(dbHandle, query, "GetIDforItemDrop", "d", i);

		FixInv(playerid);
		SetPVarInt(playerid, #pDelay, 0);
  		return i;
	}
	SetPVarInt(playerid, #pDelay, 0);
	return -1;
}

ItemDrop_Pickup(playerid, dropid)
{
	if (ItemDrop[dropid][dropID] == 0) return 1;
	if (GetPVarInt(playerid, #pDelay)) return 1;

	SetPVarInt(playerid, #pDelay, 1);

	new item = ItemDrop[dropid][dropID];

	if (item == 9999) GiveCash(playerid, ItemDrop[dropid][dropAmount]);
	else
	{
		if (GivePlayerInvItem(playerid, item, ItemDrop[dropid][dropAmount], ItemDrop[dropid][dropQFloat], ItemDrop[dropid][dropEx], ItemDrop[dropid][dropS], ItemDrop[dropid][dropInvName]) == -1) {
			SetPVarInt(playerid, #pDelay, 0);
			return SendErrorMessage(playerid, "Envanteriniz dolu.");
		}

		if (inventory_items[item][itemType] == ITEM_TYPE_WEAPON)
		{
			/*if (PlayerInfo[playerid][pOnDuty] && PlayerInfo[playerid][pFaction] == LSPD)
			{
				SetPVarInt(playerid, #pDelay, 0);
				return SendErrorMessage(playerid, "Âû íå ìîæåòå ïîäíÿòü îðóæèå, íàõîäÿñü íà äåæóðñòâå.");
			}*/
			//if (PlayerInfo[playerid][pJailed] ||
			if (PlayerInfo[playerid][pAJailed])
			{
				SetPVarInt(playerid, #pDelay, 0);
				return SendErrorMessage(playerid,"Hapishanedeyken silah alamazsýnýz.");
			}

			if (ItemDrop[dropid][dropAmount])	SM2(playerid, "%s [%s / %i mermi] eþyasýný yerden aldýnýz.", inventory_items[item][itemName], inventory_items[ItemDrop[dropid][dropEx]][itemName], ItemDrop[dropid][dropAmount]);
			else								SM2(playerid, "%s [mermi yok] eþyasýný yerden aldýnýz.", inventory_items[item][itemName]);
		}
		else 									SM2(playerid, "%s eþyasýný yerden aldýnýz.", inventory_items[item][itemName]);
	}

    new mes[128], drop_name[32] = "para";

	if (item != 9999) format(drop_name, sizeof(drop_name), inventory_items[item][itemName]);
	format(mes, sizeof(mes), "* %s %s adlý eþyayý yerden alýr.", GetNameWithMask(playerid), drop_name);
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, Range_Normal, 10000);

    new query[256];

	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] yerden aldý %e (miktar: %i)",
	GetName(playerid), PlayerInfo[playerid][pID], q_GetPlayerIP(playerid), drop_name, ItemDrop[dropid][dropAmount]);
	insert_log(query, ITEM_LOG, 2, PlayerInfo[playerid][pAccID]);

	ItemDrop_Delete(dropid);
	SetPVarInt(playerid, #pDelay, 0);
	return 1;
}

ItemDrop_Delete(dropid)
{
	if (ItemDrop[dropid][dropID] == 0) return 1;
	if (IsValidDynamicObject(ItemDrop[dropid][dropObject])) DestroyDynamicObject(ItemDrop[dropid][dropObject]);

	DeleteDrop_fromBD(ItemDrop[dropid][dropBDID]);

	ItemDrop[dropid][dropBDID] =
	ItemDrop[dropid][dropID] =
	ItemDrop[dropid][dropAmount] = 0;
	ItemDrop[dropid][dropPosX] =
	ItemDrop[dropid][dropPosY] =
	ItemDrop[dropid][dropPosZ] = 0.0;
	ItemDrop[dropid][dropInvName] = EOS;
	return 1;
}

ItemDrop_Nearest(playerid)
{
	for(new i; i != MAX_ITEM_DROPS; i++)
	{
	    if (ItemDrop[i][dropID] == 0) continue;
		if (IsPlayerInRangeOfPoint(playerid, 1.5, ItemDrop[i][dropPosX], ItemDrop[i][dropPosY], ItemDrop[i][dropPosZ]) && GetWorld(playerid) == ItemDrop[i][dropVW] && GetInterior(playerid) == ItemDrop[i][dropInt]) return i;
	}
	return -1;
}

DropFood_Nearest(playerid)
{
	for(new i; i != MAX_FOOD_DROPS; i++)
	{
	    if (FoodDrop[i][foodDropped] == 0) continue;
		if (IsPlayerInRangeOfPoint(playerid, 2.0, FoodDrop[i][foodPosX], FoodDrop[i][foodPosY], FoodDrop[i][foodPosZ]) && FoodDrop[i][foodInt] == GetInterior(playerid) && FoodDrop[i][foodVW] == GetWorld(playerid)) return i;
	}
	return -1;
}

this::OnPlayerUseItem(playerid, slotid) //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
{
    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
        return SendErrorMessage(playerid, "Envanteri þu anda kullanamazsýnýz.");
    if (slotid < 0 || slotid > MAX_INV_SLOTS-1) return 1;

    new itemid = Inventory[playerid][slotid][pInvItem];

    switch(itemid)
    {
        case INV_SIGN: pc_cmd_aracilan(playerid, "");
        case INV_HEAL:
        {
           if (GetPVarInt(playerid, #heal_time) > gettime())   return SendErrorMessage(playerid, "Her dakikada bir kez kullanabilir.");

            new Float:health;
            AntiCheatGetHealth(playerid, health);

            if (health >= 100.0) return SendErrorMessage(playerid, "Saðlýðýnýz tam.");

            if (health + 15.0 > 100.0)   SetPlayerHealth(playerid, 100.0);
            else                        SetPlayerHealth(playerid, health + 100.0);


            SetPVarInt(playerid, #heal_time, gettime() + 60);
            Inventory[playerid][slotid][pInvQ]--;
            if (!Inventory[playerid][slotid][pInvQ]) Inventory[playerid][slotid][pInvItem] = 0;
        }

        case INV_BOOMBOX:   PlaceBoombox(playerid);
        case INV_RADIO:     pc_cmd_telsizyardim(playerid, "");
        case INV_MASK:      pc_cmd_maske(playerid, "");
        case INV_LIGHTER:   SendHelpMessage(playerid, "Yakmak için envanterden bir sigara seçin.");
        case INV_CIGAR:
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))  return SendWarningMessage(playerid, "Elinizde bir eþya bulunuyor.");

            Inventory[playerid][slotid][pInvQ]--;

            if (Inventory[playerid][slotid][pInvQ] == 0) Inventory[playerid][slotid][pInvItem] = 0;

            pc_cmd_server_ame(playerid, "bir adet sigara çýkarýr ve çakmaðýyla yakar.");
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
            SM2(playerid, "Sigara yaktýn.");

            InfoMSG(playerid, "Sigara icmek icin \" ~g~LKM ~w~\" tusuna basin, sigarayi atmak icin \" ~r~ENTER ~w~\" tusuna basin", 5);

        }
        case INV_CUBANPURO:
        {
            if (!IsPlayerHasItem(playerid, INV_LIGHTER))                 return SendErrorMessage(playerid, "Çakmaðýnýz yok. Sigarayý ne ile yakacaksýnýz?");
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))  return SendWarningMessage(playerid, "Elinizde bir eþya bulunuyor.");

            Inventory[playerid][slotid][pInvQ]--;

            if (Inventory[playerid][slotid][pInvQ] == 0) Inventory[playerid][slotid][pInvItem] = 0;

            pc_cmd_server_ame(playerid, "küba purosunu çakmaðýyla yakar.");
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
            SM2(playerid, "Küba purosu yaktýn. +7 HP");
            PlayerInfo[playerid][pHealth] += 7;

            InfoMSG(playerid, "Sigara icmek icin \" ~g~LKM ~w~\" tusuna basin, sigarayi atmak icin \" ~r~ENTER ~w~\" tusuna basin", 5);

        }
        case INV_DICE:      SendNearbyMessage(Range_Normal, playerid, COLOUR_VISTABLUE, "> %s zar atar (( %d ))", GetNameWithMask(playerid), random(6)+1);
        case INV_PEN:       pc_cmd_not(playerid, "");
        case INV_GASCAN:
        {
            if (IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Araçtayken bu iþlevi gerçekleþtiremezsiniz.");

            new vehicle;

            if ((vehicle = GetNearVehicle(playerid, 2.5)) == 0) return SendErrorMessage(playerid, "Yakýnýnýzda araç yok.");
            if (VehicleInfo[vehicle][carFuel] + 20.0 > GetVehicleFuelCapacity(GetVehicleModel(vehicle))) return SendErrorMessage(playerid, "Aracýn yakýt deposu dolu.");

            VehicleInfo[vehicle][carFuel] += 20.0;
            SM2(playerid, "Aracýnýza bidon ile yakýt ikmali yapýlýyor.");
            pc_cmd_me(playerid, "aracýna yakýt doldurur.");
            Inventory[playerid][slotid][pInvQ]--;
            if (Inventory[playerid][slotid][pInvQ] == 0) Inventory[playerid][slotid][pInvItem] = 0;
        }
        case INV_BURGER:
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) return SendWarningMessage(playerid, "Eliniz zaten dolu.");
            InfoMSG(playerid, "Yemegi yemek icin \" ~g~LKM ~w~\" tusuna basin ~n~Iptal etmek icin \" ~r~ENTER ~w~\" tusuna basin.", 5);

            new Float:health;
            AntiCheatGetHealth(playerid, health);

            if (health + 10 > 100.0) PlayerInfo[playerid][pHealth] = 100.0;
            else                    PlayerInfo[playerid][pHealth] = health + 10.0;

            SetPVarInt(playerid, #use_food, 5);
            SetPVarInt(playerid, #time_food, gettime());
            SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2703, 6, 0.055999, 0.028000, 0.008000, 2.599998, 0.000000, 16.599998, 0.844000, 0.871000, 0.870000);
            RemovePlayerItem(playerid, INV_BURGER, 1);
            pc_cmd_server_ame(playerid, "burger yer.");
        }
        case INV_PIZZA:
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) return SendWarningMessage(playerid, "Eliniz zaten dolu.");
            InfoMSG(playerid, "Yemegi yemek icin \" ~g~LKM ~w~\" tusuna basin ~n~Iptal etmek icin \" ~r~ENTER ~w~\" tusuna basin.", 5);

            new Float:health;
            AntiCheatGetHealth(playerid, health);

            if (health + 15.0 > 100.0) PlayerInfo[playerid][pHealth] = 100.0;
            else                       PlayerInfo[playerid][pHealth] = health + 15.0;

            SetPVarInt(playerid, #use_food, 5);
            SetPVarInt(playerid, #time_food, gettime());
            SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2703, 6, 0.055999, 0.028000, 0.008000, 2.599998, 0.000000, 16.599998, 0.844000, 0.871000, 0.870000);
            RemovePlayerItem(playerid, INV_PIZZA, 1);
            pc_cmd_server_ame(playerid, "pizza yer.");
        }
        case INV_CHICKEN:
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) return SendWarningMessage(playerid, "Eliniz zaten dolu.");

            InfoMSG(playerid, "Yemegi yemek icin \" ~g~LKM ~w~\" tusuna basin ~n~Iptal etmek icin \" ~r~ENTER ~w~\" tusuna basin.", 5);

            new Float:health;
            AntiCheatGetHealth(playerid, health);

            if (health + 7.0 > 100.0) PlayerInfo[playerid][pHealth] = 100.0;
            else                      PlayerInfo[playerid][pHealth] = health + 7.0;


            SetPVarInt(playerid, #use_food, 5);
            SetPVarInt(playerid, #time_food, gettime());
            SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2703, 6, 0.055999, 0.028000, 0.008000, 2.599998, 0.000000, 16.599998, 0.844000, 0.871000, 0.870000);
            RemovePlayerItem(playerid, INV_CHICKEN, 1);
            pc_cmd_server_ame(playerid, "tavuk yer");
        }
        case INV_HOTDOG:
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) return SendWarningMessage(playerid, "Eliniz zaten dolu.");

            InfoMSG(playerid, "Yemegi yemek icin \" ~g~LKM ~w~\" tusuna basin ~n~Iptal etmek icin \" ~r~ENTER ~w~\" tusuna basin.", 5);

            new Float:health;
            AntiCheatGetHealth(playerid, health);

            if (health + 5.0 > 100.0)    PlayerInfo[playerid][pHealth] = 100.0;
            else                       PlayerInfo[playerid][pHealth] = health + 5.0;


            SetPVarInt(playerid, #use_food, 5);
		    SetPVarInt(playerid, #time_food, gettime());
		    SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2703, 6, 0.055999, 0.028000, 0.008000, 2.599998, 0.000000, 16.599998, 0.844000, 0.871000, 0.870000);
            RemovePlayerItem(playerid, INV_HOTDOG, 1);
            pc_cmd_server_ame(playerid, "hot-dog yer.");
        }
        case INV_WATER, INV_SODA, INV_COLA:
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) return SendWarningMessage(playerid, "Eliniz zaten dolu.");

            InfoMSG(playerid, "Icmek icin \" ~g~LKM ~w~\" tusuna basin ~n~Iptal etmek icin \" ~r~ENTER ~w~\" tusuna basin.", 5);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
            RemovePlayerItem(playerid, itemid, 1);

            if (itemid == INV_WATER)     pc_cmd_server_ame(playerid, "su içer.");
            else if (itemid == INV_SODA) pc_cmd_server_ame(playerid, "soda içer.");
            else if (itemid == INV_COLA) pc_cmd_server_ame(playerid, "kola içer.");
        }
        case INV_BEER:
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) return SendWarningMessage(playerid, "Eliniz zaten dolu.");

            InfoMSG(playerid, "Icmek icin \" ~g~LKM ~w~\" tusuna basin ~n~Iptal etmek icin \" ~r~ENTER ~w~\" tusuna basin.", 5);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
            RemovePlayerItem(playerid, itemid, 1);
            pc_cmd_server_ame(playerid, "bira içer.");
        }
        case INV_VODKA, INV_WHISKEY, INV_BRANDY, INV_WINE:
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) return SendWarningMessage(playerid, "Eliniz zaten dolu.");

            InfoMSG(playerid, "Icmek icin \" ~g~LKM ~w~\" tusuna basin ~n~Iptal etmek icin \" ~r~ENTER ~w~\" tusuna basin.", 5);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
            RemovePlayerItem(playerid, itemid, 1);

            if (itemid == INV_VODKA)         pc_cmd_server_ame(playerid, "vodka içer.");
            else if (itemid == INV_WHISKEY)  pc_cmd_server_ame(playerid, "viski içer.");
            else if (itemid == INV_BRANDY)   pc_cmd_server_ame(playerid, "brendi içer.");
            else                             pc_cmd_server_ame(playerid, "þarap içer.");
        }
        case INV_PICKLOCK: pc_cmd_evkilitkir(playerid, "");
        case INV_CARSOUND:
        {
            new vehicle = GetPlayerVehicleID(playerid);

            if (vehicle == 0) return SendSyntaxMessage(playerid, "Aracýnýza radyo teyp takabilirsiniz veya rehin dükkanýnda(pawnshop) satabilirsiniz. (( /sell ))");
            if (VehicleInfo[vehicle][carOwnerID] == INVALID_PLAYER_ID)    return SendErrorMessage(playerid, "Radyo kayýt cihazý yalnýzca kiþisel araca takýlabilir.");
            if (VehicleInfo[vehicle][carRadio] == 1)      return SendErrorMessage(playerid, "Bu araçta hali hazýrda bir radyo teyp zaten var.");
            if (!IsPlayerHasItem(playerid, INV_CARSOUND)) return SendErrorMessage(playerid, "Bir radyo cihazýnýz yok.");

            new mes[128];
            format(mes, sizeof(mes), "%s aracýna radyo takar.", VehicleNames[GetVehicleModel(vehicle)-400]);
            pc_cmd_me(playerid, mes);
            RemovePlayerItem(playerid, itemid, 1);
            VehicleInfo[vehicle][carRadio] = 1;
        }
        //case INV_SKATE: pc_cmd_kaykay(playerid, "");

	}
	return 1;
}

IsPlayerHasItem(playerid, itemid, amount = 0)
{
	if (!IsPlayerLogged(playerid) || !itemid) return 0;

    new result = -1;
	for(new i = 0; i != MAX_INV_SLOTS; i++)
	{
	    if (amount > 0 && Inventory[playerid][i][pInvItem] == itemid && Inventory[playerid][i][pInvQ] >= amount)
        {
            result = i;
            break;
        }
	    else if (amount < 1 && Inventory[playerid][i][pInvItem] == itemid)
        {
            result = i;
            break;
        }
	}

    if (result == -1) return 0;
    else return 1;
}

RemovePlayerItem(playerid, itemid, amount = -1)
{
    for(new i; i != MAX_INV_SLOTS; i++)
	{
	    if (Inventory[playerid][i][pInvItem] != itemid) continue;

	    if (amount == -1)
	    {
	        Inventory[playerid][i][pInvItem] = 0;
	        Inventory[playerid][i][pInvQ] = 0;
			return 1;
		}

        Inventory[playerid][i][pInvQ] -= amount;

		if (Inventory[playerid][i][pInvQ] < 1)
		{
		    Inventory[playerid][i][pInvItem] = 0;
	        Inventory[playerid][i][pInvQ] = 0;
  		}
        return 1;
	}
	return 0;
}

GetWeaponType(weaponid)
{
    switch(weaponid)
    {
        case 2,3,5,6,7,8,15:    return 1; //WEAPON_TYPE_HAND
        case 22,23,24,28,29,32: return 2; //WEAPON_TYPE_SEC
        case 25,26,30,31,33,34: return 3; //WEAPON_TYPE_PRIM
    }
    return -1;
}

alias:parabirak("paraat");
CMD:parabirak(playerid, params[])
{
    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
		return SendErrorMessage(playerid, "Bu özelliði þu anda kullanamazsýnýz.");
	if (IsAdminDuty(playerid))                                                         return SendErrorMessage(playerid, "Önce admin iþbaþýndan çýkmanýz lazým..");
    if (IsPlayerInAnyVehicle(playerid))                                                              return SendErrorMessage(playerid, "Araçta olmamanýz gerekmektedir.");
    if (PlayerInfo[playerid][pHours] < 2)                                                            return SendErrorMessage(playerid, "Önce 2 level olmalýsýnýz..");

    new amount;

    if (sscanf(params, "i", amount))                                                                 return SendHelpMessage(playerid, "/parabirak [miktar]");
	if (amount < 1 || amount > 3000)                                                                 return SendErrorMessage(playerid, "Yanlýþ bir tutar girdiniz. ($1 - $3000).");
	if (amount > GetCash(playerid))                                                                  return SendNotCash(playerid);
	if (ItemDrop_Drop(playerid, 9999, amount) == -1)                                                 return SendErrorMessage(playerid, "Düþen maksimum öðe sayýsýna ulaþýldý.");
    SendAdmMessage("%s [ID: %i] $%i yere attý.", GetNameEx(playerid), playerid, amount);
	GiveCash(playerid, -amount);

    SendSyntaxMessage(playerid, "$%i parayý yere býraktýnýz. Almak için {ffc46a}/yerdenal{FFFFFF} veya oturun ve {ffc46a}H{FFFFFF} tuþuna basýn.", amount);
	return 1;
}

CMD:yerebirak(playerid, params[])
{
    if (!GetPVarInt(playerid, #attach_item))  return 1;
    if (ItemDrop_Drop(playerid, pTemp[playerid][tempItem], pTemp[playerid][tempQ], pTemp[playerid][tempEx]) == -1)
	return SendErrorMessage(playerid, "Yere eþya býrakma sýnýrýný aþtýnýz.");
	if (IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Araç içindeyken yere eþya býrakamazsýn.");

    SendSyntaxMessage(playerid, "$%i parayý yere býraktýnýz. Almak için {ffc46a}/yerdenal{FFFFFF} veya oturun ve {ffc46a}H{FFFFFF} tuþuna basýn.", inventory_items[pTemp[playerid][tempItem]][itemName], pTemp[playerid][tempQ]);

    RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    SetPVarInt(playerid, #attach_item, 0);

    pTemp[playerid][tempItem] = 0;
    pTemp[playerid][tempEx] = 0;
    pTemp[playerid][tempQ] = 0;
    return 1;
}

alias:yerdenal("esyaal");
CMD:yerdenal(playerid, params[])
{
    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
		return SendErrorMessage(playerid, "Bu özelliði þu anda kullanamazsýnýz.");
	new dropid = -1;
	if ((dropid = ItemDrop_Nearest(playerid)) == -1) return OyuncuYerdenPaketAl(playerid);

	if (IsPlayerCrouching(playerid)) ItemDrop_Pickup(playerid, dropid);
	else 							InfoMSG(playerid, "Bir nesneyi almak icin ~y~ egilmeniz ~w~gerekmektedir ~w~~y~", 3);

	return 1;
}

/* Hood sistemi */

stock Hood_Sil(hoodid)
{
	if (hoodid != -1 && OnayliHoodlar[hoodid][hoodVarmi])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM onaylihoodlar WHERE hoodID = '%d'", OnayliHoodlar[hoodid][hoodID]);
		mysql_tquery(dbHandle, string);

        if (IsValidDynamicArea(OnayliHoodlar[hoodid][hZone])) DestroyDynamicArea(OnayliHoodlar[hoodid][hZone]);

        if (IsValidDynamic3DTextLabel(OnayliHoodlar[hoodid][hoodText3D]))
		    DestroyDynamic3DTextLabel(OnayliHoodlar[hoodid][hoodText3D]);

		if (IsValidDynamicPickup(OnayliHoodlar[hoodid][hoodPickup]))
		    DestroyDynamicPickup(OnayliHoodlar[hoodid][hoodPickup]);

	    OnayliHoodlar[hoodid][hoodVarmi] = false;
	    OnayliHoodlar[hoodid][hoodID] = 0;
	}
	return 1;
}

this::Hood_Yukle()
{
    new rows = cache_num_rows();

    if(!rows) printf("Hood bulunamadi");

	for (new i = 0; i < rows; i ++) if (i < MAX_ONAYLIHOOD)
	{
	    OnayliHoodlar[i][hoodVarmi] = true;
    	cache_get_value_int(i, "hoodID", OnayliHoodlar[i][hoodID]);
    	cache_get_value_int(i, "hoodPickup", OnayliHoodlar[i][hoodPickup]);
		cache_get_value(i, "hoodAd", OnayliHoodlar[i][hoodAd], 32);
	    cache_get_value_float(i, "hoodPosX", OnayliHoodlar[i][hoodPos][0]);
	    cache_get_value_float(i, "hoodPosY", OnayliHoodlar[i][hoodPos][1]);
	    cache_get_value_float(i, "hoodPosZ", OnayliHoodlar[i][hoodPos][2]);
	    cache_get_value_float(i, "hoodPosA", OnayliHoodlar[i][hoodPos][3]);

	    Hood_Yenile(i);
	}
	return 1;
}

Hood_Kaydet(hoodid)
{
	static
	    query[1024];

	format(query, sizeof(query), "UPDATE onaylihoodlar SET hoodAd = '%s', hoodPickup = '%d', hoodPosX = '%.4f', hoodPosY = '%.4f', hoodPosZ = '%.4f', hoodPosA = '%.4f'",
	    SQL_ReturnEscaped(OnayliHoodlar[hoodid][hoodAd]),
		OnayliHoodlar[hoodid][hoodPickup],
	    OnayliHoodlar[hoodid][hoodPos][0],
	    OnayliHoodlar[hoodid][hoodPos][1],
	    OnayliHoodlar[hoodid][hoodPos][2],
	    OnayliHoodlar[hoodid][hoodPos][3]
	);
	format(query, sizeof(query), "%s WHERE hoodID = '%d'",
	    query,
	    OnayliHoodlar[hoodid][hoodID]
	);
	return mysql_tquery(dbHandle, query);
}

this:OnHoodCreated(hoodid)
{
	if (hoodid == -1 || !OnayliHoodlar[hoodid][hoodVarmi])
	    return 0;

	OnayliHoodlar[hoodid][hoodID] = cache_insert_id(dbHandle);
	Hood_Kaydet(hoodid);
	return 1;
}

Hood_Yenile(hoodid)
{
	if (hoodid != -1 && OnayliHoodlar[hoodid][hoodVarmi])
	{
		if (IsValidDynamic3DTextLabel(OnayliHoodlar[hoodid][hoodText3D]))
		    DestroyDynamic3DTextLabel(OnayliHoodlar[hoodid][hoodText3D]);

		if (IsValidDynamicPickup(OnayliHoodlar[hoodid][hoodPickup]))
		    DestroyDynamicPickup(OnayliHoodlar[hoodid][hoodPickup]);

        if (IsValidDynamicArea(OnayliHoodlar[hoodid][hZone])) DestroyDynamicArea(OnayliHoodlar[hoodid][hZone]);

        OnayliHoodlar[hoodid][hZone] = CreateDynamicRectangle(OnayliHoodlar[hoodid][hoodPos][0]-45, OnayliHoodlar[hoodid][hoodPos][1]-45, OnayliHoodlar[hoodid][hoodPos][0]+45, OnayliHoodlar[hoodid][hoodPos][1]+45, 0, 0);

		new string[1024];
		format(string,sizeof(string),"\
				[Onaylý Hood %d] \n\
				Birlik: %s \n\
		",hoodid, OnayliHoodlar[hoodid][hoodAd], OnayliHoodlar[hoodid][hoodAd]);

        OnayliHoodlar[hoodid][hoodPickup] = CreateDynamicPickup(1313, 23, OnayliHoodlar[hoodid][hoodPos][0], OnayliHoodlar[hoodid][hoodPos][1], OnayliHoodlar[hoodid][hoodPos][2], 0, 0);
		OnayliHoodlar[hoodid][hoodText3D] = CreateDynamic3DTextLabel(string, COLOR_SERVER2, OnayliHoodlar[hoodid][hoodPos][0], OnayliHoodlar[hoodid][hoodPos][1]+0.5, OnayliHoodlar[hoodid][hoodPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

  	}
	return 1;
}

Hood_Olustur(playerid, ad[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_ONAYLIHOOD; i ++)
		{
	    	if (!OnayliHoodlar[i][hoodVarmi])
		    {
            	x += 1.0 * floatsin(-angle, degrees);
				y += 1.0 * floatcos(-angle, degrees);

    	        OnayliHoodlar[i][hoodVarmi] = true;
    	        OnayliHoodlar[i][hoodPos][0] = x;
    	        OnayliHoodlar[i][hoodPos][1] = y;
    	        OnayliHoodlar[i][hoodPos][2] = z;
    	        OnayliHoodlar[i][hoodPos][3] = angle;
				format(OnayliHoodlar[i][hoodAd], 32, ad);
				Hood_Yenile(i);
				mysql_tquery(dbHandle, "INSERT INTO onaylihoodlar (hoodPickup) VALUES('0')", "OnHoodCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

CMD:hoodsil(playerid, params[])
{
	static
	    id = 0;

    if (PlayerInfo[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/hoodsil [hood id]");

	if ((id < 0 || id >= MAX_ONAYLIHOOD) || !OnayliHoodlar[id][hoodVarmi])
	    return SendErrorMessage(playerid, "Geçersiz onaylý hood ID.");

	Hood_Sil(id);
	SendServerMessage(playerid, "%d nolu onaylý hood baþarýyla silindi.", id);
	return 1;
}

CMD:hoodolustur(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params) || strlen(params) > 32)
	    return SendSyntaxMessage(playerid, "/hoodolustur [birlik ad]");

	new id = Hood_Olustur(playerid, params);

	if (id == -1)
	    return SendErrorMessage(playerid, "Sunucu onaylý hood sýnýrýna ulaþmýþtýr.");
	return 1;
}

/* GPS sistemi */

GPS_OnPlayerEnterDynamicCP(playerid, checkpointid)
{
    if (IsValidDynamicCP(pTemp[playerid][pWaypoint]) && checkpointid == pTemp[playerid][pWaypoint])
	{
	    GameTextForPlayer(playerid, "~r~X", 3000, 3);
	    DisableWaypoint(playerid);
	}
    return 1;
}

Waypoint_Set(playerid, Float: x, Float: y, Float: z, Float: radius = 3.0)
{
	if (IsValidDynamicCP(pTemp[playerid][pWaypoint]))
	{
		DestroyDynamicCP(pTemp[playerid][pWaypoint]);
        pTemp[playerid][pWaypoint] = 0;
	}

    pTemp[playerid][pWaypoint] = CreateDynamicCP(x, y, z, radius, 0, 0, playerid, 15000.0);
    TogglePlayerDynamicCP(playerid, pTemp[playerid][pWaypoint], true);
    Streamer_Update(playerid, STREAMER_TYPE_CP);
	return 1;
}

DisableWaypoint(playerid)
{
    if (IsValidDynamicCP(pTemp[playerid][pWaypoint])) DestroyDynamicCP(pTemp[playerid][pWaypoint]);

    pTemp[playerid][pWaypoint] = 0;
	return 1;
}

Dialog:DIALOG_GPS(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	switch(listitem) {
		case 0: { // lîcations
			new substr[48],
                str[sizeof(substr)*20 + 20] = "Lokasyon\t Mesafe";

			for(new i; i < MAX_INTERIORS; i++) {
				if (!AdminTeles[i][telesOn] || GPS_TELE_TYPE != AdminTeles[i][telesType]) continue;

				format(substr, sizeof(substr), "%.32s\t{33CC33}%i m", AdminTeles[i][telesMapName], GetPlayerDistanceToPointEx(playerid, AdminTeles[i][telesPosX], AdminTeles[i][telesPosY], AdminTeles[i][telesPosZ]));
                format(str, sizeof(str), "%s\n%s", str, substr);
            }

            if (isempty(substr)) format(str, sizeof(str), "%s\n{FF6347}BULUNMUYOR", str);

			Dialog_Show(playerid, DIALOG_GPS_LOCATION, DIALOG_STYLE_TABLIST_HEADERS, "GPS > Lokasyonlar", str, "Seç", "Geri");
		}
		case 1: { // biz
			new substr[80],
                str[sizeof(substr)*MAX_BIZ_TYPES+30] = "Tip\tAd\t Mesafe",
				id,
				Float:radius;

			for(new i; i < MAX_BIZ_TYPES; i++) {
				if ((id = GetClosestTypeBiz(playerid, i, radius)) == -1)	{
					format(substr, sizeof(substr), "%s\t{FF6347}BULUNMUYOR", biz_types[i]);
				} else {
					format(substr, sizeof(substr), "%s\t%s\t{33CC33}%.0f m", biz_types[i], BizInfo[id][bizName], radius);
				}
                format(str, sizeof(str), "%s\n%s", str, substr);
			}

            if (isempty(substr)) format(str, sizeof(str), "%s\n{FF6347}BULUNMUYOR", str);

			Dialog_Show(playerid, DIALOG_GPS_BIZ, DIALOG_STYLE_TABLIST_HEADERS, "GPS > Ýþ Yerleri", str, "Seç", "Geri");
		}
		case 2: { // Jobs
			new substr[64],
                str[sizeof(substr)*MAX_BIZ_TYPES+20] = "Meslekler\tMesafe",
				Float:radius;

			for(new i = 1; i < MAX_JOBS_TYPES; i++) {
				if (GetClosestTypeJob(playerid, i, radius) == -1) {
					format(substr, sizeof(substr), "%s\t{FF6347}BULUNMUYOR", jobs_names[i]);
				} else {
					format(substr, sizeof(substr), "%s\t{33CC33}%.0f m", jobs_names[i], radius);
				}
                format(str, sizeof(str), "%s\n%s", str, substr);
			}

            if (isempty(substr)) format(str, sizeof(str), "%s\n{FF6347}BULUNMUYOR", str);

			Dialog_Show(playerid, DIALOG_GPS_JOBS, DIALOG_STYLE_TABLIST_HEADERS, "GPS > Meslek", str, "Seç", "Geri");
		}
		case 3: Dialog_Show(playerid, DIALOG_GPS_ISYERI, DIALOG_STYLE_INPUT, "GPS > Ýþyeri Bul", "Bulacaðýnýz iþ yerinin ID'sini yazýnýz:", "Bul", "Geri");
		case 4: Dialog_Show(playerid, DIALOG_GPS_EV, DIALOG_STYLE_INPUT, "GPS > Ev Bul", "Bulacaðýnýz Ev ID'sini yazýnýz:", "Bul", "Geri");
	}
	return 1;
}

Dialog:DIALOG_GPS_EV(playerid, response, listitem, inputtext[])
{
	if(!response) return pc_cmd_gps(playerid, "");

	new houseid = strval(inputtext);
	if (houseid < 0 || houseid >= MAX_HOUSES)	return SendErrorMessage(playerid,"Geçersiz Ev ID.");
	if (!HouseInfo[houseid][hID])				return SendErrorMessage(playerid, "Böyle bir adres bulunamadý.");
	if (HouseInfo[houseid][hApart] && ApartInfo[HouseInfo[houseid][hApart]][aID] > 0 )	Waypoint_Set(playerid, ApartInfo[HouseInfo[houseid][hApart]][aPosX], ApartInfo[HouseInfo[houseid][hApart]][aPosY], ApartInfo[HouseInfo[houseid][hApart]][aPosZ]);
	else 							Waypoint_Set(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	SendSyntaxMessage(playerid, "Ev (%s) GPS'te iþaretlendi. (/cpsifirla)", (!HouseInfo[houseid][hApart])?(GetHouseZone(houseid)):(GetApartmentZone(HouseInfo[houseid][hApart])));
	return 1;
}

Dialog:DIALOG_GPS_ISYERI(playerid, response, listitem, inputtext[])
{
	if(!response) return pc_cmd_gps(playerid, "");
	new bizid = strval(inputtext);
	if(bizid < 0 || bizid >= MAX_BIZ)			return SendErrorMessage(playerid, "Geçersiz iþyeri/iþyeri ID'si.");
	if(!BizInfo[bizid][bizID])					return SendErrorMessage(playerid, "Böyle bir iþletme/iþyeri bulunamadý.");
	Waypoint_Set(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	SendSyntaxMessage(playerid, "Belirtilen iþletme/iþyeri GPS'te iþaretlendi. (/cpsifirla)");
	return 1;
}

Dialog:DIALOG_GPS_LOCATION(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_gps(playerid, "");

	new id;
	for(new i; i < MAX_INTERIORS; i++) {
		if (!AdminTeles[i][telesOn] || GPS_TELE_TYPE != AdminTeles[i][telesType]) continue;

		if (listitem == id) {
			id = i;
			break;
		} else id++;
	}

	Waypoint_Set(playerid, AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ]);
	SendClientMessageEx(playerid, COLOR_SERVER2, "'%s' adlý lokasyon haritada iþaretlendi. (/cpsifirla komutunu checkpoint sýfýrlamak için kullanabilirsiniz.)", AdminTeles[id][telesMapName]);
	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:DIALOG_GPS_BIZ(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_gps(playerid, "");

	new id, Float:radius;
	if ((id = GetClosestTypeBiz(playerid, listitem, radius)) == -1) return pc_cmd_gps(playerid, "");

	Waypoint_Set(playerid, BizInfo[id][bizPosX], BizInfo[id][bizPosY], BizInfo[id][bizPosZ]);
	SendClientMessageEx(playerid, COLOR_SERVER2, "[%s] %s adlý iþyeri haritanýzda iþaretlendi. (/cpsifirla komutunu checkpoint sýfýrlamak için kullanabilirsiniz.)", biz_types[listitem], BizInfo[id][bizName]);
	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:DIALOG_GPS_JOBS(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_gps(playerid, "");

	listitem++;

	new id, Float:radius;
	if ((id = GetClosestTypeJob(playerid, listitem, radius)) == -1) return pc_cmd_gps(playerid, "");

	Waypoint_Set(playerid, JobsInfo[id][jobX], JobsInfo[id][jobY], JobsInfo[id][jobZ]);
	SendClientMessageEx(playerid, COLOR_SERVER2, "'%s' adlý meslek haritanýzda iþaretlendi. (/cpsifirla komutunu checkpoint sýfýrlamak için kullanabilirsiniz.)", jobs_names[listitem]);
	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	return 1;
}

alias:gps("harita");
CMD:gps(playerid, params[])
{
	Dialog_Show(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "GPS > Ana Sayfa", "1. Popüler lokasyonlar\n2. Ýþyerleri \n3. Meslekler\n4. Ýþyeri bul\n5. Ev bul", "Seç", "Ýptal");
	return 1;
}

CMD:cpsifirla(playerid, params[])
{
	if(pTemp[playerid][pTruckerOn]) return false;
	if(pTemp[playerid][pPizzaBoy]) return false;

	SendSyntaxMessage(playerid, "Tüm checkpointler haritadan kaldýrýldý.");
	DisableWaypoint(playerid);
	return 1;
}

/* Gýda sistemi */

Food_OnGameModeInit()
{
	return mysql_tquery(dbHandle, "SELECT * FROM `foodstand`", "LoadDynamicStands");
}

Fo_OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	for(new i; i < MAX_FOOD_STAND; i++)
	{
		if (FoodStand[i][fPickUp] == pickupid)
		{
			CreateLableText(playerid,"~h~~p~TEZGAH~n~~y~\"Cluckin' Bell\"", "~w~~h~Yemek icin ~h~/yemekal~h~~w~ komutunu kullan");
			break;
		}
	}
	return 1;
}

this::LoadDynamicStands()
{
    new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows)
	{
	    print("[Tezgah] Kayit bulunamadi.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    cache_get_value_int(i, "id", FoodStand[i][fID]);
	    cache_get_value_int(i, "type", FoodStand[i][fType]);
	    cache_get_value_float(i, "posx", FoodStand[i][fPosX]);
	    cache_get_value_float(i, "posy", FoodStand[i][fPosY]);
	    cache_get_value_float(i, "posz", FoodStand[i][fPosZ]);
	    cache_get_value_float(i, "posrx", FoodStand[i][fPosRX]);
	    cache_get_value_float(i, "posry", FoodStand[i][fPosRY]);
	    cache_get_value_float(i, "posrz", FoodStand[i][fPosRZ]);

	    cache_get_value_int(i, "vw", FoodStand[i][fVW]);
	    cache_get_value_int(i, "interior", FoodStand[i][fInt]);

	    if (FoodStand[i][fType] == 1)
	    {
		    FoodStand[i][fObject] =	CreateDynamicObject(1340, FoodStand[i][fPosX], FoodStand[i][fPosY], FoodStand[i][fPosZ], FoodStand[i][fPosRX], FoodStand[i][fPosRY], FoodStand[i][fPosRZ], FoodStand[i][fVW], FoodStand[i][fInt], -1, 200.0);

		    if (FoodStand[i][fPosRZ] < -50.0)	FoodStand[i][fPosY] += (1.2 * floatcos((-FoodStand[i][fPosRZ]+90), degrees));
			if (FoodStand[i][fPosRZ] < -150.0) 	FoodStand[i][fPosX] += (1.2 * floatsin((-FoodStand[i][fPosRZ]+90), degrees));
			if (FoodStand[i][fPosRZ] >= 0.0) 	FoodStand[i][fPosX] += (1.2 * floatsin((-FoodStand[i][fPosRZ]+90), degrees));
			if (FoodStand[i][fPosRZ] > 50.0) 	FoodStand[i][fPosY] += (1.2 * floatcos((-FoodStand[i][fPosRZ]+90), degrees));
	    }

	    //FoodStand[i][fLabel] = CreateDynamic3DTextLabel(""EMBED_RED"["EMBED_WHITE"Ïàëàòêà ñ åäîé"EMBED_RED"]\n"EMBED_CYAN"/yemekal.", -1, FoodStand[i][fPosX], FoodStand[i][fPosY], FoodStand[i][fPosZ], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, FoodStand[i][fVW], FoodStand[i][fInt], -1, 100.0);
		FoodStand[i][fPickUp] =	CreateDynamicPickup(1239, 1, FoodStand[i][fPosX], FoodStand[i][fPosY], FoodStand[i][fPosZ], FoodStand[i][fVW], FoodStand[i][fInt], -1, 100.0);
	    FoodStand[i][fStandOn] = 1;

	    total++;
	}
	printf("[Tezgah] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

this::OnFoodStandInsert(StandID)
{
	return FoodStand[StandID][fID] = cache_insert_id();
}

AddFoodStandToFile(standid, type, Float:x, Float:y, Float:z, vw, interior)
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `foodstand` (type, posx, posy, posz, vw, interior) VALUES (%i, %f, %f, %f, %i, %i)", type, x, y, z, vw, interior);
	mysql_tquery(dbHandle, query, "OnFoodStandInsert", "d", standid);
	return 1;
}

Dialog:BuyStandFood(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	new price_food[4] = {PRICE_BURGER, PRICE_PIZZA, PRICE_CHICKEN, PRICE_HOTDOG}, name_food[4][8] = {"burger", "pizza", "tavuk", "hot-dog"};

	if (GetCash(playerid) < price_food[listitem])				return SendNotCash(playerid);

	switch(listitem)
	{
        case 0:
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) return SendWarningMessage(playerid, "Eliniz zaten dolu.");
            InfoMSG(playerid, "Yemegi yemek icin \" ~g~LKM ~w~\" tusuna basin ~n~Iptal etmek icin \" ~r~ENTER ~w~\" tusuna basin.", 5);

            new Float:health;
            AntiCheatGetHealth(playerid, health);

            if (health + 10 > 100.0) PlayerInfo[playerid][pHealth] = 100.0;
            else                    PlayerInfo[playerid][pHealth] = health + 10.0;

            SetPVarInt(playerid, #use_food, 5);
            SetPVarInt(playerid, #time_food, gettime());
            SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2703, 6, 0.055999, 0.028000, 0.008000, 2.599998, 0.000000, 16.599998, 0.844000, 0.871000, 0.870000);
            pc_cmd_server_ame(playerid, "burger yer.");
        }
        case 1:
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) return SendWarningMessage(playerid, "Eliniz zaten dolu.");
            InfoMSG(playerid, "Yemegi yemek icin \" ~g~LKM ~w~\" tusuna basin ~n~Iptal etmek icin \" ~r~ENTER ~w~\" tusuna basin.", 5);

            new Float:health;
            AntiCheatGetHealth(playerid, health);

            if (health + 15.0 > 100.0) PlayerInfo[playerid][pHealth] = 100.0;
            else                       PlayerInfo[playerid][pHealth] = health + 15.0;

            SetPVarInt(playerid, #use_food, 5);
            SetPVarInt(playerid, #time_food, gettime());
            SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2703, 6, 0.055999, 0.028000, 0.008000, 2.599998, 0.000000, 16.599998, 0.844000, 0.871000, 0.870000);
            pc_cmd_server_ame(playerid, "pizza yer.");
        }
        case 2:
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) return SendWarningMessage(playerid, "Eliniz zaten dolu.");

            InfoMSG(playerid, "Yemegi yemek icin \" ~g~LKM ~w~\" tusuna basin ~n~Iptal etmek icin \" ~r~ENTER ~w~\" tusuna basin.", 5);

            new Float:health;
            AntiCheatGetHealth(playerid, health);

            if (health + 7.0 > 100.0) PlayerInfo[playerid][pHealth] = 100.0;
            else                      PlayerInfo[playerid][pHealth] = health + 7.0;


            SetPVarInt(playerid, #use_food, 5);
            SetPVarInt(playerid, #time_food, gettime());
            SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2703, 6, 0.055999, 0.028000, 0.008000, 2.599998, 0.000000, 16.599998, 0.844000, 0.871000, 0.870000);
            pc_cmd_server_ame(playerid, "tavuk yer");
        }
        case 3:
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) return SendWarningMessage(playerid, "Eliniz zaten dolu.");

            InfoMSG(playerid, "Yemegi yemek icin \" ~g~LKM ~w~\" tusuna basin ~n~Iptal etmek icin \" ~r~ENTER ~w~\" tusuna basin.", 5);

            new Float:health;
            AntiCheatGetHealth(playerid, health);

            if (health + 5.0 > 100.0)    PlayerInfo[playerid][pHealth] = 100.0;
            else                       PlayerInfo[playerid][pHealth] = health + 5.0;


            SetPVarInt(playerid, #use_food, 5);
		    SetPVarInt(playerid, #time_food, gettime());
		    SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2703, 6, 0.055999, 0.028000, 0.008000, 2.599998, 0.000000, 16.599998, 0.844000, 0.871000, 0.870000);
            pc_cmd_server_ame(playerid, "hot-dog yer.");
        }
	}

	SendSyntaxMessage(playerid, "%s satýn aldýnýz, ödenen: $%i.", name_food[listitem], price_food[listitem]);
	GiveCash(playerid, -price_food[listitem]);
	return 1;
}

CMD:yemekal(playerid, params[])
{
	if (!CheckInv(playerid)) return SendErrorMessage(playerid, "Envanteriniz tamamen dolu.");

	for(new i; i != MAX_FOOD_STAND; i++)
	{
	    if (FoodStand[i][fStandOn] != 1 || !PlayerToPoint(3, playerid,FoodStand[i][fPosX], FoodStand[i][fPosY], FoodStand[i][fPosZ]) || FoodStand[i][fVW] != GetWorld(playerid) || FoodStand[i][fInt] != GetInterior(playerid)) continue;

		new mes[128];
		format(mes, sizeof(mes), "Burger\t$%i\nPizza\t$%i\nTavuk\t$%i\nSosisli\t$%i", PRICE_BURGER, PRICE_PIZZA, PRICE_CHICKEN, PRICE_HOTDOG);
		Dialog_Show(playerid, BuyStandFood, DIALOG_STYLE_TABLIST, "{ffffff}Tezgah", mes, "Satýn Al", "Ýptal");

		break;
	}
	return 1;
}

/* Birlik sistemi */

Fire_OnPlayerWeaponShot(playerid)
{
   /* if (GetPVarInt(playerid, #crt_fire) == 1)
	{
	    new Float:fOriginX, Float:fOriginY, Float:fOriginZ, Float:fHitPosX, Float:fHitPosY, Float:fHitPosZ;
		GetPlayerLastShotVectors(playerid, fOriginX, fOriginY, fOriginZ, fHitPosX, fHitPosY, fHitPosZ);

		new fireid = -1;
        new string[64];
		for(new i; i != MAX_FIRES; i++)
		{
		    if (FiresInfo[i][fireOn] != 0) continue;

			fireid = i;
			break;
		}

		if (fireid == -1)	return SendErrorMessage(playerid,"Maksimum yangýn sayýsýna ulaþýldý.");

		FiresInfo[fireid][fireOn] = 1;
		FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, GetWorld(playerid), GetInterior(playerid));
		FiresInfo[fireid][firePos][0] = fHitPosX;
		FiresInfo[fireid][firePos][1] = fHitPosY;
		FiresInfo[fireid][firePos][2] = fHitPosZ;
		FiresInfo[fireid][fireVW] = GetWorld(playerid);
		FiresInfo[fireid][fireInt] = GetInterior(playerid);
		FiresInfo[fireid][fireHealth] = 100;
		FiresInfo[fireid][fireTimer] = 1800;
        format(string, sizeof(string), "(ID:{FFFFFF}%d{FF6347})\nCan:{FFFFFF}100", fireid);
		SendServerMessage(playerid, "Yangýn oluþturuldu: [ID: %i]", fireid);
		FiresInfo[fireid][fireLabel] = CreateDynamic3DTextLabel(string, 0xFF6347FF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetWorld(playerid), GetInterior(playerid), -1, 100.0);

		return 0;
	}*/
    return 1;
}


forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	if (IsValidDynamicObject(objectid))
	    DestroyDynamicObject(objectid);

	return 0;
}
forward DestroyFire(objectid);
public DestroyFire(objectid)
{
	if (IsValidDynamicObject(objectid))
	    DestroyDynamicObject(objectid);

	return 0;
}
forward RandomFire();
public RandomFire()
{
	for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	{
	    g_aFireExtinguished[i] = 0;

	    if (IsValidDynamicObject(g_aFireObjects[i]))
	        DestroyDynamicObject(g_aFireObjects[i]);
	}
	switch (random(5))
	{
	    case 0:
	    {
			g_aFireObjects[0] = CreateDynamicObject(18691, 1930.4942, -1784.1799, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1930.5037, -1782.1473, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1930.5136, -1779.6364, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1930.5238, -1777.1058, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1930.5346, -1774.5141, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1930.5428, -1772.4306, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1930.5507, -1770.4219, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1930.5588, -1768.3559, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1929.1459, -1767.9173, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1928.8776, -1769.5853, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1928.8422, -1772.0158, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1928.8189, -1773.6047, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1928.8001, -1774.8883, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1928.7772, -1776.4462, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1928.7534, -1778.0637, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1928.7347, -1779.3225, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1928.7145, -1780.7152, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1928.6938, -1782.1208, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1928.6655, -1784.0491, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1935.3200, -1783.8045, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1935.2098, -1781.6428, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1935.0748, -1778.9934, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1934.9506, -1776.5572, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1934.8343, -1774.2791, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1934.7189, -1772.0156, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1934.6302, -1770.2773, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1934.5228, -1768.1666, 10.7728, 0.0, 0.0, 0.0);
		}
		case 1:
		{
			g_aFireObjects[0] = CreateDynamicObject(18691, 1238.8894, -1563.0980, 10.9999, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1241.6730, -1562.6481, 11.0068, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1243.2508, -1561.0845, 10.9444, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1245.5793, -1560.6265, 10.9450, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1247.4980, -1560.4841, 10.9455, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1249.9790, -1560.3701, 10.9539, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1249.5944, -1562.7432, 11.0053, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1247.4562, -1562.7996, 11.0045, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1245.7386, -1563.1572, 10.9990, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1243.7620, -1563.7636, 10.9896, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1242.2908, -1563.0959, 10.9999, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1242.3502, -1564.7818, 10.9740, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1244.8713, -1564.6507, 10.9760, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1246.8665, -1564.5694, 10.9772, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1249.1672, -1563.8638, 10.9881, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1250.8759, -1563.9959, 10.9861, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1252.2437, -1562.3538, 11.0113, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1252.4475, -1561.7529, 13.6369, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1250.9642, -1561.7822, 13.6519, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1248.5258, -1561.3541, 13.8278, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1245.9611, -1561.1191, 13.5507, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1242.7899, -1561.6608, 13.7519, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1250.3793, -1561.5445, 10.9462, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1252.8653, -1561.6358, 10.9468, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1252.9653, -1563.4675, 10.9942, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1252.5823, -1563.9747, 10.9864, 0.0, 0.0, 0.0);
		}
		case 2:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 1786.4844, -1164.2786, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1787.8876, -1164.3374, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1790.0416, -1164.8181, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1791.7430, -1165.1977, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1793.3637, -1165.5594, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1794.8229, -1165.8847, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1796.5830, -1166.2770, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1798.3182, -1166.6638, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1798.2283, -1166.9202, 22.1465, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1797.1246, -1166.2222, 22.5881, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1796.1480, -1165.5697, 22.5401, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1795.4377, -1165.1295, 22.1495, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1794.7139, -1164.6824, 21.4488, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1789.6914, -1164.0892, 22.3047, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1788.5687, -1163.1995, 22.3698, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1788.0295, -1162.8452, 21.9937, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1786.2319, -1163.1064, 21.8608, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1785.3194, -1163.1263, 21.9294, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1791.5643, -1163.1118, 21.3996, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1791.8800, -1164.3983, 22.2759, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1791.8519, -1165.1618, 22.5094, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1788.8287, -1163.4260, 22.0600, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1790.2512, -1164.0129, 21.2942, 0.0, 0.0, 0.0);
		}
		case 3:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 1315.0238, -1368.2282, 10.9438, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1314.0100, -1368.2265, 10.9438, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1312.6562, -1368.2235, 10.9399, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1311.8308, -1367.5294, 10.9296, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1310.9281, -1367.4926, 10.9273, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1309.7708, -1367.4902, 10.9252, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1308.6425, -1367.4877, 10.9232, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1307.3302, -1368.0213, 10.9332, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1306.0062, -1368.3232, 10.9355, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1304.3460, -1368.3197, 10.9354, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1304.4842, -1369.0036, 10.9451, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1305.8629, -1369.4384, 10.9513, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1307.2315, -1369.3804, 10.9512, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1309.0936, -1369.7593, 10.9550, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1310.8515, -1369.5230, 10.9544, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1312.0820, -1369.2214, 10.9522, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1309.4581, -1367.9462, 13.2241, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1307.8933, -1367.5498, 13.5101, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1307.3311, -1369.9162, 13.0364, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1306.5539, -1370.5288, 12.7001, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1310.9852, -1369.3835, 12.2585, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1310.3361, -1370.6992, 12.9585, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1313.2864, -1370.2733, 10.9708, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1313.3056, -1371.2634, 10.9838, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1311.6168, -1370.8870, 10.9735, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1308.9244, -1371.1181, 10.9726, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1306.5335, -1370.7678, 10.9712, 0.0, 0.0, 0.0);
		}
		case 4:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 997.7821, -910.8650, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 998.0914, -911.5863, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 998.2116, -913.0366, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 998.3492, -914.6963, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 998.4992, -916.5079, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 998.6508, -918.3324, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 998.7961, -920.0861, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 998.9600, -922.0629, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 999.1196, -923.9867, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 999.2616, -925.7003, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 999.4187, -927.5945, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 999.5601, -929.3013, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1000.5933, -931.6047, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1002.6428, -931.3463, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1004.6893, -931.3514, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1007.2104, -931.1424, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1009.8325, -930.9251, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1012.1341, -930.7343, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1014.4911, -930.5388, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1014.4734, -932.3157, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1013.0949, -932.3657, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1011.4746, -932.4245, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1009.7496, -932.4875, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1008.1029, -932.5473, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1006.0109, -932.6234, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1003.9039, -932.7000, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1002.0654, -932.7668, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[27] = CreateDynamicObject(18691, 1002.6585, -933.5130, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[28] = CreateDynamicObject(18691, 1004.5731, -933.4433, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[29] = CreateDynamicObject(18691, 1006.4688, -933.3743, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[30] = CreateDynamicObject(18691, 1008.4611, -933.3016, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[31] = CreateDynamicObject(18691, 1010.4176, -933.2304, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[32] = CreateDynamicObject(18691, 1012.0813, -933.1698, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[33] = CreateDynamicObject(18691, 1013.1374, -933.1314, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[34] = CreateDynamicObject(18691, 1015.3114, -933.0523, 39.5696, 0.0, 0.0, 0.0);
		}
	}
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(g_aFireObjects[0], fX, fY, fZ);

	foreach (new i : Player)
	{
	    if (OyuncuBirlik(i) == FACTION_FIRE)
	    {
			if(!PlayerInfo[i][pOnDuty]) return 1;
			Waypoint_Set(i, fX, fY, fZ, 10.0);
			SendFactionMessage(i, COLOR_LIGHTBLUE, "|__________] Acil Çaðrý [_________|");
			SendFactionMessage(i, COLOR_LIGHTBLUE, "Aranma Yeri: Ankesörlü Telefon");
			SendFactionMessage(i, COLOR_LIGHTBLUE, "Talep: Polis ve Ýtfaiye");
			SendFactionMessage(i, COLOR_LIGHTBLUE, "Lokasyon: %s", GetLocationZone(fX, fY, fZ));
			SendFactionMessage(i, COLOR_LIGHTBLUE, "Durum: %s adlý bölgede patlama sonucu yangýn çýktý acil itfaiye gerekiyor!", GetLocationZone(fX, fY, fZ));
			SendFactionMessage(i, COLOR_LIGHTBLUE, "|__________] Acil Çaðrý [_________|");
			SendFactionMessage(i, COLOR_SERVER2, "UYARI: Yönetim tarafýndan oluþturulmuþ bir acil çaðrýdýr!");
			SendFactionMessage(i, COLOR_SERVER2, "UYARI: Sistem bazlý bir çaðrý olduðu için, ekip yönlendirmesi gerekiyor.");
			SendFactionMessage(i, COLOR_SERVER2, "BÝLGÝ: Yangýn bölgesi haritanýzda kýrmýzý ile iþaretlendi.");
	    }
		if (OyuncuBirlik(i) == FACTION_POLICE)
	    {
			if(!PlayerInfo[i][pOnDuty]) return 1;
			Waypoint_Set(i, fX, fY, fZ, 10.0);
			SendFactionMessage(i, COLOR_LIGHTBLUE, "|__________] Acil Çaðrý [_________|");
			SendFactionMessage(i, COLOR_LIGHTBLUE, "Aranma Yeri: Ankesörlü Telefon");
			SendFactionMessage(i, COLOR_LIGHTBLUE, "Talep: Polis ve Ýtfaiye");
			SendFactionMessage(i, COLOR_LIGHTBLUE, "Lokasyon: %s", GetLocationZone(fX, fY, fZ));
			SendFactionMessage(i, COLOR_LIGHTBLUE, "Durum: %s adlý bölgede patlama sonucu yangýn çýktý acil itfaiye gerekiyor!", GetLocationZone(fX, fY, fZ));
			SendFactionMessage(i, COLOR_LIGHTBLUE, "|__________] Acil Çaðrý [_________|");
			SendFactionMessage(i, COLOR_SERVER2, "UYARI: Yönetim tarafýndan oluþturulmuþ bir acil çaðrýdýr!");
			SendFactionMessage(i, COLOR_SERVER2, "UYARI: Sistem bazlý bir çaðrý olduðu için, ekip yönlendirmesi gerekiyor.");
			SendFactionMessage(i, COLOR_SERVER2, "BÝLGÝ: Yangýn bölgesi haritanýzda kýrmýzý ile iþaretlendi.");
	    }
	}
	CreateExplosion(fX, fY, fZ, 11, 7.0);
	return 1;
}

CMD:ayanginolustur(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Bu komutu kullanmak için yetkiniz yok!");

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	RandomFire();

	GetDynamicObjectPos(g_aFireObjects[0], fX, fY, fZ);
	SendSyntaxMessage(playerid, "Rastgele bir yangýn oluþturdun. (%s).", GetLocationZone(fX, fY, fZ));
	return 1;
}

CMD:ayanginbitir(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Bu komutu kullanmak için yetkiniz yok!");

	for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	{
	    g_aFireExtinguished[i] = 0;

	    if (IsValidDynamicObject(g_aFireObjects[i]))
	        DestroyDynamicObject(g_aFireObjects[i]);
	}
	SendSyntaxMessage(playerid, "Yangýn bitirildi.");
	return 1;
}

forward LSMD_Drag(playerid, targetid);
public LSMD_Drag(playerid, targetid)
{
	if (PlayerInfo[targetid][pDragged] && PlayerInfo[targetid][pDraggedBy] == playerid)
	{
	    static Float:fX, Float:fY, Float:fZ, Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 1.5 * floatsin(-fAngle, degrees);
		fY -= 1.5 * floatcos(-fAngle, degrees);

		SetDynamicObjectPos(Sedye[playerid], fX, fY, fZ - 0.5);
		SetDynamicObjectRot(Sedye[playerid], 0.0000000, 0.0000000, fAngle);

		SetPlayerPos(targetid, fX, fY, fZ + 1.1000);

		ApplyAnimation(targetid, "SWAT", "gnstwall_injurd", 4.1, true, false, false, false, 0, false);

		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

Dialog:FIRELOCKER(playerid, response, listitem, inputtext[])
{
	if (!response)															return pc_cmd_isbasi(playerid, "");
    if (!PlayerInfo[playerid][pOnDuty])										return SendErrorMessage(playerid, "Ýlk önce göreve gitmelisin.");
    new locker_id = GetPlayerNearestLocker(playerid);
	if(locker_id < 1) return SendErrorMessage(playerid, "Bu komutu kullanmak için ekipman dolabýna yakýn olmalýsýnýz.");

	if(response)
	{
	    if(listitem == 0)	{ AC_GivePlayerWeapon(playerid, 9, 1); }
	    if(listitem == 1)	{ AC_GivePlayerWeapon(playerid, 42, 1550); }
	    if(listitem == 2)   { AC_ResetPlayerWeapons(playerid); }

	    GameTextForPlayer(playerid, "~g~+", 1500, 4);
    }
	Dialog_Show(playerid, FIRELOCKER, DIALOG_STYLE_LIST, "Ekipman", " Testere\n Yangýn Söndürücü\n{FF6347} Ekipmanlarý býrak", "Seç", "Geri Dön");
 	return 1;
}

CMD:sedye(playerid, params[])
{
	static
	    targetid;

    new option[10], secoption[5];
	new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionMedic(faction) && !IsFactionFire(faction))	return SendErrorMessage(playerid,"Saðlýk görevlisi veya itfaiyeci olmalýsýnýz.");
	if (IsPlayerInAnyVehicle(playerid))						return SendErrorMessage(playerid, "Bu iþlem için araçta olmamalýsýnýz.");
	if (sscanf(params, "u", targetid))
 	{
	 	SendHelpMessage(playerid, "/sedye [oyuncuid]");
		return 1;
	}
	if (pTemp[playerid][UsingBort]) {
			new idx = pTemp[playerid][UsingBort]-1, modelid = GetDynamicObjectModel(BortInfo[playerid][idx][bortObject]);

			DestroyDynamicObject(BortInfo[playerid][idx][bortObject]);

			new Float:x, Float:y, Float:z, Float:R;
			GetPlayerFacingAngle(playerid, R);
		  	GetXYInFrontOfPlayer(playerid, x, y, z, 1.5);
			BortInfo[playerid][idx][bortObject] = CreateDynamicObject(modelid, x, y, z - 0.5, 0.0, 0.0, 0.0, GetWorld(playerid), GetInterior(playerid));

			if (pTemp[playerid][UsingCorpse]) {
				new actorid = pTemp[playerid][UsingCorpse];
				SetActorPos(actorid, x, y, z + 0.60);
				SetActorFacingAngle(actorid, R);
				pTemp[playerid][UsingCorpse] = 0;
			}

			BortInfo[playerid][idx][bortUsing] = 0;
			pTemp[playerid][UsingBort] = 0;

			SendMedicMessage(playerid, "Sedyeyi býraktýn.");
			PlayerInfo[targetid][pDragged] = 0;
   			PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;

			KillTimer(PlayerInfo[targetid][pDragTimer]);
			return 1;
		}
	    if (!PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Ýlk önce göreve gitmelisin.");

  		new idx = -1;
		for(new i = 0; i < MAX_BORTES; i++)
		{
		    if (!BortInfo[playerid][i][bortOn]) continue;
			if (BortInfo[playerid][i][bortUsing] != 0) continue;

			new Float: x, Float: y, Float: z;
			GetDynamicObjectPos(BortInfo[playerid][i][bortObject], x, y, z);

			if (GetPlayerDistanceFromPoint(playerid, x, y, z) > 1.5) continue;

			new modelid = GetDynamicObjectModel(BortInfo[playerid][i][bortObject]);
			if (modelid != 1997 && modelid != 2146) continue;

			idx = i;
			break;
		}
		if (idx == -1) return SendErrorMessage(playerid, "Yakýnda sedye bulunmuyor! (/barikat) ");

		BortInfo[playerid][idx][bortUsing] = playerid+1;
		pTemp[playerid][UsingBort] = idx+1;
		pTemp[playerid][UsingCorpse] = 0;

		AttachDynamicObjectToPlayer(BortInfo[playerid][idx][bortObject], playerid, 0.00, 1.50, -0.50, 0.0, 0.0, 0.0);

	    SendMedicMessage(playerid, "Sedyeyý aldýn.");
		if (PlayerInfo[targetid][pDragged])
		{
  			PlayerInfo[targetid][pDragged] = 0;
	    	PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
		    KillTimer(PlayerInfo[targetid][pDragTimer]);
		}
		else
		{
  			PlayerInfo[targetid][pDragged] = 1;
	    	PlayerInfo[targetid][pDraggedBy] = playerid;
			PlayerInfo[targetid][pDragTimer] = SetTimerEx("DragUpdateSedye", 10, true, "dd", playerid, targetid);
			OnPlayAnim(targetid,"CRACK","crckidle1",3.0,0,1,1,1,0);
		}
	return 1;
}

CMD:terapi(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], userid;

	if (!IsFactionMedic(faction))					return SendErrorMessage(playerid, "Saðlýk görevlisi olmalýsýn.");
	if (PlayerInfo[playerid][pRank] < 3)			return SendErrorMessage(playerid, "3. seviyeden itibaren mevcuttur.");
	if (!PlayerInfo[playerid][pOnDuty])				return SendErrorMessage(playerid, "Ýlk önce göreve gitmelisin.");
	if (sscanf(params, "u", userid))				return SendHelpMessage(playerid, "/terapi [ID/Ýsim parçasý]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (userid == playerid)							return SendErrorMessage(playerid, "Geçersiz ID.");
	if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);
	if (PlayerInfo[userid][pDependence] == 0)		return SendErrorMessage(playerid, "Oyuncunun uyuþturucu baðýmlýlýðý yoktur. ");

    PlayerInfo[userid][pDependence] -= (PlayerInfo[userid][pDependence] < 20) ? (PlayerInfo[userid][pDependence]) : (20);
    pTemp[userid][pDemolitionTime] = 0;
	SetPlayerCurrentTimeAndWeather(userid);

	SendMedicMessage(userid, "%s %s adlý kiþi baðýmlýlýk puanýnýzý 20 azalttý.", GetRankName(playerid), GetNameWithMask(playerid));
    SendMedicMessage(playerid, "%s adlý kiþinin baðýmlýlýk puanýný 20 azalttýnýz.", GetNameWithMask(userid));

	return 1;
}

CMD:tedavi(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], userid;

	if (!IsFactionMedic(faction) && !IsFactionFire(faction))	return SendErrorMessage(playerid, "Saðlýk görevlisi veya itfaiyeci olmalýsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])							return SendErrorMessage(playerid, "Ýlk önce göreve gitmelisin. ");
	if (sscanf(params, "u", userid))							return SendHelpMessage(playerid, "/tedavi [ID / isim]");
	if (!IsPlayerLogged(userid))								return SendNotConnected(playerid);
	if (userid == playerid)										return SendErrorMessage(playerid, "Kendini tedavi etmek imkansýzdýr. ");
	if (!PlayerNearPlayer(3.0, playerid, userid))				return SendNotNearPlayer(playerid);
	if (PlayerInfo[userid][pInjured] != 1)						return SendErrorMessage(playerid, "Oyuncunun tedavi ihtiyacý yok. ");
	if (pTemp[userid][pInvulnerable] != 0.0)					return SendErrorMessage(playerid, "Daha sonra tekrar deneyin!");
    ResetDamages(userid);
    PlayerInfo[playerid][pHealth] = 100.0;
	StopPlayerAnims(userid);
	UnFreezePlayer(userid);

	SendMedicMessage(playerid, "%s adlý kiþiyi iyileþtirdiniz.", GetNameWithMask(userid));
	SendMedicMessage(userid, "%s %s adlý kiþi sizi iyileþtirdi.", GetRankName(playerid), GetNameWithMask(playerid));
	return 1;
}

CMD:sorgu(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], id, vehicle = GetPlayerVehicleID(playerid);

	if (!IsFactionMedic(faction) && !IsFactionFire(faction))	return SendErrorMessage(playerid, "Saðlýk görevlisi veya itfaiyeci olmalýsýnýz.");
	if (sscanf(params,"u",id))							return SendHelpMessage(playerid, "/sorgu [ID / isim]");
	if (!IsPlayerLogged(id))								return SendNotConnected(playerid);
	if (VehicleInfo[vehicle][carFaction] != faction)		return SendErrorMessage(playerid, "Kuruluþunuzun aracýnda olmalýsýnýz.");

	SendMedicMessage(playerid, "Bilgi - %s", GetFullDate());
	SendMedicMessage(playerid, "Ad Soyad: %s, Yaþ: %i, Telefon: %i.", GetNameEx(id), PlayerInfo[id][pAge], PlayerInfo[id][pNumber]);

	new count;
    for(new i; i < MAX_HOUSES; i++)
	{
	    if (HouseInfo[i][hID] == 0 || HouseInfo[i][hOwnerID] != PlayerInfo[id][pID])	continue;

		SendMedicMessage(playerid, "Kayýtlý adresler: %s.", (!HouseInfo[i][hApart])?(GetHouseZone(i)):(GetApartmentZone(HouseInfo[i][hApart])));
		count++;
		if (count > 4) break;
	}

	if (!count) SendMedicMessage(playerid, "Kayýt adresi bilinmiyor.");

	return 1;
}

CMD:mdsurukle(playerid, params[])
{
	new
	    userid, Float:oPos[4];

	if (OyuncuBirlik(playerid) != FACTION_FIRE && OyuncuBirlik(playerid) != FACTION_MEDICS)
		return SendErrorMessage(playerid, "LSMD Üyesi deðilsiniz.");

    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
		return SendErrorMessage(playerid, "Þu anda bu özelliði kullanamazsýnýz.");

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/mdsurukle [ID / isim]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirtilen kiþi oyunda deðil.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Bunu yapamazsýnýz.");

	if (!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if (PlayerInfo[userid][pInjured] == 0 && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && PlayerInfo[userid][pKelepceli])
	      return SendErrorMessage(playerid, "Bu kiþi etkisiz halde deðil.");

	if (PlayerInfo[userid][pDragged])
	{
	    PlayerInfo[userid][pDragged] = 0;
	    PlayerInfo[userid][pDraggedBy] = INVALID_PLAYER_ID;

	    KillTimer(PlayerInfo[userid][pDragTimer]);
	    DestroyDynamicObject(Sedye[playerid]);
	}
	else
	{
	    GetPlayerPos(userid, oPos[0], oPos[1], oPos[2]);
	    GetPlayerFacingAngle(playerid, oPos[3]);

	    if (IsValidDynamicObject(Sedye[playerid]))
	    	DestroyDynamicObject(Sedye[playerid]);

		Sedye[playerid] = CreateDynamicObject(1997, oPos[0], oPos[1], oPos[2] - 0.5, 0.0000000, 0.0000000, oPos[3], -1, -1, -1, STREAMER_OBJECT_SD, 25.0, -1, 0);

		SetPlayerPos(userid, oPos[0], oPos[1], oPos[2] + 1.5000);

	    PlayerInfo[userid][pDragged] = 1;
	    PlayerInfo[userid][pDraggedBy] = playerid;

		ApplyAnimation(userid, "SWAT", "gnstwall_injurd", 4.1, true, false, false, false, 0, false);

	    PlayerInfo[userid][pDragTimer] = SetTimerEx("LSMD_Drag", 1400, true, "dd", playerid, userid);	}
	return 1;
}

Faction_EditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    new Float:oldX, Float:oldY, Float:oldZ,
	Float:oldRotX, Float:oldRotY, Float:oldRotZ;

    GetDynamicObjectPos(modelid, oldX, oldY, oldZ);
	GetDynamicObjectRot(modelid, oldRotX, oldRotY, oldRotZ);

    if (GetPVarInt(playerid, #edit_faction) == 1 && (response || !response))
	{
	    DeletePVar(playerid, #edit_faction);
		RemovePlayerAttachedObject(playerid, index);

        AttachInfo[playerid][index][aBone] = boneid;
		AttachInfo[playerid][index][aOffsetX] = fOffsetX;
		AttachInfo[playerid][index][aOffsetY] = fOffsetY;
		AttachInfo[playerid][index][aOffsetZ] = fOffsetZ;
		AttachInfo[playerid][index][aRotX] = fRotX;
		AttachInfo[playerid][index][aRotY] = fRotY;
		AttachInfo[playerid][index][aRotZ] = fRotZ;
		AttachInfo[playerid][index][aScaleX] = fScaleX;
		AttachInfo[playerid][index][aScaleY] = fScaleY;
		AttachInfo[playerid][index][aScaleZ] = fScaleZ;
		UpdatePlayerAttach(playerid, index, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, boneid);

	   	AttachInfo[playerid][index][aUsed] = 1;
		SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);

		SendSyntaxMessage(playerid, "/aksesuar ile objeleri düzenleyebilirsin.");
		return 1;
	}
    return 1;
}

Factions_OnGameModeInit()
{
    mysql_tquery(dbHandle, "SELECT id FROM faction_lockers", "LoadLockers");
	mysql_tquery(dbHandle, "SELECT id FROM arrest_points", "LoadArrestPoints");
	//mysql_tquery(dbHandle, "SELECT * FROM `onaylihoodlar`", "Hood_Yukle");
    mysql_tquery(dbHandle, "SELECT * FROM `factions` ORDER BY `factionid`", "LoadDynamicFactions");
	return 1;
}

Fact_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ,
	Float:oldRotX, Float:oldRotY, Float:oldRotZ;

    GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	if (pTemp[playerid][pEditBort] != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
	    new bort = pTemp[playerid][pEditBort]-1;
	    pTemp[playerid][pEditBort] = 0;

	    if (BortInfo[playerid][bort][bortOn] == 0 || objectid != BortInfo[playerid][bort][bortObject])
			return SendErrorMessage(playerid, "Yanlýþ objeyi düzenliyorsunuz. ");

	    SetDynamicObjectPos(objectid, x, y, z);
	    SetDynamicObjectRot(objectid, rx, ry, rz);

	    SendSyntaxMessage(playerid, "'%s' adlý barikatýn pozisyonu deðiþtirildi.", BortInfo[playerid][bort][bortName]);
	}
	return 1;
}

this::LoadDynamicFactions()
{
	new rows = cache_num_rows(), time = GetTickCount(), total, id;

	if (!rows)
	{
	    print("[Birlik] Kayit bulunamadi.");
	    return 1;
	}

    mysql_tquery(dbHandle, "SELECT id FROM game_scenarios", "LoadScenarios");

	for(new i = 0; i < rows; i++)
	{
	    cache_get_value_int(i, "factionid", id);
		Factions[id][fON] = 1;
		cache_get_value_int(i, "id", Factions[id][fID]);
		cache_get_value(i, "name", Factions[id][fName], 32);
		cache_get_value(i, "shortname", Factions[id][fShortName], 8);
		cache_get_value_float(i, "spawnx", Factions[id][fPosX]);
		cache_get_value_float(i, "spawny", Factions[id][fPosY]);
		cache_get_value_float(i, "spawnz", Factions[id][fPosZ]);
		cache_get_value_int(i, "spawnint", Factions[id][fSpawnInt]);
		cache_get_value_int(i, "spawnvw", Factions[id][fSpawnVW]);
		cache_get_value_int(i, "joinrank", Factions[id][fJoinRank]);
		cache_get_value_int(i, "type", Factions[id][fType]);
		Factions[id][fRanks] = 20;

		for(new j = 0; j < 20; j++)
		{
			new field_name[32], temp[128];
			format(field_name, sizeof(field_name), "rank%i", j+1);

	        cache_get_value_name(i, field_name, temp, 128);
	        sscanf(temp, "p<,>iiiiiiiiis[32]",
			FRank[id][j][rInvite], FRank[id][j][rUninvite], FRank[id][j][rRank],
	        FRank[id][j][r_eRank], FRank[id][j][rSpawn], FRank[id][j][rChat], FRank[id][j][rTow],
	        FRank[id][j][rBodyCam], FRank[id][j][r_eRights], FactionRanks[id][j]);
		}

		cache_get_value_int(i, "chaton", Factions[id][fChatON]);
		cache_get_value_int(i, "color", Factions[id][fColor]);
		cache_get_value_int(i, "point", Factions[id][fPoint]);
		cache_get_value_int(i, "point_time", Factions[id][fPointTime]);

		//mysql_tquery(dbHandle, sprintf("SELECT * FROM factions WHERE factionid = %d", id), "LoadFactionRanks");

		if (IsFactionLegal(id)) {
			cache_get_value_float(i, "fix_X", Factions[id][Carfix][fixX]);
			cache_get_value_float(i, "fix_Y", Factions[id][Carfix][fixY]);
			cache_get_value_float(i, "fix_Z", Factions[id][Carfix][fixZ]);
			cache_get_value_int(i, "fix_Int", Factions[id][Carfix][fixInt]);
			cache_get_value_int(i, "fix_VW", Factions[id][Carfix][fixVW]);

			if (Factions[id][Carfix][fixX]) Factions[id][Carfix][fixPickUp] = CreateDynamicPickup(1650, 1, Factions[id][Carfix][fixX], Factions[id][Carfix][fixY], Factions[id][Carfix][fixZ], Factions[id][Carfix][fixVW], Factions[id][Carfix][fixInt], -1, 20.0);
		}

		total++;
	}
	printf("[Birlikler] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

stock OyuncuBirlik(playerid)
{
	if (PlayerInfo[playerid][pFaction] == -1)
	    return 0;

	return (Factions[PlayerInfo[playerid][pFaction]][fType]);
}

RemovePlayerFaction(userid)
{
    if (pTemp[userid][pPatrol])
	{
	    new id = pTemp[userid][pPatrol]-1;
	    pTemp[userid][pPatrol] = 0;

        if (PatrolInfo[GetPatrolID(userid)][id][patrulOfficer][0] == userid) PatrolInfo[GetPatrolID(userid)][id][patrulOfficer][0] = INVALID_PLAYER_ID;
        if (PatrolInfo[GetPatrolID(userid)][id][patrulOfficer][1] == userid) PatrolInfo[GetPatrolID(userid)][id][patrulOfficer][1] = INVALID_PLAYER_ID;
		if (PatrolInfo[GetPatrolID(userid)][id][patrulOfficer][0] == INVALID_PLAYER_ID && PatrolInfo[GetPatrolID(userid)][id][patrulOfficer][0] == INVALID_PLAYER_ID)
		{
		    PatrolInfo[GetPatrolID(userid)][id][patrulExists] = 0;
		}
	}

	if (PlayerInfo[userid][pOnDuty])
	{
		if (IsPlayerAttachedObjectSlotUsed(userid, 5))	RemovePlayerAttachedObject(userid, 5);
		if (IsPlayerAttachedObjectSlotUsed(userid, 6))	RemovePlayerAttachedObject(userid, 6);
		if (IsPlayerAttachedObjectSlotUsed(userid, 7))	RemovePlayerAttachedObject(userid, 7);

        SetPlayerArmour(userid, 0.0);
		Save_User(userid);
	}

    SetRadioChannel(userid, 0);
	SetRadioSlot(userid, 0);
	ClearAnimations(userid);

    for(new i; i < 5; i++) PlayerInfo[userid][pOlusumDivision][i] = 0;

	PlayerInfo[userid][pFaction] = 0;
	PlayerInfo[userid][pRank] = 0;
	PlayerInfo[userid][pBadgeNumber] = 0;
	PlayerInfo[userid][pOnDuty] = false;
	PlayerInfo[userid][pSwatDuty] = false;
	PlayerInfo[userid][pAuthwep] = 0;
	PlayerInfo[userid][pSwat] = 0;
	PlayerInfo[userid][pSideJob] = 0;
	PlayerInfo[userid][pChar] = 0;
	pTemp[userid][pNews] = 0;
	pTemp[userid][pInterview] = INVALID_PLAYER_ID;

	SQL_SetInteger("users", "faction", PlayerInfo[userid][pFaction], PlayerInfo[userid][pID]);
	SQL_SetInteger("users", "rank", PlayerInfo[userid][pRank], PlayerInfo[userid][pID]);

	SetPlayerSkin(userid, PlayerInfo[userid][pSkin]);

    if (IsAdminDuty(userid))	SetPlayerColor(userid, COLOR_BREEZEADMIN);
	else							SetPlayerColor(userid, TEAM_HIT_COLOR);

	return 1;
}

isLeader(playerid)
{
	return PlayerInfo[playerid][pFaction] != 0 && PlayerInfo[playerid][pRank] == Factions[PlayerInfo[playerid][pFaction]][fRanks] ? 1 : 0;
}

/*
stock SendFactionMessageF(faction, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		foreach(new i : Player)
		{
		    if (!IsPlayerLogged(i) || PlayerInfo[i][pFaction] != faction || (PlayerInfo[i][pSettings] & togFaction))
				continue;

			SendClientMessage(i, color, string);
		}

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
		return 1;
	}

	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || PlayerInfo[i][pFaction] != faction || (PlayerInfo[i][pSettings] & togFaction))
			continue;

		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendFactionMessage(faction, color, const str[], {Float,_}:...)
{
	printf("sf 0");
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	printf("sf 1");
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	printf("sf 2 : args = %i", args);

	if (args > 12)
	{
		printf("sf > args > 12");

		#emit ADDR.pri str
		#emit STOR.pri start

		printf("sf > 01");

		printf("\n\nfor (end = start + (args - 12); end > start; end -= 4)");
		printf("start = %i", start);
		printf("for (end = %i; end > %i; end -= 4)", start + (args - 12), start);

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}

		printf("sf > 02");

		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		printf(">> sf foreach start");
		//foreach(new i : Player)
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			printf(">> sf foreach: %i", i);
		    if (!IsPlayerLogged(i) || PlayerFactionType(i) != faction || 0 == PlayerInfo[i][pOnDuty])
				continue;

			printf(">> sf foreach: message for %i", i);
			SendClientMessage(i, color, string);
		}

		printf("sf > 03");

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN

		printf(">>>>> sf > end");
		return 1;
	}

	printf("sf foreach start");

	foreach(new i : Player)
	{
		printf("sf foreach: %i", i);
	    if (!IsPlayerLogged(i) || PlayerFactionType(i) != faction || 0 == PlayerInfo[i][pOnDuty])
			continue;

		printf("sf foreach: message for %i", i);
		SendClientMessage(i, color, str);
	}

	printf("end");
	return 1;
}
*/

SendFactionMessageF(factiontype, color, const str[], {Float,_}:...)
{
    static args, start, end, string[144];

    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if (args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args
        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach(Player, i)
        {
            if(!IsPlayerLogged(i) || Factions[PlayerInfo[i][pFaction]][fType] != factiontype || (PlayerInfo[i][pSettings] & togFaction)) continue;

            SendClientMessage(i, color, string);
        }
        return 1;
    }

    foreach(Player, i)
    {
		if(!IsPlayerLogged(i) || Factions[PlayerInfo[i][pFaction]][fType] != factiontype || (PlayerInfo[i][pSettings] & togFaction)) continue;

		SendClientMessage(i, color, str);
    }
    return 1;
}

SendFactionMessage(faction, color, const str[], {Float,_}:...)
{
    static args, start, end, string[144];

    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if (args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args
        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach(Player, i)
        {
            if(!IsPlayerLogged(i) || PlayerInfo[i][pFaction] != faction) continue;

            SendClientMessage(i, color, string);
        }
        return 1;
    }

    foreach(Player, i)
    {
        if(!IsPlayerLogged(i) || PlayerInfo[i][pFaction] != faction) continue;

        SendClientMessage(i, color, str);
    }
    return 1;
}

stock SendPhoneMessageEx(target, color, const str[], {Float,_}:...)
{
    static args, start, end, string[144];

    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if (args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args
        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach(Player, i)
        {
            if(!IsPlayerLogged(i) || (pTemp[i][pTracePlayer] != target && i != target)) continue;

            SendClientMessage(i, color, string);
        }
        return 1;
    }

    foreach(Player, i)
    {
        if(!IsPlayerLogged(i) || (pTemp[i][pTracePlayer] != target && i != target)) continue;

        SendClientMessage(i, color, str);
    }
    return 1;
}

CreateFactionVehicle(bool: crt, model, Float: x, Float: y, Float: z, Float: a, color1, color2, type, faction, plate[], vw, interior, sqlid = 0)
{
	new vehicle;

    if (IsFactionLegal(faction))					vehicle = CreateVehicle(model, x, y, z, a, color1, color2, -1, 1);
 	else											vehicle = CreateVehicle(model, x, y, z, a, color1, color2, -1);

    if (vehicle == INVALID_VEHICLE_ID)				return 0;

	SetVehicleHealth(vehicle, 1000.0);
	SetVehicleNumberPlate(vehicle, plate);
 	SetVehicleVirtualWorldEx(vehicle, vw);
	SetVehicleInteriorEx(vehicle, interior);

	VehicleInfo[vehicle][carModel] = model;
	VehicleInfo[vehicle][carParkX] = x;
	VehicleInfo[vehicle][carParkY] = y;
	VehicleInfo[vehicle][carParkZ] = z;
	VehicleInfo[vehicle][carParkA] = a;
	VehicleInfo[vehicle][carColor1] = color1;
	VehicleInfo[vehicle][carColor2] = color2;
	VehicleInfo[vehicle][carType] = type;
	VehicleInfo[vehicle][carFaction] = faction;
	VehicleInfo[vehicle][carVW] = vw;
	VehicleInfo[vehicle][carInt] = interior;
    VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(vehicle));
    VehicleInfo[vehicle][carDriver] = INVALID_PLAYER_ID;
	VehicleInfo[vehicle][carBattery] = 100.00;
	VehicleInfo[vehicle][carEngine] = 100.00;

	VehicleLight(vehicle, false);

	format(VehicleInfo[vehicle][carPlate], 24, plate);

	if (crt)
	{
	    new query[128 + 256];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `cars` (`date`,`model`,`x`,`y`,`z`,`fa`,`color1`,`color2`,`type`,`faction`,`plate`,`vw`,`int`) VALUES ('%s',%i, %f, %f, %f, %f, %i, %i, %i, %i, '%e', %i, %i)",
		GetFullDate(), model, x, y, z, a, color1, color2, type, faction, plate, vw, interior);
		mysql_tquery(dbHandle, query, "OnVehicleInsert", "d", vehicle);
	}
	else VehicleInfo[vehicle][carID] = sqlid;

	return vehicle;
}

IsPlayerAtSecondUniform(playerid)
{
	new vehicle;
	if ((vehicle = GetPlayerVehicleID(playerid)) == 0) return 0;


	if (IsPlayerFactionPolice(playerid) && GetVehicleModel(vehicle) == 427) return 1;
	else if (IsPlayerFactionMedic(playerid) && IsFactionMedic(VehicleInfo[vehicle][carFaction])) return 1;
	else if (IsPlayerFactionFire(playerid) && IsFactionFire(VehicleInfo[vehicle][carFaction])) return 1;

	return 0;
}

DestroyAllBort(playerid)
{
	for(new i; i < MAX_BORTES; i++)
	{
	    if (BortInfo[playerid][i][bortOn] == 0) continue;

        BortInfo[playerid][i][bortOn] = 0;
		BortInfo[playerid][i][bortUsing] = 0;
		BortInfo[playerid][i][bortName] = EOS;

	    if (IsValidDynamicObject(BortInfo[playerid][i][bortObject])) DestroyDynamicObject(BortInfo[playerid][i][bortObject]);

       	BortInfo[playerid][i][bortObject] = INVALID_OBJECT_ID;
	}
	return 1;
}

AddFactionToFile(factionid, shortname[], name[], color, type, ranks, pointtime, joinrank = 1)
{
    new query[999];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `factions` (factionid,shortname,name,color,type,ranks,point_time,joinrank) VALUES (%i,'%s','%s',%i,%i,%i,%i, %i)", factionid, shortname, name, color, type, ranks, pointtime, joinrank);
	mysql_tquery(dbHandle, query, "FactionInsertId", "i", factionid);
	return 1;
}

this::FactionInsertId(factionid)
{
	Factions[factionid][fID] = cache_insert_id();
	return 1;
}

UpdateFactionRankLeader(FactionID)
{
	new query[777];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `rank20` = '1,1,1,1,1,1,1,1,1,Lider' WHERE `factionid` = %i", FactionID);
	mysql_tquery(dbHandle, query);
	return 1;
}

Save_Faction(factionid)
{

    new query[1024];
    mysql_format(dbHandle, query, sizeof(query),
       "UPDATE `factions` SET `shortname`='%s',`name`='%s',`spawnx`=%f,`spawny`=%f,`spawnz`=%f,`joinrank`=%d,`type`=%d,`ranks`=%d,`chaton`=%d,`color`=%d,`spawnvw`=%d,`point`=%d,`point_time`=%d, `spawnint`=%d WHERE `id` = %d",
        Factions[factionid][fShortName], Factions[factionid][fName], Factions[factionid][fPosX], Factions[factionid][fPosY], Factions[factionid][fPosZ],
        Factions[factionid][fJoinRank], Factions[factionid][fType], Factions[factionid][fRanks], Factions[factionid][fChatON], Factions[factionid][fColor], Factions[factionid][fSpawnVW], Factions[factionid][fPoint], Factions[factionid][fPointTime], Factions[factionid][fSpawnInt],
        Factions[factionid][fID]);
    mysql_tquery(dbHandle, query);

    mysql_format(dbHandle, query, sizeof(query),
        "UPDATE `factions` SET `uniform_x`=%d,`uniform_y`=%d,`uniform_z`=%f,`uniform_vw`=%d,`uniform_int`=%d WHERE `id` = %d",
        Factions[factionid][fUniformX], Factions[factionid][fUniformY], Factions[factionid][fUniformZ], Factions[factionid][fUniformVW], Factions[factionid][fUniformInt],
        Factions[factionid][fID]);
    mysql_tquery(dbHandle, query);

    for (new j = 0; j < 20; j++)
    {
        UpdateFactionRank(j);
    }

    return 1;
}

UpdateFactionRank(FactionID, Rank)
{
	new query[777], update_string[444];
	format(update_string, sizeof(update_string), "%i,%i,%i,%i,%i,%i,%i,%i,%i,%s",
	FRank[FactionID][Rank-1][rInvite], FRank[FactionID][Rank-1][rUninvite], FRank[FactionID][Rank-1][rRank], FRank[FactionID][Rank-1][r_eRank],
	FRank[FactionID][Rank-1][rSpawn], FRank[FactionID][Rank-1][rChat], FRank[FactionID][Rank-1][rTow], FRank[FactionID][Rank-1][rBodyCam],
	FRank[FactionID][Rank-1][r_eRights], FactionRanks[FactionID][Rank-1]);
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `rank%i` = '%s' WHERE `factionid` = %i", Rank, update_string, FactionID);
	mysql_tquery(dbHandle, query);
	return 1;
}

ShowRightsForRank(playerid, listitem)
{
	new faction_rights[750] = "{FFFFFF}Ýzin\tEriþim\tKomut";
	new right[9][16], faction = PlayerInfo[playerid][pFaction];

	if (FRank[faction][listitem][rInvite])		format(right[0], 16, "%s", RIGHT_YES);
	else 										format(right[0], 16, "%s", RIGHT_NO);

	if (FRank[faction][listitem][rUninvite])	format(right[1], 16, "%s", RIGHT_YES);
	else										format(right[1], 16, "%s", RIGHT_NO);

	if (FRank[faction][listitem][rRank])		format(right[2], 16, "%s", RIGHT_YES);
	else 										format(right[2], 16, "%s", RIGHT_NO);

	if (FRank[faction][listitem][r_eRank])		format(right[3], 16, "%s", RIGHT_YES);
	else 										format(right[3], 16, "%s", RIGHT_NO);

	if (FRank[faction][listitem][rSpawn])		format(right[4], 16, "%s", RIGHT_YES);
	else 										format(right[4], 16, "%s", RIGHT_NO);

	if (FRank[faction][listitem][rChat])		format(right[5], 16, "%s", RIGHT_YES);
	else										format(right[5], 16, "%s", RIGHT_NO);

	if (FRank[faction][listitem][rTow])			format(right[6], 16, "%s", RIGHT_YES);
	else 										format(right[6], 16, "%s", RIGHT_NO);

    if(IsFactionLegal(faction))
	{
	    if (FRank[faction][listitem][rBodyCam])		format(right[7], 16, "%s", RIGHT_YES);
	    else 										format(right[7], 16, "%s", RIGHT_NO);

	    if (FRank[faction][listitem][r_eRights])	format(right[8], 16, "%s", RIGHT_YES);
	    else 										format(right[8], 16, "%s", RIGHT_NO);
	}

	for(new i = 0; i < 9; i++)
	{
		format(faction_rights, sizeof(faction_rights), "%s\n%s\t%s\t%s", faction_rights, RS[i][right_name], right[i], RS[i][right_cmd]);
	}

	new title[32];
	format(title, sizeof(title), "{9189EF}%s", FactionRanks[faction][listitem]);
	SetPVarInt(playerid, "Faction:RankEdit", listitem+1);

	Dialog_Show(playerid, FactionSettings_Set, DIALOG_STYLE_TABLIST_HEADERS, title, faction_rights, "Düzenle", "Geri");

	return 1;
}

ShowMyRights(playerid)
{
	new faction_rights[750] = "{FFFFFF}Ýzin\tEriþim\tVar/Yok";
	new right[9][16], faction = PlayerInfo[playerid][pFaction], rank = PlayerInfo[playerid][pRank]-1;

	if (FRank[faction][rank][rInvite])		format(right[0], 16, "%s", RIGHT_YES);
	else 									format(right[0], 16, "%s", RIGHT_NO);

	if (FRank[faction][rank][rUninvite])	format(right[1], 16, "%s", RIGHT_YES);
	else									format(right[1], 16, "%s", RIGHT_NO);

	if (FRank[faction][rank][rRank])		format(right[2], 16, "%s", RIGHT_YES);
	else 									format(right[2], 16, "%s", RIGHT_NO);

	if (FRank[faction][rank][r_eRank])		format(right[3], 16, "%s", RIGHT_YES);
	else 									format(right[3], 16, "%s", RIGHT_NO);

	if (FRank[faction][rank][rSpawn])		format(right[4], 16, "%s", RIGHT_YES);
	else 									format(right[4], 16, "%s", RIGHT_NO);

	if (FRank[faction][rank][rChat])		format(right[5], 16, "%s", RIGHT_YES);
	else									format(right[5], 16, "%s", RIGHT_NO);

	if (FRank[faction][rank][rTow])			format(right[6], 16, "%s", RIGHT_YES);
	else 									format(right[6], 16, "%s", RIGHT_NO);

	if (FRank[faction][rank][rBodyCam])			format(right[7], 16, "%s", RIGHT_YES);
	else 									format(right[7], 16, "%s", RIGHT_NO);

	if (FRank[faction][rank][r_eRights])	format(right[8], 16, "%s", RIGHT_YES);
	else 									format(right[8], 16, "%s", RIGHT_NO);

	for(new i = 0; i < 9; i++)
	{
		format(faction_rights, sizeof(faction_rights), "%s\n%s\t%s\t%s", faction_rights, RS[i][right_name], right[i], RS[i][right_cmd]);
	}

	new title[32];
	format(title, sizeof(title), "{9189EF}%s", FactionRanks[faction][rank]);
	Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, title, faction_rights, "Kapat", "");
	return 1;
}

Dialog:CITYGUN(playerid, response, listitem, inputtext[])
{
	if (!response)															return pc_cmd_isbasi(playerid, "");
    if (!IsPlayerFactionCity(playerid))										return 1;
    if (!PlayerInfo[playerid][pOnDuty])										return SendErrorMessage(playerid, "Ýlk önce göreve gitmelisin.");
    new locker_id = GetPlayerNearestLocker(playerid);
	if(locker_id < 1) return SendErrorMessage(playerid, "Bu komutu kullanmak için ekipman dolabýna yakýn olmalýsýnýz.");

	GameTextForPlayer(playerid, "~r~-", 1500, 4);

	GameTextForPlayer(playerid, "~g~+", 1500, 4);

	Dialog_Show(playerid, CITYGUN, DIALOG_STYLE_LIST, "Ekipman Dolabý", " Desert Eagle ( .50AE .ext )\n\t{ffc46a}- Extra þarjör al (.50AE .ext)\n{FFFFFF}  MP5 (9x19mm .ext)\n\t{ffc46a} - Extra þarjör al (9x19mm .ext)\n{FFFFFF}  M4 (5.56x45mm (drum))\n\t{ffc46a} - Extra þarjör al (5.56x45mm (drum))\n\t{ffc46a} - Extra þarjör al (5.56x45mm (plastik))\n{FF6347}  Tüm silahlarýný teslim et", "Seç", "Kapat");
 	return 1;
}

Dialog:DOCSGUN(playerid, response, listitem, inputtext[])
{
	if (!response)															return pc_cmd_isbasi(playerid, "");
    if (!IsPlayerFactionDocs(playerid))										return 1;
	if (!PlayerInfo[playerid][pOnDuty])										return SendErrorMessage(playerid, "Ýlk önce göreve gitmelisin.");
    new locker_id = GetPlayerNearestLocker(playerid);
	if(locker_id < 1) return SendErrorMessage(playerid, "Bu komutu kullanmak için ekipman dolabýna yakýn olmalýsýnýz.");

	GameTextForPlayer(playerid, "~r~-", 1500, 4);
	GameTextForPlayer(playerid, "~g~+", 1500, 4);

	Dialog_Show(playerid, DOCSGUN, DIALOG_STYLE_LIST, "Ekipman Dolabý"," {FFFFFF}  Jop\n Biber Gazý\n Desert Eagle (.50AE .ext)\n\t{ffc46a} - Daha fazla þarjör (.50AE .ext)\n{FFFFFF}  MP5 (9x19mm .ext)\n\t{ffc46a} - Daha fazla þarjör (9x19mm .ext)\n{FFFFFF}  Shotgun (12-G BIRDSHOT)\n\t{ffc46a} - Daha fazla þarjör (12-G BIRDSHOT)\n\t{ffc46a} - Plastik mermiler (12-G BEANBAG)\n{FFFFFF}  Ì4 (5.56x45mm (drum))\n\t{ffc46a} - Ekstra þarjörler (5.56x45mm (drum))\n\t{ffc46a} - Plastik mermiler (5.56x45mm (plastik))\n{FFFFFF}  Sniper Rifle (7.62x51mm)\n\t{ffc46a} - Ekstra þarjörler (7.62x51mm)\n{FFFFFF}  Sis bombasý\n Kamera\n{FF6347}  Tüm silahlarý teslim et "," Seç "," Kapat ");
	return 1;
}

Dialog:MODEL_SELECTION_UNIFORM(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

    new locker_id = GetPlayerNearestLocker(playerid);
	if(locker_id < 1) return SendErrorMessage(playerid, "Bu komutu kullanmak için ekipman dolabýna yakýn olmalýsýnýz.");

	new modelid = strval(inputtext);

	PlayerInfo[playerid][pChar] = modelid;
	SetPlayerSkin(playerid, modelid);
	Save_User(playerid);
	return 1;
}

Dialog:MODEL_SELECTION_SHAPE(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	if (!IsFactionFire(PlayerInfo[playerid][pFaction])) return SendErrorMessage(playerid, "LSFD üyesi olmalýsýnýz.");
	if (!PlayerInfo[playerid][pOnDuty])					return SendErrorMessage(playerid, "Üniformaný deðiþtirmek için önce iþbaþý yapmalýsýn (/isbasi). ");

	if (listitem == 0)		listitem = 277;
	else if (listitem == 1)	listitem = 278;
	else if (listitem == 2)	listitem = 279;
	else if (listitem == 3)	listitem = 191;

	SetPlayerSkin(playerid, listitem);
	return 1;
}

Dialog:MODEL_SELECTION_BORT(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

    new faction = PlayerInfo[playerid][pFaction];

	if (!IsFactionLegal(faction))		return SendErrorMessage(playerid, "Legal oluþum üyesi olmalýsýn.");
    if (IsPlayerInAnyVehicle(playerid))	return SendErrorMessage(playerid, "Bu iþlem için araçta olmamalýsýn.");
    if (!PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Bu fonksiyon için iþbaþýnda olmalýsýnýz. (/isbasi).");

	for(new i=0; i<MAX_BORTES;i++)
	{
	    if (BortInfo[playerid][i][bortOn] != 0) continue;

		new modelid;
		if (IsFactionMedic(faction) || IsFactionFire(faction))	modelid = bort_list_fd[listitem];
		else if (IsFactionCity(faction))						modelid = bort_list_city[listitem];
		else													modelid = bort_list[listitem];

	    new Float:x, Float:y, Float:z;

	  	GetXYInFrontOfPlayer(playerid, x, y, z, 1.5);

		BortInfo[playerid][i][bortOn] = 1;
		BortInfo[playerid][i][bortUsing] = 0;
		BortInfo[playerid][i][bortObject] = CreateDynamicObject(modelid, x, y, z - 0.5, 0.0, 0.0, 0.0, GetWorld(playerid), GetInterior(playerid));
		EditDynamicObject(playerid, BortInfo[playerid][i][bortObject]);
		format(BortInfo[playerid][i][bortName], 32, "%s", (IsFactionMedic(faction) || IsFactionFire(faction))?(bort_names_fd[listitem]):((IsFactionCity(faction))?(bort_names_city[listitem]):(bort_names[listitem])));

		pTemp[playerid][pEditBort] = i+1;
	    return 1;
	}

	SendErrorMessage(playerid, "Maksimum 15 adet engel koyabilirsin.");
    return 1;
}

FireOnline()
{
    new count = 0;
    foreach(new i : Player)
    {
        if (IsPlayerLogged(i) == 0)		continue;
		if (IsPlayerFactionFire(i))	continue;
		if (IsPlayerAFK(i))				continue;
		if (!PlayerInfo[i][pOnDuty])		continue;

        count++;
    }
   	if (count < NEED_FIRE_TO_CRIME)	return 0;
	else 							return 1;
}

stock EditFactionSkin(id = 0, faction_id = -1, model_id = -1)
{
    new query[75 + (11 * 3) + 1];

    if(id < 1)
    {
        mysql_format(dbHandle, query, sizeof(query), "INSERT INTO faction_skins SET faction_id = '%d', model_id = '%d'", faction_id, model_id);
    }

    else
    {
        mysql_format(dbHandle, query, sizeof(query), "UPDATE faction_skins SET");

        if(faction_id != -1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, faction_id = '%d'", query, faction_id);
        }

        if(model_id != -1)
        {
            mysql_format(dbHandle, query, sizeof(query), "%s, model_id = '%d'", query, model_id);
        }

        if(strfind(query, ", ") != -1)
            strdel(query, strfind(query, ", "), strfind(query, ", ") + 1);

        mysql_format(dbHandle, query, sizeof(query), "%s WHERE id = '%d'", query, id);
    }

    return query;
}

stock GetFactionSkin(const fields[] = "faction_skins.*", const joins[] = "", const wheres[] = "", page = 1, limit = -1, sqlid = -1, faction_id = -1, model_id = -1)
{
    new query[512];

    format(query, sizeof(query), "SELECT %s FROM faction_skins", fields);

    if(!isnull(joins))
    {
        format(query, sizeof(query), "%s %s", query, joins);
    }

    format(query, sizeof(query), "%s WHERE 1", query);

    if(sqlid != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND faction_skins.id = '%d'", query, sqlid);
    }

    if(faction_id != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND faction_skins.faction_id = '%d'", query, faction_id);
    }

    if(model_id != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND faction_skins.model_id = '%d'", query, model_id);
    }

    if(!isnull(wheres))
    {
        format(query, sizeof(query), "%s AND %s", query, wheres);
    }

    mysql_format(dbHandle, query, sizeof(query), "%s ORDER BY faction_skins.id DESC", query);

    if(limit == -1)
        mysql_format(dbHandle, query, sizeof(query), "%s LIMIT %d, 10000", query, ((page - 1) * ITEM_PER_PAGE));
    else
        mysql_format(dbHandle, query, sizeof(query), "%s LIMIT %d, 1", query, ((page - 1) * ITEM_PER_PAGE) + limit);

    return query;
}

this::DisplayFactionSkins(playerid)
{
	new rows = cache_num_rows();

	if(rows)
	{
        new bigstr[4096];

		new skin_id;

		for(new i = 0; i < rows; i++)
		{
			cache_get_value_int(i, "model_id", skin_id);

			format(bigstr, sizeof(bigstr), "%s%d\n", bigstr, skin_id);
		}

		Dialog_Show(playerid, MODEL_SELECTION_UNIFORM, DIALOG_STYLE_PREVIEW_MODEL, "Birlik Kiyafetleri", bigstr, "Sec", "Kapat");
	}

	else SendErrorMessage(playerid, "Birlik kýyafeti bulunamadý.");

	return 1;
}

this::OnStaffListFactionSkins(playerid)
{
    new rows = cache_num_rows();

    if(rows)
    {
        new bigstr[4096];

        new id, faction_id, model_id;

        for(new i = 0; i < rows; i++)
        {
            cache_get_value_int(i, "id", id);
            cache_get_value_int(i, "faction_id", faction_id);
            cache_get_value_int(i, "model_id", model_id);

            format(bigstr, sizeof(bigstr), "%s%d\tID: %D~n~B: %d~n~M: %d\n", bigstr, model_id, id, faction_id, model_id);
        }

        Dialog_Show(playerid, 0, DIALOG_STYLE_PREVIEW_MODEL, "Birlik Kýyafetleri", bigstr, "Kapat", "");
    }

    else SendErrorMessage(playerid, "Listelenebilecek birlik kýyafeti verisi bulunamadý.");

    return 1;
}

this::OnStaffEditFactionSkinModel(playerid, skin_id, model_id)
{
    new rows = cache_affected_rows();

    if(rows)
    {
        SendAdmMessage("%s, %d numaralý birlik skininin modelini %d olarak deðiþtirdi.", GetNameEx(playerid), skin_id, model_id);
    }

    else SendErrorMessage(playerid, "Birlik kýyafeti için deðiþiklik gerçekleþtirilmedi.");

    return 1;
}

this::OnStaffEditFactionSkinFaction(playerid, skin_id, faction_id)
{
    new rows = cache_affected_rows();

    if(rows)
    {
        SendAdmMessage("%s, %d numaralý birlik skininin birliðini %d olarak deðiþtirdi.", GetNameEx(playerid), skin_id, faction_id);
    }

    else SendErrorMessage(playerid, "Birlik kýyafeti için deðiþiklik gerçekleþtirilmedi.");

    return 1;
}

this::OnStaffDeleteFactionSkin(playerid, faction_id, model_id)
{
    new rows = cache_affected_rows();

    if(rows)
    {
        SendAdmMessage("%s, %d numaralý birliðin %d model numaralý skinini kaldýrdý.", GetNameEx(playerid), faction_id, model_id);
    }

    else SendErrorMessage(playerid, "Geçersiz deðerler girdiniz.");

    return 1;
}

this::OnStaffCreateFactionSkin(playerid, faction_id, model_id)
{
    new skin_id = cache_insert_id();

    SendAdmMessage("%s, %d numarasýyla %d numaralý birliðe %d modelini skin olarak ekledi.", GetNameEx(playerid), skin_id, faction_id, model_id);

    return 1;
}

this::FACTION_DELETE(playerid, response)
{
	if(!response) return pc_cmd_birlik(playerid, "");
	new faction = PlayerInfo[playerid][pFaction];

	if (IsFactionLegal(faction)) return SendErrorMessage(playerid, "Devlet kurumlarý sadece geliþtiriciler tarafýndan kapatýlablilir.");

	if (!isLeader(playerid)) return SendErrorMessage(playerid, "Birliðin lideri olmalýsýnýz.");

	if (IsValidDynamicPickup(Factions[faction][fPickUp])) DestroyDynamicPickup(Factions[faction][fPickUp]);

	new query[256];

	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `factions` WHERE `factionid` = %i", faction);
	mysql_tquery(dbHandle, query);
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `char`='0',`swat`='0',`swat_duty`='0',`duty`='0',`faction`='0',`rank`='0' WHERE `faction`=%i", faction);
	mysql_tquery(dbHandle, query);

	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || PlayerInfo[i][pFaction] != faction) continue;
		RemovePlayerFaction(i);
	}


    AC_ResetPlayerWeapons(playerid);
	SendServerMessage(playerid, "Birliðiniz kapatýldý. %s [ID: %i].", Factions[faction][fName], faction);
	Factions[faction][fON] = 0;
	Factions[faction][fID] = 0;
	return 1;
}

this::FACTION_LEAVING_REQ(playerid, response)
{
	if(!response) return pc_cmd_birlik(playerid, "");
    new factionid = PlayerInfo[playerid][pFaction];
	if(factionid == 0) return SendErrorMessage(playerid, "Zaten bir birliðiniz yok.");

    SendFactionMessageF(factionid, COLOR_LIGHTBLUE, "[Birlik] %s adlý birlik üyesi birlikten ayrýldý.", GetNameEx(playerid));
	SendServerMessage(playerid, "%s adlý birlikten ayrýldýnýz.", Factions[factionid][fName]);

    RemovePlayerFaction(playerid);
    return 1;
}

ShowFactionPanel(playerid, faction = -1)
{
	if(faction == -1) return SendErrorMessage(playerid, "Bir hata oluþtu. Kod: F-01");
	new text[128], string[1024], olusumadi[128], rank = PlayerInfo[playerid][pRank]-1;
	format(olusumadi, sizeof(olusumadi), "Oluþum: %s", Factions[faction][fName]);

	format(text, sizeof(text), "{A9C4E4}Birlik Bilgileri\t{FFFFFF}birliðinize ait bilgiler\n");
	strcat(string, text);

	format(text, sizeof(text), "{A9C4E4}Üye Listesi\t{FFFFFF}birlik üyeleri\n");
	strcat(string, text);

	if (FRank[faction][rank][rInvite])
	{
	    format(text, sizeof(text), "{A9C4E4}Üye Davet Et\t{FFFFFF}birliðe üye davet et\n");
	    strcat(string, text);
	}

	if (FRank[faction][rank][rUninvite])
	{
		format(text, sizeof(text), "{A9C4E4}Üye Çýkar\t{FFFFFF}herhangi bir üyeyi çýkarabilirsiniz\n");
	    strcat(string, text);
	}

	if(isLeader(playerid) && !IsFactionLegal(faction))
	{
		format(text, sizeof(text), "{A9C4E4}Birliðe Araç Ekle\t{FFFFFF}birliðe araç ekleyebilirsiniz\n");
	    strcat(string, text);
	}

	if (FRank[faction][rank][r_eRank])
	{
		format(text, sizeof(text), "{A9C4E4}Rütbe Deðiþtir\t{FFFFFF}üyelerin rütbesini deðiþtirebilirsin\n");
	    strcat(string, text);
	}

	if (FRank[faction][rank][r_eRank])
	{
		format(text, sizeof(text), "{A9C4E4}Rütbe Ýsimleri\t{FFFFFF}rütbeleri düzenleyebilirsiniz\n");
	    strcat(string, text);
	}

	if (FRank[faction][rank][r_eRights])
	{
		format(text, sizeof(text), "{A9C4E4}Rütbe Ýzinleri\t{FFFFFF}rütbe izinleri düzenleyebilirsiniz\n");
	    strcat(string, text);
	}

	if(!isLeader(playerid))
	{
		format(text, sizeof(text), "{A9C4E4}Birlikten Ayrýl\t{FFFFFF}birlikten çýkabilirsiniz\n");
	    strcat(string, text);
	}

	if(isLeader(playerid))
	{
		format(text, sizeof(text), "{A9C4E4}Birliði Kapat\t{FFFFFF}birliði kapatabilirsiniz\n");
	    strcat(string, text);
	}

	Dialog_Show(playerid, Faction_Main, DIALOG_STYLE_TABLIST, olusumadi, string, "Seç", "Geri Dön");
	return 1;
}

OlusumKurDialog(playerid, admin = 0)
{
	if(admin == 0)
	{
		if(PlayerInfo[playerid][pFaction] != 0) return SendErrorMessage(playerid, "Birlik üyeleri, bu özellikten faydalanamazlar.");
		if(PlayerInfo[playerid][pLevel] < OLUSUM_BIRLIK_KUR_SEVIYE) return SendErrorMessage(playerid, "Birlik kurmak için "#OLUSUM_BIRLIK_KUR_SEVIYE" seviye ve üstü bir seviyeye sahip olmalýsýnýz.");
		if(PlayerInfo[playerid][pCash] < OLUSUM_BIRLIK_KUR_PARA) return SendErrorMessage(playerid, "Birlik kurmak için yeterli paranýz bulunmuyor.");
		new liste[1500];
		format(liste, sizeof(liste), "* Birlik kurmak için "#OLUSUM_BIRLIK_KUR_SEVIYE" seviye olmalýsýnýz.");
		format(liste, sizeof(liste), "%s\n* Birlik kurmak için $"#OLUSUM_BIRLIK_KUR_PARA" paranýz olmalý.", liste);
		format(liste, sizeof(liste), "%s\n* Birlik kurduktan sonra birlik 144 saat içinde birlik tanýtýmý açmalýsýnýz.", liste);
		format(liste, sizeof(liste), "%s\n\nKullanýlabilir birlik tipleri aþaðýda verilmiþtir;\n", liste);
		for(new i; i < sizeof(OyuncuOlusumlar); i++)
		{
			format(liste, sizeof(liste), "%s\n(%d) %s", liste, OyuncuOlusumlar[i], OlusumTipleri[OyuncuOlusumlar[i]]);
		}
		format(liste, sizeof(liste), "%s\n\nAþaðýdaki kutuya birlik adýný, birliðin kýsaltmasýný ve birlik tipini girin: (virgül kullanmayý unutmayýn)", liste);
		format(liste, sizeof(liste), "%s\nÖrnek: Grove Street Families, GROVE, 7", liste);
		OlusumDialog[playerid][1] = 0;
		Dialog_Show(playerid, DialogOlusum, DIALOG_STYLE_INPUT, "Birlik Kur", liste, "Oluþtur", "Kapat");
	}
	else
	{
		new liste[1500];
		format(liste, sizeof(liste), "* Birlik kurmak için "#OLUSUM_BIRLIK_KUR_SEVIYE" seviye olmalýsýnýz.");
		format(liste, sizeof(liste), "%s\n* Birlik kurmak için $"#OLUSUM_BIRLIK_KUR_PARA" paranýz olmalý.", liste);
		format(liste, sizeof(liste), "%s\n* Birlik kurduktan sonra birlik 144 saat içinde birlik tanýtýmý açmalýsýnýz.", liste);
		format(liste, sizeof(liste), "%s\n\n[Birlik Tipleri]\n", liste);
		for(new i; i < sizeof(OlusumTipleri); i++)
		{
			format(liste, sizeof(liste), "%s\n[%d] %s", liste, i, OlusumTipleri[i]);
		}
		format(liste, sizeof(liste), "%s\n\nAþaðýdaki kutuya birlik adýný, birliðin kýsaltmasýný ve birlik tipini girin: (virgül kullanmayý unutmayýn)", liste);
		format(liste, sizeof(liste), "%s\nÖrnek: LC Gang, LCG, 1", liste);
		OlusumDialog[playerid][1] = 2;
		Dialog_Show(playerid, DialogOlusum, DIALOG_STYLE_INPUT, "Birlik Kur", liste, "Oluþtur", "Kapat");
	}
	return 1;
}

OlusumYarat(playerid, type, name[], shortname[])
{
    new factionid = 0;

	for(new i = 1; i < MAX_FACTIONS; i++)
	{
		if (Factions[i][fON] != 0) continue;

		factionid = i;
		break;
	}

	if (factionid == -1) 						return SendErrorMessage(playerid, "Maksimum birlik sayýsýna ulaþýldý.");
	if (strfind(name, "'", true) != -1) 	    return SendErrorMessage(playerid, "Birlik adýnda týrnak iþareti kullanamazsýn.");
	if (strfind(shortname, "'", true) != -1) 	return SendErrorMessage(playerid, "Birlik adýnda týrnak iþareti kullanamazsýn.");

	format(Factions[factionid][fName], 32, "%s", name);
	format(Factions[factionid][fShortName], 8, "%s", shortname);
	Factions[factionid][fColor] = 0xFFFFFF00;
	Factions[factionid][fType] = type;
	Factions[factionid][fRanks] = 20;
	Factions[factionid][fChatON] = 1;
	Factions[factionid][fON] = 1;
	Factions[factionid][fJoinRank] = 1;
	Factions[factionid][fPointTime] = 604800 + gettime();

	FRank[factionid][19][rInvite] = 1;
	FRank[factionid][19][rUninvite] = 1;
	FRank[factionid][19][rRank] = 1;
	FRank[factionid][19][r_eRank] = 1;
	FRank[factionid][19][rSpawn] = 1;
	FRank[factionid][19][rChat] = 1;
	FRank[factionid][19][rTow] = 1;
	FRank[factionid][19][rBodyCam] = 1;
	FRank[factionid][19][r_eRights] = 1;

	UpdateFactionRankLeader(factionid);

	if (type == FACTION_MAFIA)	Factions[factionid][fPoint] = 50;
	else 						Factions[factionid][fPoint] = 30;

	PlayerInfo[playerid][pFaction] = factionid;
	SQL_SetInteger("users", "faction", PlayerInfo[playerid][pFaction], PlayerInfo[playerid][pID]);

	PlayerInfo[playerid][pRank] = Factions[factionid][fRanks];
	SQL_SetInteger("users", "rank", PlayerInfo[playerid][pRank], PlayerInfo[playerid][pID]);

	for(new i; i != 20; i++)
	{
		FactionRanks[factionid][i] = "Belirsiz";
	}

	AddFactionToFile(factionid, shortname, name, Factions[factionid][fColor], type, Factions[factionid][fRanks], Factions[factionid][fPointTime], Factions[factionid][fJoinRank]);
	return factionid;
}

Faction_MemberCount(factionid)
{
	new
		query[256]
	;

 	mysql_format(dbHandle, query, sizeof(query), "SELECT COUNT(id) AS total FROM `users` WHERE `faction` = %i", factionid);
	new Cache:cache = mysql_query(dbHandle, query),
		count;

	cache_get_value_int(0, "total", count);
	cache_delete(cache);
	cache = MYSQL_INVALID_CACHE;
	return count;
}

stock convertDate(timestamp, _form = 1)
{
    new year = 1970, day = 0, month = 0, hour = 0, mins = 0, sec = 0;

    new days_of_month[12] = {
        31,
        28,
        31,
        30,
        31,
        30,
        31,
        31,
        30,
        31,
        30,
        31
    };

    new names_of_month[12][10] = {
        "Ocak",
        "Subat",
        "Mart",
        "Nisan",
        "Mayis",
        "Haziran",
        "Temmuz",
        "Agustos",
        "Eylul",
        "Ekim",
        "Kasim",
        "Aralik"
    };

    new returnstring[36];

    while(timestamp > 31622400)
    {
        timestamp -= 31536000;

        if(((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0))
        {
            timestamp -= 86400;
        }

        year++;
    }

    if(((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0))
    {
        days_of_month[1] = 29;
    }

    else
    {
        days_of_month[1] = 28;
    }


    while(timestamp > 86400)
    {
        timestamp -= 86400;
        day++;

        if(day == days_of_month[month])
        {
            day = 0;
            month++;
        }
    }

    while(timestamp > 60)
    {
        timestamp -= 60;
        mins++;

        if(mins == 60)
        {
            mins = 0;
            hour++;
        }
    }

    sec = timestamp;

    new zamanfix = hour + 3;

    if(zamanfix >= 24)
    {
        zamanfix = 0;
    }

    switch(_form)
    {
        case 1: format(returnstring, 31, "%02d/%02d/%d %02d:%02d", day + 1, month + 1, year, zamanfix, mins);
        case 2: format(returnstring, 31, "%s %02d, %d, %02d:%02d", names_of_month[month], day + 1, year, zamanfix, mins);
        case 3: format(returnstring, 31, "%d %c%c%c %d, %02d:%02d", day + 1, names_of_month[month][0], names_of_month[month][1], names_of_month[month][2], year, zamanfix, mins);
        case 4: format(returnstring, 31, "%02d.%02d.%d", day + 1, month + 1, year);
        default: format(returnstring, 31, "%02d.%02d.%d - %02d:%02d:%02d", day + 1, month + 1, year, zamanfix, mins, sec);
    }

    return returnstring;
}

this::FactionCharacterList(playerid)
{
	new rows = cache_num_rows();
	new faction = PlayerInfo[playerid][pFaction];

	if(rows)
	{
		new str[14000];

		str = "Karakter\tRütbe\tAktiflik\tSon Giriþ\n";

		new name[MAX_PLAYER_NAME], rank, last_login, online;

		for(new i = 0; i < rows; i++)
		{
			cache_get_value_int(i, "rank", rank);
			cache_get_value_int(i, "last_login", last_login);
			cache_get_value_int(i, "online", online);
			cache_get_value(i, "name", name, MAX_PLAYER_NAME);

			format(str, sizeof(str), "%s" EMBED_SILVER "%s\t" EMBED_WHITE "%s\t%s\t%s\n", str, name, FactionRanks[faction][rank-1], (online) ? (EMBED_PASTELGREEN "oyunda") : (EMBED_TOMATO "oyunda deðil"), convertDate(last_login));
		}

		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "Birlik Üyeleri", str, "Seç", "Kapat");
	}

	else SendErrorMessage(playerid, "Üye listesi getirilemedi. Lütfen yöneticilerle iletiþime geçiniz.");

	return 1;
}

Faction_List(playerid)
{
	new faction_type[][] = {"GOV", "Polis", "Medikal", "Yangýn Departmaný", "Hapishane", "Haber Birliði", "Çete", "Mafya", "Sivil", "Haber Birliði (Yönetim)", "State Bar"},
		faction_body[4096] = "ID\tÝsim [Kýsaltma]\tTip",
		count;

	for(new i = 1; i != MAX_FACTIONS; i++)
	{
		if (!Factions[i][fON]) continue;
		format(faction_body, sizeof(faction_body), "%s\n%i\t%s [%s]\t%s", faction_body, i, Factions[i][fName], Factions[i][fShortName], faction_type[Factions[i][fType]-1]);
		count++;
	}

	if (!count)	return Dialog_Show(playerid, None, DIALOG_STYLE_LIST, "{FFFFFF}Birlik Listesi", "Birlik listesi boþ...", "Kapat", "");

	Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Birlik Listesi", faction_body, "Kapat", "");
	return 1;
}

this::CountOnlineMembers(factionid)
{
    new count = 0;

    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaction] == factionid){
            count++;
        }
    }

    return count;
}

CountFactionMembers(factionid)
{
    new query[60], count;
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM users WHERE faction = %i", factionid);
	new Cache: cache = mysql_query(dbHandle, query);
	if(!cache_num_rows()) count = 0;
    count = cache_num_rows();
	cache_delete(cache);
	cache = MYSQL_INVALID_CACHE;
    return count;
}

stock ShowColourDialog(playerid, page = 1)
{
    new str[2048], count = 0;

    for(new i = ((page - 1) * ITEM_PER_PAGE); i != 255; i++)
    {
        if(count < ITEM_PER_PAGE)
        {
            format(str, sizeof(str), "%s%s%s " EMBED_ALTO "(Renk Kodu: %d)\n", str, Colours[i][coEmbedValue], Colours[i][coName], Colours[i][coVehicleColorID]);

            count++;
        }
        else
        {
            format(str, sizeof(str), "%s" EMBED_PASTELGREEN "» " EMBED_WHITE "Sonraki Sayfa\n", str);

            break;
        }
    }

    if(pTemp[playerid][pColorPage] > 1)
    {
        format(str, sizeof(str), "%s" EMBED_TOMATO "» " EMBED_WHITE "Önceki Sayfa\n", str);
    }

    return Dialog_Show(playerid, Colours, DIALOG_STYLE_LIST, "Renkler", str, "Seç", "Vazgeç");
}

Dialog:Colours(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(strfind(inputtext, "Sonraki Sayfa") != -1)
        {
            pTemp[playerid][pColorPage]++;

            ShowColourDialog(playerid, pTemp[playerid][pColorPage]);
        }

        else if(strfind(inputtext, "Önceki Sayfa") != -1)
        {
            pTemp[playerid][pColorPage]--;

            ShowColourDialog(playerid, pTemp[playerid][pColorPage]);
        }
    }

    return 1;
}

OlusumTipGetir(olusumid)
{
	new tip = -1;
	if((olusumid >= 0 && olusumid <= MAX_FACTIONS) && Factions[olusumid][fON]) tip = Factions[olusumid][fType];
	return tip;
}

this::OnPlayerDeleteScenario(playerid, id)
{
    new rows = cache_num_rows();

    if(rows)
    {
        new Text3D:label_id;

        cache_get_value_index_int(0, 0, _:label_id);

        if(IsValidDynamic3DTextLabel(Text3D:label_id))
            DestroyDynamic3DTextLabel(Text3D:label_id);

        mysql_query(dbHandle, sprintf("DELETE FROM game_scenarios WHERE id = '%d'", id));

        SendServerMessage(playerid, "#%d numaralý tabelayý kaldýrdýnýz.", id);
    }

    else SendErrorMessage(playerid, "Geçersiz tabelayý numarasý girdiniz.");

    return 1;
}

this::OnPlayerCreateScenario(playerid)
{
    new id = cache_insert_id();

    SendServerMessage(playerid, "#%d numaralý tabelayý eklediniz.", id);
    RefreshScenario(id);

    return 1;
}

this::LoadScenarios()
{
    new rows = cache_num_rows();

    if(rows)
    {
        new id;

        for(new i = 0; i < rows; i++)
        {
            cache_get_value_index_int(i, 0, id);

            RefreshScenario(id, false);
        }
    }

    return 1;
}

this::ListScenarios(playerid)
{
    new rows = cache_num_rows();

    if(rows)
    {
        new id, name[MAX_PLAYER_NAME], placed_date, Float:x, Float:y;

        for(new i = 0; i < rows; i++)
        {
            cache_get_value_index_int(i, 0, id);
            cache_get_value_index(i, 1, name);
            cache_get_value_index_int(i, 2, placed_date);
            cache_get_value_index_float(i, 3, x);
            cache_get_value_index_float(i, 4, y);

            SendServerMessage(playerid, "#%d - Ekleyen: %s - Tarih: %s", id, name, convertDate(placed_date));
        }
    }

    else SendErrorMessage(playerid, "Listelenebilecek tabela kaydý bulunamadý.");

    return 1;
}

this::OnScenarioRefreshed(id, bool:forcedestroy)
{
    new rows = cache_num_rows();

    if(rows)
    {
        new text[144], placed_by, Text3D:label_id, interior, world, Float:x, Float:y, Float:z;

        cache_get_value_index(0, 0, text);
        cache_get_value_index_int(0, 1, placed_by);
        cache_get_value_index_int(0, 2, _:label_id);
        cache_get_value_index_int(0, 3, interior);
        cache_get_value_index_int(0, 4, world);
        cache_get_value_index_float(0, 5, x);
        cache_get_value_index_float(0, 6, y);
        cache_get_value_index_float(0, 7, z);

        if(forcedestroy == true)
        {
            if(IsValidDynamic3DTextLabel(Text3D:label_id))
            {
                DestroyDynamic3DTextLabel(Text3D:label_id);
            }
        }

        ReplaceText(text, "#kirmizi", "{FF0000}");
        ReplaceText(text, "#mavi", "{0000FF}");
        ReplaceText(text, "#sari", "{FFFF00}");
        ReplaceText(text, "#yesil", "{00FF00}");
        ReplaceText(text, "#mor", "{FF80FF}");
        ReplaceText(text, "#acikmavi", "{00FFFF}");
        ReplaceText(text, "#beyaz", "{FFFFFF}");
        ReplaceText(text, "#turuncu", "{FF8000}");
        ReplaceText(text, "#siyah", "{000000}");
        ReplaceText(text, "#c", "\n");

        format(text, sizeof(text), "%s\n" EMBED_ALTO "((#%d - ID: %d))", text, placed_by, id);

        label_id = CreateDynamic3DTextLabel(text, -1, x, y, z, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, world, interior);

        mysql_query(dbHandle, EditScenario(id, -1, -1, "", label_id));
    }

    return 1;
}
stock RefreshScenario(id, bool:forcedestroy = true)
{
    mysql_tquery(dbHandle, GetScenario("game_scenarios.text, game_scenarios.placed_by, game_scenarios.label_id, game_scenarios.interior, game_scenarios.world, game_scenarios.x, game_scenarios.y, game_scenarios.z", "", "", id), "OnScenarioRefreshed", "dd", id, forcedestroy);

    return 1;
}

stock EditScenario(id, placed_by = -1, placed_date = -1, text[] = "", Text3D:label_id = Text3D:-1, interior = -1, world = -1, Float:x = 0.0, Float:y = 0.0, Float:z = 0.0)
{
    new query[350];

    if(id < 1)
    {
        mysql_format(dbHandle, query, sizeof(query), "INSERT INTO game_scenarios SET placed_by = '%d', placed_date = '%d', text = '%e', label_id = '%d', interior = '%d', world = '%d', x = '%f', y = '%f', z = '%f'", placed_by, placed_date, text, _:label_id, interior, world, x, y, z);
    }

    else
    {
        mysql_format(dbHandle, query, sizeof(query), "UPDATE game_scenarios SET");

        if(placed_by != -1)
            mysql_format(dbHandle, query, sizeof(query), "%s, placed_by = '%d'", query, placed_by);

        if(placed_date != -1)
            mysql_format(dbHandle, query, sizeof(query), "%s, placed_date = '%d'", query, placed_date);

        if(!isnull(text))
            mysql_format(dbHandle, query, sizeof(query), "%s, text = '%e'", query, text);

        if(Text3D:label_id != Text3D:-1)
            mysql_format(dbHandle, query, sizeof(query), "%s, label_id = '%d'", query, _:label_id);

        if(interior != -1)
            mysql_format(dbHandle, query, sizeof(query), "%s, interior = '%d'", query, interior);

        if(world != -1)
            mysql_format(dbHandle, query, sizeof(query), "%s, world = '%d'", query, world);

        if(x != 0.0)
            mysql_format(dbHandle, query, sizeof(query), "%s, x = '%f'", query, x);

        if(y != 0.0)
            mysql_format(dbHandle, query, sizeof(query), "%s, y = '%f'", query, y);

        if(z != 0.0)
            mysql_format(dbHandle, query, sizeof(query), "%s, z = '%f'", query, z);

        if(strfind(query, ", ") != -1)
            strdel(query, strfind(query, ", "), strfind(query, ", ") + 1);

        mysql_format(dbHandle, query, sizeof(query), "%s WHERE id = '%d'", query, id);
    }

    return query;
}

stock GetScenario(const fields[] = "game_scenarios.*", const joins[] = "", const wheres[] = "", id = -1, placed_by = -1)
{
    new query[300];

    format(query, sizeof(query), "SELECT %s FROM game_scenarios", fields);

    if(!isnull(joins))
    {
        format(query, sizeof(query), "%s %s", query, joins);
    }

    format(query, sizeof(query), "%s WHERE 1", query);

    if(id != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND game_scenarios.id = '%d'", query, id);
    }

    if(placed_by != -1)
    {
        mysql_format(dbHandle, query, sizeof(query), "%s AND game_scenarios.placed_by = '%d'", query, placed_by);
    }

    if(!isnull(wheres))
    {
        format(query, sizeof(query), "%s AND %s", query, wheres);
    }

    mysql_format(dbHandle, query, sizeof(query), "%s ORDER BY game_scenarios.id DESC", query);

    return query;
}

this::Vehicle_AddToFaction(playerid, response, id)
{
	if (!response)    return 1;

	new vehicle = GetPlayerVehicleID(playerid);
	new faction = PlayerInfo[playerid][pFaction];
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Herhangi bir araçta deðilsin.");
	if(!IsValidVehicle(vehicle))        return SendErrorMessage(playerid, "Herhangi bir araçta deðilsin.");
	if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID]) return SendErrorMessage(playerid, "Bu araç sana ait deðil.");

	VehicleInfo[vehicle][carFaction] = faction;
	Save_Car(vehicle);

	SendServerMessage(playerid, "%s model aracý %s adlý birliðe eklediniz. Çýkartmak için (/aracbirliktencikar)", GetVehicleModelName(GetVehicleModel(vehicle)), Factions[faction][fName]);
	return 1;
}

this::OfflineFactionKick(playerid, account[])
{
	new rows = cache_num_rows();
    if (!rows) return SendErrorMessage(playerid, "%s adlý karakter veritabanýnda bulunamadý.", account);

	new faction, rank;
	cache_get_value_int(0, "faction", faction);
	cache_get_value_int(0, "rank", rank);
	if (faction != PlayerInfo[playerid][pFaction]) return SendErrorMessage(playerid, "%s adlý karakter sizin birliðinizde deðil.", account);
	if (rank > PlayerInfo[playerid][pRank])        return SendErrorMessage(playerid, "%s adlý karakterin rütbesi sizden üstün.", account);

	new query[388];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `char`='0',`swat`='0',`swat_duty`='0',`duty`='0',`faction`='0',`rank`='0' WHERE `name`='%e'", account);
	mysql_tquery(dbHandle, query);

	SendServerMessage(playerid, "%s adlý kiþiyi birliðinizden attýnýz.", account);
	return 1;
}

Dialog:DutyMenu(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

    new faction = PlayerInfo[playerid][pFaction];
	if (!IsFactionLegal(faction)) return 1;

	switch(listitem)
	{
	    case 0://duty
	    {
			if (pTemp[playerid][pAdminDuty] > 0)	return SendErrorMessage(playerid, "Öncelikle yönetici görevini býrakmanýz gerekir.");
		    if (pTemp[playerid][pTaser])				return SendErrorMessage(playerid, "Ýlk önce þok ediciyi çýkarmanýz gerekir.");
		    if (pTemp[playerid][pPatrol])				return SendErrorMessage(playerid, "Öncelikle devriyeden çýkmanýz gerekir. (/mdc -> Birimler)");

           	new locker_id = GetPlayerNearestLocker(playerid);
	        if(locker_id < 1) return SendErrorMessage(playerid, "Bu komutu kullanmak için ekipman dolabýna yakýn olmalýsýnýz.");

	        if (!PlayerInfo[playerid][pOnDuty])
			{
				SetPVarInt(playerid, #pDelay, 1);
				SilahlariKaydet(playerid);

				if (IsFactionPolice(faction))
				{
					SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "%s dolabýndan rozetini alýr.", GetNameWithMask(playerid));
				}

				AC_ResetPlayerWeapons(playerid);
		        SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);

				PlayerInfo[playerid][pOnDuty] = 1;
				pTemp[playerid][tempStatus] = 1;
		 		SetPlayerColor(playerid, RemoveAlpha(Factions[faction][fColor]));
		        SendFactionMessage(faction, IsFactionPolice(faction) ? COLOR_POLICECHAT : COLOR_LIGHTBLUE, "** HQ: %s %s iþbaþýna geçti. **", GetRankName(playerid), GetNameEx(playerid));
                GameTextForPlayer(playerid, "~g~ISBASINDASINIZ", 5000, 3);
                gorevdenonceskin = GetPlayerSkin(playerid);

				pc_cmd_isbasi(playerid, "");
				Save_User(playerid);

				SetPVarInt(playerid, #pDelay, 0);
				return 1;
			}
			else {

			if (IsFactionPolice(faction))
			{
				SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "%s rozetini dolabýna koyar.", GetNameWithMask(playerid));
			}

			SendFactionMessage(faction, IsFactionPolice(faction) ? COLOR_POLICECHAT : COLOR_LIGHTBLUE, "** HQ: %s %s iþbaþýndan ayrýldý. **", GetRankName(playerid), GetNameEx(playerid));
			GameTextForPlayer(playerid, "~r~ISBASINDAN AYRILDIN", 5000, 3);

			AC_ResetPlayerWeapons(playerid);
			SetTimerEx("OnPlayerSetData", 1000, false, "d", playerid);
			DestroyAllBort(playerid);
		    PlayerInfo[playerid][pChar] = 0;
			PlayerInfo[playerid][pSwatDuty] = 0;
			PlayerInfo[playerid][pOnDuty] = 0;
			pTemp[playerid][tempStatus] = 0;
			foreach(new p : Player) { if(pTemp[p][pSpecPlayer] == playerid) TogglePlayerSpectating(p, 0); }

			SetRadioChannel(playerid, 0);
			PlayerInfo[playerid][pAuthed] = 0;

			SetPlayerColor(playerid, TEAM_HIT_COLOR);
			SetPlayerArmour(playerid, 0);
			SetPlayerSkin(playerid, gorevdenonceskin);
			PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);
			pc_cmd_isbasi(playerid, "");
			}
			return Save_User(playerid);
	    }
	    case 1:
		{
		    if (!PlayerInfo[playerid][pOnDuty])		return SendErrorMessage(playerid,"Ýlk önce iþbaþýnda olmalýsýnýz.");
           	new locker_id = GetPlayerNearestLocker(playerid);
	        if(locker_id < 1) return SendErrorMessage(playerid, "Bu komutu kullanmak için ekipman dolabýna yakýn olmalýsýnýz.");
            //if (PlayerInfo[playerid][pSwatDuty])	return SendErrorMessage(playerid, "Üniformanýzý deðiþtirmeden önce S.W.A.T ekipmanlarýnýzý býrakýn.");

			if(OyuncuBirlik(playerid) == FACTION_POLICE) {
				new mes[sizeof(LSPD_Kiyafetleri)*16];
				for(new i = 0; i < sizeof(LSPD_Kiyafetleri); i++)
				{
					format(mes, sizeof(mes), "%s%i\tID: %i\n", mes, LSPD_Kiyafetleri[i], LSPD_Kiyafetleri[i]);
				}
				Dialog_Show(playerid, ModelSelectForFaction, DIALOG_STYLE_PREVIEW_MODEL, "LSPD Kiyafetleri:", mes, "Giy", "Kapat");
			}
			if(OyuncuBirlik(playerid) == FACTION_CITY) {
				new mes[sizeof(GOV_Kiyafetleri)*16];
				for(new i = 0; i < sizeof(GOV_Kiyafetleri); i++)
				{
					format(mes, sizeof(mes), "%s%i\tID: %i\n", mes, GOV_Kiyafetleri[i], GOV_Kiyafetleri[i]);
				}
				Dialog_Show(playerid, ModelSelectForFaction, DIALOG_STYLE_PREVIEW_MODEL, "GOV Kiyafetleri:", mes, "Giy", "Kapat");
			}
			if(OyuncuBirlik(playerid) == FACTION_DOCS) {
				new mes[sizeof(DOC_Kiyafetleri)*16];
				for(new i = 0; i < sizeof(DOC_Kiyafetleri); i++)
				{
					format(mes, sizeof(mes), "%s%i\tID: %i\n", mes, DOC_Kiyafetleri[i], DOC_Kiyafetleri[i]);
				}
				Dialog_Show(playerid, ModelSelectForFaction, DIALOG_STYLE_PREVIEW_MODEL, "DoC Kiyafetleri:", mes, "Giy", "Kapat");
			}
			if(OyuncuBirlik(playerid) == FACTION_SAN) {
				new mes[sizeof(HABER_Kiyafetleri)*16];
				for(new i = 0; i < sizeof(HABER_Kiyafetleri); i++)
				{
					format(mes, sizeof(mes), "%s%i\tID: %i\n", mes, HABER_Kiyafetleri[i], HABER_Kiyafetleri[i]);
				}
				Dialog_Show(playerid, ModelSelectForFaction, DIALOG_STYLE_PREVIEW_MODEL, "SAN News:", mes, "Giy", "Kapat");
			}
			if(OyuncuBirlik(playerid) == FACTION_MEDICS) {
				new mes[sizeof(LSFMD_Kiyafetleri)*16];
				for(new i = 0; i < sizeof(LSFMD_Kiyafetleri); i++)
				{
					format(mes, sizeof(mes), "%s%i\tID: %i\n", mes, LSFMD_Kiyafetleri[i], LSFMD_Kiyafetleri[i]);
				}
				Dialog_Show(playerid, ModelSelectForFaction, DIALOG_STYLE_PREVIEW_MODEL, "LSFMD Kiyafetler:", mes, "Giy", "Kapat");
			}
			if(OyuncuBirlik(playerid) == FACTION_FIRE) {
				new mes[sizeof(LSFMD_Kiyafetleri)*16];
				for(new i = 0; i < sizeof(LSFMD_Kiyafetleri); i++)
				{
					format(mes, sizeof(mes), "%s%i\tID: %i\n", mes, LSFMD_Kiyafetleri[i], LSFMD_Kiyafetleri[i]);
				}
				Dialog_Show(playerid, ModelSelectForFaction, DIALOG_STYLE_PREVIEW_MODEL, "LSFMD Kiyafetler:", mes, "Giy", "Kapat");
			}
		}
		case 2:
	    {
	        if (!PlayerInfo[playerid][pOnDuty])										return SendErrorMessage(playerid, "Ýlk önce iþbaþýnda olmalýsýnýz.");
           	new locker_id = GetPlayerNearestLocker(playerid);
	        if(locker_id < 1) return SendErrorMessage(playerid, "Bu komutu kullanmak için ekipman dolabýna yakýn olmalýsýnýz.");

			if (IsFactionPolice(faction))
			{
				return Dialog_Show(playerid, LSPDArmoury, DIALOG_STYLE_LIST, "Ekipman ve Silah", "Silahlar\nS.W.A.T ekipmaný", "Seç", "Geri Dön");
			}
			else if (IsFactionDocs(faction))
			{
				return Dialog_Show(playerid, DOCSGUN, DIALOG_STYLE_LIST, "Silah", "Cudgel\nPepper Spray\nDesert Eagle (.50AE .ext)\n\t{ffc46a} - Ekstra þarjör al (.50AE .ext)\n{FFFFFF} MP5 (9x19mm .ext)\n\t{ffc46a} - Ekstra þarjör al (9x19mm .ext)\n{FFFFFF} Shotgun (12-G BIRDSHOT)\n\t{ffc46a} - Ekstra þarjör al (12-G BIRDSHOT)\n\t{ffc46a} - Plastik mermi þarjörü (12-G BEANBAG)\n{FFFFFF} M4 (5.56x45mm (drum))\n\t{ffc46a} - Ekstra þarjör al (5.56x45mm (drum))\n\t{ffc46a} - Plastik mermi þarjörü (5.56x45mm (plastik))\n{FFFFFF} Sniper Tüfeði (7.62x51mm)\n\t{ffc46a} - Ekstra þarjör al (7.62x51mm)\n{FFFFFF} Gaz bombasý\nKamera\n{FF6347} Tüm silahlarý teslim et", "Seç", "Kapat");
			}
			else if (IsFactionCity(faction))
			{
			    return Dialog_Show(playerid, CITYGUN, DIALOG_STYLE_LIST, "Silah", "Desert Eagle ( .50AE .ext )\n\t{ffc46a} - Ekstra þarjör al (.50AE .ext)\n{FFFFFF} MP5 (9x19mm .ext)\n\t{ffc46a} - Ekstra þarjör al (9x19mm .ext)\n{FFFFFF} M4 (5.56x45mm (drum))\n\t{ffc46a} - Ekstra þarjör al (5.56x45mm (drum))\n\t{ffc46a} - Plastik mermi (5.56x45mm (plastik))\n{FF6347} Tüm silahlarý teslim et", "Seç", "Kapat");
			}
			else if (IsFactionFire(faction) || IsFactionMedic(faction))
			{
		        return Dialog_Show(playerid, FIRELOCKER, DIALOG_STYLE_LIST, "Ekipman", " Testere\n Yangýn Söndürücü\n{FF6347} Ekipmanlarý býrak", "Seç", "Geri Dön");
			}
	    }
	    case 3:
	    {
	        if (!PlayerInfo[playerid][pOnDuty])										return SendErrorMessage(playerid, "Ýlk önce iþbaþýnda olmalýsýnýz.");
	        if (!IsFactionLegal(faction))											return SendErrorMessage(playerid, "Bir polis memuru / saðlýk görevlisi olmalýsýnýz.");
           	new locker_id = GetPlayerNearestLocker(playerid);
	        if(locker_id < 1) return SendErrorMessage(playerid, "Bu komutu kullanmak için ekipman dolabýna yakýn olmalýsýnýz.");

		    if (IsFactionMedic(faction) || IsFactionFire(faction)) SetPlayerArmour(playerid, 100.0);
			else				SetPlayerArmour(playerid, 100.0);

			SendSyntaxMessage(playerid, "Kurþun geçirmez yelek giyiyorsun. ");
            pc_cmd_isbasi(playerid, "");
	    }
	    case 4:
	    {
	        if (!PlayerInfo[playerid][pOnDuty])	return SendErrorMessage(playerid, "Bu fonksiyon için iþbaþýnda olmalýsýnýz. (/isbasi).");
           	new locker_id = GetPlayerNearestLocker(playerid);
	        if(locker_id < 1) return SendErrorMessage(playerid, "Bu komutu kullanmak için ekipman dolabýna yakýn olmalýsýnýz.");

		    PlayerInfo[playerid][pHealth] = 100.0;

			SendSyntaxMessage(playerid, "Saðlýðýnýzý tazelediniz. ");
		    pc_cmd_isbasi(playerid, "");
	    }
	}
	return 1;
}

Dialog:ModelSelectForFaction(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if(OyuncuBirlik(playerid) == FACTION_CITY) {
			PlayerInfo[playerid][pSkin] = GOV_Kiyafetleri[listitem];
			SetPlayerSkin(playerid, GOV_Kiyafetleri[listitem]);
		}
		if(OyuncuBirlik(playerid) == FACTION_POLICE) {
			PlayerInfo[playerid][pSkin] = LSPD_Kiyafetleri[listitem];
			SetPlayerSkin(playerid, LSPD_Kiyafetleri[listitem]);
		}
		if(OyuncuBirlik(playerid) == FACTION_MEDICS) {
			PlayerInfo[playerid][pSkin] = LSFMD_Kiyafetleri[listitem];
			SetPlayerSkin(playerid, LSFMD_Kiyafetleri[listitem]);
		}
		if( OyuncuBirlik(playerid) == FACTION_FIRE) {
			PlayerInfo[playerid][pSkin] = LSFMD_Kiyafetleri[listitem];
			SetPlayerSkin(playerid, LSFMD_Kiyafetleri[listitem]);
		}
		if(OyuncuBirlik(playerid) == FACTION_DOCS) {
			PlayerInfo[playerid][pSkin] = DOC_Kiyafetleri[listitem];
			SetPlayerSkin(playerid, DOC_Kiyafetleri[listitem]);
		}
		if(OyuncuBirlik(playerid) == FACTION_SAN) {
			PlayerInfo[playerid][pSkin] = HABER_Kiyafetleri[listitem];
			SetPlayerSkin(playerid, HABER_Kiyafetleri[listitem]);
		}

		new string[556];
	    format(string, sizeof(string), "* %s dolabýndan üniformasýný çýkartýr ve giyinir.", GetNameEx(playerid));
   		SetPlayerChatBubble(playerid, string, COLOR_CYAN, 30.0, 10000);
	}
	return 1;
}

Dialog:ScrapVehicleFaction(playerid, response, listitem, inputtext[])
{
	if (!response)											return 1;
    if (PlayerInfo[playerid][pFaction] == 0)				return SendErrorMessage(playerid, "Herhangi bir birliðe üye deðilsiniz.");
	if (!IsFactionLegal(PlayerInfo[playerid][pFaction]))	return SendErrorMessage(playerid, "Hükümet birliðinde olmalýsýn. ");

	new veh = PlayerInfo[playerid][pCarKey];

	if (!IsValidVehicle(veh))					return SendErrorMessage(playerid, "Aracýnýz spawnlanmadý.");
	if (!IsPlayerInVehicle(playerid, veh))		return SendErrorMessage(playerid, "Bu aracýn sahibi deðilsiniz.");
	if (IsADonateModel(GetVehicleModel(veh)))	return SendErrorMessage(playerid, "Bu aracý transfer edemezsiniz.");
	if (VehicleInfo[veh][carComponent][5] != 0)	return SendErrorMessage(playerid, "Bu aracý üzerinde nitro varken transfer edemezsiniz.");

    VehicleInfo[veh][carOwnerID] = INVALID_PLAYER_ID;
    VehicleInfo[veh][carFaction] = PlayerInfo[playerid][pFaction];
    StopCarBoomBox(veh);

	new query[256];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `owner_id`=0, `faction`=%i WHERE `id`=%i", PlayerInfo[playerid][pFaction], VehicleInfo[veh][carID]);
	mysql_tquery(dbHandle, query);
    PlayerInfo[playerid][pCarKey] = 0;
    VehicleInfo[veh][carOwnerPlayer] = INVALID_PLAYER_ID;
    DeleteVehicleTickets(veh);
	SendSyntaxMessage(playerid, "%s aracýnýzý %s birliðine transfer ettiniz.", VehicleNames[VehicleInfo[veh][carModel]-400], Factions[PlayerInfo[playerid][pFaction]][fName]);
	return 1;
}

Dialog:BortListChoose(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_barikatliste(playerid, "");

    new bort = GetPVarInt(playerid, #select_bort)-1;

    DeletePVar(playerid, #select_bort);
	if (bort < 0)	return SendErrorMessage(playerid, "Barikat bulunamadý ");

	if (BortInfo[playerid][bort][bortUsing]) return SendErrorMessage(playerid, "Obje þu anda kullanýmda! ");

	if (listitem == 0)
	{
	    if (BortInfo[playerid][bort][bortOn] == 0)	return SendErrorMessage(playerid, "Obje bulunamadý. ");

		new Float: x, Float: y, Float: z;
		GetDynamicObjectPos(BortInfo[playerid][bort][bortObject], x, y, z);


		if (GetPlayerDistanceFromPoint(playerid, x, y, z) > 10.0)	return SendErrorMessage(playerid, "Obje sizden çok uzakta.");
		if (IsPlayerInAnyVehicle(playerid))							return SendErrorMessage(playerid, "Bu iþlem için araçta olmamalýsýn.");
    	if (!PlayerInfo[playerid][pOnDuty])							return SendErrorMessage(playerid, "Ýlk önce iþbaþýnda olmalýsýnýz. ");

		EditDynamicObject(playerid, BortInfo[playerid][bort][bortObject]);
		pTemp[playerid][pEditBort] = bort+1;
	    return 1;
	}

    if (!BortInfo[playerid][bort][bortOn]) 	return SendErrorMessage(playerid, "Obje bulunamadý. ");

	BortInfo[playerid][bort][bortOn] = 0;
	BortInfo[playerid][bort][bortUsing] = 0;

	if (IsValidDynamicObject(BortInfo[playerid][bort][bortObject]))
	{
		DestroyDynamicObject(BortInfo[playerid][bort][bortObject]);
 		BortInfo[playerid][bort][bortObject] = INVALID_OBJECT_ID;
	}

	SendSyntaxMessage(playerid, "'%s' barikatý kaldýrýldý.", BortInfo[playerid][bort][bortName]);

	for (new i = 0; i != MAX_BORTES; i ++)
	{
		if (BortInfo[playerid][i][bortOn] == 0) continue;
		pc_cmd_barikatliste(playerid, "");
		break;
	}

	return 1;
}

Dialog:BortList(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	if (listitem == 0)
	{
		SendSyntaxMessage(playerid, "Tüm barikatlar kaldýrýldý.");
	    DestroyAllBort(playerid);
	    return 1;
	}

	new count;

	for (new i = 0; i != MAX_BORTES; i ++)
	{
		if (BortInfo[playerid][i][bortOn] == 0) continue;

  		if (count == listitem-1)
      	{
       		Dialog_Show(playerid, BortListChoose, DIALOG_STYLE_LIST, BortInfo[playerid][i][bortName], "Barikatý düzenle\nBarikatý kaldýr", "Seç", "Geri Dön");
         	SetPVarInt(playerid, #select_bort, i+1);
			return 1;
   		}
    	count++;
	}
	SendErrorMessage(playerid, "Barikat bulunamdaý. ");
	return 1;
}

Dialog:FactionSettings(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	return ShowRightsForRank(playerid, listitem);
}

Dialog:FactionSettings_Set(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new faction = PlayerInfo[playerid][pFaction], rank = GetPVarInt(playerid, "Faction:RankEdit")-1;

	switch(listitem)
	{
		case 0:	FRank[faction][rank][rInvite] = !FRank[faction][rank][rInvite];
		case 1: FRank[faction][rank][rUninvite] = !FRank[faction][rank][rUninvite];
		case 2: FRank[faction][rank][rRank] = !FRank[faction][rank][rRank];
		case 3: FRank[faction][rank][r_eRank] = !FRank[faction][rank][r_eRank];
		case 4: FRank[faction][rank][rSpawn] = !FRank[faction][rank][rSpawn];
		case 5: FRank[faction][rank][rChat] = !FRank[faction][rank][rChat];
		case 6: FRank[faction][rank][rTow] = !FRank[faction][rank][rTow];
		case 7: FRank[faction][rank][rBodyCam] = !FRank[faction][rank][rBodyCam];
		case 8: FRank[faction][rank][r_eRights] = !FRank[faction][rank][r_eRights];
	}

	UpdateFactionRank(faction, rank+1);
	ShowRightsForRank(playerid, rank);
	DeletePVar(playerid, "Faction:EditRank");
	return 1;
}

Dialog:DialogOlusum(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(OlusumDialog[playerid][1])
		{
			case 0: // Oluþum kur
			{
				if(PlayerInfo[playerid][pFaction] != 0) return SendErrorMessage(playerid, "Birlikteyken bu komutu kullanamazsýn.");
				if(PlayerInfo[playerid][pLevel] < OLUSUM_BIRLIK_KUR_SEVIYE) return SendErrorMessage(playerid, "Birlik kurmak için "#OLUSUM_BIRLIK_KUR_SEVIYE" seviye olmalýsýn.");
				if(PlayerInfo[playerid][pCash] < OLUSUM_BIRLIK_KUR_PARA) return SendErrorMessage(playerid, "Birlik kurmak için yeterli paran yok.");
				new olusumadi[MAX_OLUSUM_ADI], kisadi[MAX_OLUSUM_KISADI], tip, kontrol;
				if(sscanf(inputtext, "p<,>s[40]s[10]d", olusumadi, kisadi, tip))
				{
					OlusumKurDialog(playerid);
					SendErrorMessage(playerid, "Girilen deðer 'Oluþum adý, kýsaltma, tip' þeklinde olmalýdýr.");
					return 1;
				}
				if(!(2 <= strlen(kisadi) < MAX_OLUSUM_KISADI))
				{
					OlusumKurDialog(playerid);
					SendErrorMessage(playerid, "Oluþum kýsaltmasý 2 ve 4 karakter arasý uzunlukta olmalýdýr.");
					return 1;
				}
				if(!(3 <= strlen(olusumadi) <= MAX_OLUSUM_ADI))
				{
					OlusumKurDialog(playerid);
					SendErrorMessage(playerid, "Oluþum adý 3 ve "#MAX_OLUSUM_ADI" karakter arasý uzunlukta olmalýdýr.");
					return 1;
				}
				for(new i; i < sizeof(OyuncuOlusumlar); i++) if(OyuncuOlusumlar[i] == tip) kontrol++;
				if(!kontrol)
				{
					OlusumKurDialog(playerid);
					SendErrorMessage(playerid, "Hatalý oluþum tipi girdin, tekrar deneyin.");
					return 1;
				}
				OlusumYarat(playerid, tip, olusumadi, kisadi);
				GiveCash(playerid, -OLUSUM_BIRLIK_KUR_PARA);
				Log_Kaydet("birlik/genel.txt", sprintf("[%s] %s (C_ID: %d), %s adinda birlik kurdu.", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], olusumadi));
				SendSyntaxMessage(playerid, "%s, %s (%s) birliðini oluþturdun ve hesabýndan $%d kesildi.", GetNameEx(playerid), olusumadi, OlusumTipleri[tip], OLUSUM_BIRLIK_KUR_PARA);
				SendSyntaxMessage(playerid, "144 saat içerisinde oluþum tanýtýmlarý kategorisinde bir tanýtým oluþturman gerekiyor, aksi taktirde birliðin siliniyor olacaktýr.");
			}
		}
	}
	return 1;
}

Dialog:Faction_Main(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(strfind(inputtext, "Birlikten Ayrýl", true) != -1)
		{
			pc_cmd_birliktenayril(playerid, "");
		}

		if(strfind(inputtext, "Birliði Kapat", true) != -1)
		{
			new faction = PlayerInfo[playerid][pFaction];

			if (IsFactionLegal(faction)) return SendErrorMessage(playerid, "Devlet kurumlarý sadece geliþtiriciler tarafýndan kapatýlablilir.");

			if (!isLeader(playerid)) return SendErrorMessage(playerid, "Birliðin lideri olmalýsýnýz.");

			ConfirmDialog(playerid, "Doðrulama", "{FFFFFF}\nBirliði silmek istediðinize emin misiniz?","FACTION_DELETE");
		}

		else if(strfind(inputtext, "Birlik Bilgileri", true) != -1)
		{
            new string[2068], birlikbilgileri[2068], factionid = PlayerInfo[playerid][pFaction];
           /* if(FactionData[factionid][factionSOnay]) format(silahonay, 24, "{00CC00}Var"); else format(silahonay, 24, "{CC0000}Yok");
            if(FactionData[factionid][factionUOnay]) format(uonay, 24, "{00CC00}Var"); else format(uonay, 24, "{CC0000}Yok");
            if(FactionData[factionid][factionOnay]) format(bonay, 24, "{00CC00}Var"); else format(bonay, 24, "{CC0000}Yok");*/
            format(birlikbilgileri, sizeof(birlikbilgileri), "{A9C4E4}Birlik Adý: {FFFFFF}%s\n{A9C4E4}Birlik Kasasý: {FFFFFF}Pasif\n{A9C4E4}Üye Sayýsý: {FFFFFF}%d\n{A9C4E4}Silah Onayý: {FF6347}Pasif\n{A9C4E4}Uyuþturucu Onayý: {FF6347}Pasif\n{A9C4E4}Sistem Onayý: {00CC00}Var", Factions[factionid][fName], Faction_MemberCount(factionid));
            strcat(string, birlikbilgileri);
            Dialog_Show(playerid, None, DIALOG_STYLE_LIST, "Birlik Bilgileri", string, "<< Geri", "");
		}

		else if(strfind(inputtext, "Birliðe Araç Ekle", true) != -1)
		{
			new vehicle = GetPlayerVehicleID(playerid);
			if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Herhangi bir araçta deðilsin.");
			if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID]) return SendErrorMessage(playerid, "Kendine ait bir araçta deðilsin.");

            static const msg[] = "{FFFFFF}Bu iþlem geri alýnamaz. Aracý birliðe ekleyecek misin? [#%i], %s";
            new string[sizeof(msg)+1+MAX_ZONE_NAME];

            format(string, sizeof(string), msg,
            VehicleInfo[vehicle][carID],
            GetVehicleModelName(GetVehicleModel(vehicle))
            );

	        ConfirmDialog(playerid, "Onayla", string, "Vehicle_AddToFaction", vehicle);
		}

		else if(strfind(inputtext, "Üye Davet Et", true) != -1)
		{
			Dialog_Show(playerid, Faction_Invite, DIALOG_STYLE_INPUT, "{FFFFFF}Davet", "{ffffff}Davet etmek istediðiniz kiþinin ID'sini giriniz.", ">>>", "Geri Dön");
		}

		else if(strfind(inputtext, "Üye Çýkar", true) != -1)
		{
			Dialog_Show(playerid, Faction_UnInvite, DIALOG_STYLE_INPUT, "{FFFFFF}Üye Çýkar", "{ffffff}Birlikten çýkarmak istediðiniz kiþinin ID'sini girin.\nEðer kiþi oyunda deðilse karakter adýný Ýsim_Soyisim formatýnda yazýn.", ">>>", "Geri Dön");
		}

		else if(strfind(inputtext, "Üye Listesi", true) != -1)
		{
			mysql_tquery(dbHandle, sprintf("SELECT * FROM users WHERE faction = %d", PlayerInfo[playerid][pFaction]), "FactionCharacterList", "d", playerid);
		}

		else if(strfind(inputtext, "Rütbe Ýzinleri", true) != -1)
		{
			pc_cmd_editrights(playerid, "");
		}

		else if(strfind(inputtext, "Rütbe Deðiþtir", true) != -1)
		{
			Dialog_Show(playerid, Faction_ChangeRank, DIALOG_STYLE_INPUT, "{FFFFFF}Rütbe", "{ffffff}Rütbesini deðiþtirmek istediðiniz kiþinin ID'sini girin.", ">>>", "Geri Dön");
		}

		else if(strfind(inputtext, "Rütbe Ýsimleri", true) != -1)
		{
	        new faction = PlayerInfo[playerid][pFaction];

	        new	faction_ranks[1024] = EOS;
	        for(new i = 0; i != Factions[faction][fRanks]; i++)
	        {
		        if (PlayerInfo[playerid][pRank] >= i && !isLeader(playerid))
		        {
			        format(faction_ranks, sizeof(faction_ranks), "%s%i\t%s\n", faction_ranks, i+1, FactionRanks[faction][i]);
		        }
		        else if (isLeader(playerid))
		        {
			        format(faction_ranks, sizeof(faction_ranks), "%s%i\t%s\n", faction_ranks, i+1, FactionRanks[faction][i]);
		        }
	        }
	        Dialog_Show(playerid, Faction_EditRank, DIALOG_STYLE_TABLIST, "{FFFFFF}Rütbe ayarlarý", faction_ranks, ">>>", "Ýptal");
		}
	}
    else return 0;

	return 1;
}

Dialog:Faction_Invite(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_birlik(playerid, "");
	if(response)
	{
		pc_cmd_birlikdavet(playerid, inputtext);
	}
	return 1;
}

Dialog:Faction_UnInvite(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_birlik(playerid, "");
	if(response)
	{
		if(strlen(inputtext) > 3)
		{
			new name[MAX_PLAYER_NAME];
			format(name, sizeof(name), "%s", inputtext);
            foreach(new i : Player)
	        {
	            if(!IsPlayerLogged(i) || !CompareStrings(GetNameEx(i), inputtext))	continue;

		        pc_cmd_birliktenat(playerid, inputtext);
		        return 1;
	        }
			new query[256];
	        mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%e'", name);
	        mysql_tquery(dbHandle, query, "OfflineFactionKick", "is", playerid, name);
		}
		else pc_cmd_birliktenat(playerid, inputtext);
	}
	return 1;
}

Dialog:Faction_ChangeRank(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_birlik(playerid, "");
	if(response)
	{
		new faction = PlayerInfo[playerid][pFaction];
		new userid = strval(inputtext);
		if(!IsPlayerLogged(strval(inputtext))) return SendNotConnected(playerid);
        if(faction != PlayerInfo[userid][pFaction]) return SendErrorMessage(playerid, "Bu kiþi sizin birliðinizde deðil.");

		SetPVarInt(playerid, "Faction_RankChange", strval(inputtext));

		Dialog_Show(playerid, Faction_ChangeRankF, DIALOG_STYLE_INPUT, "{FFFFFF}Rütbe", "{ffffff}Üyenin rütbesini ne olarak deðiþtirmek istersin? (1 ile 20 arasýnda olmalýdýr)", ">>>", "Geri Dön");
	}
	return 1;
}

Dialog:Faction_ChangeRankF(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_birlik(playerid, "");
	if(response)
	{
		if (strval(inputtext) < 0 || strval(inputtext) > 20) return pc_cmd_birlik(playerid, "");

		new userid = GetPVarInt(playerid, "Faction_RankChange");

		pc_cmd_rutbedegistir(playerid, sprintf("%d %d", userid, strval(inputtext)));

		DeletePVar(playerid, "Faction_RankChange");
	}
	return 1;
}

Dialog:Faction_EditRank(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	return EditRankName(playerid, listitem);
}

EditRankName(playerid, listitem)
{
    new title[32], faction = PlayerInfo[playerid][pFaction];
	format(title, sizeof(title), "Rütbe Ýsimleri: {9189EF}%s", FactionRanks[faction][listitem]);
	SetPVarInt(playerid, "Faction:RankEditName", listitem+1);

	Dialog_Show(playerid, Faction_EditRankSet, DIALOG_STYLE_INPUT, title, "Bu rütbenin adýný ne olarak deðiþtirmek istersiniz?", "Deðiþtir", "Geri Dön");
	return 1;
}

Dialog:Faction_EditRankSet(playerid, response, listitem, inputtext[])
{
	if (!response) return pc_cmd_birlik(playerid, "");

	new rank = GetPVarInt(playerid, "Faction:RankEditName");

	pc_cmd_rutbeisim(playerid, sprintf("%d %s", rank, inputtext));
	DeletePVar(playerid, "Faction:RankEditName");
	return 1;
}

CMD:kogusagonder(playerid, params[])
{
	new userid, time;

	if (!IsPlayerFactionDocs(playerid))									return SendErrorMessage(playerid,"Hapishane memuru olmalýsýn.");
	if (sscanf(params,"uI(0)", userid, time))							return SendHelpMessage(playerid, "/kogusagonder [ID / isim] [dakika]");
	if (!PlayerInfo[playerid][pOnDuty])									return SendErrorMessage(playerid, "Görev baþýnda olmalýsýn. ");
	if (!PlayerToPoint(50.0, playerid,1132.321411, 1323.903198, 9.823800))	return SendErrorMessage(playerid, "Ýzolasyon koðuþunda olmalýsýnýz.");
	if (!IsPlayerLogged(userid))										return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))						return SendNotNearPlayer(playerid);
	if (userid == playerid)												return 1;

	if (PlayerInfo[userid][pIsolateTime])
	{
	    SendSyntaxMessage(playerid, "%s tecrit koðuþundan taburcu oldunuz.", GetNameEx(userid));
		SendSyntaxMessage(userid, "Ýzolasyon koðuþundan taburcu edildin.");
		PlayerInfo[userid][pPrisoned] = random(sizeof(prison_sadoc));

		new mes[5];

		format(mes, sizeof(mes), "A%i", PlayerInfo[userid][pPrisoned]+100);
        UpdateDynamic3DTextLabelText(PrisonLabel[userid], 0x00FF00FF, mes);
		SendSyntaxMessage(userid, "Mahkum numaranýz - A%i(/kogusnumaram).", PlayerInfo[userid][pPrisoned]+100);
        PlayerInfo[userid][pIsolateTime] = 0;

		foreach(new i : Player)
		{
			if (!IsPlayerLogged(i) || PlayerInfo[i][pJailed] != PRISON_JAIL) continue;

			SendSyntaxMessage(i, "%s %s tecrit koðuþundan serbest býrakýldý %s", GetRankName(playerid), GetNameEx(playerid), GetNameEx(userid));
		}
	    return 1;
	}

	if (time < 1 || time > 360) return SendErrorMessage(playerid, "1'den 360 dakikaya kadar süre.");

    SendSyntaxMessage(playerid, "%s izolasyon koðuþuna koydunuz.", GetNameEx(userid));
	SendSyntaxMessage(userid, "Bir tecrit koðuþuna kondunuz.");
	PlayerInfo[userid][pPrisoned] = random(sizeof(prison_sadoc));
	SendSyntaxMessage(userid, "Mahkum numaranýz - B%i(/kogusnumaram).", PlayerInfo[userid][pPrisoned]+100);
	PlayerInfo[userid][pIsolateTime] = 60 * time;
	PutPlayerInPrison(userid);

	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || PlayerInfo[i][pJailed] != PRISON_JAIL) continue;

		SendSyntaxMessage(i, "%s %s, %s adlý kiþiyi koðuþa aldý.", GetRankName(playerid), GetNameEx(playerid), GetNameEx(userid));
	}
	return 1;
}

CMD:serbestbirak(playerid, params[])
{
	new userid;

	if (!IsPlayerFactionDocs(playerid))									return SendErrorMessage(playerid, "Hapishane memuru olmalýsýn.");
	if (sscanf(params,"u", userid))                                 	return SendHelpMessage(playerid, "/serbestbirak [ID / isim]");
	if (!PlayerInfo[playerid][pOnDuty])                              	return SendErrorMessage(playerid, "Görev baþýnda olmalýsýn. ");
	if (!PlayerToPoint(30.0, playerid, 555.5505,-474.4340,915.6733)) 	return SendErrorMessage(playerid, "Hapishanede deðilsin. ");
	if (!IsPlayerLogged(userid))                                    	return SendNotConnected(playerid);
	if (!PlayerNearPlayer(3.0, playerid, userid))                    	return SendNotNearPlayer(playerid);
	if (userid == playerid)                                          	return 1;
	if (PlayerInfo[userid][pJailed] != PRISON_JAIL)                  	return SendErrorMessage(playerid, "Oyuncu hapiste deðil.");
	if (PlayerInfo[playerid][pRank] < 6)                             	return SendErrorMessage(playerid, "Bir mahkumu hapisten çýkaramazsýnýz. ");

	SetPlayerPosEx(userid, 785.9385,-868.3475,35.3712);
	SetInterior(userid, 0);
	SetWorld(userid, 0);
	PlayerInfo[userid][pIsolateTime] = 0;
	PlayerInfo[userid][pJailTime] = 0;
	PlayerInfo[userid][pJailed] = 0;

	if (IsValidDynamic3DTextLabel(PrisonLabel[userid]))
	{
		DestroyDynamic3DTextLabel(PrisonLabel[userid]);
  		PrisonLabel[userid] = Text3D:INVALID_3DTEXT_ID;
	}

	GameTextForPlayer(userid,"~g~SERBEST BIRAKILDINIZ~n~~w~IYI BIRISI OLMAYA CALISIN",5000,1);
	SendSyntaxMessage(userid, "%s %s tarafýndan serbest býrakýldýnýz.", GetRankName(playerid), GetNameEx(playerid));
	return 1;
}

/* Ceset sistemi */

Corpse_OnPlayerEdit(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rz)
{
    if (GetPVarInt(playerid, #CorpsEdit) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
		new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;

		GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
		GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	    new id = GetPVarInt(playerid, #CorpsEdit)-1;
		DeletePVar(playerid, #CorpsEdit);

	    if (id < 0 || id >= sizeof(CorpInfo) || !CorpInfo[id][cUsed]) 	return SendErrorMessage(playerid, "Ceset bulunamadý.");
	    if (objectid != CorpInfo[id][cBody])							return SendErrorMessage(playerid, "Cesedi düzenlerken bir problem oluþtu.");

		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, 0.0, 0.0, rz);

        GetDynamicObjectPos(objectid, CorpInfo[id][cX], CorpInfo[id][cY], CorpInfo[id][cZ]);

        if (IsValidDynamic3DTextLabel(CorpInfo[id][cText])) DestroyDynamic3DTextLabel(CorpInfo[id][cText]);
        CorpInfo[id][cText]=CreateDynamic3DTextLabel("(( CESET ))\n'~k~~GROUP_CONTROL_BWD~' tuþuna basýnýz", COLOR_LIGHTRED, CorpInfo[id][cX], CorpInfo[id][cY], CorpInfo[id][cZ]-0.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 50.0);
	}
    return 1;
}

Corpse_OnPlayerUpdate(playerid)
{
    if (pTemp[playerid][UsingBort] && pTemp[playerid][UsingCorpse]) {
        new Float:X, Float:Y, Float:Z, Float:R;
        GetPlayerPos(playerid, X, Y, Z);
        GetPlayerFacingAngle(playerid, R);
        GetXYInFrontOfPlayer(playerid, X, Y, Z, 1.8);

        new idx = pTemp[playerid][UsingCorpse];
        CorpInfo[idx][cX]=X;
        CorpInfo[idx][cY]=Y;
        CorpInfo[idx][cZ]=Z;
        SetActorPos(CorpInfo[idx][cBody], X, Y, Z + 0.60);
        SetActorFacingAngle(CorpInfo[idx][cBody], R);
    }
    return 1;
}

Corpse_OnPlayerEnterVehicle(playerid)
{
    if (pTemp[playerid][UsingBort]) {
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid,x,y,z);
        SendErrorMessage(playerid, "Sedyeyi sürerken araca binemezsin.");
    }
    return 1;
}

CreateCorpse(playerid, weaponid)
{
    if (weaponid == 53) return 1;

    new
        found = 0,
        foundid = 0,
        Float:x,
        Float:y,
        Float:z,
        sex[8],
        age
    ;

    GetPlayerPos(playerid, x, y, z);

    new skinid = GetPlayerSkin(playerid);

	for(new o = 0; o < sizeof(CorpInfo); o++)
	{
		if (o != 0)
		{
	        if (CorpInfo[o][cUsed] == 0 && found == 0)
		    {
		        found++;
			    foundid=o;
                break;
            }
        }
    }
    if (found == 0) return 1;

    CorpInfo[foundid][cUsed]=1;
    CorpInfo[foundid][cVeh]=0;

    format(CorpInfo[foundid][cName], 25, "%s", GetName(playerid));
    CorpInfo[foundid][cType] = 0;
    CorpInfo[foundid][cTime] = gettime();

    CorpInfo[foundid][cX]=x;
    CorpInfo[foundid][cY]=y;
    CorpInfo[foundid][cZ]=z;

    if (weaponid == 54) CorpInfo[foundid][cX] -= 0.5;

	CorpInfo[foundid][cSkin] = skinid;
	CorpInfo[foundid][cBody]= CreateDynamicActor(skinid, x, y, z, 0.0);
	SetActorInvulnerable(CorpInfo[foundid][cBody], true);
    SetActorVirtualWorld(CorpInfo[foundid][cBody], GetPlayerVirtualWorld(playerid));

    DebugMessage(playerid, "corpse skin: %d, corpse actor: %d", CorpInfo[foundid][cSkin], CorpInfo[foundid][cBody]);

	if (PlayerInfo[playerid][pSex] == 1)	format(sex, sizeof(sex), "Erkek");
	else 			                        format(sex, sizeof(sex), "Kadýn");

    age = PlayerInfo[playerid][pAge];

    format(CorpInfo[foundid][cNote], 200, "{FFFFFF}(( Ýsim: %s ))\n\nYaþ:\t %d\nKurbanýn cinsiyeti:\t %s\n\n", GetNameEx(playerid), age, sex);

    new count;
    for(new i = 0; i != MAX_DAMAGES; i++)
    {
        if (DamageInfo[playerid][i][damageOn] != 1) continue;
        count++;
    }

    if (count > 0) format(CorpInfo[foundid][cNote], 200, "%sKiþinin bedenine aldýðý hasar: %d kez\n\n", CorpInfo[foundid][cNote], count);
    else  format(CorpInfo[foundid][cNote], 200, "%sCesette herhangi bir yara izi yok.\n\n", CorpInfo[foundid][cNote]);

    switch(weaponid)
    {
        case 0: format(CorpInfo[foundid][cNote], 200, "%sÖlüm sebebi: Dövülerek.", CorpInfo[foundid][cNote]);
        case 1 .. 16: format(CorpInfo[foundid][cNote], 200, "%sÖlüm sebebi: Sert cisimle dövülerek.", CorpInfo[foundid][cNote]);
        case 22 .. 34: format(CorpInfo[foundid][cNote], 200, "%sÖlüm sebebi: Tahmini olarak %s silahýyla.", CorpInfo[foundid][cNote], inventory_items[weaponid][itemName]);
        case 17, 41 .. 42: format(CorpInfo[foundid][cNote], 200, "%sÖlüm sebebi: Muhtemelen boðularak.", CorpInfo[foundid][cNote]);
        case 49: format(CorpInfo[foundid][cNote], 200, "%sÖlüm sebebi: Araç kazasý.", CorpInfo[foundid][cNote]);
        case 50: format(CorpInfo[foundid][cNote], 200, "%sÖlüm sebebi: Helikopter kazasýyla.", CorpInfo[foundid][cNote]);
        case 18: format(CorpInfo[foundid][cNote], 200, "%sÖlüm sebebi: Muhtemelen yanarak.", CorpInfo[foundid][cNote]);
        case 51: format(CorpInfo[foundid][cNote], 200, "%sÖlüm sebebi: Patlama etkisiyle.", CorpInfo[foundid][cNote]);
        case 53: format(CorpInfo[foundid][cNote], 200, "%sÖlüm sebebi: Suda boðularak.", CorpInfo[foundid][cNote]);
        case 54: format(CorpInfo[foundid][cNote], 200, "%sÖlüm sebebi: Yüksekten düþerek.", CorpInfo[foundid][cNote]);
        case 58: format(CorpInfo[foundid][cNote], 200, "%sÖlüm sebebi: Kan kaybý.", CorpInfo[foundid][cNote]);
        default: format(CorpInfo[foundid][cNote], 200, "%sÖlüm sebebi: Belirsiz.", CorpInfo[foundid][cNote]);
    }

    ApplyActorAnimation(CorpInfo[foundid][cBody], "PED", "KO_shot_stom", 4.0, 0, 0, 0, 1, 0);
    CorpInfo[foundid][cText]=CreateDynamic3DTextLabel("(( CESET ))\n'~k~~GROUP_CONTROL_BWD~' tuþuna basýnýz", COLOR_LIGHTRED, x, y, z-0.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 50.0);
	return 1;
}

Dialog:CorpseInfo(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

    new dlg[90], i = GetNearestCorpse(playerid);

    switch(CorpInfo[i][cType]) {
        case 0: {//îáû÷íûé = 0
            dlg="Araca doðru sürükle\nCeset torbasýna koy\nCesedi göm";
        }
        case 1: { //êàòàëêà
            dlg="Cesedi olduðu yerden çýkar";
        }
        case 2: { //ìåøîê òðóïà
            dlg="Araca doðru sürükle\nCesedi torbadan çýkar";
        }
        case 3:{ //çàêîïàííûé
            dlg="Cesedi yok et";
        }
    }

    if (!CorpInfo[i][cType] && PlayerInfo[playerid][pOnDuty] == 1 && (IsPlayerFactionMedic(playerid) || IsPlayerFactionFire(playerid)))
        strcat(dlg,"\nSedyeye koy");

    if (CheckAdmin(playerid, ADMIN_LEVEL_1) || (PlayerInfo[playerid][pOnDuty] == 1 && (IsPlayerFactionMedic(playerid) || IsPlayerFactionFire(playerid) || IsPlayerFactionPolice(playerid))))
        strcat(dlg,"\nCesedi sil");

    Dialog_Show(playerid, CorpseInfo2, DIALOG_STYLE_LIST, "Ölü ceset", dlg, "Seç", "Geri Dön");
    return 1;
}

Dialog:CorpseInfo2(playerid, response, listitem, inputtext[])
{
	if (!response)	return pc_cmd_ceset(playerid, "");

    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
	    return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");

    if (!IsPlayerLogged(playerid)) return SendNotConnected(playerid);

	new i = GetNearestCorpse(playerid);

    switch(listitem) {
        case 0: {
            switch(CorpInfo[i][cType]) {
                case 0: listitem=0;
                case 1: listitem=1;
                case 2: listitem=0;
                case 3: listitem=2;
            }
        }
        case 1: {
            switch(CorpInfo[i][cType]) {
                case 0: listitem=5;
                case 1: listitem=7;
                case 2: listitem=2;
                case 3: listitem=7;
            }
        }
        case 2: {
            switch(CorpInfo[i][cType]) {
                case 0: listitem=6;
                case 2: listitem=7;
            }
        }
        case 3: listitem=4;
        case 4: listitem=7;
    }

    switch(listitem)
    {
        case 0:
        {
            new vehicle = GetNearVehicle(playerid, 4.0);
            if (vehicle == -1)                         return SendErrorMessage(playerid, "Aracýn yakýnýnda deðilsiniz.");
            if (!IsNearTrunk(vehicle, playerid, 2.0))  return SendErrorMessage(playerid, "Bagajýn yakýnýnda deðilsiniz! ");
            if (!VehicleInfo[vehicle][carTrunkLock])   return SendErrorMessage(playerid, "Bagaj açýk olmalý.");

            if (VehicleInfo[vehicle][vCorp] > 0 && CorpInfo[VehicleInfo[vehicle][vCorp]][cUsed] == 1)
                return SendWarningMessage(playerid, "Bagajda zaten bir ceset bulunuyor!");

            new mes[128];
            format(mes, sizeof(mes), "%s cesedini bagaja sürükler.", CorpInfo[i][cName]);
            pc_cmd_me(playerid, mes);

            SendSyntaxMessage(playerid, "Cesedi bagaja yerleþtirdin. (( /arac ceset - cesedi çýkarmak için ))");

            CorpInfo[i][cTime] = gettime();
            CorpInfo[i][cVeh]=vehicle;
            VehicleInfo[vehicle][vCorp]=i+1;

            CorpInfo[i][cX] =
            CorpInfo[i][cY] =
            CorpInfo[i][cZ] = 0.0;


            DestroyDynamic3DTextLabel(CorpInfo[i][cText]);
            if (!CorpInfo[i][cType] && IsValidActor(CorpInfo[i][cBody])) DestroyDynamicActor(CorpInfo[i][cBody]);
            else if (CorpInfo[i][cType] && IsValidDynamicObject(CorpInfo[i][cBody])) DestroyDynamicObject(CorpInfo[i][cBody]);
        }
        case 1: {
            new Float:x, Float:y, Float:z;
            GetPlayerPos(playerid, x, y, z);

            CorpInfo[i][cType] = 0;
            CorpInfo[i][cX] = x+0.75;
            CorpInfo[i][cY] = y;
            CorpInfo[i][cZ] = z-0.5;
            CorpInfo[i][cTime] = gettime();

            CorpInfo[i][cText]=CreateDynamic3DTextLabel("(( CESET ))\n'~k~~GROUP_CONTROL_BWD~' tuþuna basýnýz", COLOR_LIGHTRED, CorpInfo[i][cX], CorpInfo[i][cY], CorpInfo[i][cZ]-0.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 50.0);

            pTemp[playerid][UsingCorpse] = 0;

            SetActorPos(CorpInfo[i][cBody], CorpInfo[i][cX], CorpInfo[i][cY], CorpInfo[i][cZ]);
            SendSyntaxMessage(playerid, "Cesedi kaldýrdýn.");
        }
        case 2: {
            if (IsValidDynamicObject(CorpInfo[i][cBody]))        DestroyDynamicObject(CorpInfo[i][cBody]);
            if (IsValidDynamic3DTextLabel(CorpInfo[i][cText]))   DestroyDynamic3DTextLabel(CorpInfo[i][cText]);

            new Float:x, Float:y, Float:z;
            GetPlayerPos(playerid, x, y, z);

            CorpInfo[i][cType] = 0;
            CorpInfo[i][cX] = x+0.75;
            CorpInfo[i][cY] = y;
            CorpInfo[i][cZ] = z-0.5;
            CorpInfo[i][cTime] = gettime();

            CorpInfo[i][cBody]=CreateDynamicActor(CorpInfo[i][cSkin], x+0.75-0.5, y, z, 0.0);
            SetActorInvulnerable(CorpInfo[i][cBody], true);
            ApplyActorAnimation(CorpInfo[i][cBody], "PED", "KO_shot_stom", 4.0, 0, 0, 0, 1, 0);

            CorpInfo[i][cText]=CreateDynamic3DTextLabel("(( CESET ))\n'~k~~GROUP_CONTROL_BWD~' tuþuna basýnýz", COLOR_LIGHTRED, CorpInfo[i][cX], CorpInfo[i][cY], CorpInfo[i][cZ]-0.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 50.0);

            if (CorpInfo[i][cType] == 3) SendSyntaxMessage(playerid, "Cesedi yok ettin.");
            else                        SendSyntaxMessage(playerid, "Cesedi torbadan çýkardýn.");
        }
        case 4: //Êàòàëêà
        {
            if (PlayerInfo[playerid][pAdmin]) return RemoveCorpse(i);
            if (!pTemp[playerid][UsingBort])  return SendErrorMessage(playerid, "Ýlk önce sedyeyi alýnýz! (/sedye)");
            if (pTemp[playerid][UsingCorpse]) return SendErrorMessage(playerid, "Sedyede zaten bir ceset bulunuyor!");

            if (IsValidDynamic3DTextLabel(CorpInfo[i][cText]))   DestroyDynamic3DTextLabel(CorpInfo[i][cText]);

            pTemp[playerid][UsingCorpse] = i;
            CorpInfo[i][cType] = 1;

            SendSyntaxMessage(playerid, "Cesedi sedyeye koydun.");
        }
        case 5: //Ìåøîê
        {

            new Float:posZ;
            GetActorFacingAngle(CorpInfo[i][cBody], posZ);

            if (IsValidActor(CorpInfo[i][cBody]))  DestroyDynamicActor(CorpInfo[i][cBody]);

            SetPVarInt(playerid, #CorpsEdit, i+1);

            CorpInfo[i][cType] = 2;
            CorpInfo[i][cBody]=CreateDynamicObject(19944, CorpInfo[i][cX], CorpInfo[i][cY], CorpInfo[i][cZ]-0.5, 0.0, 0.0, posZ, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

            EditDynamicObject(playerid, CorpInfo[i][cBody]);

            SM1(playerid, "Cesedi torbaya koydunuz. [ID:%i]", i);
            pc_cmd_me(playerid, "cesedi ceset torbasýna koyar.");
        }
        case 6: //çàêîïàòü
        {
            if (GetWorld(playerid) || GetInterior(playerid)) return SendErrorMessage(playerid, "Buraya bir ceset gömemezsin!");
            //if (!IsPlayerHasItem(playerid, 6))            return SendErrorMessage(playerid, "Ó Âàñ íåò ëîïàòû.");

            new Float:posZ;
            GetActorFacingAngle(CorpInfo[i][cBody], posZ);

            if (IsValidActor(CorpInfo[i][cBody]))  DestroyDynamicActor(CorpInfo[i][cBody]);
            if (IsValidDynamicObject(CorpInfo[i][cBody]))  DestroyDynamicObject(CorpInfo[i][cBody]);

            SetPVarInt(playerid, #CorpsEdit, i+1);

            CorpInfo[i][cType] = 3;
            CorpInfo[i][cBody]=CreateDynamicObject(19944 , CorpInfo[i][cX], CorpInfo[i][cY], CorpInfo[i][cZ]-0.5, 0.0, 0.0, posZ, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
            SetObjectMaterial(CorpInfo[i][cBody], 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);

            EditDynamicObject(playerid, CorpInfo[i][cBody]);

            SM1(playerid, "Cesedi gömdün. [ID:%i]", i);
            pc_cmd_me(playerid, "cesedi gömer.");
        }
        case 7: //óäàëèòü
        {
            SM1(playerid, "Ceset objesini sildin. [ID:%i]", i);
            RemoveCorpse(i);
            return 1;
        }
    }
	return 1;
}

GetNearestCorpse(playerid, Float:corpse_range = 2.0)
{
    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return -1;

	for(new i = 0; i < sizeof(CorpInfo); i++)
    {
        if (CorpInfo[i][cUsed] == 1)
        {
            if (IsPlayerInRangeOfPoint(playerid, corpse_range, CorpInfo[i][cX], CorpInfo[i][cY], CorpInfo[i][cZ]))
            {
                return i;
            }
        }
    }
    return -1;
}

RemoveCorpse(id)
{
	if (id == 0) return 1;
	if (CorpInfo[id][cUsed] == 1)
	{
	    CorpInfo[id][cUsed]=0;
        CorpInfo[id][cType]=0;
	    CorpInfo[id][cX]=0;
        CorpInfo[id][cY]=0;
        CorpInfo[id][cZ]=0;
		CorpInfo[id][cSkin]=0;

		if (IsValidActor(CorpInfo[id][cBody]))           DestroyDynamicActor(CorpInfo[id][cBody]);
        if (IsValidDynamicObject(CorpInfo[id][cBody]))   DestroyDynamicObject(CorpInfo[id][cBody]);

        if (CorpInfo[id][cVeh] > 0 && GetVehicleModel(CorpInfo[id][cVeh]) > 0) {
		    VehicleInfo[CorpInfo[id][cVeh]][vCorp]=0;
		} else { DestroyDynamic3DTextLabel(CorpInfo[id][cText]); }

        for(new i; i < GetPlayerPoolSize(); i++) {
            if (pTemp[i][UsingCorpse] == id) {
                pTemp[i][UsingCorpse] = 0;
                break;
            }
        }
	}
	return 1;
}

CMD:ceset(playerid, params[])
{
    new i;

    if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Bu iþlemi þu an kullanamazsýnýz.");
    if (!IsPlayerLogged(playerid))                   return SendNotConnected(playerid);
    if ((i = GetNearestCorpse(playerid)) == -1)      return SendErrorMessage(playerid, "Çevrenizde ceset bulunamadý.");

    Dialog_Show(playerid, CorpseInfo, DIALOG_STYLE_MSGBOX, "Ceset hakkýnda bilgi", CorpInfo[i][cNote], "Seçenekler", "Kapat");
    return 1;
}//ñèñòåìà òðóïîâ

/* Billboard sistemi */

BB_OnPlayerModelSelection(playerid, extraid, modelid, response)
{
    if (extraid == MODEL_SELECTION_BB && response == MODEL_RESPONSE_SELECT)
	{
		if (response)
        {
             if (GetUnusedBillBoard() == -1) return SendErrorMessage(playerid, "Billboard sýnýrý aþýldý!");

			 new Float:X, Float:Y, Float:Z;
	         GetPlayerPos(playerid, X, Y, Z);

	         CreateBillBoard(playerid, X, Y, Z, 0.0, 0.0, 0.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid),modelid,GetPVarInt(playerid, #BB_COST));
			 DeletePVar(playerid, #BB_COST);
		}
		else DeletePVar(playerid, #BB_COST);

		return 1;
	}
    return 1;
} //î

BB_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	if (GetPVarInt(playerid, "BB:Edit") && response == EDIT_RESPONSE_FINAL)
	{
		new i = GetPVarInt(playerid, "BB:Edit")-1;

		BillboardInfo[i][bbPosX] = x;
		BillboardInfo[i][bbPosY] = y;
		BillboardInfo[i][bbPosZ] = z;
		BillboardInfo[i][bbPosRX] = rx;
		BillboardInfo[i][bbPosRY] = ry;
		BillboardInfo[i][bbPosRZ] = rz;
		BillboardInfo[i][bbInt] = GetPlayerInterior(playerid);
		BillboardInfo[i][bbVW] = GetPlayerVirtualWorld(playerid);

        Save_BB(i);
		DeletePVar(playerid, "BB:Edit");

		if (IsValidDynamicObject(BillboardInfo[i][bbObject])) DestroyDynamicObject(BillboardInfo[i][bbObject]);
		BillboardInfo[i][bbObject] = CreateDynamicObject(BillboardInfo[i][bbModel], BillboardInfo[i][bbPosX], BillboardInfo[i][bbPosY], BillboardInfo[i][bbPosZ], BillboardInfo[i][bbPosRX], BillboardInfo[i][bbPosRY], BillboardInfo[i][bbPosRZ], BillboardInfo[i][bbInt], BillboardInfo[i][bbVW]);

		SetDynamicObjectMaterial(BillboardInfo[i][bbObject], 0, -1, "none", "none", 0xFFFFFFFF);
		SetDynamicObjectMaterialText(BillboardInfo[i][bbObject], 0, BillboardInfo[i][bbText], OBJECT_MATERIAL_SIZE_512x128,"Arial", 28, 0, 0xFF000000, 0x0FFFFFFF, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
		return 1;
	}
	if (GetPVarInt(playerid, "BB:Edit") &&  response == EDIT_RESPONSE_CANCEL)
	{
		SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
		SetDynamicObjectPos(objectid, oldRotX, oldRotY, oldRotZ);
		DeletePVar(playerid, "BB:Edit");
	}
	return 1;
}

CheckBillBoard()
{
	new time = gettime();

	for(new i = 0; i < MAX_BILLBOARDS; i++)
	{
	    if (!BillboardInfo[i][bbActive] || !BillboardInfo[i][bbRentBy]) continue;
		if (BillboardInfo[i][bbRentDate] < time) BillBoard_Unrent(i);
	}

	return 1;
}

stock BillBoard_OnGameModeInit()
{
	return mysql_tquery(dbHandle, "SELECT * FROM `billboards`", "OnBillboardsLoad");
}

CheckDialogString(string[])
{
    if (strfind(string, "\n", true) != -1)  return 1;

    return 0;
}

this::OnBillboardsLoad()
{
	new rows = cache_num_rows(), time = GetTickCount(), total;

	if (!rows) return print("[BillBoards] Kayýt bulunamadý.");

	for(new i; i < rows; i++)
    {
        BillboardInfo[i][bbActive] = true;

        cache_get_value_int(i, "id", BillboardInfo[i][bbID]);
        cache_get_value(i, "text", BillboardInfo[i][bbText], 100);
        cache_get_value_int(i, "rentby", BillboardInfo[i][bbRentBy]);
        cache_get_value_int(i, "rentdate", BillboardInfo[i][bbRentDate]);
        cache_get_value_int(i, "cost", BillboardInfo[i][bbRentCost]);
        cache_get_value_float(i, "posX", BillboardInfo[i][bbPosX]);
        cache_get_value_float(i, "posY", BillboardInfo[i][bbPosY]);
        cache_get_value_float(i, "posZ", BillboardInfo[i][bbPosZ]);
        cache_get_value_float(i, "posRX", BillboardInfo[i][bbPosRX]);
        cache_get_value_float(i, "posRY", BillboardInfo[i][bbPosRY]);
        cache_get_value_float(i, "posRZ", BillboardInfo[i][bbPosRZ]);
        cache_get_value_int(i, "int", BillboardInfo[i][bbInt]);
        cache_get_value_int(i, "vw", BillboardInfo[i][bbVW]);
        cache_get_value_int(i, "model", BillboardInfo[i][bbModel]);

        BillboardInfo[i][bbObject] = CreateDynamicObject(BillboardInfo[i][bbModel], BillboardInfo[i][bbPosX], BillboardInfo[i][bbPosY], BillboardInfo[i][bbPosZ], BillboardInfo[i][bbPosRX], BillboardInfo[i][bbPosRY], BillboardInfo[i][bbPosRZ], BillboardInfo[i][bbInt], BillboardInfo[i][bbVW]);

		SetDynamicObjectMaterial(BillboardInfo[i][bbObject], 0, -1, "none", "none", 0xFFFFFFFF);
		SetDynamicObjectMaterialText(BillboardInfo[i][bbObject], 0, BillboardInfo[i][bbText], OBJECT_MATERIAL_SIZE_512x128,"Arial", 28, 0, 0xFF000000, 0x0FFFFFFF, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	}

    printf("[BillBoards] Satir - %i. Yuklenen - %i. Sure: %i ms.", rows, total, GetTickCount()-time);
    return 1;
}

stock Save_BB(i)
{
	new query[526];
	mysql_format(dbHandle, query, sizeof(query),
        "UPDATE `billboards` SET `text`='%e',`rentby`=%i,`cost`=%i,`rentdate`=%i,`posX`=%f,`posY`=%f,`posZ`=%f,`posRX`=%f,`posRY`=%f,`posRZ`=%f,`model`=%i,`int`=%i,`vw`=%i WHERE `id`=%i",
        BillboardInfo[i][bbText], BillboardInfo[i][bbRentBy], BillboardInfo[i][bbRentCost], BillboardInfo[i][bbRentDate],
		BillboardInfo[i][bbPosX], BillboardInfo[i][bbPosY], BillboardInfo[i][bbPosZ],
        BillboardInfo[i][bbPosRX], BillboardInfo[i][bbPosRY], BillboardInfo[i][bbPosRZ],
        BillboardInfo[i][bbModel], BillboardInfo[i][bbInt], BillboardInfo[i][bbVW], BillboardInfo[i][bbID]
    );
	return mysql_tquery(dbHandle, query);
}

stock CreateBillBoard(playerid, Float:X, Float:Y, Float:Z, Float:rotX, Float:rotY, Float:rotZ, Interior, VirtualWorld, bModel, Cost)
{
    new bbid = GetUnusedBillBoard();

    BillboardInfo[bbid][bbPosX] = X;
    BillboardInfo[bbid][bbPosY] = Y;
    BillboardInfo[bbid][bbPosZ] = Z;
    BillboardInfo[bbid][bbPosRX] = rotX;
    BillboardInfo[bbid][bbPosRY] = rotY;
    BillboardInfo[bbid][bbPosRZ] = rotZ;
    BillboardInfo[bbid][bbInt] = Interior;
    BillboardInfo[bbid][bbVW] = VirtualWorld;
    BillboardInfo[bbid][bbActive] = true;

	BillboardInfo[bbid][bbRentCost] = Cost;
	BillboardInfo[bbid][bbModel] = bModel;

    BillboardInfo[bbid][bbObject] = CreateDynamicObject(BillboardInfo[bbid][bbModel], BillboardInfo[bbid][bbPosX], BillboardInfo[bbid][bbPosY], BillboardInfo[bbid][bbPosZ], BillboardInfo[bbid][bbPosRX], BillboardInfo[bbid][bbPosRY], BillboardInfo[bbid][bbPosRZ], BillboardInfo[bbid][bbInt], BillboardInfo[bbid][bbVW]);

	format(BillboardInfo[bbid][bbText], 100, "BURAYA REKLAM VERIN\nBILLBOARD #%i\n{595959}1-800-555", bbid+1);

	SetDynamicObjectMaterial(BillboardInfo[bbid][bbObject], 0, -1, "none", "none", 0xFFFFFFFF);
	SetDynamicObjectMaterialText(BillboardInfo[bbid][bbObject], 0, BillboardInfo[bbid][bbText], OBJECT_MATERIAL_SIZE_512x128,"Arial", 28, 0, 0xFF000000, 0x0FFFFFFF, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

	new query[250+100];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `billboards` (`posX`,`posY`,`posZ`,`posRX`,`posRY`,`posRZ`,`int`,`vw`,`model`,`cost`,`text`) VALUES (%f,%f,%f,%f,%f,%f,%d,%d,%d,%i,'%e')", X, Y, Z, rotX, rotY, rotZ, Interior, VirtualWorld, bbModel, Cost, BillboardInfo[bbid][bbText]);
	mysql_tquery(dbHandle, query, "GetIDforBillboard", "d", bbid);

	SendAdmMessageToPlayer(playerid, "Baþarýyla bir reklam panosu oluþurdun. #%i / ücret - $%i / model - %i", bbid+1, Cost, bModel);
	return 1;
}

this::GetIDforBillboard(i) {
	BillboardInfo[i][bbID] = cache_insert_id();
	return 1;
}

stock DeleteBillBoard(bbid)
{
	new query[182];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `billboards` WHERE `ID` = %d", BillboardInfo[bbid][bbID]);
	mysql_tquery(dbHandle, query);

	DestroyDynamicObject(BillboardInfo[bbid][bbObject]);

    BillboardInfo[bbid][bbID] = 0;
	BillboardInfo[bbid][bbText] = EOS;
	BillboardInfo[bbid][bbRentDate] = 0;
	BillboardInfo[bbid][bbRentBy] = 0;
    BillboardInfo[bbid][bbPosX] = 0.0;
    BillboardInfo[bbid][bbPosY] = 0.0;
    BillboardInfo[bbid][bbPosZ] = 0.0;
    BillboardInfo[bbid][bbPosRX] = 0.0;
    BillboardInfo[bbid][bbPosRY] = 0.0;
    BillboardInfo[bbid][bbPosRZ] = 0.0;
    BillboardInfo[bbid][bbInt] = 0;
    BillboardInfo[bbid][bbVW] = 0;
    BillboardInfo[bbid][bbActive] = false;
	return 1;
}

stock IsAtBillBoard(playerid)
{
	for(new i = 0; i < MAX_BILLBOARDS; i++)
	{
	    if (BillboardInfo[i][bbActive] != true) continue;
	    if (IsPlayerInRangeOfPoint(playerid, 5.0, BillboardInfo[i][bbPosX], BillboardInfo[i][bbPosY], BillboardInfo[i][bbPosZ])) return 1;
	}
	return 0;
}

stock GetPlayerDistanceToPointEx(playerid,Float:sx,Float:sy,Float:sz) //By Sacky
{
	new Float:x1,Float:y1,Float:z1;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(sx,x1)),2)+floatpower(floatabs(floatsub(sy,y1)),2)+floatpower(floatabs(floatsub(sz,z1)),2));
	return floatround(tmpdis);
}

stock GetClosestBillBoard(playerid, Float:radius = 9999.0)
{
	new cl_ID = -1, Float:cl_DIST = radius;
	for(new i = 0; i < MAX_BILLBOARDS; i++)
	{
	    if (BillboardInfo[i][bbActive] != true) continue;
		if ( GetPlayerDistanceToPointEx(playerid, BillboardInfo[i][bbPosX], BillboardInfo[i][bbPosY], BillboardInfo[i][bbPosZ]) < cl_DIST )
		{
		    cl_ID = i;
		    cl_DIST = GetPlayerDistanceToPointEx(playerid, BillboardInfo[i][bbPosX], BillboardInfo[i][bbPosY], BillboardInfo[i][bbPosZ]);
		}
	}
	return cl_ID;
}
stock GetUnusedBillBoard()
{
	for(new i = 0; i < MAX_BILLBOARDS; i++)
	{
	    if (BillboardInfo[i][bbActive] != true) return i;
	}
	return -1;
}

this::MyBillBoard_Unrent(playerid, response, id)
{
	if (!response)    return 1;

	BillBoard_Unrent(id);
	return 1;
}

BillBoard_Unrent(i)
{
	if (IsValidDynamicObject(BillboardInfo[i][bbObject])) DestroyDynamicObject(BillboardInfo[i][bbObject]);
	BillboardInfo[i][bbObject] = CreateDynamicObject(BillboardInfo[i][bbModel], BillboardInfo[i][bbPosX], BillboardInfo[i][bbPosY], BillboardInfo[i][bbPosZ], BillboardInfo[i][bbPosRX], BillboardInfo[i][bbPosRY], BillboardInfo[i][bbPosRZ], BillboardInfo[i][bbInt], BillboardInfo[i][bbVW]);

	BillboardInfo[i][bbRentDate] = 0;
	BillboardInfo[i][bbRentBy] = 0;
	format(BillboardInfo[i][bbText], 100, "BURAYA REKLAM VERIN!\nBILLBOARD #%i\n{595959}1-800-555", i+1);

	Save_BB(i);

	SetDynamicObjectMaterial(BillboardInfo[i][bbObject], 0, -1, "none", "none", 0xFFFFFFFF);
	SetDynamicObjectMaterialText(BillboardInfo[i][bbObject], 0, BillboardInfo[i][bbText], OBJECT_MATERIAL_SIZE_512x128,"Arial", 28, 0, 0xFF000000, 0x0FFFFFFF, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

	return 1;
} //î

Dialog:BillboardList(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

	if (BillboardInfo[listitem][bbRentDate]) {
		pc_cmd_panokirala(playerid, "");
		return SendErrorMessage(playerid, "Bu reklam panosu zaten kiralanmýþ!");
	}

	static const msg[] = "Kiralama Süresi Seçin:\n{FFFFFF}24 saat\t{FF6347}$%i\n{FFFFFF}48 saat\tFF6347$%i\n{FFFFFF}72 saat\t{FF6347}$%i";
	new string[sizeof(msg)+10];

	format(string, sizeof(string), msg,
		BillboardInfo[listitem][bbRentCost],
		floatround(BillboardInfo[listitem][bbRentCost]*2.2),
		floatround(BillboardInfo[listitem][bbRentCost]*3.5)
	);

	SetPVarInt(playerid, #BB_SELECT_ID, listitem);
	Dialog_Show(playerid, BillboardRent, DIALOG_STYLE_TABLIST_HEADERS, "Reklam Panosu Kirala", string, ">>>", "Ýptal");
	return 1;
}

Dialog:BillboardRent(playerid, response, listitem, inputtext[])
{
	if (!response)	return DeletePVar(playerid, #BB_SELECT_ID);

	SetPVarInt(playerid, #BB_SELECT_HH, listitem);

	new id = GetPVarInt(playerid, #BB_SELECT_ID);

	static const msg[] = "{ffffff}Þimdi reklamýnýz için metni girin!\nMaksimum karakterleri göz önünde bulundurun: %i\n\n\n{c3c3c3}[ ! ] Yazdýklarýnýzý kaydetmeyi unutmayýn -> CTRL + C";
	new string[sizeof(msg)+1];

	new max_char;

	switch(BillboardInfo[id][bbModel]) {
		case 7302: max_char = 100;
		case 9314: max_char = 87;
	}

	format(string, sizeof(string), msg, max_char);

	Dialog_Show(playerid, BillboardRent2, DIALOG_STYLE_INPUT, "Reklam Panosu Kirala", string, ">>>", "Ýptal");
	return 1;
}

/*
bblen(str[]) {
    new stop = 0, count = 0;

    for(new i; i < strlen(str); i++) {
        if (str[i] = "{") stop = 1;
        if (str[i] = "}") stop = 0;

        if (!stop) count++;
    }
    return count++;
}*/

Dialog:BillboardRent2(playerid, response, listitem, inputtext[])
{
	if (!response) {
		DeletePVar(playerid, #BB_SELECT_ID);
		DeletePVar(playerid, #BB_SELECT_HH);
		return 1;
	}

	new id = GetPVarInt(playerid, #BB_SELECT_ID);

	if (CheckDialogString(inputtext)) {
		pc_cmd_panokirala(playerid, "");
		DeletePVar(playerid, #BB_SELECT_ID);
		DeletePVar(playerid, #BB_SELECT_HH);

		return SendErrorMessage(playerid, "Reklam metninde kullanýlamaz '\n'!");
	}

	if (1 < strlen(inputtext) < 100) {
		SetPVarString(playerid, #BB_SELECT_TEXT, TextTab(inputtext, 22, 35, 1, 0));

		static const msg[] = " {ffffff}Billboard {c3c3c3}#%i\n{ffffff} Kiralama Ücreti: {c3c3c3}$%i\n{ffffff} Kiralama Süresi: {c3c3c3}%i saat\n{ffffff} Reklam Metni:\n\n{c3c3c3}%s\n\n{ffffff}Her þeyin doðru olup olmadýðýný kontrol edin, eðer doðruysa 'Satýn Al' tuþuna týklayýn!";
		new string[sizeof(msg)+100+2];

		new hours, cost;
		switch(GetPVarInt(playerid, #BB_SELECT_HH)) {
			case 0: { hours = 24; cost = BillboardInfo[id][bbRentCost]; } // 24h
			case 1: { hours = 48; cost = floatround(BillboardInfo[id][bbRentCost]*2.2); } // 48h
			case 2: { hours = 72; cost = floatround(BillboardInfo[id][bbRentCost]*3.5); } // 72h
		}

		format(string, sizeof(string), msg,
			id+1,
			cost,
			hours,
			TextTab(inputtext, 22, 35, 1, 0)
		);

		Dialog_Show(playerid, BillboardRentFinal, DIALOG_STYLE_MSGBOX, "Reklam Panosu Kirala", string, "Satýn Al", "Ýptal");
	} else {
		pc_cmd_panokirala(playerid, "");

		new max_char;
		switch(BillboardInfo[id][bbModel]) {
			case 7302: max_char = 100;
			case 9314: max_char = 87;
		}

		DeletePVar(playerid, #BB_SELECT_ID);
		DeletePVar(playerid, #BB_SELECT_HH);

		return SendErrorMessage(playerid, "1 <= Reklam metni <= %i", max_char);
	}

	return 1;
}

Dialog:BillboardRentFinal(playerid, response, listitem, inputtext[])
{
	if (!response) {
		DeletePVar(playerid, #BB_SELECT_ID);
		DeletePVar(playerid, #BB_SELECT_HH);
		DeletePVar(playerid, #BB_SELECT_TEXT);
		return 1;
	}

	new mes[100], hours, cost, id = GetPVarInt(playerid, #BB_SELECT_ID);

	GetPVarString(playerid, #BB_SELECT_TEXT, mes, 100);

	switch(GetPVarInt(playerid, #BB_SELECT_HH)) {
		case 0: { hours = 24; cost = BillboardInfo[id][bbRentCost]; } // 24h
		case 1: { hours = 48; cost = floatround(BillboardInfo[id][bbRentCost]*2.2); } // 48h
		case 2: { hours = 72; cost = floatround(BillboardInfo[id][bbRentCost]*3.5); } // 72h
	}

	GiveCash(playerid, -cost);

	BillboardInfo[id][bbRentDate] = gettime()+hours*60*60;
	BillboardInfo[id][bbRentBy] = PlayerInfo[playerid][pID];
	format(BillboardInfo[id][bbText], 100, "%s\n{595959}No: %i", mes, PlayerInfo[playerid][pNumber]);

	Save_BB(id);

	SendHelpMessage(playerid, "Baþarýlý þekilde reklam panosu kiraladýnýz [#%i] | {FF6347}%i saat{ffffff} | {FF6347}$%i{ffffff}.", id+1, hours, cost);
    SendHelpMessage(playerid, "/rp - reklam panolarýnýzý kontrol edebilirsiniz.");

	SetDynamicObjectMaterial(BillboardInfo[id][bbObject], 0, -1, "none", "none", 0xFFFFFFFF);
	SetDynamicObjectMaterialText(BillboardInfo[id][bbObject], 0, BillboardInfo[id][bbText], OBJECT_MATERIAL_SIZE_512x128,"Arial", 28, 0, 0xFF000000, 0x0FFFFFFF, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

	return 1;
}

Dialog:MyBillboards(playerid, response, listitem, inputtext[])
{
	if (!response)	return 1;

    new id, count;

    for(new i; i < MAX_BILLBOARDS; i++) {
		if (BillboardInfo[i][bbRentBy] == PlayerInfo[playerid][pID]) {
			if (listitem == count) id = i;
			else count++;
		}
    }

    static const msg[] = "{FFFFFF}Reklam panosunun kiralamasýný iptal etmek istediðinize emin misiniz? [#%i], %s";
    new string[sizeof(msg)+1+MAX_ZONE_NAME];

    new location[MAX_ZONE_NAME];
	GetZone(BillboardInfo[id][bbPosX],BillboardInfo[id][bbPosY], location, MAX_ZONE_NAME);

    format(string, sizeof(string), msg,
        id,
        location
    );

	ConfirmDialog(playerid, "Onayla", string, "MyBillBoard_Unrent", id);
	return 1;
} //î


alias:panokirala("reklampanokira");
CMD:panokirala(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli]) return 1;
	if (!PlayerInfo[playerid][pNumber]) return SendErrorMessage(playerid, "Ýlan gönderebilmek için telefona ihtiyacýnýz var.");

    new bizid = -1;
    if ((bizid = Advertisement_Nearest(playerid)) == -1) return SendErrorMessage(playerid, "Bir reklam ajansýnda deðilsiniz.");
	if (BizInfo[bizid][bizLocked] == 1)					 return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);

	new str[128], mes[(13+MAX_ZONE_NAME+60)*MAX_BILLBOARDS+27] = "Lokasyon\tÝsim\tDurum\n";

	new count;
	for(new i; i < MAX_BILLBOARDS; i++) if (BillboardInfo[i][bbRentBy] == PlayerInfo[playerid][pID]) count++;
	if (count >= 3) return SendErrorMessage(playerid, "Kiralayabileceðiniz maksimum sayýda reklam panosu kiralamýþsýnýz! /rp komutuyla reklamlarýnýzý yönetebilirsiniz.");

	new location[MAX_ZONE_NAME];
	count = 0;

	for(new i; i < MAX_BILLBOARDS; i++) {
		if (!BillboardInfo[i][bbActive]) continue;
		GetZone(BillboardInfo[i][bbPosX],BillboardInfo[i][bbPosY], location, MAX_ZONE_NAME);

		if (!BillboardInfo[i][bbRentDate]) 	format(str, sizeof(str), "%s\t[Reklam Panosu #%i]\t{16b819}Boþta{FFFFFF}", location, i+1);
		else								format(str, sizeof(str), "%s\t[Reklam Panosu #%i]\t{FF6347}%s {FFFFFF}tarafýndan {FF6347}%s{FFFFFF} tarihine kadar kiralanmýþ.", location, i+1, GetPlayerNameBySqlID(BillboardInfo[i][bbRentBy]), get_date("%dd.%mm.%yy", BillboardInfo[i][bbRentDate]));

		format(mes, sizeof(mes), "%s\n%s", mes, str);
		count++;
	}

	if (!count) return SendErrorMessage(playerid, "Sunucuda reklam panosu bulunmuyor!");

	Dialog_Show(playerid, BillboardList, DIALOG_STYLE_TABLIST_HEADERS, "Reklam Panosu Kirala", mes, "Kirala", "Ýptal");
	return 1;
}

alias:reklampanolarim("rp");
CMD:reklampanolarim(playerid , params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli]) return 1;
	if (!PlayerInfo[playerid][pNumber])				return SendErrorMessage(playerid, "Ýlan gönderebilmek için telefona ihtiyacýnýz var.");

    new bizid = -1;
    if ((bizid = Advertisement_Nearest(playerid)) == -1)	return SendErrorMessage(playerid, "Bir reklam ajansýnda deðilsiniz.");
	if (BizInfo[bizid][bizLocked] == 1)						return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);

	new count, str[90], mes[(60+MAX_ZONE_NAME+13)*3+27] = "Lokasyon\tÝsim\tDurum\n", location[MAX_ZONE_NAME];

	for(new i; i < MAX_BILLBOARDS; i++) {
		if (BillboardInfo[i][bbRentBy] == PlayerInfo[playerid][pID])
		{
			GetZone(BillboardInfo[i][bbPosX],BillboardInfo[i][bbPosY], location, MAX_ZONE_NAME);
			format(str, sizeof(str), "%s\t[Reklam Panosu #%i]\t%s{FFFFFF} tarihine kadar kiralanmýþ.", location, i+1, get_date("%dd.%mm.%yy", BillboardInfo[i][bbRentDate]));

			format(mes, sizeof(mes), "%s\n%s", mes, str);
			count++;

			if (count == 3) break;
		}
	}

	if (!count) return SendErrorMessage(playerid, "Kiralýk reklam panonuz yok!");

	Dialog_Show(playerid, MyBillboards, DIALOG_STYLE_TABLIST_HEADERS, "Reklam Panolarýnýz", mes, "Kaldýr", "Ýptal");
	return 1;
}



/* Animasyon sistemi */

PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(PreloadAnimLibs); i ++)
    {
	    ApplyAnimation(playerid, PreloadAnimLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

OnPlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || PlayerInfo[playerid][pInjured] || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0 || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
	{
		return 0;
	}

	/*if (!pTemp[playerid][pPlantTime] && !pTemp[playerid][pCargoID])
		InfoMSG(playerid, "~y~/animdurdur~w~ ile animasyonu ~r~ durdurabilirsiniz", 5);*/

	OnAnim{playerid} = true;
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);

	return 1;
}

ChatAnimation(playerid, len)
{
	if (pTemp[playerid][pEmergency] != 0 || GetPVarInt(playerid, #selfie) || pTemp[playerid][pCallStatus] == 2 || 0 == PlayerInfo[playerid][pTalk] || PlayerInfo[playerid][pInjured] || IsPlayerInAnyVehicle(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0 || AntiCheatGetSpecialAction(playerid) == SPECIAL_ACTION_DUCK || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli])
	{
		return 1;
	}

	switch(PlayerInfo[playerid][pTalk])
	{
	    case 1: ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
	    case 2: ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.0,1,0,0,1,1);
	    case 3: ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.0,1,0,0,1,1);
	    case 4: ApplyAnimation(playerid,"GANGS","prtial_gngtlkC",4.0,1,0,0,1,1);
	    case 5: ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,1,1);
	    case 6: ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.0,1,0,0,1,1);
	    case 7: ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.0,1,0,0,1,1);
	    case 8: ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.0,1,0,0,1,1);
	    case 9: ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
	}
	SetTimerEx("TalkTimer", len * 25, 0, "i", playerid);
	return 1;
}

StopPlayerAnims(playerid)
{
	if (PlayerInfo[playerid][pInjured] || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0 || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli]) return 0;
	//GetPlayerState(playerid) != PLAYER_STATE_ONFOOT

	OnAnim{playerid} = false;
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	return 1;
}

alias:stopanim("animdur", "/animstop", "/animiptal", "/animasyondur", "/animdurdur", "/animasyondurdur", "/sa");
CMD:stopanim(playerid, params[])
{
	if (OnAnim{playerid}) StopPlayerAnims(playerid);
	return 1;
}

alias:animlist("animasyonlar", "/anim", "/anims");
CMD:animlist(playerid, params[])
{
	SendClientMessage(playerid,COLOR_SERVER2,"____________Animasyon Listesi____________");
	SendClientMessage(playerid,COLOR_WHITE,"/elkaldir /otur /nisanal /cellin /cellout /drunk /kicking /bomb /bar /stoptaxi");
	SendClientMessage(playerid,COLOR_WHITE,"/taxicall /gul /crossarms /kus /yemekye /ic /yuru");
	SendClientMessage(playerid,COLOR_WHITE,"/slapass /chat /fucku /taichi /yarali2 /hayir /evet /crawl /ittir /tekme");
	SendClientMessage(playerid,COLOR_WHITE,"/facepalm /kasi /vucutittir /sprey /ilkyardim /yumrukye /yereyigil /ise");
	SendClientMessage(playerid,COLOR_WHITE,"/lifejump /yuvarlan /hoodfrisked /flip /hasta /box /chant /finger /gpunch /gog");
	SendClientMessage(playerid,COLOR_WHITE,"/gkick /lowthrow /riot /bp /agla /taxiR /taxiL /gro /seat /tatto /striptiz");
	SendClientMessage(playerid,COLOR_WHITE,"/joy /dans /sigaraic /bat /basket /yaslan /uzan /gsign /yuru /elsalla /police");
	SendClientMessage(playerid,COLOR_WHITE,"/yarali /waimL /waimR /lookback /caim /creep /sroll /gesture");
	SendClientMessage(playerid,COLOR_WHITE,"/lookout /agreement /bend /cmouth /nfall /hsit /rod /swingback");
	SendClientMessage(playerid,COLOR_WHITE,"/csit /bracing /pool /search /daim /rhandL /rhandR /hstand /nlean /shelter");
	SendClientMessage(playerid,COLOR_WHITE,"/wsit /waim /hangon /polwalk /wallow /nflip /cover /durus /bagir");
	SendClientMessage(playerid,COLOR_WHITE,"/csdead /follow /grnd /copa /cmon /lose /win /gunthreat /givecash /robr");
	SendClientMessage(playerid,COLOR_WHITE,"/serend /heist /beckon /pompali /colt /climb /pushup");
	SendClientMessage(playerid,COLOR_WHITE,"/tlean /swallow /pullhand /nlook /extend /protection");
	SendClientMessage(playerid,COLOR_WHITE,"/rap /car /repcar /onehand /backwalk /mirro /hips /pullo /rtake");
	SendClientMessage(playerid,COLOR_WHITE,"/obalance /wobalance /taction /catch /despair /rooting /spyglass /looksky");
	SendClientMessage(playerid,COLOR_WHITE,"/show /sh /crossfingers /delight /showtable /tfacepalm");
	SendClientMessage(playerid,COLOR_WHITE,"/tpull /fail /wear /fsit /crushjump /scatch /lookfloor /tramplefloor /tgro");
	SendClientMessage(playerid,COLOR_WHITE,"/swing /nbp /takehead /readtable /squat /sprawl /throwmoney /faim");
	SendClientMessage(playerid,COLOR_WHITE,"/greet /hands /yerdenkaldir /tezahurat /idle");
	SendClientMessage(playerid,COLOR_WHITE,"/sarjordoldur /beyzbol /tapcig /dusme /uyu");
	SendClientMessage(playerid,COLOR_SERVER2,"_____________________________________________");

	return 1;
}
alias:strip("striptiz");
CMD:strip(playerid, params[])
{
	new type;

	if (sscanf(params,"d", type)) return SendHelpMessage(playerid, "/striptiz [1-14]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
		case 2: OnPlayAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
		case 3: OnPlayAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
		case 4: OnPlayAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
		case 5: OnPlayAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
		case 6: OnPlayAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
		case 7: OnPlayAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
		case 8: OnPlayAnim(playerid,"STRIP","STR_A2B",4.1,1,1,1,1,1);
		case 9: OnPlayAnim(playerid,"STRIP","STR_B2C",4.1,1,1,1,1,1);
		case 10: OnPlayAnim(playerid,"STRIP","STR_C1",4.1,1,1,1,1,1);
		case 11: OnPlayAnim(playerid,"STRIP","STR_C2",4.1,1,1,1,1,1);
		case 12: OnPlayAnim(playerid,"STRIP","STR_Loop_A",4.1,1,1,1,1,1);
		case 13: OnPlayAnim(playerid,"STRIP","STR_Loop_B",4.1,1,1,1,1,1);
		case 14: OnPlayAnim(playerid,"STRIP","STR_Loop_C",4.1,1,1,1,1,1);
		default: SendHelpMessage(playerid, "/striptiz [1-14]");
	}
	return 1;
}

alias:liftup("yerdenkaldir");
CMD:liftup(playerid, params[])
{
	return OnPlayAnim(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
}

CMD:putdown(playerid, params[])
{
	return OnPlayAnim(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
}

alias:stretch("tezahurat");
CMD:stretch(playerid, params[])
{
	return OnPlayAnim(playerid,"STRIP","PUN_HOLLER",4.1,1,0,0,1,0);
}

alias:idle("aylak");
CMD:idle(playerid, params[])
{
	return OnPlayAnim(playerid,"STRIP","PUN_LOOP",4.1,1,0,0,1,0);
}

alias:batidle("beyzbol");
CMD:batidle(playerid, params[])
{
	return OnPlayAnim(playerid,"BASEBALL","Bat_IDLE",4.1,1,0,0,1,0);
}

alias:aim("nisanal");
CMD:aim(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/nisanal [1-2]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid,"PED","gang_gunstand",3.0,0,1,1,1,0);
		default: SendHelpMessage(playerid, "/nisanal [1-2]");
	}
	return 1;
}

alias:lay("uzan");
CMD:lay(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/uzan [1-5]");

	switch(type)
	{
		case 1:	OnPlayAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
		case 2:	OnPlayAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0);
		case 3:	OnPlayAnim(playerid,"BEACH","ParkSit_W_loop",3.0,0,1,1,1,0);
		case 4:	OnPlayAnim(playerid,"BEACH","SitnWait_loop_W",4.0, 1, 0, 0, 0, 0);
		case 5:	OnPlayAnim(playerid,"SUNBATHE","SBATHE_F_LieB2Sit",3.0,0,1,1,1,0);
		default: SendHelpMessage(playerid, "/uzan [1-5]");
	}
	return 1;
}

alias:crack("yarali");
CMD:crack(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/crack [1-7]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"CRACK","crckdeth2",3.0,1,1,1,1,0);
		case 2: OnPlayAnim(playerid,"CRACK","crckdeth4",3.0,0,1,1,1,0);
		case 3: OnPlayAnim(playerid,"CRACK","crckidle1",3.0,0,1,1,1,0);
		case 4: OnPlayAnim(playerid,"CRACK","crckidle2",3.0,0,1,1,1,0);
		case 5: OnPlayAnim(playerid,"CRACK","crckidle3",3.0,0,1,1,1,0);
		case 6: OnPlayAnim(playerid,"CRACK","crckdeth1",3.0,0,1,1,1,0);
		case 7: OnPlayAnim(playerid,"CRACK","crckdeth3",3.0,0,1,1,1,0);
		default: SendHelpMessage(playerid, "/crack [1-7]");
	}
	return 1;
}

alias:areload("sarjordoldur");
CMD:areload(playerid, params[])
{
	return OnPlayAnim(playerid,"TEC","TEC_reload",4.0,0,0,0,0,0);
}

CMD:bat(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/bat [1-2]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"CRACK","Bbalbat_Idle_02",4.0, 1, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid,"CRACK","Bbalbat_Idle_01",4.0, 1, 0, 0, 0, 0);
		default: SendHelpMessage(playerid, "/bat [1-2]");
	}
	return 1;
}

CMD:tapcig(playerid, params[])
{
	return OnPlayAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
}

alias:fall("dusme");
CMD:fall(playerid, params[])
{
	return OnPlayAnim(playerid,"PARACHUTE","FALL_skyDive_DIE",3.5,0,0,0,1,0);
}

alias:laugh("gul");
CMD:laugh(playerid, params[])
{
	return OnPlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
}

alias:vomit("kus");
CMD:vomit(playerid, params[])
{
	return OnPlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
}

CMD:uyu(playerid, params[])
{
	new type;

	if (sscanf(params, "d", type)) return SendHelpMessage(playerid, "/uyu [1-4]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"INT_HOUSE","BED_Loop_L",4.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"INT_HOUSE","BED_Loop_R",4.0,1,0,0,0,0);
		case 3: OnPlayAnim(playerid,"INT_HOUSE","BED_In_L",4.0,0,0,1,1,0);
		case 4: OnPlayAnim(playerid,"INT_HOUSE","BED_In_R",4.0,0,0,1,1,0);
		default: SendHelpMessage(playerid, "/uyu [1-4]");
	}
	return 1;
}
CMD:inbedleft(playerid, params[])
{
	return OnPlayAnim(playerid,"INT_HOUSE","BED_Loop_L",4.0,1,0,0,0,0);
}

CMD:inbedright(playerid, params[])
{
	return OnPlayAnim(playerid,"INT_HOUSE","BED_Loop_R",4.0,1,0,0,0,0);
}

CMD:taxicall(playerid, params[])
{
	return OnPlayAnim(playerid,"PED","IDLE_taxi",4.0,0,0,0,0,0);
}

alias:cry("agla");
CMD:cry(playerid, params[])
{
	return OnPlayAnim(playerid,"GRAVEYARD","mrnf_loop",4.0,1,0,0,0,0);
}

CMD:sleepl(playerid)
{
	return OnPlayAnim(playerid,"INT_HOUSE","BED_In_L",4.0,0,0,1,1,0);
}

CMD:sleepr(playerid)
{
	return OnPlayAnim(playerid,"INT_HOUSE","BED_In_R",4.0,0,0,1,1,0);
}

CMD:cover(playerid, params[])
{
	return OnPlayAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
}

alias:stance("durus");
CMD:stance(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/durus [1-13]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"PED","WOMAN_IDLESTANCE",4.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"PED","CAR_HOOKERTALK",4.0,1,0,0,0,0);
		case 3: OnPlayAnim(playerid,"FAT","FatIdle",4.0,1,0,0,0,0);
		case 4: OnPlayAnim(playerid,"WUZI","Wuzi_Stand_Loop",4.0,1,0,0,0,0);
		case 5: OnPlayAnim(playerid,"GRAVEYARD","mrnm_loop",4.0,1,0,0,0,0);
		case 6: OnPlayAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
		case 7: OnPlayAnim(playerid,"PED","idlestance_fat",4.0,1,0,0,0,0);
		case 8: OnPlayAnim(playerid,"PED","idlestance_old",4.0,1,0,0,0,0);
		case 9: OnPlayAnim(playerid,"PED","turn_l",4.0,1,0,0,0,0);
		case 10: OnPlayAnim(playerid,"BAR","Barcustom_loop",4.0,1,0,0,0,0);
		case 11: OnPlayAnim(playerid,"BAR","Barserve_loop",4.0,1,0,0,0,0);
		case 12: OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
		case 13: OnPlayAnim(playerid, "DEALER", "DEALER_IDLE", 3.0,0,1,1,1,0);
		default: SendHelpMessage(playerid, "/durus [1-13]");
	}
	return 1;
}

alias:yell("bagirma");
CMD:yell(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/bagirma [1-3]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"ON_LOOKERS","shout_loop",3.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"ON_LOOKERS","shout_01",3.0,1,0,0,0,0);
		case 3: OnPlayAnim(playerid,"ON_LOOKERS","shout_02",3.0,1,0,0,0,0);
		default: SendHelpMessage(playerid, "/bagirma [1-3]");
	}
	return 1;
}

CMD:gsign(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type))	return SendHelpMessage(playerid, "/gsign [1-10]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"GHANDS","gsign1",4.1,0,1,1,1,1);
		case 2: OnPlayAnim(playerid,"GHANDS","gsign1LH",4.1,0,1,1,1,1);
		case 3: OnPlayAnim(playerid,"GHANDS","gsign2",4.1,0,1,1,1,1);
		case 4: OnPlayAnim(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1);
		case 5: OnPlayAnim(playerid,"GHANDS","gsign3",4.1,0,1,1,1,1);
		case 6: OnPlayAnim(playerid,"GHANDS","gsign3LH",4.1,0,1,1,1,1);
		case 7: OnPlayAnim(playerid,"GHANDS","gsign4",4.1,0,1,1,1,1);
		case 8: OnPlayAnim(playerid,"GHANDS","gsign4LH",4.1,0,1,1,1,1);
		case 9: OnPlayAnim(playerid,"GHANDS","gsign5",4.1,0,1,1,1,1);
		case 10: OnPlayAnim(playerid,"GHANDS","gsign5LH",4.1,0,1,1,1,1);
		default: SendHelpMessage(playerid, "/gsign [1-10]");
	}
	return 1;
}

CMD:rap(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/rap [1-9]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,0,0,0,0);
		case 3: OnPlayAnim(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,1,1);
		case 4: OnPlayAnim(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
		case 5: OnPlayAnim(playerid,"GANGS","prtial_gngtlkF",4.0,1,0,0,1,1);
		case 6: OnPlayAnim(playerid,"GANGS","prtial_gngtlkG",4.0,1,0,0,1,1);
		case 7: OnPlayAnim(playerid,"PED","ATM",4.0,0,0,0,0,0);
		case 8: OnPlayAnim(playerid,"RAPPING","RAP_B_IN",3.0,0,1,1,1,0);
		case 9: OnPlayAnim(playerid,"GYMNASIUM","gym_tread_celebrate",4.1,0,1,1,1,0);
		default: SendHelpMessage(playerid, "/rap [1-9]");
	}
	return 1;
}

alias:tired("hasta");
CMD:tired(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/hasta [1-2]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"FAT","IDLE_tired",4.0,0,0,1,1,0);
		default: SendHelpMessage(playerid, "/hasta [1-2]");
	}
	return 1;
}

alias:sit("otur");
CMD:sit(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/otur [1-7]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"PED","SEAT_down",4.0,0,0,1,1,0);
		case 2: OnPlayAnim(playerid,"MISC","seat_lr",2.0,1,0,0,0,0);
		case 3: OnPlayAnim(playerid,"MISC","seat_talk_01",2.0,1,0,0,0,0);
		case 4: OnPlayAnim(playerid,"MISC","seat_talk_02",2.0,1,0,0,0,0);
		case 5: OnPlayAnim(playerid,"INT_OFFICE","OFF_Sit_Crash",4.0,1,0,1,1,0);
		case 6: OnPlayAnim(playerid,"INT_OFFICE","OFF_Sit_Drink",4.0,1,0,1,1,0);
		case 7: OnPlayAnim(playerid,"INT_OFFICE","OFF_Sit_Watch",4.0,0,0,1,1,0);
		default: SendHelpMessage(playerid, "/otur [1-7]");
	}
	return 1;
}

alias:dance("dans");
CMD:dance(playerid, params[])
{
	new type;

	if (PlayerInfo[playerid][pInjured] || IsPlayerInAnyVehicle(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0) return 1;
	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/dans [1-12]");

	switch(type)
	{
		case 1:	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		case 5: OnPlayAnim(playerid,"DANCING","bd_clap",4.1,1,1,1,1,1);
		case 6: OnPlayAnim(playerid,"DANCING","bd_clap1",4.1,1,1,1,1,1);
		case 7: OnPlayAnim(playerid,"DANCING","DAN_Down_A",4.1,1,1,1,1,1);
		case 8: OnPlayAnim(playerid,"DANCING","DAN_Left_A",4.1,1,1,1,1,1);
		case 9: OnPlayAnim(playerid,"DANCING","DAN_Loop_A",4.1,1,1,1,1,1);
		case 10: OnPlayAnim(playerid,"DANCING","DAN_Right_A",4.1,1,1,1,1,1);
		case 11: OnPlayAnim(playerid,"DANCING","DAN_Up_A",4.1,1,1,1,1,1);
		case 12: OnPlayAnim(playerid,"DANCING","dnce_M_a",4.1,1,1,1,1,1);
		default: SendHelpMessage(playerid, "/dans [1-12]");
	}
	return 1;
}

alias:injured("yarali2");
CMD:injured(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/yarali2 [1-2]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0,0,0,1,1,0);
		case 2: OnPlayAnim(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0);
		default: SendHelpMessage(playerid, "/yarali2 [1-2]");
	}
	return 1;
}

alias:handsup("elkaldir");
CMD:handsup(playerid, params[])
{
	if (pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pInjured] || IsPlayerInAnyVehicle(playerid) || JackingEngine[playerid] != 0)	return 1;

	return OnPlayAnim(playerid, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0);
}

alias:deal("alisveris");
CMD:deal(playerid, params[])
{
	return OnPlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
}

alias:piss("ise");
CMD:piss(playerid, params[])
{
	return OnPlayAnim(playerid,"PAULNMAC","Piss_in",4.1,0,1,1,1,0);
}

CMD:riot(playerid, params[])
{
	return OnPlayAnim(playerid,"RIOT","RIOT_ANGRY",4.0,0,0,0,0,0);
}

CMD:slapass(playerid, params[])
{
	return OnPlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
}

alias:wave("elsalla");
CMD:wave(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/elsalla [1-4]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid, "KISSING","gfwave2", 4.1,0,1,1,0,0);
		case 2: OnPlayAnim(playerid, "ON_LOOKERS","wave_loop", 4.1,1,1,1,0,0);
		case 3: OnPlayAnim(playerid,"CAMERA","camstnd_cmon",4.0,0,0,0,0,0);
		case 4: OnPlayAnim(playerid,"PED","endchat_01",4.1,0,1,1,0,0);
		default: SendHelpMessage(playerid, "/elsalla [1-4]");
	}
	return 1;
}

CMD:crossarms(playerid, params[])
{
	return OnPlayAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
}

alias:lean("yaslan");
CMD:lean(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/yaslan [1-3]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"GANGS","leanIDLE",4.0,0,0,1,1,0);
		case 2: OnPlayAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
		case 3: OnPlayAnim(playerid,"CAR_CHAT","car_talkm_loop",4.0,0,1,1,1,0);
		default: SendHelpMessage(playerid, "/yaslan [1-3]");
	}
	return 1;
}

CMD:basket(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/basket [1-7]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
		case 3: OnPlayAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
		case 4: OnPlayAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
		case 5: OnPlayAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
		case 6: OnPlayAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,0,0,0,0,0);
		case 7: OnPlayAnim(playerid,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
		default: SendHelpMessage(playerid, "/basket [1-6]");
	}
	return 1;
}

CMD:lookout(playerid, params[])
{
	new type;

	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/lookout [1-2]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"SWAT","swt_wllpk_L",4.0,0,0,1,1,0);
		case 2: OnPlayAnim(playerid,"SWAT","swt_wllpk_R",4.0,0,0,1,1,0);
		default: SendHelpMessage(playerid, "/lookout [1-2]");
	}
	return 1;
}

CMD:dunk(playerid, params[])
{
	return OnPlayAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,0,0,0,0,0);
}

CMD:win(playerid, params[])
{
	return OnPlayAnim(playerid,"OTB","wtchrace_win",4.1,0,1,1,1,0);
}

alias:walking("yuru");
CMD:walking(playerid, params[])
{
	new type;
	if (sscanf(params,"d",type)) return SendHelpMessage(playerid, "/yuru [1-17]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
		case 2: OnPlayAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		case 3: OnPlayAnim(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
		case 4: OnPlayAnim(playerid,"PED","WALK_armed",4.1,1,1,1,1,1);
		case 5: OnPlayAnim(playerid,"PED","WALK_csaw",4.1,1,1,1,1,1);
		case 6: OnPlayAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		case 7: OnPlayAnim(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
		case 8: OnPlayAnim(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
		case 9: OnPlayAnim(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
		case 10: OnPlayAnim(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
		case 11: OnPlayAnim(playerid,"PED","WALK_rocket",4.1,1,1,1,1,1);
		case 12: OnPlayAnim(playerid,"PED","WALK_shuffle",4.1,1,1,1,1,1);
		case 13: OnPlayAnim(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 14: OnPlayAnim(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
		case 15: OnPlayAnim(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
		case 16: OnPlayAnim(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 17: OnPlayAnim(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
		default: SendHelpMessage(playerid, "/yuru [1-17]");
	}
	return 1;
}

alias:smoking("sigaraic");
CMD:smoking(playerid,params[])
{
	new type;

	if (sscanf(params,"d", type))	return SendHelpMessage(playerid, "/sigaraic [1-4]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid, "SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0);
		case 3: OnPlayAnim(playerid, "SMOKING","M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0);
		case 4: OnPlayAnim(playerid, "SMOKING","M_smk_out", 4.0, 0, 0, 0, 0, 0);
		default: SendHelpMessage(playerid, "/sigaraic [1-4]");
	}
	return 1;
}

alias:eating("yemekye");
CMD:eating(playerid)
{
	return OnPlayAnim(playerid, "FOOD", "EAT_Burger", 4.1,1,1,1,1,1);
}

alias:sipdrink("ic");
CMD:sipdrink(playerid)
{
	return OnPlayAnim(playerid, "GANGS", "drnkbr_prtl", 4.1,1,1,1,1,1);
}

CMD:chat(playerid)
{
	return OnPlayAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
}

CMD:fucku(playerid)
{
	return OnPlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
}

CMD:taichi(playerid)
{
	return OnPlayAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
}

alias:no("hayir");
CMD:no(playerid)
{
	return OnPlayAnim(playerid,"GANGS","Invite_No",4.0,0,0,0,0,0);
}

alias:yes("evet");
CMD:yes(playerid)
{
	return OnPlayAnim(playerid,"GANGS","Invite_Yes",4.0,0,0,0,0,0);
}

CMD:crawl(playerid)
{
	return OnPlayAnim(playerid,"PED","CAR_crawloutRHS",4.0,0,0,0,0,0);
}

alias:push("ittir");
CMD:push(playerid)
{
	return OnPlayAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
}

alias:superkick("tekme");
CMD:superkick(playerid)
{
	return OnPlayAnim(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
}

CMD:facepalm(playerid)
{
	return OnPlayAnim(playerid,"MISC","plyr_shkhead",4.0,0,0,0,0,0);
}

alias:balls("kasi");
CMD:balls(playerid)
{
	return OnPlayAnim(playerid,"MISC","scratchballs_01",4.0,0,0,0,0,0);
}

alias:lowbodypush("vucutittir");
CMD:lowbodypush(playerid)
{
	return OnPlayAnim(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
}

alias:spraying("sprey");
CMD:spraying(playerid)
{
	return OnPlayAnim(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
}

alias:medic("ilkyardim");
CMD:medic(playerid)
{
	return OnPlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
}
alias:koface("yumrukye");
CMD:koface(playerid)
{
	return OnPlayAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
}

alias:kostomach("yereyigil");
CMD:kostomach(playerid)
{
	return OnPlayAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
}

CMD:lifejump(playerid)
{
	return OnPlayAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,0);
}

alias:rollfall("yuvarlan");
CMD:rollfall(playerid)
{
	return OnPlayAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
}

alias:hoodfrisked("frisked");
CMD:hoodfrisked(playerid)
{
	return OnPlayAnim(playerid,"POLICE","crm_drgbst_01",1.0,0,1,1,1,0);
}

CMD:flip(playerid)
{
	return OnPlayAnim(playerid,"PED","KD_left",4.1,0,1,1,1,0);
}

CMD:frontfall(playerid)
{
	return OnPlayAnim(playerid,"PED","FLOOR_hit_f",4.1,0,1,1,1,0);
}

CMD:box(playerid)
{
	return OnPlayAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
}

CMD:chant(playerid)
{
	return OnPlayAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
}

CMD:finger(playerid)
{
	return OnPlayAnim(playerid,"RIOT","RIOT_FUKU",2.0,0,0,0,0,0);
}

CMD:gpunch(playerid)
{
	return OnPlayAnim(playerid,"FIGHT_B","FightB_G",4.0,0,0,0,0,0);
}

CMD:gkick(playerid)
{
	return OnPlayAnim(playerid,"FIGHT_D","FightD_G",4.0,0,0,0,0,0);
}

CMD:lowthrow(playerid)
{
	return OnPlayAnim(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
}

CMD:bp(playerid)
{
	return OnPlayAnim(playerid,"benchpress","gym_bp_celebrate",4.0,0,0,0,0,0);
}

CMD:taxir(playerid)
{
	return OnPlayAnim(playerid,"MISC","Hiker_Pose",4.0,0,1,1,1,0);
}

CMD:taxil(playerid)
{
	return OnPlayAnim(playerid,"MISC","Hiker_Pose_L",4.0,0,1,1,1,0);
}

CMD:gro(playerid)
{
	return OnPlayAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
}

CMD:seat(playerid)
{
	return OnPlayAnim(playerid,"INT_HOUSE","LOU_In",4.0,0,0,1,1,0);
}

CMD:tatto(playerid)
{
	return OnPlayAnim(playerid,"TATTOOS", "TAT_ArmR_Pose_P", 4.1, 0, 1, 1, 1, 0 );
}
CMD:bar(playerid)
{
	return OnPlayAnim(playerid,"BAR","Barserve_bottle",4.0,0,1,1,1,0);
}
CMD:stoptaxi(playerid)
{
	return OnPlayAnim(playerid,"PED","IDLE_taxi",4.0,0,0,0,0,0);
}
CMD:police(playerid,params[])
{
	new type;

	if (sscanf(params,"d", type))	return SendHelpMessage(playerid, "/police [1-4]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"POLICE","CopTraf_Away",3.0,1,0,0,1,0);
		case 2: OnPlayAnim(playerid,"POLICE","CopTraf_Come",3.0,1,0,0,1,0);
		case 3: OnPlayAnim(playerid,"POLICE","CopTraf_Left",3.0,1,0,0,1,0);
		case 4: OnPlayAnim(playerid,"POLICE","CopTraf_Stop",3.0,1,0,0,1,0);
		default: SendHelpMessage(playerid, "/police [1-4]");
	}
	return 1;
}

CMD:waiml(playerid)
{
	return OnPlayAnim(playerid,"PED","Driveby_L",4.1,0,1,1,1,1);
}

CMD:waimr(playerid)
{
	return OnPlayAnim(playerid,"PED","Driveby_R",4.1,0,1,1,1,1);
}

CMD:lookback(playerid)
{
	return OnPlayAnim(playerid,"PED","flee_lkaround_01",4.0,0,0,0,0,0);
}

CMD:caim(playerid)
{
	return OnPlayAnim(playerid,"PED","IDLE_ROCKET",4.0,0,1,1,1,0);
}

CMD:creep(playerid)
{
	return OnPlayAnim(playerid,"PED","Player_Sneak",4.1,1,1,1,1,1);
}

CMD:sroll(playerid)
{
	return OnPlayAnim(playerid,"SWAT","JMP_Wall1m_180",4.1,0,1,1,1,0);
}

CMD:gesture(playerid)
{
	return OnPlayAnim(playerid,"SWAT","swt_lkt",4.0,0,0,0,0,0);
}

CMD:agreement(playerid)
{
	return OnPlayAnim(playerid,"COP_AMBIENT","Coplook_think",4.0,1,0,0,0,0);
}

CMD:bend(playerid)
{
	return OnPlayAnim(playerid,"BAR","Barserve_order",4.0,0,0,0,0,0);
}

CMD:rod(playerid)
{
	return OnPlayAnim(playerid,"benchpress","gym_bp_up_A",4.0,0,0,1,1,0);
}

CMD:tgro(playerid)
{
	return OnPlayAnim(playerid,"CAMERA","camcrch_cmon",4.0,0,0,1,1,0);
}

CMD:cmouth(playerid)
{
	return OnPlayAnim(playerid,"ON_LOOKERS","panic_in",4.0,0,0,1,1,0);
}

CMD:gog(playerid)
{
	return OnPlayAnim(playerid,"goggles","goggles_put_on",4.1,0,1,1,1,1);
}

CMD:nfall(playerid)
{
	return OnPlayAnim(playerid,"HEIST9","CAS_G2_GasKO",4.1,0,1,1,1,0);
}

CMD:hsit(playerid)
{
	return OnPlayAnim(playerid,"INT_OFFICE","OFF_Sit_Bored_Loop",4.0,1,0,1,1,0);
}

CMD:csit(playerid)
{
	return OnPlayAnim(playerid,"INT_OFFICE","OFF_Sit_Type_Loop",4.0,1,0,1,1,0);
}

CMD:bracing(playerid)
{
	return OnPlayAnim(playerid,"PLAYIDLES","stretch",4.0,0,0,0,0,0);
}

CMD:pool(playerid)
{
	return OnPlayAnim(playerid,"POOL","POOL_Long_Start",4.1,0,1,1,1,0);
}

CMD:search(playerid)
{
	return OnPlayAnim(playerid,"ROB_BANK","CAT_Safe_Rob",4.0,1,0,0,0,0);
}

CMD:daim(playerid)
{
	return OnPlayAnim(playerid,"RYDER","Van_Stand_Crate",3.0,0,1,1,1,0);
}

CMD:rhandl(playerid)
{
	return OnPlayAnim(playerid,"SCRATCHING","scdlulp",4.0,0,0,1,1,0);
}

CMD:rhandr(playerid)
{
	return OnPlayAnim(playerid,"SCRATCHING","scdrulp",4.0,0,0,1,1,0);
}

CMD:hstand(playerid)
{
	return OnPlayAnim(playerid,"SCRATCHING","scdrdlp",4.0,0,0,1,1,0);
}

CMD:nlean(playerid)
{
	return OnPlayAnim(playerid,"SHAMAL","SHAMAL_align",4.1,0,1,1,1,0);
}

CMD:shelter(playerid)
{
	return OnPlayAnim(playerid,"SHOP","SHP_Duck_Fire",4.0,0,0,1,1,0);
}

CMD:wsit(playerid)
{
	return OnPlayAnim(playerid,"SHOP","SHP_Gun_Duck",4.0,0,0,1,1,0);
}

CMD:waim(playerid)
{
	return OnPlayAnim(playerid,"TEC","TEC_reload",4.1,0,1,1,1,1);
}

CMD:hangon(playerid)
{
	return OnPlayAnim(playerid,"TRAIN","tran_ouch",4.0,0,0,1,1,0);
}

CMD:polwalk(playerid)
{
	return OnPlayAnim(playerid,"POLICE","Cop_move_FWD",3.0,1,1,1,1,1);
}

CMD:wallow(playerid,params[])
{
	new type;

	if (sscanf(params,"d", type))	return SendHelpMessage(playerid, "/wallow [1-2]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll",4.1,0,1,1,1,0);
		case 2: OnPlayAnim(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll_F",4.1,0,1,1,1,0);
		default: SendHelpMessage(playerid, "/wallow [1-2]");
	}
	return 1;
}

CMD:nflip(playerid)
{
	return OnPlayAnim(playerid,"PED","BIKE_fall_off",4.1,0,1,1,1,0);
}

CMD:csdead(playerid)
{
	return OnPlayAnim(playerid,"WUZI","CS_Dead_Guy",4.1,1,1,1,1,0);
}

CMD:follow(playerid)
{
	return OnPlayAnim(playerid,"WUZI","Wuzi_follow",4.1,0,1,1,1,1);
}

CMD:grnd(playerid)
{
	return OnPlayAnim(playerid,"WUZI","Wuzi_grnd_chk",4.0,0,0,0,0,0);
}

CMD:copa(playerid)
{
	return OnPlayAnim(playerid,"COP_AMBIENT","Copbrowse_in",4.1,0,1,1,1,0);
}

CMD:cmon(playerid)
{
	return OnPlayAnim(playerid,"OTB","wtchrace_cmon",4.1,0,1,1,1,0);
}

CMD:lose(playerid)
{
	return OnPlayAnim(playerid,"OTB","wtchrace_lose",4.1,0,1,1,1,0);
}

CMD:gunthreat(playerid)
{
	return OnPlayAnim(playerid,"SHOP","SHP_Gun_Threat",4.1,0,1,1,1,0);
}

CMD:givecash(playerid)
{
	return OnPlayAnim(playerid,"SHOP","SHP_Rob_GiveCash",4.1,0,1,1,1,0);
}

CMD:robr(playerid)
{
	return OnPlayAnim(playerid,"SHOP","SHP_Rob_React",4.1,0,1,1,1,0);
}

CMD:serend(playerid)
{
	return OnPlayAnim(playerid,"SHOP","SHP_Serve_End",4.1,0,1,1,1,0);
}

CMD:heist(playerid)
{
	return OnPlayAnim(playerid,"HEIST9","Use_SwipeCard",4.0,0,0,0,0,0);
}

CMD:beckon(playerid,params[])
{
	new type;

	if (sscanf(params,"d", type))	return SendHelpMessage(playerid, "/beckon [1-3]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"RYDER","RYD_Beckon_01",4.1,0,1,1,1,1);
		case 2: OnPlayAnim(playerid,"RYDER","RYD_Beckon_02",4.1,0,1,1,1,1);
		case 3: OnPlayAnim(playerid,"RYDER","RYD_Beckon_03",4.1,0,1,1,1,1);
		default: SendHelpMessage(playerid, "/beckon [1-3]");
	}
	return 1;
}

CMD:pompali(playerid,params[])
{
	new type;

	if (sscanf(params,"d", type))	return SendHelpMessage(playerid, "/pompali [1-3]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"SHOTGUN","shotgun_crouchfire",4.1,0,1,1,1,1);
		case 2: OnPlayAnim(playerid,"SHOTGUN","shotgun_fire",4.1,0,1,1,1,1);
		case 3: OnPlayAnim(playerid,"SHOTGUN","shotgun_fire_poor",4.1,0,1,1,1,1);
		default: SendHelpMessage(playerid, "/pompali [1-3]");
	}
	return 1;
}

CMD:colt(playerid,params[])
{
	new type;

	if (sscanf(params,"i", type))	return SendHelpMessage(playerid, "/colt [1-3]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"COLT45","colt45_fire_2hands",4.1,0,1,1,1,1);
		case 2: OnPlayAnim(playerid,"COLT45","colt45_reload",4.1,0,1,1,1,1);
		case 3: OnPlayAnim(playerid,"COLT45","sawnoff_reload",4.1,0,1,1,1,1);
		default: SendHelpMessage(playerid, "/colt [1-3]");
	}
	return 1;
}

CMD:climb(playerid)
{
	return OnPlayAnim(playerid,"PED","CLIMB_jump",4.0,0,0,1,1,0);
}

CMD:tlean(playerid)
{
	return OnPlayAnim(playerid,"PED","DRIVE_BOAT",4.0,0,0,1,1,0);
}

CMD:pushup(playerid)
{
	return OnPlayAnim(playerid,"PED","getup_front",4.0,1,0,1,1,0);
}

CMD:protection(playerid)
{
	return OnPlayAnim(playerid,"PED","FightShB",4.0,0,1,1,1,1);
}

CMD:swallow(playerid)
{
	return OnPlayAnim(playerid,"PED","gum_eat",4.0,0,0,0,0,0);
}

CMD:pullhand(playerid)
{
	return OnPlayAnim(playerid,"PED","Jetpack_Idle",3.0,0,1,1,1,0);
}

CMD:nlook(playerid)
{
	return OnPlayAnim(playerid,"PED","roadcross_gang",4.0,0,0,0,0,0);
}

CMD:extend(playerid)
{
	return OnPlayAnim(playerid,"PED","Shove_Partial",4.1,0,1,1,1,1);
}

CMD:car(playerid,params[])
{
	new type;

	if (!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Araçta olmalýsýnýz.");
	if (IsDriver(playerid))				return SendErrorMessage(playerid, "Sürücü koltuðundaki kiþiler animasyon yapamaz.");
	if (sscanf(params,"d", type))		return SendHelpMessage(playerid, "/car [1-11]");

	switch(type)
	{
		case 1: ApplyAnimation(playerid,"LOWRIDER","lrgirl_bdbnce",4.1,0,1,1,1,0,1);
		case 2: ApplyAnimation(playerid,"LOWRIDER","lrgirl_hair",4.1,0,1,1,1,0,1);
		case 3: ApplyAnimation(playerid,"LOWRIDER","lrgirl_idle_to_l0",4.1,0,1,1,1,0,1);
		case 4: ApplyAnimation(playerid,"PED","Tap_hand",4.1,0,1,1,1,0,1);
		case 5: ApplyAnimation(playerid,"PED","Tap_handP",4.1,0,1,1,1,0,1);
		case 6: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l12_to_l0",4.1,0,1,1,1,0,1);
		case 7: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_to_l3",4.1,0,1,1,1,0,1);
		case 8: ApplyAnimation(playerid,"PED","CAR_LB",4.1,0,1,1,1,0,1);
		case 9: ApplyAnimation(playerid,"PED","CAR_sitp",4.1,0,1,1,1,0,1);
		case 10: ApplyAnimation(playerid,"PED","CAR_sitpLO",4.1,0,1,1,1,0,1);
		case 11: ApplyAnimation(playerid,"CAR_CHAT","carfone_loopA",4.1,1,1,1,1,0,1);
		default: SendHelpMessage(playerid, "/car [1-11]");
	}
	return 1;
}

CMD:repcar(playerid,params[])
{
	new type;

	if (sscanf(params,"d", type))	return SendHelpMessage(playerid, "/repcar [1-2]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"CAR","Fixn_Car_Loop",3.0,0,1,1,1,0);
		case 2: OnPlayAnim(playerid,"CAR","Fixn_Car_Out",3.0,0,1,1,1,0);
		default: SendHelpMessage(playerid, "/repcar [1-2]");
	}
	return 1;
}

CMD:onehand(playerid)
{
	return OnPlayAnim(playerid,"PED","CLIMB_jump2fall",4.1,0,1,1,1,0);
}

CMD:backwalk(playerid)
{
	return OnPlayAnim(playerid,"PED","gas_cwr",4.1,1,1,1,1,1);
}

CMD:mirro(playerid)
{
	return OnPlayAnim(playerid,"CLOTHES","CLO_Pose_Hat",4.1,0,1,1,1,0);
}

CMD:hips(playerid)
{
	return OnPlayAnim(playerid,"COP_AMBIENT","Coplook_shake",4.1,0,1,1,1,0);
}

CMD:pullo(playerid)
{
	return OnPlayAnim(playerid,"AIRPORT","thrw_barl_thrw",4.1,0,1,1,1,0);
}

CMD:rtake(playerid)
{
	return OnPlayAnim(playerid,"BAR","Barserve_give",4.0,0,0,0,0,0);
}

CMD:obalance(playerid)
{
	return OnPlayAnim(playerid,"BD_FIRE","BD_Panic_02",4.1,0,1,1,1,0);
}

CMD:wobalance(playerid)
{
	return OnPlayAnim(playerid,"BD_FIRE","BD_Panic_03",4.1,0,1,1,1,0);
}

CMD:taction(playerid)
{
	return OnPlayAnim(playerid,"BD_FIRE","wash_up",4.0,0,0,0,0,0);
}

CMD:catch(playerid)
{
	return OnPlayAnim(playerid,"MD_CHASE","MD_HANG_Loop",4.1,0,1,1,1,0);
}

CMD:despair(playerid)
{
	return OnPlayAnim(playerid,"BSKTBALL","BBALL_react_miss",4.0,0,0,0,0,0);
}

CMD:rooting(playerid)
{
	return OnPlayAnim(playerid,"BSKTBALL","BBALL_react_score",4.1,1,1,1,1,0);
}

CMD:spyglass(playerid)
{
	return OnPlayAnim(playerid,"CAMERA","picstnd_take",4.1,0,1,1,1,0);
}

CMD:looksky(playerid)
{
	return OnPlayAnim(playerid,"ON_LOOKERS","lkup_loop",4.1,0,1,1,1,0);
}

CMD:show(playerid,params[])
{
	new type;

	if (sscanf(params,"d", type))	return SendHelpMessage(playerid, "/show [1-3]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"ON_LOOKERS","panic_point",4.1,0,1,1,1,0);
		case 2: OnPlayAnim(playerid,"ON_LOOKERS","panic_shout",4.1,0,1,1,1,0);
		case 3: OnPlayAnim(playerid,"ON_LOOKERS","point_loop",4.1,0,1,1,1,0);
		default: SendHelpMessage(playerid, "/show [1-3]");
	}
	return 1;
}

CMD:sh(playerid)
{
	return OnPlayAnim(playerid,"ON_LOOKERS","shout_in",4.0,0,0,0,0,0);
}

CMD:crossfingers(playerid)
{
	return OnPlayAnim(playerid,"CASINO","cards_loop",4.1,0,1,1,1,0);
}

CMD:delight(playerid)
{
	return OnPlayAnim(playerid,"CASINO","manwinb",4.0,0,0,0,0,0);
}

CMD:hdelight(playerid)
{
	return OnPlayAnim(playerid,"CASINO","manwind",4.0,0,0,0,0,0);
}

CMD:showtable(playerid)
{
	return OnPlayAnim(playerid,"CASINO","Roulette_bet",4.1,0,1,1,1,0);
}

CMD:tfacepalm(playerid)
{
	return OnPlayAnim(playerid,"CASINO","Roulette_lose",4.1,0,1,1,1,0);
}

CMD:tpull(playerid)
{
	return OnPlayAnim(playerid,"CASINO","Slot_in",4.1,0,1,1,1,0);
}

CMD:fail(playerid)
{
	return OnPlayAnim(playerid,"CASINO","Slot_lose_out",4.0,0,0,0,0,0);
}

CMD:joy(playerid)
{
	return OnPlayAnim(playerid,"CASINO","Slot_win_out",4.0,0,0,0,0,0);
}

CMD:wear(playerid)
{
	return OnPlayAnim(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
}

CMD:fsit(playerid)
{
	return OnPlayAnim(playerid,"JST_BUISNESS","girl_02",4.1,0,1,1,1,0);
}

CMD:crushjump(playerid)
{
	return OnPlayAnim(playerid,"DODGE","Crush_Jump",4.1,0,1,1,1,0);
}

CMD:scatch(playerid)
{
	return OnPlayAnim(playerid,"FINALE","FIN_LegsUp_Loop",4.1,0,1,1,1,0);
}

CMD:lookfloor(playerid)
{
	return OnPlayAnim(playerid,"FINALE","FIN_Cop1_Loop",4.1,0,1,1,1,0);
}

CMD:tramplefloor(playerid)
{
	return OnPlayAnim(playerid,"FINALE","FIN_Cop1_Stomp",4.1,1,1,1,1,0);
}

CMD:swing(playerid)
{
	return OnPlayAnim(playerid,"Freeweights","gym_free_B",4.1,0,1,1,1,0);
}

CMD:nbp(playerid)
{
	return OnPlayAnim(playerid,"Freeweights","gym_free_celebrate",4.0,0,0,0,0,0);
}

CMD:takehead(playerid)
{
	return OnPlayAnim(playerid,"HAIRCUTS","BRB_Cut",4.1,0,1,1,1,0);
}

CMD:readtable(playerid)
{
	return OnPlayAnim(playerid,"SCRATCHING","sclng_r",4.1,0,1,1,1,0);
}

CMD:squat(playerid)
{
	return OnPlayAnim(playerid,"TEC","TEC_crouchfire",4.1,0,1,1,1,0);
}

CMD:sprawl(playerid)
{
	return OnPlayAnim(playerid,"TATTOOS","TAT_Idle_Loop_T",4.1,0,1,1,1,0);
}

CMD:throwmoney(playerid)
{
	return OnPlayAnim(playerid,"STRIP","PUN_CASH",4.0,0,0,0,0,0);
}

CMD:faim(playerid)
{
	return OnPlayAnim(playerid,"SWORD","sword_IDLE",4.1,0,1,1,1,0);
}

CMD:swingback(playerid)
{
	return OnPlayAnim(playerid,"PED","getup",4.1, 0, 1, 1, 1, 0);
}

CMD:hands(playerid,params[])
{
	new type;

	if (sscanf(params,"d", type))	return SendHelpMessage(playerid, "/hands [1-7]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkB",4.1,0,1,1,1,1);
		case 2: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkC",4.1,0,1,1,1,1);
		case 3: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkD",4.1,0,1,1,1,1);
		case 4: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkE",4.1,0,1,1,1,1);
		case 5: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkF",4.1,0,1,1,1,1);
		case 6: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkG",4.1,0,1,1,1,1);
		case 7: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkH",4.1,0,1,1,1,1);
		default: SendHelpMessage(playerid, "/hands [1-7]");
	}
	return 1;
}

CMD:cellin(playerid)
{
	// TO DO
	return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
}

CMD:cellout(playerid)
{
	// TO DO
	if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USECELLPHONE) return SendErrorMessage(playerid, "/cellin kullanmadan bu animasyon çalýþmaz.");

	return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
}

CMD:drunk(playerid)
{
	return OnPlayAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
}

CMD:kicking(playerid)
{
	return OnPlayAnim(playerid,"GANGS","shake_carK",4.0,0,0,0,0,0);
}

CMD:bomb(playerid)
{
	return OnPlayAnim(playerid, "BOMBER","BOM_Plant",4.0,0,0,0,0,0);
}

CMD:pos(playerid, params[])
{
	new Float:Pos[3], Float:angle;

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, angle);
    SendSyntaxMessage(playerid, "POS: %f, %f, %f, %f", Pos[0], Pos[1], Pos[2], angle);
	return 1;
}

/* Çeþitli eklentiler */

GetPlayerAcceptAction(playerid)
{
	if (GetPVarInt(playerid, #accept_time) < gettime()) return 0;

	if (pTemp[playerid][pGreetPlayer] != INVALID_PLAYER_ID)
	{
	    new userid = pTemp[playerid][pGreetPlayer], type = pTemp[playerid][pGreetType];

	    pTemp[playerid][pGreetPlayer] = INVALID_PLAYER_ID;
		pTemp[playerid][pGreetType] = 0;

		if (IsPlayerLogged(userid) == 0)				return SendErrorMessage(playerid, "Size teklif gönderen oyuncu çevrimiçi deðil.");
		if (!PlayerNearPlayer(1.0, playerid, userid))	return SendNotNearPlayer(playerid);

		StopPlayerAnims(playerid);
		StopPlayerAnims(userid);
		SetPlayerFacePlayer(playerid, userid);
		SetPlayerFacePlayer(userid, playerid);

		switch(type)
		{
			case 1:
			{
				ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 2.0, 0, 0, 1, 0, 0, 1);
				ApplyAnimation(userid, "KISSING", "Playa_Kiss_02", 2.0, 0, 0, 1, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa_swt", 2.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(userid, "GANGS", "hndshkfa_swt", 2.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 2.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(userid, "GANGS", "hndshkba", 2.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkca", 2.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(userid, "GANGS", "hndshkca", 2.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkcb", 2.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(userid, "GANGS", "hndshkcb", 2.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 2.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(userid, "GANGS", "hndshkda", 2.0, 0, 0, 0, 0, 0, 1);
			}
			case 7:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 2.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(userid, "GANGS", "hndshkda", 2.0, 0, 0, 0, 0, 0, 1);
			}
			case 8:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkaa", 2.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(userid, "GANGS", "hndshkaa", 2.0, 0, 0, 0, 0, 0, 1);
			}
			case 9:
			{
				ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 2.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(userid, "GANGS", "prtial_hndshk_biz_01", 2.0, 0, 0, 0, 0, 0, 1);
			}
		}
		return 1;
	}

    else if (pTemp[playerid][pCarPlayer] != INVALID_PLAYER_ID)
	{
  		new query[256];
    	mysql_format(dbHandle, query, sizeof(query), "SELECT `id` FROM `cars` WHERE `owner` = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(dbHandle, query, "BuyVehicleAtPlayer", "i", playerid);
   		return 1;
	}

    else if (pTemp[playerid][pHealPlayer] != INVALID_PLAYER_ID)
	{
	    new userid = pTemp[playerid][pHealPlayer];
	    pTemp[playerid][pHealPlayer] = INVALID_PLAYER_ID;

	    if (!IsPlayerLogged(userid))				return SendErrorMessage(playerid, "Sizi tedavi etmek isteyen oyuncu çevrimiçi deðil.");
        if (PlayerInfo[playerid][pInjured] != 0)	return SendErrorMessage(playerid, "Aðýr yaralandýn.");

		SendSyntaxMessage(playerid, "%s iyileþtirildi.", GetNameWithMask(userid));
		SendSyntaxMessage(userid, "%s sizi iyileþtirdi.", GetNameWithMask(playerid));
		PlayerInfo[playerid][pHealth] = 100.0;
		return 1;
	}
	else if (pTemp[playerid][pWepPlayer] != INVALID_PLAYER_ID)
	{
		new userid = pTemp[playerid][pWepPlayer],
		    price = pTemp[playerid][pWepPrice];

        pTemp[playerid][pWepPlayer] = INVALID_PLAYER_ID;

		if (!IsPlayerLogged(userid))		return SendErrorMessage(playerid, "Size silah lisansýný teklif eden oyuncu çevrimiçi deðil.");
		if (GetCash(playerid) < price)	return SendNotCash(playerid);

		GiveCash(playerid, -price);
		PlayerInfo[playerid][pWepLic] = 1;
		PlayerInfo[playerid][pWepWarns] = 0;
        PlayerInfo[playerid][pWepCount] = 3;

        new query[168];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `wep_count`='3',`weplic`='1',`wepwarns`='0',`wep_officer`='%s',`wep_data`='%s',`wep_price`=%i WHERE `id` = %i", GetNameEx(userid), GetFullDate(), price, PlayerInfo[playerid][pID]);
		mysql_tquery(dbHandle, query);

		SendSyntaxMessage(userid, "%s sizden $%i karþýlýðýnda silah ruhsatý aldý.", GetNameEx(playerid), price);
        SendSyntaxMessage(playerid, "%s adlý oyuncudan $%i karþýlýðýnda silah ruhsatý aldýnýz.", GetNameEx(userid), price);
		return 1;
	}

	else if (pTemp[playerid][pHirePlayer] != INVALID_PLAYER_ID)
	{
        new userid = pTemp[playerid][pHirePlayer];
		DebugMessage(playerid, sprintf("davet eden %d, davet alan %d", userid, playerid));

        if (!IsPlayerLogged(userid))					return SendErrorMessage(playerid, "Size iþ teklif eden oyuncu çevrimiçi deðil.");
        if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);

        new bizid = GetNearBiz(playerid);

		if (bizid < 1)	return SendErrorMessage(playerid, "Yakýnýnýzda bir iþyeri yok.");
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[userid][pID])	return SendErrorMessage(playerid, "Bulunduðunuz iþyerinin sahibi sizi davet eden kiþi deðil.");

		PlayerInfo[playerid][pWorkOn] = BizInfo[bizid][bizID];
		SQL_SetInteger("users", "workon", BizInfo[bizid][bizID], PlayerInfo[playerid][pID]);

		new j = WorkSpace(bizid);
		BizWorkers[bizid][j][bizJobOn] = PlayerInfo[playerid][pID];
		format(BizWorkers[bizid][j][bizWorker], MAX_PLAYER_NAME, "%s", GetNameEx(playerid));
		format(BizWorkers[bizid][j][bizPosition], MAX_PLAYER_NAME, "Pozisyon yok");

		SendSyntaxMessage(playerid, "%s iþ teklifini kabul etti.", GetNameEx(userid));
		SendSyntaxMessage(userid, "%s adlý kiþinin iþ teklifini kabul ettiniz.", GetNameEx(playerid));

		pTemp[playerid][pHirePlayer] = INVALID_PLAYER_ID;
		return 1;
	}

	else if (pTemp[playerid][pFactionPlayer] != INVALID_PLAYER_ID)
	{
		new targetid = pTemp[playerid][pFactionPlayer];

        if (!IsPlayerLogged(targetid))								return SendErrorMessage(playerid, "Sizi birliðe davet eden oyuncu çevrimiçi deðil.");
        if (!isLeader(targetid) || !GetInviteRight(targetid))		return 1;
	    if (!Factions[PlayerInfo[targetid][pFaction]][fJoinRank])	return SendErrorMessage(playerid, "Giriþ yapamazsýnýz. Birlikteki rütbeler ve maaþlar yapýlmamýþ.");

		/*PlayerInfo[playerid][pFaction] = PlayerInfo[targetid][pFaction];
		PlayerInfo[playerid][pRank] = Factions[PlayerInfo[targetid][pFaction]][fJoinRank];*/

		PlayerInfo[playerid][pFaction] = pTemp[playerid][pFactionInvite];
		PlayerInfo[playerid][pRank] = Factions[PlayerInfo[targetid][pFaction]][fJoinRank];

		pTemp[playerid][pFactionInvite] = 0;
		pTemp[playerid][pFactionInvitedBy] = INVALID_PLAYER_ID;

		PlayerInfo[playerid][pBadgeNumber] = randomEx(23465, 99999);

		SendSyntaxMessage(playerid, "%s birliðine katýldýn.", Factions[PlayerInfo[targetid][pFaction]][fName]);
		SM1(targetid, "%s adlý kiþi birlik davetinizi kabul etti.", GetNameWithMask(playerid));
		SendFactionMessageF(PlayerInfo[targetid][pFaction], COLOR_LIGHTBLUE, "[BÝRLÝK] %s adlý kiþi %s tarafýndan birliðe davet edildi ve birliðe katýldý.", GetNameEx(targetid), GetNameEx(playerid));

		pTemp[playerid][pFactionPlayer] = INVALID_PLAYER_ID;
		return 1;
	}

	else if (RefillOffer[playerid] != INVALID_PLAYER_ID)
	{
		new userid = RefillOffer[playerid], price = RefillPrice[playerid], vehicle = GetPlayerVehicleID(playerid);

        if (!IsPlayerLogged(userid)) return SendErrorMessage(playerid, "Size yakýt doldurmayý teklif eden oyuncu çevrimiçi deðil.");

        RefillPrice[playerid] = 0;
		RefillOffer[playerid] = INVALID_PLAYER_ID;

		if (!IsDriver(playerid))						return SendErrorMessage(playerid, "Aracýn sürücü koltuðunda olmalýsýnýz.");
		if (!PlayerNearPlayer(6.0, playerid, userid))	return SendNotNearPlayer(playerid);
		if (GetCash(playerid) < price)					return SendNotCash(playerid);

		GiveCash(playerid, -price);
		GiveCash(userid, price);
		VehicleInfo[vehicle][carFuel] = GetVehicleFuelCapacity(GetVehicleModel(vehicle));

		new mes[128];
		format(mes, sizeof(mes), "%s kiþisinin aracýna $%i karþýlýðýnda yakýt doldurur..", GetNameWithMask(userid), price);
		pc_cmd_me(playerid, mes);

		return 1;
	}

	else if (pTemp[playerid][pServePlayer] != INVALID_PLAYER_ID && pTemp[playerid][pServeType] == 5) //ýâèê
	{
		new mechanicid = pTemp[playerid][pServePlayer], vehicle = GetPVarInt(playerid, #tow_car);

		pTemp[playerid][pServePlayer] = INVALID_PLAYER_ID;
        pTemp[playerid][pServeType] = 0;

        if (!IsPlayerLogged(mechanicid))															return SendErrorMessage(playerid, "Sizi çaðýran oyuncu çevrimiçi deðil.");
        if (PlayerInfo[mechanicid][pJob] != JOB_MECHANIC)											return SendErrorMessage(playerid, "Bu oyuncu mekanik deðil.");
		if (!IsDriver(mechanicid) || !IsATowTruck(GetPlayerVehicleID(mechanicid)))					return SendErrorMessage(playerid, "Mekanik olarak sürücü koltuðunda olmalýsýnýz.");
		if (!PlayerNearPlayer(7.0, playerid, mechanicid))											return SendNotNearPlayer(playerid);
		if (IsPlayerInAnyVehicle(playerid))															return SendErrorMessage(playerid, "Arabada olmamalýsýnýz.");
        if (GetNearVehicle(mechanicid, 7.0, vehicle) == 0)											return SendErrorMessage(playerid, "Aracýn yakýnýnda olmalýsýnýz.");
        if (IsABoat(vehicle) || IsAPlane(vehicle) || IsAHelicopter(vehicle) || IsABiker(vehicle))	return SendErrorMessage(playerid, "Bu araç çekilemez.");

		new mes[128];
		format(mes, sizeof(mes), "%s adlý kiþinin %s model aracýný çeker.", GetNameWithMask(mechanicid), VehicleNames[GetVehicleModel(vehicle)-400]);
		pc_cmd_me(playerid, mes);

		AttachTrailerToVehicle(vehicle, GetPlayerVehicleID(mechanicid));
		return 1;
	}

	else if (pTemp[playerid][pServePlayer] != INVALID_PLAYER_ID && (pTemp[playerid][pServeType] > 0 && pTemp[playerid][pServeType] < 5))
	{
		new vehicle = GetPlayerVehicleID(playerid), mechanicid = pTemp[playerid][pServePlayer], type = pTemp[playerid][pServeType], vehid = GetPlayerVehicleID(mechanicid);

        pTemp[playerid][pServePlayer] = INVALID_PLAYER_ID;
        pTemp[playerid][pServeType] = 0;

        if (!IsPlayerLogged(mechanicid))										return SendErrorMessage(playerid, "Size teklif sunan mekanik çevrimiçi deðil.");
        if (PlayerInfo[mechanicid][pJob] != JOB_MECHANIC)						return SendErrorMessage(playerid, "Bu oyuncu mekanik deðil.");
		if (!IsDriver(mechanicid) || !IsATowTruck(vehid))						return SendErrorMessage(playerid, "Mekanik olarak sürücü koltuðunda olmalýsýnýz.  ");
		if (!IsDriver(playerid))												return SendErrorMessage(playerid, "Sürücü koltuðunda olmalýsýnýz. ");
		if (!PlayerNearPlayer(6.0, playerid, mechanicid))						return SendNotNearPlayer(playerid);
        if (VehicleInfo[vehicle][carFaction] != 0 && type != 1 && type != 2)	return SendErrorMessage(playerid, "Bu araç devlete aittir.");

		new mes[128];

		switch(type)
		{
		    case 1: format(mes, sizeof(mes), "%s model aracýn motor bölümünde iþlem yapmak için bir form onaylar.", VehicleNames[GetVehicleModel(vehicle)-400]);
		    case 2: format(mes, sizeof(mes), "%s model aracýn kaportasýnda iþlem yapmak için bir form onaylar.", VehicleNames[GetVehicleModel(vehicle)-400]);
		    case 3: format(mes, sizeof(mes), "%s model aracý onarmak için bir form onaylar.", VehicleNames[GetVehicleModel(vehicle)-400]);
		    case 4: format(mes, sizeof(mes), "%s model aracý boyamak için bir form onaylar.", VehicleNames[GetVehicleModel(vehicle)-400]);
		}
		pc_cmd_me(playerid, mes);

		RepairOffer[mechanicid] = playerid;
		RepairToVehicle[mechanicid] = vehicle;
		RepairService[mechanicid] = type;
		RepairTowTruck[mechanicid] = vehid;

		ShowJobMessage(mechanicid, "~h~~p~SPREY KUTUSUNU CIKARTIN");
		return 1;
	}

	else if (pTemp[playerid][pHousePlayer] != INVALID_PLAYER_ID)
	{
	    new userid = pTemp[playerid][pHousePlayer], price = pTemp[playerid][pHousePrice], houseid = pTemp[playerid][pHouseHouse];

        pTemp[playerid][pHouseHouse] = -1;
		pTemp[playerid][pHousePrice] = 0;
		pTemp[playerid][pHousePlayer] = INVALID_PLAYER_ID;

        if (!IsPlayerLogged(userid))									return SendErrorMessage(playerid, "Ev teklifi gönderen oyuncu çevrimiçi deðil.");
		if (houseid == -1)												return SendErrorMessage(playerid, "Kimse size ev alma teklifi göndermedi.");
        if (price < 0 || price > 100000000)								return SendErrorMessage(playerid, "$0 ve $100000000 arasý satýþ tutarý sunabilirsiniz.");
		if (!PlayerNearPlayer(3.0, playerid, userid))					return SendNotNearPlayer(playerid);
	    if (IsPlayerOutsideHouse(playerid, houseid) == 0)				return SendErrorMessage(playerid, "Satýn almak istediðiniz evin yakýnýnda olmalýsýnýz..");
		if (HouseInfo[houseid][hOwnerID] != PlayerInfo[userid][pID])	return SendErrorMessage(playerid, "Bu ev %s 'e ait deðil .", GetNameEx(userid));
		if (GetCash(playerid) < price)									return SendNotCash(playerid);
        if (GetPlayerHouses(playerid) >= GetMaxPlayerHouse(playerid))	return SendErrorMessage(playerid, "Daha fazla ev satýn alamazsýnýz.");

		HouseInfo[houseid][hOwnerID] = PlayerInfo[playerid][pID];
        format(HouseInfo[houseid][hOwner], MAX_PLAYER_NAME, GetNameEx(playerid));
		GiveCash(playerid, -price);
		GiveCash(userid, price);

        for(new i = 0; i != MAX_GARAGES; i++)
		{
		    if (!GarageInfo[i][garageID] || GarageInfo[i][garageHouse] != HouseInfo[houseid][hID]) continue;

			SendSyntaxMessage(playerid, "Evle birlikte bir garajýnýzda var. [ID: %i].", i);

			GarageInfo[i][garageOwner] = PlayerInfo[playerid][pID];
			format(GarageInfo[i][garageOwnerName], 24, "%s", GetNameEx(playerid));

			SQL_SetInteger("garage", "owner", GarageInfo[i][garageOwner], GarageInfo[i][garageID]);
			SQL_SetString("users", "name", GarageInfo[i][garageOwnerName], GarageInfo[i][garageOwner]);
		}

		Save_House(houseid);

		SendSyntaxMessage(playerid, "%s oyuncusundan $%i karþýlýðýnda bir ev satýn aldýnýz.", GetNameEx(userid), price);
    	SendSyntaxMessage(userid, "%s  adlý oyuncu sizden $%i karþýlýðýnda evi satýn aldý.", GetNameEx(playerid), price);
    	return 1;
	}

	else if (pTemp[playerid][pBizPlayer] != INVALID_PLAYER_ID)
	{
	    new userid = pTemp[playerid][pBizPlayer], price = pTemp[playerid][pBizPrice], bizid = pTemp[playerid][pBizID];

        pTemp[playerid][pBizPlayer] = INVALID_PLAYER_ID;
		pTemp[playerid][pBizPrice] = 0;
		pTemp[playerid][pBizID] = INVALID_PLAYER_ID;

        if (!IsPlayerLogged(userid))									return SendErrorMessage(playerid, "Ýþyeri satýn alma teklifi gönderen oyuncu çevrimiçi deðil.");
		if (bizid == -1)												return SendErrorMessage(playerid, "Kimse size bir iþyeri satýn alma teklifi göndermedi. ");
        if (price < 0 || price > 100000000)								return SendErrorMessage(playerid, "$0 ve $100000000 arasý satýþ tutarý sunabilirsiniz.");
		if (!PlayerNearPlayer(3.0, playerid, userid))					return SendNotNearPlayer(playerid);
		if (BizInfo[bizid][bizOwnerID] != PlayerInfo[userid][pID])		return SendErrorMessage(playerid, "Bu iþletme %s adlý oyuncuya ait deðil.", GetNameEx(userid));
		if (GetCash(playerid) < price)									return SendNotCash(playerid);
        if (GetPlayerBizes(playerid) >= GetMaxPlayerBiz(playerid))		return SendErrorMessage(playerid, "Daha fazla iþyeri satýn alamazsýnýz.");

		if (IsPlayerBizOutside(playerid, bizid) == 0 && IsPlayerBizInside(playerid, bizid) == 0) return SendErrorMessage(playerid, "Satýn almak istediðiniz iþletmenin yakýnýnda olmalýsýnýz.");

		BizInfo[bizid][bizOwnerID] = PlayerInfo[playerid][pID];
		format(BizInfo[bizid][bizOwner], MAX_PLAYER_NAME, "%s", GetName(playerid));

		GiveCash(playerid, -price);
		GiveCash(userid, price);

		for(new i = 0; i != MAX_GARAGES; i++)
		{
			if (!GarageInfo[i][garageID] || GarageInfo[i][garageBiz] != BizInfo[bizid][bizID]) continue;

			GarageInfo[i][garageOwner] = PlayerInfo[playerid][pID];
			SendSyntaxMessage(playerid, "Ýþyeriniz ile birlikte bir garajýnýz da var. [ID: %i].", i);

			new query[256];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `owner`=%i WHERE `id`=%i", PlayerInfo[playerid][pID], GarageInfo[i][garageID]);
			mysql_tquery(dbHandle, query);
		}

		RemoveAllWorkers(bizid);
		Save_Business(bizid);

		SendSyntaxMessage(playerid, "%s adlý oyuncudan $%i karþýlýðýnda bir iþyeri satýn aldýnýz.", GetNameEx(userid), price);
    	SendSyntaxMessage(userid, "%s adlý oyuncu sizden $%i karþýlýðýnda bir iþyeri satýn aldý.", GetNameEx(playerid), price);
    	return 1;
	}

	else if (pTemp[playerid][pRentPlayer] != INVALID_PLAYER_ID)
	{
	    new userid = pTemp[playerid][pRentPlayer], price = pTemp[playerid][pRentPrice];

        pTemp[playerid][pRentPlayer] = INVALID_PLAYER_ID;
		pTemp[playerid][pRentPrice] = 0;

		if (!IsPlayerLogged(userid))					return SendErrorMessage(playerid, "Size ev kirasý teklif eden oyuncu çevrimiçi deðil.");
        if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);

		new houseid;

		if ((houseid = GetNearInsideHouse(userid)) == -1)				return SendErrorMessage(userid, "Evin içinde olmalýsýnýz.");
		if (HouseInfo[houseid][hOwnerID] != PlayerInfo[userid][pID])	return SendErrorMessage(userid, "Bu ev size ait deðil.");
        if (GetCash(playerid) < price)									return SendErrorMessage(playerid, "Ön ödemeniz için $%i paranýz yok.", price);

		PlayerInfo[playerid][pRentKey] = HouseInfo[houseid][hID];
		PlayerInfo[playerid][pRentPrice] = price;
		SendSyntaxMessage(playerid, "%s adlý kiþinin evini kiraladýnýz. Her maaþ ödenecek tutar: $%i.", GetNameWithMask(userid), price);
		SendSyntaxMessage(playerid, "Evden istediðiniz zaman /evkiraiptal komutunu kullanarak çýkabilirsiniz.");
		SendSyntaxMessage(userid, "%s adlý oyuncu evinizi kiraladý. Her maaþta gelecek tutar: $%i", GetNameWithMask(playerid), price);

		new query[256];
        format(query, sizeof(query), "UPDATE `users` SET `rent_key`=%i,`rent_price`=%i WHERE `id`=%i", PlayerInfo[playerid][pRentKey], PlayerInfo[playerid][pRentPrice], PlayerInfo[playerid][pID]);
		mysql_tquery(dbHandle, query);

		return 1;
	}

	else if (pTemp[playerid][pInterviewPlayer] != INVALID_PLAYER_ID)
	{
		if (PlayerInfo[playerid][pSettings] & togNews)	return SendErrorMessage(playerid, "Önce SAN'dan gelen mesajlarýn görüntülenmesini etkinleþtirin. (/tog news).");

		new userid = pTemp[playerid][pInterviewPlayer];

    	pTemp[playerid][pInterviewPlayer] = INVALID_PLAYER_ID;

        if (!IsPlayerLogged(userid))						return SendErrorMessage(playerid, "Size röportaj teklif eden oyuncu çevrimiçi deðil.");
		if (!PlayerNearPlayer(3.0, playerid, userid))		return SendNotNearPlayer(playerid);

		pTemp[playerid][pInterview] = userid;
		SendSyntaxMessage(playerid, "%s adlý oyuncunun röportaj teklifini kabul ettiniz.", GetNameWithMask(userid));
    	SendSyntaxMessage(playerid, "Yayýn yapmak için normal sohbeti kullanýn. /yayindanayril  komutu ile röportajý sonlandýrabilirsiniz.");
		SendSyntaxMessage(userid, "%s adlý oyuncu röportaj yapma teklifinizi kabul etti.", GetNameWithMask(playerid));

		return 1;
	}

	DeletePVar(playerid, #accept_time);

	return 0;
}

GetPlayerDeniedAction(playerid) {
	if (GetPVarInt(playerid, #accept_time) < gettime()) return 0;
	DeletePVar(playerid, #accept_time);
	return 1;
}

stock FindBadWordsOnAdvert(inputtext[])
{
    for(new s; s < sizeof(ReklamYasakli); s++)
    {
        new pos;
        while((pos = strfind(inputtext,ReklamYasakli[s],true)) != -1)
        {
            for(new i = pos, j = pos + strlen(ReklamYasakli[s]); i < j; i++)
            {
                return 1;
            }
			break;
        }
    }
    return 0;
}

stock Advert_OnGameModeInit()
{
	return 1;
}


alias:sonreklam("sonreklamlar");
CMD:sonreklam(playerid, params[])
{
	new mes[888 * MAX_LAST_ADVERT + 9] = "{FFFFFF}";

	for(new i; i != MAX_LAST_ADVERT; i++)
	{
		if (strlen(LastAdvertInfo[i][advertText]) == 0)	continue;

		if (strlen(LastAdvertInfo[i][advertText]) > MAXLEN)
		{
			new pos = MAXLEN;

			if (pos < MAXLEN-1) pos = MAXLEN;

			format(mes, sizeof(mes), "%s%i\t%.*s ...\n", mes, i+1, pos, LastAdvertInfo[i][advertText]);
			format(mes, sizeof(mes), "%s\t... %s", mes, LastAdvertInfo[i][advertText][pos]);
		}
		else
		{
			format(mes, sizeof(mes), "%s%i\t%s", mes, i+1, LastAdvertInfo[i][advertText]);
		}

		new time[32];

		if (gettime() - LastAdvertInfo[i][adverttime] <= 59)
			format(time, sizeof(time), "%d saniye önce", gettime() - LastAdvertInfo[i][adverttime]);
		else
			format(time, sizeof(time), "%d dakika önce", floatround((gettime() - LastAdvertInfo[i][adverttime])/60, floatround_floor));

		format(mes, sizeof(mes), "%s\n\t{a9c4e4}No: %i\t(%s){FFFFFF}\n\n", mes, LastAdvertInfo[i][advertnumber], time);
	}

	if (strlen(mes) < 9)	return Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{ffffff}Son Reklamlar", "Reklam listesi boþ.", "Kapat", "");

	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{ffffff}Son Reklamlar", mes, "Kapat", "");
	return 1;
}

alias:reklam("reklamver");
CMD:reklam(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] != 0 || GetPVarInt(playerid, "Freeze") || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli]) return 1;
	if (!PlayerInfo[playerid][pNumber])				return SendErrorMessage(playerid, "Bir telefona ihtiyacýn var.");
    if (sscanf(params, "s[144]", params)) 		return SendHelpMessage(playerid, "/reklam [yazý]");
    if (PlayerInfo[playerid][pSettings] & togAdv)	return SendErrorMessage(playerid, "Reklam vermek için reklam görmeyi etkinleþtirin. /ayarlar");
	if (PlayerInfo[playerid][pVerdigiReklam] == 1)	return SendErrorMessage(playerid, "Þu anda reklamýnýz bulunuyor.");
    if (pTemp[playerid][pAdvertTime] > gettime())	return SendErrorMessage(playerid, "Tekrar reklam vermek için %s dakika beklemen gerek.", ConvertSecond(pTemp[playerid][pAdvertTime] - gettime()));
    if(FindBadWordsOnAdvert(params))
    {
        SendErrorMessage(playerid,"Sohbet kutucuðuna girdiðiniz bir kelime yasaklýdýr. Tekrarlamayýnýz.");
		SendAdmMessage("%s adlý kiþi reklama yasaklý kelime girdi.", GetNameEx(playerid));
        return 0;
    }

    new anunt[144];
	new bizid = -1;

    if ((bizid = Advertisement_Nearest(playerid)) == -1)				return SendErrorMessage(playerid, "Ajansta deðilsin.");
	if (BizInfo[bizid][bizLocked] == 1)									return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);
	if (BizInfo[bizid][bizOwnerID] != 0 && !BizInfo[bizid][bizProduct])	return SendErrorMessage(playerid, "Ýþ yerinin yeterli ürünü yok.");
	if (GetCash(playerid) < BizInfo[bizid][bizEntrance])				return SendErrorMessage(playerid, "Yeterli paranýz yok. $%i gerekiyor.", BizInfo[bizid][bizEntrance]);
	if(sscanf(params, "s[144]", anunt)) return SendErrorMessage(playerid, "Reklamýz çok kýsa veya uzun.");


    if (BizInfo[bizid][bizOwnerID] != 0)
    {
        BizInfo[bizid][bizProduct]--;
        GiveBizCash(bizid, BizInfo[bizid][bizEntrance]);
    }

	 pTemp[playerid][pAdvertTime] = gettime() + 300;

	/*foreach(new i : Player)
	{
		if(PlayerInfo[playerid][pSettings] & togAdv) continue;

	    if (strlen(params) > MAXLEN)
	    {
		    new pos = MAXLEN;

		    if (pos < MAXLEN-1) pos = MAXLEN;

			SendClientMessageEx(i, COLOR_GREENFORADVERT, "[%s] %s: %.*s ...", BizInfo[bizid][bizName], GetNameEx(playerid), pos, params);
			SendClientMessageEx(i, COLOR_GREENFORADVERT, "... %s No: %d", params[pos], PlayerInfo[playerid][pNumber]);
	    }
	    else
	    {
  		    SendClientMessageEx(i, COLOR_GREENFORADVERT, "[%s] %s: %s No: %d", BizInfo[bizid][bizName], GetNameEx(playerid), params, PlayerInfo[playerid][pNumber]);
	    }
	}	*/

    //SendDiscordAdvertisements(GetNameEx(playerid), PlayerInfo[playerid][pNumber], params);

	PlayerInfo[playerid][pVerdigiReklam] = 1;
	SendServerMessage(playerid, "Baþarýyla reklam verdiniz. Bir sonraki reklam için 300 saniye beklemelisiniz.");
	ReklamEkle(playerid, params, PlayerInfo[playerid][pNumber]);
	/*if (lastadvert >= MAX_LAST_ADVERT) lastadvert = 0;
	else lastadvert++;
	format(LastAdvertInfo[lastadvert][advertText], 144, "%s", params);
	LastAdvertInfo[lastadvert][adverttime] = gettime();
	LastAdvertInfo[lastadvert][advertnumber] = PlayerInfo[playerid][pNumber];

    pTemp[playerid][pAdvertTime] = gettime() + 300;
	GiveCash(playerid, -BizInfo[bizid][bizEntrance]);*/
	return 1;
}

CMD:isyerireklam(playerid, params[])
{
	new anunt[144];
	if (!PlayerInfo[playerid][pNumber])				return SendErrorMessage(playerid, "Ýlan vermek için bir telefon veya sim kartýna ihtiyacýn var.");
	if (sscanf(params, "s[144]", params)) 		return SendHelpMessage(playerid, "/isyerireklam [yazý]");
    if (PlayerInfo[playerid][pSettings] & togAdv)	return SendErrorMessage(playerid, "Lütfen önce reklamlarý etkinleþtirin. /ayarlar");
	if (GetCash(playerid) < 100)				return SendErrorMessage(playerid, "Yeterli paranýz yok. Reklam Fiyatý: $100.");
	if (PlayerInfo[playerid][pVerdigiReklam] == 1)	return SendErrorMessage(playerid, "Þu anda reklamýnýz bulunuyor.");
	if (pTemp[playerid][pAdvertTime] > gettime())	return SendErrorMessage(playerid, "Tekrar reklam vermek için %s dakika beklemen gerek.", ConvertSecond(pTemp[playerid][pAdvertTime] - gettime()));
	if(sscanf(params, "s[144]", anunt)) return SendErrorMessage(playerid, "Reklamýz çok kýsa veya uzun.");
    if(FindBadWordsOnAdvert(params))
    {
        SendErrorMessage(playerid,"Sohbet kutucuðuna girdiðiniz bir kelime yasaklýdýr. Tekrarlamayýnýz.");
		SendAdmMessage("%s adlý kiþi reklama yasaklý kelime girdi.", GetNameEx(playerid));
        return 0;
    }

    new bizid = GetNearBiz(playerid);
	new calisan = 0;
	for(new listitem = 0; listitem < MAX_WORK_SPACE; listitem++)
	{
	    for(new i; i < GetPlayerPoolSize(); i++)
	    {
		    if (PlayerInfo[i][pID] == BizWorkers[bizid][listitem][bizJobOn])
		    {
			    calisan = 1;
			    break;
	     	}
	    }
	}
	if (bizid != -1 && BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID] && !calisan) return SendErrorMessage(playerid, "Kendine ait bir iþyerinde deðilsin.");


    pTemp[playerid][pAdvertTime] = gettime() + 300;

	/*foreach(new i : Player)
	{
		if(PlayerInfo[playerid][pSettings] & togAdv) continue;

	    if (strlen(params) > MAXLEN)
	    {
		    new pos = MAXLEN;

		    if (pos < MAXLEN-1) pos = MAXLEN;

			SendClientMessageEx(i, COLOR_GREENFORADVERT, "[%s] %.*s ...", BizInfo[bizid][bizName], pos, params);
			SendClientMessageEx(i, COLOR_GREENFORADVERT, "... %s (/igps %d)", params[pos], bizid);
	    }
	    else
	    {
  		    SendClientMessageEx(i, COLOR_GREENFORADVERT, "[%s] %s (/igps %d)", BizInfo[bizid][bizName], params, bizid);
	    }
	}*/

	SendServerMessage(playerid, "Baþarýyla reklam verdiniz. Bir sonraki reklam için 300 saniye beklemelisiniz.");

   // SendDiscordAdvertisements(GetNameEx(playerid), PlayerInfo[playerid][pNumber], params);
    PlayerInfo[playerid][pVerdigiReklam] = 1;
    ReklamEkle(playerid, params, PlayerInfo[playerid][pNumber]);

	/*if (lastadvert >= MAX_LAST_ADVERT) lastadvert = 0;
	else lastadvert++;
	format(LastAdvertInfo[lastadvert][advertText], 144, "%s", params);
	LastAdvertInfo[lastadvert][adverttime] = gettime();
	LastAdvertInfo[lastadvert][advertnumber] = PlayerInfo[playerid][pNumber];*/
	return 1;
}

ReklamEkle(playerid, string[], telno) {
        new id = Iter_Free(Reklamlar);
		if(id != -1) {
        ReklamInfo[id][reklamExists] = 1;
        ReklamInfo[id][reklamID] = id;
        format(ReklamInfo[id][reklamYapan], MAX_PLAYER_NAME, "%s", GetNameEx(playerid));
        format(ReklamInfo[id][reklamText], 124, "%s", string);
        ReklamInfo[id][reklamTelefon] = telno;
        PlayerInfo[playerid][pVerdigiReklam] = id;
        SendServerMessage(playerid, "Reklamýnýz baþarýyla oluþturuldu, helper ve üstü reklamýnýzý onayladýðýnda reklamýnýz yayýnlanacak.");
        SendServerMessage(playerid, "Reklamýnýzý iptal etmek isterseniz /reklamiptal komutunu kullanabilirsiniz.");
        SendReportMessage(COLOR_LIGHTRED, 1,  "AdmCmd: Yeni reklam isteði geldi. Gönderen: %s (ID:%d)", GetNameEx(playerid), playerid);
        SendReportMessage(COLOR_LIGHTRED, 1, "AdmCmd: [Reklam]: %s", string);
		Iter_Add(Reklamlar, id);
		} else return SendErrorMessage(playerid, "Sunucuda maksimum reklam istek sayýsýna ulaþýlmýþ, lütfen bekleyin.");
    return 1;
}

CMD:reklamiptal(playerid) {
	if(PlayerInfo[playerid][pVerdigiReklam] == -1) return SendErrorMessage(playerid, "Zaten bir reklam vermemiþsiniz.");
	ReklamSil(PlayerInfo[playerid][pVerdigiReklam]);
	PlayerInfo[playerid][pVerdigiReklam] = -1;
	SendServerMessage(playerid, "Verdiðiniz reklam baþarýyla silindi.");
	return 1;
}

ReklamSil(id) {
    if(ReklamInfo[id][reklamExists]) {
        ReklamInfo[id][reklamExists] = 0;
        ReklamInfo[id][reklamID] = -1;
        format(ReklamInfo[id][reklamYapan], MAX_PLAYER_NAME, "Yok");
        format(ReklamInfo[id][reklamText], 124, "Yok");
        ReklamInfo[id][reklamTelefon] = 0;
		Iter_Remove(Reklamlar, id);
        return 1;

    }
    return 0;
}

ReklamKabul(playerid, id) {
new pid;
	foreach(new i: Player) {
			if(!IsPlayerLogged(playerid))continue;
			if(!strcmp(GetNameEx(i), ReklamInfo[id][reklamYapan], true)) {
			pid = i;
			break;
        }
    }
    SendServerMessage(pid, "%s adlý kiþi tarafýndan reklamýnýz onaylandý. 30 ve 60 saniye arasý bir zamanda yayýnlanacak.", GetAccName(playerid));
    SendServerMessage(playerid, "%s adlý kiþinin reklamýný kabul ettiniz. 30 ve 60 saniye arasý bir zamanda yayýnlanacak.", GetNameEx(pid));
	SetTimerEx("ReklamChat", randomEx(30000, 65000), false, "i", playerid);
	return 1;
}

this::ReklamChat(playerid, id)
{
    if(ReklamInfo[id][reklamExists]) {
        new pid, rekicerik[256];
        foreach(new i: Player) {
            if(!IsPlayerLogged(playerid))continue;
            if(!strcmp(GetNameEx(i), ReklamInfo[id][reklamYapan], true)) {
                pid = i;
                break;
            }
        }
        format(rekicerik, sizeof(rekicerik), "%s ", ReklamInfo[id][reklamText]);
        PlayerInfo[pid][pVerdigiReklam] = -1;
        SendServerMessage(pid, "Reklamýnýz yayýnlandý.", GetAccName(playerid));
        SendServerMessage(playerid, "Reklamýný kabul ettiðiniz %s adlý kiþinin reklamý yayýnlandý.", GetNameEx(pid));
        foreach(new j : Player) {
            if(PlayerInfo[playerid][pSettings] & togAdv) continue;
            SendClientMessageEx(j, COLOR_GREENFORADVERT, "Reklam: %s (Telefon: %d)", ReklamInfo[id][reklamText], ReklamInfo[id][reklamTelefon]);
        }

        SendReportMessage(COLOR_LIGHTRED, 1, "AdmCmd: Reklam veren kullanýcý: %s (Telefon: %d)", GetNameEx(pid), ReklamInfo[id][reklamTelefon]);
		if (lastadvert >= MAX_LAST_ADVERT) lastadvert = 0;
		else lastadvert++;
		format(LastAdvertInfo[lastadvert][advertText], 144, "%s", ReklamInfo[id][reklamText]);
		LastAdvertInfo[lastadvert][adverttime] = gettime();
		LastAdvertInfo[lastadvert][advertnumber] = ReklamInfo[id][reklamTelefon];
        ReklamSil(id);

        new DCC_Embed:ixd = DCC_CreateEmbed();

        new ext[880];
        format(ext, sizeof(ext), " \n\n**Reklam Ýçeriði:**\t %s\t**Reklam Veren:**\t %s(%d)\n**Telefon:**\t\t\t\t\t%d", trcar(rekicerik), GetNameEx(pid), pid, PlayerInfo[id][pNumber]);

        DCC_SetEmbedColor(ixd, 16098848);
        DCC_AddEmbedField(ixd, trcar(ext));
        DCC_SendChannelEmbedMessage(DCC_FindChannelByName(REK_LOG), ixd);
        return 1;
	}

	return 1;
}

ReklamRed(playerid, id, sebep[]) {
    if(ReklamInfo[id][reklamExists]) {
        new pid;
        foreach(new i: Player) {
            if(!IsPlayerLogged(playerid))continue;
            if(!strcmp(GetNameEx(i), ReklamInfo[id][reklamYapan], true)) {
                pid = i;
                break;
            }
        }
        PlayerInfo[pid][pVerdigiReklam] = -1;
        SendServerMessage(pid, "Reklamýnýz %s tarafýndan reddedilmiþtir. Sebep: %s", GetAccName(playerid), sebep);
        SendServerMessage(playerid, "%s adlý oyuncunun reklamýný reddettiniz. Sebep: %s", GetNameEx(pid), sebep);
        ReklamSil(id);
        return 1;
    } else return SendErrorMessage(playerid, "Bu reklam silinmiþ.");
}

CMD:reklamlar(playerid) {
    new dialogString[2048], count = 0;
	if(!CheckAdmin(playerid, 1 && !IsTester(playerid, 1))) return SendErrorMessage(playerid, "Yönetici deðilsiniz");
    foreach(new i: Reklamlar) {
        if(ReklamInfo[i][reklamExists]) {
            format(dialogString, sizeof dialogString, "%s{ffffff}%d\t{ffffff}%s\n", dialogString, ReklamInfo[i][reklamID], ReklamInfo[i][reklamYapan]);
            PlayerInfo[playerid][pReklamID][count] = ReklamInfo[i][reklamID];
            count++;
        }
    }
    if(count == 0) return SendErrorMessage(playerid, "Gösterilebilecek bir reklam yok.");
    Dialog_Show(playerid, DialogReklamList, DIALOG_STYLE_TABLIST_HEADERS, "Reklam Listesi", "Reklam ID\tReklamý Yapan\n%s", "Seçenekler", "Ýptal", dialogString);
    return 1;
}

Dialog:DialogReklamList(playerid, response, listitem, inputtext[]) {
    if(response) {
        new dialogString[300], baslik[35];
        PlayerInfo[playerid][pIlgilendigiReklam] = PlayerInfo[playerid][pReklamID][listitem];
        new reklam = PlayerInfo[playerid][pIlgilendigiReklam];
        format(dialogString, sizeof dialogString, "{4b75c3}Reklam ID: {ffffff}%d\n{4b75c3}Reklamý Yapan: {ffffff}%s\n{4b75c3}Reklam: {ffffff}%s\n{4b75c3}Telefon Numarasý: {ffffff}%d", ReklamInfo[reklam][reklamID], ReklamInfo[reklam][reklamYapan], ReklamInfo[reklam][reklamText], ReklamInfo[reklam][reklamTelefon]);
        format(baslik, sizeof baslik, "Reklam Ayrýntýlarý - {4b75c3}#%d", reklam);
        Dialog_Show(playerid, DialogReklamSecenek, DIALOG_STYLE_MSGBOX, baslik, dialogString, "Seçenekler", "Ýptal");
    } else
        PlayerInfo[playerid][pIlgilendigiReklam] = -1;
    return 1;
}

Dialog:DialogReklamSecenek(playerid, response, listitem, inputtext[]) {
    if(response) {
        new reklam = PlayerInfo[playerid][pIlgilendigiReklam];
        new baslik[35];
        format(baslik, sizeof baslik, "Reklam Seçeneleri - {4b75c3}#%d", reklam);
        Dialog_Show(playerid, DialogReklamSecenekList, DIALOG_STYLE_LIST, baslik, "Kabul et\nReddet", "Seç", "<< Geri");
    }
    return 1;
}

Dialog:DialogReklamSecenekList(playerid, response, listitem, inputtext[]) {
    if(response) {
        switch(listitem) {
            case 0: {
                ReklamKabul(playerid, PlayerInfo[playerid][pIlgilendigiReklam]);
                PlayerInfo[playerid][pIlgilendigiReklam] = -1;
            }
            case 1: {
                Dialog_Show(playerid, DialogReklamReddet, DIALOG_STYLE_INPUT, "Reklam Reddet", "Reddetme sebebini aþaðýya girin:", "Tamam", "<< Geri");
            }
        }
    } else {
        new dialogString[300], baslik[35];
        new reklam = PlayerInfo[playerid][pIlgilendigiReklam];
        format(dialogString, sizeof dialogString, "{4b75c3}Reklam ID: {ffffff}%d\n{4b75c3}Reklamý Yapan: {ffffff}%s\n{4b75c3}Reklam: {ffffff}%s\n{4b75c3}Telefon Numarasý: {ffffff}%d", ReklamInfo[reklam][reklamID], ReklamInfo[reklam][reklamYapan], ReklamInfo[reklam][reklamText], ReklamInfo[reklam][reklamTelefon]);
        format(baslik, sizeof baslik, "Reklam Ayrýntýlarý - {4b75c3}#%d", reklam);
        Dialog_Show(playerid, DialogReklamSecenek, DIALOG_STYLE_MSGBOX, baslik, dialogString, "Seçenekler", "Ýptal");
    }
    return 1;
}

Dialog:DialogReklamReddet(playerid, response, listitem, inputtext[]) {
    if(response) {
        ReklamRed(playerid, PlayerInfo[playerid][pIlgilendigiReklam], inputtext);
        PlayerInfo[playerid][pIlgilendigiReklam] = -1;
    } else {
        new reklam = PlayerInfo[playerid][pIlgilendigiReklam];
        new baslik[35];
        format(baslik, sizeof baslik, "Reklam Seçeneleri - {4b75c3}#%d", reklam);
        Dialog_Show(playerid, DialogReklamSecenekList, DIALOG_STYLE_LIST, baslik, "Kabul et\nReddet", "Seç", "<< Geri");
    }
    return 1;
}

CMD:sonreklamlar(playerid, params[])
{
	return pc_cmd_sonreklam(playerid, "");
}

Advertisement_Nearest(playerid)
{
 	if (!IsPlayerLogged(playerid))	return -1;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if (BizInfo[i][bizID] == 0 || BizInfo[i][bizType] != BIZ_ADVERT)	continue;
		if (PlayerToPoint(7.0,playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt])	return i;
	}

	return -1;
}
/*
stock DiscordLetterFixAdvert(info[])
{
    new namefix[256];
	ReplaceText(info, "ð", "(009)");
	ReplaceText(info, "Ð", "(0009)");
	ReplaceText(info, "ü", "(026)");
	ReplaceText(info, "Ü", "(0026)");
	ReplaceText(info, "þ", "(023)");
	ReplaceText(info, "Þ", "(0023)");
	ReplaceText(info, "ç", "(004)");
	ReplaceText(info, "Ç", "(0004)");
	ReplaceText(info, "ö", "(019");
	ReplaceText(info, "Ö", "(0019)");
	ReplaceText(info, "ý", "(011)");
	ReplaceText(info, "Ý", "(0012)");
    format(namefix, sizeof(namefix), info);
    return namefix;
}

stock SendDiscordAdvertisements(adv_poster[], adv_ph, adv_content[])
{
    new adv_command[256];

	ReplaceText(adv_poster, " ", "_");

    format(adv_command, sizeof(adv_command), "/adv %s %d %s", adv_poster, adv_ph, DiscordLetterFixAdvert(adv_content));
    DCC_SendChannelMessage(DCC_FindChannelById("1141521480644050954"), adv_command);
    return 1;
}*/

alias:pm("om", "ozelmesaj");
CMD:pm(playerid, params[])
{
	new userid, text[128];

	if (PlayerInfo[playerid][pMutedTime] > 0)								return SendErrorMessage(playerid, "Sohbetiniz sistem tarafýndan engellendi.");
	if (sscanf(params, "us[128]", userid, text))							return SendHelpMessage(playerid, "/pm [ID / isim] [yazý]");
	if (!IsPlayerLogged(userid))											return SendNotConnected(playerid);
   // if (userid == playerid)													return SendErrorMessage(playerid, "Kendinize PM gönderemezsiniz.");
	if (PlayerInfo[playerid][pSettings] & togPM)							return SendErrorMessage(playerid, "Mesaj atmak için mesaj almanýzý etkinleþtirin.");
	if (!IsAdminDuty(playerid) && !IsTesterDuty(playerid) && (PlayerInfo[userid][pSettings] & togPM))	return SendErrorMessage(playerid, "Bu oyuncu özel mesaj almayý kapatmýþ.");
	if (people_blocking[userid][playerid] == 1)							 	return SendErrorMessage(playerid, "Oyuncu sizi PM kara listesine eklemiþ, mesaj atamazsýnýz.");

	SendPMToPlayer(playerid, userid, text);

	SpectatorMessage(playerid, sprintf("(PM gönderdi) %s (%d): %s", GetNameEx(userid), userid, text));
	SpectatorMessage(userid, sprintf("(PM geldi) %s (%d): %s", GetNameEx(playerid), playerid, text));

 	new DCC_Embed:ixd = DCC_CreateEmbed();
	new ext[555];
	format(ext, sizeof(ext), "\n\n **PM Gönderen:**\t\t  %s(%d)\n**PM Gönderilen:**\t\t%s(%d)\n\n**PM Ýçeriði:**\t\t %s\n**Tarih:**\t\t\t\t %s, %s", GetNameEx(playerid), playerid, GetNameEx(userid), userid, text, GetNOW(), GetTimeEx());
	DCC_SetEmbedColor(ixd, 16705372);
	DCC_SetEmbedDescription(ixd, ("## PM - Log :ghost:"));
	DCC_AddEmbedField(ixd, trcar(ext));
	DCC_SendChannelEmbedMessage(DCC_FindChannelByName(PVM_LOG), ixd);
	DCC_SendWarning(DCC_FindChannelByName(PVM_LOG), 1);

    SetPVarInt(playerid, PVAR_LASTPM_ISACTIVE, 1);
    SetPVarInt(playerid, PVAR_LASTPM_ID, userid);
	SetPVarInt(userid, PVAR_LASTPM_ID, playerid);
	return 1;
}

alias:re("reply");
CMD:re(playerid, params[])
{
    if(!GetPVarInt(playerid, PVAR_LASTPM_ISACTIVE))
        return SendErrorMessage(playerid, "Henüz mesaj gönderdiðiniz birisi yok.");

    new message[144];

    if(sscanf(params, "s[144]", message))
        return SendHelpMessage(playerid, "/re [son mesaj gönderilen kiþiye gönderilecek mesaj]");

    SendPMToPlayer(playerid, GetPVarInt(playerid, PVAR_LASTPM_ID), message);

    return 1;
}

alias:ooc("o");
CMD:ooc(playerid, params[])
{
	if (PlayerInfo[playerid][pSettings] & togOOC)	return SendErrorMessage(playerid, "OOC sohbetinizi etkinleþtirmelisiniz.");
	if (PlayerInfo[playerid][pMutedTime] > 0)		return SendErrorMessage(playerid, "Sohbetiniz sistem tarafýndan engellendi.");
	if ((noooc) && !CheckAdmin(playerid, ADMIN_LEVEL_1))			return SendNotAdmin(playerid);
	if (isnull(params))								return SendHelpMessage(playerid, "/ooc [yazý]");

	new mes[128];

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		format(mes, sizeof(mes), "(( {a92626}%s{D6D6D6}: %.*s ... ))", GetAccName(playerid), pos, params);
		OOCMSG(COLOUR_ALTO,mes);
		format(mes, sizeof(mes), "(( ... %s ))", params[pos]);
		OOCMSG(COLOUR_ALTO,mes);
	}
	else
	{
		format(mes, sizeof(mes), "(( {a92626}%s{D6D6D6}: %s ))", GetAccName(playerid), params);
		OOCMSG(COLOUR_ALTO, mes);
	}
	return 1;
}

CMD:ame(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] == 2) return SendErrorMessage(playerid, "Yaralýyken herhangi bir iþlem yapamazsýnýz.");
	if (isnull(params))						 return SendHelpMessage(playerid, "/ame [emote]");

	new mes[128];
	format(mes, sizeof(mes), "* %s %s", GetNameWithMask(playerid), params);
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 10000);

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		SendClientMessageEx(playerid, COLOR_PURPLE, "> %s %.*s ...", GetNameWithMask(playerid), pos, params);
		SendClientMessageEx(playerid, COLOR_PURPLE, "... %s", params[pos]);
	}
	else
	{
  		SendClientMessageEx(playerid, COLOR_PURPLE, "> %s %s", GetNameWithMask(playerid), params);
	}
	return 1;
}

CMD:ado(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] == 2) return SendErrorMessage(playerid, "Yaralýyken herhangi bir iþlem yapamazsýnýz.");
	if (isnull(params))						 return SendHelpMessage(playerid, "/ado [durum]");

	new mes[128];
	format(mes, sizeof(mes), "* %s (( %s ))", params, GetNameWithMask(playerid));
	SetPlayerChatBubble(playerid, mes, COLOUR_VISTABLUE, 20.0, 10000);

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		SendClientMessageEx(playerid, COLOUR_VISTABLUE, "> %.*s ...", pos, params);
		SendClientMessageEx(playerid, COLOUR_VISTABLUE, "... %s (( %s ))", params[pos], GetNameWithMask(playerid));
	} else {
		SendClientMessageEx(playerid, COLOUR_VISTABLUE, "> %s (( %s ))", params, GetNameWithMask(playerid));
	}
	return 1;
}

CMD:sme(playerid, params[])
{
	new seconds, emote[128];
	if (PlayerInfo[playerid][pInjured] == 2) return SendErrorMessage(playerid, "Yaralýyken herhangi bir iþlem yapamazsýnýz.");
	if (sscanf(params, "dS()[128]", seconds, emote)){
		return SendHelpMessage(playerid, "/sme [saniye %d-%d] [emote]", MIN_EMOTE_SECONDS, MAX_EMOTE_SECONDS);
	}
	if(seconds < MIN_EMOTE_SECONDS || seconds > MAX_EMOTE_SECONDS){
		return SendErrorMessage(playerid, "Geçersiz saniye girdiniz.");
	}
	if(seconds > MIN_EMOTE_SECONDS && !strlen(emote)){
		return SendHelpMessage(playerid, "/sme [saniye %d-%d] [emote]", MIN_EMOTE_SECONDS, MAX_EMOTE_SECONDS);
	}
	new bubblesecon = seconds * 1000;

	new mes[128];
	format(mes, sizeof(mes), "* %s %s", GetNameWithMask(playerid), emote);
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, bubblesecon);

	if (strlen(emote) > MAXLEN){
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		SendClientMessageEx(playerid, COLOR_PURPLE, "> %s %.*s ...", GetNameWithMask(playerid), pos, emote);
		SendClientMessageEx(playerid, COLOR_PURPLE, "... %s", emote[pos]);
	} else {
		SendClientMessageEx(playerid, COLOR_PURPLE, "> %s %s", GetNameWithMask(playerid), emote);
	}
	return 1;
}

CMD:sdo(playerid, params[])
{
	new seconds, emote[128];
	if (PlayerInfo[playerid][pInjured] == 2) return SendErrorMessage(playerid, "Yaralýyken herhangi bir iþlem yapamazsýnýz.");
	if (sscanf(params, "dS()[128]", seconds, emote)){
		return SendHelpMessage(playerid, "/sdo [saniye %d-%d] [durum]", MIN_EMOTE_SECONDS, MAX_EMOTE_SECONDS);
	}
	if(seconds < MIN_EMOTE_SECONDS || seconds > MAX_EMOTE_SECONDS){
		return SendErrorMessage(playerid, "Geçersiz saniye girdiniz.");
	}
	if(seconds > MIN_EMOTE_SECONDS && !strlen(emote)){
		return SendHelpMessage(playerid, "/sdo [saniye %d-%d] [emote]", MIN_EMOTE_SECONDS, MAX_EMOTE_SECONDS);
	}
	new bubblesecon = seconds * 1000;

	new mes[128];
	format(mes, sizeof(mes), "* %s", emote);
	SetPlayerChatBubble(playerid, mes, COLOUR_VISTABLUE, 20.0, bubblesecon);

	if (strlen(emote) > MAXLEN){
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		SendClientMessageEx(playerid, COLOUR_VISTABLUE, "> %.*s ...", pos, emote);
		SendClientMessageEx(playerid, COLOUR_VISTABLUE, "... %s", emote[pos]);
	} else {
		SendClientMessageEx(playerid, COLOUR_VISTABLUE, "> %s", emote);
	}
	return 1;
}

CMD:server_ame(playerid, params[])
{
	new mes[128];
	format(mes, sizeof(mes), "* %s %s", GetNameWithMask(playerid), params);
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 10000);

	return 1;
}

CMD:stand(playerid, params[])
{
	new opsiyon[10];
	if (PlayerInfo[playerid][pInjured] != 0 || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Þu anda bunu yapamazsýn.");

    if (sscanf(params, "s[10]", opsiyon)) return SendSyntaxMessage(playerid, "/stand [koy / al]");
    if (strcmp(opsiyon, "koy", true) == 0)
    {
        if (PlayerInfo[playerid][pStand] == true) return SendErrorMessage(playerid, "Zaten bir stand koymuþsunuz!");
        if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return SendErrorMessage(playerid, "Ýnterior içerisine stand koyamazsiniz.");
        Dialog_Show(playerid, Standlar, DIALOG_STYLE_PREVMODEL, "Stand", "1341\n1342\n1340", "Sec", "Kapat");
    }
    else if (strcmp(opsiyon, "al", true) == 0)
    {
        if (PlayerInfo[playerid][pStand] == false) return SendSyntaxMessage(playerid, "Stand koymamýþsýnýz!");
        new Float:objectPos[3];
        GetDynamicObjectPos(PlayerInfo[playerid][pStandObject], objectPos[0], objectPos[1], objectPos[2]);
        if (!IsPlayerInRangeOfPoint(playerid, 5.0, objectPos[0], objectPos[1], objectPos[2])) return SendErrorMessage(playerid, "Standinizin yakininda deðilsiniz.");
        PlayerInfo[playerid][pStand] = false;
        DestroyDynamicObject(PlayerInfo[playerid][pStandObject]);
        DestroyDynamic3DTextLabel(PlayerInfo[playerid][pStandText]);
    }
	return 1;
}

CMD:masasandalye(playerid, params[])
{
	new opsiyon[10];
	if (PlayerInfo[playerid][pInjured] != 0 || pTemp[playerid][pTaserTime] || PlayerInfo[playerid][pKelepceli] || PlayerInfo[playerid][pJailed] != 0)
		return SendErrorMessage(playerid, "Þu anda bunu yapamazsýn.");
    if (sscanf(params, "s[10]", opsiyon)) return SendSyntaxMessage(playerid, "/masasandalye [koy / al]");
    if (strcmp(opsiyon, "koy", true) == 0)
    {
        if (PlayerInfo[playerid][pMasa] == true) return SendErrorMessage(playerid, "Zaten bir stand koymuþsunuz!");
        if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return SendErrorMessage(playerid, "interior içerisine stand koyamazsiniz.");
        Dialog_Show(playerid, MasaVeSandalye, DIALOG_STYLE_PREVMODEL, "Masa Sandalye", "2571\n1432\n1825", "Sec", "Kapat");
    }
    else if (strcmp(opsiyon, "al", true) == 0)
    {
        if (PlayerInfo[playerid][pMasa] == false) return SendErrorMessage(playerid, "Masa koymamýþsýnýz!");
        new Float:objectPos[3];
        GetDynamicObjectPos(PlayerInfo[playerid][pMasaObject], objectPos[0], objectPos[1], objectPos[2]);
        if (!IsPlayerInRangeOfPoint(playerid, 5.0, objectPos[0], objectPos[1], objectPos[2])) return SendErrorMessage(playerid, "Standinizin yakininda deðilsiniz.");
        PlayerInfo[playerid][pMasa] = false;
        DestroyDynamicObject(PlayerInfo[playerid][pMasaObject]);
        DestroyDynamic3DTextLabel(PlayerInfo[playerid][pMasaText]);
    }
	return 1;
}

CMD:konus(playerid, params[])
{
    if (PlayerInfo[playerid][pInjured] == 2)	return SendErrorMessage(playerid, "Yaralýyken konuþamazsýnýz.");
	if (isnull(params))							return SendHelpMessage(playerid, "/konus [yazý]");
	if (PlayerInfo[playerid][pMutedTime] > 0)	return SendErrorMessage(playerid, "Sohbetiniz sistem tarafýndan engellendi.");

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s: %.*s ...", GetNameWithMask(playerid), pos, params);
		SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s: ... %s", GetNameWithMask(playerid), params[pos]);
	}
	else
	{
		SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s: %s", GetNameWithMask(playerid), params);
	}
	return 1;
}

CMD:uyruk(playerid){

	SendServerMessage(playerid, "%s, %i", GetOriginName(PlayerInfo[playerid][pOrigin]), PlayerInfo[playerid][pOrigin]);
	return 1;
}

CMD:e(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] == 2)	return SendErrorMessage(playerid, "Yaralýyken konuþamazsýnýz.");
	if (isnull(params))							return SendHelpMessage(playerid, "/e [yazý]");
	if (PlayerInfo[playerid][pMutedTime] > 0)	return SendErrorMessage(playerid, "Sohbetiniz sistem tarafýndan engellendi.");

	new mes[128];
	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1)	pos = MAXLEN;

		if (maskOn{playerid})	format(mes, sizeof(mes), "%s (%s): %.*s ...", GetNameWithMask(playerid), GetOriginLangName(PlayerInfo[playerid][pOrigin]), pos, params);
		else 					format(mes, sizeof(mes), "%s (%s): %.*s ...", GetNameEx(playerid), GetOriginLangName(PlayerInfo[playerid][pOrigin]), pos, params);

		ProxDetectorLanguage(Range_Normal, playerid, mes, COLOUR_ALTO, PlayerInfo[playerid][pOrigin]);

		if (maskOn{playerid})	format(mes, sizeof(mes), "... %s", params[pos]);
		else					format(mes, sizeof(mes), "... %s", params[pos]);

		ProxDetectorLanguage(Range_Normal, playerid, mes, COLOUR_ALTO, PlayerInfo[playerid][pOrigin]);
	}
	else
	{
		if (maskOn{playerid})	format(mes, sizeof(mes), "%s (%s): %s", GetNameWithMask(playerid), GetOriginLangName(PlayerInfo[playerid][pOrigin]), params);
		else					format(mes, sizeof(mes), "%s (%s): %s", GetNameEx(playerid), GetOriginLangName(PlayerInfo[playerid][pOrigin]), params);

		ProxDetectorLanguage(Range_Normal, playerid, mes, COLOUR_ALTO, PlayerInfo[playerid][pOrigin]);
	}
	return 1;

}

CMD:my(playerid, params[])
{
	if (isnull(params))	return SendHelpMessage(playerid, "/my [açýklama]");

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-3-strlen(GetNameWithMask(playerid))) pos = MAXLEN;

		SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s %.*s ...", GetNameWithMask(playerid), pos, params);
		SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* ... %s", GetNameWithMask(playerid), params[pos]);
	}
	else
	{
		SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s %s", GetNameWithMask(playerid), params);
	}
	return 1;
}

#define MAX_ACTION_LENGTH (144)
CMD:aksiyon(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if (!IsFactionPolice(faction))					return SendErrorMessage(playerid, "Bir polis memuru / hapishane memuru olmalýsýnýz.");
    if (!CheckAdmin(playerid, ADMIN_LEVEL_1) && !IsTester(playerid, 5))		return SendNotAdmin(playerid);
	if (PlayerInfo[playerid][pInjured] == 2)	return SendErrorMessage(playerid, "Yaralýyken herhangi bir iþlem yapamazsýnýz.");

    if (GetPVarInt(playerid, "3DLabel"))
    {
		SendSyntaxMessage(playerid, "Açýklamanýz kaldýrýldý.");
		DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "3DLabel"));
		DeletePVar(playerid, "3DLabel");
		return 1;
    }

    if (sscanf(params, "s[144]", params[0])) 	return SendHelpMessage(playerid, "/aksiyon [yazý]");
    if (strlen(params[0]) > MAX_ACTION_LENGTH)	return SendErrorMessage(playerid, "Girilen yazý maksimum %s karakter olmalýdýr!", MAX_ACTION_LENGTH);

    new Float:p[3];
	GetPlayerPos(playerid, p[0], p[1], p[2]);

	new string[MAX_PLAYER_NAME + MAX_ACTION_LENGTH + (13)];
	format(string, sizeof(string), "%s \n(( %s [ID:%i] ))", params[0], GetNameEx(playerid), playerid);
    SetPVarInt(playerid, "3DLabel", _:CreateDynamic3DTextLabel(string, 0xC2A2DAFF, p[0], p[1], p[2], 35.0));

	AMSG(COLOR_LIGHTRED, "[LOG] %s [ID:%i] adlý kullanýcý bir action oluþturdu: \"%s\".", GetNameEx(playerid), playerid, params[0]);
    return 1;
}

CMD:me(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] == 2)	return SendErrorMessage(playerid, "Yaralýyken herhangi bir iþlem yapamazsýnýz.");
	if (isnull(params))						return SendHelpMessage(playerid, "/me [emote]");

	new Float:range;
	if(GetPlayerVirtualWorld(playerid) > 0) range = 8.0;
	else range = 15.0;
	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		SendNearbyMessage(range, playerid, COLOR_PURPLE, "* %s %.*s ...", GetNameWithMask(playerid), pos, params);
		SendNearbyMessage(range, playerid, COLOR_PURPLE, "* ... %s", params[pos], GetNameWithMask(playerid));
	}
	else
	{
		SendNearbyMessage(range, playerid, COLOR_PURPLE, "* %s %s", GetNameWithMask(playerid), params);
	}
	Log_Kaydet("loglar/roleplay.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d) Emote Verdi: %s", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], params));
	return 1;
}

CMD:melow(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] == 2)	return SendErrorMessage(playerid, "Yaralýyken herhangi bir iþlem yapamazsýnýz.");
	if (isnull(params))						return SendHelpMessage(playerid, "/melow [emote]");

	new Float:range;
	if(GetPlayerVirtualWorld(playerid) > 0) range = 4.0;
	else range = 7.5;
	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		SendNearbyMessage(range, playerid, COLOR_PURPLE, "* %s %.*s ...", GetNameWithMask(playerid), pos, params);
		SendNearbyMessage(range, playerid, COLOR_PURPLE, "* ... %s", params[pos], GetNameWithMask(playerid));
	}
	else
	{
		SendNearbyMessage(range, playerid, COLOR_PURPLE, "* %s %s", GetNameWithMask(playerid), params);
	}
	Log_Kaydet("loglar/roleplay.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d) Emote-Low Verdi: %s", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], params));
	return 1;
}

CMD:dolow(playerid, params[])
{
	if (isnull(params))	return SendHelpMessage(playerid, "/dolow [durum]");

	new Float:range, message[144], message2[144];
	if(GetPlayerVirtualWorld(playerid) > 0) range = 4.0;
	else range = 7.5;
	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		format(message,sizeof(message),"* %.*s ...", pos, params, GetNameWithMask(playerid));
        DO_Emote(range, playerid, message);
		format(message2,sizeof(message2),"... %s (( %s ))", params[pos], GetNameWithMask(playerid));
		DO_Emote(range, playerid, message2);
	}
	else
	{
		format(message,sizeof(message),"* %s (( %s ))", params, GetNameWithMask(playerid));
		DO_Emote(range, playerid, message);
	}
	Log_Kaydet("loglar/roleplay.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d) Do-Low Verdi: %s", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], params));
	return 1;
}

CMD:do(playerid, params[])
{
	if (isnull(params))	return SendHelpMessage(playerid, "/do [durum]");

	new Float:range, message[144], message2[144];
	if(GetPlayerVirtualWorld(playerid) > 0) range = 8.0;
	else range = 15.0;
	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		format(message,sizeof(message),"* %.*s ...", pos, params, GetNameWithMask(playerid));
        DO_Emote(range, playerid, message);
		format(message2,sizeof(message2),"... %s (( %s ))", params[pos], GetNameWithMask(playerid));
		DO_Emote(range, playerid, message2);
	}
	else
	{
		format(message,sizeof(message),"* %s (( %s ))", params, GetNameWithMask(playerid));
		DO_Emote(range, playerid, message);
	}
	Log_Kaydet("loglar/roleplay.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d) Do Verdi: %s", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], params));
	return 1;
}

CMD:b(playerid,params[])
{
	if (isnull(params)) 						return SendHelpMessage(playerid, "/b [OOC sohbet yazýsý]");
	if (PlayerInfo[playerid][pMutedTime] > 0)	return SendErrorMessage(playerid, "Sohbetiniz sistem tarafýndan engellendi.");

	new mes[128];
	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		if (maskOn{playerid})			format(mes, sizeof(mes), "(( [OOC] %s: %.*s ... ))", GetNameWithMask(playerid), pos, params);
		else if (PlayerInfo[playerid][pAdmin] > 0 && IsAdminDuty(playerid)) 	format(mes, sizeof(mes), "{FFFFFF}(( [OOC] {a92626}%s{FFFFFF}: %.*s ... ))", GetAccName(playerid), pos, params);
		else 							format(mes, sizeof(mes), "(( [OOC] %s: %.*s ... ))", GetNameEx(playerid), pos, params);

		ProxDetectorOutOfCharacter(20.0, playerid, mes, COLOUR_ALTO);

		if (maskOn{playerid}) 			format(mes, sizeof(mes), "(( ... %s ))", params[pos]);
		else if (PlayerInfo[playerid][pAdmin] > 0 && IsAdminDuty(playerid)) 	format(mes, sizeof(mes), "{FFFFFF}(( ... %s ))", params[pos]);
		else 							format(mes, sizeof(mes), "(( ... %s ))", params[pos]);

		ProxDetectorOutOfCharacter(20.0, playerid, mes, COLOUR_ALTO);
	}
	else
	{
		if (maskOn{playerid}) 			format(mes, sizeof(mes), "(( [OOC] %s: %s ))", GetNameWithMask(playerid), params);
		else if (PlayerInfo[playerid][pAdmin] > 0 && IsAdminDuty(playerid)) 	format(mes, sizeof(mes), "{FFFFFF}(( [OOC] {a92626}%s{FFFFFF}: %s ))", GetAccName(playerid), params);
		else 							format(mes, sizeof(mes), "(( [OOC] %s: %s ))", GetNameEx(playerid), params);

		ProxDetectorOutOfCharacter(20.0, playerid, mes, COLOUR_ALTO);
	}
	Log_Kaydet("loglar/roleplay.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d) OOC Chat: %s", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], params));
	return 1;
}


alias:low("l", "c");
CMD:low(playerid,params[])
{
    if (PlayerInfo[playerid][pInjured] == 2)	return SendErrorMessage(playerid,"Yaralýyken konuþamazsýnýz.");
	if (isnull(params))							return SendHelpMessage(playerid, "/low [yazý]");
	if (PlayerInfo[playerid][pMutedTime] > 0)	return SendErrorMessage(playerid, "Sohbetiniz sistem tarafýndan engellendi.");

    if (IsPlayerInAnyVehicle(playerid) && !IsADontWindow(GetPlayerVehicleID(playerid)) && IsWindowsClose(GetPlayerVehicleID(playerid)))
		return SendErrorMessage(playerid, "Normal chati kullanýn, sizi kimse duyamaz.");

	if (strlen(params) > MAXLEN)
 	{
  		if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2)
    	{
			SendLocalMessage(4.5, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3, "%s kýsýk ses (telefon): %.*s ...", GetNameWithMask(playerid), MAXLEN, params);
			SendPhoneMessageEx(pTemp[playerid][pCallLine], COLOR_YELLOWG, "%s kýsýk ses (telefon): %.*s ...", GetNameWithMask(playerid), MAXLEN, params);
			SendLocalMessage(4.5, playerid, COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3, "... %s", params[MAXLEN]);
			SendPhoneMessageEx(pTemp[playerid][pCallLine], COLOR_YELLOWG, "... %s", params[MAXLEN]);
   		}
     	else
      	{
			SendLocalMessage(4.5, playerid,COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3, "%s (kýsýk ses): %.*s ...", GetNameWithMask(playerid), MAXLEN, params);
			SendLocalMessage(4.5, playerid,COLOR_FADE1,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3, "... %s", params[MAXLEN]);
		}
	}

	else
	{
	    if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2)
     	{
			SendLocalMessage(4.5, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s kýsýk ses (telefon): %s", GetNameWithMask(playerid), params);
            SendPhoneMessageEx(pTemp[playerid][pCallLine], COLOR_YELLOWG, "%s kýsýk ses (telefon): %s", GetNameWithMask(playerid), params);
	   	}
     	else
		{
			SendLocalMessage(4.5, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s (kýsýk ses): %s", GetNameWithMask(playerid), params);
		}
	}
	Log_Kaydet("loglar/roleplay.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d) kýsýk sesle konuþtu: %s", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], params));
	return 1;
}

alias:whisper("w", "fisilda");
CMD:whisper(playerid, params[])
{
    if (PlayerInfo[playerid][pInjured] == 2)	return SCM(playerid, COLOR_GREY, "Yaralýyken konuþamazsýnýz.");

	new userid, text[128];

	if (sscanf(params,"us[128]", userid, text))		return SendHelpMessage(playerid, "(/w)hisper [ID / isim] [yazý]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (PlayerInfo[playerid][pMutedTime] > 0)		return SendErrorMessage(playerid, "Sohbetiniz sistem tarafýndan engellendi.");
    if (!PlayerNearPlayer(3.0, playerid, userid))	return SendNotNearPlayer(playerid);
	if (userid == playerid)							return SendErrorMessage(playerid, "Kendinize fýsýldayamazsýnýz.");

	new mes[128];

	format(mes, sizeof(mes), "%s, %s adlý kiþinin kulaðýna bir þeyler fýsýldar.", GetNameWithMask(playerid), GetNameWithMask(userid));
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 15.0, 10000);

	SendClientMessageEx(userid, COLOUR_TURBO, "%s kiþisi fýsýldadý: %s", GetNameWithMask(playerid), text);
	SendClientMessageEx(playerid,  COLOUR_TURBO, "%s kiþisine fýsýldadý: %s", GetNameWithMask(userid), text);

	SpectatorMessage(playerid, sprintf("%s kiþisine fýsýladý: %s", GetNameEx(userid), text));
	SpectatorMessage(userid, sprintf("%s kiþisi fýsýladý: %s", GetNameEx(playerid), text));
	Log_Kaydet("loglar/roleplay.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d) fýsýldadý: %s", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], params));
	return 1;
}

CMD:to(playerid, params[])
{
    if (PlayerInfo[playerid][pInjured] == 2)	return SCM(playerid, COLOR_GREY, "Yaralýyken konuþamazsýnýz.");

	new userid, text[128];

	if (sscanf(params,"us[128]", userid, text))		return SendHelpMessage(playerid, "/to [ID / isim] [yazý]");
	if (!IsPlayerLogged(userid))					return SendNotConnected(playerid);
	if (PlayerInfo[playerid][pMutedTime] > 0)		return SendErrorMessage(playerid, "Sohbetiniz sistem tarafýndan engellendi.");
    if (!PlayerNearPlayer(10.0, playerid, userid))	return SendNotNearPlayer(playerid);
	if (userid == playerid)							return SendErrorMessage(playerid, "Kendinize mesaj gönderemezsiniz.");

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s seslenir (%s): %.*s ...", GetNameWithMask(playerid), GetNameWithMask(userid), pos, text);
		SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s seslenir (%s): ... %s", GetNameWithMask(playerid), GetNameWithMask(userid), text[pos]);
	}
	else
	{
		SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s seslenir (%s): %s", GetNameWithMask(playerid), GetNameWithMask(userid), text);
	}
	Log_Kaydet("loglar/roleplay.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d) PM'e karþýlýk verdi: %s", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], params));
	return 1;
}

alias:cw("carwhisper");
CMD:cw(playerid, params[])
{
	if (isnull(params))							return SendHelpMessage(playerid, "/cw [yazý]");
	if (!IsPlayerInAnyVehicle(playerid))			return SendNotInVehicle(playerid);
	if (PlayerInfo[playerid][pMutedTime] > 0)	return SendErrorMessage(playerid, "Sohbetiniz sistem tarafýndan engellendi.");

	new vehicle = GetPlayerVehicleID(playerid);

	foreach(new i : Player)
	{
	    if (!IsPlayerLogged(i) || !IsPlayerInVehicle(i, vehicle)) continue;

		if (strlen(params) > MAXLEN)
		{
		    new pos = MAXLEN;

			if (pos < MAXLEN-1) pos = MAXLEN;

			SendClientMessageEx(i,  COLOR_YELLOWG, "%s (araç içi): %.*s ...", GetNameWithMask(playerid), pos, params);
			SendClientMessageEx(i,  COLOR_YELLOWG, "... %s", params[pos]);
		}
		else
		{
			SendClientMessageEx(i,  COLOR_YELLOWG, "%s (araç içi): %s", GetNameWithMask(playerid), params);
		}

		SpectatorMessage(i, sprintf("%s (araç içi): %s", GetNameEx(playerid)));
	}
	Log_Kaydet("loglar/roleplay.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d) araçta fýsýldadý: %s", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], params));
	return 1;
}
CMD:carblow(playerid, params[])
{
	if (isnull(params))							return SendHelpMessage(playerid, "/carblow [yazý]");
	if (!IsPlayerInAnyVehicle(playerid))		return SendNotInVehicle(playerid);
	if (PlayerInfo[playerid][pMutedTime] > 0)	return SendErrorMessage(playerid, "Sohbetiniz sistem tarafýndan engellendi.");

	new vehicleid = GetPlayerVehicleID(playerid);

	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || !IsPlayerInVehicle(i, vehicleid)) continue;

		if (strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;

			if (pos < MAXLEN-1) pos = MAXLEN;

			SendClientMessageEx(i, COLOUR_ALTO, "[OOC] %s (araç içi): %.*s ...", GetNameWithMask(playerid), pos, params);
			SendClientMessageEx(i, COLOUR_ALTO, "... %s", params[pos]);
		} else {
			SendClientMessageEx(i, COLOUR_ALTO, "[OOC] %s (araç içi): %s", GetNameWithMask(playerid), params);
		}
	}
	return 1;
}

CMD:ddo(playerid, params[])
{
	new text[128];

	if (sscanf(params,"s[128]",text)) return SendHelpMessage(playerid, "/ddo [durum] (kapý yakýnýnda olmalýsýn)");

	for(new i = 0; i < MAX_HOUSES; i++)
	{
		if (!HouseInfo[i][hID]) continue;

		if (IsPlayerOutsideHouse(playerid, i, 2.0))
		{
		    SendNearbyMessage(Range_Long, playerid, COLOR_PURPLE, "[KAPI] * %s (( %s ))", text,GetNameWithMask(playerid));

			foreach(new p : Player)
			{
				if (!IsPlayerInsideHouse(p, i)) continue;

				SendClientMessageEx(p, COLOUR_VISTABLUE, "[KAPI] * %s (( %s ))", text,GetNameWithMask(playerid));
			}
			return 1;
		}

		else if (IsPlayerInsideHouse(playerid, i, 3.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOUR_VISTABLUE, "[KAPI] * %s (( %s ))", text,GetNameWithMask(playerid));
			foreach(new p : Player)
			{
				if (!IsPlayerOutsideHouse(p, i, 6.0)) continue;

				SendClientMessageEx(p, COLOUR_VISTABLUE, "[KAPI] * %s (( %s ))", text,GetNameWithMask(playerid));
			}
			return 1;
		}
	}

	for(new i = 0; i < MAX_APART; i++)
	{
		if (!ApartInfo[i][aApartOn]) continue;

		if (IsPlayerApartmentOutside(playerid, i, 2.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOUR_VISTABLUE, "[KAPI] * %s (( %s ))", text,GetNameWithMask(playerid));

			foreach(new p : Player)
			{
				if (!IsPlayerApartmentInside(p, i)) continue;

				SendClientMessageEx(p, COLOUR_VISTABLUE, "[KAPI] * %s (( %s ))", text,GetNameWithMask(playerid));
			}
			return 1;
		}

		else if (IsPlayerApartmentInside(playerid, i, 3.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOUR_VISTABLUE, "[KAPI] * %s (( %s ))", text,GetNameWithMask(playerid));

			foreach(new p : Player)
			{
				if (!IsPlayerApartmentOutside(p, i, 6.0)) continue;

				SendClientMessageEx(p, COLOUR_VISTABLUE, "[KAPI] * %s (( %s ))", text,GetNameWithMask(playerid));
			}
			return 1;
		}
	}

	for(new i = 0; i < MAX_BIZ; i++)
	{
		if (!BizInfo[i][bizID]) continue;

		if (IsPlayerBizOutside(playerid, i, 2.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOUR_VISTABLUE, "[KAPI] * %s (( %s ))", text,GetNameWithMask(playerid));

			foreach(new p : Player)
			{
				if (!IsPlayerBizInside(p, i)) continue;

				SendClientMessageEx(p, COLOUR_VISTABLUE, "[KAPI] * %s (( %s ))", text,GetNameWithMask(playerid));
			}
			return 1;
		}

		else if (IsPlayerBizInside(playerid, i, 3.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOUR_VISTABLUE, "[KAPI] * %s (( %s ))", text,GetNameWithMask(playerid));

			foreach(new p : Player)
			{
				if (!IsPlayerBizOutside(p, i, 6.0)) continue;

				SendClientMessageEx(p, COLOUR_VISTABLUE, "[KAPI] * %s (( %s ))", text,GetNameWithMask(playerid));
			}
			return 1;
		}
	}
	return 1;
}

CMD:aciklama(playerid, params[])
{
	new text[64], line;

	if (sscanf(params,"iS()[128]",line,text)) return SendHelpMessage(playerid, "/aciklama [satýr (1-2)] [yazý]");

	if (strlen(text) > PAME_MAX_LEN) return SendErrorMessage(playerid, "Karakter açýklamanýz çok fazla. (Max %i karakter)", PAME_MAX_LEN);
	if (line < 1 || line > 2) 		return SendErrorMessage(playerid, "1 =< Satýr =< 2.");

	SendHelpMessage(playerid, "/aciklama [1/2] - açýklama satýrýný kaldýrmak için (metin parametresi yok.).");
	SendHelpMessage(playerid, "/ozellik [id] - sohbette baþka bir karakterin açýklamasýný göster.");
	SendHelpMessage(playerid, "/ozellik %i - açýklamanýzý sohbette görüntüleyebilirsiniz.", playerid);

	switch(line) {
		case 1: {
			if (!strlen(text)) {
				SM1(playerid, "Satýr (1) karakter açýklamanýz kaldýrýldý.");
				format(PlayerInfo[playerid][pDescribe], PAME_MAX_LEN, "NULL");
			} else {
				SM2(playerid, "Karakter açýklama satýrý (1) deðiþtirildi. ");
				format(PlayerInfo[playerid][pDescribe], PAME_MAX_LEN, "%s", text);
			}
			SQL_SetString("users", "Desc1", PlayerInfo[playerid][pDescribe], PlayerInfo[playerid][pID]);
		}
        case 2: {
			if (!strlen(text)) {
				SM1(playerid, "Karakter açýklama satýrý (2) kaldýrýldý. ");
				format(PlayerInfo[playerid][pDescribe2], PAME_MAX_LEN, "NULL");
			} else {
				if (CompareStrings(PlayerInfo[playerid][pDescribe], "NULL")) {
					return SendErrorMessage(playerid, "1. satýrýn karakter açýklamasýný doldurmalýsýnýz.");
				}

				SM2(playerid, "2. satýrda olan karakter açýklamanýz deðiþtirildi.");
				format(PlayerInfo[playerid][pDescribe2], PAME_MAX_LEN, "%s", text);
			}
			SQL_SetString("users", "Desc2", PlayerInfo[playerid][pDescribe2], PlayerInfo[playerid][pID]);
		}
	}

	return 1;
}

CMD:ozellik(playerid, params[])
{
	new userid;

	if (sscanf(params, "u", userid))				  			return SendHelpMessage(playerid, "/ozellik [ID / isim]");
	if (!IsPlayerLogged(userid))					  			return SendNotConnected(playerid);
	if (!PlayerNearPlayer(15.0, playerid, userid))				return SendNotNearPlayer(playerid);
	if (CompareStrings(PlayerInfo[userid][pDescribe], "NULL")) 	return SendErrorMessage(playerid, "Oyuncunun açýklamasý yok!");

	if (playerid == userid) {
		SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "** %s %s", GetNameWithMask(userid), PlayerInfo[userid][pDescribe]);
		if (!CompareStrings(PlayerInfo[userid][pDescribe2], "NULL")) {
			SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, ".. %s **", PlayerInfo[userid][pDescribe2]);
		}
	} else {
		SendClientMessageEx(playerid, COLOR_PURPLE, "** %s %s", GetNameWithMask(userid), PlayerInfo[userid][pDescribe]);
		if (!CompareStrings(PlayerInfo[userid][pDescribe2], "NULL")) {
			SendClientMessageEx(playerid, COLOR_PURPLE, ".. %s **", PlayerInfo[userid][pDescribe2]);
		}
	}

	return 1;
}

alias:shout("s", "bagir");
CMD:shout(playerid, params[])
{
    if (PlayerInfo[playerid][pInjured] == 2)
        return SendErrorMessage(playerid, "Yaralýyken konuþamazsýnýz.");

    new text[128];
    if (sscanf(params, "s[128]", text))
        return SendHelpMessage(playerid, "(/s)hout [yazý]");

    for (new i = 0; i < MAX_HOUSES; i++)
    {
        if (HouseInfo[i][hID] == 0) continue;
        if (IsPlayerOutsideHouse(playerid, i, 2.0))
        {
            SendNearbyMessage(Range_Long, playerid, COLOR_WHITE, "* %s baðýrýr: %s!", GetNameWithMask(playerid), text);
            foreach (new p : Player)
            {
                if (IsPlayerInsideHouse(p, i))
                {
                    SendClientMessageEx(p, COLOR_WHITE, "* %s (mekanýn dýþýndan baðýrýr): %s!", GetNameWithMask(playerid), text);
                }
            }
            return 1;
        }
        else if (IsPlayerInsideHouse(playerid, i, 3.0))
        {
            SendNearbyMessage(Range_Long, playerid, COLOR_WHITE, "* %s baðýrýr: %s!", GetNameWithMask(playerid), text);
            foreach (new p : Player)
            {
                if (!IsPlayerInsideHouse(p, i))
                {
                    SendClientMessageEx(p, COLOR_WHITE, "* %s (mekanýn içinden baðýrýr): %s!", GetNameWithMask(playerid), text);
                }
            }
            return 1;
        }
    }
    SendNearbyMessage(Range_Long, playerid, COLOR_WHITE, "* %s baðýrýr: %s!", GetNameWithMask(playerid), text);
    return 1;
}


alias:mikrofon("mic", "mi");
CMD:mikrofon(playerid, params[])
{
	if (PlayerInfo[playerid][pInjured] == 2)	return SendErrorMessage(playerid, "Yaralýyken baðýramazsýnýz.");
    if (PlayerInfo[playerid][pMutedTime] > 0)	return SendErrorMessage(playerid, "Sohbetiniz sistem tarafýndan engellendi.");
	if (!pTemp[playerid][pMicPerm])        		return SendErrorMessage(playerid, "Mikrofon izniniz bulunmuyor. Helperlardan talepte bulunabilirsiniz.");
	if (isnull(params))							return SendHelpMessage(playerid, "(/mic)ikrofon [yazý]");

	if (strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;

		if (pos < MAXLEN-1) pos = MAXLEN;

		SendLocalMessage(75.0, playerid, COLOUR_ATLANTIS, COLOUR_ATLANTIS, COLOUR_ATLANTIS, COLOUR_ATLANTIS, COLOUR_ATLANTIS, "%s (mikrofon): %.*s ...", GetNameWithMask(playerid), pos, params);
		SendLocalMessage(75.0, playerid, COLOUR_ATLANTIS, COLOUR_ATLANTIS, COLOUR_ATLANTIS, COLOUR_ATLANTIS, COLOUR_ATLANTIS, "... %s", params[pos]);
	}
	else
	{
		SendLocalMessage(75.0, playerid, COLOUR_ATLANTIS, COLOUR_ATLANTIS, COLOUR_ATLANTIS, COLOUR_ATLANTIS, COLOUR_ATLANTIS, "%s (mikrofon): %s", GetNameWithMask(playerid), params);
	}
	Log_Kaydet("loglar/roleplay.txt", sprintf("[%s] %s (C_ID: %d | A_ID: %d) mikrofondan konuþtu: %s", GetFullDate(), GetNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pAccID], params));
	return 1;
}

OOCMSG(color,string[])
{
	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togOOC)) continue;

		SCM(i, color, string);
	}
	return 1;
}

NewsChat(color,string[])
{
	foreach(new i : Player)
	{
		if (!IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togNews)) continue;

		SCM(i, color, string);
	}
	return 1;
}

ProxDetectorOutOfCharacter(Float:radi, playerid, string[], color)
{
	foreach(new i : Player)
	{
		if (IsPlayerLogged(i) == 0 || 0 == PlayerNearPlayer(radi, playerid, i)) continue;

		SCM(i,color,string);
	}
	return 1;
}

ProxDetectorLanguage(Float:radi, playerid, string[], color, originid)
{
	foreach(new i : Player)
	{
		if (IsPlayerLogged(i) == 0 || 0 == PlayerNearPlayer(radi, playerid, i)) continue;
		if (originid != PlayerInfo[i][pOrigin] && maskOn{playerid} && originid != 1) return SCM(i, color, sprintf("%s (%s): [? ? ? ? ?]", GetNameWithMask(playerid), GetOriginLangName(PlayerInfo[playerid][pOrigin])));
		if (originid != PlayerInfo[i][pOrigin] && !maskOn{playerid} && originid != 1) return SCM(i, color, sprintf("%s (%s): [? ? ? ? ?]", GetNameEx(playerid), GetOriginLangName(PlayerInfo[playerid][pOrigin])));

		SCM(i,color,string);
	}
	return 1;
}

/*Repair_Init()
{
	for(new i; i < MAX_REPAIR_ZONES; i++)
	{
    	gz_repair[i] = GangZoneCreate(repair_zones[i][0], repair_zones[i][1], repair_zones[i][2]);
    	GangZoneHideForAll(gz_repair[i]);
	}
	return 1;
}*/

CMD:giris(playerid, params[])
{
    if (pTemp[playerid][pZond] != 0) return 1;
	if (PlayerInfo[playerid][pInjured] != 0) return 1;

	new id = -1;

	if ((id = GetNearEntranceOutside(playerid, 3.0)) != -1)
	{
	   // if (EntranceInfo[id][eLocked] == 1)					return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
            if (EntranceInfo[id][eVehicle] != 1)					return 1;
			if (PlayerInfo[playerid][pFaction] != EntranceInfo[id][eFaction] && EntranceInfo[id][eFaction] > 0)		return GameTextForPlayer(playerid, "~r~ANAHTARINIZ BULUNMUYOR!", 5000, 6);
		    new vehicleid = GetPlayerVehicleID(playerid);
            if (!GetWorld(playerid) && !GetInterior(playerid)) GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		    PlayerInfo[playerid][pLocationPos][0] = EntranceInfo[id][eExitX];
		    PlayerInfo[playerid][pLocationPos][1] = EntranceInfo[id][eExitY];
		    PlayerInfo[playerid][pLocationPos][2] = EntranceInfo[id][eExitZ];

			SetInterior(playerid, EntranceInfo[id][eExitInt]);
			SetWorld(playerid, EntranceInfo[id][eExitVW]);

		    foreach (new i : Player)
		    {
			    if (!IsPlayerInVehicle(i, vehicleid)) continue;

			    SetInterior(i, EntranceInfo[id][eExitInt]);
			    SetWorld(i, EntranceInfo[id][eExitVW]);
		    }

            PlayerEnterFreeze(playerid);
		    SetVehiclePos(vehicleid, EntranceInfo[id][eExitX], EntranceInfo[id][eExitY], EntranceInfo[id][eExitZ]);
		    SetVehicleZAngle(vehicleid, EntranceInfo[id][eExitA] - 180);
		    SetVehicleVirtualWorld(vehicleid, EntranceInfo[id][eExitVW]);
		    LinkVehicleToInterior(vehicleid, EntranceInfo[id][eExitInt]);

		    PlayerPlaySound(playerid, 1, 0.0, 0.0, 0.0);
	        return 1;
		}
	}

    if (!IsPlayerInAnyVehicle(playerid) && (id = GetNearEntranceOutside(playerid)) != -1)
	{
	    //if (EntranceInfo[id][eLocked] == 1)					return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);
		if (PlayerInfo[playerid][pFaction] != EntranceInfo[id][eFaction] && EntranceInfo[id][eFaction] > 0)		return GameTextForPlayer(playerid, "~r~ANAHTARINIZ BULUNMUYOR!", 5000, 6);
	    if (!GetWorld(playerid) && !GetInterior(playerid))	GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPos(playerid, EntranceInfo[id][eExitX], EntranceInfo[id][eExitY], EntranceInfo[id][eExitZ]);
		SetPlayerFacingAngle(playerid, EntranceInfo[id][eExitA] - 180.0);
		SetInterior(playerid, EntranceInfo[id][eExitInt]);
		SetWorld(playerid, EntranceInfo[id][eExitVW]);
		PlayerEnterFreeze(playerid);

		PlayerPlaySound(playerid, 1, 0.0, 0.0, 0.0);
	    return 1;
	}

    if (!IsPlayerInAnyVehicle(playerid) && (id = GetNearApartmentOutside(playerid)) != -1)
	{
	    if (!GetWorld(playerid) && !GetInterior(playerid))	GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid, ApartInfo[id][aExitX], ApartInfo[id][aExitY], ApartInfo[id][aExitZ]);
		SetWorld(playerid, ApartInfo[id][aExitVW]);
		SetInterior(playerid, ApartInfo[id][aExitInt]);
		PlayerEnterFreeze(playerid);
		pTemp[playerid][pApartEntered] = id;

		PlayerPlaySound(playerid, 1, 0.0, 0.0, 0.0);
		return 1;
	}

	if (!IsPlayerInAnyVehicle(playerid) && (id = GetNearOutsideHouse(playerid)) != -1)
	{
        if (!HouseInfo[id][hOwnerID])	return SendSyntaxMessage(playerid, "Evin içini kontrol etmek için /evkontrol'i kullanýn.");
	    if (HouseInfo[id][hLocked])		return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);

        if (!GetWorld(playerid) && !GetInterior(playerid))	GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid,HouseInfo[id][hExitX],HouseInfo[id][hExitY],HouseInfo[id][hExitZ]);
		SetInterior(playerid,HouseInfo[id][hExitInt]);
		SetWorld(playerid,HouseInfo[id][hExitVW]);
		PlayerEnterFreeze(playerid);
		pTemp[playerid][pHouseEntered] = id;

		if (PlayerInfo[playerid][pRentKey] == HouseInfo[id][hID] || HouseInfo[id][hOwnerID] == PlayerInfo[playerid][pID])	GameTextForPlayer(playerid, "~w~EVINE ~y~HOS GELDIN", 4000, 1);

		if (HouseInfo[id][hRadioOn] == 1)
		{
		    pTemp[playerid][pBoombox_house] = id;
			PlayAudioStreamForPlayer(playerid, HouseInfo[id][hRadioURL]);
		}

		PlayerPlaySound(playerid, 1, 0.0, 0.0, 0.0);
		return 1;
	}

	if (!IsPlayerInAnyVehicle(playerid) && (id = GetNearOutsideExtHouse(playerid)) != -1)
	{
		if (!HouseInfo[id][hExtX][1] && !HouseInfo[id][hExtX][1] && !HouseInfo[id][hExtX][1]) return 1;
	    if (HouseInfo[id][hLocked])		return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);

        if (!GetWorld(playerid) && !GetInterior(playerid))	GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid,HouseInfo[id][hExtX][1],HouseInfo[id][hExtY][1],HouseInfo[id][hExtZ][1]);
		SetInterior(playerid,HouseInfo[id][hExtInt][1]);
		SetWorld(playerid,HouseInfo[id][hExtVW][1]);
		PlayerEnterFreeze(playerid);
		pTemp[playerid][pHouseEntered] = id;

		if (PlayerInfo[playerid][pRentKey] == HouseInfo[id][hID] || HouseInfo[id][hOwnerID] == PlayerInfo[playerid][pID])	GameTextForPlayer(playerid, "~w~EVINE ~y~HOS GELDIN", 4000, 1); //î

		if (HouseInfo[id][hRadioOn] == 1)
		{
		    pTemp[playerid][pBoombox_house] = id;
			PlayAudioStreamForPlayer(playerid, HouseInfo[id][hRadioURL]);
		}

		PlayerPlaySound(playerid, 1, 0.0, 0.0, 0.0);
		return 1;
	}

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if (IsPlayerBizOutside(playerid, i, 5.0) && BizInfo[i][bizType] == BIZ_TUNING && IsDriver(playerid)) return ShowModMenu(playerid);

		if (IsPlayerBizOutside(playerid, i, 5.0) && BizInfo[i][bizType] == BIZ_PAYNSPRAY)
		{
			if (BizInfo[i][bizLocked])									return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);
			if (!GetPlayerVehicleID(playerid))							return SendErrorMessage(playerid, "Araçta olmalýsýnýz.");
            if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)			return SendErrorMessage(playerid, "Araçta olmalýsýnýz. ");
			if (VehicleInfo[GetPlayerVehicleID(playerid)][carEngineOn])	return SendErrorMessage(playerid, "Tamire baþlamadan önce motorunuzu durdurun!");
			if (GetCash(playerid) < BizInfo[i][bizEntrance])				return SendErrorMessage(playerid, "Giriþ maliyeti: $%i.", BizInfo[i][bizEntrance]);
			if (BizInfo[i][bizOwnerID] && !BizInfo[i][bizProduct])		return SendErrorMessage(playerid, "Ýþyerinde yeterli ürün yok.");

			new Float: health;
			AntiCheatGetVehicleHealth(GetPlayerVehicleID(playerid), health);

			if (health < 230.0) return SendErrorMessage(playerid, "Bu araç artýk tamir edilemez.");

			static const dlgstr[] = "{FFFFFF}Aracýnýzda hasar oluþtu: {FF6347}%i%%\n\
									{FFFFFF}Komple Tamir: {1b8922}$%i {C5C5C5}(( Motor ve Kaporta ))\n\
									{FFFFFF}Parça Tadilatý {C5C5C5}(( Sadece seçilen parçalar ))\n\
									{FFFFFF}Araç Mekanik & Elektrik {1b8922}$%i {C5C5C5}(( Araç caný ))\n\
									{FFFFFF}Akü Tamiri [ durum: {FF6347}%.2f%%{FFFFFF}]: {1b8922}$%i\n\
									{FFFFFF}Motor Tamiri [ durum: {FF6347}%.2f%%{FFFFFF}]: {1b8922}$%i";
			new mes[sizeof(dlgstr) + 64];

			new panels, doors, lights, tires;
			GetVehicleStatus(playerid, panels, doors, lights, tires);

			new
				vehicle = GetPlayerVehicleID(playerid),
				model = GetVehicleModel(vehicle),
				common_per = floatround((100.0 - ((health/GetVehicleMaxHealth(model))*100) + (panels+doors+lights+tires)) / 5, floatround_ceil), //%
				hp_cost = floatround((100 - ((health/GetVehicleMaxHealth(model))*100)) * (GetVehiclePrice(model)/1000), floatround_ceil)
			;
			if (hp_cost < 0) hp_cost = 0;
			new
				cost = 1 + floatround(GetVehiclePrice(model) / 100, floatround_ceil),
				common_cost = hp_cost +  floatround((cost * 0.5 * panels/100) + (cost * 0.25 * doors/100) + (cost * 0.1 * lights/100) + (cost * 0.15 * tires/100), floatround_ceil)
			;

			format(mes, sizeof(mes), dlgstr,
				common_per,
				cost,
				hp_cost,
				VehicleInfo[vehicle][carBattery], floatround(GetVehiclePrice(model) / 100 * 5, floatround_ceil),
				VehicleInfo[vehicle][carEngine], floatround(GetVehiclePrice(model) / 100 * 10, floatround_ceil)
			);

			Dialog_Show(playerid, Autoservice, DIALOG_STYLE_TABLIST_HEADERS, "Araç Tamir", mes, "Seç", "Iptal");
			return 1;
		}
		if (IsPlayerBizOutside(playerid, i, 1.0))
		{
			GameTextForPlayer(playerid, "_", 1, 4);
			if (BizInfo[i][bizType] == BIZ_TUNING) 			return 1;
			else if (BizInfo[i][bizType] == BIZ_AUTOSALON) 	return Dialog_Show(playerid, SelectClass, DIALOG_STYLE_LIST, "Bir kategori seçin", "2 kapýlý araçlar\n\
																																				Lowrider araçlar\n\
																																				4 kapýlý ve lüks araçlar\n\
																																				Spor araçlar\n\
																																				Pickuplar ve panelvan araçlar\n\
																																				SUV araçlar\n\
																																				Kamyon ve iþci araclari\n\
																																				Motorsikletler / Bisikletler\n\
																																				Diðerleri\n\
																																				",
																																				"Seç", "Kapat");
			else if (BizInfo[i][bizType] == BIZ_BOATSALON) 	return ShowBoats(playerid);
			else if (BizInfo[i][bizType] == BIZ_FLYSALON) 	return ShowFly(playerid);
			else if (BizInfo[i][bizType] == BIZ_GAS_STATION) return SendHelpMessage(playerid, "/benzin - komutu ile yakýt ikmalini baþlatabilir ve durdurabilirsiniz. ");
			else if (BizInfo[i][bizType] == BIZ_ADVERT) 		return SendHelpMessage(playerid, "/reklam - kiþisel reklam, /iþyerireklam - iþyerleri için duyuru /panokirala - reklam panosu kiralamak. ");

            if (IsPlayerInAnyVehicle(playerid))																																return 1;
			if (BizInfo[i][bizLocked] == 1)																																	return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);
			if (PlayerInfo[playerid][pID] != BizInfo[i][bizOwnerID] && !PlayerInfo[playerid][pOnDuty] && PlayerInfo[playerid][pWorkOn] != BizInfo[i][bizID] && GetCash(playerid) < BizInfo[i][bizEntrance])	return GameTextForPlayer(playerid, "~r~YETERSIZ PARA!", 5000, 1);

			if (!GetWorld(playerid) && !GetInterior(playerid)) GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

			SetPlayerPosEx(playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]);
			SetInterior(playerid,BizInfo[i][bizExitInt]);
			SetWorld(playerid,BizInfo[i][bizExitVW]);

			if (strlen(BizInfo[i][bizMes]) > 1) SCM(playerid, COLOR_WHITE, BizInfo[i][bizMes]);

			if (PlayerInfo[playerid][pID] != BizInfo[i][bizOwnerID] && PlayerInfo[playerid][pWorkOn] != BizInfo[i][bizID] && !PlayerInfo[playerid][pOnDuty] && BizInfo[i][bizEntrance] > 0)
			{
				GiveCash(playerid, -BizInfo[i][bizEntrance]);
				GiveBizCash(i, BizInfo[i][bizEntrance]);
			}

			PlayerEnterFreeze(playerid);
			pTemp[playerid][pBizEntered] = i;
			GameTextForPlayer(playerid, BizInfo[i][bizName], 5000, 1);

			if (BizInfo[i][bizRadioOn] == 1)
			{
			    pTemp[playerid][pBoombox_biz] = i;
				PlayAudioStreamForPlayer(playerid, BizInfo[i][bizRadioURL]);
			}
			return 1;
		}
	}

	if ((id = GetNearGarage(playerid)) != -1)
	{
	    if (GarageInfo[id][garageOwner] == 0 && IsPlayerInAnyVehicle(playerid))	return SendErrorMessage(playerid, "Bu garaja araç giremez.");
	    if (GarageInfo[id][garageLocked] != 0)									return SendErrorMessage(playerid, "Garaj kapýlarý kapalý.");

		if (IsDriver(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
            if (!GetWorld(playerid) && !GetInterior(playerid)) GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

			foreach (new i : Player)
			{
			    if (!IsPlayerInVehicle(i, vehicleid)) continue;

				SetInterior(i, GarageInfo[id][garageExitInt]);
				SetWorld(i, GarageInfo[id][garageExitVW]);
				PlayerPlaySound(i, 1, 0.0, 0.0, 0.0);
			}

            PlayerEnterFreeze(playerid);

			SetInterior(playerid, GarageInfo[id][garageExitInt]);
			SetWorld(playerid, GarageInfo[id][garageExitVW]);

			SetVehiclePos(vehicleid, GarageInfo[id][garageVeh_Exit][0], GarageInfo[id][garageVeh_Exit][1], GarageInfo[id][garageVeh_Exit][2]);
		    SetVehicleZAngle(vehicleid, GarageInfo[id][garageVeh_Exit][3]);
		    SetVehicleVirtualWorld(vehicleid, GarageInfo[id][garageExitVW]);
			LinkVehicleToInterior(vehicleid, GarageInfo[id][garageExitInt]);

			PlayerPlaySound(playerid, 1, 0.0, 0.0, 0.0);
		    return 1;
		}
		else if (!IsPlayerInAnyVehicle(playerid))
		{
		    if (!GetWorld(playerid) && !GetInterior(playerid)) GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

			SetPlayerPosEx(playerid, GarageInfo[id][garagePlayer_Exit][0], GarageInfo[id][garagePlayer_Exit][1], GarageInfo[id][garagePlayer_Exit][2]);
		    SetInterior(playerid, GarageInfo[id][garageExitInt]);
			SetWorld(playerid, GarageInfo[id][garageExitVW]);

			PlayerPlaySound(playerid, 1, 0.0, 0.0, 0.0);
		}
	    return 1;
	}
	return 1;
}

CMD:cikis(playerid, params[])
{
    if (pTemp[playerid][pZond] != 0) return 1;
	if (PlayerInfo[playerid][pInjured] != 0) return 1;

	new id = -1;

	if (IsDriver(playerid) && (id = GetNearEntranceInside(playerid, 3.0)) != -1)
	{
        if (EntranceInfo[id][eVehicle] != 1)					return 1;
		if (PlayerInfo[playerid][pFaction] != EntranceInfo[id][eFaction] && EntranceInfo[id][eFaction] > 0)		return GameTextForPlayer(playerid, "~r~ANAHTARINIZ BULUNMUYOR!", 5000, 6);
		new vehicleid = GetPlayerVehicleID(playerid);
        if (!GetWorld(playerid) && !GetInterior(playerid)) GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		PlayerInfo[playerid][pLocationPos][0] = EntranceInfo[id][eEnterX];
		PlayerInfo[playerid][pLocationPos][1] = EntranceInfo[id][eEnterY];
		PlayerInfo[playerid][pLocationPos][2] = EntranceInfo[id][eEnterZ];

		SetInterior(playerid, EntranceInfo[id][eEnterInt]);
		SetWorld(playerid, EntranceInfo[id][eEnterVW]);

		foreach (new i : Player)
		{
			if (!IsPlayerInVehicle(i, vehicleid)) continue;

			SetInterior(i, EntranceInfo[id][eEnterInt]);
			SetWorld(i, EntranceInfo[id][eEnterVW]);
		}

        PlayerEnterFreeze(playerid);
		SetVehiclePos(vehicleid, EntranceInfo[id][eEnterX], EntranceInfo[id][eEnterY], EntranceInfo[id][eEnterZ]);
		SetVehicleZAngle(vehicleid, EntranceInfo[id][eEnterA] - 180);
		SetVehicleVirtualWorld(vehicleid, EntranceInfo[id][eEnterVW]);
		LinkVehicleToInterior(vehicleid, EntranceInfo[id][eEnterInt]);

		PlayerPlaySound(playerid, 1, 0.0, 0.0, 0.0);
	    return 1;
	}

	if (!IsPlayerInAnyVehicle(playerid) && (id = GetNearEntranceInside(playerid)) != -1)
	{
	    //if (EntranceInfo[id][eLocked] == 1)	return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);
		if (PlayerInfo[playerid][pFaction] != EntranceInfo[id][eFaction] && EntranceInfo[id][eFaction] > 0)		return GameTextForPlayer(playerid, "~r~ANAHTARINIZ BULUNMUYOR!", 5000, 6);

	    if (!GetWorld(playerid) && !GetInterior(playerid)) GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPos(playerid, EntranceInfo[id][eEnterX], EntranceInfo[id][eEnterY], EntranceInfo[id][eEnterZ]);
		SetPlayerFacingAngle(playerid, EntranceInfo[id][eEnterA] - 180.0);
		SetInterior(playerid, EntranceInfo[id][eEnterInt]);
		SetWorld(playerid, EntranceInfo[id][eEnterVW]);

		PlayerEnterFreeze(playerid);

		PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
	    return 1;
	}

	if (!IsPlayerInAnyVehicle(playerid) && (id = GetNearEntranceInside(playerid)) != -1)
	{
	    //if (EntranceInfo[id][eLocked] == 1)	return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);

	    if (!GetWorld(playerid) && !GetInterior(playerid)) GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid, EntranceInfo[id][eEnterX], EntranceInfo[id][eEnterY], EntranceInfo[id][eEnterZ]);
		SetPlayerFacingAngle(playerid, EntranceInfo[id][eEnterA] - 180.0);
		SetInterior(playerid, EntranceInfo[id][eEnterInt]);
		SetWorld(playerid, EntranceInfo[id][eEnterVW]);

		PlayerEnterFreeze(playerid);

		PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
	    return 1;
	}

	if (!IsPlayerInAnyVehicle(playerid) && (id = GetNearApartmentInside(playerid, 1.0)) != -1)
	{
	    if (!GetWorld(playerid) && !GetInterior(playerid)) GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid, ApartInfo[id][aPosX], ApartInfo[id][aPosY], ApartInfo[id][aPosZ]);
		SetWorld(playerid, ApartInfo[id][aPosVW]);
		SetInterior(playerid, ApartInfo[id][aPosInt]);
		pTemp[playerid][pApartEntered] = -1;

		PlayerEnterFreeze(playerid);

		PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
		return 1;
	}

	if (!IsPlayerInAnyVehicle(playerid) && (id = GetNearInsideHouse(playerid, 2.0)) != -1)
	{
        if (!GetWorld(playerid) && !GetInterior(playerid)) GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);
        if (HouseInfo[id][hLocked])		return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);

		SetPlayerPosEx(playerid,HouseInfo[id][hPosX],HouseInfo[id][hPosY],HouseInfo[id][hPosZ]);
		SetInterior(playerid, HouseInfo[id][hPosInt]);
		SetWorld(playerid,HouseInfo[id][hPosVW]);
        pTemp[playerid][pHouseEntered] = -1;
        DeletePVar(playerid, #check_int);

		PlayerEnterFreeze(playerid);

		PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
	    return 1;
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = GetNearInsideExtHouse(playerid, 2.0)) != -1)
	{
		if (!HouseInfo[id][hExtX][0] && !HouseInfo[id][hExtX][0] && !HouseInfo[id][hExtX][0]) return 1;
		if (!GetWorld(playerid) && !GetInterior(playerid)) GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);
		if (HouseInfo[id][hLocked])		return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);

		SetPlayerPosEx(playerid,HouseInfo[id][hExtX][0],HouseInfo[id][hExtY][0],HouseInfo[id][hExtZ][0]);
		SetInterior(playerid, HouseInfo[id][hExtInt][0]);
		SetWorld(playerid,HouseInfo[id][hExtVW][0]);
        pTemp[playerid][pHouseEntered] = -1;
        DeletePVar(playerid, #check_int);

		PlayerEnterFreeze(playerid);

		PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
	    return 1;
	}
	else if ((id = GetNearInsideBiz(playerid, 2.0)) != -1)
	{
	    if (BizInfo[id][bizType] == BIZ_GAS_STATION || BizInfo[id][bizType] == BIZ_AUTOSALON || BizInfo[id][bizType] == BIZ_BOATSALON || BizInfo[id][bizType] == BIZ_FLYSALON || BizInfo[id][bizType] == BIZ_TUNING || BizInfo[id][bizType] == BIZ_ADVERT || BizInfo[id][bizType] == BIZ_LICENSE)
		{
			return 1;
		}

        if (BizInfo[id][bizLocked])									return GameTextForPlayer(playerid, "~r~KILITLI!", 2500, 1);
        if (!GetWorld(playerid) && !GetInterior(playerid))	GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid,BizInfo[id][bizPosX], BizInfo[id][bizPosY], BizInfo[id][bizPosZ]);
		SetInterior(playerid,BizInfo[id][bizPosInt]);
		SetWorld(playerid,BizInfo[id][bizPosVW]);
		pTemp[playerid][pBizEntered] = -1;

		PlayerEnterFreeze(playerid);

		PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
		return 1;
	}
	else if ((id = GetNearGarage(playerid)) != -1)
	{
	    if (GarageInfo[id][garageLocked] != 0)	return SendErrorMessage(playerid,"Garaj kapýlarý kapalý.");

		if (IsDriver(playerid))
		{
		    if (!GetWorld(playerid) && !GetInterior(playerid)) GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);
			new vehicleid = GetPlayerVehicleID(playerid);

		    PlayerInfo[playerid][pLocationPos][0] = GarageInfo[id][garageVeh_Enter][0];
			PlayerInfo[playerid][pLocationPos][1] = GarageInfo[id][garageVeh_Enter][1];
			PlayerInfo[playerid][pLocationPos][2] = GarageInfo[id][garageVeh_Enter][2];

			foreach (new i : Player)
			{
			    if (!IsPlayerInVehicle(i, vehicleid)) continue;

				SetInterior(i, GarageInfo[id][garageEnterInt]);
				SetWorld(i, GarageInfo[id][garageEnterVW]);
				PlayerPlaySound(i, 0, 0.0, 0.0, 0.0);
			}

			SetInterior(playerid, GarageInfo[id][garageEnterInt]);
			SetWorld(playerid, GarageInfo[id][garageEnterVW]);

			SetVehiclePos(vehicleid, GarageInfo[id][garageVeh_Enter][0], GarageInfo[id][garageVeh_Enter][1], GarageInfo[id][garageVeh_Enter][2]);
		    SetVehicleZAngle(vehicleid, GarageInfo[id][garageVeh_Enter][3]);
		    SetVehicleVirtualWorld(vehicleid, GarageInfo[id][garageEnterVW]);
			LinkVehicleToInterior(vehicleid, GarageInfo[id][garageEnterInt]);

			PlayerEnterFreeze(playerid);

			PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
		    return 1;
		}
		else if (!IsPlayerInAnyVehicle(playerid))
		{
		    if (!GetWorld(playerid) && !GetInterior(playerid)) GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

			SetPlayerPosEx(playerid, GarageInfo[id][garagePlayer_Enter][0], GarageInfo[id][garagePlayer_Enter][1], GarageInfo[id][garagePlayer_Enter][2]);
		    SetInterior(playerid, GarageInfo[id][garageEnterInt]);
			SetWorld(playerid, GarageInfo[id][garageEnterVW]);

			PlayerEnterFreeze(playerid);

			PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
		}
	    return 1;
	}
	return 1;
}

BalikNoktalariniYukle()
{

	new str[256], Balikci;

	/*========================================================================*/

	CreateActor(6, 393.8469,-2053.4126,7.8359,91.4296);
    CreateDynamic3DTextLabel("{bcbcbc}(( Balýkçý ))\n{afafaf}« ALT »", 0xF1C40FFF, 393.8469,-2053.4126,7.8359 + 1.1, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);

	CreateDynamic3DTextLabel("{b5e56b}\n\n\n(( Balýk Tutma Alaný ))\n", 0xF1C40FFF, 384.1955,-2084.4097,7.8359 + 0.25, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
	CreateDynamic3DTextLabel("{b5e56b}\n\n\n(( Balýk Tutma Alaný ))\n", 0xF1C40FFF, 407.1395,-2079.1304,7.8359 + 0.25, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
	CreateDynamic3DTextLabel("{b5e56b}\n\n\n(( Balýk Tutma Alaný ))\n", 0xF1C40FFF, 356.6573,-2084.8379,7.8359 + 0.25, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);

	/*========================================================================*/

/*	format(str, sizeof str, "");

	for (new i = 0; i < sizeof BalikKoordinatlari; i++)
	{
		CreateDynamic3DTextLabel(str, -1, BalikKoordinatlari[i][balikPos][0], BalikKoordinatlari[i][balikPos][1], BalikKoordinatlari[i][balikPos][2], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
		CreateDynamicPickup(-1, 0, BalikKoordinatlari[i][balikPos][0], BalikKoordinatlari[i][balikPos][1], BalikKoordinatlari[i][balikPos][2], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);
	}*/
}


GetPlayerFish_FreeSlot(playerid)
{
	for (new i; i < 20; i++)
	{
	    if (PlayerInfo[playerid][pBalikID][i] == -1)
	    {
			return i;
	    }
	}
	return -1;
}

CMD:yemlerim(playerid, params[])
{
    new str[1024];

    strcat(str, "{FFFFFF}Yem Türleri\t{FFFFFF}Miktar\n");

    format(str, sizeof str, "%s{FFFFFF}Karides\t{FFFFFF}%d\n", str, PlayerInfo[playerid][pYemTurleri][KARIDES]);
    format(str, sizeof str, "%s{FFFFFF}Sülünes\t{FFFFFF}%d\n", str, PlayerInfo[playerid][pYemTurleri][SULUNES]);
    format(str, sizeof str, "%s{FFFFFF}Ekmek Kýrýntýsý\t{FFFFFF}%d\n", str, PlayerInfo[playerid][pYemTurleri][EKMEK_KIRINTISI]);

    Dialog_Show(playerid, Yemlerim, DIALOG_STYLE_TABLIST_HEADERS, "{AFAFAF}»» {FFFFFF}Yemlerim", str, "{FFFFFF}Seç", "{FFFFFF}Kapat");
	return 1;
}

Dialog:Yemlerim(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new str[1024], yemAdi[16];

		switch (listitem)
		{
		    case 0: yemAdi = "Karides", SetPVarInt(playerid, "Yemi", KARIDES);
		    case 1: yemAdi = "Sülünes", SetPVarInt(playerid, "Yemi", SULUNES);
		    case 2: yemAdi = "Ekmek Kýrýntýsý", SetPVarInt(playerid, "Yemi", EKMEK_KIRINTISI);
		}

		format(str, sizeof str, "{FFFFFF}Yere kaç tane %s atmak istediðinizi yazýn:", yemAdi);

		Dialog_Show(playerid, YemAt, DIALOG_STYLE_INPUT, "{AFAFAF}» {FFFFFF}Yem Atma", str, "{FFFFFF}Yere At", "{FFFFFF}Geri");
	}
	return true;
}

Dialog:YemAt(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return pc_cmd_yemlerim(playerid, "");

	if (response)
	{
	    new Miktar = strval(inputtext), id = GetPVarInt(playerid, "Yemi");

	    new yemAdi[16], str[256];

		switch (id)
  		{
    		case KARIDES: yemAdi = "Karides";
			case SULUNES: yemAdi = "Sülünes";
			case EKMEK_KIRINTISI: yemAdi = "Ekmek Kýrýntýsý";
		}

	    if (!isNumeric(inputtext))
		{
			format(str, sizeof str, "{FFFFFF}Yere kaç tane %s atmak istediðinizi yazýn:", yemAdi);
			return Dialog_Show(playerid, YemAt, DIALOG_STYLE_INPUT, "{AFAFAF}» {FFFFFF}Yem Atma", str, "{FFFFFF}Yere At", "{FFFFFF}Geri");
		}
		if (Miktar < 1 || Miktar > 10)
		{
		    SendSyntaxMessage(playerid, "Atmak istediðin yem miktarý minimum 1, maksimum 10 olabilir.");
		    format(str, sizeof str, "{FFFFFF}Yere kaç tane %s atmak istediðinizi yazýn:", yemAdi);
			return Dialog_Show(playerid, YemAt, DIALOG_STYLE_INPUT, "{AFAFAF}» {FFFFFF}Yem Atma", str, "{FFFFFF}Yere At", "{FFFFFF}Geri");
		}
		if (Miktar > PlayerInfo[playerid][pYemTurleri][id])
		{
			SendSyntaxMessage(playerid, "{FFFFFF}%s yeminden %d miktar var, daha fazlasýný atamazsýn.", yemAdi, PlayerInfo[playerid][pYemTurleri][id]);
            format(str, sizeof str, "{FFFFFF}Yere kaç tane %s atmak istediðinizi yazýn:", yemAdi);
			return Dialog_Show(playerid, YemAt, DIALOG_STYLE_INPUT, "{AFAFAF}» {FFFFFF}Yem Atma", str, "{FFFFFF}Yere At", "{FFFFFF}Geri");
		}

		PlayerInfo[playerid][pYemTurleri][id] -= Miktar;
		SendSyntaxMessage(playerid, "%s yeminden %d miktar yere attýn.", yemAdi, Miktar);
	}
	return true;
}

Dialog:BalikcilikDogrulama(playerid, response, listitem, inputtext[])
{
	new onaykodu = GetPVarInt(playerid, "BalikOnayKOD");
	if (!response) {
		if(MeslekDogrulama[playerid] == 5) {
			SetPVarInt(playerid, "BalikOnayKOD", randomEx(1111111, 9999999));
			Dialog_Show(playerid, BalikcilikDogrulama, DIALOG_STYLE_INPUT, "Meslek", "{dadada}Mesleðe devam edebilmek için {d04f61}%i{dadada} numaralý kodu aþaðýdaki kutucuða girmelisin", "Devam", "-", GetPVarInt(playerid, "BalikOnayKOD"));
			return 1;
		}
	}
	if (response)
	{
		if(strval(inputtext) == onaykodu)
	    {
			SendSyntaxMessage(playerid, "Meslek kodunu doðru girdiniz, meslek yapmaya devam edebilirsiniz.");
			MeslekDogrulama[playerid] = 0;
			TogglePlayerControllable(playerid, 1);
			PlayerInfo[playerid][pMKoduGosteriliyor] = false;
			return 1;
		}
	    if(strval(inputtext) != onaykodu)
	    {
			SendErrorMessage(playerid, "Meslek kodunu yanlýþ girdiniz!");

			SetPVarInt(playerid, "BalikOnayKOD", randomEx(1111111, 9999999));
			Dialog_Show(playerid, BalikcilikDogrulama, DIALOG_STYLE_INPUT, "Meslek", "{dadada}Mesleðe devam edebilmek için {d04f61}%i{dadada} numaralý kodu aþaðýdaki kutucuða girmelisin", "Devam", "-", GetPVarInt(playerid, "BalikOnayKOD"));
			return 1;
		}
	}
	return 1;
}

CMD:baliktut(playerid)
{
    if (!IsPlayerInRangeOfPoint(playerid, 31.7, 384.1955,-2084.4097,7.8359)) return SendErrorMessage(playerid, "Santa Maria Beach iskelesinde olmalýsýnýz.");

	if (PlayerInfo[playerid][pYemTurleri][EKMEK_KIRINTISI] < 1 && PlayerInfo[playerid][pYemTurleri][SULUNES] < 1 && PlayerInfo[playerid][pYemTurleri][KARIDES] < 1) return SendSyntaxMessage(playerid,"Yeminiz bitmiþ ya da yok, balýkçýdan yem satýn alýn.");

	if (BalikTimer[playerid] != -1) return SendErrorMessage(playerid, "Zaten balýk tutuyorsun.");

	SetPlayerArmedWeapon(playerid, 0);
	ClearAnimations(playerid);
	new mes[128];
	format(mes, sizeof(mes), "elindeki oltasýný suya sallar ve balik tutmaya baslar.");
	pc_cmd_me(playerid, mes);

	if(PlayerInfo[playerid][pMKoduGosteriliyor] == true) return SendErrorMessage(playerid,"Zekice.");

		MeslekDogrulama[playerid] += 1;

	if(MeslekDogrulama[playerid] == 5) {
		SetPVarInt(playerid, "BalikOnayKOD", randomEx(1111111, 9999999));
		PlayerInfo[playerid][pMKoduGosteriliyor] = true;
		TogglePlayerControllable(playerid, 0);
	    Dialog_Show(playerid, BalikcilikDogrulama, DIALOG_STYLE_INPUT, "Meslek Kodu", "{dadada}Mesleðe devam edebilmek için {d04f61}%i{dadada} kodunu aþaðýdaki kutucuða girmelisin", "Devam", "-", GetPVarInt(playerid, "BalikOnayKOD"));
		return 1;
	}

	if (GetPVarInt(playerid, "IlkBalik") == 0)
	{
	    SetPVarInt(playerid, "IlkBalik", 1);
	    TogglePlayerControllable(playerid, false);
		ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.1, 0, 1, 1, 1, 0);
	}
	else
	{
	    ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.1, 0, 1, 1, 1, 0);
	}
	new string[455];
   	format(string, sizeof(string), "* %s gerilir ve oltayý hýzlýca denize sallar, balýðýn gelmesini bekler.", GetNameEx(playerid));
    SetPlayerChatBubble(playerid, string, COLOR_CYAN, 30.0, 10000);
 	BalikTimer[playerid] = SetTimerEx("BalikTutma", randomEx(6500, 15000), false, "i",playerid);
	return 1;
}

/*Sahil_Kontrol(playerid)
{
    for (new i = 0; i < sizeof BalikKoordinatlari; i++)
	{
	    if (IsPlayerInRangeOfPoint(playerid, 0.5, BalikKoordinatlari[i][balikPos][0], BalikKoordinatlari[i][balikPos][1], BalikKoordinatlari[i][balikPos][2]))
		    return i;
	}
	return -1;
}*/

Dialog:BalikMenusu(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new str[1024];
	    switch (listitem)
	    {
	        case 0:
	        {
	            OyuncuBaliklari(playerid);
	        }
	        case 1:
	        {
				format(str, sizeof str, "{FFFFFF}Yem\t{FFFFFF}Miktar\t{FFFFFF}Fiyat\t{FFFFFF}Balýk Oraný\n");

				format(str, sizeof str, "%s{FFFFFF}Karides\t{FFFFFF}1\t{00FF00}$15\t{FFFFFF}%s25\n", str, "%");
				format(str, sizeof str, "%s{FFFFFF}Sulunes\t{FFFFFF}1\t{00FF00}$10\t{FFFFFF}%s15\n", str, "%");
                format(str, sizeof str, "%s{FFFFFF}Ekmek Kýrýntýsý\t{FFFFFF}1\t{00FF00}$3\t{FFFFFF}%s5\n", str, "%");

				Dialog_Show(playerid, YemMenusu, DIALOG_STYLE_TABLIST_HEADERS, "{FF9933}Yemler", str, "{FFFFFF}Se?", "{FFFFFF}Geri");
			}
	    }
	}
	return true;
}

Dialog:YemMenusu(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            new str[512];

	            format(str, sizeof str, "{FFFFFF}» Kaç tane karides almak istediðiniz yazýn:");

	            Dialog_Show(playerid, Karides, DIALOG_STYLE_INPUT, "{FFFFFF}Karides (Tanesi: {00FF00}$25{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
	        }
	        case 1:
	        {
	            new str[512];

	            format(str, sizeof str, "{FFFFFF}» Kaç tane sülünes almak istediðiniz yazýn:");

	            Dialog_Show(playerid, Sulunes, DIALOG_STYLE_INPUT, "{FFFFFF}Sülünes (Tanesi: {00FF00}$15{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
	        }
	        case 2:
	        {
	            new str[512];

	            format(str, sizeof str, "{FFFFFF}» Kaç tane ekmek kýrýntýsý almak istediðiniz yazýn:");

	            Dialog_Show(playerid, EkmekKirintisi, DIALOG_STYLE_INPUT, "{FFFFFF}Ekmek Kýrýntýsý (Tanesi: {00FF00}$5{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
	        }
	    }
	}
	return true;
}

Dialog:Karides(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new Miktar = strval(inputtext);
	    if (!isNumeric(inputtext))
	    {
	        new str[512];

			format(str, sizeof str, "{FFFFFF}» Kaç tane karides almak istediðiniz yazýn:");

			return Dialog_Show(playerid, Karides, DIALOG_STYLE_INPUT, "{FFFFFF}Karides (Tanesi: {00FF00}$25{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
	    }
	    if (Miktar < 1 || Miktar > 15)
		{
		    new str[512];

			format(str, sizeof str, "{FFFFFF}» Kaç tane karides almak istediðiniz yazýn:");

			SendErrorMessage(playerid, "Minimum 1, maksimum 15 yazabilirsin.");

			return Dialog_Show(playerid, Karides, DIALOG_STYLE_INPUT, "{FFFFFF}Karides (Tanesi: {00FF00}$25{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
		}
		if (PlayerInfo[playerid][pYemTurleri][KARIDES] + Miktar > 15)
		{
		    new str[512];

			format(str, sizeof str, "{FFFFFF}» Kaç tane karides almak istediðiniz yazýn:");

			SendErrorMessage(playerid, "Daha fazla karides satýn alamazsýn.", 10-PlayerInfo[playerid][pYemTurleri][KARIDES]);

			return Dialog_Show(playerid, Karides, DIALOG_STYLE_INPUT, "{FFFFFF}Karides (Tanesi: {00FF00}$25{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
		}
		if (PlayerInfo[playerid][pCash] < Miktar*25)
		{
		    new str[512];

			format(str, sizeof str, "{FFFFFF}» Kaç tane karides almak istediðiniz yazýn:");

			SendErrorMessage(playerid, "Paranýz yetersiz.");

			return Dialog_Show(playerid, Karides, DIALOG_STYLE_INPUT, "{FFFFFF}Karides (Tanesi: {00FF00}$25{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
		}
		SendSyntaxMessage(playerid, "{00FF00}$%d {FFFFFF}karþýlýðýnda toplam %d karides yemi aldýn.", Miktar*25, Miktar);
		PlayerInfo[playerid][pYemTurleri][KARIDES] += Miktar;
		GiveCash(playerid, -25*Miktar);
	}
	return true;
}

Dialog:Sulunes(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new Miktar = strval(inputtext);
	    if (!isNumeric(inputtext))
	    {
	        new str[512];

			format(str, sizeof str, "{FFFFFF}» Kaç tane sülünes almak istediðiniz yazýn:");

			return Dialog_Show(playerid, Sulunes, DIALOG_STYLE_INPUT, "{FFFFFF}Sülünes (Tanesi: {00FF00}$15{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
	    }
	    if (Miktar < 1 || Miktar > 15)
		{
		    new str[512];

			format(str, sizeof str, "{FFFFFF}» Kaç tane sülünes almak istediðiniz yazýn:");

			SendSyntaxMessage(playerid, "Minimum 1, maksimum 15 yazabilirsin.");

			return Dialog_Show(playerid, Sulunes, DIALOG_STYLE_INPUT, "{FFFFFF}Sülünes (Tanesi: {00FF00}$15{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
		}
		if (PlayerInfo[playerid][pYemTurleri][SULUNES] + Miktar > 15)
		{
		    new str[512];

			format(str, sizeof str, "{FFFFFF}» Kaç tane sülünes almak istediðiniz yazýn:");

			SendSyntaxMessage(playerid, "Daha fazla Sulünes alamazsýn.", 10-PlayerInfo[playerid][pYemTurleri][SULUNES]);

			return Dialog_Show(playerid, Sulunes, DIALOG_STYLE_INPUT, "{FFFFFF}Sülünes (Tanesi: {00FF00}$15{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
		}
		if (PlayerInfo[playerid][pCash] < Miktar*15)
		{
		    new str[512];

			format(str, sizeof str, "{FFFFFF}» Kaç tane sülünes almak istediðiniz yazýn:");

			SendSyntaxMessage(playerid, "Paranýz yetersiz.");

			return Dialog_Show(playerid, Sulunes, DIALOG_STYLE_INPUT, "{FFFFFF}Sülünes (Tanesi: {00FF00}$15{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
		}
		SendSyntaxMessage(playerid, "{00FF00}$%d {FFFFFF}karþýlýðýnda toplam %d sülünes yemi aldýn.", Miktar*15, Miktar);
		PlayerInfo[playerid][pYemTurleri][SULUNES] += Miktar;
		GiveCash(playerid, -Miktar*15);
	}
	return true;
}

Dialog:EkmekKirintisi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new Miktar = strval(inputtext);
	    if (!isNumeric(inputtext))
	    {
	        new str[512];

			format(str, sizeof str, "{FFFFFF}» Kaç tane ekmek kýrýntýsý almak istediðiniz yazýn:");

			return Dialog_Show(playerid, EkmekKirintisi, DIALOG_STYLE_INPUT, "{FFFFFF}Ekmek Kýrýntýsý (Tanesi: {00FF00}$5{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
	    }
	    if (Miktar < 1 || Miktar > 10)
		{
		    new str[512];

			format(str, sizeof str, "{FFFFFF}» Kaç tane ekmek kýrýntýsý almak istediðiniz yazýn:");

			SendSyntaxMessage(playerid, "Minimum 1, maksimum 10 yazabilirsin.");

			return Dialog_Show(playerid, EkmekKirintisi, DIALOG_STYLE_INPUT, "{FFFFFF}Ekmek Kýrýntýsý (Tanesi: {00FF00}$5{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
		}
		if (PlayerInfo[playerid][pYemTurleri][EKMEK_KIRINTISI] + Miktar > 10)
		{
		    new str[512];

			format(str, sizeof str, "{FFFFFF}» Kaç tane ekmek kýrýntýsý almak istediðiniz yazýn:");

			SendSyntaxMessage(playerid, "Daha fazla Ekmek Kýrýntýsý alamazsýn.", 10-PlayerInfo[playerid][pYemTurleri][EKMEK_KIRINTISI]);

			return Dialog_Show(playerid, EkmekKirintisi, DIALOG_STYLE_INPUT, "{FFFFFF}Ekmek Kýrýntýsý (Tanesi: {00FF00}$5{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
		}
		if (PlayerInfo[playerid][pCash] < Miktar*5)
		{
		    new str[512];

			format(str, sizeof str, "{FFFFFF}» Kaç tane ekmek kýrýntýsý almak istediðiniz yazýn:");

			SendSyntaxMessage(playerid, "Paranýz yetersiz.");

			return Dialog_Show(playerid, EkmekKirintisi, DIALOG_STYLE_INPUT, "{FFFFFF}Ekmek Kýrýntýsý (Tanesi: {00FF00}$5{FFFFFF})", str, "{FFFFFF}Satýn Al", "{FFFFFF}Iptal");
		}
		SendSyntaxMessage(playerid, "{00FF00}$%d {FFFFFF}karþýlýðýnda toplam %d sülünes yemi aldýn.", Miktar*5, Miktar);
		PlayerInfo[playerid][pYemTurleri][EKMEK_KIRINTISI] += Miktar;
		GiveCash(playerid, -Miktar*5);
	}
	return true;
}



stock OyuncuBaliklari(playerid)
{
	new str[1024], string[228];
	strcat(str, "{FFFFFF}Balýk\t{FFFFFF}Gram\n");
	new baliklar = 0, fiyat;

	for (new i; i < 10; i++)
	{
	    if (PlayerInfo[playerid][pBalikID][i] != -1)
	    {
	        fiyat = floatround(PlayerInfo[playerid][pBalikGram][i] * BalikTurleri[PlayerInfo[playerid][pBalikID][i]][GramFiyat]);

	        format(string, sizeof string, "{FFFFFF}%s\t{FFFFFF}%d\t{00FF00}%s\n", BalikTurleri[PlayerInfo[playerid][pBalikID][i]][TurAdi], PlayerInfo[playerid][pBalikGram][i]);
	        strcat(str, string);

	        baliklar++;
	    }
	}

	strcat(str, " \n");
	strcat(str, "{FF0000}Hepsini Sat");
	if (baliklar < 1) return SendSyntaxMessage(playerid, "Hiç balýðýnýz yok.");
	format(string, sizeof string, "{FFFFFF}Balýklarýnýz {FF0000}(%d/10)",baliklar);
	Dialog_Show(playerid, Baliklar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Sat", "Kapat");
	return 1;
}

Dialog:Baliklar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (strcmp(inputtext, " ", false) == 0)
	        return OyuncuBaliklari(playerid);

	    if (strfind(inputtext, "Hepsini Sat", true) != -1)
	    {
	        Dialog_Show(playerid, HepsiniSat, DIALOG_STYLE_MSGBOX, "{FF0000}» {FFFFFF}Balýk Satma", "{FFFFFF}Tüm balýklarý {2ECC71}%s {FFFFFF}karþýlýðýnda satmak istediðinize emin misiniz?", "Sat", "Geri", FormatNumber(BalikToplamPara(playerid)));
	    }
	    else
	    {
	        new id = GetBalikIDWithName(inputtext);

	        if (id != -1)
	        {
	            SetPVarInt(playerid, "BalikID",id);
	            Dialog_Show(playerid, BalikSat, DIALOG_STYLE_MSGBOX, "{FF0000}» {FFFFFF}Balýk Satma", "{2ECC71}%s {FFFFFF}adlý balýðý satmak istediðine emin misin?", "Sat", "Geri",BalikTurleri[id][TurAdi]);
	        }
	    }
	}
	return 1;
}

Dialog:BalikSat(playerid, response, listitem, inputtext[])
{
	if (!response) return OyuncuBaliklari(playerid);
	if (response)
	{
	    new id = GetPVarInt(playerid, "BalikID"), fiyat;
	    new balikid = -1;
	    for (new i; i < 10; i++)
	    {
	        if (PlayerInfo[playerid][pBalikID][i] == id)
	        {
				balikid = i;
				break;
	        }
	    }
	    if (balikid != -1)
	    {
			fiyat = floatround(PlayerInfo[playerid][pBalikGram][balikid] * BalikTurleri[PlayerInfo[playerid][pBalikID][balikid]][GramFiyat]);

	        GiveCash(playerid, fiyat);

	        SendSyntaxMessage(playerid, "Balýk satýldý. {FF0000}(%s)", fiyat);

	        PlayerInfo[playerid][pBalikID][balikid] = -1;
	        PlayerInfo[playerid][pBalikGram][balikid] = 0;
	    }
	}
	return 1;
}

BalikToplamPara(playerid)
{
	new toplam = 0;
	for (new i; i < 10; i++)
	{
	    if (PlayerInfo[playerid][pBalikID][i] != -1)
	    {
	        toplam += floatround(PlayerInfo[playerid][pBalikGram][i] * BalikTurleri[PlayerInfo[playerid][pBalikID][i]][GramFiyat]);
	    }
	}
	return toplam;
}
stock GetBalikIDWithName(name[])
{
	for (new i; i<sizeof(BalikTurleri); i++)
	{
	    if (!strcmp(name, BalikTurleri[i][TurAdi], true))
	    {
	        return i;
	    }
	}
	return -1;
}
Dialog:HepsiniSat(playerid, response, listitem, inputtext[])
{
	if (!response) return OyuncuBaliklari(playerid);
	if (response)
	{
	    GiveCash(playerid, BalikToplamPara(playerid));
	    SendSyntaxMessage(playerid, "Tüm balýklar satýldý. {f5f5f5}(%s)", FormatNumber(BalikToplamPara(playerid)));
	    for (new i; i<10; i++)
	    {
	        PlayerInfo[playerid][pBalikID][i] = -1;
	        PlayerInfo[playerid][pBalikGram][i] = 0;
	    }
	}
	return 1;
}

YemiVarmi(playerid)
{
	if (PlayerInfo[playerid][pYemTurleri][KARIDES] == 0 && PlayerInfo[playerid][pYemTurleri][SULUNES] == 0 && PlayerInfo[playerid][pYemTurleri][EKMEK_KIRINTISI] == 0)
	    return false;

	return true;
}

forward BalikTutma(playerid);
public BalikTutma(playerid)
{
    new balikorani = 0, pYemTercihi;

	if (PlayerInfo[playerid][pBalikOrani] > gettime()) balikorani += 15;

	if (PlayerInfo[playerid][pYemTurleri][KARIDES] >= 1)
	{
	    balikorani = 25;
	    pYemTercihi = KARIDES;
	}

	if (PlayerInfo[playerid][pYemTurleri][KARIDES] == 0 && PlayerInfo[playerid][pYemTurleri][SULUNES] >= 1)
	{
	    balikorani = 15;
        pYemTercihi = SULUNES;
	}
	if (PlayerInfo[playerid][pYemTurleri][KARIDES] == 0 && PlayerInfo[playerid][pYemTurleri][SULUNES] == 0 && PlayerInfo[playerid][pYemTurleri][EKMEK_KIRINTISI] >= 1)
	{
		balikorani = 10;
        pYemTercihi = EKMEK_KIRINTISI;
	}

	switch (PlayerInfo[playerid][pAdmin])
	{
	    case 1..1337: balikorani += 3;
	}

	if (random(50) < balikorani)
	{
	    new slot = GetPlayerFish_FreeSlot(playerid);

		if (slot == -1)
		{
		    BalikTimer[playerid] = -1;
			ClearAnimations(playerid);
			TogglePlayerControllable(playerid, true);
			SendClientMessageEx(playerid, 0xb2a3b5AA, "Daha fazla balýk tutamazsýn.");
			return 1;
		}

		new id = randomEx(0, sizeof(BalikTurleri)-1), gram = randomEx(BalikTurleri[id][MinAgirlik], BalikTurleri[id][MaxAgirlik]);

		/*if (BoyleBalikVar(playerid, id))
		{
  		 	BalikTimer[playerid] = -1;
	     	RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "OltaSlot"));
		 	SetPVarInt(playerid, "OltaSlot", -1);
	     	ClearAnimations(playerid);
	     	TogglePlayerControllable(playerid, true);
	     	SendSyntaxMessage(playerid, "Balýk yakalayamadýnýz.");
	     	return 1;
		}*/

		if (PlayerInfo[playerid][pBalikOrani] > gettime()) balikorani += 10;

	    PlayerInfo[playerid][pYemTurleri][pYemTercihi] -= 1;

		new fiyat = floatround(gram * BalikTurleri[id][GramFiyat]);

		PlayerInfo[playerid][pBalikID][slot] = id;
		PlayerInfo[playerid][pBalikGram][slot] = gram;

		SendClientMessageEx(playerid, 0xb2a3b5AA, "Bir %s(GR:%d) balýðý yakaladýnýz!",BalikTurleri[id][TurAdi],gram,FormatNumber(fiyat));
		new string[455];
	   	format(string, sizeof(string), "* %s oltayý hýzlýca kendine doðru çeker ve bir %s balýðý tutar.", GetNameEx(playerid),BalikTurleri[id][TurAdi]);
    	SetPlayerChatBubble(playerid, string, COLOR_CYAN, 30.0, 10000);

	 	BalikTimer[playerid] = -1;
		SetPVarInt(playerid, "OltaSlot", -1);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid, true);
	}
	else
	{
	     BalikTimer[playerid] = -1;
		 SetPVarInt(playerid, "OltaSlot", -1);
	     ClearAnimations(playerid);
	     TogglePlayerControllable(playerid, true);
	     SendClientMessage(playerid, 0xb2a3b5AA, "Balýk yakalayamadýnýz.");
	}
	return 1;
}

stock BoyleBalikVar(playerid,id)
{
	for (new i; i<10; i++)
	{
	    if (PlayerInfo[playerid][pBalikID][i] == id)
	    {
	        return 1;
	    }
	}
	return 0;
}

CMD:genelyardim(playerid, params[])
{
	SCM(playerid, COLOR_SERVER2, "* Yardým, Genel");
	SCM(playerid, COLOUR_ALTO, "/envanter, /yerdenal, /arac, /paraver, /ehliyetal, /ehliyetgoster, /gps, /graffiti");
	SCM(playerid, COLOUR_ALTO, "/giris, /cikis, /ev, /isyeri, /admins, /helpers, /ceset, /ustunuara, /animasyonlar, /sonreklamlar");
	SCM(playerid, COLOUR_ALTO, "/rapor, /soru, /kiyafetlerim, /aksesuar, /cpsifirla, /mikrofon, /bugkurtar, /reklamlar");
    SCM(playerid, COLOUR_ALTO, "/reklam, /plakakontrol, /zar, /saat, /fare, /sonarac, /bagis, /evgps, /isyerigps");

	return 1;
}

alias:uyusturucuyardim("uyardim");
CMD:uyusturucuyardim(playerid)
{
	SCM(playerid, COLOR_SERVER2, "* Yardým, Uyuþturucu");
	SendClientMessageEx(playerid, COLOUR_ORANGE, "/u ya da /uyusturucularim: {FFFFFF}uyuþturucularýný yönetmeye yarar");
	SendClientMessageEx(playerid, COLOUR_ORANGE, "/tohumtemizle: {FFFFFF}saksýda ekili tohumlara el koymaya yarar (lspd komutu)");
	SendClientMessageEx(playerid, COLOUR_ORANGE, "/paketsil: {FFFFFF}yerdeki uyuþturucu paketlerine el koyar (lspd)");
	SendClientMessageEx(playerid, COLOUR_ORANGE, "/arac paketler: {FFFFFF}araçtaki uyuþturucularý görmeye yarar");
	SendClientMessageEx(playerid, COLOUR_ORANGE, "/yerdenal: {FFFFFF}yerdeki paketi almanýza yarar");

	if(PlayerInfo[playerid][pAdmin] >= ADMIN_LEVEL_1)

	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "Yönetici Komutlarý:");
		SendClientMessageEx(playerid, COLOUR_ORANGE, "/atohumtemizle:{FFFFFF} ekilmiþ bir tohumun ürünlerine el koymaya yarar");
	}

	if(PlayerInfo[playerid][pAdmin] > ADMIN_LEVEL_1)
	{
		SendClientMessageEx(playerid, COLOUR_ORANGE, "/auver:{FFFFFF} yönetici komutuyla uyuþturucu vermeye yarar");
		SendClientMessageEx(playerid, COLOUR_ORANGE, "/uyusturucuduzenle:{FFFFFF} bir kullanýcýnýn uyuþturucusunu düzenlemeye yarar");
	}
	return 1;
}

CMD:silahyardim(playerid, params[])
{
	SCM(playerid, COLOR_SERVER2, "* Yardým, Silah");
	SCM(playerid, COLOUR_ALTO, "/silah: tüm silah komutlarý");
	return 1;
}

CMD:evyardim(playerid, params[])
{
	SCM(playerid, COLOR_SERVER2, "* Yardým, Ev");
	SCM(playerid, COLOUR_ALTO, "/ev, /evmenu, /ev satinal, /ddo, /dshout");

	return 1;
}

alias:isyeriyardim("mekanyardim");
CMD:isyeriyardim(playerid, params[])
{
	SCM(playerid, COLOR_SERVER2, "* Yardým, Ýþyeri");
	SCM(playerid, COLOUR_ALTO, "/isyeri veya /iþyeri, /iþyeri satinal, /iþyerimenu");

	return 1;
}

CMD:ayarlaryardim(playerid, params[])
{
	SCM(playerid, COLOR_SERVER2, "* Yardým, Ayarlar");
	SCM(playerid, COLOUR_ALTO, "/ayarlar, /tog");

	return 1;
}

CMD:telsizyardim(playerid, params[])
{
	SCM(playerid, COLOR_SERVER2, "* Yardým, Telsiz");
	SCM(playerid, COLOUR_ALTO, "/kanal, /slotayarla, /telsizsifre, /telsizsifredegis, /telsizuyeler, /kanaldanat, /t-/r, /yt, /rr");

	return 1;
}

CMD:meslekyardim(playerid, params[])
{
	if(PlayerInfo[playerid][pSideJob] == JOB_PIZZA)
	{
	    SCM(playerid, COLOR_SERVER2, "* Yardým, Kuryecilik Mesleði");
	    SCM(playerid, COLOUR_ALTO, "/kurye - sistemi baþlatmanýza yarar. Herhangi bir lokasyon belirler.");
		SCM(playerid, COLOUR_ALTO, "/pizza - motordan indikten sonra elinize pizza kutusunu alýrsýnýz.");
		SCM(playerid, COLOUR_ALTO, "/mak - meslek aracýný kiralayabilirsiniz.");
		SCM(playerid, COLOUR_ALTO, "/makb - meslek aracýnýn kirasýný bitirebilirsiniz.");
	}

	if(PlayerInfo[playerid][pJob] == JOB_TAXI)
	{
	    SCM(playerid, COLOR_SERVER2, "* Yardým, Taksicilik Mesleði");
	    SCM(playerid, COLOUR_ALTO, "/taksi isbasi - iþbaþý yapmanýzý ve iþbaþýndan çýkmanýzý saðlar.");
		SCM(playerid, COLOUR_ALTO, "/taksi ucret - taksimetre ücretini belirlemenizi saðlar.");
		SCM(playerid, COLOUR_ALTO, "/taksi kabul - gelen taksi çaðrýsýný kabul edersiniz.");
		SCM(playerid, COLOUR_ALTO, "/mak - meslek aracýný kiralayabilirsiniz.");
		SCM(playerid, COLOUR_ALTO, "/makb - meslek aracýnýn kirasýný bitirebilirsiniz.");
		SCM(playerid, COLOUR_ALTO, "Portland merkezinde daha çok para kazanýrsýnýz.");
	}

	else if(PlayerInfo[playerid][pJob] == JOB_MECHANIC)
	{
	    SCM(playerid, COLOR_SERVER2, "* Yardým, Tamircilik Mesleði");
	    SCM(playerid, COLOUR_ALTO, "/benzindoldur - benzini biten araca benzin doldurabilirsiniz.");
		SCM(playerid, COLOUR_ALTO, "/tamir - aracýn tipine göre tamir isteði gönderebilirsiniz.");
		SCM(playerid, COLOUR_ALTO, "/aracboya - bir aracý boyayabilirsiniz.");
		SCM(playerid, COLOUR_ALTO, "/araccek - bir aracý park bölgesine çekebilirsiniz.");
		SCM(playerid, COLOUR_ALTO, "/materyalal - mesleði yapmak için gereken materyalleri satýn alabilirsiniz.");
		SCM(playerid, COLOUR_ALTO, "/materyallerim - güncel materyallerinizi kontrol edebilirsiniz.");
		SCM(playerid, COLOUR_ALTO, "/mak - meslek aracýný kiralayabilirsiniz.");
		SCM(playerid, COLOUR_ALTO, "/makb - meslek aracýnýn kirasýný bitirebilirsiniz.");
		SCM(playerid, COLOR_SERVER2, sprintf("Güncel meslek puanýnýz: %d", PlayerInfo[playerid][pCareer]));
	}
	else if(PlayerInfo[playerid][pJob] == JOB_BALIKCI)
	{
	    SCM(playerid, COLOR_SERVER2, "* Yardým, Balýkçý Mesleði");
	    SCM(playerid, COLOUR_ALTO, "/baliktut - Ýskelede balýk tutarsýnýz.");
	}
    else if(PlayerInfo[playerid][pJob] == JOB_TASIMACILIK)
	{
	    SCM(playerid, COLOR_SERVER2, "* Yardým, Taþýmacýlýk Mesleði");
	    SCM(playerid, COLOUR_ALTO, "/tasimacilik - Genel komutlarý listeler.");
		SCM(playerid, COLOUR_ALTO, "/tasimacilik nokta - Yük alacaðýnýz noktayý haritanýzda iþaretler.");
		SCM(playerid, COLOUR_ALTO, "/tasimacilik basla - Yük alarak mesleðe baþlamanýzý saðlar.");
		SCM(playerid, COLOR_SERVER2, sprintf("Güncel meslek puanýnýz: %d", PlayerInfo[playerid][pCareer]));
	}
	else if(PlayerInfo[playerid][pJob] == JOB_TRUCKER)
	{
	    SCM(playerid, COLOR_SERVER2, "* Yardým, Taþýmacýlýk Mesleði");
	    SCM(playerid, COLOUR_ALTO, "/tasimacilik - yeni bir teslimat noktasý belirler.");
		SCM(playerid, COLOUR_ALTO, "/koli - kolileri kontrol edebildiðiniz komutlar.");
		SCM(playerid, COLOR_SERVER2, sprintf("Güncel meslek puanýnýz: %d", PlayerInfo[playerid][pCareer]));

        switch(PlayerInfo[playerid][pCareer])
		{
		    case 0..11: SCM(playerid, COLOR_SERVER2, "Kullanýlabilir araçlar: Picador, Sadler, Bobcat, Walton, Yosemite.");
			case 12..23: SCM(playerid, COLOR_SERVER2, "Kullanýlabilir araçlar: Picador, Sadler, Bobcat, Walton, Yosemite, Pony, Berkley's RC Van, Burrito.");
		    case 24..31: SCM(playerid, COLOR_SERVER2, "Kullanýlabilir araçlar: Picador, Sadler, Bobcat, Walton, Yosemite, Pony, Berkley's RC Van, Burrito, Rumpo, Boxville.");
		    case 32..47:
			{
				SCM(playerid, COLOR_SERVER2, "Kullanýlabilir araçlar: Picador, Sadler, Bobcat, Walton, Yosemite, Pony, Berkley's RC Van, Burrito, Rumpo, Boxville.\n");
                SCM(playerid, COLOR_SERVER2, "Benson, Mule, DFT-30, Tanker, Securicar.");
			}
			case 48..58:
			{
				SCM(playerid, COLOR_SERVER2, "Kullanýlabilir araçlar: Picador, Sadler, Bobcat, Walton, Yosemite, Pony, Berkley's RC Van, Burrito, Rumpo, Boxville.\n");
                SCM(playerid, COLOR_SERVER2, "Benson, Mule, DFT-30, Tanker, Securicar, Yankee, Flatbed.");
			}
			default:
			{
				SCM(playerid, COLOR_SERVER2, "Kullanýlabilir araçlar: Picador, Sadler, Bobcat, Walton, Yosemite, Pony, Berkley's RC Van, Burrito, Rumpo, Boxville.\n");
                SCM(playerid, COLOR_SERVER2, "Benson, Mule, DFT-30, Tanker, Securicar, Yankee, Flatbed, Òðåéëåðû.");
			}
		}
	}
	return 1;
}

CMD:rolyardim(playerid, params[])
{
	SCM(playerid, COLOR_SERVER2, "* Yardým, Rol");
	SCM(playerid, COLOUR_ALTO, "/me, /do, /shout, /low, /pm, /reply, /ame, /ado, /dene, /ddo, /ozellik, /pmengel, /engellistesi, /e(ikinci dil)");
	SCM(playerid, COLOUR_ALTO, "/sme, /sdo, /carwhisper, /whisper, /selamlas, /boombox, /aksiyon, /sandalye, /masasandalye, /dolow, /melow");

	return 1;
}

CMD:mermiyardim(playerid, params[])
{
	static const dlg[] = "{ffc46a}M1911 /M1911 (susturuculu){FFFFFF}\nKullanýlabilir þarjörler:\n\
			- .45 ACP (7 mermili)\n\
			- .45 ACP .ext (14 mermili)\n\n\
			{ffc46a}Desert Eagle{FFFFFF}\nKullanýlabilir þarjörler:\n\
			- .50AE (7 mermili)\n\
			- .50AE .ext (14 mermili)\n\n\
			{ffc46a}Shotgun /Sawn-off Shotgun{FFFFFF}\nKullanýlabilir þarjörler:\n\
			- 12-G BIRDSHOT (6 mermili)\n\
    		- 12-G BUCKSHOT (6 mermili)\n\
    		- 12-G SLUG (6 mermili)\n\
    		- 12-G BEANBAG (6 mermili) - öldürücü oolmayan\n\n\
			{ffc46a}Tec-9 /MP5 /UZI{FFFFFF}\nKullanýlabilir þarjörler:\n\
			- 9x19mm (30 mermili)\n\
			- 9x19mm .ext (60 mermili)\n\n\
			{ffc46a}Country Rifle /Sniper Rifle{FFFFFF}\nKullanýlabilir þarjörler:\n\
			- 7.62x51mm (4 mermili)\n\n\
			{ffc46a}M4{FFFFFF}\nKullanýlabilir þarjörler:\n\
			- 5.56x45mm (30 mermili)\n\
			- 5.56x45mm T (30 mermili)\n\
			- 5.56x45mm (büyük þarjör) (60 mermili)\n\
			- 5.56x45mm (plastik) (30 mermili) - öldürücü olmayan\n\n\
			{ffc46a}AK-47{FFFFFF}\nKullanýlabilir þarjörler:\n\
			- 7.62x39mm (30 mermili)\n\
			- 7.62x39mm T (30 mermili)\n\
			- 7.62x39mm (büyük þarjör) (60 mermili)";

	new mes[sizeof(dlg)];
	format(mes, sizeof(mes), dlg);

	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "Mermi", mes, "X", "");
	return 1;
}

CMD:birlikyardim(playerid, params[])
{
	if (PlayerInfo[playerid][pFaction] == 0)
		return SCM(playerid, -1, "Bir birlikte olmalýsýn. Eðer birlik kurmak istiyorsan: /birlikkur");

	SCM(playerid, COLOR_SERVER2, "* Yardým, Birlik");

	if (IsPlayerFactionPolice(playerid))
	{
		SCM(playerid, COLOUR_ALTO, "[LSPD] /kelepce (/m)egafon /mdc /(gov)ernment /rozetgoster /ekiplistesi /pdkisayol");
		SCM(playerid, COLOUR_ALTO, "[LSPD] (/r)adyo(telsiz) (/r 10-27) (/r 10-28) /yt /barikat /barikatliste /tutukla /tabela");
		SCM(playerid, COLOUR_ALTO, "[LSPD] /elkoy /gozalti /apb /tutukla /gisedurum /(sp)ike /cctv /cctvayril /aracicek");
		SCM(playerid, COLOUR_ALTO, "[LSPD] /aracbagla /callsign /rozet /gate /fbirim /siren /plakakontrol /beanbag");
		SCM(playerid, COLOUR_ALTO, "[LSPD] /kilitkir /kapikir /takip /aracaat /izinlerim /plakabelirle /cezakes /araccezakes ");
		SCM(playerid, COLOUR_ALTO, "[LSPD] /cezakontrol /araccezakontrol /ihbarkabul /radar /aractamir /birlikuyeleri /snakecam /flashbang /taser");
		SCM(playerid, COLOUR_ALTO, "[LSPD] /birlikaksesuar /bagajara /torpidoara /mulkara /ustunuara /callsign /sokak /hizkamerasi");
	}
    else if (IsPlayerFactionCity(playerid))
	{
		SCM(playerid, COLOUR_ALTO,"[CITY] /birlikaktif /(d)epartman /(f)action(birlik) /rozetgoster /(r)adyo /(m)egafon /(gov)ernment");
		SCM(playerid, COLOUR_ALTO,"[CITY] /barikat /barikatliste /kelepce /kelepcecikar /siren /yt(yakýn telsiz)");
	}
	else if (IsPlayerFactionMedic(playerid))
	{
		SCM(playerid, COLOUR_ALTO,"[MEDIC] /birlikaktif (/d)epartman (/f)action(birlik) /rozetgoster (/r)adio /yt /barikat /barikatliste /sedye");
		SCM(playerid, COLOUR_ALTO,"[MEDIC] /iyilestir /aracaat /tedavi /siren (/m)egafon (/gov)ernment /recete /terapi /birlikaksesuar");
	}
	else if (IsPlayerFactionFire(playerid))
	{
		SCM(playerid, COLOUR_ALTO,"[FIRE] /birlikaktif (/d)epartman (/f)action(birlik) /rozetgoster (/r)adio /yt /barikat /barikatliste /sedye");
		SCM(playerid, COLOUR_ALTO,"[FIRE] /iyilestir /aracaat /tedavi /siren (/m)egafon (/gov)ernment /birlikaksesuar /choke");
	}
	else if (IsPlayerFactionDocs(playerid))
	{
		SCM(playerid, COLOUR_ALTO,"[DoC] /birlikaktif /(d)epartman /(f)action(birlik)  /rozetgoster /(r)adio /yt /(m)egafon /(gov)ernment /serbestbirak /kogusagonder");
		SCM(playerid, COLOUR_ALTO,"[DoC] /siren /gozalti /barikat /barikatliste /kelepce /kelepcecikar /frisk /taser /beanbag /kogusagonder");
	}
	else if (IsPlayerFactionNews(playerid))
	{
		SCM(playerid, COLOUR_ALTO,"[HABER] /birlikaktif /(f)action /yayinbaslat /yayinbitir /yayindavet /yayindancikar /basinkarti /basingoster");
	}
	else if (IsPlayerFactionNewsOff(playerid))
	{
		SCM(playerid, COLOUR_ALTO,"[HABER] /birlikaktif /(f)action /yayinbaslat /yayinbitir /yayindavet /yayindancikar /basinkarti /basingoster");
	}
	else
	{
		SCM(playerid, COLOUR_ALTO, "/birlik");
	}
	return 1;
}

CMD:yardim(playerid)
{
	SCM(playerid, COLOR_SERVER2, "* Yardým, Komutlar");
	SCM(playerid, COLOUR_ALTO, "/genelyardim, /birlikyardim, /ayarlaryardim, /meslekyardim, /silahyardim, /balikyardim");
	SCM(playerid, COLOUR_ALTO, "/rolyardim, /evyardim, /isyeriyardim, /telsizyardim, /uyusturucuyardim");

	return 1;
}

CMD:balikyardim(playerid)
{
	SCM(playerid, COLOR_SERVER2, "* Yardým, Balýkçýlýk");
	SCM(playerid, COLOUR_ALTO, "/baliklarim, /baliktut, /balikdurdur, /baliksat");
	SCM(playerid, COLOUR_ALTO, "Oltayý aksesuar dükkanlarýndan alabilirsiniz. /gps");
	SCM(playerid, COLOUR_ALTO, "Balýk tutmak için su kenarlarýnda olmanýz yeterlidir.");
	return 1;
}

alias:tog("hudkapat", "gizle");
CMD:tog(playerid, params[])
{
	new option[16];
	if (sscanf(params, "s[16]", option))
	{
		SendHelpMessage(playerid, "/tog [seçenekler]");
		SendSyntaxMessage(playerid, "isim hud ooc giriscikis reklamlar hukumet canbar");
		SendSyntaxMessage(playerid, "pm adminuyari birliksohbet haberler afkbilgi giris animbilgi");
		return 1;
	}

	if (CompareStrings(option, "isim"))
	{
		if (PlayerInfo[playerid][pSettings] & togName)
		{
			PlayerInfo[playerid][pSettings] &= ~togName;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			foreach(new i : Player)
			{
				ShowPlayerNameTagForPlayer(playerid, i, 1);
			}
			SendSyntaxMessage(playerid, "Oyuncularýn isimlerini görünür yaptýnýz.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togName;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			foreach(new i : Player)
			{
				ShowPlayerNameTagForPlayer(playerid, i, 0);
			}
			SendSyntaxMessage(playerid, "Oyuncularýn isimlerini görünmez yaptýnýz.");
		}
	}

	else if (CompareStrings(option, "hud"))
	{
		if (PlayerInfo[playerid][pSettings] & togHUD)
		{
			PlayerInfo[playerid][pSettings] &= ~togHUD;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			if(!(PlayerInfo[playerid][pSettings] & yesMHUD)){
				ShowHudTextDrawModern(playerid);
			} else ShowHudTextDraw(playerid);
			SendSyntaxMessage(playerid, "HUD'u açtýn.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togHUD;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			HideHudTextDraw(playerid);
			SendSyntaxMessage(playerid, "HUD'u kapattýn. ");
		}
	}

	else if (CompareStrings(option, "mhud"))
	{
		if ((PlayerInfo[playerid][pSettings] & togHUD)) return SendServerMessage(playerid, "Ýlk önce Hud'u açýn.");
		if ((PlayerInfo[playerid][pSettings] & yesMHUD))
		{
			PlayerInfo[playerid][pSettings] &= ~yesMHUD;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			ShowHudTextDrawModern(playerid);
			SendSyntaxMessage(playerid, "Modern HUD'u açtýn.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= yesMHUD;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			HideHudTextDrawModern(playerid);
			ShowHudTextDraw(playerid);
			SendSyntaxMessage(playerid, "Modern HUD'u kapattýn. ");
		}
	}

	else if (CompareStrings(option, "ooc"))
	{
		if (PlayerInfo[playerid][pSettings] & togOOC)
		{
			PlayerInfo[playerid][pSettings] &= ~togOOC;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "OOC Duyuru Kanalýný aktif ettin.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togOOC;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "OOC Duyuru Kanalýný pasif duruma getirdin.");
		}
	}

	else if (CompareStrings(option, "giriscikis"))
	{
		if (PlayerInfo[playerid][pSettings] & togJoin)
		{
			PlayerInfo[playerid][pSettings] &= ~togJoin;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Size en yakýn oyuncularýn giriþ/çýkýþ bilgilerini etkinleþtirdiniz.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togJoin;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Size en yakýn oyuncularýn giriþ/çýkýþ bilgilerini devre dýþý býraktýnýz.");
		}
	}

	else if (CompareStrings(option, "reklamlar"))
	{
		if (PlayerInfo[playerid][pSettings] & togAdv)
		{
			PlayerInfo[playerid][pSettings] &= ~togAdv;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Reklamlarýn görünmesini etkinleþtirdiniz. ");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togAdv;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Reklamlarýn görüntülenmesini devre dýþý býraktýnýz.");
		}
	}

	else if (CompareStrings(option, "hukumet"))
	{
		if (PlayerInfo[playerid][pSettings] & togGov)
		{
			PlayerInfo[playerid][pSettings] &= ~togGov;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Hükümet haberlerinin görüntülenmesini aktifleþtirdiniz. ");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togGov;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Hükümet haberlerinin görünmesini devre dýþý býraktýnýz.");
		}
	}

	else if (CompareStrings(option, "pm"))
	{
		if (PlayerInfo[playerid][pSettings] & togPM)
		{
			PlayerInfo[playerid][pSettings] &= ~togPM;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "PM almayý etkinleþtirdiniz.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togPM;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid,"PM almayý devre dýþý býraktýnýz.");
		}
	}

	else if (CompareStrings(option, "dorenk"))
	{
		if (PlayerInfo[playerid][pSettings] & togDoSetting)
		{
			PlayerInfo[playerid][pSettings] &= ~togDoSetting;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Do rengini yeþil yaptýn.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togDoSetting;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid,"Do rengini mor yaptýnýz.");
		}
	}

	else if (CompareStrings(option, "adminuyari"))
	{
		if (PlayerInfo[playerid][pSettings] & togAdmCmds)
		{
			PlayerInfo[playerid][pSettings] &= ~togAdmCmds;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Admin bildirimlerini aktifleþtirdiniz.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togAdmCmds;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Admin bildirimlerini devre dýþý býraktýnýz.");
		}
	}

	else if (CompareStrings(option, "adminchat"))
	{
		if (PlayerInfo[playerid][pSettings] & togAdmChat)
		{
			PlayerInfo[playerid][pSettings] &= ~togAdmChat;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Admin chat aktifleþtirdiniz.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togAdmChat;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Admin chat devre dýþý býraktýnýz.");
		}
	}

	else if (CompareStrings(option, "helperchat"))
	{
		if (!IsTester(playerid, 1) && !CheckAdmin(playerid, ADMIN_LEVEL_1)) return SendNotAdmin(playerid);

		if (PlayerInfo[playerid][pSettings] & togTester)
		{
			PlayerInfo[playerid][pSettings] &= ~togTester;
			SendServerMessage(playerid, "Helper sohbeti þu anda aktif.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togTester;
			SendServerMessage(playerid, "Helper sohbeti þu anda deaktif.");
		}
	}

	else if (CompareStrings(option, "birliksohbet"))
	{
		if (PlayerInfo[playerid][pSettings] & togFaction)
		{
			PlayerInfo[playerid][pSettings] &= ~togFaction;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Birlik mesajlarýnýn görüntülenmesini aktifleþtirdiniz.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togFaction;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Birlik mesajlarýnýn görüntülenmesini devre dýþý býraktýnýz.");
		}
	}

	else if (CompareStrings(option, "haberler"))
	{
		if (PlayerInfo[playerid][pSettings] & togNews)
		{
			PlayerInfo[playerid][pSettings] &= ~togNews;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Haber bildirimlerini aktifleþtirdiniz.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togNews;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Haber bildirimlerini devre dýþý býraktýnýz. ");
		}
	}

	else if (CompareStrings(option, "afkbilgi"))
	{
		if (PlayerInfo[playerid][pSettings] & togAFK)
		{
			PlayerInfo[playerid][pSettings] &= ~togAFK;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "AFK'ta harcanan zamaný etkinleþtirdiniz. ");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togAFK;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "AFK'ta harcanan zamaný devre dýþý býraktýnýz.");
		}
	}

	else if (CompareStrings(option, "canbar"))
	{
		if (PlayerInfo[playerid][pSettings] & togCustomBar)
		{
			PlayerInfo[playerid][pSettings] &= ~togCustomBar;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Custom can barýný açtýnýz.");
			EnableHealthBarForPlayer(playerid, true);
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togCustomBar;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Custom can barýný kapattýnýz.");
			EnableHealthBarForPlayer(playerid, false);
		}
	}

	else if (CompareStrings(option, "giris"))
	{
		if (PlayerInfo[playerid][pSettings] & togEnter)
		{
			PlayerInfo[playerid][pSettings] &= ~togEnter;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Y tuþu ile giriþ/çýkýþ durumunu etkinleþtirdiniz.");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togEnter;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Y tuþu ile giriþ/çýkýþ durumunu devre dýþý býraktýnýz");
		}
	}

	else if (CompareStrings(option, "raporsoru"))
	{
		if (PlayerInfo[playerid][pSettings] & togService)
		{
			PlayerInfo[playerid][pSettings] &= ~togService;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Hizmetlerin görüntülenmesini etkinleþtirdiniz [RAPOR | DESTEK | TALEP].");
		}
		else
		{
			PlayerInfo[playerid][pSettings] |= togService;
			SQL_SetInteger("users", "settings", PlayerInfo[playerid][pSettings], PlayerInfo[playerid][pID]);
			SendSyntaxMessage(playerid, "Hizmetlerin görüntülenmesini devre dýþý býraktýnýz [RAPOR | DESTEK | TALEP].");
		}
	}
	else
	{
		SendHelpMessage(playerid, "/tog [seçenekler]");
		SendSyntaxMessage(playerid, "isim/hud/ooc/giriscikis/reklamlar/hukumet");
		SendSyntaxMessage(playerid, "pm/adminuyari/adminchat/helperchat/birliksohbet/haberler/afkbilgi/giris");
	}
	return 1;
}

HUD_OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        SpectateCheck(playerid);
    }

	if (newstate == PLAYER_STATE_DRIVER)
	{
		if (!(PlayerInfo[playerid][pSettings] & togHUD))
		{
	 		 for (new i = 0; i < 10; i++)
                         PlayerTextDrawShow(playerid, cWspeedo[playerid][i]);

		}
	}

	if (oldstate == PLAYER_STATE_DRIVER)
	{

	 		 for (new i = 0; i < 10; i++)
                         PlayerTextDrawHide(playerid, cWspeedo[playerid][i]);

	}

    if(newstate == PLAYER_STATE_SPECTATING && IsPlayerLoggedIn(playerid))
    {
        if (CheckAdmin(playerid, ADMIN_LEVEL_1))
        {
            if(StaffInfo[playerid][sSpec] == true)
            {
                ToggleSpectatingPanel(playerid, true);
            }
        }
    }

    else if(oldstate == PLAYER_STATE_SPECTATING && IsPlayerLoggedIn(playerid))
    {
        if (CheckAdmin(playerid, ADMIN_LEVEL_1))
        {
            if(StaffInfo[playerid][sSpec] == false)
            {
                ToggleSpectatingPanel(playerid, false);
            }
        }
    }
	return 1;
}

alias:teles("atp");
CMD:teles(playerid, params[])
{
	if (!CheckAdmin(playerid, ADMIN_LEVEL_1))	return SendNotAdmin(playerid);

	new id;
	if (sscanf(params,"i", id))  pTemp[playerid][pDialogList] = 0;
	else  						pTemp[playerid][pDialogList] = id;

	new string[4096],
		min_tp = pTemp[playerid][pDialogList] * MAX_ADMIN_TELES,
		max_tp = (pTemp[playerid][pDialogList]+1)* MAX_ADMIN_TELES;

	if (pTemp[playerid][pDialogList]) string="{bccd32}Geri{FFFFFF}\n";

	for(new i = min_tp; i < max_tp; i++)
	{
		if (!AdminTeles[i][telesOn]) continue;


		format(string, sizeof(string), "%s<%i>{66FF66}%s\n", string, i, AdminTeles[i][telesMapName]);
	}

	if (AdminTeles[max_tp][telesOn]) format(string, sizeof(string), "%s{bccd32}Ýleri", string);

	Dialog_Show(playerid, AdminTeles, DIALOG_STYLE_LIST,"{FFFFFF}Teleport", string, ">>>", "Ýptal");

	return 1;
}


Dialog:Teles(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	SetPlayerPosEx(playerid, OrTeleports[listitem][tele_x], OrTeleports[listitem][tele_y], OrTeleports[listitem][tele_z]);
	SetInterior(playerid, OrTeleports[listitem][tele_int]);
	SendSyntaxMessage(playerid, "Iþýnlandýnýz -> {FFFFFF}%s", OrTeleports[listitem][tele_name]);
	return 1;
}

Dialog:AdminTeles(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	new	min_tp = pTemp[playerid][pDialogList] * MAX_ADMIN_TELES,
		max_tp = (pTemp[playerid][pDialogList]+1) * MAX_ADMIN_TELES;

	if (pTemp[playerid][pDialogList] && listitem == 0) 	pTemp[playerid][pDialogList]--;
	else if (AdminTeles[max_tp][telesOn] && (
			(listitem == MAX_ADMIN_TELES+1 && pTemp[playerid][pDialogList]) ||
			(listitem == MAX_ADMIN_TELES && !pTemp[playerid][pDialogList])
	))													pTemp[playerid][pDialogList]++;

	else {
		listitem = listitem + pTemp[playerid][pDialogList] * MAX_ADMIN_TELES;
		if (pTemp[playerid][pDialogList]) listitem--;

		SetPlayerPosEx(playerid, AdminTeles[listitem][telesPosX], AdminTeles[listitem][telesPosY], AdminTeles[listitem][telesPosZ]);
		SetInterior(playerid, AdminTeles[listitem][telesInt]);
	}

	min_tp = pTemp[playerid][pDialogList] * MAX_ADMIN_TELES;
	max_tp = (pTemp[playerid][pDialogList]+1) * MAX_ADMIN_TELES;

	new string[4096];
	if (pTemp[playerid][pDialogList]) string="{bccd32}Önceki sayfa{FFFFFF}";

	for(new i = min_tp; i < max_tp; i++)
	{
		if (!AdminTeles[i][telesOn]) continue;
		format(string, sizeof(string), "%s\n<%i>{66FF66}%s", string, i, AdminTeles[i][telesMapName]);
	}

	if (AdminTeles[max_tp][telesOn]) format(string, sizeof(string), "%s\n{bccd32}Ýlerle", string);

	Dialog_Show(playerid, AdminTeles, DIALOG_STYLE_LIST,"{FFFFFF}Iþýnlanma", string, ">>>", "Kapat");


	return 1;
}

Tele_OnGameModeInit()
{
	return mysql_tquery(dbHandle, "SELECT * FROM `ateles`", "LoadDynamicTeles");
}

CMD:mesleknokta(playerid, params[])
{
    if(jobCreateStage[playerid] == 0)
        return SendErrorMessage(playerid, "Önce meslek oluþturmalýsýnýz.");

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Bu komutu araçtayken kullanamazsýnýz.");

    ShowJobCheckpointDialog(playerid);
    return 1;
}

stock ShowJobCheckpointDialog(playerid)
{
    new dialogStr[2048];
    new title[128];

    format(title, sizeof(title), "Meslek Checkpoint Ayarlama - Aþama: %d/10", jobCreateStage[playerid]);

    for(new i = 1; i <= 10; i++)
    {
        if(i == jobCreateStage[playerid])
        {
            format(dialogStr, sizeof(dialogStr), "%s{00FF00}» %d. Checkpoint (Þu anki aþama){FFFFFF}\n", dialogStr, i);
        }
        else if(i < jobCreateStage[playerid])
        {
            format(dialogStr, sizeof(dialogStr), "%s{00AA00}? %d. Checkpoint (Tamamlandý){FFFFFF}\n", dialogStr, i);
        }
        else
        {
            format(dialogStr, sizeof(dialogStr), "%s{CCCCCC}  %d. Checkpoint (Bekliyor){FFFFFF}\n", dialogStr, i);
        }
    }

    strcat(dialogStr, "\n{FFFF00}Þu anki konumunuzu kaydetmek için ilgili numarayý seçin.");

    Dialog_Show(playerid, DIALOG_JOB_CHECKPOINT, DIALOG_STYLE_LIST, title, dialogStr, "Seç", "Ýptal");
}

Dialog:job_checkpoint(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        SendErrorMessage(playerid, "{FF6666}Menüden çýkýþ yaptýnýz, geri dönmek için /mesleknokta");
        return 1;
    }

    new selectedCheckpoint = listitem + 1;
    if(selectedCheckpoint != jobCreateStage[playerid])
    {
        new string[128];
        format(string, sizeof(string), "{FF6666}Önce %d. checkpoint'i ayarlamalýsýnýz!", jobCreateStage[playerid]);
        SendClientMessage(playerid, -1, string);
        ShowJobCheckpointDialog(playerid);
        return 1;
    }
    new Float:x, Float:y, Float:z;
    new interior, vw;

    GetPlayerPos(playerid, x, y, z);
    interior = GetPlayerInterior(playerid);
    vw = GetPlayerVirtualWorld(playerid);
    SaveJobCheckpoint(playerid, selectedCheckpoint, x, y, z, interior, vw);
    jobCreateStage[playerid]++;
    new message[128];
    format(message, sizeof(message), "{00FF00}%d. Checkpoint baþarýyla kaydedildi! {FFFFFF}(%.2f, %.2f, %.2f)",
           selectedCheckpoint, x, y, z);
    SendClientMessage(playerid, -1, message);
    if(jobCreateStage[playerid] > 10)
    {
        SendServerMessage(playerid, "Tüm checkpointler baþarýyla tanýmlandý.");
        jobCreateStage[playerid] = 0;
        currentJobID[playerid] = -1;
    }
    else
    {
        ShowJobCheckpointDialog(playerid);
    }

    return 1;
}

stock SaveJobCheckpoint(playerid, checkpoint, Float:x, Float:y, Float:z, interior, vw)
{
    new query[256];
    new columnName[32];

    format(columnName, sizeof(columnName), "jobCheckpoint%d", checkpoint);
    

    new jobid = currentJobID[playerid];
    printf("[DEBUG] SaveJobCheckpoint: jobid = %d", jobid);

    if(jobid == -1) {
        SendErrorMessage(playerid, "Geçersiz meslek ID'si!");
        return 0;
    }
    mysql_format(dbHandle, query, sizeof(query),
        "UPDATE `jobs` SET `%s` = '%f,%f,%f,%d,%d' WHERE `jobid` = 6",
        columnName, x, y, z, interior, vw);

    mysql_format(dbHandle, query, sizeof(query), "UPDATE `jobs` SET `jobCheckpoint%d` = '%f,%f,%f' WHERE `jobid` = 6", checkpoint, x, y, z);
    
    mysql_tquery(dbHandle, query, "", "");
    return 1;
}

/* --------------------------------[ Gamemode Exit ]-------------------------------- */

